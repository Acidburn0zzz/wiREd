
  typedef __builtin_va_list __gnuc_va_list;
  typedef __gnuc_va_list va_list;


typedef unsigned int size_t;
typedef int ssize_t;
typedef int intptr_t;
typedef unsigned int uintptr_t;
typedef int ptrdiff_t;
typedef unsigned short wchar_t;
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
typedef int errno_t;
typedef long __time32_t;
 typedef long long __time64_t;
typedef __time32_t time_t;
void __attribute__((__cdecl__)) __debugbreak(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void __attribute__((__cdecl__)) __debugbreak(void)
{
  __asm__ __volatile__("int $3");
}
const char *__mingw_get_crt_info (void);

typedef int errcode;
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;
typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;
typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;
typedef struct threadlocaleinfostruct {
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;
} threadlocinfo;
typedef enum _EXCEPTION_DISPOSITION
{
  ExceptionContinueExecution,
  ExceptionContinueSearch,
  ExceptionNestedException,
  ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;
typedef void *LPVOID;
typedef const void *LPCVOID;
typedef int BOOL, *PBOOL, *LPBOOL;
typedef unsigned char BYTE, *PBYTE, *LPBYTE;
typedef unsigned char UCHAR, *PUCHAR;
typedef unsigned short WORD, *PWORD, *LPWORD;
typedef unsigned short USHORT, *PUSHORT;
typedef int INT, *PINT, *LPINT;
typedef unsigned int UINT, *PUINT;
typedef float FLOAT, *PFLOAT;
typedef char *PSZ;
typedef int *LPLONG;
typedef unsigned int DWORD, *PDWORD, *LPDWORD;
typedef unsigned int ULONG, *PULONG;
typedef signed char INT8, *PINT8;
typedef signed short INT16, *PINT16;
typedef signed int INT32, *PINT32;
typedef unsigned char UINT8, *PUINT8;
typedef unsigned short UINT16, *PUINT16;
typedef unsigned int UINT32, *PUINT32;
typedef signed int LONG32, *PLONG32;
typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;
typedef signed long long __attribute__((aligned(8))) INT64, *PINT64;
typedef unsigned long long __attribute__((aligned(8))) UINT64, *PUINT64;
typedef signed long long __attribute__((aligned(8))) LONG64, *PLONG64;
typedef unsigned long long __attribute__((aligned(8))) ULONG64, *PULONG64;
typedef unsigned long long __attribute__((aligned(8))) DWORD64, *PDWORD64;
typedef long INT_PTR, *PINT_PTR;
typedef unsigned long UINT_PTR, *PUINT_PTR;
typedef long LONG_PTR, *PLONG_PTR;
typedef unsigned long ULONG_PTR, *PULONG_PTR;
typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;
typedef long SHANDLE_PTR;
typedef unsigned long HANDLE_PTR;
typedef signed short HALF_PTR, *PHALF_PTR;
typedef unsigned short UHALF_PTR, *PUHALF_PTR;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;
typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef ULONG_PTR KAFFINITY, *PKAFFINITY;
typedef struct _GUID
{
    unsigned int Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char Data4[ 8 ];
} GUID;
typedef GUID *LPGUID;
typedef const GUID *LPCGUID;
typedef GUID IID,*LPIID;
typedef GUID CLSID,*LPCLSID;
typedef GUID FMTID,*LPFMTID;
extern const IID GUID_NULL;
  extern unsigned short ** _imp___pctype;
  extern unsigned short ** _imp___wctype;
  extern unsigned short ** _imp___pwctype;
  extern const unsigned char __newclmap[];
  extern const unsigned char __newcumap[];
  extern pthreadlocinfo __ptlocinfo;
  extern pthreadmbcinfo __ptmbcinfo;
  extern int __globallocalestatus;
  extern int __locale_changed;
  extern struct threadlocaleinfostruct __initiallocinfo;
  extern _locale_tstruct __initiallocalestructinfo;
  pthreadlocinfo __attribute__((__cdecl__)) __updatetlocinfo(void);
  pthreadmbcinfo __attribute__((__cdecl__)) __updatetmbcinfo(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isctype(int _C,int _Type);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isctype_l(int _C,int _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isalpha(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isalpha_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) islower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _islower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isdigit(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isxdigit(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isxdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isspace(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isspace_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) ispunct(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _ispunct_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isalnum(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isalnum_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isprint(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isprint_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isgraph(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isgraph_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) iscntrl(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iscntrl_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) toupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) tolower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _tolower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _tolower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _toupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _toupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __isascii(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __toascii(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iscsymf(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iscsym(int _C);
int __attribute__((__cdecl__)) isblank(int _C);
  int __attribute__((__cdecl__)) iswalpha(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswalpha_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswupper(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswupper_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswlower(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswxdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswxdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswspace(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswspace_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswpunct(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswpunct_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswalnum(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswalnum_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswprint(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswprint_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswgraph(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswgraph_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswcntrl(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcntrl_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswascii(wint_t _C);
  int __attribute__((__cdecl__)) isleadbyte(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isleadbyte_l(int _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towupper(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _towupper_l(wint_t _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towlower(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _towlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswctype(wint_t _C,wctype_t _Type);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswctype_l(wint_t _C,wctype_t _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iswcsymf(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcsymf_l(wint_t _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iswcsym(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcsym_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) is_wctype(wint_t _C,wctype_t _Type);
int __attribute__((__cdecl__)) iswblank(wint_t _C);
  extern int * _imp____mb_cur_max;
  __attribute__ ((__dllimport__)) extern int *__attribute__((__cdecl__)) _errno(void);
  errno_t __attribute__((__cdecl__)) _set_errno(int _Value);
  errno_t __attribute__((__cdecl__)) _get_errno(int *_Value);
  __attribute__ ((__dllimport__)) extern unsigned long __attribute__((__cdecl__)) __threadid(void);
  __attribute__ ((__dllimport__)) extern uintptr_t __attribute__((__cdecl__)) __threadhandle(void);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _memccpy(void *_Dst,const void *_Src,int _Val,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memchr(const void *_Buf ,int _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp_l(const void *_Buf1,const void *_Buf2,size_t _Size,_locale_t _Locale);
  int __attribute__((__cdecl__)) memcmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  void * __attribute__((__cdecl__)) memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _Size) ;
  void * __attribute__((__cdecl__)) mempcpy (void *_Dst, const void *_Src, size_t _Size);
  void * __attribute__((__cdecl__)) memset(void *_Dst,int _Val,size_t _Size);
  void * __attribute__((__cdecl__)) memccpy(void *_Dst,const void *_Src,int _Val,size_t _Size) ;
  int __attribute__((__cdecl__)) memicmp(const void *_Buf1,const void *_Buf2,size_t _Size) ;
  char * __attribute__((__cdecl__)) _strset(char *_Str,int _Val) ;
  char * __attribute__((__cdecl__)) _strset_l(char *_Str,int _Val,_locale_t _Locale) ;
  char * __attribute__((__cdecl__)) strcpy(char * __restrict__ _Dest,const char * __restrict__ _Source);
  char * __attribute__((__cdecl__)) strcat(char * __restrict__ _Dest,const char * __restrict__ _Source);
  int __attribute__((__cdecl__)) strcmp(const char *_Str1,const char *_Str2);
  size_t __attribute__((__cdecl__)) strlen(const char *_Str);
  size_t __attribute__((__cdecl__)) strnlen(const char *_Str,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memmove(void *_Dst,const void *_Src,size_t _Size) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strdup(const char *_Src);
  char *__attribute__((__cdecl__)) strchr(const char *_Str,int _Val);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcmpi(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  int __attribute__((__cdecl__)) strcoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) strcspn(const char *_Str,const char *_Control);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strerror(const char *_ErrMsg) ;
  char *__attribute__((__cdecl__)) strerror(int) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strlwr(char *_String) ;
  char *strlwr_l(char *_String,_locale_t _Locale) ;
  char *__attribute__((__cdecl__)) strncat(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) strncmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  char *strncpy(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset(char *_Str,int _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset_l(char *str,int c,size_t count,_locale_t _Locale) ;
  char *__attribute__((__cdecl__)) strpbrk(const char *_Str,const char *_Control);
  char *__attribute__((__cdecl__)) strrchr(const char *_Str,int _Ch);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strrev(char *_Str);
  size_t __attribute__((__cdecl__)) strspn(const char *_Str,const char *_Control);
  char *__attribute__((__cdecl__)) strstr(const char *_Str,const char *_SubStr);
  char *__attribute__((__cdecl__)) strtok(char * __restrict__ _Str,const char * __restrict__ _Delim) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strupr(char *_String) ;
  __attribute__ ((__dllimport__)) char *_strupr_l(char *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) strxfrm(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _strxfrm_l(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);
  char *__attribute__((__cdecl__)) strdup(const char *_Src) ;
  int __attribute__((__cdecl__)) strcmpi(const char *_Str1,const char *_Str2) ;
  int __attribute__((__cdecl__)) stricmp(const char *_Str1,const char *_Str2) ;
  char *__attribute__((__cdecl__)) strlwr(char *_Str) ;
  int __attribute__((__cdecl__)) strnicmp(const char *_Str1,const char *_Str,size_t _MaxCount) ;
  int __attribute__((__cdecl__)) strncasecmp (const char *, const char *, size_t);
  int __attribute__((__cdecl__)) strcasecmp (const char *, const char *);
  char *__attribute__((__cdecl__)) strnset(char *_Str,int _Val,size_t _MaxCount) ;
  char *__attribute__((__cdecl__)) strrev(char *_Str) ;
  char *__attribute__((__cdecl__)) strset(char *_Str,int _Val) ;
  char *__attribute__((__cdecl__)) strupr(char *_Str) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsdup(const wchar_t *_Str);
  wchar_t *__attribute__((__cdecl__)) wcscat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  wchar_t *__attribute__((__cdecl__)) wcschr(const wchar_t *_Str,wchar_t _Ch);
  int __attribute__((__cdecl__)) wcscmp(const wchar_t *_Str1,const wchar_t *_Str2);
  wchar_t *__attribute__((__cdecl__)) wcscpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  size_t __attribute__((__cdecl__)) wcscspn(const wchar_t *_Str,const wchar_t *_Control);
  size_t __attribute__((__cdecl__)) wcslen(const wchar_t *_Str);
  size_t __attribute__((__cdecl__)) wcsnlen(const wchar_t *_Src,size_t _MaxCount);
  wchar_t *wcsncat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  wchar_t *wcsncpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  wchar_t *__attribute__((__cdecl__)) _wcsncpy_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count,_locale_t _Locale) ;
  wchar_t *__attribute__((__cdecl__)) wcspbrk(const wchar_t *_Str,const wchar_t *_Control);
  wchar_t *__attribute__((__cdecl__)) wcsrchr(const wchar_t *_Str,wchar_t _Ch);
  size_t __attribute__((__cdecl__)) wcsspn(const wchar_t *_Str,const wchar_t *_Control);
  wchar_t *__attribute__((__cdecl__)) wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);
  wchar_t *__attribute__((__cdecl__)) wcstok(wchar_t * __restrict__ _Str,const wchar_t * __restrict__ _Delim) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcserror(int _ErrNum) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) __wcserror(const wchar_t *_Str) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsrev(wchar_t *_Str);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsset(wchar_t *_Str,wchar_t _Val) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcslwr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcslwr_l(wchar_t *_String,_locale_t _Locale) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsupr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcsupr_l(wchar_t *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcsxfrm(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcsxfrm_l(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) wcscoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcscoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  wchar_t *__attribute__((__cdecl__)) wcsdup(const wchar_t *_Str) ;
  int __attribute__((__cdecl__)) wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2) ;
  int __attribute__((__cdecl__)) wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsrev(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsset(wchar_t *_Str,wchar_t _Val) ;
  wchar_t *__attribute__((__cdecl__)) wcslwr(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsupr(wchar_t *_Str) ;
  int __attribute__((__cdecl__)) wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2) ;
typedef void *PVOID;
typedef void *PVOID64;
typedef BYTE BOOLEAN, *PBOOLEAN;
typedef char CHAR, *PCHAR;
typedef short SHORT, *PSHORT;
typedef int LONG, *PLONG;
typedef unsigned short WCHAR, *PWCHAR;
typedef signed long long __attribute__((aligned(8))) LONGLONG, *PLONGLONG;
typedef unsigned long long __attribute__((aligned(8))) ULONGLONG, *PULONGLONG;
typedef ULONGLONG __attribute__((aligned(8))) DWORDLONG, *PDWORDLONG;
typedef CHAR *PCH, *LPCH;
typedef const CHAR *PCCH, *LPCCH;
typedef CHAR *PSTR, *LPSTR, *NPSTR;
typedef const CHAR *PCSTR, *LPCSTR;
typedef WCHAR *PWCH, *LPWCH;
typedef const WCHAR *PCWCH, *LPCWCH;
typedef WCHAR *PWSTR, *LPWSTR, *NWPSTR;
typedef const WCHAR *PCWSTR, *LPCWSTR;
typedef CHAR TCHAR, *PTCHAR;
typedef LPSTR PTSTR, LPTSTR;
typedef LPCSTR PCTSTR, LPCTSTR;
typedef char CCHAR;
typedef DWORD LCID, *PLCID;
typedef WORD LANGID;
typedef DWORD EXECUTION_STATE;
typedef LONG HRESULT;
typedef void *HANDLE;
typedef HANDLE *PHANDLE, *LPHANDLE;
typedef BYTE FCHAR;
typedef WORD FSHORT;
typedef DWORD FLONG;
typedef struct _MEMORY_BASIC_INFORMATION
{
    LPVOID BaseAddress;
    LPVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;
typedef struct _LIST_ENTRY {
  struct _LIST_ENTRY *Flink;
  struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;
typedef struct _SINGLE_LIST_ENTRY {
  struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;
typedef union _SLIST_HEADER {
    ULONGLONG Alignment;
    struct {
        SINGLE_LIST_ENTRY Next;
        WORD Depth;
        WORD Sequence;
    } ;
} SLIST_HEADER, *PSLIST_HEADER;
__attribute__((dllimport)) PSINGLE_LIST_ENTRY __attribute__((__stdcall__)) RtlFirstEntrySList(const SLIST_HEADER*);
__attribute__((dllimport)) void __attribute__((__stdcall__)) RtlInitializeSListHead(PSLIST_HEADER);
__attribute__((dllimport)) PSINGLE_LIST_ENTRY __attribute__((__stdcall__)) RtlInterlockedFlushSList(PSLIST_HEADER);
__attribute__((dllimport)) PSINGLE_LIST_ENTRY __attribute__((__stdcall__)) RtlInterlockedPopEntrySList(PSLIST_HEADER);
__attribute__((dllimport)) PSINGLE_LIST_ENTRY __attribute__((__stdcall__)) RtlInterlockedPushEntrySList(PSLIST_HEADER, PSINGLE_LIST_ENTRY);
__attribute__((dllimport)) WORD __attribute__((__stdcall__)) RtlQueryDepthSList(PSLIST_HEADER);
typedef enum _HEAP_INFORMATION_CLASS {
    HeapCompatibilityInformation,
} HEAP_INFORMATION_CLASS;
typedef struct _FLOATING_SAVE_AREA
{
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Cr0NpxState;
} FLOATING_SAVE_AREA, *PFLOATING_SAVE_AREA;
typedef struct _CONTEXT
{
    DWORD ContextFlags;
    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;
    FLOATING_SAVE_AREA FloatSave;
    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;
    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;
    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;
    BYTE ExtendedRegisters[512];
} CONTEXT;
typedef struct _LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    union {
        struct {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct {
            unsigned BaseMid: 8;
            unsigned Type : 5;
            unsigned Dpl : 2;
            unsigned Pres : 1;
            unsigned LimitHi : 4;
            unsigned Sys : 1;
            unsigned Reserved_0 : 1;
            unsigned Default_Big : 1;
            unsigned Granularity : 1;
            unsigned BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;
typedef CONTEXT *PCONTEXT;
__attribute__((dllimport)) void __attribute__((__stdcall__)) RtlCaptureContext(CONTEXT*);
typedef struct _EXCEPTION_RECORD
{
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD;
typedef struct _EXCEPTION_POINTERS
{
  PEXCEPTION_RECORD ExceptionRecord;
  PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
struct _EXCEPTION_REGISTRATION_RECORD;
typedef DWORD (*PEXCEPTION_HANDLER)(PEXCEPTION_RECORD,struct _EXCEPTION_REGISTRATION_RECORD*,
                                    PCONTEXT,struct _EXCEPTION_REGISTRATION_RECORD **);
typedef struct _EXCEPTION_REGISTRATION_RECORD
{
  struct _EXCEPTION_REGISTRATION_RECORD *Prev;
  PEXCEPTION_HANDLER Handler;
} EXCEPTION_REGISTRATION_RECORD;
typedef LONG (__attribute__((__stdcall__)) *PVECTORED_EXCEPTION_HANDLER)(PEXCEPTION_POINTERS ExceptionInfo);
typedef struct _NT_TIB
{
 struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
 PVOID StackBase;
 PVOID StackLimit;
 PVOID SubSystemTib;
 union {
          PVOID FiberData;
          DWORD Version;
 } ;
 PVOID ArbitraryUserPointer;
 struct _NT_TIB *Self;
} NT_TIB, *PNT_TIB;
struct _TEB;
static inline __attribute__((always_inline)) struct _TEB * __attribute__((__stdcall__)) NtCurrentTeb(void)
{
    struct _TEB *teb;
    __asm__(".byte 0x64\n\tmovl (0x18),%0" : "=r" (teb));
    return teb;
}

typedef struct _IMAGE_DOS_HEADER {
    WORD e_magic;
    WORD e_cblp;
    WORD e_cp;
    WORD e_crlc;
    WORD e_cparhdr;
    WORD e_minalloc;
    WORD e_maxalloc;
    WORD e_ss;
    WORD e_sp;
    WORD e_csum;
    WORD e_ip;
    WORD e_cs;
    WORD e_lfarlc;
    WORD e_ovno;
    WORD e_res[4];
    WORD e_oemid;
    WORD e_oeminfo;
    WORD e_res2[10];
    DWORD e_lfanew;
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;


typedef struct
{
    WORD ne_magic;
    BYTE ne_ver;
    BYTE ne_rev;
    WORD ne_enttab;
    WORD ne_cbenttab;
    LONG ne_crc;
    WORD ne_flags;
    WORD ne_autodata;
    WORD ne_heap;
    WORD ne_stack;
    DWORD ne_csip;
    DWORD ne_sssp;
    WORD ne_cseg;
    WORD ne_cmod;
    WORD ne_cbnrestab;
    WORD ne_segtab;
    WORD ne_rsrctab;
    WORD ne_restab;
    WORD ne_modtab;
    WORD ne_imptab;
    DWORD ne_nrestab;
    WORD ne_cmovent;
    WORD ne_align;
    WORD ne_cres;
    BYTE ne_exetyp;
    BYTE ne_flagsothers;
    WORD ne_pretthunks;
    WORD ne_psegrefbytes;
    WORD ne_swaparea;
    WORD ne_expver;
} IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;


typedef struct _IMAGE_VXD_HEADER {
  WORD e32_magic;
  BYTE e32_border;
  BYTE e32_worder;
  DWORD e32_level;
  WORD e32_cpu;
  WORD e32_os;
  DWORD e32_ver;
  DWORD e32_mflags;
  DWORD e32_mpages;
  DWORD e32_startobj;
  DWORD e32_eip;
  DWORD e32_stackobj;
  DWORD e32_esp;
  DWORD e32_pagesize;
  DWORD e32_lastpagesize;
  DWORD e32_fixupsize;
  DWORD e32_fixupsum;
  DWORD e32_ldrsize;
  DWORD e32_ldrsum;
  DWORD e32_objtab;
  DWORD e32_objcnt;
  DWORD e32_objmap;
  DWORD e32_itermap;
  DWORD e32_rsrctab;
  DWORD e32_rsrccnt;
  DWORD e32_restab;
  DWORD e32_enttab;
  DWORD e32_dirtab;
  DWORD e32_dircnt;
  DWORD e32_fpagetab;
  DWORD e32_frectab;
  DWORD e32_impmod;
  DWORD e32_impmodcnt;
  DWORD e32_impproc;
  DWORD e32_pagesum;
  DWORD e32_datapage;
  DWORD e32_preload;
  DWORD e32_nrestab;
  DWORD e32_cbnrestab;
  DWORD e32_nressum;
  DWORD e32_autodata;
  DWORD e32_debuginfo;
  DWORD e32_debuglen;
  DWORD e32_instpreload;
  DWORD e32_instdemand;
  DWORD e32_heapsize;
  BYTE e32_res3[12];
  DWORD e32_winresoff;
  DWORD e32_winreslen;
  WORD e32_devid;
  WORD e32_ddkver;
} IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;

typedef struct _IMAGE_FILE_HEADER {
  WORD Machine;
  WORD NumberOfSections;
  DWORD TimeDateStamp;
  DWORD PointerToSymbolTable;
  DWORD NumberOfSymbols;
  WORD SizeOfOptionalHeader;
  WORD Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
typedef struct _IMAGE_DATA_DIRECTORY {
  DWORD VirtualAddress;
  DWORD Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;
typedef struct _IMAGE_OPTIONAL_HEADER64 {
  WORD Magic;
  BYTE MajorLinkerVersion;
  BYTE MinorLinkerVersion;
  DWORD SizeOfCode;
  DWORD SizeOfInitializedData;
  DWORD SizeOfUninitializedData;
  DWORD AddressOfEntryPoint;
  DWORD BaseOfCode;
  ULONGLONG ImageBase;
  DWORD SectionAlignment;
  DWORD FileAlignment;
  WORD MajorOperatingSystemVersion;
  WORD MinorOperatingSystemVersion;
  WORD MajorImageVersion;
  WORD MinorImageVersion;
  WORD MajorSubsystemVersion;
  WORD MinorSubsystemVersion;
  DWORD Win32VersionValue;
  DWORD SizeOfImage;
  DWORD SizeOfHeaders;
  DWORD CheckSum;
  WORD Subsystem;
  WORD DllCharacteristics;
  ULONGLONG SizeOfStackReserve;
  ULONGLONG SizeOfStackCommit;
  ULONGLONG SizeOfHeapReserve;
  ULONGLONG SizeOfHeapCommit;
  DWORD LoaderFlags;
  DWORD NumberOfRvaAndSizes;
  IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;
typedef struct _IMAGE_NT_HEADERS64 {
  DWORD Signature;
  IMAGE_FILE_HEADER FileHeader;
  IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;
typedef struct _IMAGE_OPTIONAL_HEADER {
  WORD Magic;
  BYTE MajorLinkerVersion;
  BYTE MinorLinkerVersion;
  DWORD SizeOfCode;
  DWORD SizeOfInitializedData;
  DWORD SizeOfUninitializedData;
  DWORD AddressOfEntryPoint;
  DWORD BaseOfCode;
  DWORD BaseOfData;
  DWORD ImageBase;
  DWORD SectionAlignment;
  DWORD FileAlignment;
  WORD MajorOperatingSystemVersion;
  WORD MinorOperatingSystemVersion;
  WORD MajorImageVersion;
  WORD MinorImageVersion;
  WORD MajorSubsystemVersion;
  WORD MinorSubsystemVersion;
  DWORD Win32VersionValue;
  DWORD SizeOfImage;
  DWORD SizeOfHeaders;
  DWORD CheckSum;
  WORD Subsystem;
  WORD DllCharacteristics;
  DWORD SizeOfStackReserve;
  DWORD SizeOfStackCommit;
  DWORD SizeOfHeapReserve;
  DWORD SizeOfHeapCommit;
  DWORD LoaderFlags;
  DWORD NumberOfRvaAndSizes;
  IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;
typedef struct _IMAGE_NT_HEADERS {
  DWORD Signature;
  IMAGE_FILE_HEADER FileHeader;
  IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;
typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;
typedef struct _IMAGE_SECTION_HEADER {
  BYTE Name[8];
  union {
    DWORD PhysicalAddress;
    DWORD VirtualSize;
  } Misc;
  DWORD VirtualAddress;
  DWORD SizeOfRawData;
  DWORD PointerToRawData;
  DWORD PointerToRelocations;
  DWORD PointerToLinenumbers;
  WORD NumberOfRelocations;
  WORD NumberOfLinenumbers;
  DWORD Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

typedef struct _IMAGE_SYMBOL {
    union {
        BYTE ShortName[8];
        struct {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];
    } N;
    DWORD Value;
    SHORT SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL *PIMAGE_SYMBOL;
typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD SymbolTableIndex;
        DWORD VirtualAddress;
    } Type;
    WORD Linenumber;
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER;
typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD TagIndex;
        union {
            struct {
                WORD Linenumber;
                WORD Size;
            } LnSz;
           DWORD TotalSize;
        } Misc;
        union {
            struct {
                DWORD PointerToLinenumber;
                DWORD PointerToNextFunction;
            } Function;
            struct {
                WORD Dimension[4];
            } Array;
        } FcnAry;
        WORD TvIndex;
    } Sym;
    struct {
        BYTE Name[18];
    } File;
    struct {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
    } Section;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;

typedef struct _IMAGE_EXPORT_DIRECTORY {
 DWORD Characteristics;
 DWORD TimeDateStamp;
 WORD MajorVersion;
 WORD MinorVersion;
 DWORD Name;
 DWORD Base;
 DWORD NumberOfFunctions;
 DWORD NumberOfNames;
 DWORD AddressOfFunctions;
 DWORD AddressOfNames;
 DWORD AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY,*PIMAGE_EXPORT_DIRECTORY;
typedef struct _IMAGE_IMPORT_BY_NAME {
 WORD Hint;
 BYTE Name[1];
} IMAGE_IMPORT_BY_NAME,*PIMAGE_IMPORT_BY_NAME;

typedef struct _IMAGE_THUNK_DATA64 {
 union {
  ULONGLONG ForwarderString;
  ULONGLONG Function;
  ULONGLONG Ordinal;
  ULONGLONG AddressOfData;
 } u1;
} IMAGE_THUNK_DATA64,*PIMAGE_THUNK_DATA64;

typedef struct _IMAGE_THUNK_DATA32 {
 union {
  DWORD ForwarderString;
  DWORD Function;
  DWORD Ordinal;
  DWORD AddressOfData;
 } u1;
} IMAGE_THUNK_DATA32,*PIMAGE_THUNK_DATA32;
typedef struct _IMAGE_IMPORT_DESCRIPTOR {
 union {
  DWORD Characteristics;
  DWORD OriginalFirstThunk;
 } ;
 DWORD TimeDateStamp;
 DWORD ForwarderChain;
 DWORD Name;
 DWORD FirstThunk;
} IMAGE_IMPORT_DESCRIPTOR,*PIMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA;
typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR
{
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD NumberOfModuleForwarderRefs;
} IMAGE_BOUND_IMPORT_DESCRIPTOR, *PIMAGE_BOUND_IMPORT_DESCRIPTOR;
typedef struct _IMAGE_BOUND_FORWARDER_REF
{
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;
typedef struct _IMAGE_BASE_RELOCATION
{
 DWORD VirtualAddress;
 DWORD SizeOfBlock;
} IMAGE_BASE_RELOCATION,*PIMAGE_BASE_RELOCATION;

typedef struct _IMAGE_RELOCATION
{
    union {
        DWORD VirtualAddress;
        DWORD RelocCount;
    } ;
    DWORD SymbolTableIndex;
    WORD Type;
} IMAGE_RELOCATION, *PIMAGE_RELOCATION;

typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER
{
    BYTE Name[16];
    BYTE Date[12];
    BYTE UserID[6];
    BYTE GroupID[6];
    BYTE Mode[8];
    BYTE Size[10];
    BYTE EndHeader[2];
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;
typedef struct _IMPORT_OBJECT_HEADER
{
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    DWORD SizeOfData;
    union
    {
        WORD Ordinal;
        WORD Hint;
    } ;
    WORD Type : 2;
    WORD NameType : 3;
    WORD Reserved : 11;
} IMPORT_OBJECT_HEADER;
typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2
} IMPORT_OBJECT_TYPE;
typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,
    IMPORT_OBJECT_NAME = 1,
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,
    IMPORT_OBJECT_NAME_UNDECORATE = 3
} IMPORT_OBJECT_NAME_TYPE;
typedef struct _ANON_OBJECT_HEADER
{
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
} ANON_OBJECT_HEADER;
typedef struct _IMAGE_RESOURCE_DIRECTORY {
 DWORD Characteristics;
 DWORD TimeDateStamp;
 WORD MajorVersion;
 WORD MinorVersion;
 WORD NumberOfNamedEntries;
 WORD NumberOfIdEntries;
} IMAGE_RESOURCE_DIRECTORY,*PIMAGE_RESOURCE_DIRECTORY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
 union {
  struct {
   unsigned NameOffset:31;
   unsigned NameIsString:1;
  } ;
  DWORD Name;
                struct {
   WORD Id;
   WORD __pad;
  } ;
 } ;
 union {
  DWORD OffsetToData;
  struct {
   unsigned OffsetToDirectory:31;
   unsigned DataIsDirectory:1;
  } ;
 } ;
} IMAGE_RESOURCE_DIRECTORY_ENTRY,*PIMAGE_RESOURCE_DIRECTORY_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
 WORD Length;
 CHAR NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING,*PIMAGE_RESOURCE_DIRECTORY_STRING;
typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
 WORD Length;
 WCHAR NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U,*PIMAGE_RESOURCE_DIR_STRING_U;
typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
 DWORD OffsetToData;
 DWORD Size;
 DWORD CodePage;
 DWORD Reserved;
} IMAGE_RESOURCE_DATA_ENTRY,*PIMAGE_RESOURCE_DATA_ENTRY;
typedef void (__attribute__((__stdcall__)) *PIMAGE_TLS_CALLBACK)(
 LPVOID DllHandle,DWORD Reason,LPVOID Reserved
);
typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    ULONGLONG AddressOfIndex;
    ULONGLONG AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    DWORD Characteristics;
} IMAGE_TLS_DIRECTORY64, *PIMAGE_TLS_DIRECTORY64;
typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD StartAddressOfRawData;
    DWORD EndAddressOfRawData;
    DWORD AddressOfIndex;
    DWORD AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    DWORD Characteristics;
} IMAGE_TLS_DIRECTORY32, *PIMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;
typedef struct _IMAGE_DEBUG_DIRECTORY {
  DWORD Characteristics;
  DWORD TimeDateStamp;
  WORD MajorVersion;
  WORD MinorVersion;
  DWORD Type;
  DWORD SizeOfData;
  DWORD AddressOfRawData;
  DWORD PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;
typedef enum ReplacesCorHdrNumericDefines
{
    COMIMAGE_FLAGS_ILONLY = 0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED = 0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY = 0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED = 0x00000008,
    COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x00010000,
    COR_VERSION_MAJOR_V2 = 2,
    COR_VERSION_MAJOR = COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR = 0,
    COR_DELETED_NAME_LENGTH = 8,
    COR_VTABLEGAP_NAME_LENGTH = 8,
    NATIVE_TYPE_MAX_CB = 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 0xff,
    IMAGE_COR_MIH_METHODRVA = 0x01,
    IMAGE_COR_MIH_EHRVA = 0x02,
    IMAGE_COR_MIH_BASICBLOCK = 0x08,
    COR_VTABLE_32BIT = 0x01,
    COR_VTABLE_64BIT = 0x02,
    COR_VTABLE_FROM_UNMANAGED = 0x04,
    COR_VTABLE_CALL_MOST_DERIVED = 0x10,
    IMAGE_COR_EATJ_THUNK_SIZE = 32,
    MAX_CLASS_NAME = 1024,
    MAX_PACKAGE_NAME = 1024,
} ReplacesCorHdrNumericDefines;
typedef struct IMAGE_COR20_HEADER
{
    DWORD cb;
    WORD MajorRuntimeVersion;
    WORD MinorRuntimeVersion;
    IMAGE_DATA_DIRECTORY MetaData;
    DWORD Flags;
    DWORD EntryPointToken;
    IMAGE_DATA_DIRECTORY Resources;
    IMAGE_DATA_DIRECTORY StrongNameSignature;
    IMAGE_DATA_DIRECTORY CodeManagerTable;
    IMAGE_DATA_DIRECTORY VTableFixups;
    IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
    IMAGE_DATA_DIRECTORY ManagedNativeHeader;
} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;
typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
  DWORD NumberOfSymbols;
  DWORD LvaToFirstSymbol;
  DWORD NumberOfLinenumbers;
  DWORD LvaToFirstLinenumber;
  DWORD RvaToFirstByteOfCode;
  DWORD RvaToLastByteOfCode;
  DWORD RvaToFirstByteOfData;
  DWORD RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;
typedef struct _FPO_DATA {
  DWORD ulOffStart;
  DWORD cbProcSize;
  DWORD cdwLocals;
  WORD cdwParams;
  WORD cbProlog : 8;
  WORD cbRegs : 3;
  WORD fHasSEH : 1;
  WORD fUseBP : 1;
  WORD reserved : 1;
  WORD cbFrame : 2;
} FPO_DATA, *PFPO_DATA;
typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY {
  DWORD Size;
  DWORD TimeDateStamp;
  WORD MajorVersion;
  WORD MinorVersion;
  DWORD GlobalFlagsClear;
  DWORD GlobalFlagsSet;
  DWORD CriticalSectionDefaultTimeout;
  DWORD DeCommitFreeBlockThreshold;
  DWORD DeCommitTotalFreeThreshold;
  PVOID LockPrefixTable;
  DWORD MaximumAllocationSize;
  DWORD VirtualMemoryThreshold;
  DWORD ProcessHeapFlags;
  DWORD ProcessAffinityMask;
  WORD CSDVersion;
  WORD Reserved1;
  PVOID EditList;
  DWORD SecurityCookie;
  DWORD SEHandlerTable;
  DWORD SEHandlerCount;
} IMAGE_LOAD_CONFIG_DIRECTORY, *PIMAGE_LOAD_CONFIG_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY {
  DWORD StartingAddress;
  DWORD EndingAddress;
  DWORD EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;
typedef struct _IMAGE_DEBUG_MISC {
    DWORD DataType;
    DWORD Length;
    BYTE Unicode;
    BYTE Reserved[ 3 ];
    BYTE Data[ 1 ];
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
 WORD Signature;
 WORD Flags;
 WORD Machine;
 WORD Characteristics;
 DWORD TimeDateStamp;
 DWORD CheckSum;
 DWORD ImageBase;
 DWORD SizeOfImage;
 DWORD NumberOfSections;
 DWORD ExportedNamesSize;
 DWORD DebugDirectorySize;
 DWORD SectionAlignment;
 DWORD Reserved[ 2 ];
} IMAGE_SEPARATE_DEBUG_HEADER,*PIMAGE_SEPARATE_DEBUG_HEADER;
typedef struct tagMESSAGE_RESOURCE_ENTRY {
 WORD Length;
 WORD Flags;
 BYTE Text[1];
} MESSAGE_RESOURCE_ENTRY,*PMESSAGE_RESOURCE_ENTRY;
typedef struct tagMESSAGE_RESOURCE_BLOCK {
 DWORD LowId;
 DWORD HighId;
 DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK,*PMESSAGE_RESOURCE_BLOCK;
typedef struct tagMESSAGE_RESOURCE_DATA {
 DWORD NumberOfBlocks;
 MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA,*PMESSAGE_RESOURCE_DATA;
typedef PVOID PACCESS_TOKEN;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef PVOID PSID;
typedef enum _TOKEN_ELEVATION_TYPE {
  TokenElevationTypeDefault = 1,
  TokenElevationTypeFull,
  TokenElevationTypeLimited
} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;
typedef enum _TOKEN_INFORMATION_CLASS {
  TokenUser = 1,
  TokenGroups,
  TokenPrivileges,
  TokenOwner,
  TokenPrimaryGroup,
  TokenDefaultDacl,
  TokenSource,
  TokenType,
  TokenImpersonationLevel,
  TokenStatistics,
  TokenRestrictedSids,
  TokenSessionId,
  TokenGroupsAndPrivileges,
  TokenSessionReference,
  TokenSandBoxInert,
  TokenAuditPolicy,
  TokenOrigin,
  TokenElevationType,
  TokenLinkedToken,
  TokenElevation,
  TokenHasRestrictions,
  TokenAccessInformation,
  TokenVirtualizationAllowed,
  TokenVirtualizationEnabled,
  TokenIntegrityLevel,
  TokenUIAccess,
  TokenMandatoryPolicy,
  TokenLogonSid,
  MaxTokenInfoClass
} TOKEN_INFORMATION_CLASS;
typedef DWORD ACCESS_MASK, *PACCESS_MASK;
typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING, *PGENERIC_MAPPING;
typedef struct {
    BYTE Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;
typedef struct _SID {
    BYTE Revision;
    BYTE SubAuthorityCount;
    SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    DWORD SubAuthority[1];
} SID,*PISID;
typedef struct _ACL {
    BYTE AclRevision;
    BYTE Sbz1;
    WORD AclSize;
    WORD AceCount;
    WORD Sbz2;
} ACL, *PACL;
typedef enum _ACL_INFORMATION_CLASS
{
  AclRevisionInformation = 1,
  AclSizeInformation
} ACL_INFORMATION_CLASS;
typedef struct _ACL_REVISION_INFORMATION
{
    DWORD AclRevision;
} ACL_REVISION_INFORMATION, *PACL_REVISION_INFORMATION;
typedef struct _ACL_SIZE_INFORMATION
{
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION, *PACL_SIZE_INFORMATION;
typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;
typedef WORD SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;
typedef struct {
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
} SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;
typedef struct {
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    PSID Owner;
    PSID Group;
    PACL Sacl;
    PACL Dacl;
} SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;
typedef struct _SID_AND_ATTRIBUTES {
  PSID Sid;
  DWORD Attributes;
} SID_AND_ATTRIBUTES, *PSID_AND_ATTRIBUTES;
typedef enum {
    WinNullSid = 0,
    WinWorldSid = 1,
    WinLocalSid = 2,
    WinCreatorOwnerSid = 3,
    WinCreatorGroupSid = 4,
    WinCreatorOwnerServerSid = 5,
    WinCreatorGroupServerSid = 6,
    WinNtAuthoritySid = 7,
    WinDialupSid = 8,
    WinNetworkSid = 9,
    WinBatchSid = 10,
    WinInteractiveSid = 11,
    WinServiceSid = 12,
    WinAnonymousSid = 13,
    WinProxySid = 14,
    WinEnterpriseControllersSid = 15,
    WinSelfSid = 16,
    WinAuthenticatedUserSid = 17,
    WinRestrictedCodeSid = 18,
    WinTerminalServerSid = 19,
    WinRemoteLogonIdSid = 20,
    WinLogonIdsSid = 21,
    WinLocalSystemSid = 22,
    WinLocalServiceSid = 23,
    WinNetworkServiceSid = 24,
    WinBuiltinDomainSid = 25,
    WinBuiltinAdministratorsSid = 26,
    WinBuiltinUsersSid = 27,
    WinBuiltinGuestsSid = 28,
    WinBuiltinPowerUsersSid = 29,
    WinBuiltinAccountOperatorsSid = 30,
    WinBuiltinSystemOperatorsSid = 31,
    WinBuiltinPrintOperatorsSid = 32,
    WinBuiltinBackupOperatorsSid = 33,
    WinBuiltinReplicatorSid = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid = 36,
    WinBuiltinNetworkConfigurationOperatorsSid = 37,
    WinAccountAdministratorSid = 38,
    WinAccountGuestSid = 39,
    WinAccountKrbtgtSid = 40,
    WinAccountDomainAdminsSid = 41,
    WinAccountDomainUsersSid = 42,
    WinAccountDomainGuestsSid = 43,
    WinAccountComputersSid = 44,
    WinAccountControllersSid = 45,
    WinAccountCertAdminsSid = 46,
    WinAccountSchemaAdminsSid = 47,
    WinAccountEnterpriseAdminsSid = 48,
    WinAccountPolicyAdminsSid = 49,
    WinAccountRasAndIasServersSid = 50,
    WinNTLMAuthenticationSid = 51,
    WinDigestAuthenticationSid = 52,
    WinSChannelAuthenticationSid = 53,
    WinThisOrganizationSid = 54,
    WinOtherOrganizationSid = 55,
    WinBuiltinIncomingForestTrustBuildersSid = 56,
    WinBuiltinPerfMonitoringUsersSid = 57,
    WinBuiltinPerfLoggingUsersSid = 58,
    WinBuiltinAuthorizationAccessSid = 59,
    WinBuiltinTerminalServerLicenseServersSid = 60,
    WinBuiltinDCOMUsersSid = 61,
    WinBuiltinIUsersSid = 62,
    WinIUserSid = 63,
    WinBuiltinCryptoOperatorsSid = 64,
    WinUntrustedLabelSid = 65,
    WinLowLabelSid = 66,
    WinMediumLabelSid = 67,
    WinHighLabelSid = 68,
    WinSystemLabelSid = 69,
    WinWriteRestrictedCodeSid = 70,
    WinCreatorOwnerRightsSid = 71,
    WinCacheablePrincipalsGroupSid = 72,
    WinNonCacheablePrincipalsGroupSid = 73,
    WinEnterpriseReadonlyControllersSid = 74,
    WinAccountReadonlyControllersSid = 75,
    WinBuiltinEventLogReadersGroup = 76,
    WinNewEnterpriseReadonlyControllersSid = 77,
    WinBuiltinCertSvcDComAccessGroup = 78,
    WinMediumPlusLabelSid = 79,
    WinLocalLogonSid = 80,
    WinConsoleLogonSid = 81,
    WinThisOrganizationCertificateSid = 82,
} WELL_KNOWN_SID_TYPE;
typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;
typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;
    SID_AND_ATTRIBUTES Groups[1];
} TOKEN_GROUPS, *PTOKEN_GROUPS;
typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;
    struct {
        DWORD LowPart;
        LONG HighPart;
    };
    LONGLONG QuadPart;
} LARGE_INTEGER, *PLARGE_INTEGER;
typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;
    struct {
        DWORD LowPart;
        DWORD HighPart;
    };
    ULONGLONG QuadPart;
} ULARGE_INTEGER, *PULARGE_INTEGER;
typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;

typedef struct _LUID_AND_ATTRIBUTES {
  LUID Luid;
  DWORD Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES;

typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
} PRIVILEGE_SET, *PPRIVILEGE_SET;
typedef struct _TOKEN_PRIVILEGES {
  DWORD PrivilegeCount;
  LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;
typedef struct _TOKEN_OWNER {
  PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;
typedef struct _TOKEN_PRIMARY_GROUP {
  PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;
typedef struct _TOKEN_DEFAULT_DACL {
  PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;
typedef struct _TOKEN_SOURCE {
  char SourceName[8];
  LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;
typedef enum tagTOKEN_TYPE {
  TokenPrimary = 1,
  TokenImpersonation
} TOKEN_TYPE;
typedef enum _SECURITY_IMPERSONATION_LEVEL {
  SecurityAnonymous,
  SecurityIdentification,
  SecurityImpersonation,
  SecurityDelegation
} SECURITY_IMPERSONATION_LEVEL, *PSECURITY_IMPERSONATION_LEVEL;
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
 * PSECURITY_CONTEXT_TRACKING_MODE;
typedef struct _SECURITY_QUALITY_OF_SERVICE {
  DWORD Length;
  SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
  BOOLEAN EffectiveOnly;
} SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE;

typedef struct _TOKEN_STATISTICS {
  LUID TokenId;
  LUID AuthenticationId;
  LARGE_INTEGER ExpirationTime;
  TOKEN_TYPE TokenType;
  SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  DWORD DynamicCharged;
  DWORD DynamicAvailable;
  DWORD GroupCount;
  DWORD PrivilegeCount;
  LUID ModifiedId;
} TOKEN_STATISTICS;

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
  DWORD SidCount;
  DWORD SidLength;
  PSID_AND_ATTRIBUTES Sids;
  DWORD RestrictedSidCount;
  DWORD RestrictedSidLength;
  PSID_AND_ATTRIBUTES RestrictedSids;
  DWORD PrivilegeCount;
  DWORD PrivilegeLength;
  PLUID_AND_ATTRIBUTES Privileges;
  LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, * PTOKEN_GROUPS_AND_PRIVILEGES;
typedef struct _TOKEN_ORIGIN {
  LUID OriginatingLogonSession;
} TOKEN_ORIGIN, * PTOKEN_ORIGIN;
typedef struct _TOKEN_LINKED_TOKEN {
  HANDLE LinkedToken;
} TOKEN_LINKED_TOKEN, * PTOKEN_LINKED_TOKEN;
typedef struct _TOKEN_ELEVATION {
  DWORD TokenIsElevated;
} TOKEN_ELEVATION, * PTOKEN_ELEVATION;
typedef struct _ACE_HEADER {
 BYTE AceType;
 BYTE AceFlags;
 WORD AceSize;
} ACE_HEADER,*PACE_HEADER;
typedef struct _ACCESS_ALLOWED_ACE {
 ACE_HEADER Header;
 DWORD Mask;
 DWORD SidStart;
} ACCESS_ALLOWED_ACE,*PACCESS_ALLOWED_ACE;
typedef struct _ACCESS_DENIED_ACE {
 ACE_HEADER Header;
 DWORD Mask;
 DWORD SidStart;
} ACCESS_DENIED_ACE,*PACCESS_DENIED_ACE;
typedef struct _SYSTEM_AUDIT_ACE {
 ACE_HEADER Header;
 DWORD Mask;
 DWORD SidStart;
} SYSTEM_AUDIT_ACE,*PSYSTEM_AUDIT_ACE;
typedef struct _SYSTEM_ALARM_ACE {
 ACE_HEADER Header;
 DWORD Mask;
 DWORD SidStart;
} SYSTEM_ALARM_ACE,*PSYSTEM_ALARM_ACE;
typedef enum tagSID_NAME_USE {
 SidTypeUser = 1,
 SidTypeGroup,
 SidTypeDomain,
 SidTypeAlias,
 SidTypeWellKnownGroup,
 SidTypeDeletedAccount,
 SidTypeInvalid,
 SidTypeUnknown
} SID_NAME_USE,*PSID_NAME_USE;
typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;
typedef struct _QUOTA_LIMITS_EX {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
    SIZE_T Reserved1;
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD Flags;
    DWORD Reserved5;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;
typedef enum _LATENCY_TIME {
 LT_DONT_CARE,
 LT_LOWEST_LATENCY
} LATENCY_TIME, *PLATENCY_TIME;
typedef enum _POWER_ACTION {
 PowerActionNone = 0,
 PowerActionReserved,
 PowerActionSleep,
 PowerActionHibernate,
 PowerActionShutdown,
 PowerActionShutdownReset,
 PowerActionShutdownOff,
 PowerActionWarmEject
} POWER_ACTION,
*PPOWER_ACTION;
typedef enum _SYSTEM_POWER_STATE {
 PowerSystemUnspecified = 0,
 PowerSystemWorking = 1,
 PowerSystemSleeping1 = 2,
 PowerSystemSleeping2 = 3,
 PowerSystemSleeping3 = 4,
 PowerSystemHibernate = 5,
 PowerSystemShutdown = 6,
 PowerSystemMaximum = 7
} SYSTEM_POWER_STATE,
*PSYSTEM_POWER_STATE;
typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;
typedef enum _POWER_INFORMATION_LEVEL {
        SystemPowerPolicyAc,
        SystemPowerPolicyDc,
        VerifySystemPolicyAc,
        VerifySystemPolicyDc,
        SystemPowerCapabilities,
        SystemBatteryState,
        SystemPowerStateHandler,
        ProcessorStateHandler,
        SystemPowerPolicyCurrent,
        AdministratorPowerPolicy,
        SystemReserveHiberFile,
        ProcessorInformation,
        SystemPowerInformation,
        ProcessorStateHandler2,
        LastWakeTime,
        LastSleepTime,
        SystemExecutionState,
        SystemPowerStateNotifyHandler,
        ProcessorPowerPolicyAc,
        ProcessorPowerPolicyDc,
        VerifyProcessorPowerPolicyAc,
        VerifyProcessorPowerPolicyDc,
        ProcessorPowerPolicyCurrent
} POWER_INFORMATION_LEVEL;
typedef struct _ADMINISTRATOR_POWER_POLICY {
 SYSTEM_POWER_STATE MinSleep;
 SYSTEM_POWER_STATE MaxSleep;
 ULONG MinVideoTimeout;
 ULONG MaxVideoTimeout;
 ULONG MinSpindownTimeout;
 ULONG MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;
typedef struct {
 ULONG Granularity;
 ULONG Capacity;
} BATTERY_REPORTING_SCALE,
*PBATTERY_REPORTING_SCALE;
typedef struct {
 POWER_ACTION Action;
 ULONG Flags;
 ULONG EventCode;
} POWER_ACTION_POLICY,
*PPOWER_ACTION_POLICY;
typedef struct _PROCESSOR_POWER_INFORMATION {
 ULONG Number;
 ULONG MaxMhz;
 ULONG CurrentMhz;
 ULONG MhzLimit;
 ULONG MaxIdleState;
 ULONG CurrentIdleState;
} PROCESSOR_POWER_INFORMATION,
*PPROCESSOR_POWER_INFORMATION;
typedef struct _PROCESSOR_POWER_POLICY_INFO {
 ULONG TimeCheck;
 ULONG DemoteLimit;
 ULONG PromoteLimit;
 UCHAR DemotePercent;
 UCHAR PromotePercent;
 UCHAR Spare[2];
 ULONG AllowDemotion:1;
 ULONG AllowPromotion:1;
 ULONG Reserved:30;
} PROCESSOR_POWER_POLICY_INFO,
*PPROCESSOR_POWER_POLICY_INFO;
typedef struct _PROCESSOR_POWER_POLICY {
 DWORD Revision;
 BYTE DynamicThrottle;
 BYTE Spare[3];
 DWORD DisableCStates:1;
 DWORD Reserved:31;
 DWORD PolicyCount;
 PROCESSOR_POWER_POLICY_INFO Policy[3];
} PROCESSOR_POWER_POLICY,
*PPROCESSOR_POWER_POLICY;
typedef struct {
 BOOLEAN AcOnLine;
 BOOLEAN BatteryPresent;
 BOOLEAN Charging;
 BOOLEAN Discharging;
 BOOLEAN Spare1[4];
 ULONG MaxCapacity;
 ULONG RemainingCapacity;
 ULONG Rate;
 ULONG EstimatedTime;
 ULONG DefaultAlert1;
 ULONG DefaultAlert2;
} SYSTEM_BATTERY_STATE,
*PSYSTEM_BATTERY_STATE;
typedef struct {
 BOOLEAN PowerButtonPresent;
 BOOLEAN SleepButtonPresent;
 BOOLEAN LidPresent;
 BOOLEAN SystemS1;
 BOOLEAN SystemS2;
 BOOLEAN SystemS3;
 BOOLEAN SystemS4;
 BOOLEAN SystemS5;
 BOOLEAN HiberFilePresent;
 BOOLEAN FullWake;
 BOOLEAN VideoDimPresent;
 BOOLEAN ApmPresent;
 BOOLEAN UpsPresent;
 BOOLEAN ThermalControl;
 BOOLEAN ProcessorThrottle;
 UCHAR ProcessorMinThrottle;
 UCHAR ProcessorMaxThrottle;
 UCHAR spare2[4];
 BOOLEAN DiskSpinDown;
 UCHAR spare3[8];
 BOOLEAN SystemBatteriesPresent;
 BOOLEAN BatteriesAreShortTerm;
 BATTERY_REPORTING_SCALE BatteryScale[3];
 SYSTEM_POWER_STATE AcOnLineWake;
 SYSTEM_POWER_STATE SoftLidWake;
 SYSTEM_POWER_STATE RtcWake;
 SYSTEM_POWER_STATE MinDeviceWakeState;
 SYSTEM_POWER_STATE DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES,
*PSYSTEM_POWER_CAPABILITIES;
typedef struct _SYSTEM_POWER_INFORMATION {
 ULONG MaxIdlenessAllowed;
 ULONG Idleness;
 ULONG TimeRemaining;
 UCHAR CoolingMode;
} SYSTEM_POWER_INFORMATION,
*PSYSTEM_POWER_INFORMATION;
typedef struct _SYSTEM_POWER_LEVEL {
 BOOLEAN Enable;
 UCHAR Spare[3];
 ULONG BatteryLevel;
 POWER_ACTION_POLICY PowerPolicy;
 SYSTEM_POWER_STATE MinSystemState;
} SYSTEM_POWER_LEVEL,
*PSYSTEM_POWER_LEVEL;
typedef struct _SYSTEM_POWER_POLICY {
 ULONG Revision;
 POWER_ACTION_POLICY PowerButton;
 POWER_ACTION_POLICY SleepButton;
 POWER_ACTION_POLICY LidClose;
 SYSTEM_POWER_STATE LidOpenWake;
 ULONG Reserved;
 POWER_ACTION_POLICY Idle;
 ULONG IdleTimeout;
 UCHAR IdleSensitivity;
 UCHAR DynamicThrottle;
 UCHAR Spare2[2];
 SYSTEM_POWER_STATE MinSleep;
 SYSTEM_POWER_STATE MaxSleep;
 SYSTEM_POWER_STATE ReducedLatencySleep;
 ULONG WinLogonFlags;
 ULONG Spare3;
 ULONG DozeS4Timeout;
 ULONG BroadcastCapacityResolution;
 SYSTEM_POWER_LEVEL DischargePolicy[4];
 ULONG VideoTimeout;
 BOOLEAN VideoDimDisplay;
 ULONG VideoReserved[3];
 ULONG SpindownTimeout;
 BOOLEAN OptimizeForPower;
 UCHAR FanThrottleTolerance;
 UCHAR ForcedThrottle;
 UCHAR MinThrottle;
 POWER_ACTION_POLICY OverThrottled;
} SYSTEM_POWER_POLICY,
*PSYSTEM_POWER_POLICY;
typedef union _FILE_SEGMENT_ELEMENT {
 PVOID64 Buffer;
 ULONGLONG Alignment;
} FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;
typedef struct _FILE_NOTIFY_INFORMATION {
 DWORD NextEntryOffset;
 DWORD Action;
 DWORD FileNameLength;
 WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;
typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;
typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;
typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;
typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    ULONG EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;
typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    ULONG BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;
typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;
typedef struct _TAPE_GET_POSITION {
    ULONG Type;
    ULONG Partition;
    ULONG OffsetLow;
    ULONG OffsetHigh;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
typedef struct _TAPE_SET_POSITION {
    ULONG Method;
    ULONG Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;
typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;
typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;
typedef struct _EVENTLOGRECORD {
    DWORD Length;
    DWORD Reserved;
    DWORD RecordNumber;
    DWORD TimeGenerated;
    DWORD TimeWritten;
    DWORD EventID;
    WORD EventType;
    WORD NumStrings;
    WORD EventCategory;
    WORD ReservedFlags;
    DWORD ClosingRecordNumber;
    DWORD StringOffset;
    DWORD UserSidLength;
    DWORD UserSidOffset;
    DWORD DataLength;
    DWORD DataOffset;
} EVENTLOGRECORD, *PEVENTLOGRECORD;
typedef enum _CM_SERVICE_NODE_TYPE
{
  DriverType = 0x00000001,
  FileSystemType = 0x00000002,
  Win32ServiceOwnProcess = 0x00000010,
  Win32ServiceShareProcess = 0x00000020,
  AdapterType = 0x00000004,
  RecognizerType = 0x00000008
} SERVICE_NODE_TYPE;
typedef enum _CM_SERVICE_LOAD_TYPE
{
  BootLoad = 0x00000000,
  SystemLoad = 0x00000001,
  AutoLoad = 0x00000002,
  DemandLoad = 0x00000003,
  DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;
typedef enum _CM_ERROR_CONTROL_TYPE
{
  IgnoreError = 0x00000000,
  NormalError = 0x00000001,
  SevereError = 0x00000002,
  CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;
typedef struct _OBJECT_TYPE_LIST {
    WORD Level;
    WORD Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;
typedef struct _RTL_CRITICAL_SECTION_DEBUG
{
  WORD Type;
  WORD CreatorBackTraceIndex;
  struct _RTL_CRITICAL_SECTION *CriticalSection;
  LIST_ENTRY ProcessLocksList;
  DWORD EntryCount;
  DWORD ContentionCount;
  DWORD Spare[ 2 ];
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;
typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;
typedef void (__attribute__((__stdcall__)) * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );
typedef void (__attribute__((__stdcall__)) * PFLS_CALLBACK_FUNCTION) ( PVOID );

typedef struct _IO_COUNTERS {
    ULONGLONG __attribute__((aligned(8))) ReadOperationCount;
    ULONGLONG __attribute__((aligned(8))) WriteOperationCount;
    ULONGLONG __attribute__((aligned(8))) OtherOperationCount;
    ULONGLONG __attribute__((aligned(8))) ReadTransferCount;
    ULONGLONG __attribute__((aligned(8))) WriteTransferCount;
    ULONGLONG __attribute__((aligned(8))) OtherTransferCount;
} IO_COUNTERS, *PIO_COUNTERS;

typedef struct {
 DWORD dwOSVersionInfoSize;
 DWORD dwMajorVersion;
 DWORD dwMinorVersion;
 DWORD dwBuildNumber;
 DWORD dwPlatformId;
 CHAR szCSDVersion[128];
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;
typedef struct {
 DWORD dwOSVersionInfoSize;
 DWORD dwMajorVersion;
 DWORD dwMinorVersion;
 DWORD dwBuildNumber;
 DWORD dwPlatformId;
 WCHAR szCSDVersion[128];
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;
typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
typedef struct {
 DWORD dwOSVersionInfoSize;
 DWORD dwMajorVersion;
 DWORD dwMinorVersion;
 DWORD dwBuildNumber;
 DWORD dwPlatformId;
 CHAR szCSDVersion[128];
 WORD wServicePackMajor;
 WORD wServicePackMinor;
 WORD wSuiteMask;
 BYTE wProductType;
 BYTE wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct {
 DWORD dwOSVersionInfoSize;
 DWORD dwMajorVersion;
 DWORD dwMinorVersion;
 DWORD dwBuildNumber;
 DWORD dwPlatformId;
 WCHAR szCSDVersion[128];
 WORD wServicePackMajor;
 WORD wServicePackMinor;
 WORD wSuiteMask;
 BYTE wProductType;
 BYTE wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;
typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
__attribute__((dllimport)) ULONGLONG __attribute__((__stdcall__)) VerSetConditionMask(ULONGLONG,DWORD,BYTE);
typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;
typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;
    DWORD ulManifestPathType;
    DWORD ulManifestPathLength;
    LARGE_INTEGER liManifestLastWriteTime;
    DWORD ulPolicyPathType;
    DWORD ulPolicyPathLength;
    LARGE_INTEGER liPolicyLastWriteTime;
    DWORD ulMetadataSatelliteRosterIndex;
    DWORD ulManifestVersionMajor;
    DWORD ulManifestVersionMinor;
    DWORD ulPolicyVersionMajor;
    DWORD ulPolicyVersionMinor;
    DWORD ulAssemblyDirectoryNameLength;
    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;
    DWORD ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
} ACTIVATION_CONTEXT_QUERY_INDEX, *PACTIVATION_CONTEXT_QUERY_INDEX;
typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX *PCACTIVATION_CONTEXT_QUERY_INDEX;
typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;
    PCWSTR lpFileName;
    PCWSTR lpFilePath;
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;
typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
    ActivationContextBasicInformation = 1,
    ActivationContextDetailedInformation = 2,
    AssemblyDetailedInformationInActivationContext = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext = 4,
    MaxActivationContextInfoClass,
    AssemblyDetailedInformationInActivationContxt = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt = 4
} ACTIVATION_CONTEXT_INFO_CLASS;
typedef enum _JOBOBJECTINFOCLASS
{
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    MaxJobObjectInfoClass
} JOBOBJECTINFOCLASS;
typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP
{
    RelationProcessorCore = 0,
    RelationNumaNode = 1,
    RelationCache = 2,
    RelationProcessorPackage = 3,
    RelationGroup = 4,
    RelationAll = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;
typedef enum _PROCESSOR_CACHE_TYPE
{
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace
} PROCESSOR_CACHE_TYPE;
typedef struct _PROCESSOR_GROUP_INFO
{
    BYTE MaximumProcessorCount;
    BYTE ActiveProcessorCount;
    BYTE Reserved[38];
    KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;
typedef struct _CACHE_DESCRIPTOR
{
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD Size;
    PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;
typedef struct _GROUP_AFFINITY
{
    KAFFINITY Mask;
    WORD Group;
    WORD Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;
typedef struct _PROCESSOR_RELATIONSHIP
{
    BYTE Flags;
    BYTE Reserved[21];
    WORD GroupCount;
    GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;
typedef struct _NUMA_NODE_RELATIONSHIP
{
    DWORD NodeNumber;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;
typedef struct _CACHE_RELATIONSHIP
{
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    PROCESSOR_CACHE_TYPE Type;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;
typedef struct _GROUP_RELATIONSHIP
{
    WORD MaximumGroupCount;
    WORD ActiveGroupCount;
    BYTE Reserved[20];
    PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;
typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION
{
    ULONG_PTR ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union
    {
        struct
        {
            BYTE Flags;
        } ProcessorCore;
        struct
        {
            DWORD NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG Reserved[2];
    } ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;
typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
{
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    DWORD Size;
    union
    {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    } ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
__attribute__((dllimport)) BOOLEAN __attribute__((__stdcall__)) RtlGetProductInfo(DWORD,DWORD,DWORD,DWORD,PDWORD);
typedef UINT_PTR WPARAM;
typedef LONG_PTR LPARAM;
typedef LONG_PTR LRESULT;
typedef WORD ATOM;
typedef DWORD COLORREF, *LPCOLORREF;
typedef int HFILE;
typedef struct HACCEL__ { int unused; } *HACCEL;
typedef struct HBITMAP__ { int unused; } *HBITMAP;
typedef struct HBRUSH__ { int unused; } *HBRUSH;
typedef struct HCOLORSPACE__ { int unused; } *HCOLORSPACE;
typedef struct HDC__ { int unused; } *HDC;
typedef struct HDESK__ { int unused; } *HDESK;
typedef struct HENHMETAFILE__ { int unused; } *HENHMETAFILE;
typedef struct HFONT__ { int unused; } *HFONT;
typedef struct HGLRC__ { int unused; } *HGLRC;
typedef struct HHOOK__ { int unused; } *HHOOK;
typedef struct HICON__ { int unused; } *HICON;
typedef struct HINSTANCE__ { int unused; } *HINSTANCE;
typedef struct HKEY__ { int unused; } *HKEY;
typedef HKEY *PHKEY;
typedef struct HKL__ { int unused; } *HKL;
typedef struct HMENU__ { int unused; } *HMENU;
typedef struct HMETAFILE__ { int unused; } *HMETAFILE;
typedef struct HMONITOR__ { int unused; } *HMONITOR;
typedef struct HPALETTE__ { int unused; } *HPALETTE;
typedef struct HPEN__ { int unused; } *HPEN;
typedef struct HRGN__ { int unused; } *HRGN;
typedef struct HRSRC__ { int unused; } *HRSRC;
typedef struct HTASK__ { int unused; } *HTASK;
typedef struct HWINEVENTHOOK__ { int unused; } *HWINEVENTHOOK;
typedef struct HWINSTA__ { int unused; } *HWINSTA;
typedef struct HWND__ { int unused; } *HWND;
typedef HINSTANCE HMODULE;
typedef HANDLE HGDIOBJ;
typedef HANDLE HGLOBAL;
typedef HANDLE HLOCAL;
typedef HANDLE GLOBALHANDLE;
typedef HANDLE LOCALHANDLE;
typedef HICON HCURSOR;
typedef INT_PTR (__attribute__((__stdcall__)) *FARPROC)();
typedef INT_PTR (__attribute__((__stdcall__)) *NEARPROC)();
typedef INT_PTR (__attribute__((__stdcall__)) *PROC)();
typedef struct tagSIZE
{
    LONG cx;
    LONG cy;
} SIZE, *PSIZE, *LPSIZE;
typedef SIZE SIZEL, *PSIZEL, *LPSIZEL;
typedef struct tagPOINT
{
    LONG x;
    LONG y;
} POINT, *PPOINT, *LPPOINT;
typedef struct _POINTL
{
    LONG x;
    LONG y;
} POINTL, *PPOINTL;
typedef struct tagPOINTS
{
    SHORT x;
    SHORT y;
} POINTS, *PPOINTS, *LPPOINTS;
typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;
typedef struct tagRECT
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECT, *PRECT, *LPRECT;
typedef const RECT *LPCRECT;
typedef struct _RECTL
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECTL, *PRECTL, *LPRECTL;
typedef const RECTL *LPCRECTL;
static inline HRESULT HRESULT_FROM_WIN32(unsigned int x)
{
    return (HRESULT)x > 0 ? ((HRESULT) ((x & 0x0000FFFF) | (7 << 16) | 0x80000000)) : (HRESULT)x;
}
typedef DWORD (__attribute__((__stdcall__)) *LPTHREAD_START_ROUTINE)(LPVOID);
typedef void (__attribute__((__stdcall__)) *PFIBER_START_ROUTINE)( LPVOID lpFiberParameter );
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;
typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;
typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK;
typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO;
typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO;
typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO;
typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO;
typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO;
typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO;
typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO;
typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO;
typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO;
typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;
typedef PCONTEXT LPCONTEXT;
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
typedef LONG (__attribute__((__stdcall__)) *PTOP_LEVEL_EXCEPTION_FILTER)(PEXCEPTION_POINTERS);
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;
typedef struct _OFSTRUCT
{
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *POFSTRUCT, *LPOFSTRUCT;
typedef struct _SECURITY_ATTRIBUTES
{
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;
typedef struct _WIN32_FIND_DATAA
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR cFileName[260];
    CHAR cAlternateFileName[14];
} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR cFileName[260];
    WCHAR cAlternateFileName[14];
} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;
typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
typedef enum _FINDEX_INFO_LEVELS
{
 FindExInfoStandard,
 FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;
typedef enum _FINDEX_SEARCH_OPS
{
 FindExSearchNameMatch,
 FindExSearchLimitToDirectories,
 FindExSearchLimitToDevices,
 FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;
typedef struct _PROCESS_HEAP_ENTRY
{
    LPVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[3];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    } ;
} PROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY;
typedef struct tagMEMORYSTATUS
{
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;

typedef struct tagMEMORYSTATUSEX {
  DWORD dwLength;
  DWORD dwMemoryLoad;
  DWORDLONG __attribute__((aligned(8))) ullTotalPhys;
  DWORDLONG __attribute__((aligned(8))) ullAvailPhys;
  DWORDLONG __attribute__((aligned(8))) ullTotalPageFile;
  DWORDLONG __attribute__((aligned(8))) ullAvailPageFile;
  DWORDLONG __attribute__((aligned(8))) ullTotalVirtual;
  DWORDLONG __attribute__((aligned(8))) ullAvailVirtual;
  DWORDLONG __attribute__((aligned(8))) ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;

typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE;
typedef struct _SYSTEMTIME{
        WORD wYear;
        WORD wMonth;
        WORD wDayOfWeek;
        WORD wDay;
        WORD wHour;
        WORD wMinute;
        WORD wSecond;
        WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;
typedef struct _OVERLAPPED {
        ULONG_PTR Internal;
        ULONG_PTR InternalHigh;
        union {
            struct {
                DWORD Offset;
                DWORD OffsetHigh;
            } ;
            PVOID Pointer;
        } ;
        HANDLE hEvent;
} OVERLAPPED, *LPOVERLAPPED;
typedef void (__attribute__((__stdcall__)) *LPOVERLAPPED_COMPLETION_ROUTINE)(DWORD,DWORD,LPOVERLAPPED);
typedef struct _STARTUPINFOA{
        DWORD cb;
        LPSTR lpReserved;
        LPSTR lpDesktop;
        LPSTR lpTitle;
        DWORD dwX;
        DWORD dwY;
        DWORD dwXSize;
        DWORD dwYSize;
        DWORD dwXCountChars;
        DWORD dwYCountChars;
        DWORD dwFillAttribute;
        DWORD dwFlags;
        WORD wShowWindow;
        WORD cbReserved2;
        BYTE *lpReserved2;
        HANDLE hStdInput;
        HANDLE hStdOutput;
        HANDLE hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW{
        DWORD cb;
        LPWSTR lpReserved;
        LPWSTR lpDesktop;
        LPWSTR lpTitle;
        DWORD dwX;
        DWORD dwY;
        DWORD dwXSize;
        DWORD dwYSize;
        DWORD dwXCountChars;
        DWORD dwYCountChars;
        DWORD dwFillAttribute;
        DWORD dwFlags;
        WORD wShowWindow;
        WORD cbReserved2;
        BYTE *lpReserved2;
        HANDLE hStdInput;
        HANDLE hStdOutput;
        HANDLE hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;
typedef STARTUPINFOA STARTUPINFO;
typedef LPSTARTUPINFOA LPSTARTUPINFO;
typedef struct _PROCESS_INFORMATION{
 HANDLE hProcess;
 HANDLE hThread;
 DWORD dwProcessId;
 DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;
typedef struct _TIME_DYNAMIC_ZONE_INFORMATION
{
    LONG Bias;
    WCHAR StandardName[32];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[32];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[128];
    BOOLEAN DynamicDaylightTimeDisabled;
} DYNAMIC_TIME_ZONE_INFORMATION, *PDYNAMIC_TIME_ZONE_INFORMATION;
typedef struct _TIME_ZONE_INFORMATION{
        LONG Bias;
        WCHAR StandardName[32];
        SYSTEMTIME StandardDate;
        LONG StandardBias;
        WCHAR DaylightName[32];
        SYSTEMTIME DaylightDate;
        LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;
typedef struct _BY_HANDLE_FILE_INFORMATION
{
  DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD dwVolumeSerialNumber;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
  DWORD nNumberOfLinks;
  DWORD nFileIndexHigh;
  DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION ;
typedef struct _SYSTEM_POWER_STATUS
{
  BYTE ACLineStatus;
  BYTE BatteryFlag;
  BYTE BatteryLifePercent;
  BYTE Reserved1;
  DWORD BatteryLifeTime;
  DWORD BatteryFullLifeTime;
} SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;
typedef struct _SYSTEM_INFO
{
    union {
 DWORD dwOemId;
 struct {
  WORD wProcessorArchitecture;
  WORD wReserved;
 } ;
    } ;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;
typedef BOOL (__attribute__((__stdcall__)) *ENUMRESTYPEPROCA)(HMODULE,LPSTR,LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *ENUMRESTYPEPROCW)(HMODULE,LPWSTR,LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *ENUMRESNAMEPROCA)(HMODULE,LPCSTR,LPSTR,LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *ENUMRESNAMEPROCW)(HMODULE,LPCWSTR,LPWSTR,LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *ENUMRESLANGPROCA)(HMODULE,LPCSTR,LPCSTR,WORD,LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *ENUMRESLANGPROCW)(HMODULE,LPCWSTR,LPCWSTR,WORD,LONG_PTR);
typedef ENUMRESTYPEPROCA ENUMRESTYPEPROC;
typedef ENUMRESNAMEPROCA ENUMRESNAMEPROC;
typedef ENUMRESLANGPROCA ENUMRESLANGPROC;
typedef PLDT_ENTRY LPLDT_ENTRY;
typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard
} GET_FILEEX_INFO_LEVELS;
typedef struct _WIN32_FILE_ATTRIBUTES_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;
typedef DWORD (__attribute__((__stdcall__)) *LPPROGRESS_ROUTINE)(LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER,
                                           LARGE_INTEGER, DWORD, DWORD, HANDLE,
                                           HANDLE, LPVOID);
typedef struct tagACTCTXA {
    ULONG cbSize;
    DWORD dwFlags;
    LPCSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCSTR lpAssemblyDirectory;
    LPCSTR lpResourceName;
    LPCSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXA, *PACTCTXA;
typedef struct tagACTCTXW {
    ULONG cbSize;
    DWORD dwFlags;
    LPCWSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXW, *PACTCTXW;
typedef ACTCTXA ACTCTX;
typedef PACTCTXA PACTCTX;
typedef const ACTCTXA *PCACTCTXA;
typedef const ACTCTXW *PCACTCTXW;
typedef PCACTCTXA PCACTCTX;
typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600;
typedef const ACTCTX_SECTION_KEYED_DATA_2600 *PCACTCTX_SECTION_KEYED_DATA_2600;
typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA *PCACTCTX_SECTION_KEYED_DATA;
typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE hActCtx;
    DWORD dwFlags;
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION;
typedef BOOL (__attribute__((__stdcall__)) *PQUERYACTCTXW_FUNC)(DWORD,HANDLE,PVOID,ULONG,PVOID,SIZE_T,SIZE_T *);
typedef struct tagCOMSTAT
{
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
typedef struct tagDCB
{
    DWORD DCBlength;
    DWORD BaudRate;
    unsigned fBinary :1;
    unsigned fParity :1;
    unsigned fOutxCtsFlow :1;
    unsigned fOutxDsrFlow :1;
    unsigned fDtrControl :2;
    unsigned fDsrSensitivity :1;
    unsigned fTXContinueOnXoff :1;
    unsigned fOutX :1;
    unsigned fInX :1;
    unsigned fErrorChar :1;
    unsigned fNull :1;
    unsigned fRtsControl :2;
    unsigned fAbortOnError :1;
    unsigned fDummy2 :17;
    WORD wReserved;
    WORD XonLim;
    WORD XoffLim;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    char XonChar;
    char XoffChar;
    char ErrorChar;
    char EofChar;
    char EvtChar;
    WORD wReserved1;
} DCB, *LPDCB;
typedef struct tagCOMMCONFIG {
 DWORD dwSize;
 WORD wVersion;
 WORD wReserved;
 DCB dcb;
 DWORD dwProviderSubType;
 DWORD dwProviderOffset;
 DWORD dwProviderSize;
 DWORD wcProviderData[1];
} COMMCONFIG, *LPCOMMCONFIG;
typedef struct tagCOMMPROP {
 WORD wPacketLength;
 WORD wPacketVersion;
 DWORD dwServiceMask;
 DWORD dwReserved1;
 DWORD dwMaxTxQueue;
 DWORD dwMaxRxQueue;
 DWORD dwMaxBaud;
 DWORD dwProvSubType;
 DWORD dwProvCapabilities;
 DWORD dwSettableParams;
 DWORD dwSettableBaud;
 WORD wSettableData;
 WORD wSettableStopParity;
 DWORD dwCurrentTxQueue;
 DWORD dwCurrentRxQueue;
 DWORD dwProvSpec1;
 DWORD dwProvSpec2;
 WCHAR wcProvChar[1];
} COMMPROP, *LPCOMMPROP;
typedef struct tagCOMMTIMEOUTS {
 DWORD ReadIntervalTimeout;
 DWORD ReadTotalTimeoutMultiplier;
 DWORD ReadTotalTimeoutConstant;
 DWORD WriteTotalTimeoutMultiplier;
 DWORD WriteTotalTimeoutConstant;
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;
typedef void (__attribute__((__stdcall__)) *PAPCFUNC)(ULONG_PTR);
typedef void (__attribute__((__stdcall__)) *PTIMERAPCROUTINE)(LPVOID,DWORD,DWORD);
typedef enum _COMPUTER_NAME_FORMAT
{
 ComputerNameNetBIOS,
 ComputerNameDnsHostname,
 ComputerNameDnsDomain,
 ComputerNameDnsFullyQualified,
 ComputerNamePhysicalNetBIOS,
 ComputerNamePhysicalDnsHostname,
 ComputerNamePhysicalDnsDomain,
 ComputerNamePhysicalDnsFullyQualified,
 ComputerNameMax
} COMPUTER_NAME_FORMAT;
typedef struct tagHW_PROFILE_INFOA {
    DWORD dwDockInfo;
    CHAR szHwProfileGuid[39];
    CHAR szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
    DWORD dwDockInfo;
    WCHAR szHwProfileGuid[39];
    WCHAR szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;
typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;
typedef enum _DEP_SYSTEM_POLICY_TYPE {
    AlwaysOff = 0,
    AlwaysOn = 1,
    OptIn = 2,
    OptOut = 3
} DEP_SYSTEM_POLICY_TYPE;
typedef struct _EVENTLOG_FULL_INFORMATION {
    DWORD dwFull;
} EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;

typedef struct _WIN32_STREAM_ID {
 DWORD dwStreamId;
 DWORD dwStreamAttributes;
 LARGE_INTEGER __attribute__((aligned(8))) Size;
 DWORD dwStreamNameSize;
 WCHAR cStreamName[1];
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID;

__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ActivateActCtx(HANDLE,ULONG_PTR *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AddAccessAllowedAce(PACL,DWORD,DWORD,PSID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AddAccessAllowedAceEx(PACL,DWORD,DWORD,DWORD,PSID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AddAccessDeniedAce(PACL,DWORD,DWORD,PSID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AddAccessDeniedAceEx(PACL,DWORD,DWORD,DWORD,PSID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AddAce(PACL,DWORD,DWORD,LPVOID,DWORD);
__attribute__((dllimport)) ATOM __attribute__((__stdcall__)) AddAtomA(LPCSTR);
__attribute__((dllimport)) ATOM __attribute__((__stdcall__)) AddAtomW(LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AddAuditAccessAce(PACL,DWORD,DWORD,PSID,BOOL,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AddAuditAccessAceEx(PACL,DWORD,DWORD,DWORD,PSID,BOOL,BOOL);
__attribute__((dllimport)) void __attribute__((__stdcall__)) AddRefActCtx(HANDLE);
__attribute__((dllimport)) PVOID __attribute__((__stdcall__)) AddVectoredExceptionHandler(ULONG,PVECTORED_EXCEPTION_HANDLER);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AdjustTokenGroups(HANDLE,BOOL,PTOKEN_GROUPS,DWORD,PTOKEN_GROUPS,PDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AccessCheck(PSECURITY_DESCRIPTOR,HANDLE,DWORD,PGENERIC_MAPPING,PPRIVILEGE_SET,LPDWORD,LPDWORD,LPBOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AccessCheckAndAuditAlarmA(LPCSTR,LPVOID,LPSTR,LPSTR,PSECURITY_DESCRIPTOR,DWORD,PGENERIC_MAPPING,BOOL,LPDWORD,LPBOOL,LPBOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AccessCheckAndAuditAlarmW(LPCWSTR,LPVOID,LPWSTR,LPWSTR,PSECURITY_DESCRIPTOR,DWORD,PGENERIC_MAPPING,BOOL,LPDWORD,LPBOOL,LPBOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AccessCheckByType(PSECURITY_DESCRIPTOR,PSID,HANDLE,DWORD,POBJECT_TYPE_LIST,DWORD,PGENERIC_MAPPING,PPRIVILEGE_SET,LPDWORD,LPDWORD,LPBOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AdjustTokenPrivileges(HANDLE,BOOL,PTOKEN_PRIVILEGES,DWORD,PTOKEN_PRIVILEGES,PDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY,BYTE,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,PSID *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AllocateLocallyUniqueId(PLUID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AreAllAccessesGranted(DWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AreAnyAccessesGranted(DWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AreFileApisANSI(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AssignProcessToJobObject(HANDLE,HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) BackupEventLogA(HANDLE,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) BackupEventLogW(HANDLE,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) BackupRead(HANDLE,LPBYTE,DWORD,LPDWORD,BOOL,BOOL,LPVOID*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) BackupSeek(HANDLE,DWORD,DWORD,LPDWORD,LPDWORD,LPVOID*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) BackupWrite(HANDLE,LPBYTE,DWORD,LPDWORD,BOOL,BOOL,LPVOID*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) Beep(DWORD,DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) BeginUpdateResourceA(LPCSTR,BOOL);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) BeginUpdateResourceW(LPCWSTR,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) BindIoCompletionCallback(HANDLE,LPOVERLAPPED_COMPLETION_ROUTINE,ULONG);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) BuildCommDCBA(LPCSTR,LPDCB);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) BuildCommDCBW(LPCWSTR,LPDCB);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) BuildCommDCBAndTimeoutsA(LPCSTR,LPDCB,LPCOMMTIMEOUTS);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) BuildCommDCBAndTimeoutsW(LPCWSTR,LPDCB,LPCOMMTIMEOUTS);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CallNamedPipeA(LPCSTR,LPVOID,DWORD,LPVOID,DWORD,LPDWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CallNamedPipeW(LPCWSTR,LPVOID,DWORD,LPVOID,DWORD,LPDWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CancelIo(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CancelIoEx(HANDLE,LPOVERLAPPED);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CancelWaitableTimer(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ChangeTimerQueueTimer(HANDLE,HANDLE,ULONG,ULONG);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CheckTokenMembership(HANDLE,PSID,PBOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ClearCommBreak(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ClearCommError(HANDLE,LPDWORD,LPCOMSTAT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ClearEventLogA(HANDLE,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ClearEventLogW(HANDLE,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CloseEventLog(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CloseHandle(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CommConfigDialogA(LPCSTR,HWND,LPCOMMCONFIG);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CommConfigDialogW(LPCWSTR,HWND,LPCOMMCONFIG);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ConnectNamedPipe(HANDLE,LPOVERLAPPED);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ContinueDebugEvent(DWORD,DWORD,DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) ConvertToGlobalHandle(HANDLE hSrc);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CopyFileA(LPCSTR,LPCSTR,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CopyFileW(LPCWSTR,LPCWSTR,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CopyFileExA(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CopyFileExW(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CopySid(DWORD,PSID,PSID);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) CompareFileTime(const FILETIME*,const FILETIME*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ConvertFiberToThread(void);
__attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) ConvertThreadToFiber(LPVOID);
__attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) ConvertThreadToFiberEx(LPVOID,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ConvertToAutoInheritPrivateObjectSecurity(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR*,GUID*,BOOL,PGENERIC_MAPPING);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateActCtxA(PCACTCTXA);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateActCtxW(PCACTCTXW);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreateDirectoryA(LPCSTR,LPSECURITY_ATTRIBUTES);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreateDirectoryW(LPCWSTR,LPSECURITY_ATTRIBUTES);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreateDirectoryExA(LPCSTR,LPCSTR,LPSECURITY_ATTRIBUTES);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreateDirectoryExW(LPCWSTR,LPCWSTR,LPSECURITY_ATTRIBUTES);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateEventA(LPSECURITY_ATTRIBUTES,BOOL,BOOL,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateEventW(LPSECURITY_ATTRIBUTES,BOOL,BOOL,LPCWSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateEventExA(SECURITY_ATTRIBUTES*,LPCSTR,DWORD,DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateEventExW(SECURITY_ATTRIBUTES*,LPCWSTR,DWORD,DWORD);
__attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) CreateFiber(SIZE_T,LPFIBER_START_ROUTINE,LPVOID);
__attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) CreateFiberEx(SIZE_T,SIZE_T,DWORD,LPFIBER_START_ROUTINE,LPVOID);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateFileA(LPCSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES,DWORD,DWORD,HANDLE);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateFileW(LPCWSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES,DWORD,DWORD,HANDLE);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateFileMappingA(HANDLE,LPSECURITY_ATTRIBUTES,DWORD,DWORD,DWORD,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateFileMappingW(HANDLE,LPSECURITY_ATTRIBUTES,DWORD,DWORD,DWORD,LPCWSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateIoCompletionPort(HANDLE,HANDLE,ULONG_PTR,DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateJobObjectA(LPSECURITY_ATTRIBUTES,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateJobObjectW(LPSECURITY_ATTRIBUTES,LPCWSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateMailslotA(LPCSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateMailslotW(LPCWSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateMemoryResourceNotification(MEMORY_RESOURCE_NOTIFICATION_TYPE);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateMutexA(LPSECURITY_ATTRIBUTES,BOOL,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateMutexW(LPSECURITY_ATTRIBUTES,BOOL,LPCWSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateMutexExA(SECURITY_ATTRIBUTES*,LPCSTR,DWORD,DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateMutexExW(SECURITY_ATTRIBUTES*,LPCWSTR,DWORD,DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateNamedPipeA(LPCSTR,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,LPSECURITY_ATTRIBUTES);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateNamedPipeW(LPCWSTR,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,LPSECURITY_ATTRIBUTES);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreatePipe(PHANDLE,PHANDLE,LPSECURITY_ATTRIBUTES,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreatePrivateObjectSecurity(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR*,BOOL,HANDLE,PGENERIC_MAPPING);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreateProcessA(LPCSTR,LPSTR,LPSECURITY_ATTRIBUTES,LPSECURITY_ATTRIBUTES,BOOL,DWORD,LPVOID,LPCSTR,LPSTARTUPINFOA,LPPROCESS_INFORMATION);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreateProcessW(LPCWSTR,LPWSTR,LPSECURITY_ATTRIBUTES,LPSECURITY_ATTRIBUTES,BOOL,DWORD,LPVOID,LPCWSTR,LPSTARTUPINFOW,LPPROCESS_INFORMATION);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreateProcessAsUserA(HANDLE,LPCSTR,LPSTR,LPSECURITY_ATTRIBUTES,LPSECURITY_ATTRIBUTES,BOOL,DWORD,LPVOID,LPCSTR,LPSTARTUPINFOA,LPPROCESS_INFORMATION);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreateProcessAsUserW(HANDLE,LPCWSTR,LPWSTR,LPSECURITY_ATTRIBUTES,LPSECURITY_ATTRIBUTES,BOOL,DWORD,LPVOID,LPCWSTR,LPSTARTUPINFOW,LPPROCESS_INFORMATION);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreateProcessWithLogonW(LPCWSTR,LPCWSTR,LPCWSTR,DWORD,LPCWSTR,LPWSTR,DWORD,LPVOID,LPCWSTR,LPSTARTUPINFOW,LPPROCESS_INFORMATION);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateRemoteThread(HANDLE,LPSECURITY_ATTRIBUTES,SIZE_T,LPTHREAD_START_ROUTINE,LPVOID,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreateRestrictedToken(HANDLE,DWORD,DWORD,PSID_AND_ATTRIBUTES,DWORD,PLUID_AND_ATTRIBUTES,DWORD,PSID_AND_ATTRIBUTES,PHANDLE);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateSemaphoreA(LPSECURITY_ATTRIBUTES,LONG,LONG,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateSemaphoreW(LPSECURITY_ATTRIBUTES,LONG,LONG,LPCWSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateSemaphoreExA(SECURITY_ATTRIBUTES*,LONG,LONG,LPCSTR,DWORD,DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateSemaphoreExW(SECURITY_ATTRIBUTES*,LONG,LONG,LPCWSTR,DWORD,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) CreateTapePartition(HANDLE,DWORD,DWORD,DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateThread(LPSECURITY_ATTRIBUTES,SIZE_T,LPTHREAD_START_ROUTINE,LPVOID,DWORD,LPDWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateTimerQueue(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreateTimerQueueTimer(PHANDLE,HANDLE,WAITORTIMERCALLBACK,PVOID,DWORD,DWORD,ULONG);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateWaitableTimerA(LPSECURITY_ATTRIBUTES,BOOL,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateWaitableTimerW(LPSECURITY_ATTRIBUTES,BOOL,LPCWSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateWaitableTimerExA(SECURITY_ATTRIBUTES*,LPCSTR,DWORD,DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateWaitableTimerExW(SECURITY_ATTRIBUTES*,LPCWSTR,DWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreateWellKnownSid(WELL_KNOWN_SID_TYPE,PSID,PSID,DWORD*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeactivateActCtx(DWORD,ULONG_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DebugActiveProcess(DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DebugActiveProcessStop(DWORD);
__attribute__((dllimport)) void __attribute__((__stdcall__)) DebugBreak(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DebugBreakProcess(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DebugSetProcessKillOnExit(BOOL);
__attribute__((dllimport)) PVOID __attribute__((__stdcall__)) DecodePointer(PVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DecryptFileA(LPCSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DecryptFileW(LPCWSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DefineDosDeviceA(DWORD,LPCSTR,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DefineDosDeviceW(DWORD,LPCWSTR,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeleteAce(PACL,DWORD);
__attribute__((dllimport)) ATOM __attribute__((__stdcall__)) DeleteAtom(ATOM);
__attribute__((dllimport)) void __attribute__((__stdcall__)) DeleteCriticalSection(CRITICAL_SECTION *lpCrit);
__attribute__((dllimport)) void __attribute__((__stdcall__)) DeleteFiber(LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeleteFileA(LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeleteFileW(LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeleteTimerQueueEx(HANDLE,HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeleteTimerQueueTimer(HANDLE,HANDLE,HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeleteVolumeMountPointA(LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeleteVolumeMountPointW(LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeregisterEventSource(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DestroyPrivateObjectSecurity(PSECURITY_DESCRIPTOR*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeviceIoControl(HANDLE,DWORD,LPVOID,DWORD,LPVOID,DWORD,LPDWORD,LPOVERLAPPED);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DisableThreadLibraryCalls(HMODULE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DisconnectNamedPipe(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DnsHostnameToComputerNameA(LPCSTR,LPSTR,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DnsHostnameToComputerNameW(LPCWSTR,LPWSTR,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DosDateTimeToFileTime(WORD,WORD,LPFILETIME);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DuplicateHandle(HANDLE,HANDLE,HANDLE,HANDLE*,DWORD,BOOL,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DuplicateToken(HANDLE,SECURITY_IMPERSONATION_LEVEL,PHANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DuplicateTokenEx(HANDLE,DWORD,LPSECURITY_ATTRIBUTES,SECURITY_IMPERSONATION_LEVEL,TOKEN_TYPE,PHANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EscapeCommFunction(HANDLE,UINT);
__attribute__((dllimport)) PVOID __attribute__((__stdcall__)) EncodePointer(PVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EncryptFileA(LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EncryptFileW(LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EndUpdateResourceA(HANDLE,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EndUpdateResourceW(HANDLE,BOOL);
__attribute__((dllimport)) void __attribute__((__stdcall__)) EnterCriticalSection(CRITICAL_SECTION *lpCrit);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumResourceLanguagesA(HMODULE,LPCSTR,LPCSTR,ENUMRESLANGPROCA,LONG_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumResourceLanguagesW(HMODULE,LPCWSTR,LPCWSTR,ENUMRESLANGPROCW,LONG_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumResourceNamesA(HMODULE,LPCSTR,ENUMRESNAMEPROCA,LONG_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumResourceNamesW(HMODULE,LPCWSTR,ENUMRESNAMEPROCW,LONG_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumResourceTypesA(HMODULE,ENUMRESTYPEPROCA,LONG_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumResourceTypesW(HMODULE,ENUMRESTYPEPROCW,LONG_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EqualSid(PSID, PSID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EqualPrefixSid(PSID,PSID);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) EraseTape(HANDLE,DWORD,BOOL);
__attribute__((dllimport)) void __attribute__((noreturn)) __attribute__((__stdcall__)) ExitProcess(DWORD);
__attribute__((dllimport)) void __attribute__((noreturn)) __attribute__((__stdcall__)) ExitThread(DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) ExpandEnvironmentStringsA(LPCSTR,LPSTR,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) ExpandEnvironmentStringsW(LPCWSTR,LPWSTR,DWORD);
__attribute__((dllimport)) void __attribute__((__stdcall__)) FatalAppExitA(UINT,LPCSTR);
__attribute__((dllimport)) void __attribute__((__stdcall__)) FatalAppExitW(UINT,LPCWSTR);
__attribute__((dllimport)) void __attribute__((__stdcall__)) FatalExit(int);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FileEncryptionStatusA(LPCSTR,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FileEncryptionStatusW(LPCWSTR,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FileTimeToDosDateTime(const FILETIME*,LPWORD,LPWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FileTimeToLocalFileTime(const FILETIME*,LPFILETIME);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FileTimeToSystemTime(const FILETIME*,LPSYSTEMTIME);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FindActCtxSectionStringA(DWORD,const GUID *,ULONG,LPCSTR,PACTCTX_SECTION_KEYED_DATA);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FindActCtxSectionStringW(DWORD,const GUID *,ULONG,LPCWSTR,PACTCTX_SECTION_KEYED_DATA);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FindActCtxSectionGuid(DWORD,const GUID *,ULONG,const GUID *,PACTCTX_SECTION_KEYED_DATA);
__attribute__((dllimport)) ATOM __attribute__((__stdcall__)) FindAtomA(LPCSTR);
__attribute__((dllimport)) ATOM __attribute__((__stdcall__)) FindAtomW(LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FindClose(HANDLE);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstChangeNotificationA(LPCSTR,BOOL,DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstChangeNotificationW(LPCWSTR,BOOL,DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstFileA(LPCSTR,LPWIN32_FIND_DATAA);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstFileW(LPCWSTR,LPWIN32_FIND_DATAW);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstFileExA(LPCSTR,FINDEX_INFO_LEVELS,LPVOID,FINDEX_SEARCH_OPS,LPVOID,DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstFileExW(LPCWSTR,FINDEX_INFO_LEVELS,LPVOID,FINDEX_SEARCH_OPS,LPVOID,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FindFirstFreeAce(PACL,LPVOID*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FindNextChangeNotification(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FindNextFileA(HANDLE,LPWIN32_FIND_DATAA);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FindNextFileW(HANDLE,LPWIN32_FIND_DATAW);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FindCloseChangeNotification(HANDLE);
__attribute__((dllimport)) HRSRC __attribute__((__stdcall__)) FindResourceA(HMODULE,LPCSTR,LPCSTR);
__attribute__((dllimport)) HRSRC __attribute__((__stdcall__)) FindResourceW(HMODULE,LPCWSTR,LPCWSTR);
__attribute__((dllimport)) HRSRC __attribute__((__stdcall__)) FindResourceExA(HMODULE,LPCSTR,LPCSTR,WORD);
__attribute__((dllimport)) HRSRC __attribute__((__stdcall__)) FindResourceExW(HMODULE,LPCWSTR,LPCWSTR,WORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstVolumeA(LPSTR,DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstVolumeW(LPWSTR,DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstVolumeMountPointA(LPCSTR,LPSTR,DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstVolumeMountPointW(LPCWSTR,LPWSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FindNextVolumeA(HANDLE,LPSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FindNextVolumeW(HANDLE,LPWSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FindNextVolumeMountPointA(HANDLE,LPSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FindNextVolumeMountPointW(HANDLE,LPWSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FindVolumeClose(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FindVolumeMountPointClose(HANDLE);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) FlsAlloc(PFLS_CALLBACK_FUNCTION);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FlsFree(DWORD);
__attribute__((dllimport)) PVOID __attribute__((__stdcall__)) FlsGetValue(DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FlsSetValue(DWORD,PVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FlushFileBuffers(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FlushInstructionCache(HANDLE,LPCVOID,SIZE_T);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FlushViewOfFile(LPCVOID,SIZE_T);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) FormatMessageA(DWORD,LPCVOID,DWORD,DWORD,LPSTR,DWORD,va_list*);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) FormatMessageW(DWORD,LPCVOID,DWORD,DWORD,LPWSTR,DWORD,va_list*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FreeEnvironmentStringsA(LPSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FreeEnvironmentStringsW(LPWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FreeLibrary(HMODULE);
__attribute__((dllimport)) void __attribute__((__stdcall__)) FreeLibraryAndExitThread(HINSTANCE,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FreeResource(HGLOBAL);
__attribute__((dllimport)) PVOID __attribute__((__stdcall__)) FreeSid(PSID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetAce(PACL,DWORD,LPVOID*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetAclInformation(PACL,LPVOID,DWORD,ACL_INFORMATION_CLASS);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetAtomNameA(ATOM,LPSTR,INT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetAtomNameW(ATOM,LPWSTR,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetBinaryTypeA( LPCSTR lpApplicationName, LPDWORD lpBinaryType );
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetBinaryTypeW( LPCWSTR lpApplicationName, LPDWORD lpBinaryType );
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCurrentActCtx(HANDLE *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCommConfig(HANDLE,LPCOMMCONFIG,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCommMask(HANDLE,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCommModemStatus(HANDLE,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCommProperties(HANDLE,LPCOMMPROP);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCommState(HANDLE,LPDCB);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCommTimeouts(HANDLE,LPCOMMTIMEOUTS);
__attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) GetCommandLineA(void);
__attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) GetCommandLineW(void);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetCompressedFileSizeA(LPCSTR,LPDWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetCompressedFileSizeW(LPCWSTR,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetComputerNameA(LPSTR,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetComputerNameW(LPWSTR,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetComputerNameExA(COMPUTER_NAME_FORMAT,LPSTR,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetComputerNameExW(COMPUTER_NAME_FORMAT,LPWSTR,LPDWORD);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetCurrentDirectoryA(UINT,LPSTR);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetCurrentDirectoryW(UINT,LPWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCurrentHwProfileA(LPHW_PROFILE_INFOA);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCurrentHwProfileW(LPHW_PROFILE_INFOW);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) GetCurrentProcess(void);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) GetCurrentThread(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetDefaultCommConfigA(LPCSTR,LPCOMMCONFIG,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetDefaultCommConfigW(LPCWSTR,LPCOMMCONFIG,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetDevicePowerState(HANDLE,BOOL*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetDiskFreeSpaceA(LPCSTR,LPDWORD,LPDWORD,LPDWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetDiskFreeSpaceW(LPCWSTR,LPDWORD,LPDWORD,LPDWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetDiskFreeSpaceExA(LPCSTR,PULARGE_INTEGER,PULARGE_INTEGER,PULARGE_INTEGER);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetDiskFreeSpaceExW(LPCWSTR,PULARGE_INTEGER,PULARGE_INTEGER,PULARGE_INTEGER);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetDllDirectoryA(DWORD,LPSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetDllDirectoryW(DWORD,LPWSTR);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetDriveTypeA(LPCSTR);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetDriveTypeW(LPCWSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetDynamicTimeZoneInformation(PDYNAMIC_TIME_ZONE_INFORMATION);
__attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) GetEnvironmentStringsA(void);
__attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) GetEnvironmentStringsW(void);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetEnvironmentVariableA(LPCSTR,LPSTR,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetEnvironmentVariableW(LPCWSTR,LPWSTR,DWORD);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetErrorMode(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetEventLogInformation(HANDLE,DWORD,LPVOID,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetExitCodeProcess(HANDLE,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetExitCodeThread(HANDLE,LPDWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFileAttributesA(LPCSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFileAttributesW(LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetFileAttributesExA(LPCSTR,GET_FILEEX_INFO_LEVELS,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetFileAttributesExW(LPCWSTR,GET_FILEEX_INFO_LEVELS,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetFileInformationByHandle(HANDLE,BY_HANDLE_FILE_INFORMATION*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetFileSecurityA(LPCSTR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetFileSecurityW(LPCWSTR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,LPDWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFileSize(HANDLE,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetFileSizeEx(HANDLE,PLARGE_INTEGER);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetFileTime(HANDLE,LPFILETIME,LPFILETIME,LPFILETIME);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFileType(HANDLE);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFullPathNameA(LPCSTR,DWORD,LPSTR,LPSTR*);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFullPathNameW(LPCWSTR,DWORD,LPWSTR,LPWSTR*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetHandleInformation(HANDLE,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetKernelObjectSecurity(HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,LPDWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetLengthSid(PSID);
__attribute__((dllimport)) void __attribute__((__stdcall__)) GetLocalTime(LPSYSTEMTIME);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetLogicalDrives(void);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetLogicalDriveStringsA(UINT,LPSTR);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetLogicalDriveStringsW(UINT,LPWSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetLongPathNameA(LPCSTR,LPSTR,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetLongPathNameW(LPCWSTR,LPWSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetMailslotInfo(HANDLE,LPDWORD,LPDWORD,LPDWORD,LPDWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetModuleFileNameA(HMODULE,LPSTR,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetModuleFileNameW(HMODULE,LPWSTR,DWORD);
__attribute__((dllimport)) HMODULE __attribute__((__stdcall__)) GetModuleHandleA(LPCSTR);
__attribute__((dllimport)) HMODULE __attribute__((__stdcall__)) GetModuleHandleW(LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetModuleHandleExA(DWORD,LPCSTR,HMODULE*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetModuleHandleExW(DWORD,LPCWSTR,HMODULE*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetNamedPipeHandleStateA(HANDLE,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetNamedPipeHandleStateW(HANDLE,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPWSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetNamedPipeInfo(HANDLE,LPDWORD,LPDWORD,LPDWORD,LPDWORD);
__attribute__((dllimport)) void __attribute__((__stdcall__)) GetNativeSystemInfo(LPSYSTEM_INFO);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetNumberOfEventLogRecords(HANDLE,PDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetOldestEventLogRecord(HANDLE,PDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetOverlappedResult(HANDLE,LPOVERLAPPED,LPDWORD,BOOL);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetPriorityClass(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetPrivateObjectSecurity(PSECURITY_DESCRIPTOR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,PDWORD);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetPrivateProfileIntA(LPCSTR,LPCSTR,INT,LPCSTR);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetPrivateProfileIntW(LPCWSTR,LPCWSTR,INT,LPCWSTR);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetPrivateProfileSectionA(LPCSTR,LPSTR,DWORD,LPCSTR);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetPrivateProfileSectionW(LPCWSTR,LPWSTR,DWORD,LPCWSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionNamesA(LPSTR,DWORD,LPCSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionNamesW(LPWSTR,DWORD,LPCWSTR);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetPrivateProfileStringA(LPCSTR,LPCSTR,LPCSTR,LPSTR,UINT,LPCSTR);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetPrivateProfileStringW(LPCWSTR,LPCWSTR,LPCWSTR,LPWSTR,UINT,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetPrivateProfileStructA(LPCSTR,LPCSTR,LPVOID,UINT,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetPrivateProfileStructW(LPCWSTR,LPCWSTR,LPVOID,UINT,LPCWSTR);
__attribute__((dllimport)) FARPROC __attribute__((__stdcall__)) GetProcAddress(HMODULE,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetProcessAffinityMask(HANDLE,PDWORD_PTR,PDWORD_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetLogicalProcessorInformation(PSYSTEM_LOGICAL_PROCESSOR_INFORMATION,PDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetLogicalProcessorInformationEx(LOGICAL_PROCESSOR_RELATIONSHIP,PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX,PDWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetProcessHeaps(DWORD,PHANDLE);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetProcessId(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetProcessIoCounters(HANDLE,PIO_COUNTERS);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetProcessPriorityBoost(HANDLE,PBOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetProcessShutdownParameters(LPDWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetProcessTimes(HANDLE,LPFILETIME,LPFILETIME,LPFILETIME,LPFILETIME);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetProcessVersion(DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetProcessWorkingSetSize(HANDLE,PSIZE_T,PSIZE_T);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetProductInfo(DWORD,DWORD,DWORD,DWORD,PDWORD);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetProfileIntA(LPCSTR,LPCSTR,INT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetProfileIntW(LPCWSTR,LPCWSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetProfileSectionA(LPCSTR,LPSTR,DWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetProfileSectionW(LPCWSTR,LPWSTR,DWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetProfileStringA(LPCSTR,LPCSTR,LPCSTR,LPSTR,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetProfileStringW(LPCWSTR,LPCWSTR,LPCWSTR,LPWSTR,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetQueuedCompletionStatus(HANDLE,LPDWORD,PULONG_PTR,LPOVERLAPPED*,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetSecurityDescriptorControl(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR_CONTROL,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR,LPBOOL,PACL *,LPBOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR,PSID *,LPBOOL);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetSecurityDescriptorLength(PSECURITY_DESCRIPTOR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR,PSID *,LPBOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR,LPBOOL,PACL *,LPBOOL);
__attribute__((dllimport)) PSID_IDENTIFIER_AUTHORITY __attribute__((__stdcall__)) GetSidIdentifierAuthority(PSID);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetSidLengthRequired(BYTE);
__attribute__((dllimport)) PDWORD __attribute__((__stdcall__)) GetSidSubAuthority(PSID,DWORD);
__attribute__((dllimport)) PUCHAR __attribute__((__stdcall__)) GetSidSubAuthorityCount(PSID);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetShortPathNameA(LPCSTR,LPSTR,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetShortPathNameW(LPCWSTR,LPWSTR,DWORD);
__attribute__((dllimport)) void __attribute__((__stdcall__)) GetStartupInfoA(LPSTARTUPINFOA);
__attribute__((dllimport)) void __attribute__((__stdcall__)) GetStartupInfoW(LPSTARTUPINFOW);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) GetStdHandle(DWORD);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemDirectoryA(LPSTR,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemDirectoryW(LPWSTR,UINT);
__attribute__((dllimport)) void __attribute__((__stdcall__)) GetSystemInfo(LPSYSTEM_INFO);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetSystemPowerStatus(LPSYSTEM_POWER_STATUS);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetSystemRegistryQuota(PDWORD,PDWORD);
__attribute__((dllimport)) void __attribute__((__stdcall__)) GetSystemTime(LPSYSTEMTIME);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetSystemTimeAdjustment(PDWORD,PDWORD,PBOOL);
__attribute__((dllimport)) void __attribute__((__stdcall__)) GetSystemTimeAsFileTime(LPFILETIME);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemWindowsDirectoryA(LPSTR,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemWindowsDirectoryW(LPWSTR,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemWow64DirectoryA(LPSTR,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemWow64DirectoryW(LPWSTR,UINT);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTapeParameters(HANDLE,DWORD,LPDWORD,LPVOID);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTapePosition(HANDLE,DWORD,LPDWORD,LPDWORD,LPDWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTapeStatus(HANDLE);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetTempFileNameA(LPCSTR,LPCSTR,UINT,LPSTR);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetTempFileNameW(LPCWSTR,LPCWSTR,UINT,LPWSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTempPathA(DWORD,LPSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTempPathW(DWORD,LPWSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetThreadId(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetThreadIOPendingFlag(HANDLE,PBOOL);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTickCount(void);
__attribute__((dllimport)) ULONGLONG __attribute__((__stdcall__)) GetTickCount64(void);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTimeZoneInformation(LPTIME_ZONE_INFORMATION);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetThreadContext(HANDLE,CONTEXT *);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetThreadErrorMode(void);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetThreadPriority(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetThreadPriorityBoost(HANDLE,PBOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetThreadSelectorEntry(HANDLE,DWORD,LPLDT_ENTRY);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetThreadTimes(HANDLE,LPFILETIME,LPFILETIME,LPFILETIME,LPFILETIME);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetTokenInformation(HANDLE,TOKEN_INFORMATION_CLASS,LPVOID,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetUserNameA(LPSTR,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetUserNameW(LPWSTR,LPDWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetVersion(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetVersionExA(OSVERSIONINFOA*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetVersionExW(OSVERSIONINFOW*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetVolumeInformationA(LPCSTR,LPSTR,DWORD,LPDWORD,LPDWORD,LPDWORD,LPSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetVolumeInformationW(LPCWSTR,LPWSTR,DWORD,LPDWORD,LPDWORD,LPDWORD,LPWSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetVolumeNameForVolumeMountPointA(LPCSTR,LPSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetVolumeNameForVolumeMountPointW(LPCWSTR,LPWSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetVolumePathNameA(LPCSTR,LPSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetVolumePathNameW(LPCWSTR,LPWSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetVolumePathNamesForVolumeNameA(LPCSTR,LPSTR,DWORD,PDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetVolumePathNamesForVolumeNameW(LPCWSTR,LPWSTR,DWORD,PDWORD);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetWindowsDirectoryA(LPSTR,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetWindowsDirectoryW(LPWSTR,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetWriteWatch(DWORD,LPVOID,SIZE_T,LPVOID*,ULONG_PTR*,ULONG*);
__attribute__((dllimport)) ATOM __attribute__((__stdcall__)) GlobalAddAtomA(LPCSTR);
__attribute__((dllimport)) ATOM __attribute__((__stdcall__)) GlobalAddAtomW(LPCWSTR);
__attribute__((dllimport)) HGLOBAL __attribute__((__stdcall__)) GlobalAlloc(UINT,SIZE_T) __attribute__((__alloc_size__(2)));
__attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) GlobalCompact(DWORD);
__attribute__((dllimport)) ATOM __attribute__((__stdcall__)) GlobalDeleteAtom(ATOM);
__attribute__((dllimport)) ATOM __attribute__((__stdcall__)) GlobalFindAtomA(LPCSTR);
__attribute__((dllimport)) ATOM __attribute__((__stdcall__)) GlobalFindAtomW(LPCWSTR);
__attribute__((dllimport)) void __attribute__((__stdcall__)) GlobalFix(HGLOBAL);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GlobalFlags(HGLOBAL);
__attribute__((dllimport)) HGLOBAL __attribute__((__stdcall__)) GlobalFree(HGLOBAL);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GlobalGetAtomNameA(ATOM,LPSTR,INT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GlobalGetAtomNameW(ATOM,LPWSTR,INT);
__attribute__((dllimport)) HGLOBAL __attribute__((__stdcall__)) GlobalHandle(LPCVOID);
__attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) GlobalLock(HGLOBAL);
__attribute__((dllimport)) void __attribute__((__stdcall__)) GlobalMemoryStatus(LPMEMORYSTATUS);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GlobalMemoryStatusEx(LPMEMORYSTATUSEX);
__attribute__((dllimport)) HGLOBAL __attribute__((__stdcall__)) GlobalReAlloc(HGLOBAL,SIZE_T,UINT) __attribute__((__alloc_size__(3)));
__attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) GlobalSize(HGLOBAL);
__attribute__((dllimport)) void __attribute__((__stdcall__)) GlobalUnfix(HGLOBAL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GlobalUnlock(HGLOBAL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GlobalUnWire(HGLOBAL);
__attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) GlobalWire(HGLOBAL);
__attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) HeapAlloc(HANDLE,DWORD,SIZE_T) __attribute__((__alloc_size__(3)));
__attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) HeapCompact(HANDLE,DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) HeapCreate(DWORD,SIZE_T,SIZE_T);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) HeapDestroy(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) HeapFree(HANDLE,DWORD,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) HeapLock(HANDLE);
__attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) HeapReAlloc(HANDLE,DWORD,LPVOID,SIZE_T) __attribute__((__alloc_size__(4)));
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) HeapQueryInformation(HANDLE,HEAP_INFORMATION_CLASS,PVOID,SIZE_T,PSIZE_T);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) HeapSetInformation(HANDLE,HEAP_INFORMATION_CLASS,PVOID,SIZE_T);
__attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) HeapSize(HANDLE,DWORD,LPCVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) HeapUnlock(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) HeapValidate(HANDLE,DWORD,LPCVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) HeapWalk(HANDLE,LPPROCESS_HEAP_ENTRY);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InitAtomTable(DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InitializeAcl(PACL,DWORD,DWORD);
__attribute__((dllimport)) void __attribute__((__stdcall__)) InitializeCriticalSection(CRITICAL_SECTION *lpCrit);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InitializeCriticalSectionAndSpinCount(CRITICAL_SECTION *,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InitializeCriticalSectionEx(CRITICAL_SECTION *,DWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InitializeSid(PSID,PSID_IDENTIFIER_AUTHORITY,BYTE);
__attribute__((dllimport)) void __attribute__((__stdcall__)) InitializeSListHead(PSLIST_HEADER);
__attribute__((dllimport)) PSINGLE_LIST_ENTRY __attribute__((__stdcall__)) InterlockedFlushSList(PSLIST_HEADER);
__attribute__((dllimport)) PSINGLE_LIST_ENTRY __attribute__((__stdcall__)) InterlockedPopEntrySList(PSLIST_HEADER);
__attribute__((dllimport)) PSINGLE_LIST_ENTRY __attribute__((__stdcall__)) InterlockedPushEntrySList(PSLIST_HEADER, PSINGLE_LIST_ENTRY);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsBadCodePtr(FARPROC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsBadHugeReadPtr(LPCVOID,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsBadHugeWritePtr(LPVOID,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsBadReadPtr(LPCVOID,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsBadStringPtrA(LPCSTR,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsBadStringPtrW(LPCWSTR,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsBadWritePtr(LPVOID,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsDebuggerPresent(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsSystemResumeAutomatic(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsTextUnicode(LPCVOID,INT,LPINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsTokenRestricted(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsValidAcl(PACL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsValidSecurityDescriptor(PSECURITY_DESCRIPTOR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsValidSid(PSID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsWellKnownSid(PSID,WELL_KNOWN_SID_TYPE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsWow64Process(HANDLE,PBOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ImpersonateLoggedOnUser(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ImpersonateNamedPipeClient(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ImpersonateSelf(SECURITY_IMPERSONATION_LEVEL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsProcessInJob(HANDLE,HANDLE,PBOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsProcessorFeaturePresent(DWORD);
__attribute__((dllimport)) void __attribute__((__stdcall__)) LeaveCriticalSection(CRITICAL_SECTION *lpCrit);
__attribute__((dllimport)) HMODULE __attribute__((__stdcall__)) LoadLibraryA(LPCSTR);
__attribute__((dllimport)) HMODULE __attribute__((__stdcall__)) LoadLibraryW(LPCWSTR);
__attribute__((dllimport)) HMODULE __attribute__((__stdcall__)) LoadLibraryExA(LPCSTR,HANDLE,DWORD);
__attribute__((dllimport)) HMODULE __attribute__((__stdcall__)) LoadLibraryExW(LPCWSTR,HANDLE,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) LoadModule(LPCSTR,LPVOID);
__attribute__((dllimport)) HGLOBAL __attribute__((__stdcall__)) LoadResource(HMODULE,HRSRC);
__attribute__((dllimport)) HLOCAL __attribute__((__stdcall__)) LocalAlloc(UINT,SIZE_T) __attribute__((__alloc_size__(2)));
__attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) LocalCompact(UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) LocalFlags(HLOCAL);
__attribute__((dllimport)) HLOCAL __attribute__((__stdcall__)) LocalFree(HLOCAL);
__attribute__((dllimport)) HLOCAL __attribute__((__stdcall__)) LocalHandle(LPCVOID);
__attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) LocalLock(HLOCAL);
__attribute__((dllimport)) HLOCAL __attribute__((__stdcall__)) LocalReAlloc(HLOCAL,SIZE_T,UINT) __attribute__((__alloc_size__(3)));
__attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) LocalShrink(HGLOBAL,UINT);
__attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) LocalSize(HLOCAL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LocalUnlock(HLOCAL);
__attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) LockResource(HGLOBAL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LookupAccountNameA(LPCSTR,LPCSTR,PSID,LPDWORD,LPSTR,LPDWORD,PSID_NAME_USE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LookupAccountNameW(LPCWSTR,LPCWSTR,PSID,LPDWORD,LPWSTR,LPDWORD,PSID_NAME_USE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LookupAccountSidA(LPCSTR,PSID,LPSTR,LPDWORD,LPSTR,LPDWORD,PSID_NAME_USE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LookupAccountSidW(LPCWSTR,PSID,LPWSTR,LPDWORD,LPWSTR,LPDWORD,PSID_NAME_USE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LocalFileTimeToFileTime(const FILETIME*,LPFILETIME);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LockFile(HANDLE,DWORD,DWORD,DWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LockFileEx(HANDLE, DWORD, DWORD, DWORD, DWORD, LPOVERLAPPED);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LogonUserA(LPCSTR,LPCSTR,LPCSTR,DWORD,DWORD,PHANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LogonUserW(LPCWSTR,LPCWSTR,LPCWSTR,DWORD,DWORD,PHANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LookupPrivilegeDisplayNameA(LPCSTR,LPCSTR,LPSTR,LPDWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LookupPrivilegeDisplayNameW(LPCWSTR,LPCWSTR,LPWSTR,LPDWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LookupPrivilegeNameA(LPCSTR,PLUID,LPSTR,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LookupPrivilegeNameW(LPCWSTR,PLUID,LPWSTR,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LookupPrivilegeValueA(LPCSTR,LPCSTR,PLUID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LookupPrivilegeValueW(LPCWSTR,LPCWSTR,PLUID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) MakeAbsoluteSD(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,LPDWORD,PACL,LPDWORD,PACL,LPDWORD,PSID,LPDWORD,PSID,LPDWORD);
__attribute__((dllimport)) void __attribute__((__stdcall__)) MakeCriticalSectionGlobal(CRITICAL_SECTION *lpCrit);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) MakeSelfRelativeSD(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,LPDWORD);
__attribute__((dllimport)) void __attribute__((__stdcall__)) MapGenericMask(PDWORD,PGENERIC_MAPPING);
__attribute__((dllimport)) HMODULE __attribute__((__stdcall__)) MapHModuleSL(WORD);
__attribute__((dllimport)) WORD __attribute__((__stdcall__)) MapHModuleLS(HMODULE);
__attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) MapViewOfFile(HANDLE,DWORD,DWORD,DWORD,SIZE_T);
__attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) MapViewOfFileEx(HANDLE,DWORD,DWORD,DWORD,SIZE_T,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) MoveFileA(LPCSTR,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) MoveFileW(LPCWSTR,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) MoveFileExA(LPCSTR,LPCSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) MoveFileExW(LPCWSTR,LPCWSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) MoveFileWithProgressA(LPCSTR,LPCSTR,LPPROGRESS_ROUTINE,LPVOID,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) MoveFileWithProgressW(LPCWSTR,LPCWSTR,LPPROGRESS_ROUTINE,LPVOID,DWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) MulDiv(INT,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) NeedCurrentDirectoryForExePathA(LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) NeedCurrentDirectoryForExePathW(LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) NotifyChangeEventLog(HANDLE,HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ObjectCloseAuditAlarmA(LPCSTR,LPVOID,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ObjectCloseAuditAlarmW(LPCWSTR,LPVOID,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ObjectDeleteAuditAlarmA(LPCSTR,LPVOID,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ObjectDeleteAuditAlarmW(LPCWSTR,LPVOID,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ObjectOpenAuditAlarmA(LPCSTR,LPVOID,LPSTR,LPSTR,PSECURITY_DESCRIPTOR,HANDLE,DWORD,DWORD,PPRIVILEGE_SET,BOOL,BOOL,LPBOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ObjectOpenAuditAlarmW(LPCWSTR,LPVOID,LPWSTR,LPWSTR,PSECURITY_DESCRIPTOR,HANDLE,DWORD,DWORD,PPRIVILEGE_SET,BOOL,BOOL,LPBOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ObjectPrivilegeAuditAlarmA(LPCSTR,LPVOID,HANDLE,DWORD,PPRIVILEGE_SET,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ObjectPrivilegeAuditAlarmW(LPCWSTR,LPVOID,HANDLE,DWORD,PPRIVILEGE_SET,BOOL);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenBackupEventLogA(LPCSTR,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenBackupEventLogW(LPCWSTR,LPCWSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenEventA(DWORD,BOOL,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenEventW(DWORD,BOOL,LPCWSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenEventLogA(LPCSTR,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenEventLogW(LPCWSTR,LPCWSTR);
__attribute__((dllimport)) HFILE __attribute__((__stdcall__)) OpenFile(LPCSTR,OFSTRUCT*,UINT);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenFileMappingA(DWORD,BOOL,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenFileMappingW(DWORD,BOOL,LPCWSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenJobObjectA(DWORD,BOOL,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenJobObjectW(DWORD,BOOL,LPCWSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenMutexA(DWORD,BOOL,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenMutexW(DWORD,BOOL,LPCWSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenProcess(DWORD,BOOL,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) OpenProcessToken(HANDLE,DWORD,PHANDLE);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenSemaphoreA(DWORD,BOOL,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenSemaphoreW(DWORD,BOOL,LPCWSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenThread(DWORD,BOOL,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) OpenThreadToken(HANDLE,DWORD,BOOL,PHANDLE);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenWaitableTimerA(DWORD,BOOL,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenWaitableTimerW(DWORD,BOOL,LPCWSTR);
__attribute__((dllimport)) void __attribute__((__stdcall__)) OutputDebugStringA(LPCSTR);
__attribute__((dllimport)) void __attribute__((__stdcall__)) OutputDebugStringW(LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PeekNamedPipe(HANDLE,PVOID,DWORD,PDWORD,PDWORD,PDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PostQueuedCompletionStatus(HANDLE,DWORD,ULONG_PTR,LPOVERLAPPED);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) PrepareTape(HANDLE,DWORD,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ProcessIdToSessionId(DWORD,DWORD*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PrivilegeCheck(HANDLE,PPRIVILEGE_SET,LPBOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PrivilegedServiceAuditAlarmA(LPCSTR,LPCSTR,HANDLE,PPRIVILEGE_SET,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PrivilegedServiceAuditAlarmW(LPCWSTR,LPCWSTR,HANDLE,PPRIVILEGE_SET,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PulseEvent(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PurgeComm(HANDLE,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) QueryActCtxW(DWORD,HANDLE,PVOID,ULONG,PVOID,SIZE_T,SIZE_T *);
__attribute__((dllimport)) USHORT __attribute__((__stdcall__)) QueryDepthSList(PSLIST_HEADER);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) QueryDosDeviceA(LPCSTR,LPSTR,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) QueryDosDeviceW(LPCWSTR,LPWSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) QueryFullProcessImageNameA(HANDLE,DWORD,LPSTR,PDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) QueryFullProcessImageNameW(HANDLE,DWORD,LPWSTR,PDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) QueryInformationJobObject(HANDLE,JOBOBJECTINFOCLASS,LPVOID,DWORD,DWORD*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) QueryPerformanceCounter(LARGE_INTEGER*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) QueryPerformanceFrequency(LARGE_INTEGER*);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) QueueUserAPC(PAPCFUNC,HANDLE,ULONG_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) QueueUserWorkItem(LPTHREAD_START_ROUTINE,PVOID,ULONG);
__attribute__((dllimport)) void __attribute__((__stdcall__)) RaiseException(DWORD,DWORD,DWORD,const ULONG_PTR *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReadEventLogA(HANDLE,DWORD,DWORD,LPVOID,DWORD,DWORD *,DWORD *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReadEventLogW(HANDLE,DWORD,DWORD,LPVOID,DWORD,DWORD *,DWORD *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReadDirectoryChangesW(HANDLE,LPVOID,DWORD,BOOL,DWORD,LPDWORD,LPOVERLAPPED,LPOVERLAPPED_COMPLETION_ROUTINE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReadFile(HANDLE,LPVOID,DWORD,LPDWORD,LPOVERLAPPED);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReadFileEx(HANDLE,LPVOID,DWORD,LPOVERLAPPED,LPOVERLAPPED_COMPLETION_ROUTINE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReadFileScatter(HANDLE,FILE_SEGMENT_ELEMENT*,DWORD,LPDWORD,LPOVERLAPPED);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReadProcessMemory(HANDLE,LPCVOID,LPVOID,SIZE_T,SIZE_T*);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) RegisterEventSourceA(LPCSTR,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) RegisterEventSourceW(LPCWSTR,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RegisterWaitForSingleObject(PHANDLE,HANDLE,WAITORTIMERCALLBACK,PVOID,ULONG,ULONG);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) RegisterWaitForSingleObjectEx(HANDLE,WAITORTIMERCALLBACK,PVOID,ULONG,ULONG);
__attribute__((dllimport)) void __attribute__((__stdcall__)) ReleaseActCtx(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReleaseMutex(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReleaseSemaphore(HANDLE,LONG,LPLONG);
__attribute__((dllimport)) ULONG __attribute__((__stdcall__)) RemoveVectoredExceptionHandler(PVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReplaceFileA(LPCSTR,LPCSTR,LPCSTR,DWORD,LPVOID,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReplaceFileW(LPCWSTR,LPCWSTR,LPCWSTR,DWORD,LPVOID,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RemoveDirectoryA(LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RemoveDirectoryW(LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReportEventA(HANDLE,WORD,WORD,DWORD,PSID,WORD,DWORD,LPCSTR *,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReportEventW(HANDLE,WORD,WORD,DWORD,PSID,WORD,DWORD,LPCWSTR *,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RequestWakeupLatency(LATENCY_TIME latency);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ResetEvent(HANDLE);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) ResetWriteWatch(LPVOID,SIZE_T);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) ResumeThread(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RevertToSelf(void);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SearchPathA(LPCSTR,LPCSTR,LPCSTR,DWORD,LPSTR,LPSTR*);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SearchPathW(LPCWSTR,LPCWSTR,LPCWSTR,DWORD,LPWSTR,LPWSTR*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetAclInformation(PACL,LPVOID,DWORD,ACL_INFORMATION_CLASS);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetCommConfig(HANDLE,LPCOMMCONFIG,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetCommBreak(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetCommMask(HANDLE,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetCommState(HANDLE,LPDCB);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetCommTimeouts(HANDLE,LPCOMMTIMEOUTS);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetComputerNameA(LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetComputerNameW(LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetComputerNameExA(COMPUTER_NAME_FORMAT,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetComputerNameExW(COMPUTER_NAME_FORMAT,LPCWSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetCriticalSectionSpinCount(LPCRITICAL_SECTION,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetCurrentDirectoryA(LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetCurrentDirectoryW(LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetDefaultCommConfigA(LPCSTR,LPCOMMCONFIG,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetDefaultCommConfigW(LPCWSTR,LPCOMMCONFIG,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetDllDirectoryA(LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetDllDirectoryW(LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetDynamicTimeZoneInformation(const DYNAMIC_TIME_ZONE_INFORMATION*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetEndOfFile(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetEnvironmentVariableA(LPCSTR,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetEnvironmentVariableW(LPCWSTR,LPCWSTR);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) SetErrorMode(UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetEvent(HANDLE);
__attribute__((dllimport)) void __attribute__((__stdcall__)) SetFileApisToANSI(void);
__attribute__((dllimport)) void __attribute__((__stdcall__)) SetFileApisToOEM(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetFileAttributesA(LPCSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetFileAttributesW(LPCWSTR,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetFilePointer(HANDLE,LONG,LPLONG,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetFilePointerEx(HANDLE,LARGE_INTEGER,LARGE_INTEGER*,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetFileSecurityA(LPCSTR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetFileSecurityW(LPCWSTR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetFileTime(HANDLE,const FILETIME*,const FILETIME*,const FILETIME*);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) SetHandleCount(UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetHandleInformation(HANDLE,DWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetInformationJobObject(HANDLE,JOBOBJECTINFOCLASS,LPVOID,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetKernelObjectSecurity(HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetLocalTime(const SYSTEMTIME*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetMailslotInfo(HANDLE,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetNamedPipeHandleState(HANDLE,LPDWORD,LPDWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetPriorityClass(HANDLE,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetPrivateObjectSecurity(SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR*,PGENERIC_MAPPING,HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetProcessAffinityMask(HANDLE,DWORD_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetProcessPriorityBoost(HANDLE,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetProcessShutdownParameters(DWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetProcessWorkingSetSize(HANDLE,SIZE_T,SIZE_T);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetSecurityDescriptorControl(PSECURITY_DESCRIPTOR,SECURITY_DESCRIPTOR_CONTROL,SECURITY_DESCRIPTOR_CONTROL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR,BOOL,PACL,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR,PSID,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR,PSID,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR,BOOL,PACL,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetStdHandle(DWORD,HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetSystemPowerState(BOOL,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetSystemTime(const SYSTEMTIME*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetSystemTimeAdjustment(DWORD,BOOL);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetTapeParameters(HANDLE,DWORD,LPVOID);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetTapePosition(HANDLE,DWORD,DWORD,DWORD,DWORD,BOOL);
__attribute__((dllimport)) DWORD_PTR __attribute__((__stdcall__)) SetThreadAffinityMask(HANDLE,DWORD_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetThreadContext(HANDLE,const CONTEXT *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetThreadErrorMode(DWORD,LPDWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetThreadExecutionState(EXECUTION_STATE);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetThreadIdealProcessor(HANDLE,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetThreadPriority(HANDLE,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetThreadPriorityBoost(HANDLE,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetThreadToken(PHANDLE,HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetTimeZoneInformation(const TIME_ZONE_INFORMATION *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetTokenInformation(HANDLE,TOKEN_INFORMATION_CLASS,LPVOID,DWORD);
__attribute__((dllimport)) LPTOP_LEVEL_EXCEPTION_FILTER __attribute__((__stdcall__)) SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetVolumeLabelA(LPCSTR,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetVolumeLabelW(LPCWSTR,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetVolumeMountPointA(LPCSTR,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetVolumeMountPointW(LPCSTR,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetWaitableTimer(HANDLE,const LARGE_INTEGER*,LONG,PTIMERAPCROUTINE,LPVOID,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetupComm(HANDLE,DWORD,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SignalObjectAndWait(HANDLE,HANDLE,DWORD,BOOL);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SizeofResource(HMODULE,HRSRC);
__attribute__((dllimport)) void __attribute__((__stdcall__)) Sleep(DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SleepEx(DWORD,BOOL);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SuspendThread(HANDLE);
__attribute__((dllimport)) void __attribute__((__stdcall__)) SwitchToFiber(LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SwitchToThread(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SystemTimeToFileTime(const SYSTEMTIME*,LPFILETIME);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SystemTimeToTzSpecificLocalTime(const TIME_ZONE_INFORMATION*,const SYSTEMTIME*,LPSYSTEMTIME);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TerminateJobObject(HANDLE,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TerminateProcess(HANDLE,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TerminateThread(HANDLE,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) TlsAlloc(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TlsFree(DWORD);
__attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) TlsGetValue(DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TlsSetValue(DWORD,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TransactNamedPipe(HANDLE,LPVOID,DWORD,LPVOID,DWORD,LPDWORD,LPOVERLAPPED);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TransmitCommChar(HANDLE,CHAR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TryEnterCriticalSection(CRITICAL_SECTION *lpCrit);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TzSpecificLocalTimeToSystemTime(const TIME_ZONE_INFORMATION*,const SYSTEMTIME*,LPSYSTEMTIME);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) UnhandledExceptionFilter(PEXCEPTION_POINTERS);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnlockFile(HANDLE,DWORD,DWORD,DWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnlockFileEx(HANDLE,DWORD,DWORD,DWORD,LPOVERLAPPED);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnmapViewOfFile(LPCVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnregisterWait(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnregisterWaitEx(HANDLE,HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UpdateResourceA(HANDLE,LPCSTR,LPCSTR,WORD,LPVOID,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UpdateResourceW(HANDLE,LPCWSTR,LPCWSTR,WORD,LPVOID,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) VerifyVersionInfoA(LPOSVERSIONINFOEXA,DWORD,DWORDLONG);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) VerifyVersionInfoW(LPOSVERSIONINFOEXW,DWORD,DWORDLONG);
__attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) VirtualAlloc(LPVOID,SIZE_T,DWORD,DWORD);
__attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) VirtualAllocEx(HANDLE,LPVOID,SIZE_T,DWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) VirtualFree(LPVOID,SIZE_T,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) VirtualFreeEx(HANDLE,LPVOID,SIZE_T,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) VirtualLock(LPVOID,SIZE_T);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) VirtualProtect(LPVOID,SIZE_T,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) VirtualProtectEx(HANDLE,LPVOID,SIZE_T,DWORD,LPDWORD);
__attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) VirtualQuery(LPCVOID,PMEMORY_BASIC_INFORMATION,SIZE_T);
__attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) VirtualQueryEx(HANDLE,LPCVOID,PMEMORY_BASIC_INFORMATION,SIZE_T);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) VirtualUnlock(LPVOID,SIZE_T);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) WTSGetActiveConsoleSessionId(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WaitCommEvent(HANDLE,LPDWORD,LPOVERLAPPED);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WaitForDebugEvent(LPDEBUG_EVENT,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) WaitForMultipleObjects(DWORD,const HANDLE*,BOOL,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) WaitForMultipleObjectsEx(DWORD,const HANDLE*,BOOL,DWORD,BOOL);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) WaitForSingleObject(HANDLE,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) WaitForSingleObjectEx(HANDLE,DWORD,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WaitNamedPipeA(LPCSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WaitNamedPipeW(LPCWSTR,DWORD);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) WinExec(LPCSTR,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) Wow64DisableWow64FsRedirection(PVOID*);
__attribute__((dllimport)) BOOLEAN __attribute__((__stdcall__)) Wow64EnableWow64FsRedirection(BOOLEAN);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) Wow64RevertWow64FsRedirection(PVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteFile(HANDLE,LPCVOID,DWORD,LPDWORD,LPOVERLAPPED);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteFileEx(HANDLE,LPCVOID,DWORD,LPOVERLAPPED,LPOVERLAPPED_COMPLETION_ROUTINE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteFileGather(HANDLE,FILE_SEGMENT_ELEMENT*,DWORD,LPDWORD,LPOVERLAPPED);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WritePrivateProfileSectionA(LPCSTR,LPCSTR,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WritePrivateProfileSectionW(LPCWSTR,LPCWSTR,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WritePrivateProfileStringA(LPCSTR,LPCSTR,LPCSTR,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WritePrivateProfileStringW(LPCWSTR,LPCWSTR,LPCWSTR,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WritePrivateProfileStructA(LPCSTR,LPCSTR,LPVOID,UINT,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WritePrivateProfileStructW(LPCWSTR,LPCWSTR,LPVOID,UINT,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteProcessMemory(HANDLE,LPVOID,LPCVOID,SIZE_T,SIZE_T*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteProfileSectionA(LPCSTR,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteProfileSectionW(LPCWSTR,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteProfileStringA(LPCSTR,LPCSTR,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteProfileStringW(LPCWSTR,LPCWSTR,LPCWSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) WriteTapemark(HANDLE,DWORD,DWORD,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ZombifyActCtx(HANDLE);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) lstrcmpA(LPCSTR,LPCSTR);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) lstrcmpW(LPCWSTR,LPCWSTR);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) lstrcmpiA(LPCSTR,LPCSTR);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) lstrcmpiW(LPCWSTR,LPCWSTR);
__attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) lstrcatA(LPSTR,LPCSTR);
__attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) lstrcatW(LPWSTR,LPCWSTR);
__attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) lstrcpyA(LPSTR,LPCSTR);
__attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) lstrcpyW(LPWSTR,LPCWSTR);
__attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) lstrcpynA(LPSTR,LPCSTR,INT);
__attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) lstrcpynW(LPWSTR,LPCWSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) lstrlenA(LPCSTR);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) lstrlenW(LPCWSTR);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) _hread(HFILE,LPVOID,LONG);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) _hwrite(HFILE,LPCSTR,LONG);
__attribute__((dllimport)) HFILE __attribute__((__stdcall__)) _lcreat(LPCSTR,INT);
__attribute__((dllimport)) HFILE __attribute__((__stdcall__)) _lclose(HFILE);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) _llseek(HFILE,LONG,INT);
__attribute__((dllimport)) HFILE __attribute__((__stdcall__)) _lopen(LPCSTR,INT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) _lread(HFILE,LPVOID,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) _lwrite(HFILE,LPCSTR,UINT);
extern char * __attribute__((__cdecl__)) wine_get_unix_file_name( LPCWSTR dos );
extern WCHAR * __attribute__((__cdecl__)) wine_get_dos_file_name( LPCSTR str );
static inline __attribute__((always_inline)) LONG __attribute__((__stdcall__)) InterlockedCompareExchange( LONG volatile *dest, LONG xchg, LONG compare )
{
    LONG ret;
    __asm__ __volatile__( "lock; cmpxchgl %2,(%1)"
                          : "=a" (ret) : "r" (dest), "r" (xchg), "0" (compare) : "memory" );
    return ret;
}
static inline __attribute__((always_inline)) LONG __attribute__((__stdcall__)) InterlockedExchange( LONG volatile *dest, LONG val )
{
    LONG ret;
    __asm__ __volatile__( "lock; xchgl %0,(%1)"
                          : "=r" (ret) :"r" (dest), "0" (val) : "memory" );
    return ret;
}
static inline __attribute__((always_inline)) LONG __attribute__((__stdcall__)) InterlockedExchangeAdd( LONG volatile *dest, LONG incr )
{
    LONG ret;
    __asm__ __volatile__( "lock; xaddl %0,(%1)"
                          : "=r" (ret) : "r" (dest), "0" (incr) : "memory" );
    return ret;
}
static inline __attribute__((always_inline)) LONG __attribute__((__stdcall__)) InterlockedIncrement( LONG volatile *dest )
{
    return InterlockedExchangeAdd( dest, 1 ) + 1;
}
static inline __attribute__((always_inline)) LONG __attribute__((__stdcall__)) InterlockedDecrement( LONG volatile *dest )
{
    return InterlockedExchangeAdd( dest, -1 ) - 1;
}
static inline __attribute__((always_inline)) PVOID __attribute__((__stdcall__)) InterlockedCompareExchangePointer( PVOID volatile *dest, PVOID xchg, PVOID compare )
{
    return (PVOID)InterlockedCompareExchange( (LONG volatile*)dest, (LONG)xchg, (LONG)compare );
}
static inline __attribute__((always_inline)) PVOID __attribute__((__stdcall__)) InterlockedExchangePointer( PVOID volatile *dest, PVOID val )
{
    return (PVOID)InterlockedExchange( (LONG volatile*)dest, (LONG)val );
}
__attribute__((dllimport)) LONGLONG __attribute__((__stdcall__)) InterlockedCompareExchange64(LONGLONG volatile*,LONGLONG,LONGLONG);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetCurrentProcessId(void);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetCurrentThreadId(void);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetLastError(void);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) GetProcessHeap(void);
__attribute__((dllimport)) void __attribute__((__stdcall__)) SetLastError(DWORD);
int __attribute__((__stdcall__)) WinMain(HINSTANCE,HINSTANCE,LPSTR,int);
typedef struct _ABCFLOAT {
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
} ABCFLOAT, *PABCFLOAT, *LPABCFLOAT;
typedef struct
{
    WORD wFirst;
    WORD wSecond;
    INT iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;
typedef struct tagPIXELFORMATDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR, *LPPIXELFORMATDESCRIPTOR;
typedef struct tagCOLORADJUSTMENT
{
 WORD caSize;
 WORD caFlags;
 WORD caIlluminantIndex;
 WORD caRedGamma;
 WORD caGreenGamma;
 WORD caBlueGamma;
 WORD caReferenceBlack;
 WORD caReferenceWhite;
 SHORT caContrast;
 SHORT caBrightness;
 SHORT caColorfulness;
 SHORT caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT, *LPCOLORADJUSTMENT;
typedef LONG FXPT16DOT16, *LPFXPT16DOT16;
typedef LONG FXPT2DOT30, *LPFXPT2DOT30;
typedef LONG LCSCSTYPE;
typedef LONG LCSGAMUTMATCH;
typedef struct tagCIEXYZ
{
  FXPT2DOT30 ciexyzX;
  FXPT2DOT30 ciexyzY;
  FXPT2DOT30 ciexyzZ;
} CIEXYZ, *LPCIEXYZ;
typedef struct tagCIEXYZTRIPLE
{
  CIEXYZ ciexyzRed;
  CIEXYZ ciexyzGreen;
  CIEXYZ ciexyzBlue;
} CIEXYZTRIPLE, *LPCIEXYZTRIPLE;
typedef struct tagLOGCOLORSPACEA
{
  DWORD lcsSignature;
  DWORD lcsVersion;
  DWORD lcsSize;
  LCSCSTYPE lcsCSType;
  LCSGAMUTMATCH lcsIntent;
  CIEXYZTRIPLE lcsEndpoints;
  DWORD lcsGammaRed;
  DWORD lcsGammaGreen;
  DWORD lcsGammaBlue;
  CHAR lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
 typedef struct tagLOGCOLORSPACEW
{
  DWORD lcsSignature;
  DWORD lcsVersion;
  DWORD lcsSize;
  LCSCSTYPE lcsCSType;
  LCSGAMUTMATCH lcsIntent;
  CIEXYZTRIPLE lcsEndpoints;
  DWORD lcsGammaRed;
  DWORD lcsGammaGreen;
  DWORD lcsGammaBlue;
  WCHAR lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;
typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef INT (__attribute__((__stdcall__)) *ICMENUMPROCA)(LPSTR lpszFilename,LPARAM lParam);
typedef INT (__attribute__((__stdcall__)) *ICMENUMPROCW)(LPWSTR lpszFilename,LPARAM lParam);
typedef ICMENUMPROCA ICMENUMPROC;
typedef struct
{
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
} PELARRAY, *PPELARRAY, *LPPELARRAY;
typedef struct
{
    INT bmType;
    INT bmWidth;
    INT bmHeight;
    INT bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
} BITMAP, *PBITMAP, *LPBITMAP;
typedef struct
{
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
} LOGBRUSH, *PLOGBRUSH, *LPLOGBRUSH;
typedef struct
{
    UINT lbStyle;
    COLORREF lbColor;
    ULONG lbHatch;
} LOGBRUSH32, *PLOGBRUSH32, *LPLOGBRUSH32;
typedef LOGBRUSH PATTERN, *PPATTERN, *LPPATTERN;
typedef struct tagLOGFONTA
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR lfFaceName[32];
} LOGFONTA, *PLOGFONTA, *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR lfFaceName[32];
} LOGFONTW, *PLOGFONTW, *LPLOGFONTW;
typedef LOGFONTA LOGFONT;
typedef PLOGFONTA PLOGFONT;
typedef LPLOGFONTA LPLOGFONT;
typedef struct
{
  LOGFONTA elfLogFont;
  BYTE elfFullName[64];
  BYTE elfStyle[32];
} ENUMLOGFONTA, *LPENUMLOGFONTA;
typedef struct
{
  LOGFONTW elfLogFont;
  WCHAR elfFullName[64];
  WCHAR elfStyle[32];
} ENUMLOGFONTW, *LPENUMLOGFONTW;
typedef ENUMLOGFONTA ENUMLOGFONT;
typedef LPENUMLOGFONTA LPENUMLOGFONT;
typedef struct
{
  LOGFONTA elfLogFont;
  BYTE elfFullName[64];
  BYTE elfStyle[32];
  BYTE elfScript[32];
} ENUMLOGFONTEXA,*LPENUMLOGFONTEXA;
typedef struct
{
  LOGFONTW elfLogFont;
  WCHAR elfFullName[64];
  WCHAR elfStyle[32];
  WCHAR elfScript[32];
} ENUMLOGFONTEXW,*LPENUMLOGFONTEXW;
typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
typedef struct
{
  DWORD dvReserved;
  DWORD dvNumAxes;
  LONG dvValues[16];
} DESIGNVECTOR, *PDESIGNVECTOR;
typedef struct
{
  ENUMLOGFONTEXA elfEnumLogfontEx;
  DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA;
typedef struct
{
  ENUMLOGFONTEXW elfEnumLogfontEx;
  DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW;
typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
typedef struct
{
  DWORD fsUsb[4];
  DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;
typedef struct
{
  UINT ciCharset;
  UINT ciACP;
  FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO, *LPCHARSETINFO;
typedef struct
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;
typedef struct tagXFORM
{
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
} XFORM, *PXFORM, *LPXFORM;
typedef struct tagTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICA, *LPTEXTMETRICA, *PTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICW, *LPTEXTMETRICW, *PTEXTMETRICW;
typedef TEXTMETRICA TEXTMETRIC;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef LPTEXTMETRICA LPTEXTMETRIC;
typedef struct tagPANOSE
{
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
} PANOSE, *LPPANOSE;
typedef struct
{
  LOGFONTA elfLogFont;
  BYTE elfFullName[64];
  BYTE elfStyle[32];
  DWORD elfVersion;
  DWORD elfStyleSize;
  DWORD elfMatch;
  DWORD elfReserved;
  BYTE elfVendorId[4];
  DWORD elfCulture;
  PANOSE elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA, *LPEXTLOGFONTA;
typedef struct
{
  LOGFONTW elfLogFont;
  WCHAR elfFullName[64];
  WCHAR elfStyle[32];
  DWORD elfVersion;
  DWORD elfStyleSize;
  DWORD elfMatch;
  DWORD elfReserved;
  BYTE elfVendorId[4];
  DWORD elfCulture;
  PANOSE elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW, *LPEXTLOGFONTW;
typedef EXTLOGFONTA EXTLOGFONT;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef LPEXTLOGFONTA LPEXTLOGFONT;
typedef struct _OUTLINETEXTMETRICA
{
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    INT otmsCharSlopeRise;
    INT otmsCharSlopeRun;
    INT otmItalicAngle;
    UINT otmEMSquare;
    INT otmAscent;
    INT otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    INT otmMacAscent;
    INT otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    INT otmsStrikeoutPosition;
    INT otmsUnderscoreSize;
    INT otmsUnderscorePosition;
    LPSTR otmpFamilyName;
    LPSTR otmpFaceName;
    LPSTR otmpStyleName;
    LPSTR otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA, *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW
{
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    INT otmsCharSlopeRise;
    INT otmsCharSlopeRun;
    INT otmItalicAngle;
    UINT otmEMSquare;
    INT otmAscent;
    INT otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    INT otmMacAscent;
    INT otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    INT otmsStrikeoutPosition;
    INT otmsUnderscoreSize;
    INT otmsUnderscorePosition;
    LPSTR otmpFamilyName;
    LPSTR otmpFaceName;
    LPSTR otmpStyleName;
    LPSTR otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW, *LPOUTLINETEXTMETRICW;
typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
typedef struct
{
    INT x;
    INT y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    INT *pdx;
} POLYTEXTA, *PPOLYTEXTA, *LPPOLYTEXTA;
typedef struct
{
    INT x;
    INT y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    INT *pdx;
} POLYTEXTW, *PPOLYTEXTW, *LPPOLYTEXTW;
typedef POLYTEXTA POLYTEXT;
typedef PPOLYTEXTA PPOLYTEXT;
typedef LPPOLYTEXTA LPPOLYTEXT;
typedef struct
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA, *LPNEWTEXTMETRICA;
typedef struct
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW, *LPNEWTEXTMETRICW;
typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
typedef struct
{
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
} NEWTEXTMETRICEXA;
typedef struct
{
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
} NEWTEXTMETRICEXW;
typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
typedef int (__attribute__((__stdcall__)) *OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__attribute__((__stdcall__)) *OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);
typedef OLDFONTENUMPROCA OLDFONTENUMPROC;
typedef OLDFONTENUMPROCA FONTENUMPROCA;
typedef OLDFONTENUMPROCW FONTENUMPROCW;
typedef FONTENUMPROCA FONTENUMPROC;
typedef INT (__attribute__((__stdcall__)) *GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__attribute__((__stdcall__)) *LINEDDAPROC)(INT, INT, LPARAM);
typedef struct
{
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    SHORT gmCellIncX;
    SHORT gmCellIncY;
} GLYPHMETRICS, *LPGLYPHMETRICS;
typedef struct
{
    WORD fract;
    SHORT value;
} FIXED;
typedef struct tagPOINTFX
{
 FIXED x;
 FIXED y;
} POINTFX, *LPPOINTFX;
typedef struct tagTTPOLYCURVE
{
 WORD wType;
 WORD cpfx;
 POINTFX apfx[1];
} TTPOLYCURVE, *LPTTPOLYCURVE;
typedef struct tagTTPOLYGONHEADER
{
 DWORD cb;
 DWORD dwType;
 POINTFX pfxStart;
} TTPOLYGONHEADER, *LPTTPOLYGONHEADER;
typedef struct
{
     FIXED eM11;
     FIXED eM12;
     FIXED eM21;
     FIXED eM22;
} MAT2, *LPMAT2;
typedef struct
{
    INT abcA;
    UINT abcB;
    INT abcC;
} ABC, *PABC, *LPABC;
typedef struct tagGCP_RESULTSA{
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT *lpOrder;
    INT *lpDx;
    INT *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    UINT nMaxFit;
} GCP_RESULTSA, *LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
{
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT *lpOrder;
    INT *lpDx;
    INT *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    UINT nMaxFit;
} GCP_RESULTSW, *LPGCP_RESULTSW;
typedef GCP_RESULTSA GCP_RESULTS;
typedef LPGCP_RESULTSA LPGCP_RESULTS;
typedef struct
{
    SHORT nSize;
    SHORT wFlags;
    SHORT nLanguageID;
} RASTERIZER_STATUS, *LPRASTERIZER_STATUS;
typedef struct {
  FLOAT x;
  FLOAT y;
} POINTFLOAT, *PPOINTFLOAT;
typedef struct {
  FLOAT gmfBlackBoxX;
  FLOAT gmfBlackBoxY;
  POINTFLOAT gmfptGlyphOrigin;
  FLOAT gmfCellIncX;
  FLOAT gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT, *LPGLYPHMETRICSFLOAT;
typedef struct {
  WORD nSize;
  WORD nVersion;
  DWORD dwFlags;
  BYTE iPixelType;
  BYTE cColorBits;
  BYTE cRedBits;
  BYTE cRedShift;
  BYTE cGreenBits;
  BYTE cGreenShift;
  BYTE cBlueBits;
  BYTE cBlueShift;
  BYTE cAlphaBits;
  BYTE cAlphaShift;
  BYTE cAccumBits;
  BYTE cAccumRedBits;
  BYTE cAccumGreenBits;
  BYTE cAccumBlueBits;
  BYTE cAccumAlphaBits;
  BYTE cDepthBits;
  BYTE cStencilBits;
  BYTE cAuxBuffers;
  BYTE iLayerPlane;
  BYTE bReserved;
  COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR, *LPLAYERPLANEDESCRIPTOR;
typedef struct tagPALETTEENTRY
{
 BYTE peRed, peGreen, peBlue, peFlags;
} PALETTEENTRY, *PPALETTEENTRY, *LPPALETTEENTRY;
typedef struct tagLOGPALETTE
{
    WORD palVersion;
    WORD palNumEntries;
    PALETTEENTRY palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE, *LPLOGPALETTE, *NPLOGPALETTE;
typedef struct
{
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
} LOGPEN, *LPLOGPEN;
typedef struct tagEXTLOGPEN
{
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN, *NPEXTLOGPEN, *LPEXTLOGPEN;
typedef struct tagRGBQUAD {
  BYTE rgbBlue;
  BYTE rgbGreen;
  BYTE rgbRed;
  BYTE rgbReserved;
} RGBQUAD, *LPRGBQUAD;
typedef struct tagRGBTRIPLE {
  BYTE rgbtBlue;
  BYTE rgbtGreen;
  BYTE rgbtRed;
} RGBTRIPLE;

typedef struct
{
    WORD bfType;
    DWORD bfSize;
    WORD bfReserved1;
    WORD bfReserved2;
    DWORD bfOffBits;
} BITMAPFILEHEADER, *PBITMAPFILEHEADER, *LPBITMAPFILEHEADER;

typedef struct
{
    DWORD biSize;
    LONG biWidth;
    LONG biHeight;
    WORD biPlanes;
    WORD biBitCount;
    DWORD biCompression;
    DWORD biSizeImage;
    LONG biXPelsPerMeter;
    LONG biYPelsPerMeter;
    DWORD biClrUsed;
    DWORD biClrImportant;
} BITMAPINFOHEADER, *PBITMAPINFOHEADER, *LPBITMAPINFOHEADER;
typedef struct
{
    DWORD bV4Size;
    LONG bV4Width;
    LONG bV4Height;
    WORD bV4Planes;
    WORD bV4BitCount;
    DWORD bV4V4Compression;
    DWORD bV4SizeImage;
    LONG bV4XPelsPerMeter;
    LONG bV4YPelsPerMeter;
    DWORD bV4ClrUsed;
    DWORD bV4ClrImportant;
    DWORD bV4RedMask;
    DWORD bV4GreenMask;
    DWORD bV4BlueMask;
    DWORD bV4AlphaMask;
    DWORD bV4CSType;
    CIEXYZTRIPLE bV4Endpoints;
    DWORD bV4GammaRed;
    DWORD bV4GammaGreen;
    DWORD bV4GammaBlue;
} BITMAPV4HEADER, *PBITMAPV4HEADER;
typedef struct {
    DWORD bV5Size;
    LONG bV5Width;
    LONG bV5Height;
    WORD bV5Planes;
    WORD bV5BitCount;
    DWORD bV5Compression;
    DWORD bV5SizeImage;
    LONG bV5XPelsPerMeter;
    LONG bV5YPelsPerMeter;
    DWORD bV5ClrUsed;
    DWORD bV5ClrImportant;
    DWORD bV5RedMask;
    DWORD bV5GreenMask;
    DWORD bV5BlueMask;
    DWORD bV5AlphaMask;
    DWORD bV5CSType;
    CIEXYZTRIPLE bV5Endpoints;
    DWORD bV5GammaRed;
    DWORD bV5GammaGreen;
    DWORD bV5GammaBlue;
    DWORD bV5Intent;
    DWORD bV5ProfileData;
    DWORD bV5ProfileSize;
    DWORD bV5Reserved;
} BITMAPV5HEADER, *LPBITMAPV5HEADER, *PBITMAPV5HEADER;
typedef struct tagBITMAPINFO
{
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
} BITMAPINFO, *PBITMAPINFO, *LPBITMAPINFO;
typedef struct
{
    DWORD bcSize;
    WORD bcWidth;
    WORD bcHeight;
    WORD bcPlanes;
    WORD bcBitCount;
} BITMAPCOREHEADER, *PBITMAPCOREHEADER, *LPBITMAPCOREHEADER;
typedef struct
{
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE bmciColors[1];
} BITMAPCOREINFO, *PBITMAPCOREINFO, *LPBITMAPCOREINFO;
typedef struct
{
 BITMAP dsBm;
 BITMAPINFOHEADER dsBmih;
 DWORD dsBitfields[3];
 HANDLE dshSection;
 DWORD dsOffset;
} DIBSECTION, *PDIBSECTION, *LPDIBSECTION;

typedef struct
{
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
} METAHEADER, *PMETAHEADER, *LPMETAHEADER;

typedef struct
{
    DWORD rdSize;
    WORD rdFunction;
    WORD rdParm[1];
} METARECORD, *PMETARECORD, *LPMETARECORD;
typedef struct
{
    HGDIOBJ objectHandle[1];
} HANDLETABLE, *PHANDLETABLE, *LPHANDLETABLE;
typedef struct
{
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
} METAFILEPICT, *LPMETAFILEPICT;
typedef INT (__attribute__((__stdcall__)) *MFENUMPROC)(HDC,HANDLETABLE*,METARECORD*,
                                       INT,LPARAM);
typedef struct {
    DWORD iType;
    DWORD nSize;
    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD nHandles;
    WORD sReserved;
    DWORD nDescription;
    DWORD offDescription;
    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;
    DWORD cbPixelFormat;
    DWORD offPixelFormat;
    DWORD bOpenGL;
    SIZEL szlMicrometers;
} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;
typedef struct {
    DWORD iType;
    DWORD nSize;
    DWORD dParm[1];
} ENHMETARECORD, *LPENHMETARECORD;
typedef struct {
    DWORD iType;
    DWORD nSize;
} EMR, *PEMR;
typedef struct {
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString;
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx;
} EMRTEXT, *PEMRTEXT;
typedef struct {
    EMR emr;
} EMRABORTPATH, *PEMRABORTPATH,
  EMRBEGINPATH, *PEMRBEGINPATH,
  EMRENDPATH, *PEMRENDPATH,
  EMRCLOSEFIGURE, *PEMRCLOSEFIGURE,
  EMRFLATTENPATH, *PEMRFLATTENPATH,
  EMRWIDENPATH, *PEMRWIDENPATH,
  EMRSETMETARGN, *PEMRSETMETARGN,
  EMRSAVEDC, *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;
typedef struct {
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;
typedef struct {
    EMR emr;
    RECTL rclBox;
    POINTL ptlStart;
    POINTL ptlEnd;
} EMRARC, *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE, *PEMRPIE;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
} EMRBITBLT, *PEMRBITBLT;
typedef struct {
    EMR emr;
    DWORD ihBrush;
    LOGBRUSH32 lb;
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;
typedef struct {
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEA lcs;
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;
typedef struct {
  EMR emr;
  DWORD ihCS;
  LOGCOLORSPACEW lcs;
  DWORD dwFlags;
  DWORD cbData;
  BYTE Data[1];
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;
typedef struct {
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;
typedef struct {
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;
typedef struct {
    EMR emr;
    DWORD ihPal;
    LOGPALETTE lgpl;
} EMRCREATEPALETTE, *PEMRCREATEPALETTE;
typedef struct {
    EMR emr;
    DWORD ihPen;
    LOGPEN lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;
typedef struct {
    EMR emr;
    DWORD ihCS;
} EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE,
  EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRSETCOLORSPACE, *PEMRSETCOLORSPACE;
typedef struct {
    EMR emr;
    DWORD ihObject;
} EMRDELETEOBJECT, *PEMRDELETEOBJECT,
  EMRSELECTOBJECT, *PEMRSELECTOBJECT;
typedef struct {
    EMR emr;
    RECTL rclBox;
} EMRELLIPSE, *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;
typedef struct {
    EMR emr;
    DWORD nPalEntries;
    DWORD offPalEntries;
    DWORD nSizeLast;
} EMREOF, *PEMREOF;
typedef struct {
    EMR emr;
    RECTL rclClip;
} EMREXCLUDECLIPRECT, *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;
typedef struct {
    EMR emr;
    DWORD ihFont;
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;
typedef struct {
    EMR emr;
    DWORD ihPen;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
    EXTLOGPEN elp;
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;
typedef struct {
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;
typedef struct {
    EMR emr;
    DWORD cbRgnData;
    DWORD iMode;
    BYTE RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    EMRTEXT emrtext;
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;
typedef struct {
    EMR emr;
    RECTL rclBounds;
} EMRFILLPATH, *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH, *PEMRSTROKEPATH;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    BYTE RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;
typedef struct {
    DWORD dSignature;
    DWORD nVersion;
    DWORD cbData;
    DWORD offData;
} EMRFORMAT, *PEMRFORMAT;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    SIZEL szlStroke;
    BYTE RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;
typedef struct {
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    BYTE RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN, *PEMRPAINTRGN;
typedef struct {
    EMR emr;
    POINTL ptl;
} EMRLINETO, *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
} EMRMASKBLT, *PEMRMASKBLT;
typedef struct {
    EMR emr;
    XFORM xform;
    DWORD iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;
typedef struct {
    EMR emr;
    POINTL ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    POINTL aptlDest[3];
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
} EMRPLGBLT, *PEMRPLGBLT;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
} EMRPOLYLINE, *PEMRPOLYLINE,
  EMRPOLYBEZIER, *PEMRPOLYBEZIER,
  EMRPOLYGON, *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO, *PEMRPOLYLINETO;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
} EMRPOLYLINE16, *PEMRPOLYLINE16,
  EMRPOLYBEZIER16, *PEMRPOLYBEZIER16,
  EMRPOLYGON16, *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16, *PEMRPOLYLINETO16;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
    BYTE abTypes[1];
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cpts;
    DWORD aPolyCounts[1];
    POINTS apts[1];
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16, *PEMRPOLYPOLYGON16;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
    BYTE abTypes[1];
} EMRPOLYDRAW, *PEMRPOLYDRAW;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cptl;
    DWORD aPolyCounts[1];
    POINTL aptl[1];
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON, *PEMRPOLYPOLYGON;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    LONG cStrings;
    EMRTEXT aemrtext[1];
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;
typedef struct {
    EMR emr;
    DWORD ihPal;
    DWORD cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;
typedef struct {
    EMR emr;
    LONG iRelative;
} EMRRESTOREDC, *PEMRRESTOREDC;
typedef struct {
    EMR emr;
    RECTL rclBox;
    SIZEL szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;
typedef struct {
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX, *PEMRSCALEWINDOWEXTEX;
typedef struct {
    EMR emr;
    DWORD iMode;
} EMRSELECTCLIPPATH, *PEMRSELECTCLIPPATH,
  EMRSETBKMODE, *PEMRSETBKMODE,
  EMRSETMAPMODE, *PEMRSETMAPMODE,
  EMRSETPOLYFILLMODE, *PEMRSETPOLYFILLMODE,
  EMRSETROP2, *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETTEXTALIGN, *PEMRSETTEXTALIGN,
  EMRSETICMMODE, *PEMRSETICMMODE,
  EMRSETLAYOUT, *PEMRSETLAYOUT;
typedef struct {
    EMR emr;
    DWORD ihPal;
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;
typedef struct {
    EMR emr;
    DWORD iArcDirection;
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;
typedef struct {
    EMR emr;
    COLORREF crColor;
} EMRSETBKCOLOR, *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;
typedef struct {
    EMR emr;
    POINTL ptlOrigin;
} EMRSETBRUSHORGEX, *PEMRSETBRUSHORGEX,
  EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX, *PEMRSETWINDOWORGEX;
typedef struct {
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD iStartScan;
    DWORD cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;
typedef struct {
    EMR emr;
    DWORD dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;
typedef struct {
    EMR emr;
    FLOAT eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;
typedef struct {
    EMR emr;
    DWORD ihPal;
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;
typedef struct {
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;
typedef struct {
    EMR emr;
    SIZEL szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX, *PEMRSETWINDOWEXTEX;
typedef struct {
    EMR emr;
    XFORM xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;
typedef struct {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;
typedef struct {
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;
typedef struct tagEMRGLSRECORD {
  EMR emr;
  DWORD cbData;
  BYTE Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;
typedef struct {
  EMR emr;
  RECTL rclBounds;
  DWORD cbData;
  BYTE Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;
typedef INT (__attribute__((__stdcall__)) *ENHMFENUMPROC)(HDC, HANDLETABLE *,
                                      const ENHMETARECORD *, INT, LPARAM);
typedef struct
{
    BYTE dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      struct {
 short dmOrientation;
 short dmPaperSize;
 short dmPaperLength;
 short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      } ;
      struct {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      } ;
    } ;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union {
      DWORD dmDisplayFlags;
      DWORD dmNup;
    } ;
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
} DEVMODEA, *PDEVMODEA, *LPDEVMODEA;
typedef struct
{
    WCHAR dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      struct {
 short dmOrientation;
 short dmPaperSize;
 short dmPaperLength;
 short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      } ;
      struct {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      } ;
    } ;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union {
      DWORD dmDisplayFlags;
      DWORD dmNup;
    } ;
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
} DEVMODEW, *PDEVMODEW, *LPDEVMODEW;
typedef DEVMODEA DEVMODE;
typedef PDEVMODEA PDEVMODE;
typedef LPDEVMODEA LPDEVMODE;
typedef struct
{
    INT cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;
    LPCSTR lpszDatatype;
    DWORD fwType;
} DOCINFOA, *LPDOCINFOA;
typedef struct
{
    INT cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;
    LPCWSTR lpszDatatype;
    DWORD fwType;
} DOCINFOW, *LPDOCINFOW;
typedef DOCINFOA DOCINFO;
typedef LPDOCINFOA LPDOCINFO;
typedef struct _RGNDATAHEADER {
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
} RGNDATAHEADER,*PRGNDATAHEADER;
typedef struct _RGNDATA {
    RGNDATAHEADER rdh;
    char Buffer[1];
} RGNDATA,*PRGNDATA,*LPRGNDATA;
typedef BOOL (__attribute__((__stdcall__)) *ABORTPROC)(HDC, INT);
typedef struct {
    DWORD cb;
    CHAR DeviceName[32];
    CHAR DeviceString[128];
    DWORD StateFlags;
    CHAR DeviceID[128];
    CHAR DeviceKey[128];
} DISPLAY_DEVICEA,*PDISPLAY_DEVICEA,*LPDISPLAY_DEVICEA;
typedef struct {
    DWORD cb;
    WCHAR DeviceName[32];
    WCHAR DeviceString[128];
    DWORD StateFlags;
    WCHAR DeviceID[128];
    WCHAR DeviceKey[128];
} DISPLAY_DEVICEW,*PDISPLAY_DEVICEW,*LPDISPLAY_DEVICEW;
typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
typedef USHORT COLOR16;
typedef struct _TRIVERTEX
{
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
} TRIVERTEX, *PTRIVERTEX, *LPTRIVERTEX;
typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE, *PGRADIENT_TRIANGLE, *LPGRADIENT_TRIANGLE;
typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
} GRADIENT_RECT, *PGRADIENT_RECT, *LPGRADIENT_RECT;
typedef struct _BLENDFUNCTION
{
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
} BLENDFUNCTION, *PBLENDFUNCTION;
typedef struct _DRAWPATRECT
{
    POINT ptPosition;
    POINT ptSize;
    WORD wStyle;
    WORD wPattern;
} DRAWPATRECT, *PDRAWPATRECT;
typedef struct tagWCRANGE {
  WCHAR wcLow;
  USHORT cGlyphs;
} WCRANGE, *PWCRANGE, *LPWCRANGE;
typedef struct tagGLYPHSET {
  DWORD cbThis;
  DWORD flAccel;
  DWORD cGlyphsSupported;
  DWORD cRanges;
  WCRANGE ranges[1];
} GLYPHSET, *PGLYPHSET, *LPGLYPHSET;
__attribute__((dllimport)) INT __attribute__((__stdcall__)) AbortDoc(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AbortPath(HDC);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) AddFontResourceA(LPCSTR);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) AddFontResourceW(LPCWSTR);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) AddFontResourceExA(LPCSTR, DWORD, PVOID);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) AddFontResourceExW(LPCWSTR, DWORD, PVOID);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) AddFontMemResourceEx(PVOID, DWORD, PVOID, DWORD *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AlphaBlend(HDC,int,int,int,int,HDC,int,int,int,int,BLENDFUNCTION);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AngleArc(HDC, INT, INT, DWORD, FLOAT, FLOAT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AnimatePalette(HPALETTE,UINT,UINT,const PALETTEENTRY*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) Arc(HDC,INT,INT,INT,INT,INT,INT,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ArcTo(HDC, INT, INT, INT, INT, INT, INT, INT, INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) BeginPath(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) BitBlt(HDC,INT,INT,INT,INT,HDC,INT,INT,DWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) ChoosePixelFormat(HDC,const PIXELFORMATDESCRIPTOR*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) Chord(HDC,INT,INT,INT,INT,INT,INT,INT,INT);
__attribute__((dllimport)) HENHMETAFILE __attribute__((__stdcall__)) CloseEnhMetaFile(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CloseFigure(HDC);
__attribute__((dllimport)) HMETAFILE __attribute__((__stdcall__)) CloseMetaFile(HDC);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) CombineRgn(HRGN,HRGN,HRGN,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CombineTransform(LPXFORM,const XFORM *,const XFORM *);
__attribute__((dllimport)) HENHMETAFILE __attribute__((__stdcall__)) CopyEnhMetaFileA(HENHMETAFILE,LPCSTR);
__attribute__((dllimport)) HENHMETAFILE __attribute__((__stdcall__)) CopyEnhMetaFileW(HENHMETAFILE,LPCWSTR);
__attribute__((dllimport)) HMETAFILE __attribute__((__stdcall__)) CopyMetaFileA(HMETAFILE,LPCSTR);
__attribute__((dllimport)) HMETAFILE __attribute__((__stdcall__)) CopyMetaFileW(HMETAFILE,LPCWSTR);
__attribute__((dllimport)) HBITMAP __attribute__((__stdcall__)) CreateBitmap(INT,INT,UINT,UINT,LPCVOID);
__attribute__((dllimport)) HBITMAP __attribute__((__stdcall__)) CreateBitmapIndirect(const BITMAP*);
__attribute__((dllimport)) HBRUSH __attribute__((__stdcall__)) CreateBrushIndirect(const LOGBRUSH*);
__attribute__((dllimport)) HCOLORSPACE __attribute__((__stdcall__)) CreateColorSpaceA(LPLOGCOLORSPACEA);
__attribute__((dllimport)) HCOLORSPACE __attribute__((__stdcall__)) CreateColorSpaceW(LPLOGCOLORSPACEW);
__attribute__((dllimport)) HBITMAP __attribute__((__stdcall__)) CreateCompatibleBitmap(HDC,INT,INT);
__attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateCompatibleDC(HDC);
__attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateDCA(LPCSTR,LPCSTR,LPCSTR,const DEVMODEA*);
__attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateDCW(LPCWSTR,LPCWSTR,LPCWSTR,const DEVMODEW*);
__attribute__((dllimport)) HBITMAP __attribute__((__stdcall__)) CreateDIBitmap(HDC,const BITMAPINFOHEADER*,DWORD,LPCVOID,const BITMAPINFO*,UINT);
__attribute__((dllimport)) HBRUSH __attribute__((__stdcall__)) CreateDIBPatternBrush(HGLOBAL,UINT);
__attribute__((dllimport)) HBRUSH __attribute__((__stdcall__)) CreateDIBPatternBrushPt(const void*,UINT);
__attribute__((dllimport)) HBITMAP __attribute__((__stdcall__)) CreateDIBSection(HDC, const BITMAPINFO *, UINT, void **, HANDLE, DWORD offset);
__attribute__((dllimport)) HBITMAP __attribute__((__stdcall__)) CreateDiscardableBitmap(HDC,INT,INT);
__attribute__((dllimport)) HRGN __attribute__((__stdcall__)) CreateEllipticRgn(INT,INT,INT,INT);
__attribute__((dllimport)) HRGN __attribute__((__stdcall__)) CreateEllipticRgnIndirect(const RECT *);
__attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateEnhMetaFileA(HDC,LPCSTR,const RECT*,LPCSTR);
__attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateEnhMetaFileW(HDC,LPCWSTR,const RECT*,LPCWSTR);
__attribute__((dllimport)) HFONT __attribute__((__stdcall__)) CreateFontA(INT,INT,INT,INT,INT,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,LPCSTR);
__attribute__((dllimport)) HFONT __attribute__((__stdcall__)) CreateFontW(INT,INT,INT,INT,INT,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,LPCWSTR);
__attribute__((dllimport)) HFONT __attribute__((__stdcall__)) CreateFontIndirectA(const LOGFONTA*);
__attribute__((dllimport)) HFONT __attribute__((__stdcall__)) CreateFontIndirectW(const LOGFONTW*);
__attribute__((dllimport)) HFONT __attribute__((__stdcall__)) CreateFontIndirectExA(const ENUMLOGFONTEXDVA*);
__attribute__((dllimport)) HFONT __attribute__((__stdcall__)) CreateFontIndirectExW(const ENUMLOGFONTEXDVW*);
__attribute__((dllimport)) HPALETTE __attribute__((__stdcall__)) CreateHalftonePalette(HDC);
__attribute__((dllimport)) HBRUSH __attribute__((__stdcall__)) CreateHatchBrush(INT,COLORREF);
__attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateICA(LPCSTR,LPCSTR,LPCSTR,const DEVMODEA*);
__attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateICW(LPCWSTR,LPCWSTR,LPCWSTR,const DEVMODEW*);
__attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateMetaFileA(LPCSTR);
__attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateMetaFileW(LPCWSTR);
__attribute__((dllimport)) HPALETTE __attribute__((__stdcall__)) CreatePalette(const LOGPALETTE*);
__attribute__((dllimport)) HBRUSH __attribute__((__stdcall__)) CreatePatternBrush(HBITMAP);
__attribute__((dllimport)) HPEN __attribute__((__stdcall__)) CreatePen(INT,INT,COLORREF);
__attribute__((dllimport)) HPEN __attribute__((__stdcall__)) CreatePenIndirect(const LOGPEN*);
__attribute__((dllimport)) HRGN __attribute__((__stdcall__)) CreatePolyPolygonRgn(const POINT*,const INT*,INT,INT);
__attribute__((dllimport)) HRGN __attribute__((__stdcall__)) CreatePolygonRgn(const POINT*,INT,INT);
__attribute__((dllimport)) HRGN __attribute__((__stdcall__)) CreateRectRgn(INT,INT,INT,INT);
__attribute__((dllimport)) HRGN __attribute__((__stdcall__)) CreateRectRgnIndirect(const RECT*);
__attribute__((dllimport)) HRGN __attribute__((__stdcall__)) CreateRoundRectRgn(INT,INT,INT,INT,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreateScalableFontResourceA(DWORD,LPCSTR,LPCSTR,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreateScalableFontResourceW(DWORD,LPCWSTR,LPCWSTR,LPCWSTR);
__attribute__((dllimport)) HBRUSH __attribute__((__stdcall__)) CreateSolidBrush(COLORREF);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DPtoLP(HDC,LPPOINT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeleteColorSpace(HCOLORSPACE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeleteDC(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeleteEnhMetaFile(HENHMETAFILE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeleteMetaFile(HMETAFILE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeleteObject(HGDIOBJ);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) DescribePixelFormat(HDC,int,UINT,LPPIXELFORMATDESCRIPTOR);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) DrawEscape(HDC,INT,INT,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) Ellipse(HDC,INT,INT,INT,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) EndDoc(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EndPath(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumEnhMetaFile(HDC,HENHMETAFILE,ENHMFENUMPROC,LPVOID,const RECT*);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) EnumFontFamiliesA(HDC,LPCSTR,FONTENUMPROCA,LPARAM);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) EnumFontFamiliesW(HDC,LPCWSTR,FONTENUMPROCW,LPARAM);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) EnumFontFamiliesExA(HDC,LPLOGFONTA,FONTENUMPROCA,LPARAM,DWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) EnumFontFamiliesExW(HDC,LPLOGFONTW,FONTENUMPROCW,LPARAM,DWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) EnumFontsA(HDC,LPCSTR,FONTENUMPROCA,LPARAM);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) EnumFontsW(HDC,LPCWSTR,FONTENUMPROCW,LPARAM);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) EnumICMProfilesA(HDC,ICMENUMPROCA,LPARAM);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) EnumICMProfilesW(HDC,ICMENUMPROCW,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumMetaFile(HDC,HMETAFILE,MFENUMPROC,LPARAM);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) EnumObjects(HDC,INT,GOBJENUMPROC,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EqualRgn(HRGN,HRGN);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) Escape(HDC,INT,INT,LPCSTR,LPVOID);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) ExcludeClipRect(HDC,INT,INT,INT,INT);
__attribute__((dllimport)) HPEN __attribute__((__stdcall__)) ExtCreatePen(DWORD,DWORD,const LOGBRUSH*,DWORD,const DWORD*);
__attribute__((dllimport)) HRGN __attribute__((__stdcall__)) ExtCreateRegion(const XFORM*,DWORD,const RGNDATA*);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) ExtEscape(HDC,INT,INT,LPCSTR,INT,LPSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ExtFloodFill(HDC,INT,INT,COLORREF,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) ExtSelectClipRgn(HDC,HRGN,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ExtTextOutA(HDC,INT,INT,UINT,const RECT*,LPCSTR,UINT,const INT*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ExtTextOutW(HDC,INT,INT,UINT,const RECT*,LPCWSTR,UINT,const INT*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FillPath(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FillRgn(HDC,HRGN,HBRUSH);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FixBrushOrgEx(HDC,INT,INT,LPPOINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FlattenPath(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FloodFill(HDC,INT,INT,COLORREF);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FrameRgn(HDC,HRGN,HBRUSH,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GdiAlphaBlend(HDC,int,int,int,int,HDC,int,int,int,int,BLENDFUNCTION);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GdiComment(HDC,UINT,const BYTE *);
__attribute__((dllimport)) DEVMODEW * __attribute__((__stdcall__)) GdiConvertToDevmodeW(const DEVMODEA *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GdiFlush(void);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) GdiGetCharDimensions(HDC, LPTEXTMETRICW, LONG *);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GdiGetCodePage(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GdiGradientFill(HDC,PTRIVERTEX,ULONG,PVOID,ULONG,ULONG);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GdiIsMetaFileDC(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GdiIsMetaPrintDC(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GdiIsPlayMetafileDC(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GdiTransparentBlt(HDC,int,int,int,int,HDC,int,int,int,int,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetArcDirection(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetAspectRatioFilterEx(HDC,LPSIZE);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) GetBitmapBits(HBITMAP,LONG,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetBitmapDimensionEx(HBITMAP,LPSIZE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetBrushOrgEx(HDC,LPPOINT);
__attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) GetBkColor(HDC);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetBkMode(HDC);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetBoundsRect(HDC,LPRECT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCharABCWidthsA(HDC,UINT,UINT,LPABC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCharABCWidthsW(HDC,UINT,UINT,LPABC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCharABCWidthsFloatA(HDC,UINT,UINT,LPABCFLOAT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCharABCWidthsFloatW(HDC,UINT,UINT,LPABCFLOAT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCharABCWidthsI(HDC,UINT,UINT,LPWORD,LPABC);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetCharacterPlacementA(HDC,LPCSTR,INT,INT,GCP_RESULTSA*,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetCharacterPlacementW(HDC,LPCWSTR,INT,INT,GCP_RESULTSW*,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCharWidth32A(HDC,UINT,UINT,LPINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCharWidth32W(HDC,UINT,UINT,LPINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCharWidthA(HDC,UINT,UINT,LPINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCharWidthI(HDC,UINT,UINT,LPWORD,LPINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCharWidthW(HDC,UINT,UINT,LPINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCharWidthFloatA(HDC,UINT,UINT,PFLOAT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCharWidthFloatW(HDC,UINT,UINT,PFLOAT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetClipBox(HDC,LPRECT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetClipRgn(HDC,HRGN);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetColorAdjustment(HDC, LPCOLORADJUSTMENT);
__attribute__((dllimport)) HCOLORSPACE __attribute__((__stdcall__)) GetColorSpace(HDC);
__attribute__((dllimport)) HGDIOBJ __attribute__((__stdcall__)) GetCurrentObject(HDC,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCurrentPositionEx(HDC,LPPOINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetDeviceCaps(HDC,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetDeviceGammaRamp(HDC,LPVOID);
__attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) GetDCBrushColor(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetDCOrgEx(HDC,LPPOINT);
__attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) GetDCPenColor(HDC);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetDIBColorTable(HDC,UINT,UINT,RGBQUAD*);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetDIBits(HDC,HBITMAP,UINT,UINT,LPVOID,LPBITMAPINFO,UINT);
__attribute__((dllimport)) HENHMETAFILE __attribute__((__stdcall__)) GetEnhMetaFileA(LPCSTR);
__attribute__((dllimport)) HENHMETAFILE __attribute__((__stdcall__)) GetEnhMetaFileW(LPCWSTR);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetEnhMetaFileBits(HENHMETAFILE,UINT,LPBYTE);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetEnhMetaFileDescriptionA(HENHMETAFILE,UINT,LPSTR);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetEnhMetaFileDescriptionW(HENHMETAFILE,UINT,LPWSTR);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetEnhMetaFileHeader(HENHMETAFILE,UINT,LPENHMETAHEADER);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetEnhMetaFilePaletteEntries(HENHMETAFILE,UINT,LPPALETTEENTRY);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFontData(HDC,DWORD,DWORD,LPVOID,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFontLanguageInfo(HDC);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFontUnicodeRanges(HDC,LPGLYPHSET);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetGlyphIndicesA(HDC,LPCSTR,INT,LPWORD,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetGlyphIndicesW(HDC,LPCWSTR,INT,LPWORD,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetGlyphOutlineA(HDC,UINT,UINT,LPGLYPHMETRICS,DWORD,LPVOID,const MAT2*);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetGlyphOutlineW(HDC,UINT,UINT,LPGLYPHMETRICS,DWORD,LPVOID,const MAT2*);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetGraphicsMode(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetICMProfileA(HDC,LPDWORD,LPSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetICMProfileW(HDC,LPDWORD,LPWSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetKerningPairsA(HDC,DWORD,LPKERNINGPAIR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetKerningPairsW(HDC,DWORD,LPKERNINGPAIR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetLayout(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetLogColorSpaceA(HCOLORSPACE,LPLOGCOLORSPACEA,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetLogColorSpaceW(HCOLORSPACE,LPLOGCOLORSPACEW,DWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetMapMode(HDC);
__attribute__((dllimport)) HMETAFILE __attribute__((__stdcall__)) GetMetaFileA(LPCSTR);
__attribute__((dllimport)) HMETAFILE __attribute__((__stdcall__)) GetMetaFileW(LPCWSTR);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetMetaFileBitsEx(HMETAFILE,UINT,LPVOID);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetMetaRgn(HDC,HRGN);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetMiterLimit(HDC, PFLOAT);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetNearestColor(HDC,DWORD);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetNearestPaletteIndex(HPALETTE,COLORREF);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetObjectA(HGDIOBJ,INT,LPVOID);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetObjectW(HGDIOBJ,INT,LPVOID);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetObjectType(HGDIOBJ);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetOutlineTextMetricsA(HDC,UINT,LPOUTLINETEXTMETRICA);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetOutlineTextMetricsW(HDC,UINT,LPOUTLINETEXTMETRICW);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetPaletteEntries(HPALETTE,UINT,UINT,LPPALETTEENTRY);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetPath(HDC,LPPOINT,LPBYTE,INT);
__attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) GetPixel(HDC,INT,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetPixelFormat(HDC);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetPolyFillMode(HDC);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetRandomRgn(HDC,HRGN,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetRasterizerCaps(LPRASTERIZER_STATUS,UINT);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetRegionData(HRGN,DWORD,LPRGNDATA);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetRelAbs(HDC,DWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetRgnBox(HRGN,LPRECT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetROP2(HDC);
__attribute__((dllimport)) HGDIOBJ __attribute__((__stdcall__)) GetStockObject(INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetStretchBltMode(HDC);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemPaletteEntries(HDC,UINT,UINT,LPPALETTEENTRY);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemPaletteUse(HDC);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetTextAlign(HDC);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetTextCharacterExtra(HDC);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetTextCharset(HDC);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetTextCharsetInfo(HDC,LPFONTSIGNATURE,DWORD);
__attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) GetTextColor(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetTextExtentExPointA(HDC,LPCSTR,INT,INT,LPINT,LPINT,LPSIZE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetTextExtentExPointW(HDC,LPCWSTR,INT,INT,LPINT,LPINT,LPSIZE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetTextExtentPointA(HDC,LPCSTR,INT,LPSIZE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetTextExtentPointW(HDC,LPCWSTR,INT,LPSIZE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetTextExtentPoint32A(HDC,LPCSTR,INT,LPSIZE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetTextExtentPoint32W(HDC,LPCWSTR,INT,LPSIZE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetTextExtentExPointI(HDC,const WORD*,INT,INT,LPINT,LPINT,LPSIZE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetTextExtentPointI(HDC,const WORD*,INT,LPSIZE);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetTextFaceA(HDC,INT,LPSTR);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetTextFaceW(HDC,INT,LPWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetTextMetricsA(HDC,LPTEXTMETRICA);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetTextMetricsW(HDC,LPTEXTMETRICW);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetTransform(HDC,DWORD,XFORM*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetViewportExtEx(HDC,LPSIZE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetViewportOrgEx(HDC,LPPOINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetWindowExtEx(HDC,LPSIZE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetWindowOrgEx(HDC,LPPOINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetWinMetaFileBits(HENHMETAFILE,UINT,LPBYTE,INT,HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetWorldTransform(HDC,LPXFORM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GradientFill(HDC,PTRIVERTEX,ULONG,PVOID,ULONG,ULONG);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) IntersectClipRect(HDC,INT,INT,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InvertRgn(HDC,HRGN);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LineDDA(INT,INT,INT,INT,LINEDDAPROC,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LineTo(HDC,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LPtoDP(HDC,LPPOINT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) MaskBlt(HDC,INT,INT,INT,INT,HDC,INT,INT,HBITMAP,INT,INT,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) MirrorRgn(HWND,HRGN);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ModifyWorldTransform(HDC,const XFORM *, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) MoveToEx(HDC,INT,INT,LPPOINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) OffsetClipRgn(HDC,INT,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) OffsetRgn(HRGN,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) OffsetViewportOrgEx(HDC,INT,INT,LPPOINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) OffsetWindowOrgEx(HDC,INT,INT,LPPOINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PaintRgn(HDC,HRGN);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PatBlt(HDC,INT,INT,INT,INT,DWORD);
__attribute__((dllimport)) HRGN __attribute__((__stdcall__)) PathToRegion(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) Pie(HDC,INT,INT,INT,INT,INT,INT,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PlayEnhMetaFile(HDC,HENHMETAFILE,const RECT*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PlayEnhMetaFileRecord(HDC,LPHANDLETABLE,const ENHMETARECORD*,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PlayMetaFile(HDC,HMETAFILE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PlayMetaFileRecord(HDC,LPHANDLETABLE,LPMETARECORD,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PlgBlt(HDC,const POINT*,HDC,INT,INT,INT,INT,HBITMAP,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PolyBezier(HDC,const POINT*,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PolyBezierTo(HDC,const POINT*,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PolyDraw(HDC,const POINT*,const BYTE*,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PolyPolygon(HDC,const POINT*,const INT*,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PolyPolyline(HDC,const POINT*,const DWORD*,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) Polygon(HDC,const POINT*,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) Polyline(HDC,const POINT*,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PolylineTo(HDC,const POINT*,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PtInRegion(HRGN,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PtVisible(HDC,INT,INT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) RealizePalette(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) Rectangle(HDC,INT,INT,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RectInRegion(HRGN,const RECT *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RectVisible(HDC,const RECT*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RemoveFontMemResourceEx(HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RemoveFontResourceA(LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RemoveFontResourceW(LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RemoveFontResourceExA(LPCSTR, DWORD, PVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RemoveFontResourceExW(LPCWSTR, DWORD, PVOID);
__attribute__((dllimport)) HDC __attribute__((__stdcall__)) ResetDCA(HDC,const DEVMODEA *);
__attribute__((dllimport)) HDC __attribute__((__stdcall__)) ResetDCW(HDC,const DEVMODEW *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ResizePalette(HPALETTE,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RestoreDC(HDC,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RoundRect(HDC,INT,INT,INT,INT,INT,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SaveDC(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ScaleViewportExtEx(HDC,INT,INT,INT,INT,LPSIZE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ScaleWindowExtEx(HDC,INT,INT,INT,INT,LPSIZE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SelectClipPath(HDC,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SelectClipRgn(HDC,HRGN);
__attribute__((dllimport)) HGDIOBJ __attribute__((__stdcall__)) SelectObject(HDC,HGDIOBJ);
__attribute__((dllimport)) HPALETTE __attribute__((__stdcall__)) SelectPalette(HDC,HPALETTE,BOOL);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetAbortProc(HDC,ABORTPROC);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetArcDirection(HDC,INT);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) SetBitmapBits(HBITMAP,LONG,LPCVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetBitmapDimensionEx(HBITMAP,INT,INT,LPSIZE);
__attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) SetBkColor(HDC,COLORREF);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetBkMode(HDC,INT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) SetBoundsRect(HDC,const RECT*,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetBrushOrgEx(HDC,INT,INT,LPPOINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetColorAdjustment(HDC,const COLORADJUSTMENT*);
__attribute__((dllimport)) HCOLORSPACE __attribute__((__stdcall__)) SetColorSpace(HDC,HCOLORSPACE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetDeviceGammaRamp(HDC,LPVOID);
__attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) SetDCBrushColor(HDC,COLORREF);
__attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) SetDCPenColor(HDC, COLORREF);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) SetDIBColorTable(HDC,UINT,UINT,const RGBQUAD*);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetDIBits(HDC,HBITMAP,UINT,UINT,LPCVOID,const BITMAPINFO*,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetDIBitsToDevice(HDC,INT,INT,DWORD,DWORD,INT,INT,UINT,UINT,LPCVOID,const BITMAPINFO*,UINT);
__attribute__((dllimport)) HENHMETAFILE __attribute__((__stdcall__)) SetEnhMetaFileBits(UINT,const BYTE *);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetGraphicsMode(HDC,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetICMMode(HDC,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetICMProfileA(HDC,LPSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetICMProfileW(HDC,LPWSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetLayout(HDC,DWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetMapMode(HDC,INT);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetMapperFlags(HDC,DWORD);
__attribute__((dllimport)) HMETAFILE __attribute__((__stdcall__)) SetMetaFileBitsEx(UINT,const BYTE*);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetMetaRgn(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetMiterLimit(HDC, FLOAT, PFLOAT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) SetPaletteEntries(HPALETTE,UINT,UINT,const PALETTEENTRY*);
__attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) SetPixel(HDC,INT,INT,COLORREF);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetPixelV(HDC,INT,INT,COLORREF);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetPixelFormat(HDC,int,const PIXELFORMATDESCRIPTOR*);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetPolyFillMode(HDC,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetRectRgn(HRGN,INT,INT,INT,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetRelAbs(HDC,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetROP2(HDC,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetStretchBltMode(HDC,INT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) SetSystemPaletteUse(HDC,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) SetTextAlign(HDC,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetTextCharacterExtra(HDC,INT);
__attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) SetTextColor(HDC,COLORREF);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetTextJustification(HDC,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetViewportExtEx(HDC,INT,INT,LPSIZE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetViewportOrgEx(HDC,INT,INT,LPPOINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetWindowExtEx(HDC,INT,INT,LPSIZE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetWindowOrgEx(HDC,INT,INT,LPPOINT);
__attribute__((dllimport)) HENHMETAFILE __attribute__((__stdcall__)) SetWinMetaFileBits(UINT,const BYTE*,HDC,const METAFILEPICT *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetWorldTransform(HDC,const XFORM*);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) StartDocA(HDC,const DOCINFOA*);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) StartDocW(HDC,const DOCINFOW*);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) StartPage(HDC);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) EndPage(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) StretchBlt(HDC,INT,INT,INT,INT,HDC,INT,INT,INT,INT,DWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) StretchDIBits(HDC,INT,INT,INT,INT,INT,INT,INT,INT,const void*,const BITMAPINFO*,UINT,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) StrokeAndFillPath(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) StrokePath(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SwapBuffers(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TextOutA(HDC,INT,INT,LPCSTR,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TextOutW(HDC,INT,INT,LPCWSTR,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TranslateCharsetInfo(LPDWORD,LPCHARSETINFO,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TransparentBlt(HDC,int,int,int,int,HDC,int,int,int,int,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnrealizeObject(HGDIOBJ);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UpdateColors(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UpdateICMRegKeyA(DWORD,LPSTR,LPSTR,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UpdateICMRegKeyW(DWORD,LPWSTR,LPWSTR,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WidenPath(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PolyTextOutA(HDC,const POLYTEXTA*,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PolyTextOutW(HDC,const POLYTEXTW*,INT);
__attribute__((dllimport)) HGLRC __attribute__((__stdcall__)) wglCreateContext(HDC);
__attribute__((dllimport)) HGLRC __attribute__((__stdcall__)) wglCreateLayerContext(HDC,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) wglCopyContext(HGLRC,HGLRC,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) wglDeleteContext(HGLRC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) wglDescribeLayerPlane(HDC,INT,INT,UINT,LPLAYERPLANEDESCRIPTOR);
__attribute__((dllimport)) HGLRC __attribute__((__stdcall__)) wglGetCurrentContext(void);
__attribute__((dllimport)) HDC __attribute__((__stdcall__)) wglGetCurrentDC(void);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) wglGetLayerPaletteEntries(HDC,INT,INT,INT,const COLORREF *);
__attribute__((dllimport)) PROC __attribute__((__stdcall__)) wglGetProcAddress(LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) wglMakeCurrent(HDC,HGLRC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) wglRealizeLayerPalette(HDC,INT,BOOL);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) wglSetLayerPaletteEntries(HDC,INT,INT,INT,const COLORREF *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) wglShareLists(HGLRC,HGLRC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) wglSwapLayerBuffers(HDC,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) wglUseFontBitmapsA(HDC,DWORD,DWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) wglUseFontBitmapsW(HDC,DWORD,DWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) wglUseFontOutlinesA(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,INT,LPGLYPHMETRICSFLOAT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) wglUseFontOutlinesW(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,INT,LPGLYPHMETRICSFLOAT);
typedef INT_PTR (__attribute__((__stdcall__)) *DLGPROC)(HWND,UINT,WPARAM,LPARAM);
typedef BOOL (__attribute__((__stdcall__)) *DRAWSTATEPROC)(HDC,LPARAM,WPARAM,int,int);
typedef INT (__attribute__((__stdcall__)) *EDITWORDBREAKPROCA)(LPSTR,INT,INT,INT);
typedef INT (__attribute__((__stdcall__)) *EDITWORDBREAKPROCW)(LPWSTR,INT,INT,INT);
typedef BOOL (__attribute__((__stdcall__)) *GRAYSTRINGPROC)(HDC,LPARAM,INT);
typedef LRESULT (__attribute__((__stdcall__)) *HOOKPROC)(INT,WPARAM,LPARAM);
typedef BOOL (__attribute__((__stdcall__)) *NAMEENUMPROCA)(LPSTR,LPARAM);
typedef BOOL (__attribute__((__stdcall__)) *NAMEENUMPROCW)(LPWSTR,LPARAM);
typedef BOOL (__attribute__((__stdcall__)) *PROPENUMPROCA)(HWND,LPCSTR,HANDLE);
typedef BOOL (__attribute__((__stdcall__)) *PROPENUMPROCW)(HWND,LPCWSTR,HANDLE);
typedef BOOL (__attribute__((__stdcall__)) *PROPENUMPROCEXA)(HWND,LPSTR,HANDLE,ULONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *PROPENUMPROCEXW)(HWND,LPWSTR,HANDLE,ULONG_PTR);
typedef void (__attribute__((__stdcall__)) *SENDASYNCPROC)(HWND,UINT,ULONG_PTR,LRESULT);
typedef void (__attribute__((__stdcall__)) *TIMERPROC)(HWND,UINT,UINT_PTR,DWORD);
typedef void (__attribute__((__stdcall__)) *WINEVENTPROC)(HWINEVENTHOOK,DWORD,HWND,LONG,LONG,
                                         DWORD,DWORD);
typedef BOOL (__attribute__((__stdcall__)) *WNDENUMPROC)(HWND,LPARAM);
typedef NAMEENUMPROCA WINSTAENUMPROCA;
typedef NAMEENUMPROCA DESKTOPENUMPROCA;
typedef NAMEENUMPROCW WINSTAENUMPROCW;
typedef NAMEENUMPROCW DESKTOPENUMPROCW;
typedef LRESULT (__attribute__((__stdcall__)) *WNDPROC)(HWND,UINT,WPARAM,LPARAM);
typedef DESKTOPENUMPROCA DESKTOPENUMPROC;
typedef EDITWORDBREAKPROCA EDITWORDBREAKPROC;
typedef NAMEENUMPROCA NAMEENUMPROC;
typedef PROPENUMPROCA PROPENUMPROC;
typedef PROPENUMPROCEXA PROPENUMPROCEX;
typedef WINSTAENUMPROCA WINSTAENUMPROC;
typedef HANDLE HDWP;
typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;
typedef struct tagBSMINFO {
    UINT cbSize;
    HDESK hdesk;
    HWND hwnd;
    LUID luid;
} BSMINFO, *PBSMINFO;
typedef struct tagFILTERKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;
    DWORD iDelayMSec;
    DWORD iRepeatMSec;
    DWORD iBounceMSec;
} FILTERKEYS, *LPFILTERKEYS;
typedef struct tagTOGGLEKEYS
{
    DWORD cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;
typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;
typedef struct tagMOUSEMOVEPOINT {
    int x;
    int y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT,*PMOUSEMOVEPOINT,*LPMOUSEMOVEPOINT;
typedef struct tagSTICKYKEYS
{
    DWORD cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;
typedef struct tagACCESSTIMEOUT
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;
typedef struct tagSERIALKEYSA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszActivePort;
    LPSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
} SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW {
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszActivePort;
    LPWSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
} SERIALKEYSW,*LPSERIALKEYSW;
typedef SERIALKEYSA SERIALKEYS;
typedef LPSERIALKEYSA LPSERIALKEYS;
typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;
typedef SOUNDSENTRYA SOUNDSENTRY;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
typedef struct tagHIGHCONTRASTA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszDefaultScheme;
} HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszDefaultScheme;
} HIGHCONTRASTW, *LPHIGHCONTRASTW;
typedef HIGHCONTRASTA HIGHCONTRAST;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
typedef struct tagEVENTMSG
{
    UINT message;
    UINT paramL;
    UINT paramH;
    DWORD time;
    HWND hwnd;
} EVENTMSG, *PEVENTMSG, *LPEVENTMSG;
typedef struct tagKBDLLHOOKSTRUCT
{
    DWORD vkCode;
    DWORD scanCode;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} KBDLLHOOKSTRUCT, *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;
typedef struct tagMSLLHOOKSTRUCT
{
    POINT pt;
    DWORD mouseData;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT, *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;
typedef struct
{
    POINT pt;
    HWND hwnd;
    UINT wHitTestCode;
    ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT, *LPMOUSEHOOKSTRUCT;
typedef struct
{
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
} HARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT, *LPHARDWAREHOOKSTRUCT;
typedef struct tagDEBUGHOOKINFO
{
    DWORD idThread;
    DWORD idThreadInstaller;
    LPARAM lParam;
    WPARAM wParam;
    INT code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO, *LPDEBUGHOOKINFO;
typedef struct tagMOUSEINPUT
{
    LONG dx;
    LONG dy;
    DWORD mouseData;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT, *LPMOUSEINPUT;
typedef struct tagKEYBDINPUT
{
    WORD wVk;
    WORD wScan;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT, *LPKEYBDINPUT;
typedef struct tagHARDWAREINPUT
{
    DWORD uMsg;
    WORD wParamL;
    WORD wParamH;
} HARDWAREINPUT, *PHARDWAREINPUT, *LPHARDWAREINPUT;
typedef struct tagINPUT
{
    DWORD type;
    union
    {
        MOUSEINPUT mi;
        KEYBDINPUT ki;
        HARDWAREINPUT hi;
    } ;
} INPUT, *PINPUT, *LPINPUT;
typedef struct HRAWINPUT__ { int unused; } *HRAWINPUT;
typedef struct tagRAWINPUTDEVICELIST
{
    HANDLE hDevice;
    DWORD dwType;
} RAWINPUTDEVICELIST, *PRAWINPUTDEVICELIST;
typedef struct tagRAWHID {
    DWORD dwSizeHid;
    DWORD dwCount;
    BYTE bRawData;
} RAWHID, *LPRAWHID;
typedef struct tagRAWKEYBOARD {
    USHORT MakeCode;
    USHORT Flags;
    USHORT Reserved;
    USHORT VKey;
    UINT Message;
    ULONG ExtraInformation;
} RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD;
typedef struct tagRAWMOUSE {
    USHORT usFlags;
    union {
        ULONG ulButtons;
        struct {
            USHORT usButtonFlags;
            USHORT usButtonData;
        };
    };
    ULONG ulRawButtons;
    LONG lLastX;
    LONG lLastY;
    ULONG ulExtraInformation;
} RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE;
typedef struct tagRAWINPUTHEADER {
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
} RAWINPUTHEADER, *PRAWINPUTHEADER;
typedef struct tagRAWINPUT {
    RAWINPUTHEADER header;
    union {
        RAWMOUSE mouse;
        RAWKEYBOARD keyboard;
        RAWHID hid;
    } data;
} RAWINPUT, *PRAWINPUT, *LPRAWINPUT;
typedef struct tagRAWINPUTDEVICE {
    USHORT usUsagePage;
    USHORT usUsage;
    DWORD dwFlags;
    HWND hwndTarget;
} RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE;
typedef struct tagRID_DEVICE_INFO_MOUSE {
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    BOOL fHasHorizontalWheel;
} RID_DEVICE_INFO_MOUSE, *PRID_DEVICE_INFO_MOUSE;
typedef struct tagRID_DEVICE_INFO_KEYBOARD {
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
} RID_DEVICE_INFO_KEYBOARD, *PRID_DEVICE_INFO_KEYBOARD;
typedef struct tagRID_DEVICE_INFO_HID {
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;
    USHORT usUsagePage;
    USHORT usUsage;
} RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID;
typedef struct tagRID_DEVICE_INFO {
    DWORD cbSize;
    DWORD dwType;
    union {
        RID_DEVICE_INFO_MOUSE mouse;
        RID_DEVICE_INFO_KEYBOARD keyboard;
        RID_DEVICE_INFO_HID hid;
    } ;
} RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO;
typedef struct tagGUITHREADINFO
{
    DWORD cbSize;
    DWORD flags;
    HWND hwndActive;
    HWND hwndFocus;
    HWND hwndCapture;
    HWND hwndMenuOwner;
    HWND hwndMoveSize;
    HWND hwndCaret;
    RECT rcCaret;
} GUITHREADINFO, *PGUITHREADINFO, *LPGUITHREADINFO;
typedef struct tagANIMATIONINFO
{
       UINT cbSize;
       INT iMinAnimate;
} ANIMATIONINFO, *LPANIMATIONINFO;
typedef struct tagNMHDR
{
    HWND hwndFrom;
    UINT_PTR idFrom;
    UINT code;
} NMHDR, *LPNMHDR;
typedef struct tagDRAWTEXTPARAMS
{
 UINT cbSize;
 INT iTabLength;
 INT iLeftMargin;
 INT iRightMargin;
 UINT uiLengthDrawn;
} DRAWTEXTPARAMS,*LPDRAWTEXTPARAMS;
typedef struct
{
  LPARAM lParam;
  WPARAM wParam;
  UINT message;
  HWND hwnd;
} CWPSTRUCT, *PCWPSTRUCT, *LPCWPSTRUCT;
typedef struct
{
  LRESULT lResult;
  LPARAM lParam;
  WPARAM wParam;
  DWORD message;
  HWND hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT, *LPCWPRETSTRUCT;
typedef struct tagWINDOWPLACEMENT
{
    UINT length;
    UINT flags;
    UINT showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT rcNormalPosition;
} WINDOWPLACEMENT, *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;
__attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) GetSysColor(INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetSysColors(INT,const INT*,const COLORREF*);
typedef struct tagCREATESTRUCTA
{
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    INT cy;
    INT cx;
    INT y;
    INT x;
    LONG style;
    LPCSTR lpszName;
    LPCSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW
{
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    INT cy;
    INT cx;
    INT y;
    INT x;
    LONG style;
    LPCWSTR lpszName;
    LPCWSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;
typedef CREATESTRUCTA CREATESTRUCT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;
typedef struct tagPAINTSTRUCT
{
    HDC hdc;
    BOOL fErase;
    RECT rcPaint;
    BOOL fRestore;
    BOOL fIncUpdate;
    BYTE rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *LPPAINTSTRUCT;
typedef struct tagCLIENTCREATESTRUCT
{
    HMENU hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;
typedef struct tagMDICREATESTRUCTA
{
    LPCSTR szClass;
    LPCSTR szTitle;
    HINSTANCE hOwner;
    INT x;
    INT y;
    INT cx;
    INT cy;
    DWORD style;
    LPARAM lParam;
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW
{
    LPCWSTR szClass;
    LPCWSTR szTitle;
    HINSTANCE hOwner;
    INT x;
    INT y;
    INT cx;
    INT cy;
    DWORD style;
    LPARAM lParam;
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;
typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;
typedef struct tagSTYLESTRUCT {
    DWORD styleOld;
    DWORD styleNew;
} STYLESTRUCT, *LPSTYLESTRUCT;
typedef struct tagMINMAXINFO
{
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;
typedef struct tagWINDOWPOS
{
    HWND hwnd;
    HWND hwndInsertAfter;
    INT x;
    INT y;
    INT cx;
    INT cy;
    UINT flags;
} WINDOWPOS, *PWINDOWPOS, *LPWINDOWPOS;
typedef struct
{
    RECT rgrc[3];
    WINDOWPOS *lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;
typedef struct tagWNDCLASSA
{
    UINT style;
    WNDPROC lpfnWndProc;
    INT cbClsExtra;
    INT cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
} WNDCLASSA, *PWNDCLASSA, *LPWNDCLASSA;
typedef struct tagWNDCLASSW
{
    UINT style;
    WNDPROC lpfnWndProc;
    INT cbClsExtra;
    INT cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
} WNDCLASSW, *PWNDCLASSW, *LPWNDCLASSW;
typedef WNDCLASSA WNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
typedef LPWNDCLASSA LPWNDCLASS;
typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
    PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;
typedef struct tagMDINEXTMENU {
    HMENU hmenuIn;
    HMENU hmenuNext;
    HWND hwndNext;
} MDINEXTMENU, *PMDINEXTMENU, *LPMDINEXTMENU;
typedef struct tagMULTIKEYHELPA
{
    DWORD mkSize;
    CHAR mkKeylist;
    CHAR szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW
{
    DWORD mkSize;
    WCHAR mkKeylist;
    WCHAR szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;
typedef MULTIKEYHELPA MULTIKEYHELP;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;
typedef struct tagHELPWININFOA {
 int wStructSize;
 int x;
 int y;
 int dx;
 int dy;
 int wMax;
 CHAR rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW {
 int wStructSize;
 int x;
 int y;
 int dx;
 int dy;
 int wMax;
 WCHAR rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;
typedef HELPWININFOA HELPWININFO;
typedef PHELPWININFOA PHELPWININFO;
typedef LPHELPWININFOA LPHELPWININFO;
typedef struct tagWNDCLASSEXA
{
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    INT cbClsExtra;
    INT cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
    HICON hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA, *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW
{
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    INT cbClsExtra;
    INT cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
    HICON hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW, *LPWNDCLASSEXW;
typedef WNDCLASSEXA WNDCLASSEX;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef LPWNDCLASSEXA LPWNDCLASSEX;
typedef struct tagMSG
{
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;
} MSG, *PMSG, *LPMSG;
typedef struct _ICONINFO {
 BOOL fIcon;
 DWORD xHotspot;
 DWORD yHotspot;
 HBITMAP hbmMask;
 HBITMAP hbmColor;
} ICONINFO, *PICONINFO;
typedef struct _ICONINFOEXA
{
    DWORD cbSize;
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD wResID;
    CHAR szModName[260];
    CHAR szResName[260];
} ICONINFOEXA, *PICONINFOEXA;
typedef struct _ICONINFOEXW
{
    DWORD cbSize;
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD wResID;
    WCHAR szModName[260];
    WCHAR szResName[260];
} ICONINFOEXW, *PICONINFOEXW;
typedef ICONINFOEXA ICONINFOEX;
typedef PICONINFOEXA PICONINFOEX;
typedef struct tagCURSORINFO
{
    DWORD cbSize;
    DWORD flags;
    HCURSOR hCursor;
    POINT ptScreenPos;
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;
typedef struct tagACCEL
{
    BYTE fVirt;
    WORD key;
    WORD cmd;
} ACCEL, *LPACCEL;
typedef struct tagTPMPARAMS
{
    UINT cbSize;
    RECT rcExclude;
} TPMPARAMS, *LPTPMPARAMS;
typedef struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;
typedef struct tagMENUITEMINFOA {
  UINT cbSize;
  UINT fMask;
  UINT fType;
  UINT fState;
  UINT wID;
  HMENU hSubMenu;
  HBITMAP hbmpChecked;
  HBITMAP hbmpUnchecked;
  ULONG_PTR dwItemData;
  LPSTR dwTypeData;
  UINT cch;
  HBITMAP hbmpItem;
} MENUITEMINFOA, *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW {
  UINT cbSize;
  UINT fMask;
  UINT fType;
  UINT fState;
  UINT wID;
  HMENU hSubMenu;
  HBITMAP hbmpChecked;
  HBITMAP hbmpUnchecked;
  ULONG_PTR dwItemData;
  LPWSTR dwTypeData;
  UINT cch;
  HBITMAP hbmpItem;
} MENUITEMINFOW, *LPMENUITEMINFOW;
typedef MENUITEMINFOA MENUITEMINFO;
typedef LPMENUITEMINFOA LPMENUITEMINFO;
typedef const MENUITEMINFOA *LPCMENUITEMINFOA;
typedef const MENUITEMINFOW *LPCMENUITEMINFOW;
typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
typedef struct tagMENUBARINFO {
  DWORD cbSize;
  RECT rcBar;
  HMENU hMenu;
  HWND hwndMenu;
  BOOL fBarFocused:1;
  BOOL fFocused:1;
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;
typedef struct tagMENUINFO {
  DWORD cbSize;
  DWORD fMask;
  DWORD dwStyle;
  UINT cyMax;
  HBRUSH hbrBack;
  DWORD dwContextHelpID;
  ULONG_PTR dwMenuData;
} MENUINFO, *LPMENUINFO;
typedef const MENUINFO *LPCMENUINFO;
typedef struct {
  WORD versionNumber;
  WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;
typedef struct {
  WORD mtOption;
  WORD mtID;
  WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;
typedef void MENUTEMPLATE;
typedef PVOID *LPMENUTEMPLATE;
typedef struct tagSCROLLINFO
{
    UINT cbSize;
    UINT fMask;
    INT nMin;
    INT nMax;
    UINT nPage;
    INT nPos;
    INT nTrackPos;
} SCROLLINFO, *LPSCROLLINFO;
typedef const SCROLLINFO *LPCSCROLLINFO;
typedef struct tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT rcScrollBar;
    INT dxyLineButton;
    INT xyThumbTop;
    INT xyThumbBottom;
    INT reserved;
    DWORD rgstate[5 +1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;
typedef struct tagHELPINFO
{
    UINT cbSize;
    INT iContextType;
    INT iCtrlId;
    HANDLE hItemHandle;
    DWORD_PTR dwContextId;
    POINT MousePos;
} HELPINFO,*LPHELPINFO;
typedef void (__attribute__((__stdcall__)) *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);
typedef struct tagMSGBOXPARAMSA
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpszText;
    LPCSTR lpszCaption;
    DWORD dwStyle;
    LPCSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpszText;
    LPCWSTR lpszCaption;
    DWORD dwStyle;
    LPCWSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;
typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;
typedef struct tagMONITORINFO
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
} MONITORINFO, *LPMONITORINFO;
typedef struct tagMONITORINFOEXA
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
    CHAR szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
    WCHAR szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;
typedef MONITORINFOEXA MONITORINFOEX;
typedef LPMONITORINFOEXA LPMONITORINFOEX;
typedef BOOL (__attribute__((__stdcall__)) *MONITORENUMPROC)(HMONITOR,HDC,LPRECT,LPARAM);

typedef struct tagDLGTEMPLATE
{
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;
typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;
typedef LPDLGTEMPLATEA LPDLGTEMPLATE;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;
typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
typedef struct tagDLGITEMTEMPLATE
{
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;
typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;
typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;

typedef struct tagCBT_CREATEWNDA
{
    CREATESTRUCTA *lpcs;
    HWND hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;
typedef struct tagCBT_CREATEWNDW
{
    CREATESTRUCTW *lpcs;
    HWND hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;
typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
typedef struct tagCBTACTIVATESTRUCT
{
    BOOL fMouse;
    HWND hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;
typedef struct tagNONCLIENTMETRICSA {
 UINT cbSize;
 INT iBorderWidth;
 INT iScrollWidth;
 INT iScrollHeight;
 INT iCaptionWidth;
 INT iCaptionHeight;
 LOGFONTA lfCaptionFont;
 INT iSmCaptionWidth;
 INT iSmCaptionHeight;
 LOGFONTA lfSmCaptionFont;
 INT iMenuWidth;
 INT iMenuHeight;
 LOGFONTA lfMenuFont;
 LOGFONTA lfStatusFont;
 LOGFONTA lfMessageFont;
} NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, *LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW {
 UINT cbSize;
 INT iBorderWidth;
 INT iScrollWidth;
 INT iScrollHeight;
 INT iCaptionWidth;
 INT iCaptionHeight;
 LOGFONTW lfCaptionFont;
 INT iSmCaptionWidth;
 INT iSmCaptionHeight;
 LOGFONTW lfSmCaptionFont;
 INT iMenuWidth;
 INT iMenuHeight;
 LOGFONTW lfMenuFont;
 LOGFONTW lfStatusFont;
 LOGFONTW lfMessageFont;
} NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, *LPNONCLIENTMETRICSW;
typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
typedef struct tagICONMETRICSA {
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTA lfFont;
} ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW {
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTW lfFont;
} ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;
typedef ICONMETRICSA ICONMETRICS;
typedef PICONMETRICSA PICONMETRICS;
typedef LPICONMETRICSA LPICONMETRICS;
typedef struct tagUPDATELAYEREDWINDOWINFO
{
    DWORD cbSize;
    HDC hdcDst;
    POINT const* pptDst;
    SIZE const* psize;
    HDC hdcSrc;
    POINT const* pptSrc;
    COLORREF crKey;
    BLENDFUNCTION const* pblend;
    DWORD dwFlags;
    RECT const* prcDirty;
} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO;
typedef struct tagMINIMIZEDMETRICS {
    UINT cbSize;
    int iWidth;
    int iHorzGap;
    int iVertGap;
    int iArrange;
} MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;
typedef struct {
    UINT cbSize;
    HWND hwnd;
    DWORD dwFlags;
    UINT uCount;
    DWORD dwTimeout;
} FLASHWINFO, *PFLASHWINFO;
typedef struct tagDRAWITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemAction;
    UINT itemState;
    HWND hwndItem;
    HDC hDC;
    RECT rcItem;
    ULONG_PTR itemData;
} DRAWITEMSTRUCT, *PDRAWITEMSTRUCT, *LPDRAWITEMSTRUCT;
typedef struct tagMEASUREITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemWidth;
    UINT itemHeight;
    ULONG_PTR itemData;
} MEASUREITEMSTRUCT, *PMEASUREITEMSTRUCT, *LPMEASUREITEMSTRUCT;
typedef struct tagDELETEITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    HWND hwndItem;
    ULONG_PTR itemData;
} DELETEITEMSTRUCT, *PDELETEITEMSTRUCT, *LPDELETEITEMSTRUCT;
typedef struct tagCOMPAREITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    HWND hwndItem;
    UINT itemID1;
    ULONG_PTR itemData1;
    UINT itemID2;
    ULONG_PTR itemData2;
    DWORD dwLocaleId;
} COMPAREITEMSTRUCT, *PCOMPAREITEMSTRUCT, *LPCOMPAREITEMSTRUCT;
typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND hwndTrack;
    DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;
typedef PVOID HDEVNOTIFY;
typedef HDEVNOTIFY *PHDEVNOTIFY;
typedef struct tagWINDOWINFO {
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;
typedef struct tagTITLEBARINFO {
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 +1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;
typedef struct tagLASTINPUTINFO {
    UINT cbSize;
    DWORD dwTime;
} LASTINPUTINFO, *PLASTINPUTINFO;
typedef struct
{
    DWORD cbSize;
    INT cItems;
    INT cColumns;
    INT cRows;
    INT iColFocus;
    INT iRowFocus;
    INT cxItem;
    INT cyItem;
    POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) ChangeDisplaySettingsA(LPDEVMODEA,DWORD);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) ChangeDisplaySettingsW(LPDEVMODEW,DWORD);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) ChangeDisplaySettingsExA(LPCSTR,LPDEVMODEA,HWND,DWORD,LPVOID);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) ChangeDisplaySettingsExW(LPCWSTR,LPDEVMODEW,HWND,DWORD,LPVOID);
__attribute__((dllimport)) HDESK __attribute__((__stdcall__)) CreateDesktopA(LPCSTR,LPCSTR,LPDEVMODEA,DWORD,ACCESS_MASK,LPSECURITY_ATTRIBUTES);
__attribute__((dllimport)) HDESK __attribute__((__stdcall__)) CreateDesktopW(LPCWSTR,LPCWSTR,LPDEVMODEW,DWORD,ACCESS_MASK,LPSECURITY_ATTRIBUTES);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumDisplayDevicesA(LPCSTR,DWORD,LPDISPLAY_DEVICEA,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumDisplayDevicesW(LPCWSTR,DWORD,LPDISPLAY_DEVICEW,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumDisplaySettingsA(LPCSTR,DWORD,LPDEVMODEA);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumDisplaySettingsW(LPCWSTR,DWORD,LPDEVMODEW);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumDisplaySettingsExA(LPCSTR,DWORD,LPDEVMODEA,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumDisplaySettingsExW(LPCWSTR,DWORD,LPDEVMODEW,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UpdateLayeredWindow(HWND,HDC,POINT*,SIZE*,HDC,POINT*,COLORREF,BLENDFUNCTION*,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UpdateLayeredWindowIndirect(HWND,UPDATELAYEREDWINDOWINFO const*);
__attribute__((dllimport)) HKL __attribute__((__stdcall__)) ActivateKeyboardLayout(HKL,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AdjustWindowRect(LPRECT,DWORD,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AdjustWindowRectEx(LPRECT,DWORD,BOOL,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AllowSetForegroundWindow(DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AnimateWindow(HWND,DWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AnyPopup(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AppendMenuA(HMENU,UINT,UINT_PTR,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AppendMenuW(HMENU,UINT,UINT_PTR,LPCWSTR);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) ArrangeIconicWindows(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AttachThreadInput(DWORD,DWORD,BOOL);
__attribute__((dllimport)) HDWP __attribute__((__stdcall__)) BeginDeferWindowPos(INT);
__attribute__((dllimport)) HDC __attribute__((__stdcall__)) BeginPaint(HWND,LPPAINTSTRUCT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) BringWindowToTop(HWND);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) BroadcastSystemMessageA(DWORD,LPDWORD,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) BroadcastSystemMessageW(DWORD,LPDWORD,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) BroadcastSystemMessageExA(DWORD,LPDWORD,UINT,WPARAM,LPARAM,PBSMINFO);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) BroadcastSystemMessageExW(DWORD,LPDWORD,UINT,WPARAM,LPARAM,PBSMINFO);
__attribute__((dllimport)) void __attribute__((__stdcall__)) CalcChildScroll(HWND, INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CallMsgFilterA(LPMSG,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CallMsgFilterW(LPMSG,INT);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) CallNextHookEx(HHOOK,INT,WPARAM,LPARAM);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) CallWindowProcA(WNDPROC,HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) CallWindowProcW(WNDPROC,HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) WORD __attribute__((__stdcall__)) CascadeWindows(HWND, UINT, const RECT *, UINT, const HWND *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ChangeClipboardChain(HWND,HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ChangeMenuA(HMENU,UINT,LPCSTR,UINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ChangeMenuW(HMENU,UINT,LPCWSTR,UINT,UINT);
__attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) CharLowerA(LPSTR);
__attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) CharLowerW(LPWSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) CharLowerBuffA(LPSTR,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) CharLowerBuffW(LPWSTR,DWORD);
__attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) CharNextA(LPCSTR);
__attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) CharNextW(LPCWSTR);
__attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) CharNextExA(WORD,LPCSTR,DWORD);
__attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) CharPrevA(LPCSTR,LPCSTR);
__attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) CharPrevW(LPCWSTR,LPCWSTR);
__attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) CharPrevExA(WORD,LPCSTR,LPCSTR,DWORD);
__attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) CharUpperA(LPSTR);
__attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) CharUpperW(LPWSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) CharUpperBuffA(LPSTR,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) CharUpperBuffW(LPWSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CharToOemA(LPCSTR,LPSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CharToOemW(LPCWSTR,LPSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CharToOemBuffA(LPCSTR,LPSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CharToOemBuffW(LPCWSTR,LPSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CheckDlgButton(HWND,INT,UINT);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) CheckMenuItem(HMENU,UINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CheckMenuRadioItem(HMENU,UINT,UINT,UINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CheckRadioButton(HWND,int,int,int);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) ChildWindowFromPoint(HWND,POINT);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) ChildWindowFromPointEx(HWND,POINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ClientToScreen(HWND,LPPOINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ClipCursor(const RECT*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CloseClipboard(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CloseDesktop(HDESK);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CloseWindow(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CloseWindowStation(HWINSTA);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) CopyAcceleratorTableA(HACCEL,LPACCEL,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) CopyAcceleratorTableW(HACCEL,LPACCEL,INT);
__attribute__((dllimport)) HICON __attribute__((__stdcall__)) CopyIcon(HICON);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CopyImage(HANDLE,UINT,INT,INT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CopyRect(RECT*,const RECT*);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) CountClipboardFormats(void);
__attribute__((dllimport)) HACCEL __attribute__((__stdcall__)) CreateAcceleratorTableA(LPACCEL,INT);
__attribute__((dllimport)) HACCEL __attribute__((__stdcall__)) CreateAcceleratorTableW(LPACCEL,INT);
__attribute__((dllimport)) HICON __attribute__((__stdcall__)) CreateIconIndirect(PICONINFO);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CreateCaret(HWND,HBITMAP,INT,INT);
__attribute__((dllimport)) HCURSOR __attribute__((__stdcall__)) CreateCursor(HINSTANCE,INT,INT,INT,INT,LPCVOID,LPCVOID);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) CreateDialogIndirectParamA(HINSTANCE,LPCDLGTEMPLATEA,HWND,DLGPROC,LPARAM);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) CreateDialogIndirectParamW(HINSTANCE,LPCDLGTEMPLATEW,HWND,DLGPROC,LPARAM);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) CreateDialogParamA(HINSTANCE,LPCSTR,HWND,DLGPROC,LPARAM);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) CreateDialogParamW(HINSTANCE,LPCWSTR,HWND,DLGPROC,LPARAM);
__attribute__((dllimport)) HICON __attribute__((__stdcall__)) CreateIcon(HINSTANCE,INT,INT,BYTE,BYTE,LPCVOID,LPCVOID);
__attribute__((dllimport)) HICON __attribute__((__stdcall__)) CreateIconFromResource(LPBYTE,UINT,BOOL,DWORD);
__attribute__((dllimport)) HICON __attribute__((__stdcall__)) CreateIconFromResourceEx(LPBYTE,UINT,BOOL,DWORD,INT,INT,UINT);
__attribute__((dllimport)) HMENU __attribute__((__stdcall__)) CreateMenu(void);
__attribute__((dllimport)) HMENU __attribute__((__stdcall__)) CreatePopupMenu(void);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) CreateWindowExA(DWORD,LPCSTR,LPCSTR,DWORD,INT,INT,INT,INT,HWND,HMENU,HINSTANCE,LPVOID);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) CreateWindowExW(DWORD,LPCWSTR,LPCWSTR,DWORD,INT,INT,INT,INT,HWND,HMENU,HINSTANCE,LPVOID);
__attribute__((dllimport)) HWINSTA __attribute__((__stdcall__)) CreateWindowStationA(LPCSTR,DWORD,ACCESS_MASK,LPSECURITY_ATTRIBUTES);
__attribute__((dllimport)) HWINSTA __attribute__((__stdcall__)) CreateWindowStationW(LPCWSTR,DWORD,ACCESS_MASK,LPSECURITY_ATTRIBUTES);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) CreateMDIWindowA(LPCSTR,LPCSTR,DWORD,INT,INT,INT,INT,HWND,HINSTANCE,LPARAM);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) CreateMDIWindowW(LPCWSTR,LPCWSTR,DWORD,INT,INT,INT,INT,HWND,HINSTANCE,LPARAM);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefDlgProcA(HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefDlgProcW(HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) HDWP __attribute__((__stdcall__)) DeferWindowPos(HDWP,HWND,HWND,INT,INT,INT,INT,UINT);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefFrameProcA(HWND,HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefFrameProcW(HWND,HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefMDIChildProcA(HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefMDIChildProcW(HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefRawInputProc(PRAWINPUT*,INT,UINT);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefWindowProcA(HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefWindowProcW(HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeleteMenu(HMENU,UINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DestroyAcceleratorTable(HACCEL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DestroyCaret(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DestroyCursor(HCURSOR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DestroyIcon(HICON);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DestroyMenu(HMENU);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DestroyWindow(HWND);
__attribute__((dllimport)) INT_PTR __attribute__((__stdcall__)) DialogBoxIndirectParamA(HINSTANCE,LPCDLGTEMPLATEA,HWND,DLGPROC,LPARAM);
__attribute__((dllimport)) INT_PTR __attribute__((__stdcall__)) DialogBoxIndirectParamW(HINSTANCE,LPCDLGTEMPLATEW,HWND,DLGPROC,LPARAM);
__attribute__((dllimport)) INT_PTR __attribute__((__stdcall__)) DialogBoxParamA(HINSTANCE,LPCSTR,HWND,DLGPROC,LPARAM);
__attribute__((dllimport)) INT_PTR __attribute__((__stdcall__)) DialogBoxParamW(HINSTANCE,LPCWSTR,HWND,DLGPROC,LPARAM);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DispatchMessageA(const MSG*);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DispatchMessageW(const MSG*);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) DlgDirListA(HWND,LPSTR,INT,INT,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) DlgDirListW(HWND,LPWSTR,INT,INT,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) DlgDirListComboBoxA(HWND,LPSTR,INT,INT,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) DlgDirListComboBoxW(HWND,LPWSTR,INT,INT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DlgDirSelectComboBoxExA(HWND,LPSTR,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DlgDirSelectComboBoxExW(HWND,LPWSTR,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DlgDirSelectExA(HWND,LPSTR,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DlgDirSelectExW(HWND,LPWSTR,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DragDetect(HWND,POINT);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) DragObject(HWND,HWND,UINT,ULONG_PTR,HCURSOR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DrawAnimatedRects(HWND,int,const RECT*,const RECT*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DrawCaption(HWND,HDC,const RECT*,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DrawCaptionTempA(HWND,HDC,const RECT*,HFONT,HICON,LPCSTR,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DrawCaptionTempW(HWND,HDC,const RECT*,HFONT,HICON,LPCWSTR,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DrawEdge(HDC,LPRECT,UINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DrawFocusRect(HDC,const RECT*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DrawFrameControl(HDC,LPRECT,UINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DrawIcon(HDC,INT,INT,HICON);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DrawIconEx(HDC,INT,INT,HICON,INT,INT,UINT,HBRUSH,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DrawMenuBar(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DrawStateA(HDC,HBRUSH,DRAWSTATEPROC,LPARAM,WPARAM,INT,INT,INT,INT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DrawStateW(HDC,HBRUSH,DRAWSTATEPROC,LPARAM,WPARAM,INT,INT,INT,INT,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) DrawTextA(HDC,LPCSTR,INT,LPRECT,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) DrawTextW(HDC,LPCWSTR,INT,LPRECT,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) DrawTextExA(HDC,LPSTR,INT,LPRECT,UINT,LPDRAWTEXTPARAMS);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) DrawTextExW(HDC,LPWSTR,INT,LPRECT,UINT,LPDRAWTEXTPARAMS);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EmptyClipboard(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnableMenuItem(HMENU,UINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnableScrollBar(HWND,UINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnableWindow(HWND,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EndDeferWindowPos(HDWP);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EndDialog(HWND,INT_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EndMenu(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EndPaint(HWND,const PAINTSTRUCT*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumChildWindows(HWND,WNDENUMPROC,LPARAM);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) EnumClipboardFormats(UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumDesktopsA(HWINSTA,DESKTOPENUMPROCA,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumDesktopsW(HWINSTA,DESKTOPENUMPROCW,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumDesktopWindows(HDESK,WNDENUMPROC,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumDisplayMonitors(HDC,LPRECT,MONITORENUMPROC,LPARAM);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) EnumPropsA(HWND,PROPENUMPROCA);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) EnumPropsW(HWND,PROPENUMPROCW);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) EnumPropsExA(HWND,PROPENUMPROCEXA,LPARAM);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) EnumPropsExW(HWND,PROPENUMPROCEXW,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumThreadWindows(DWORD,WNDENUMPROC,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumWindows(WNDENUMPROC,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumWindowStationsA(WINSTAENUMPROCA,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumWindowStationsW(WINSTAENUMPROCW,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EqualRect(const RECT*,const RECT*);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) ExcludeUpdateRgn(HDC,HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ExitWindowsEx(UINT,DWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) FillRect(HDC,const RECT*,HBRUSH);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) FindWindowA(LPCSTR,LPCSTR);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) FindWindowW(LPCWSTR,LPCWSTR);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) FindWindowExA(HWND,HWND,LPCSTR,LPCSTR);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) FindWindowExW(HWND,HWND,LPCWSTR,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FlashWindow(HWND,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FlashWindowEx(PFLASHWINFO);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) FrameRect(HDC,const RECT*,HBRUSH);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetActiveWindow(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetAltTabInfoA(HWND,INT,PALTTABINFO,LPSTR,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetAltTabInfoW(HWND,INT,PALTTABINFO,LPWSTR,UINT);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetAncestor(HWND,UINT);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetAppCompatFlags(HTASK);
__attribute__((dllimport)) SHORT __attribute__((__stdcall__)) GetAsyncKeyState(INT);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetCapture(void);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetCaretBlinkTime(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCaretPos(LPPOINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetClassInfoA(HINSTANCE,LPCSTR,WNDCLASSA *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetClassInfoW(HINSTANCE,LPCWSTR,WNDCLASSW *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetClassInfoExA(HINSTANCE,LPCSTR,WNDCLASSEXA *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetClassInfoExW(HINSTANCE,LPCWSTR,WNDCLASSEXW *);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetClassLongA(HWND,INT);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetClassLongW(HWND,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetClassNameA(HWND,LPSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetClassNameW(HWND,LPWSTR,INT);
__attribute__((dllimport)) WORD __attribute__((__stdcall__)) GetClassWord(HWND,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetClientRect(HWND,LPRECT);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) GetClipboardData(UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetClipboardFormatNameA(UINT,LPSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetClipboardFormatNameW(UINT,LPWSTR,INT);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetClipboardOwner(void);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetClipboardSequenceNumber(void);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetClipboardViewer(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetClipCursor(LPRECT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetComboBoxInfo(HWND,PCOMBOBOXINFO);
__attribute__((dllimport)) HCURSOR __attribute__((__stdcall__)) GetCursor(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCursorInfo(PCURSORINFO);
__attribute__((dllimport)) HCURSOR __attribute__((__stdcall__)) GetCursorFrameInfo(HCURSOR,DWORD,DWORD,DWORD*,DWORD*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCursorPos(LPPOINT);
__attribute__((dllimport)) HDC __attribute__((__stdcall__)) GetDC(HWND);
__attribute__((dllimport)) HDC __attribute__((__stdcall__)) GetDCEx(HWND,HRGN,DWORD);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetDesktopWindow(void);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetDialogBaseUnits(void);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetDlgCtrlID(HWND);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetDlgItem(HWND,INT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetDlgItemInt(HWND,INT,BOOL*,BOOL);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetDlgItemTextA(HWND,INT,LPSTR,INT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetDlgItemTextW(HWND,INT,LPWSTR,INT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetDoubleClickTime(void);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetFocus(void);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetForegroundWindow(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetGUIThreadInfo(DWORD,GUITHREADINFO*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetIconInfo(HICON,PICONINFO);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetIconInfoExA(HICON,ICONINFOEXA*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetIconInfoExW(HICON,ICONINFOEXW*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetInputState(void);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetInternalWindowPos(HWND,LPRECT,LPPOINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetKBCodePage(void);
__attribute__((dllimport)) HKL __attribute__((__stdcall__)) GetKeyboardLayout(DWORD);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetKeyboardLayoutList(INT,HKL *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetKeyboardState(LPBYTE);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetKeyboardType(INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetKeyNameTextA(LONG,LPSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetKeyNameTextW(LONG,LPWSTR,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetKeyboardLayoutNameA(LPSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetKeyboardLayoutNameW(LPWSTR);
__attribute__((dllimport)) SHORT __attribute__((__stdcall__)) GetKeyState(INT);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetLastActivePopup(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetLastInputInfo(PLASTINPUTINFO);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetRawInputBuffer(PRAWINPUT,PUINT,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetRawInputData(HRAWINPUT,UINT,LPVOID,PUINT,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetRawInputDeviceInfoA(HANDLE,UINT,LPVOID,PUINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetRawInputDeviceInfoW(HANDLE,UINT,LPVOID,PUINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetRawInputDeviceList(PRAWINPUTDEVICELIST,PUINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetLayeredWindowAttributes(HWND,COLORREF*,BYTE*,DWORD*);
__attribute__((dllimport)) HMENU __attribute__((__stdcall__)) GetMenu(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetMenuBarInfo(HWND,LONG,LONG,PMENUBARINFO);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetMenuCheckMarkDimensions(void);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetMenuContextHelpId(HMENU);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetMenuDefaultItem(HMENU,UINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetMenuInfo(HMENU,LPMENUINFO);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetMenuItemCount(HMENU);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetMenuItemID(HMENU,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetMenuItemInfoA(HMENU,UINT,BOOL,MENUITEMINFOA*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetMenuItemInfoW(HMENU,UINT,BOOL,MENUITEMINFOW*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetMenuItemRect(HWND,HMENU,UINT,LPRECT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetMenuState(HMENU,UINT,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetMenuStringA(HMENU,UINT,LPSTR,INT,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetMenuStringW(HMENU,UINT,LPWSTR,INT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetMessageA(LPMSG,HWND,UINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetMessageW(LPMSG,HWND,UINT,UINT);
__attribute__((dllimport)) LPARAM __attribute__((__stdcall__)) GetMessageExtraInfo(void);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetMessagePos(void);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) GetMessageTime(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetMonitorInfoA(HMONITOR,LPMONITORINFO);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetMonitorInfoW(HMONITOR,LPMONITORINFO);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetNextDlgGroupItem(HWND,HWND,BOOL);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetNextDlgTabItem(HWND,HWND,BOOL);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetOpenClipboardWindow(void);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetParent(HWND);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetPriorityClipboardFormat(UINT*,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetProcessDefaultLayout(DWORD*);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) GetPropA(HWND,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) GetPropW(HWND,LPCWSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetQueueStatus(UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetScrollInfo(HWND,INT,LPSCROLLINFO);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetScrollBarInfo(HWND,LONG,LPSCROLLBARINFO);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetScrollPos(HWND,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetScrollRange(HWND,INT,LPINT,LPINT);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetShellWindow(void);
__attribute__((dllimport)) HMENU __attribute__((__stdcall__)) GetSubMenu(HMENU,INT);
__attribute__((dllimport)) HBRUSH __attribute__((__stdcall__)) GetSysColorBrush(INT);
__attribute__((dllimport)) HMENU __attribute__((__stdcall__)) GetSystemMenu(HWND,BOOL);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetSystemMetrics(INT);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTabbedTextExtentA(HDC,LPCSTR,INT,INT,const INT*);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTabbedTextExtentW(HDC,LPCWSTR,INT,INT,const INT*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetTitleBarInfo(HWND,PTITLEBARINFO);
__attribute__((dllimport)) HDESK __attribute__((__stdcall__)) GetThreadDesktop(DWORD);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetTopWindow(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetUpdateRect(HWND,LPRECT,BOOL);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetUpdateRgn(HWND,HRGN,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetUserObjectInformationA(HANDLE,INT,LPVOID,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetUserObjectInformationW(HANDLE,INT,LPVOID,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetUserObjectSecurity(HANDLE,PSECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,LPDWORD);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetWindow(HWND,UINT);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetWindowContextHelpId(HWND);
__attribute__((dllimport)) HDC __attribute__((__stdcall__)) GetWindowDC(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetWindowInfo(HWND, PWINDOWINFO);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) GetWindowLongA(HWND,INT);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) GetWindowLongW(HWND,INT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetWindowModuleFileNameA(HWND,LPSTR,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetWindowModuleFileNameW(HWND,LPWSTR,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetWindowPlacement(HWND,LPWINDOWPLACEMENT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetWindowRect(HWND,LPRECT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetWindowRgn(HWND,HRGN);
__attribute__((dllimport)) HWINSTA __attribute__((__stdcall__)) GetProcessWindowStation(void);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetWindowTextA(HWND,LPSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetWindowTextW(HWND,LPWSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetWindowTextLengthA(HWND);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetWindowTextLengthW(HWND);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetWindowThreadProcessId(HWND,LPDWORD);
__attribute__((dllimport)) WORD __attribute__((__stdcall__)) GetWindowWord(HWND,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GrayStringA(HDC,HBRUSH,GRAYSTRINGPROC,LPARAM,INT,INT,INT,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GrayStringW(HDC,HBRUSH,GRAYSTRINGPROC,LPARAM,INT,INT,INT,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) HideCaret(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) HiliteMenuItem(HWND,HMENU,UINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InflateRect(LPRECT,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InSendMessage(void);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) InSendMessageEx(LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InsertMenuA(HMENU,UINT,UINT,UINT_PTR,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InsertMenuW(HMENU,UINT,UINT,UINT_PTR,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InsertMenuItemA(HMENU,UINT,BOOL,const MENUITEMINFOA*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InsertMenuItemW(HMENU,UINT,BOOL,const MENUITEMINFOW*);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) InternalGetWindowText(HWND,LPWSTR,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IntersectRect(LPRECT,const RECT*,const RECT*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InvalidateRect(HWND,const RECT*,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InvalidateRgn(HWND,HRGN,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InvertRect(HDC,const RECT*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsCharAlphaA(CHAR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsCharAlphaW(WCHAR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsCharAlphaNumericA(CHAR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsCharAlphaNumericW(WCHAR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsCharLowerA(CHAR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsCharLowerW(WCHAR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsCharUpperA(CHAR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsCharUpperW(WCHAR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsChild(HWND,HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsClipboardFormatAvailable(UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsDialogMessageA(HWND,LPMSG);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsDialogMessageW(HWND,LPMSG);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) IsDlgButtonChecked(HWND,int);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsGUIThread(BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsHungAppWindow(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsIconic(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsMenu(HMENU);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsRectEmpty(const RECT*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsWinEventHookInstalled(DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsWindow(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsWindowEnabled(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsWindowUnicode(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsWindowVisible(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsZoomed(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) KillSystemTimer(HWND,UINT_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) KillTimer(HWND,UINT_PTR);
__attribute__((dllimport)) HACCEL __attribute__((__stdcall__)) LoadAcceleratorsA(HINSTANCE,LPCSTR);
__attribute__((dllimport)) HACCEL __attribute__((__stdcall__)) LoadAcceleratorsW(HINSTANCE,LPCWSTR);
__attribute__((dllimport)) HBITMAP __attribute__((__stdcall__)) LoadBitmapA(HINSTANCE,LPCSTR);
__attribute__((dllimport)) HBITMAP __attribute__((__stdcall__)) LoadBitmapW(HINSTANCE,LPCWSTR);
__attribute__((dllimport)) HCURSOR __attribute__((__stdcall__)) LoadCursorA(HINSTANCE,LPCSTR);
__attribute__((dllimport)) HCURSOR __attribute__((__stdcall__)) LoadCursorW(HINSTANCE,LPCWSTR);
__attribute__((dllimport)) HCURSOR __attribute__((__stdcall__)) LoadCursorFromFileA(LPCSTR);
__attribute__((dllimport)) HCURSOR __attribute__((__stdcall__)) LoadCursorFromFileW(LPCWSTR);
__attribute__((dllimport)) HICON __attribute__((__stdcall__)) LoadIconA(HINSTANCE,LPCSTR);
__attribute__((dllimport)) HICON __attribute__((__stdcall__)) LoadIconW(HINSTANCE,LPCWSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) LoadImageA(HINSTANCE,LPCSTR,UINT,INT,INT,UINT);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) LoadImageW(HINSTANCE,LPCWSTR,UINT,INT,INT,UINT);
__attribute__((dllimport)) HKL __attribute__((__stdcall__)) LoadKeyboardLayoutA(LPCSTR,UINT);
__attribute__((dllimport)) HKL __attribute__((__stdcall__)) LoadKeyboardLayoutW(LPCWSTR,UINT);
__attribute__((dllimport)) HMENU __attribute__((__stdcall__)) LoadMenuA(HINSTANCE,LPCSTR);
__attribute__((dllimport)) HMENU __attribute__((__stdcall__)) LoadMenuW(HINSTANCE,LPCWSTR);
__attribute__((dllimport)) HMENU __attribute__((__stdcall__)) LoadMenuIndirectA(LPCVOID);
__attribute__((dllimport)) HMENU __attribute__((__stdcall__)) LoadMenuIndirectW(LPCVOID);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) LoadStringA(HINSTANCE,UINT,LPSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) LoadStringW(HINSTANCE,UINT,LPWSTR,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LockSetForegroundWindow(UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) LockWindowUpdate(HWND);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) LookupIconIdFromDirectory(LPBYTE,BOOL);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) LookupIconIdFromDirectoryEx(LPBYTE,BOOL,INT,INT,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) MapVirtualKeyA(UINT,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) MapVirtualKeyW(UINT,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) MapVirtualKeyExA(UINT,UINT,HKL);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) MapVirtualKeyExW(UINT,UINT,HKL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) MapDialogRect(HWND,LPRECT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) MapWindowPoints(HWND,HWND,LPPOINT,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) MenuItemFromPoint(HWND,HMENU,POINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) MessageBeep(UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) MessageBoxA(HWND,LPCSTR,LPCSTR,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) MessageBoxW(HWND,LPCWSTR,LPCWSTR,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) MessageBoxExA(HWND,LPCSTR,LPCSTR,UINT,WORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) MessageBoxExW(HWND,LPCWSTR,LPCWSTR,UINT,WORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) MessageBoxIndirectA(LPMSGBOXPARAMSA);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) MessageBoxIndirectW(LPMSGBOXPARAMSW);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ModifyMenuA(HMENU,UINT,UINT,UINT_PTR,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ModifyMenuW(HMENU,UINT,UINT,UINT_PTR,LPCWSTR);
__attribute__((dllimport)) HMONITOR __attribute__((__stdcall__)) MonitorFromPoint(POINT,DWORD);
__attribute__((dllimport)) HMONITOR __attribute__((__stdcall__)) MonitorFromRect(LPRECT,DWORD);
__attribute__((dllimport)) HMONITOR __attribute__((__stdcall__)) MonitorFromWindow(HWND,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) MoveWindow(HWND,INT,INT,INT,INT,BOOL);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) MsgWaitForMultipleObjects(DWORD,const HANDLE*,BOOL,DWORD,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) MsgWaitForMultipleObjectsEx(DWORD,const HANDLE*,DWORD,DWORD,DWORD);
__attribute__((dllimport)) void __attribute__((__stdcall__)) NotifyWinEvent(DWORD,HWND,LONG,LONG);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) OemKeyScan(WORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) OemToCharA(LPCSTR,LPSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) OemToCharW(LPCSTR,LPWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) OemToCharBuffA(LPCSTR,LPSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) OemToCharBuffW(LPCSTR,LPWSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) OffsetRect(LPRECT,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) OpenClipboard(HWND);
__attribute__((dllimport)) HDESK __attribute__((__stdcall__)) OpenDesktopA(LPCSTR,DWORD,BOOL,ACCESS_MASK);
__attribute__((dllimport)) HDESK __attribute__((__stdcall__)) OpenDesktopW(LPCWSTR,DWORD,BOOL,ACCESS_MASK);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) OpenIcon(HWND);
__attribute__((dllimport)) HDESK __attribute__((__stdcall__)) OpenInputDesktop(DWORD,BOOL,ACCESS_MASK);
__attribute__((dllimport)) HWINSTA __attribute__((__stdcall__)) OpenWindowStationA(LPCSTR,BOOL,ACCESS_MASK);
__attribute__((dllimport)) HWINSTA __attribute__((__stdcall__)) OpenWindowStationW(LPCWSTR,BOOL,ACCESS_MASK);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PaintDesktop(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PeekMessageA(LPMSG,HWND,UINT,UINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PeekMessageW(LPMSG,HWND,UINT,UINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PostMessageA(HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PostMessageW(HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) void __attribute__((__stdcall__)) PostQuitMessage(INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PostThreadMessageA(DWORD,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PostThreadMessageW(DWORD,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) PrivateExtractIconExA(LPCSTR,int,HICON*,HICON*,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) PrivateExtractIconExW(LPCWSTR,int,HICON*,HICON*,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) PrivateExtractIconsA(LPCSTR,int,int,int,HICON*,UINT*,UINT,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) PrivateExtractIconsW(LPCWSTR,int,int,int,HICON*,UINT*,UINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PtInRect(const RECT*,POINT);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) RealChildWindowFromPoint(HWND,POINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) RealGetWindowClassA(HWND,LPSTR,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) RealGetWindowClassW(HWND,LPWSTR,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RedrawWindow(HWND,const RECT*,HRGN,UINT);
__attribute__((dllimport)) ATOM __attribute__((__stdcall__)) RegisterClassA(const WNDCLASSA *);
__attribute__((dllimport)) ATOM __attribute__((__stdcall__)) RegisterClassW(const WNDCLASSW *);
__attribute__((dllimport)) ATOM __attribute__((__stdcall__)) RegisterClassExA(const WNDCLASSEXA *);
__attribute__((dllimport)) ATOM __attribute__((__stdcall__)) RegisterClassExW(const WNDCLASSEXW *);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) RegisterClipboardFormatA(LPCSTR);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) RegisterClipboardFormatW(LPCWSTR);
__attribute__((dllimport)) HDEVNOTIFY __attribute__((__stdcall__)) RegisterDeviceNotificationA(HANDLE,LPVOID,DWORD);
__attribute__((dllimport)) HDEVNOTIFY __attribute__((__stdcall__)) RegisterDeviceNotificationW(HANDLE,LPVOID,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RegisterHotKey(HWND,INT,UINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RegisterRawInputDevices(PRAWINPUTDEVICE,UINT,UINT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) RegisterWindowMessageA(LPCSTR);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) RegisterWindowMessageW(LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReleaseCapture(void);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) ReleaseDC(HWND,HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) RemoveMenu(HMENU,UINT,UINT);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) RemovePropA(HWND,LPCSTR);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) RemovePropW(HWND,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReplyMessage(LRESULT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ScreenToClient(HWND,LPPOINT);
__attribute__((dllimport)) void __attribute__((__stdcall__)) ScrollChildren(HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ScrollDC(HDC,INT,INT,const RECT*,const RECT*,HRGN,LPRECT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ScrollWindow(HWND,INT,INT,const RECT*,const RECT*);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) ScrollWindowEx(HWND,INT,INT,const RECT*,const RECT*,HRGN,LPRECT,UINT);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) SendDlgItemMessageA(HWND,INT,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) SendDlgItemMessageW(HWND,INT,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) SendInput(UINT,LPINPUT,int);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) SendMessageA(HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) SendMessageW(HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SendMessageCallbackA(HWND,UINT,WPARAM,LPARAM,SENDASYNCPROC,ULONG_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SendMessageCallbackW(HWND,UINT,WPARAM,LPARAM,SENDASYNCPROC,ULONG_PTR);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) SendMessageTimeoutA(HWND,UINT,WPARAM,LPARAM,UINT,UINT,PDWORD_PTR);
__attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) SendMessageTimeoutW(HWND,UINT,WPARAM,LPARAM,UINT,UINT,PDWORD_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SendNotifyMessageA(HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SendNotifyMessageW(HWND,UINT,WPARAM,LPARAM);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) SetActiveWindow(HWND);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) SetCapture(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetCaretBlinkTime(UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetCaretPos(INT,INT);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetClassLongA(HWND,INT,LONG);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetClassLongW(HWND,INT,LONG);
__attribute__((dllimport)) WORD __attribute__((__stdcall__)) SetClassWord(HWND,INT,WORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) SetClipboardData(UINT,HANDLE);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) SetClipboardViewer(HWND);
__attribute__((dllimport)) HCURSOR __attribute__((__stdcall__)) SetCursor(HCURSOR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetCursorPos(INT,INT);
__attribute__((dllimport)) void __attribute__((__stdcall__)) SetDebugErrorLevel(DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetDeskWallPaper(LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetDlgItemInt(HWND,INT,UINT,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetDlgItemTextA(HWND,INT,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetDlgItemTextW(HWND,INT,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetDoubleClickTime(UINT);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) SetFocus(HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetForegroundWindow(HWND);
__attribute__((dllimport)) void __attribute__((__stdcall__)) SetInternalWindowPos(HWND,UINT,LPRECT,LPPOINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetKeyboardState(LPBYTE);
__attribute__((dllimport)) void __attribute__((__stdcall__)) SetLastErrorEx(DWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetLayeredWindowAttributes(HWND,COLORREF,BYTE,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetMenu(HWND,HMENU);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetMenuContextHelpId(HMENU,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetMenuDefaultItem(HMENU,UINT,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetMenuInfo(HMENU,LPCMENUINFO);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetMenuItemBitmaps(HMENU,UINT,UINT,HBITMAP,HBITMAP);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetMenuItemInfoA(HMENU,UINT,BOOL,const MENUITEMINFOA*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetMenuItemInfoW(HMENU,UINT,BOOL,const MENUITEMINFOW*);
__attribute__((dllimport)) LPARAM __attribute__((__stdcall__)) SetMessageExtraInfo(LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetMessageQueue(INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetProcessDefaultLayout(DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetProcessWindowStation(HWINSTA);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) SetParent(HWND,HWND);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetPropA(HWND,LPCSTR,HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetPropW(HWND,LPCWSTR,HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetRect(LPRECT,INT,INT,INT,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetRectEmpty(LPRECT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetScrollInfo(HWND,INT,const SCROLLINFO*,BOOL);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetScrollPos(HWND,INT,INT,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetScrollRange(HWND,INT,INT,INT,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetSystemCursor(HCURSOR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetSystemMenu(HWND,HMENU);
__attribute__((dllimport)) UINT_PTR __attribute__((__stdcall__)) SetSystemTimer(HWND,UINT_PTR,UINT,TIMERPROC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetThreadDesktop(HDESK);
__attribute__((dllimport)) UINT_PTR __attribute__((__stdcall__)) SetTimer(HWND,UINT_PTR,UINT,TIMERPROC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetUserObjectInformationA(HANDLE,INT,LPVOID,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetUserObjectInformationW(HANDLE,INT,LPVOID,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetUserObjectSecurity(HANDLE,PSECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetWindowContextHelpId(HWND,DWORD);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) SetWindowLongA(HWND,INT,LONG);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) SetWindowLongW(HWND,INT,LONG);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetWindowPlacement(HWND,const WINDOWPLACEMENT*);
__attribute__((dllimport)) HHOOK __attribute__((__stdcall__)) SetWindowsHookA(INT,HOOKPROC);
__attribute__((dllimport)) HHOOK __attribute__((__stdcall__)) SetWindowsHookW(INT,HOOKPROC);
__attribute__((dllimport)) HHOOK __attribute__((__stdcall__)) SetWindowsHookExA(INT,HOOKPROC,HINSTANCE,DWORD);
__attribute__((dllimport)) HHOOK __attribute__((__stdcall__)) SetWindowsHookExW(INT,HOOKPROC,HINSTANCE,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetWindowPos(HWND,HWND,INT,INT,INT,INT,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetWindowRgn(HWND,HRGN,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetWindowTextA(HWND,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetWindowTextW(HWND,LPCWSTR);
__attribute__((dllimport)) WORD __attribute__((__stdcall__)) SetWindowWord(HWND,INT,WORD);
__attribute__((dllimport)) HWINEVENTHOOK __attribute__((__stdcall__)) SetWinEventHook(DWORD,DWORD,HMODULE,WINEVENTPROC,DWORD,DWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ShowCaret(HWND);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) ShowCursor(BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ShowScrollBar(HWND,INT,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ShowOwnedPopups(HWND,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ShowWindow(HWND,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ShowWindowAsync(HWND,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SubtractRect(LPRECT,const RECT*,const RECT*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SwapMouseButton(BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SwitchDesktop(HDESK);
__attribute__((dllimport)) void __attribute__((__stdcall__)) SwitchToThisWindow(HWND,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SystemParametersInfoA(UINT,UINT,LPVOID,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SystemParametersInfoW(UINT,UINT,LPVOID,UINT);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) TabbedTextOutA(HDC,INT,INT,LPCSTR,INT,INT,const INT*,INT);
__attribute__((dllimport)) LONG __attribute__((__stdcall__)) TabbedTextOutW(HDC,INT,INT,LPCWSTR,INT,INT,const INT*,INT);
__attribute__((dllimport)) WORD __attribute__((__stdcall__)) TileWindows (HWND,UINT,const RECT *,UINT,const HWND *);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) ToAscii(UINT,UINT,const BYTE *,LPWORD,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) ToAsciiEx(UINT,UINT,const BYTE *,LPWORD,UINT,HKL);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) ToUnicode(UINT,UINT,const BYTE *,LPWSTR,int,UINT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) ToUnicodeEx(UINT,UINT,const BYTE *,LPWSTR,int,UINT,HKL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TrackMouseEvent(LPTRACKMOUSEEVENT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TrackPopupMenu(HMENU,UINT,INT,INT,INT,HWND,const RECT*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TrackPopupMenuEx(HMENU,UINT,INT,INT,HWND,LPTPMPARAMS);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) TranslateAcceleratorA(HWND,HACCEL,LPMSG);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) TranslateAcceleratorW(HWND,HACCEL,LPMSG);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TranslateMDISysAccel(HWND,LPMSG);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) TranslateMessage(const MSG*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnhookWinEvent(HWINEVENTHOOK);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnhookWindowsHook(INT,HOOKPROC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnhookWindowsHookEx(HHOOK);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnloadKeyboardLayout(HKL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnionRect(LPRECT,const RECT*,const RECT*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnregisterClassA(LPCSTR,HINSTANCE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnregisterClassW(LPCWSTR,HINSTANCE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnregisterDeviceNotification(HDEVNOTIFY);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnregisterHotKey(HWND,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UpdateWindow(HWND);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) UserRealizePalette(HDC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ValidateRect(HWND,const RECT*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ValidateRgn(HWND,HRGN);
__attribute__((dllimport)) SHORT __attribute__((__stdcall__)) VkKeyScanA(CHAR);
__attribute__((dllimport)) SHORT __attribute__((__stdcall__)) VkKeyScanW(WCHAR);
__attribute__((dllimport)) WORD __attribute__((__stdcall__)) VkKeyScanExA(CHAR, HKL);
__attribute__((dllimport)) WORD __attribute__((__stdcall__)) VkKeyScanExW(WCHAR, HKL);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) WaitForInputIdle(HANDLE,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WaitMessage(void);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) WindowFromDC(HDC);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) WindowFromPoint(POINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WinHelpA(HWND,LPCSTR,UINT,ULONG_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WinHelpW(HWND,LPCWSTR,UINT,ULONG_PTR);
__attribute__((dllimport)) void __attribute__((__stdcall__)) keybd_event(BYTE,BYTE,DWORD,ULONG_PTR);
__attribute__((dllimport)) void __attribute__((__stdcall__)) mouse_event(DWORD,DWORD,DWORD,DWORD,ULONG_PTR);
__attribute__((dllimport)) INT __attribute__((__cdecl__)) wsprintfA(LPSTR,LPCSTR,...);
__attribute__((dllimport)) INT __attribute__((__cdecl__)) wsprintfW(LPWSTR,LPCWSTR,...);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) wvsprintfA(LPSTR,LPCSTR,va_list);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) wvsprintfW(LPWSTR,LPCWSTR,va_list);
WORD __attribute__((__stdcall__)) SYSTEM_KillSystemTimer( WORD );
typedef enum _NORM_FORM {
    NormalizationOther = 0,
    NormalizationC = 0x1,
    NormalizationD = 0x2,
    NormalizationKC = 0x5,
    NormalizationKD = 0x6
} NORM_FORM;
typedef DWORD CALID;
typedef DWORD CALTYPE;
typedef LONG GEOID;
typedef DWORD GEOCLASS;
typedef DWORD GEOTYPE;
typedef DWORD LCTYPE;
typedef DWORD LGRPID;
typedef struct
{
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
} CPINFO, *LPCPINFO;
typedef struct
{
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    CHAR CodePageName[260];
} CPINFOEXA, *LPCPINFOEXA;
typedef struct
{
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    WCHAR CodePageName[260];
} CPINFOEXW, *LPCPINFOEXW;
typedef CPINFOEXA CPINFOEX;
typedef LPCPINFOEXA LPCPINFOEX;
typedef struct _numberfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTW, *LPNUMBERFMTW;
typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;
typedef struct _currencyfmtA
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPSTR lpCurrencySymbol;
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPWSTR lpCurrencySymbol;
} CURRENCYFMTW, *LPCURRENCYFMTW;
typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;
typedef BOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCEXA)(LPSTR,CALID);
typedef BOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCEXW)(LPWSTR,CALID);
typedef BOOL (__attribute__((__stdcall__)) *CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__attribute__((__stdcall__)) *CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCEXA)(LPSTR,CALID);
typedef BOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCEXW)(LPWSTR,CALID);
typedef BOOL (__attribute__((__stdcall__)) *GEO_ENUMPROC)(GEOID);
typedef BOOL (__attribute__((__stdcall__)) *LANGGROUPLOCALE_ENUMPROCA)(LGRPID,LCID,LPSTR,LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *LANGGROUPLOCALE_ENUMPROCW)(LGRPID,LCID,LPWSTR,LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *LANGUAGEGROUP_ENUMPROCA)(LGRPID,LPSTR,LPSTR,DWORD,LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *LANGUAGEGROUP_ENUMPROCW)(LGRPID,LPWSTR,LPWSTR,DWORD,LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__attribute__((__stdcall__)) *LOCALE_ENUMPROCW)(LPWSTR);
typedef BOOL (__attribute__((__stdcall__)) *LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM);
typedef BOOL (__attribute__((__stdcall__)) *TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__attribute__((__stdcall__)) *TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__attribute__((__stdcall__)) *UILANGUAGE_ENUMPROCA)(LPSTR,LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *UILANGUAGE_ENUMPROCW)(LPWSTR,LONG_PTR);
typedef CALINFO_ENUMPROCA CALINFO_ENUMPROC;
typedef CALINFO_ENUMPROCEXA CALINFO_ENUMPROCEX;
typedef CODEPAGE_ENUMPROCA CODEPAGE_ENUMPROC;
typedef DATEFMT_ENUMPROCA DATEFMT_ENUMPROC;
typedef DATEFMT_ENUMPROCEXA DATEFMT_ENUMPROCEX;
typedef LANGGROUPLOCALE_ENUMPROCA LANGGROUPLOCALE_ENUMPROC;
typedef LANGUAGEGROUP_ENUMPROCA LANGUAGEGROUP_ENUMPROC;
typedef LOCALE_ENUMPROCA LOCALE_ENUMPROC;
typedef TIMEFMT_ENUMPROCA TIMEFMT_ENUMPROC;
typedef UILANGUAGE_ENUMPROCA UILANGUAGE_ENUMPROC;
enum SYSGEOTYPE
{
    GEO_NATION = 1,
    GEO_LATITUDE,
    GEO_LONGITUDE,
    GEO_ISO2,
    GEO_ISO3,
    GEO_RFC1766,
    GEO_LCID,
    GEO_FRIENDLYNAME,
    GEO_OFFICIALNAME,
    GEO_TIMEZONES,
    GEO_OFFICIALLANGUAGES
};
enum SYSGEOCLASS
{
    GEOCLASS_REGION = 14,
    GEOCLASS_NATION = 16
};
__attribute__((dllimport)) INT __attribute__((__stdcall__)) CompareStringA(LCID,DWORD,LPCSTR,INT,LPCSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) CompareStringW(LCID,DWORD,LPCWSTR,INT,LPCWSTR,INT);
__attribute__((dllimport)) LCID __attribute__((__stdcall__)) ConvertDefaultLocale(LCID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumCalendarInfoA(CALINFO_ENUMPROCA,LCID,CALID,CALTYPE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumCalendarInfoW(CALINFO_ENUMPROCW,LCID,CALID,CALTYPE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumCalendarInfoExA(CALINFO_ENUMPROCEXA,LCID,CALID,CALTYPE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumCalendarInfoExW(CALINFO_ENUMPROCEXW,LCID,CALID,CALTYPE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumDateFormatsA(DATEFMT_ENUMPROCA,LCID,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumDateFormatsW(DATEFMT_ENUMPROCW,LCID,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumDateFormatsExA(DATEFMT_ENUMPROCEXA,LCID,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumDateFormatsExW(DATEFMT_ENUMPROCEXW,LCID,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumSystemCodePagesA(CODEPAGE_ENUMPROCA,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumSystemCodePagesW(CODEPAGE_ENUMPROCW,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumSystemGeoID(GEOCLASS,GEOID,GEO_ENUMPROC);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumSystemLocalesA(LOCALE_ENUMPROCA,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumSystemLocalesW(LOCALE_ENUMPROCW,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumSystemLocalesEx(LOCALE_ENUMPROCEX,DWORD,LPARAM,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumSystemLanguageGroupsA(LANGUAGEGROUP_ENUMPROCA,DWORD,LONG_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumSystemLanguageGroupsW(LANGUAGEGROUP_ENUMPROCW,DWORD,LONG_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumLanguageGroupLocalesA(LANGGROUPLOCALE_ENUMPROCA,LGRPID,DWORD,LONG_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumLanguageGroupLocalesW(LANGGROUPLOCALE_ENUMPROCW,LGRPID,DWORD,LONG_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumTimeFormatsA(TIMEFMT_ENUMPROCA,LCID,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumTimeFormatsW(TIMEFMT_ENUMPROCW,LCID,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumUILanguagesA(UILANGUAGE_ENUMPROCA,DWORD,LONG_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumUILanguagesW(UILANGUAGE_ENUMPROCW,DWORD,LONG_PTR);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) FoldStringA(DWORD,LPCSTR,INT,LPSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) FoldStringW(DWORD,LPCWSTR,INT,LPWSTR,INT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetACP(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCPInfo(UINT,LPCPINFO);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCPInfoExA(UINT,DWORD,LPCPINFOEXA);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCPInfoExW(UINT,DWORD,LPCPINFOEXW);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetCalendarInfoA(LCID,DWORD,DWORD,LPSTR,INT,LPDWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetCalendarInfoW(LCID,DWORD,DWORD,LPWSTR,INT,LPDWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetCurrencyFormatA(LCID,DWORD,LPCSTR,const CURRENCYFMTA*,LPSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetCurrencyFormatW(LCID,DWORD,LPCWSTR,const CURRENCYFMTW*,LPWSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetDateFormatA(LCID,DWORD,const SYSTEMTIME*,LPCSTR,LPSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetDateFormatW(LCID,DWORD,const SYSTEMTIME*,LPCWSTR,LPWSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetGeoInfoA(GEOID,GEOTYPE,LPSTR,INT,LANGID);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetGeoInfoW(GEOID,GEOTYPE,LPWSTR,INT,LANGID);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetLocaleInfoA(LCID,LCTYPE,LPSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetLocaleInfoW(LCID,LCTYPE,LPWSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetNumberFormatA(LCID,DWORD,LPCSTR,const NUMBERFMTA*,LPSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetNumberFormatW(LCID,DWORD,LPCWSTR,const NUMBERFMTW*,LPWSTR,INT);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetOEMCP(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetStringTypeA(LCID,DWORD,LPCSTR,INT,LPWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetStringTypeW(DWORD,LPCWSTR,INT,LPWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetStringTypeExA(LCID,DWORD,LPCSTR,INT,LPWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetStringTypeExW(LCID,DWORD,LPCWSTR,INT,LPWORD);
__attribute__((dllimport)) LANGID __attribute__((__stdcall__)) GetSystemDefaultLangID(void);
__attribute__((dllimport)) LCID __attribute__((__stdcall__)) GetSystemDefaultLCID(void);
__attribute__((dllimport)) LANGID __attribute__((__stdcall__)) GetSystemDefaultUILanguage(void);
__attribute__((dllimport)) LCID __attribute__((__stdcall__)) GetThreadLocale(void);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetTimeFormatA(LCID,DWORD,const SYSTEMTIME*,LPCSTR,LPSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetTimeFormatW(LCID,DWORD,const SYSTEMTIME*,LPCWSTR,LPWSTR,INT);
__attribute__((dllimport)) LANGID __attribute__((__stdcall__)) GetUserDefaultLangID(void);
__attribute__((dllimport)) LCID __attribute__((__stdcall__)) GetUserDefaultLCID(void);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) GetUserDefaultLocaleName(LPWSTR,int);
__attribute__((dllimport)) LANGID __attribute__((__stdcall__)) GetUserDefaultUILanguage(void);
__attribute__((dllimport)) GEOID __attribute__((__stdcall__)) GetUserGeoID(GEOCLASS);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) IdnToAscii(DWORD,LPCWSTR,INT,LPWSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) IdnToNameprepUnicode(DWORD,LPCWSTR,INT,LPWSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) IdnToUnicode(DWORD,LPCWSTR,INT,LPWSTR,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsDBCSLeadByte(BYTE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsDBCSLeadByteEx(UINT,BYTE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsNormalizedString(NORM_FORM,LPCWSTR,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsValidCodePage(UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsValidLocale(LCID,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) IsValidLanguageGroup(LGRPID,DWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) LCIDToLocaleName(LCID,LPWSTR,INT,DWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) LCMapStringA(LCID,DWORD,LPCSTR,INT,LPSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) LCMapStringW(LCID,DWORD,LPCWSTR,INT,LPWSTR,INT);
__attribute__((dllimport)) LCID __attribute__((__stdcall__)) LocaleNameToLCID(LPCWSTR,DWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) MultiByteToWideChar(UINT,DWORD,LPCSTR,INT,LPWSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) NormalizeString(NORM_FORM,LPCWSTR,INT,LPWSTR,INT);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetCalendarInfoA(LCID,CALID,CALTYPE,LPCSTR);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) SetCalendarInfoW(LCID,CALID,CALTYPE,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetLocaleInfoA(LCID,LCTYPE,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetLocaleInfoW(LCID,LCTYPE,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetThreadLocale(LCID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetUserGeoID(GEOID);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) WideCharToMultiByte(UINT,DWORD,LPCWSTR,INT,LPSTR,INT,LPCSTR,LPBOOL);
typedef BOOL (__attribute__((__stdcall__)) *PHANDLER_ROUTINE)(DWORD dwCtrlType);
typedef struct _CONSOLE_CURSOR_INFO {
    DWORD dwSize;
    BOOL bVisible;
} CONSOLE_CURSOR_INFO, *LPCONSOLE_CURSOR_INFO;
typedef struct tagCOORD
{
    SHORT X;
    SHORT Y;
} COORD, *LPCOORD;
typedef struct tagSMALL_RECT
{
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT,*LPSMALL_RECT;
typedef struct _CONSOLE_FONT_INFO
{
    DWORD nFont;
    COORD dwFontSize;
} CONSOLE_FONT_INFO,*LPCONSOLE_FONT_INFO;
typedef struct _CONSOLE_FONT_INFOEX
{
    ULONG cbSize;
    DWORD nFont;
    COORD dwFontSize;
    UINT FontFamily;
    UINT FontWeight;
    WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX,*LPCONSOLE_FONT_INFOEX;
typedef struct tagCONSOLE_HISTORY_INFO
{
    UINT cbSize;
    UINT HistoryBufferSize;
    UINT NumberOfHistoryBuffers;
    DWORD dwFlags;
} CONSOLE_HISTORY_INFO,*LPCONSOLE_HISTORY_INFO;
typedef struct _CONSOLE_READCONSOLE_CONTROL
{
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwConsoleKeyState;
} CONSOLE_READCONSOLE_CONTROL,*LPCONSOLE_READCONSOLE_CONTROL;
typedef struct tagCONSOLE_SCREEN_BUFFER_INFO
{
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO,*LPCONSOLE_SCREEN_BUFFER_INFO;
typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX
{
    ULONG cbSize;
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
    WORD wPopupAttributes;
    BOOL bFullscreenSupported;
    COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX,*LPCONSOLE_SCREEN_BUFFER_INFOEX;
typedef struct _CONSOLE_SELECTION_INFO
{
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
} CONSOLE_SELECTION_INFO,*LPCONSOLE_SELECTION_INFO;
typedef struct tagCHAR_INFO
{
    union
 {
 WCHAR UnicodeChar;
 CHAR AsciiChar;
 } Char;
    WORD Attributes;
} CHAR_INFO,*LPCHAR_INFO;
typedef struct tagKEY_EVENT_RECORD
{
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union
 {
 WCHAR UnicodeChar;
 CHAR AsciiChar;
 } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD,*LPKEY_EVENT_RECORD;
typedef struct tagMOUSE_EVENT_RECORD
{
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD,*LPMOUSE_EVENT_RECORD;
typedef struct tagWINDOW_BUFFER_SIZE_RECORD
{
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD,*LPWINDOW_BUFFER_SIZE_RECORD;
typedef struct tagMENU_EVENT_RECORD
{
    UINT dwCommandId;
} MENU_EVENT_RECORD,*LPMENU_EVENT_RECORD;
typedef struct tagFOCUS_EVENT_RECORD
{
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD,*LPFOCUS_EVENT_RECORD;
typedef struct tagINPUT_RECORD
{
    WORD EventType;
    union
 {
 KEY_EVENT_RECORD KeyEvent;
 MOUSE_EVENT_RECORD MouseEvent;
 WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
 MENU_EVENT_RECORD MenuEvent;
 FOCUS_EVENT_RECORD FocusEvent;
 } Event;
} INPUT_RECORD,*PINPUT_RECORD;
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetLargestConsoleWindowSize(HANDLE);
static inline COORD __wine_GetLargestConsoleWindowSize_wrapper(HANDLE h)
{
    union {
      COORD c;
      DWORD dw;
    } u;
    u.dw = GetLargestConsoleWindowSize(h);
    return u.c;
}
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AddConsoleAliasA(LPSTR,LPSTR,LPSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AddConsoleAliasW(LPWSTR,LPWSTR,LPWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AllocConsole(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AttachConsole(DWORD);
__attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateConsoleScreenBuffer( DWORD,DWORD,LPSECURITY_ATTRIBUTES,DWORD,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FillConsoleOutputAttribute( HANDLE,WORD,DWORD,COORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FillConsoleOutputCharacterA(HANDLE,CHAR,DWORD,COORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FillConsoleOutputCharacterW(HANDLE,WCHAR,DWORD,COORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FlushConsoleInputBuffer( HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FreeConsole(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GenerateConsoleCtrlEvent( DWORD,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasA(LPSTR,LPSTR,DWORD,LPSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasW(LPWSTR,LPWSTR,DWORD,LPWSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasesA(LPSTR,DWORD,LPSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasesW(LPWSTR,DWORD,LPWSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasesLengthA(LPSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasesLengthW(LPWSTR);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasExesA(LPSTR,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasExesW(LPWSTR,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasExesLengthA(void);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasExesLengthW(void);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetConsoleCP(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetConsoleCursorInfo( HANDLE,LPCONSOLE_CURSOR_INFO);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetConsoleDisplayMode(LPDWORD);
__attribute__((dllimport)) COORD __attribute__((__stdcall__)) GetConsoleFontSize(HANDLE,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetConsoleHistoryInfo(LPCONSOLE_HISTORY_INFO);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetConsoleInputExeNameA(DWORD,LPSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetConsoleInputExeNameW(DWORD,LPWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetConsoleMode( HANDLE,LPDWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleOriginalTitleA(LPSTR,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleOriginalTitleW(LPWSTR,DWORD);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetConsoleOutputCP(void);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleProcessList(LPDWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetConsoleScreenBufferInfo(HANDLE,LPCONSOLE_SCREEN_BUFFER_INFO);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetConsoleScreenBufferInfoEx(HANDLE,LPCONSOLE_SCREEN_BUFFER_INFOEX);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleTitleA(LPSTR,DWORD);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleTitleW(LPWSTR,DWORD);
__attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetConsoleWindow(void);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCurrentConsoleFont(HANDLE,BOOL,LPCONSOLE_FONT_INFO);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetCurrentConsoleFontEx(HANDLE,BOOL,LPCONSOLE_FONT_INFOEX);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetNumberOfConsoleInputEvents( HANDLE,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetNumberOfConsoleMouseButtons(LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PeekConsoleInputA( HANDLE,PINPUT_RECORD,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) PeekConsoleInputW( HANDLE,PINPUT_RECORD,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReadConsoleA(HANDLE,LPVOID,DWORD,LPDWORD,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReadConsoleW(HANDLE,LPVOID,DWORD,LPDWORD,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReadConsoleInputA(HANDLE,PINPUT_RECORD,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReadConsoleInputW(HANDLE,PINPUT_RECORD,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReadConsoleOutputA( HANDLE,LPCHAR_INFO,COORD,COORD,LPSMALL_RECT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReadConsoleOutputW( HANDLE,LPCHAR_INFO,COORD,COORD,LPSMALL_RECT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReadConsoleOutputAttribute( HANDLE,LPWORD,DWORD,COORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReadConsoleOutputCharacterA(HANDLE,LPSTR,DWORD,COORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ReadConsoleOutputCharacterW(HANDLE,LPWSTR,DWORD,COORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ScrollConsoleScreenBufferA( HANDLE,LPSMALL_RECT,LPSMALL_RECT,COORD,LPCHAR_INFO);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ScrollConsoleScreenBufferW( HANDLE,LPSMALL_RECT,LPSMALL_RECT,COORD,LPCHAR_INFO);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetConsoleActiveScreenBuffer( HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetConsoleCP(UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetConsoleCtrlHandler( PHANDLER_ROUTINE,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetConsoleCursorInfo( HANDLE,LPCONSOLE_CURSOR_INFO);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetConsoleCursorPosition(HANDLE,COORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetConsoleDisplayMode(HANDLE,DWORD,LPCOORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetConsoleHistoryInfo(LPCONSOLE_HISTORY_INFO);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetConsoleMode( HANDLE,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetConsoleOutputCP(UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetConsoleScreenBufferInfoEx(HANDLE,LPCONSOLE_SCREEN_BUFFER_INFOEX);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetConsoleScreenBufferSize(HANDLE,COORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetConsoleTextAttribute( HANDLE,WORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetConsoleTitleA(LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetConsoleTitleW(LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetConsoleWindowInfo( HANDLE,BOOL,LPSMALL_RECT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetCurrentConsoleFontEx(HANDLE,BOOL,LPCONSOLE_FONT_INFOEX);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteConsoleA(HANDLE,const void *,DWORD,LPDWORD,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteConsoleW(HANDLE,const void *,DWORD,LPDWORD,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteConsoleInputA(HANDLE,const INPUT_RECORD *,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteConsoleInputW(HANDLE,const INPUT_RECORD *,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteConsoleOutputA(HANDLE,const CHAR_INFO*,COORD,COORD,LPSMALL_RECT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteConsoleOutputW(HANDLE,const CHAR_INFO*,COORD,COORD,LPSMALL_RECT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteConsoleOutputAttribute(HANDLE,const WORD *,DWORD,COORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteConsoleOutputCharacterA(HANDLE,LPCSTR,DWORD,COORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) WriteConsoleOutputCharacterW(HANDLE,LPCWSTR,DWORD,COORD,LPDWORD);
typedef struct tagVS_FIXEDFILEINFO {
 DWORD dwSignature;
 DWORD dwStrucVersion;
 DWORD dwFileVersionMS;
 DWORD dwFileVersionLS;
 DWORD dwProductVersionMS;
 DWORD dwProductVersionLS;
 DWORD dwFileFlagsMask;
 DWORD dwFileFlags;
 DWORD dwFileOS;
 DWORD dwFileType;
 DWORD dwFileSubtype;
 DWORD dwFileDateMS;
 DWORD dwFileDateLS;
} VS_FIXEDFILEINFO;
DWORD __attribute__((__stdcall__)) VerFindFileA(DWORD,LPCSTR,LPCSTR,LPCSTR,LPSTR,PUINT,LPSTR,PUINT);
DWORD __attribute__((__stdcall__)) VerFindFileW(DWORD,LPCWSTR,LPCWSTR,LPCWSTR,LPWSTR,PUINT,LPWSTR,PUINT);
DWORD __attribute__((__stdcall__)) VerInstallFileA(DWORD,LPCSTR,LPCSTR,LPCSTR,LPCSTR,LPCSTR,LPSTR,PUINT);
DWORD __attribute__((__stdcall__)) VerInstallFileW(DWORD,LPCWSTR,LPCWSTR,LPCWSTR,LPCWSTR,LPCWSTR,LPWSTR,PUINT);
DWORD __attribute__((__stdcall__)) VerLanguageNameA(DWORD,LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) VerLanguageNameW(DWORD,LPWSTR,DWORD);
BOOL __attribute__((__stdcall__)) VerQueryValueA(LPCVOID,LPCSTR,LPVOID*,PUINT);
BOOL __attribute__((__stdcall__)) VerQueryValueW(LPCVOID,LPCWSTR,LPVOID*,PUINT);
DWORD __attribute__((__stdcall__)) GetFileVersionInfoSizeA(LPCSTR,LPDWORD);
DWORD __attribute__((__stdcall__)) GetFileVersionInfoSizeW(LPCWSTR,LPDWORD);
BOOL __attribute__((__stdcall__)) GetFileVersionInfoA(LPCSTR,DWORD,DWORD,LPVOID);
BOOL __attribute__((__stdcall__)) GetFileVersionInfoW(LPCWSTR,DWORD,DWORD,LPVOID);
typedef struct value_entA
{ LPSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
} VALENTA, *PVALENTA;
typedef struct value_entW {
    LPWSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
} VALENTW, *PVALENTW;
typedef ACCESS_MASK REGSAM;
typedef LONG LSTATUS;
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AbortSystemShutdownA(LPSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) AbortSystemShutdownW(LPWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InitiateSystemShutdownA(LPSTR,LPSTR,DWORD,BOOL,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InitiateSystemShutdownW(LPWSTR,LPWSTR,DWORD,BOOL,BOOL);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InitiateSystemShutdownExA(LPSTR,LPSTR,DWORD,BOOL,BOOL,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) InitiateSystemShutdownExW(LPWSTR,LPWSTR,DWORD,BOOL,BOOL,DWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegCloseKey(HKEY);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegConnectRegistryA(LPCSTR,HKEY,PHKEY);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegConnectRegistryW(LPCWSTR,HKEY,PHKEY);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegCreateKeyA(HKEY,LPCSTR,PHKEY);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegCreateKeyW(HKEY,LPCWSTR,PHKEY);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegCreateKeyExA(HKEY,LPCSTR,DWORD,LPSTR,DWORD,REGSAM,LPSECURITY_ATTRIBUTES,PHKEY,LPDWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegCreateKeyExW(HKEY,LPCWSTR,DWORD,LPWSTR,DWORD,REGSAM,LPSECURITY_ATTRIBUTES,PHKEY,LPDWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegDeleteKeyA(HKEY,LPCSTR);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegDeleteKeyW(HKEY,LPCWSTR);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegDeleteKeyExA(HKEY,LPCSTR,REGSAM,DWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegDeleteKeyExW(HKEY,LPCWSTR,REGSAM,DWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegDeleteKeyValueA(HKEY,LPCSTR,LPCSTR);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegDeleteKeyValueW(HKEY,LPCWSTR,LPCWSTR);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegDeleteTreeA(HKEY,LPCSTR);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegDeleteTreeW(HKEY,LPCWSTR);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegDeleteValueA(HKEY,LPCSTR);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegDeleteValueW(HKEY,LPCWSTR);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegDisablePredefinedCache(void);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegEnumKeyA(HKEY,DWORD,LPSTR,DWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegEnumKeyW(HKEY,DWORD,LPWSTR,DWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegEnumKeyExA(HKEY,DWORD,LPSTR,LPDWORD,LPDWORD,LPSTR,LPDWORD,LPFILETIME);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegEnumKeyExW(HKEY,DWORD,LPWSTR,LPDWORD,LPDWORD,LPWSTR,LPDWORD,LPFILETIME);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegEnumValueA(HKEY,DWORD,LPSTR,LPDWORD,LPDWORD,LPDWORD,LPBYTE,LPDWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegEnumValueW(HKEY,DWORD,LPWSTR,LPDWORD,LPDWORD,LPDWORD,LPBYTE,LPDWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegFlushKey(HKEY);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegGetKeySecurity(HKEY,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,LPDWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegGetValueA(HKEY,LPCSTR,LPCSTR,DWORD,LPDWORD,PVOID,LPDWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegGetValueW(HKEY,LPCWSTR,LPCWSTR,DWORD,LPDWORD,PVOID,LPDWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegLoadKeyA(HKEY,LPCSTR,LPCSTR);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegLoadKeyW(HKEY,LPCWSTR,LPCWSTR);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegLoadMUIStringA(HKEY,LPCSTR,LPSTR,DWORD,LPDWORD,DWORD,LPCSTR);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegLoadMUIStringW(HKEY,LPCWSTR,LPWSTR,DWORD,LPDWORD,DWORD,LPCWSTR);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegNotifyChangeKeyValue(HKEY,BOOL,DWORD,HANDLE,BOOL);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegOpenCurrentUser(REGSAM,PHKEY);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegOpenKeyA(HKEY,LPCSTR,PHKEY);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegOpenKeyW(HKEY,LPCWSTR,PHKEY);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegOpenKeyExW(HKEY,LPCWSTR,DWORD,REGSAM,PHKEY);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegOpenKeyExA(HKEY,LPCSTR,DWORD,REGSAM,PHKEY);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegOpenUserClassesRoot(HANDLE,DWORD,REGSAM,PHKEY);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegOverridePredefKey(HKEY,HKEY);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegQueryInfoKeyW(HKEY,LPWSTR,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPFILETIME);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegQueryInfoKeyA(HKEY,LPSTR,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPFILETIME);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegQueryMultipleValuesA(HKEY,PVALENTA,DWORD,LPSTR,LPDWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegQueryMultipleValuesW(HKEY,PVALENTW,DWORD,LPWSTR,LPDWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegQueryValueA(HKEY,LPCSTR,LPSTR,LPLONG);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegQueryValueW(HKEY,LPCWSTR,LPWSTR,LPLONG);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegQueryValueExA(HKEY,LPCSTR,LPDWORD,LPDWORD,LPBYTE,LPDWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegQueryValueExW(HKEY,LPCWSTR,LPDWORD,LPDWORD,LPBYTE,LPDWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegReplaceKeyA(HKEY,LPCSTR,LPCSTR,LPCSTR);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegReplaceKeyW(HKEY,LPCWSTR,LPCWSTR,LPCWSTR);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegRestoreKeyA(HKEY,LPCSTR,DWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegRestoreKeyW(HKEY,LPCWSTR,DWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegSaveKeyA(HKEY,LPCSTR,LPSECURITY_ATTRIBUTES);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegSaveKeyW(HKEY,LPCWSTR,LPSECURITY_ATTRIBUTES);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegSetKeySecurity(HKEY,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegSetValueA(HKEY,LPCSTR,DWORD,LPCSTR,DWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegSetValueW(HKEY,LPCWSTR,DWORD,LPCWSTR,DWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegSetValueExA(HKEY,LPCSTR,DWORD,DWORD,const BYTE*,DWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegSetValueExW(HKEY,LPCWSTR,DWORD,DWORD,const BYTE*,DWORD);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegUnLoadKeyA(HKEY,LPCSTR);
__attribute__((dllimport)) LSTATUS __attribute__((__stdcall__)) RegUnLoadKeyW(HKEY,LPCWSTR);
typedef struct {
 DWORD dwScope;
 DWORD dwType;
 DWORD dwDisplayType;
 DWORD dwUsage;
 LPSTR lpLocalName;
 LPSTR lpRemoteName;
 LPSTR lpComment ;
 LPSTR lpProvider;
} NETRESOURCEA,*LPNETRESOURCEA;
typedef struct {
 DWORD dwScope;
 DWORD dwType;
 DWORD dwDisplayType;
 DWORD dwUsage;
 LPWSTR lpLocalName;
 LPWSTR lpRemoteName;
 LPWSTR lpComment ;
 LPWSTR lpProvider;
} NETRESOURCEW,*LPNETRESOURCEW;
typedef NETRESOURCEA NETRESOURCE;
typedef LPNETRESOURCEA LPNETRESOURCE;
DWORD __attribute__((__stdcall__)) WNetAddConnectionA(LPCSTR,LPCSTR,LPCSTR);
DWORD __attribute__((__stdcall__)) WNetAddConnectionW(LPCWSTR,LPCWSTR,LPCWSTR);
DWORD __attribute__((__stdcall__)) WNetAddConnection2A(LPNETRESOURCEA,LPCSTR,LPCSTR,DWORD);
DWORD __attribute__((__stdcall__)) WNetAddConnection2W(LPNETRESOURCEW,LPCWSTR,LPCWSTR,DWORD);
DWORD __attribute__((__stdcall__)) WNetAddConnection3A(HWND,LPNETRESOURCEA,LPCSTR,LPCSTR,DWORD);
DWORD __attribute__((__stdcall__)) WNetAddConnection3W(HWND,LPNETRESOURCEW,LPCWSTR,LPCWSTR,DWORD);
DWORD __attribute__((__stdcall__)) WNetCancelConnectionA(LPCSTR,BOOL);
DWORD __attribute__((__stdcall__)) WNetCancelConnectionW(LPCWSTR,BOOL);
DWORD __attribute__((__stdcall__)) WNetCancelConnection2A(LPCSTR,DWORD,BOOL);
DWORD __attribute__((__stdcall__)) WNetCancelConnection2W(LPCWSTR,DWORD,BOOL);
DWORD __attribute__((__stdcall__)) WNetGetConnectionA(LPCSTR,LPSTR,LPDWORD);
DWORD __attribute__((__stdcall__)) WNetGetConnectionW(LPCWSTR,LPWSTR,LPDWORD);
DWORD __attribute__((__stdcall__)) WNetGetLastErrorA(LPDWORD,LPSTR,DWORD,LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) WNetGetLastErrorW(LPDWORD,LPWSTR,DWORD,LPWSTR,DWORD);
DWORD __attribute__((__stdcall__)) WNetRestoreConnectionA(HWND,LPCSTR);
DWORD __attribute__((__stdcall__)) WNetRestoreConnectionW(HWND,LPCWSTR);
DWORD __attribute__((__stdcall__)) WNetUseConnectionA(HWND,LPNETRESOURCEA,LPCSTR,LPCSTR,DWORD,LPSTR,LPDWORD,LPDWORD);
DWORD __attribute__((__stdcall__)) WNetUseConnectionW(HWND,LPNETRESOURCEW,LPCWSTR,LPCWSTR,DWORD,LPWSTR,LPDWORD,LPDWORD);
DWORD __attribute__((__stdcall__)) WNetSetConnectionA(LPCSTR,DWORD,LPVOID);
DWORD __attribute__((__stdcall__)) WNetSetConnectionW(LPCWSTR,DWORD,LPVOID);
typedef struct {
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
} CONNECTDLGSTRUCTA, *LPCONNECTDLGSTRUCTA;
typedef struct {
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
} CONNECTDLGSTRUCTW, *LPCONNECTDLGSTRUCTW;
typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
typedef struct {
    DWORD cbStructure;
    HWND hwndOwner;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    DWORD dwFlags;
} DISCDLGSTRUCTA, *LPDISCDLGSTRUCTA;
typedef struct {
    DWORD cbStructure;
    HWND hwndOwner;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    DWORD dwFlags;
} DISCDLGSTRUCTW, *LPDISCDLGSTRUCTW;
typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
DWORD __attribute__((__stdcall__)) WNetConnectionDialog(HWND,DWORD);
DWORD __attribute__((__stdcall__)) WNetDisconnectDialog(HWND,DWORD);
DWORD __attribute__((__stdcall__)) WNetConnectionDialog1A(LPCONNECTDLGSTRUCTA);
DWORD __attribute__((__stdcall__)) WNetConnectionDialog1W(LPCONNECTDLGSTRUCTW);
DWORD __attribute__((__stdcall__)) WNetDisconnectDialog1A(LPDISCDLGSTRUCTA);
DWORD __attribute__((__stdcall__)) WNetDisconnectDialog1W(LPDISCDLGSTRUCTW);
DWORD __attribute__((__stdcall__)) WNetOpenEnumA(DWORD,DWORD,DWORD,LPNETRESOURCEA,LPHANDLE);
DWORD __attribute__((__stdcall__)) WNetOpenEnumW(DWORD,DWORD,DWORD,LPNETRESOURCEW,LPHANDLE);
DWORD __attribute__((__stdcall__)) WNetEnumResourceA(HANDLE,LPDWORD,LPVOID,LPDWORD);
DWORD __attribute__((__stdcall__)) WNetEnumResourceW(HANDLE,LPDWORD,LPVOID,LPDWORD);
DWORD __attribute__((__stdcall__)) WNetGetResourceInformationA(LPNETRESOURCEA,LPVOID,LPDWORD,LPSTR*);
DWORD __attribute__((__stdcall__)) WNetGetResourceInformationW(LPNETRESOURCEW,LPVOID,LPDWORD,LPWSTR*);
DWORD __attribute__((__stdcall__)) WNetGetResourceParentA(LPNETRESOURCEA,LPVOID,LPDWORD);
DWORD __attribute__((__stdcall__)) WNetGetResourceParentW(LPNETRESOURCEW,LPVOID,LPDWORD);
DWORD __attribute__((__stdcall__)) WNetCloseEnum(HANDLE);
typedef struct {
    LPSTR lpUniversalName;
} UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct {
    LPWSTR lpUniversalName;
} UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;
typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
typedef struct {
    LPSTR lpUniversalName;
    LPSTR lpConnectionName;
    LPSTR lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct {
    LPWSTR lpUniversalName;
    LPWSTR lpConnectionName;
    LPWSTR lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;
typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
DWORD __attribute__((__stdcall__)) WNetGetUniversalNameA(LPCSTR,DWORD,LPVOID,LPDWORD);
DWORD __attribute__((__stdcall__)) WNetGetUniversalNameW(LPCWSTR,DWORD,LPVOID,LPDWORD);
DWORD __attribute__((__stdcall__)) WNetGetUserA(LPCSTR,LPSTR,LPDWORD);
DWORD __attribute__((__stdcall__)) WNetGetUserW(LPCWSTR,LPWSTR,LPDWORD);
DWORD __attribute__((__stdcall__)) WNetGetProviderNameA(DWORD,LPSTR,LPDWORD);
DWORD __attribute__((__stdcall__)) WNetGetProviderNameW(DWORD,LPWSTR,LPDWORD);
typedef struct {
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    DWORD dwHandle;
    WORD wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT, *LPNETINFOSTRUCT;
DWORD __attribute__((__stdcall__)) WNetGetNetworkInformationA(LPCSTR,LPNETINFOSTRUCT);
DWORD __attribute__((__stdcall__)) WNetGetNetworkInformationW(LPCWSTR,LPNETINFOSTRUCT);
typedef struct {
 DWORD cbStructure;
 DWORD dwFlags;
 DWORD dwSpeed;
 DWORD dwDelay;
 DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT,*LPNETCONNECTINFOSTRUCT;
DWORD __attribute__((__stdcall__)) MultinetGetConnectionPerformanceA(LPNETRESOURCEA,LPNETCONNECTINFOSTRUCT);
DWORD __attribute__((__stdcall__)) MultinetGetConnectionPerformanceW(LPNETRESOURCEW,LPNETCONNECTINFOSTRUCT);
DWORD __attribute__((__stdcall__)) MultinetGetErrorTextA(DWORD,DWORD,DWORD);
DWORD __attribute__((__stdcall__)) MultinetGetErrorTextW(DWORD,DWORD,DWORD);
typedef struct tagPASSWORD_CACHE_ENTRY
{
 WORD cbEntry;
 WORD cbResource;
 WORD cbPassword;
 BYTE iEntry;
 BYTE nType;
 BYTE abResource[1];
} PASSWORD_CACHE_ENTRY;
typedef BOOL (__attribute__((__stdcall__)) *ENUMPASSWORDPROC)(PASSWORD_CACHE_ENTRY *, DWORD);
UINT __attribute__((__stdcall__)) WNetEnumCachedPasswords( LPSTR, WORD, BYTE, ENUMPASSWORDPROC, DWORD);
DWORD __attribute__((__stdcall__)) WNetGetCachedPassword( LPSTR, WORD, LPSTR, LPWORD, BYTE );
DWORD __attribute__((__stdcall__)) WNetCachePassword( LPSTR, WORD, LPSTR, WORD, BYTE, WORD );
typedef struct
{
    unsigned short bAppReturnCode:8, reserved:6, fBusy:1, fAck:1;
} DDEACK;
typedef struct
{
    unsigned short unused:12, fResponse:1, fRelease:1, reserved:1, fAckReq:1;
    short cfFormat;
    BYTE Value[1];
} DDEDATA;
typedef struct
{
    unsigned short reserved:14, fDeferUpd:1, fAckReq:1;
    short cfFormat;
} DDEADVISE;
typedef struct
{
    unsigned short unused:13, fRelease:1, fReserved:2;
    short cfFormat;
    BYTE Value[1];
} DDEPOKE;
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DdeSetQualityOfService(HWND,const SECURITY_QUALITY_OF_SERVICE *,PSECURITY_QUALITY_OF_SERVICE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) FreeDDElParam(UINT,LPARAM);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ImpersonateDdeClientWindow(HWND,HWND);
__attribute__((dllimport)) LPARAM __attribute__((__stdcall__)) PackDDElParam(UINT,UINT_PTR,UINT_PTR);
__attribute__((dllimport)) LPARAM __attribute__((__stdcall__)) ReuseDDElParam(LPARAM,UINT,UINT,UINT_PTR,UINT_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnpackDDElParam(UINT,LPARAM,PUINT_PTR,PUINT_PTR);
typedef struct HCONVLIST__ { int unused; } *HCONVLIST;
typedef struct HCONV__ { int unused; } *HCONV;
typedef struct HSZ__ { int unused; } *HSZ;
typedef struct HDDEDATA__ { int unused; } *HDDEDATA;
typedef HDDEDATA (__attribute__((__stdcall__)) *PFNCALLBACK)(UINT, UINT, HCONV, HSZ, HSZ,
      HDDEDATA, ULONG_PTR, ULONG_PTR);
typedef struct tagHSZPAIR
{
    HSZ hszSvc;
    HSZ hszTopic;
} HSZPAIR, *PHSZPAIR;
typedef struct tagCONVCONTEXT
{
    UINT cb;
    UINT wFlags;
    UINT wCountryID;
    INT iCodePage;
    DWORD dwLangID;
    DWORD dwSecurity;
    SECURITY_QUALITY_OF_SERVICE qos;
} CONVCONTEXT, *PCONVCONTEXT;
typedef struct tagCONVINFO
{
    DWORD cb;
    DWORD_PTR hUser;
    HCONV hConvPartner;
    HSZ hszSvcPartner;
    HSZ hszServiceReq;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    UINT wType;
    UINT wStatus;
    UINT wConvst;
    UINT wLastError;
    HCONVLIST hConvList;
    CONVCONTEXT ConvCtxt;
    HWND hwnd;
    HWND hwndPartner;
} CONVINFO, *PCONVINFO;
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DdeAbandonTransaction(DWORD idInst, HCONV hConv, DWORD idTransaction);
__attribute__((dllimport)) LPBYTE __attribute__((__stdcall__)) DdeAccessData(HDDEDATA,LPDWORD);
__attribute__((dllimport)) HDDEDATA __attribute__((__stdcall__)) DdeAddData(HDDEDATA,LPBYTE,DWORD,DWORD);
__attribute__((dllimport)) HDDEDATA __attribute__((__stdcall__)) DdeClientTransaction(LPBYTE,DWORD,HCONV,HSZ,UINT,UINT,DWORD,LPDWORD);
__attribute__((dllimport)) INT __attribute__((__stdcall__)) DdeCmpStringHandles(HSZ,HSZ);
__attribute__((dllimport)) HCONV __attribute__((__stdcall__)) DdeConnect(DWORD,HSZ,HSZ,PCONVCONTEXT);
__attribute__((dllimport)) HCONVLIST __attribute__((__stdcall__)) DdeConnectList(DWORD,HSZ,HSZ,HCONVLIST,PCONVCONTEXT);
__attribute__((dllimport)) HDDEDATA __attribute__((__stdcall__)) DdeCreateDataHandle(DWORD,LPBYTE,DWORD,DWORD,HSZ,UINT,UINT);
__attribute__((dllimport)) HSZ __attribute__((__stdcall__)) DdeCreateStringHandleA(DWORD,LPCSTR,INT);
__attribute__((dllimport)) HSZ __attribute__((__stdcall__)) DdeCreateStringHandleW(DWORD,LPCWSTR,INT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DdeDisconnect(HCONV);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DdeDisconnectList(HCONVLIST);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DdeEnableCallback(DWORD,HCONV,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DdeFreeDataHandle(HDDEDATA);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DdeFreeStringHandle(DWORD,HSZ);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) DdeGetData(HDDEDATA,LPBYTE,DWORD,DWORD);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) DdeGetLastError(DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DdeImpersonateClient(HCONV);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) DdeInitializeA(LPDWORD,PFNCALLBACK,DWORD,DWORD);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) DdeInitializeW(LPDWORD,PFNCALLBACK,DWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DdeKeepStringHandle(DWORD,HSZ);
__attribute__((dllimport)) HDDEDATA __attribute__((__stdcall__)) DdeNameService(DWORD,HSZ,HSZ,UINT);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DdePostAdvise(DWORD,HSZ,HSZ);
__attribute__((dllimport)) UINT __attribute__((__stdcall__)) DdeQueryConvInfo(HCONV,DWORD,PCONVINFO);
__attribute__((dllimport)) HCONV __attribute__((__stdcall__)) DdeQueryNextServer(HCONVLIST, HCONV);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) DdeQueryStringA(DWORD, HSZ, LPSTR, DWORD, INT);
__attribute__((dllimport)) DWORD __attribute__((__stdcall__)) DdeQueryStringW(DWORD, HSZ, LPWSTR, DWORD, INT);
__attribute__((dllimport)) HCONV __attribute__((__stdcall__)) DdeReconnect(HCONV);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DdeSetUserHandle(HCONV,DWORD,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DdeUnaccessData(HDDEDATA);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DdeUninitialize(DWORD);
void __attribute__((__stdcall__)) LZDone(void);
LONG __attribute__((__stdcall__)) CopyLZFile(HFILE,HFILE);
HFILE __attribute__((__stdcall__)) LZOpenFileA(LPSTR,LPOFSTRUCT,WORD);
HFILE __attribute__((__stdcall__)) LZOpenFileW(LPWSTR,LPOFSTRUCT,WORD);
INT __attribute__((__stdcall__)) LZRead(INT,LPSTR,INT);
INT __attribute__((__stdcall__)) LZStart(void);
void __attribute__((__stdcall__)) LZClose(HFILE);
LONG __attribute__((__stdcall__)) LZCopy(HFILE,HFILE);
HFILE __attribute__((__stdcall__)) LZInit(HFILE);
LONG __attribute__((__stdcall__)) LZSeek(HFILE,LONG,INT);
INT __attribute__((__stdcall__)) GetExpandedNameA(LPSTR,LPSTR);
INT __attribute__((__stdcall__)) GetExpandedNameW(LPWSTR,LPWSTR);
typedef LPSTR HPSTR;
typedef LPCSTR HPCSTR;
typedef UINT* LPUINT;
typedef struct HDRVR__ { int unused; } *HDRVR;
typedef struct HWAVE__ { int unused; } *HWAVE;
typedef struct HWAVEIN__ { int unused; } *HWAVEIN;
typedef struct HWAVEOUT__ { int unused; } *HWAVEOUT;
typedef struct HMIDI__ { int unused; } *HMIDI;
typedef struct HMIDIIN__ { int unused; } *HMIDIIN;
typedef struct HMIDIOUT__ { int unused; } *HMIDIOUT;
typedef struct HMIDISTRM__ { int unused; } *HMIDISTRM;
typedef struct HMIXER__ { int unused; } *HMIXER;
typedef struct HMIXEROBJ__ { int unused; } *HMIXEROBJ;
typedef struct HMMIO__ { int unused; } *HMMIO;
typedef HMIDI *LPHMIDI;
typedef HMIDIIN *LPHMIDIIN;
typedef HMIDIOUT *LPHMIDIOUT;
typedef HMIDISTRM *LPHMIDISTRM;
typedef HMIXER *LPHMIXER;
typedef HMIXEROBJ *LPHMIXEROBJ;
typedef HWAVEIN *LPHWAVEIN;
typedef HWAVEOUT *LPHWAVEOUT;

typedef LRESULT (__attribute__((__stdcall__)) *DRIVERPROC)(DWORD_PTR,HDRVR,UINT,LPARAM,LPARAM);
typedef DWORD MCIERROR;
typedef UINT MMVERSION;
typedef UINT MCIDEVICEID;
typedef UINT MMRESULT;
typedef struct mmtime_tag {
    UINT wType;
    union {
 DWORD ms;
 DWORD sample;
 DWORD cb;
        DWORD ticks;
 struct {
     BYTE hour;
     BYTE min;
     BYTE sec;
     BYTE frame;
     BYTE fps;
     BYTE dummy;
     BYTE pad[2];
 } smpte;
 struct {
     DWORD songptrpos;
 } midi;
    } u;
} MMTIME, *PMMTIME, *LPMMTIME;
typedef struct tagDRVCONFIGINFO {
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
} DRVCONFIGINFO, *LPDRVCONFIGINFO;
LRESULT __attribute__((__stdcall__)) DefDriverProc(DWORD_PTR,HDRVR,UINT,LPARAM,LPARAM);
HDRVR __attribute__((__stdcall__)) OpenDriverA(LPCSTR szDriverName, LPCSTR szSectionName,
      LPARAM lParam2);
HDRVR __attribute__((__stdcall__)) OpenDriver(LPCWSTR szDriverName, LPCWSTR szSectionName,
                          LPARAM lParam2);
LRESULT __attribute__((__stdcall__)) CloseDriver(HDRVR hDriver, LPARAM lParam1, LPARAM lParam2);
LRESULT __attribute__((__stdcall__)) SendDriverMessage(HDRVR hDriver, UINT message,
     LPARAM lParam1, LPARAM lParam2);
HMODULE __attribute__((__stdcall__)) GetDriverModuleHandle(HDRVR hDriver);
DWORD __attribute__((__stdcall__)) GetDriverFlags(HDRVR hDriver);
typedef void (__attribute__((__stdcall__)) *LPDRVCALLBACK)(HDRVR,UINT,DWORD_PTR,DWORD_PTR,DWORD_PTR);
UINT __attribute__((__stdcall__)) mmsystemGetVersion(void);
BOOL __attribute__((__stdcall__)) sndPlaySoundA(LPCSTR lpszSound, UINT fuSound);
BOOL __attribute__((__stdcall__)) sndPlaySoundW(LPCWSTR lpszSound, UINT fuSound);
BOOL __attribute__((__stdcall__)) PlaySoundA(LPCSTR pszSound, HMODULE hmod, DWORD fdwSound);
BOOL __attribute__((__stdcall__)) PlaySoundW(LPCWSTR pszSound, HMODULE hmod, DWORD fdwSound);
typedef LPDRVCALLBACK LPWAVECALLBACK;
typedef struct wavehdr_tag {
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    DWORD dwLoops;
    struct wavehdr_tag *lpNext;
    DWORD_PTR reserved;
} WAVEHDR, *PWAVEHDR, *NPWAVEHDR, *LPWAVEHDR;
typedef struct tagWAVEOUTCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
} WAVEOUTCAPSA, *LPWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
} WAVEOUTCAPSW, *LPWAVEOUTCAPSW;
typedef WAVEOUTCAPSA WAVEOUTCAPS;
typedef LPWAVEOUTCAPSA LPWAVEOUTCAPS;
typedef struct tagWAVEOUTCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEOUTCAPS2A, *LPWAVEOUTCAPS2A;
typedef struct tagWAVEOUTCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEOUTCAPS2W, *LPWAVEOUTCAPS2W;
typedef WAVEOUTCAPS2A WAVEOUTCAPS2;
typedef LPWAVEOUTCAPS2A LPWAVEOUTCAPS2;
typedef struct tagWAVEINCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
} WAVEINCAPSA, *LPWAVEINCAPSA;
typedef struct tagWAVEINCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
} WAVEINCAPSW, *LPWAVEINCAPSW;
typedef WAVEINCAPSA WAVEINCAPS;
typedef LPWAVEINCAPSA LPWAVEINCAPS;
typedef struct tagWAVEINCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEINCAPS2A, *LPWAVEINCAPS2A;
typedef struct tagWAVEINCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEINCAPS2W, *LPWAVEINCAPS2W;
typedef WAVEINCAPS2A WAVEINCAPS2;
typedef LPWAVEINCAPS2A LPWAVEINCAPS2;
typedef struct waveformat_tag {
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
} WAVEFORMAT, *LPWAVEFORMAT;
typedef struct pcmwaveformat_tag {
    WAVEFORMAT wf;
    WORD wBitsPerSample;
} PCMWAVEFORMAT, *LPPCMWAVEFORMAT;
typedef struct tWAVEFORMATEX {
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wBitsPerSample;
    WORD cbSize;
} WAVEFORMATEX, *LPWAVEFORMATEX, *NPWAVEFORMATEX, *PWAVEFORMATEX;
typedef const WAVEFORMATEX *LPCWAVEFORMATEX;
UINT __attribute__((__stdcall__)) waveOutGetNumDevs(void);
UINT __attribute__((__stdcall__)) waveOutGetDevCapsA(UINT_PTR,LPWAVEOUTCAPSA,UINT);
UINT __attribute__((__stdcall__)) waveOutGetDevCapsW(UINT_PTR,LPWAVEOUTCAPSW,UINT);
UINT __attribute__((__stdcall__)) waveOutGetVolume(HWAVEOUT,DWORD*);
UINT __attribute__((__stdcall__)) waveOutSetVolume(HWAVEOUT,DWORD);
UINT __attribute__((__stdcall__)) waveOutGetErrorTextA(UINT,LPSTR,UINT);
UINT __attribute__((__stdcall__)) waveOutGetErrorTextW(UINT,LPWSTR,UINT);
MMRESULT __attribute__((__stdcall__)) waveOutOpen(HWAVEOUT*,UINT,LPCWAVEFORMATEX,DWORD_PTR,DWORD_PTR,DWORD);
UINT __attribute__((__stdcall__)) waveOutClose(HWAVEOUT);
UINT __attribute__((__stdcall__)) waveOutPrepareHeader(HWAVEOUT,WAVEHDR*,UINT);
UINT __attribute__((__stdcall__)) waveOutUnprepareHeader(HWAVEOUT,WAVEHDR*,UINT);
UINT __attribute__((__stdcall__)) waveOutWrite(HWAVEOUT,WAVEHDR*,UINT);
UINT __attribute__((__stdcall__)) waveOutPause(HWAVEOUT);
UINT __attribute__((__stdcall__)) waveOutRestart(HWAVEOUT);
UINT __attribute__((__stdcall__)) waveOutReset(HWAVEOUT);
UINT __attribute__((__stdcall__)) waveOutBreakLoop(HWAVEOUT);
UINT __attribute__((__stdcall__)) waveOutGetPosition(HWAVEOUT,LPMMTIME,UINT);
UINT __attribute__((__stdcall__)) waveOutGetPitch(HWAVEOUT,DWORD*);
UINT __attribute__((__stdcall__)) waveOutSetPitch(HWAVEOUT,DWORD);
UINT __attribute__((__stdcall__)) waveOutGetPlaybackRate(HWAVEOUT,DWORD*);
UINT __attribute__((__stdcall__)) waveOutSetPlaybackRate(HWAVEOUT,DWORD);
UINT __attribute__((__stdcall__)) waveOutGetID(HWAVEOUT,UINT*);
UINT __attribute__((__stdcall__)) waveOutMessage(HWAVEOUT,UINT,DWORD_PTR,DWORD_PTR);
UINT __attribute__((__stdcall__)) waveInGetNumDevs(void);
UINT __attribute__((__stdcall__)) waveInGetDevCapsA(UINT_PTR,LPWAVEINCAPSA,UINT);
UINT __attribute__((__stdcall__)) waveInGetDevCapsW(UINT_PTR,LPWAVEINCAPSW,UINT);
UINT __attribute__((__stdcall__)) waveInGetErrorTextA(UINT,LPSTR,UINT);
UINT __attribute__((__stdcall__)) waveInGetErrorTextW(UINT,LPWSTR,UINT);
MMRESULT __attribute__((__stdcall__)) waveInOpen(HWAVEIN*,UINT,LPCWAVEFORMATEX,DWORD_PTR,DWORD_PTR,DWORD);
UINT __attribute__((__stdcall__)) waveInClose(HWAVEIN);
UINT __attribute__((__stdcall__)) waveInPrepareHeader(HWAVEIN,WAVEHDR*,UINT);
UINT __attribute__((__stdcall__)) waveInUnprepareHeader(HWAVEIN,WAVEHDR*,UINT);
UINT __attribute__((__stdcall__)) waveInAddBuffer(HWAVEIN,WAVEHDR*,UINT);
UINT __attribute__((__stdcall__)) waveInStart(HWAVEIN);
UINT __attribute__((__stdcall__)) waveInStop(HWAVEIN);
UINT __attribute__((__stdcall__)) waveInReset(HWAVEIN);
UINT __attribute__((__stdcall__)) waveInGetPosition(HWAVEIN,LPMMTIME,UINT);
UINT __attribute__((__stdcall__)) waveInGetID(HWAVEIN,UINT*);
UINT __attribute__((__stdcall__)) waveInMessage(HWAVEIN,UINT,DWORD_PTR,DWORD_PTR);
typedef LPDRVCALLBACK LPMIDICALLBACK;
typedef WORD PATCHARRAY[128];
typedef WORD *LPPATCHARRAY;
typedef WORD KEYARRAY[128];
typedef WORD *LPKEYARRAY;
typedef struct tagMIDIOUTCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
} MIDIOUTCAPSA, *LPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
} MIDIOUTCAPSW, *LPMIDIOUTCAPSW;
typedef MIDIOUTCAPSA MIDIOUTCAPS;
typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS;
typedef struct tagMIDIOUTCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIOUTCAPS2A, *LPMIDIOUTCAPS2A;
typedef struct tagMIDIOUTCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIOUTCAPS2W, *LPMIDIOUTCAPS2W;
typedef MIDIOUTCAPS2A MIDIOUTCAPS2;
typedef LPMIDIOUTCAPS2A LPMIDIOUTCAPS2;
typedef struct tagMIDIINCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwSupport;
} MIDIINCAPSA, *LPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwSupport;
} MIDIINCAPSW, *LPMIDIINCAPSW;
typedef MIDIINCAPSA MIDIINCAPS;
typedef LPMIDIINCAPSA LPMIDIINCAPS;
typedef struct tagMIDIINCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIINCAPS2A, *LPMIDIINCAPS2A;
typedef struct tagMIDIINCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIINCAPS2W, *LPMIDIINCAPS2W;
typedef MIDIINCAPS2A MIDIINCAPS2;
typedef LPMIDIINCAPS2A LPMIDIINCAPS2;
typedef struct midihdr_tag {
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    struct midihdr_tag *lpNext;
    DWORD_PTR reserved;
    DWORD dwOffset;
    DWORD_PTR dwReserved[8];
} MIDIHDR, *LPMIDIHDR;
typedef struct midiproptempo_tag {
    DWORD cbStruct;
    DWORD dwTempo;
} MIDIPROPTEMPO, *LPMIDIPROPTEMPO;
typedef struct midiproptimediv_tag {
    DWORD cbStruct;
    DWORD dwTimeDiv;
} MIDIPROPTIMEDIV, *LPMIDIPROPTIMEDIV;
typedef struct midievent_tag {
    DWORD dwDeltaTime;
    DWORD dwStreamID;
    DWORD dwEvent;
    DWORD dwParms[1];
} MIDIEVENT, *LPMIDIEVENT;
UINT __attribute__((__stdcall__)) midiOutGetNumDevs(void);
UINT __attribute__((__stdcall__)) midiOutGetDevCapsA(UINT_PTR,LPMIDIOUTCAPSA,UINT);
UINT __attribute__((__stdcall__)) midiOutGetDevCapsW(UINT_PTR,LPMIDIOUTCAPSW,UINT);
UINT __attribute__((__stdcall__)) midiOutGetVolume(HMIDIOUT,DWORD*);
UINT __attribute__((__stdcall__)) midiOutSetVolume(HMIDIOUT,DWORD);
UINT __attribute__((__stdcall__)) midiOutGetErrorTextA(UINT,LPSTR,UINT);
UINT __attribute__((__stdcall__)) midiOutGetErrorTextW(UINT,LPWSTR,UINT);
UINT __attribute__((__stdcall__)) midiOutOpen(LPHMIDIOUT,UINT,DWORD_PTR,DWORD_PTR,DWORD);
UINT __attribute__((__stdcall__)) midiOutClose(HMIDIOUT);
UINT __attribute__((__stdcall__)) midiOutPrepareHeader(HMIDIOUT,MIDIHDR*,UINT);
UINT __attribute__((__stdcall__)) midiOutUnprepareHeader(HMIDIOUT,MIDIHDR*,UINT);
UINT __attribute__((__stdcall__)) midiOutShortMsg(HMIDIOUT,DWORD);
UINT __attribute__((__stdcall__)) midiOutLongMsg(HMIDIOUT,MIDIHDR*,UINT);
UINT __attribute__((__stdcall__)) midiOutReset(HMIDIOUT);
UINT __attribute__((__stdcall__)) midiOutCachePatches(HMIDIOUT,UINT,WORD*,UINT);
UINT __attribute__((__stdcall__)) midiOutCacheDrumPatches(HMIDIOUT,UINT,WORD*,UINT);
UINT __attribute__((__stdcall__)) midiOutGetID(HMIDIOUT,UINT*);
UINT __attribute__((__stdcall__)) midiOutMessage(HMIDIOUT,UINT,DWORD_PTR,DWORD_PTR);
UINT __attribute__((__stdcall__)) midiInGetNumDevs(void);
UINT __attribute__((__stdcall__)) midiInGetDevCapsA(UINT_PTR,LPMIDIINCAPSA,UINT);
UINT __attribute__((__stdcall__)) midiInGetDevCapsW(UINT_PTR,LPMIDIINCAPSW,UINT);
UINT __attribute__((__stdcall__)) midiInGetErrorTextA(UINT,LPSTR,UINT);
UINT __attribute__((__stdcall__)) midiInGetErrorTextW(UINT,LPWSTR,UINT);
UINT __attribute__((__stdcall__)) midiInOpen(LPHMIDIIN,UINT,DWORD_PTR,DWORD_PTR,DWORD);
UINT __attribute__((__stdcall__)) midiInClose(HMIDIIN);
UINT __attribute__((__stdcall__)) midiInPrepareHeader(HMIDIIN,MIDIHDR*,UINT);
UINT __attribute__((__stdcall__)) midiInUnprepareHeader(HMIDIIN,MIDIHDR*,UINT);
UINT __attribute__((__stdcall__)) midiInAddBuffer(HMIDIIN,MIDIHDR*,UINT);
UINT __attribute__((__stdcall__)) midiInStart(HMIDIIN);
UINT __attribute__((__stdcall__)) midiInStop(HMIDIIN);
UINT __attribute__((__stdcall__)) midiInReset(HMIDIIN);
UINT __attribute__((__stdcall__)) midiInGetID(HMIDIIN,UINT*);
UINT __attribute__((__stdcall__)) midiInMessage(HMIDIIN,UINT,DWORD_PTR,DWORD_PTR);
MMRESULT __attribute__((__stdcall__)) midiStreamClose(HMIDISTRM hms);
MMRESULT __attribute__((__stdcall__)) midiStreamOpen(LPHMIDISTRM,LPUINT,DWORD,DWORD_PTR,DWORD_PTR,DWORD);
MMRESULT __attribute__((__stdcall__)) midiStreamOut(HMIDISTRM hms, LPMIDIHDR lpMidiHdr, UINT cbMidiHdr);
MMRESULT __attribute__((__stdcall__)) midiStreamPause(HMIDISTRM hms);
MMRESULT __attribute__((__stdcall__)) midiStreamPosition(HMIDISTRM hms, LPMMTIME lpmmt, UINT cbmmt);
MMRESULT __attribute__((__stdcall__)) midiStreamProperty(HMIDISTRM hms, LPBYTE lpPropData, DWORD dwProperty);
MMRESULT __attribute__((__stdcall__)) midiStreamRestart(HMIDISTRM hms);
MMRESULT __attribute__((__stdcall__)) midiStreamStop(HMIDISTRM hms);
typedef struct tagAUXCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
} AUXCAPSA, *LPAUXCAPSA;
typedef struct tagAUXCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
} AUXCAPSW, *LPAUXCAPSW;
typedef AUXCAPSA AUXCAPS;
typedef LPAUXCAPSA LPAUXCAPS;
typedef struct tagAUXCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} AUXCAPS2A, *LPAUXCAPS2A;
typedef struct tagAUXCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} AUXCAPS2W, *LPAUXCAPS2W;
typedef AUXCAPS2A AUXCAPS2;
typedef LPAUXCAPS2A LPAUXCAPS2;
UINT __attribute__((__stdcall__)) auxGetNumDevs(void);
UINT __attribute__((__stdcall__)) auxGetDevCapsA(UINT_PTR,LPAUXCAPSA,UINT);
UINT __attribute__((__stdcall__)) auxGetDevCapsW(UINT_PTR,LPAUXCAPSW,UINT);
UINT __attribute__((__stdcall__)) auxSetVolume(UINT,DWORD);
UINT __attribute__((__stdcall__)) auxGetVolume(UINT,LPDWORD);
UINT __attribute__((__stdcall__)) auxOutMessage(UINT,UINT,DWORD_PTR,DWORD_PTR);
typedef void (__attribute__((__stdcall__)) *LPTIMECALLBACK)(UINT,UINT,DWORD_PTR,DWORD_PTR,DWORD_PTR);
typedef struct timecaps_tag {
    UINT wPeriodMin;
    UINT wPeriodMax;
} TIMECAPS, *LPTIMECAPS;
MMRESULT __attribute__((__stdcall__)) timeGetSystemTime(LPMMTIME,UINT);
DWORD __attribute__((__stdcall__)) timeGetTime(void);
MMRESULT __attribute__((__stdcall__)) timeSetEvent(UINT,UINT,LPTIMECALLBACK,DWORD_PTR,UINT);
MMRESULT __attribute__((__stdcall__)) timeKillEvent(UINT);
MMRESULT __attribute__((__stdcall__)) timeGetDevCaps(LPTIMECAPS,UINT);
MMRESULT __attribute__((__stdcall__)) timeBeginPeriod(UINT);
MMRESULT __attribute__((__stdcall__)) timeEndPeriod(UINT);
typedef struct tagJOYCAPSA {
    WORD wMid;
    WORD wPid;
    CHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR szRegKey[32];
    CHAR szOEMVxD[260];
} JOYCAPSA, *LPJOYCAPSA;
typedef struct tagJOYCAPSW {
    WORD wMid;
    WORD wPid;
    WCHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR szRegKey[32];
    WCHAR szOEMVxD[260];
} JOYCAPSW, *LPJOYCAPSW;
typedef JOYCAPSA JOYCAPS;
typedef LPJOYCAPSA LPJOYCAPS;
typedef struct tagJOYCAPS2A {
    WORD wMid;
    WORD wPid;
    CHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR szRegKey[32];
    CHAR szOEMVxD[260];
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} JOYCAPS2A, *LPJOYCAPS2A;
typedef struct tagJOYCAPS2W {
    WORD wMid;
    WORD wPid;
    WCHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR szRegKey[32];
    WCHAR szOEMVxD[260];
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} JOYCAPS2W, *LPJOYCAPS2W;
typedef JOYCAPS2A JOYCAPS2;
typedef LPJOYCAPS2A LPJOYCAPS2;
typedef struct joyinfo_tag {
    UINT wXpos;
    UINT wYpos;
    UINT wZpos;
    UINT wButtons;
} JOYINFO, *LPJOYINFO;
typedef struct joyinfoex_tag {
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwXpos;
    DWORD dwYpos;
    DWORD dwZpos;
    DWORD dwRpos;
    DWORD dwUpos;
    DWORD dwVpos;
    DWORD dwButtons;
    DWORD dwButtonNumber;
    DWORD dwPOV;
    DWORD dwReserved1;
    DWORD dwReserved2;
} JOYINFOEX,*LPJOYINFOEX;
MMRESULT __attribute__((__stdcall__)) joyGetDevCapsA(UINT_PTR,LPJOYCAPSA,UINT);
MMRESULT __attribute__((__stdcall__)) joyGetDevCapsW(UINT_PTR,LPJOYCAPSW,UINT);
UINT __attribute__((__stdcall__)) joyGetNumDevs(void);
MMRESULT __attribute__((__stdcall__)) joyGetPos(UINT,LPJOYINFO);
MMRESULT __attribute__((__stdcall__)) joyGetPosEx(UINT,LPJOYINFOEX);
MMRESULT __attribute__((__stdcall__)) joyGetThreshold(UINT,UINT*);
MMRESULT __attribute__((__stdcall__)) joyReleaseCapture(UINT);
MMRESULT __attribute__((__stdcall__)) joySetCapture(HWND,UINT,UINT,BOOL);
MMRESULT __attribute__((__stdcall__)) joySetThreshold(UINT,UINT);
typedef struct tagMIXERCAPSA {
 WORD wMid;
 WORD wPid;
 MMVERSION vDriverVersion;
 CHAR szPname[32];
 DWORD fdwSupport;
 DWORD cDestinations;
} MIXERCAPSA,*LPMIXERCAPSA;
typedef struct tagMIXERCAPSW {
 WORD wMid;
 WORD wPid;
 MMVERSION vDriverVersion;
 WCHAR szPname[32];
 DWORD fdwSupport;
 DWORD cDestinations;
} MIXERCAPSW,*LPMIXERCAPSW;
typedef MIXERCAPSA MIXERCAPS;
typedef LPMIXERCAPSA LPMIXERCAPS;
typedef struct tagMIXERCAPS2A {
 WORD wMid;
 WORD wPid;
 MMVERSION vDriverVersion;
 CHAR szPname[32];
 DWORD fdwSupport;
 DWORD cDestinations;
 GUID ManufacturerGuid;
 GUID ProductGuid;
 GUID NameGuid;
} MIXERCAPS2A,*LPMIXERCAPS2A;
typedef struct tagMIXERCAPS2W {
 WORD wMid;
 WORD wPid;
 MMVERSION vDriverVersion;
 WCHAR szPname[32];
 DWORD fdwSupport;
 DWORD cDestinations;
 GUID ManufacturerGuid;
 GUID ProductGuid;
 GUID NameGuid;
} MIXERCAPS2W,*LPMIXERCAPS2W;
typedef MIXERCAPS2A MIXERCAPS2;
typedef LPMIXERCAPS2A LPMIXERCAPS2;
typedef struct tagMIXERLINEA {
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    CHAR szShortName[16];
    CHAR szName[64];
    struct {
 DWORD dwType;
 DWORD dwDeviceID;
 WORD wMid;
 WORD wPid;
 MMVERSION vDriverVersion;
 CHAR szPname[32];
    } Target;
} MIXERLINEA, *LPMIXERLINEA;
typedef struct tagMIXERLINEW {
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    WCHAR szShortName[16];
    WCHAR szName[64];
    struct {
 DWORD dwType;
 DWORD dwDeviceID;
 WORD wMid;
 WORD wPid;
 MMVERSION vDriverVersion;
 WCHAR szPname[32];
    } Target;
} MIXERLINEW, *LPMIXERLINEW;
typedef MIXERLINEA MIXERLINE;
typedef LPMIXERLINEA LPMIXERLINE;
typedef struct tagMIXERCONTROLA {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    CHAR szShortName[16];
    CHAR szName[64];
    union {
 struct {
     LONG lMinimum;
     LONG lMaximum;
 } ;
 struct {
     DWORD dwMinimum;
     DWORD dwMaximum;
 } ;
 DWORD dwReserved[6];
    } Bounds;
    union {
 DWORD cSteps;
 DWORD cbCustomData;
 DWORD dwReserved[6];
    } Metrics;
} MIXERCONTROLA, *LPMIXERCONTROLA;
typedef struct MIXERCONTROLW {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    WCHAR szShortName[16];
    WCHAR szName[64];
    union {
 struct {
     LONG lMinimum;
     LONG lMaximum;
 } ;
 struct {
     DWORD dwMinimum;
     DWORD dwMaximum;
 } ;
 DWORD dwReserved[6];
    } Bounds;
    union {
 DWORD cSteps;
 DWORD cbCustomData;
 DWORD dwReserved[6];
    } Metrics;
} MIXERCONTROLW, *LPMIXERCONTROLW;
typedef MIXERCONTROLA MIXERCONTROL;
typedef LPMIXERCONTROLA LPMIXERCONTROL;
typedef struct tagMIXERLINECONTROLSA {
    DWORD cbStruct;
    DWORD dwLineID;
    union {
 DWORD dwControlID;
 DWORD dwControlType;
    } ;
    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLA pamxctrl;
} MIXERLINECONTROLSA, *LPMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW {
    DWORD cbStruct;
    DWORD dwLineID;
    union {
 DWORD dwControlID;
 DWORD dwControlType;
    } ;
    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLW pamxctrl;
} MIXERLINECONTROLSW, *LPMIXERLINECONTROLSW;
typedef MIXERLINECONTROLSA MIXERLINECONTROLS;
typedef LPMIXERLINECONTROLSA LPMIXERLINECONTROLS;
typedef struct tMIXERCONTROLDETAILS {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD cChannels;
    union {
        HWND hwndOwner;
        DWORD cMultipleItems;
    } ;
    DWORD cbDetails;
    LPVOID paDetails;
} MIXERCONTROLDETAILS,*LPMIXERCONTROLDETAILS;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA {
    DWORD dwParam1;
    DWORD dwParam2;
    CHAR szName[64];
} MIXERCONTROLDETAILS_LISTTEXTA,*LPMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW {
    DWORD dwParam1;
    DWORD dwParam2;
    WCHAR szName[64];
} MIXERCONTROLDETAILS_LISTTEXTW,*LPMIXERCONTROLDETAILS_LISTTEXTW;
typedef MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT;
typedef LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT;
typedef struct {
 LONG fValue;
} MIXERCONTROLDETAILS_BOOLEAN,*LPMIXERCONTROLDETAILS_BOOLEAN;
typedef struct {
 LONG lValue;
} MIXERCONTROLDETAILS_SIGNED,*LPMIXERCONTROLDETAILS_SIGNED;
typedef struct {
 DWORD dwValue;
} MIXERCONTROLDETAILS_UNSIGNED,*LPMIXERCONTROLDETAILS_UNSIGNED;
UINT __attribute__((__stdcall__)) mixerGetNumDevs(void);
UINT __attribute__((__stdcall__)) mixerOpen(LPHMIXER,UINT,DWORD_PTR,DWORD_PTR,DWORD);
UINT __attribute__((__stdcall__)) mixerClose(HMIXER);
DWORD __attribute__((__stdcall__)) mixerMessage(HMIXER,UINT,DWORD_PTR,DWORD_PTR);
UINT __attribute__((__stdcall__)) mixerGetDevCapsA(UINT_PTR,LPMIXERCAPSA,UINT);
UINT __attribute__((__stdcall__)) mixerGetDevCapsW(UINT_PTR,LPMIXERCAPSW,UINT);
UINT __attribute__((__stdcall__)) mixerGetLineInfoA(HMIXEROBJ,LPMIXERLINEA,DWORD);
UINT __attribute__((__stdcall__)) mixerGetLineInfoW(HMIXEROBJ,LPMIXERLINEW,DWORD);
UINT __attribute__((__stdcall__)) mixerGetID(HMIXEROBJ,LPUINT,DWORD);
UINT __attribute__((__stdcall__)) mixerGetLineControlsA(HMIXEROBJ,LPMIXERLINECONTROLSA,DWORD);
UINT __attribute__((__stdcall__)) mixerGetLineControlsW(HMIXEROBJ,LPMIXERLINECONTROLSW,DWORD);
UINT __attribute__((__stdcall__)) mixerGetControlDetailsA(HMIXEROBJ,LPMIXERCONTROLDETAILS,DWORD);
UINT __attribute__((__stdcall__)) mixerGetControlDetailsW(HMIXEROBJ,LPMIXERCONTROLDETAILS,DWORD);
UINT __attribute__((__stdcall__)) mixerSetControlDetails(HMIXEROBJ,LPMIXERCONTROLDETAILS,DWORD);
typedef DWORD FOURCC;
typedef LRESULT (__attribute__((__stdcall__)) *LPMMIOPROC) (LPSTR lpmmioinfo, UINT uMessage,
      LPARAM lParam1, LPARAM lParam2);
typedef struct _MMIOINFO {
        DWORD dwFlags;
        FOURCC fccIOProc;
        LPMMIOPROC pIOProc;
        UINT wErrorRet;
        HTASK hTask;
        LONG cchBuffer;
        HPSTR pchBuffer;
        HPSTR pchNext;
        HPSTR pchEndRead;
        HPSTR pchEndWrite;
        LONG lBufOffset;
        LONG lDiskOffset;
        DWORD adwInfo[3];
        DWORD dwReserved1;
        DWORD dwReserved2;
        HMMIO hmmio;
} MMIOINFO, *PMMIOINFO, *LPMMIOINFO;
typedef struct _MMCKINFO
{
        FOURCC ckid;
        DWORD cksize;
        FOURCC fccType;
        DWORD dwDataOffset;
        DWORD dwFlags;
} MMCKINFO, *LPMMCKINFO;
LPMMIOPROC __attribute__((__stdcall__)) mmioInstallIOProcA(FOURCC,LPMMIOPROC,DWORD);
LPMMIOPROC __attribute__((__stdcall__)) mmioInstallIOProcW(FOURCC,LPMMIOPROC,DWORD);
FOURCC __attribute__((__stdcall__)) mmioStringToFOURCCA(LPCSTR,UINT);
FOURCC __attribute__((__stdcall__)) mmioStringToFOURCCW(LPCWSTR,UINT);
HMMIO __attribute__((__stdcall__)) mmioOpenA(LPSTR,MMIOINFO*,DWORD);
HMMIO __attribute__((__stdcall__)) mmioOpenW(LPWSTR,MMIOINFO*,DWORD);
MMRESULT __attribute__((__stdcall__)) mmioRenameA(LPCSTR szFileName, LPCSTR szNewFileName,
        const MMIOINFO * lpmmioinfo, DWORD dwRenameFlags);
MMRESULT __attribute__((__stdcall__)) mmioRenameW(LPCWSTR szFileName, LPCWSTR szNewFileName,
        const MMIOINFO * lpmmioinfo, DWORD dwRenameFlags);
MMRESULT __attribute__((__stdcall__)) mmioClose(HMMIO,UINT);
LONG __attribute__((__stdcall__)) mmioRead(HMMIO,HPSTR,LONG);
LONG __attribute__((__stdcall__)) mmioWrite(HMMIO,HPCSTR,LONG);
LONG __attribute__((__stdcall__)) mmioSeek(HMMIO,LONG,INT);
MMRESULT __attribute__((__stdcall__)) mmioGetInfo(HMMIO,MMIOINFO*,UINT);
MMRESULT __attribute__((__stdcall__)) mmioSetInfo(HMMIO,const MMIOINFO*,UINT);
MMRESULT __attribute__((__stdcall__)) mmioSetBuffer(HMMIO,LPSTR,LONG,UINT);
MMRESULT __attribute__((__stdcall__)) mmioFlush(HMMIO,UINT);
MMRESULT __attribute__((__stdcall__)) mmioAdvance(HMMIO,MMIOINFO*,UINT);
LRESULT __attribute__((__stdcall__)) mmioSendMessage(HMMIO,UINT,LPARAM,LPARAM);
MMRESULT __attribute__((__stdcall__)) mmioDescend(HMMIO,MMCKINFO*,const MMCKINFO*,UINT);
MMRESULT __attribute__((__stdcall__)) mmioAscend(HMMIO,MMCKINFO*,UINT);
MMRESULT __attribute__((__stdcall__)) mmioCreateChunk(HMMIO,MMCKINFO*,UINT);
typedef UINT (__attribute__((__stdcall__)) *YIELDPROC)(MCIDEVICEID,DWORD);
BOOL __attribute__((__stdcall__)) mciExecute(LPCSTR);
DWORD __attribute__((__stdcall__)) mciSendCommandA(MCIDEVICEID,UINT,DWORD_PTR,DWORD_PTR);
DWORD __attribute__((__stdcall__)) mciSendCommandW(MCIDEVICEID,UINT,DWORD_PTR,DWORD_PTR);
DWORD __attribute__((__stdcall__)) mciSendStringA(LPCSTR,LPSTR,UINT,HWND);
DWORD __attribute__((__stdcall__)) mciSendStringW(LPCWSTR,LPWSTR,UINT,HWND);
MCIDEVICEID __attribute__((__stdcall__)) mciGetDeviceIDA(LPCSTR);
MCIDEVICEID __attribute__((__stdcall__)) mciGetDeviceIDW(LPCWSTR);
MCIDEVICEID __attribute__((__stdcall__)) mciGetDeviceIDFromElementIDA(DWORD,LPCSTR);
MCIDEVICEID __attribute__((__stdcall__)) mciGetDeviceIDFromElementIDW(DWORD,LPCWSTR);
BOOL __attribute__((__stdcall__)) mciGetErrorStringA(MCIERROR,LPSTR,UINT);
BOOL __attribute__((__stdcall__)) mciGetErrorStringW(MCIERROR,LPWSTR,UINT);
BOOL __attribute__((__stdcall__)) mciSetYieldProc(MCIDEVICEID,YIELDPROC,DWORD);
HTASK __attribute__((__stdcall__)) mciGetCreatorTask(MCIDEVICEID);
YIELDPROC __attribute__((__stdcall__)) mciGetYieldProc(MCIDEVICEID,DWORD*);
typedef struct tagMCI_GENERIC_PARMS {
       DWORD_PTR dwCallback;
} MCI_GENERIC_PARMS, *LPMCI_GENERIC_PARMS;
typedef struct tagMCI_OPEN_PARMSA {
       DWORD_PTR dwCallback;
 MCIDEVICEID wDeviceID;
 LPCSTR lpstrDeviceType;
 LPCSTR lpstrElementName;
 LPCSTR lpstrAlias;
} MCI_OPEN_PARMSA, *LPMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW {
       DWORD_PTR dwCallback;
 MCIDEVICEID wDeviceID;
 LPCWSTR lpstrDeviceType;
 LPCWSTR lpstrElementName;
 LPCWSTR lpstrAlias;
} MCI_OPEN_PARMSW, *LPMCI_OPEN_PARMSW;
typedef MCI_OPEN_PARMSA MCI_OPEN_PARMS;
typedef LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS;
typedef struct tagMCI_PLAY_PARMS{
       DWORD_PTR dwCallback;
 DWORD dwFrom;
 DWORD dwTo;
} MCI_PLAY_PARMS, *LPMCI_PLAY_PARMS;
typedef struct tagMCI_SEEK_PARMS {
       DWORD_PTR dwCallback;
 DWORD dwTo;
} MCI_SEEK_PARMS, *LPMCI_SEEK_PARMS;
typedef struct tagMCI_STATUS_PARMS {
       DWORD_PTR dwCallback;
       DWORD_PTR dwReturn;
 DWORD dwItem;
 DWORD dwTrack;
} MCI_STATUS_PARMS, *LPMCI_STATUS_PARMS;
typedef struct tagMCI_INFO_PARMSA {
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
} MCI_INFO_PARMSA, *LPMCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSW {
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
} MCI_INFO_PARMSW, *LPMCI_INFO_PARMSW;
typedef MCI_INFO_PARMSA MCI_INFO_PARMS;
typedef LPMCI_INFO_PARMSA LPMCI_INFO_PARMS;
typedef struct tagMCI_GETDEVCAPS_PARMS {
       DWORD_PTR dwCallback;
 DWORD dwReturn;
 DWORD dwItem;
} MCI_GETDEVCAPS_PARMS, *LPMCI_GETDEVCAPS_PARMS;
typedef struct tagMCI_SYSINFO_PARMSA {
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
} MCI_SYSINFO_PARMSA, *LPMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW {
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
} MCI_SYSINFO_PARMSW, *LPMCI_SYSINFO_PARMSW;
typedef MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS;
typedef LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS;
typedef struct tagMCI_SET_PARMS {
       DWORD_PTR dwCallback;
 DWORD dwTimeFormat;
 DWORD dwAudio;
} MCI_SET_PARMS, *LPMCI_SET_PARMS;
typedef struct tagMCI_BREAK_PARMS {
       DWORD_PTR dwCallback;
 INT nVirtKey;
 HWND hwndBreak;
} MCI_BREAK_PARMS, *LPMCI_BREAK_PARMS;
typedef struct tagMCI_SOUND_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpstrSoundName;
} MCI_SOUND_PARMSA, *LPMCI_SOUND_PARMSA;
typedef struct tagMCI_SOUND_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpstrSoundName;
} MCI_SOUND_PARMSW, *LPMCI_SOUND_PARMSW;
typedef MCI_SOUND_PARMSA MCI_SOUND_PARMS;
typedef LPMCI_SOUND_PARMSA LPMCI_SOUND_PARMS;
typedef struct tagMCI_SAVE_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
} MCI_SAVE_PARMSA, *LPMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
} MCI_SAVE_PARMSW, *LPMCI_SAVE_PARMSW;
typedef MCI_SAVE_PARMSA MCI_SAVE_PARMS;
typedef LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS;
typedef struct tagMCI_LOAD_PARMSA {
       DWORD_PTR dwCallback;
 LPCSTR lpfilename;
} MCI_LOAD_PARMSA, *LPMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW {
       DWORD_PTR dwCallback;
 LPCWSTR lpfilename;
} MCI_LOAD_PARMSW, *LPMCI_LOAD_PARMSW;
typedef MCI_LOAD_PARMSA MCI_LOAD_PARMS;
typedef LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS;
typedef struct tagMCI_RECORD_PARMS {
       DWORD_PTR dwCallback;
 DWORD dwFrom;
 DWORD dwTo;
} MCI_RECORD_PARMS, *LPMCI_RECORD_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS {
       DWORD_PTR dwCallback;
 DWORD dwFrom;
 DWORD dwTo;
 DWORD dwSpeed;
} MCI_VD_PLAY_PARMS, *LPMCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_STEP_PARMS {
       DWORD_PTR dwCallback;
 DWORD dwFrames;
} MCI_VD_STEP_PARMS, *LPMCI_VD_STEP_PARMS;
typedef struct tagMCI_VD_ESCAPE_PARMSA {
       DWORD_PTR dwCallback;
 LPCSTR lpstrCommand;
} MCI_VD_ESCAPE_PARMSA, *LPMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW {
       DWORD_PTR dwCallback;
 LPCWSTR lpstrCommand;
} MCI_VD_ESCAPE_PARMSW, *LPMCI_VD_ESCAPE_PARMSW;
typedef MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS;
typedef LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS;
typedef struct tagMCI_WAVE_OPEN_PARMSA {
       DWORD_PTR dwCallback;
 MCIDEVICEID wDeviceID;
 LPCSTR lpstrDeviceType;
 LPCSTR lpstrElementName;
 LPCSTR lpstrAlias;
 DWORD dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSA, *LPMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW {
       DWORD_PTR dwCallback;
 MCIDEVICEID wDeviceID;
 LPCWSTR lpstrDeviceType;
 LPCWSTR lpstrElementName;
 LPCWSTR lpstrAlias;
 DWORD dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSW, *LPMCI_WAVE_OPEN_PARMSW;
typedef MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS;
typedef LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS;
typedef struct tagMCI_WAVE_DELETE_PARMS {
       DWORD_PTR dwCallback;
 DWORD dwFrom;
 DWORD dwTo;
} MCI_WAVE_DELETE_PARMS, *LPMCI_WAVE_DELETE_PARMS;
typedef struct tagMCI_WAVE_SET_PARMS {
       DWORD_PTR dwCallback;
 DWORD dwTimeFormat;
 DWORD dwAudio;
 UINT wInput;
 UINT wOutput;
 UINT wFormatTag;
 UINT nChannels;
 DWORD nSamplesPerSec;
 DWORD nAvgBytesPerSec;
 UINT nBlockAlign;
 UINT wBitsPerSample;
} MCI_WAVE_SET_PARMS, * LPMCI_WAVE_SET_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS {
       DWORD_PTR dwCallback;
 DWORD dwTimeFormat;
 DWORD dwAudio;
 DWORD dwTempo;
 DWORD dwPort;
 DWORD dwSlave;
 DWORD dwMaster;
 DWORD dwOffset;
} MCI_SEQ_SET_PARMS, *LPMCI_SEQ_SET_PARMS;
typedef struct tagMCI_ANIM_OPEN_PARMSA {
       DWORD_PTR dwCallback;
 MCIDEVICEID wDeviceID;
 LPCSTR lpstrDeviceType;
 LPCSTR lpstrElementName;
 LPCSTR lpstrAlias;
 DWORD dwStyle;
 HWND hWndParent;
} MCI_ANIM_OPEN_PARMSA, *LPMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW {
       DWORD_PTR dwCallback;
 MCIDEVICEID wDeviceID;
 LPCWSTR lpstrDeviceType;
 LPCWSTR lpstrElementName;
 LPCWSTR lpstrAlias;
 DWORD dwStyle;
 HWND hWndParent;
} MCI_ANIM_OPEN_PARMSW, *LPMCI_ANIM_OPEN_PARMSW;
typedef MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS;
typedef LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS;
typedef struct tagMCI_ANIM_PLAY_PARMS {
       DWORD_PTR dwCallback;
 DWORD dwFrom;
 DWORD dwTo;
 DWORD dwSpeed;
} MCI_ANIM_PLAY_PARMS, *LPMCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS {
       DWORD_PTR dwCallback;
 DWORD dwFrames;
} MCI_ANIM_STEP_PARMS, *LPMCI_ANIM_STEP_PARMS;
typedef struct tagMCI_ANIM_WINDOW_PARMSA {
       DWORD_PTR dwCallback;
 HWND hWnd;
 UINT nCmdShow;
 LPCSTR lpstrText;
} MCI_ANIM_WINDOW_PARMSA, *LPMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW {
       DWORD_PTR dwCallback;
 HWND hWnd;
 UINT nCmdShow;
 LPCWSTR lpstrText;
} MCI_ANIM_WINDOW_PARMSW, *LPMCI_ANIM_WINDOW_PARMSW;
typedef MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS;
typedef LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS;
typedef struct tagMCI_ANIM_RECT_PARMS {
       DWORD_PTR dwCallback;
 RECT rc;
} MCI_ANIM_RECT_PARMS, *LPMCI_ANIM_RECT_PARMS;
typedef struct tagMCI_ANIM_UPDATE_PARMS {
       DWORD_PTR dwCallback;
 RECT rc;
 HDC hDC;
} MCI_ANIM_UPDATE_PARMS, *LPMCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_OVLY_OPEN_PARMSA {
       DWORD_PTR dwCallback;
 MCIDEVICEID wDeviceID;
 LPCSTR lpstrDeviceType;
 LPCSTR lpstrElementName;
 LPCSTR lpstrAlias;
 DWORD dwStyle;
 HWND hWndParent;
} MCI_OVLY_OPEN_PARMSA, *LPMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW {
       DWORD_PTR dwCallback;
 MCIDEVICEID wDeviceID;
 LPCWSTR lpstrDeviceType;
 LPCWSTR lpstrElementName;
 LPCWSTR lpstrAlias;
 DWORD dwStyle;
 HWND hWndParent;
} MCI_OVLY_OPEN_PARMSW, *LPMCI_OVLY_OPEN_PARMSW;
typedef MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS;
typedef LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS;
typedef struct tagMCI_OVLY_WINDOW_PARMSA {
       DWORD_PTR dwCallback;
 HWND hWnd;
 UINT nCmdShow;
 LPCSTR lpstrText;
} MCI_OVLY_WINDOW_PARMSA, *LPMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW {
       DWORD_PTR dwCallback;
 HWND hWnd;
 UINT nCmdShow;
 LPCWSTR lpstrText;
} MCI_OVLY_WINDOW_PARMSW, *LPMCI_OVLY_WINDOW_PARMSW;
typedef MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS;
typedef LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS;
typedef struct tagMCI_OVLY_RECT_PARMS {
       DWORD_PTR dwCallback;
 RECT rc;
} MCI_OVLY_RECT_PARMS, *LPMCI_OVLY_RECT_PARMS;
typedef struct tagMCI_OVLY_SAVE_PARMSA {
       DWORD_PTR dwCallback;
 LPCSTR lpfilename;
 RECT rc;
} MCI_OVLY_SAVE_PARMSA, *LPMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW {
       DWORD_PTR dwCallback;
 LPCWSTR lpfilename;
 RECT rc;
} MCI_OVLY_SAVE_PARMSW, *LPMCI_OVLY_SAVE_PARMSW;
typedef MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS;
typedef LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS;
typedef struct tagMCI_OVLY_LOAD_PARMSA {
       DWORD_PTR dwCallback;
 LPCSTR lpfilename;
 RECT rc;
} MCI_OVLY_LOAD_PARMSA, *LPMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW {
       DWORD_PTR dwCallback;
 LPCWSTR lpfilename;
 RECT rc;
} MCI_OVLY_LOAD_PARMSW, *LPMCI_OVLY_LOAD_PARMSW;
typedef MCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMS;
typedef LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS;

typedef struct _NCB
{
 UCHAR ncb_command;
 UCHAR ncb_retcode;
 UCHAR ncb_lsn;
 UCHAR ncb_num;
 PUCHAR ncb_buffer;
 WORD ncb_length;
 UCHAR ncb_callname[16];
 UCHAR ncb_name[16];
 UCHAR ncb_rto;
 UCHAR ncb_sto;
 void (__attribute__((__stdcall__)) *ncb_post)(struct _NCB *);
 UCHAR ncb_lana_num;
 UCHAR ncb_cmd_cplt;
 UCHAR ncb_reserve[10];
 HANDLE ncb_event;
} NCB, *PNCB;
typedef struct _ADAPTER_STATUS
{
 UCHAR adapter_address[6];
 UCHAR rev_major;
 UCHAR reserved0;
 UCHAR adapter_type;
 UCHAR rev_minor;
 WORD duration;
 WORD frmr_recv;
 WORD frmr_xmit;
 WORD iframe_recv_error;
 WORD xmit_aborts;
 DWORD xmit_success;
 DWORD recv_success;
 WORD iframe_xmit_error;
 WORD recv_buffer_unavail;
 WORD t1_timeouts;
 WORD ti_timeouts;
 DWORD reserved1;
 WORD free_ncbs;
 WORD max_cfg_ncbs;
 WORD max_ncbs;
 WORD xmit_buf_unavail;
 WORD max_dgram_size;
 WORD pending_sess;
 WORD max_cfg_sess;
 WORD max_sess;
 WORD max_sess_pkt_size;
 WORD name_count;
} ADAPTER_STATUS, *PADAPTER_STATUS;
typedef struct _NAME_BUFFER
{
  UCHAR name[16];
  UCHAR name_num;
  UCHAR name_flags;
} NAME_BUFFER, *PNAME_BUFFER;
typedef struct _LANA_ENUM
{
 UCHAR length;
 UCHAR lana[0xfe +1];
} LANA_ENUM, *PLANA_ENUM;
typedef struct _FIND_NAME_HEADER
{
  WORD node_count;
  UCHAR reserved;
  UCHAR unique_group;
} FIND_NAME_HEADER, *PFIND_NAME_HEADER;
typedef struct _FIND_NAME_BUFFER
{
  UCHAR length;
  UCHAR access_control;
  UCHAR frame_control;
  UCHAR destination_addr[6];
  UCHAR source_addr[6];
  UCHAR routing_info[6];
} FIND_NAME_BUFFER, *PFIND_NAME_BUFFER;
typedef struct _SESSION_HEADER {
  UCHAR sess_name;
  UCHAR num_sess;
  UCHAR rcv_dg_outstanding;
  UCHAR rcv_any_outstanding;
} SESSION_HEADER, *PSESSION_HEADER;
typedef struct _SESSION_BUFFER {
  UCHAR lsn;
  UCHAR state;
  UCHAR local_name[16];
  UCHAR remote_name[16];
  UCHAR rcvs_outstanding;
  UCHAR sends_outstanding;
} SESSION_BUFFER, *PSESSION_BUFFER;
UCHAR __attribute__((__stdcall__)) Netbios(PNCB pncb);
typedef LONG RPC_STATUS;
typedef void* I_RPC_HANDLE;
typedef GUID UUID;
typedef unsigned char* RPC_CSTR;
typedef unsigned short* RPC_WSTR;
typedef void* RPC_AUTH_IDENTITY_HANDLE;
typedef void* RPC_AUTHZ_HANDLE;
typedef void* RPC_IF_HANDLE;
typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;
typedef struct _RPC_BINDING_VECTOR
{
  ULONG Count;
  RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;
typedef struct _UUID_VECTOR
{
  ULONG Count;
  UUID *Uuid[1];
} UUID_VECTOR;
typedef struct _RPC_IF_ID
{
  UUID Uuid;
  unsigned short VersMajor;
  unsigned short VersMinor;
} RPC_IF_ID;
typedef struct
{
  ULONG Count;
  RPC_IF_ID *IfId[1];
} RPC_IF_ID_VECTOR;
typedef struct
{
  unsigned int Count;
  ULONG Stats[1];
} RPC_STATS_VECTOR;
typedef I_RPC_HANDLE *RPC_EP_INQ_HANDLE;
typedef RPC_STATUS __attribute__((__stdcall__)) RPC_IF_CALLBACK_FN( RPC_IF_HANDLE InterfaceUuid, void *Context );
typedef void (__attribute__((__stdcall__)) *RPC_AUTH_KEY_RETRIEVAL_FN)(void *, RPC_WSTR, ULONG, void **, RPC_STATUS *);
typedef struct _RPC_POLICY
{
  unsigned int Length;
  ULONG EndpointFlags;
  ULONG NICFlags;
} RPC_POLICY, *PRPC_POLICY;
typedef struct _SEC_WINNT_AUTH_IDENTITY_W
{
    unsigned short* User;
    ULONG UserLength;
    unsigned short* Domain;
    ULONG DomainLength;
    unsigned short* Password;
    ULONG PasswordLength;
    ULONG Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;
typedef struct _SEC_WINNT_AUTH_IDENTITY_A
{
    unsigned char* User;
    ULONG UserLength;
    unsigned char* Domain;
    ULONG DomainLength;
    unsigned char* Password;
    ULONG PasswordLength;
    ULONG Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    ULONG Flags;
    ULONG AuthenticationTarget;
    ULONG NumberOfAuthnSchemes;
    ULONG *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    ULONG Flags;
    ULONG AuthenticationTarget;
    ULONG NumberOfAuthnSchemes;
    ULONG *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;
typedef struct _RPC_SECURITY_QOS {
    ULONG Version;
    ULONG Capabilities;
    ULONG IdentityTracking;
    ULONG ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;
typedef struct _RPC_SECURITY_QOS_V2_W
{
    ULONG Version;
    ULONG Capabilities;
    ULONG IdentityTracking;
    ULONG ImpersonationType;
    ULONG AdditionalSecurityInfoType;
    union
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
    } u;
} RPC_SECURITY_QOS_V2_W, *PRPC_SECURITY_QOS_V2_W;
typedef struct _RPC_SECURITY_QOS_V2_A
{
    ULONG Version;
    ULONG Capabilities;
    ULONG IdentityTracking;
    ULONG ImpersonationType;
    ULONG AdditionalSecurityInfoType;
    union
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
    } u;
} RPC_SECURITY_QOS_V2_A, *PRPC_SECURITY_QOS_V2_A;
RPC_STATUS __attribute__((__stdcall__)) DceErrorInqTextA(RPC_STATUS e, RPC_CSTR buffer);
RPC_STATUS __attribute__((__stdcall__)) DceErrorInqTextW(RPC_STATUS e, RPC_WSTR buffer);
 __attribute__((noreturn)) void __attribute__((__stdcall__))
  RpcRaiseException( RPC_STATUS exception );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingCopy( RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE* DestinationBinding );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingFree( RPC_BINDING_HANDLE* Binding );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingInqObject( RPC_BINDING_HANDLE Binding, UUID* ObjectUuid );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingInqOption( RPC_BINDING_HANDLE Binding, ULONG Option, ULONG_PTR *OptionValue );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingReset( RPC_BINDING_HANDLE Binding );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingSetObject( RPC_BINDING_HANDLE Binding, UUID* ObjectUuid );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingSetOption( RPC_BINDING_HANDLE Binding, ULONG Option, ULONG_PTR OptionValue );
 RPC_STATUS __attribute__((__stdcall__))
  RpcObjectSetType( UUID* ObjUuid, UUID* TypeUuid );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingFromStringBindingA( RPC_CSTR StringBinding, RPC_BINDING_HANDLE* Binding );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingFromStringBindingW( RPC_WSTR StringBinding, RPC_BINDING_HANDLE* Binding );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingToStringBindingA( RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingToStringBindingW( RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingVectorFree( RPC_BINDING_VECTOR** BindingVector );
 RPC_STATUS __attribute__((__stdcall__))
  RpcStringBindingComposeA( RPC_CSTR ObjUuid, RPC_CSTR Protseq, RPC_CSTR NetworkAddr,
                            RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding );
 RPC_STATUS __attribute__((__stdcall__))
  RpcStringBindingComposeW( RPC_WSTR ObjUuid, RPC_WSTR Protseq, RPC_WSTR NetworkAddr,
                            RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR *StringBinding );
 RPC_STATUS __attribute__((__stdcall__))
  RpcStringBindingParseA( RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq,
                          RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions );
 RPC_STATUS __attribute__((__stdcall__))
  RpcStringBindingParseW( RPC_WSTR StringBinding, RPC_WSTR *ObjUuid, RPC_WSTR *Protseq,
                          RPC_WSTR *NetworkAddr, RPC_WSTR *Endpoint, RPC_WSTR *NetworkOptions );
 RPC_STATUS __attribute__((__stdcall__))
  RpcEpResolveBinding( RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec );
 RPC_STATUS __attribute__((__stdcall__))
  RpcEpRegisterA( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVector,
                  UUID_VECTOR* UuidVector, RPC_CSTR Annotation );
 RPC_STATUS __attribute__((__stdcall__))
  RpcEpRegisterW( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVector,
                  UUID_VECTOR* UuidVector, RPC_WSTR Annotation );
 RPC_STATUS __attribute__((__stdcall__))
  RpcEpRegisterNoReplaceA( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVector,
                           UUID_VECTOR* UuidVector, RPC_CSTR Annotation );
 RPC_STATUS __attribute__((__stdcall__))
  RpcEpRegisterNoReplaceW( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVector,
                           UUID_VECTOR* UuidVector, RPC_WSTR Annotation );
 RPC_STATUS __attribute__((__stdcall__))
  RpcEpUnregister( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVector,
                   UUID_VECTOR* UuidVector );
 RPC_STATUS __attribute__((__stdcall__))
  RpcServerInqBindings( RPC_BINDING_VECTOR** BindingVector );
 RPC_STATUS __attribute__((__stdcall__))
  RpcServerListen( unsigned int MinimumCallThreads, unsigned int MaxCalls, unsigned int DontWait );
 RPC_STATUS __attribute__((__stdcall__))
  RpcMgmtEnableIdleCleanup( void );
typedef int (__attribute__((__stdcall__)) *RPC_MGMT_AUTHORIZATION_FN)( RPC_BINDING_HANDLE, ULONG, RPC_STATUS * );
 RPC_STATUS __attribute__((__stdcall__)) RpcMgmtSetAuthorizationFn( RPC_MGMT_AUTHORIZATION_FN );
 RPC_STATUS __attribute__((__stdcall__)) RpcMgmtSetCancelTimeout(LONG);
 RPC_STATUS __attribute__((__stdcall__))
  RpcMgmtWaitServerListen( void );
 RPC_STATUS __attribute__((__stdcall__))
  RpcMgmtInqStats( RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics );
 RPC_STATUS __attribute__((__stdcall__))
  RpcMgmtStopServerListening( RPC_BINDING_HANDLE Binding );
 RPC_STATUS __attribute__((__stdcall__))
  RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding);
 RPC_STATUS __attribute__((__stdcall__))
  RpcMgmtInqIfIds( RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR** IfIdVector );
 RPC_STATUS __attribute__((__stdcall__))
  RpcMgmtEpEltInqBegin( RPC_BINDING_HANDLE EpBinding, ULONG InquiryType, RPC_IF_ID *IfId,
                        ULONG VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext);
 RPC_STATUS __attribute__((__stdcall__))
  RpcMgmtSetComTimeout( RPC_BINDING_HANDLE Binding, unsigned int Timeout );
 RPC_STATUS __attribute__((__stdcall__))
  RpcMgmtSetServerStackSize( ULONG ThreadStackSize );
 RPC_STATUS __attribute__((__stdcall__))
RpcMgmtStatsVectorFree( RPC_STATS_VECTOR **StatsVector );
 RPC_STATUS __attribute__((__stdcall__))
  RpcServerRegisterIf( RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, void* MgrEpv );
 RPC_STATUS __attribute__((__stdcall__))
  RpcServerRegisterIfEx( RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, void* MgrEpv,
                         unsigned int Flags, unsigned int MaxCalls, RPC_IF_CALLBACK_FN* IfCallbackFn );
 RPC_STATUS __attribute__((__stdcall__))
  RpcServerRegisterIf2( RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, void* MgrEpv,
                        unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN* IfCallbackFn );
 RPC_STATUS __attribute__((__stdcall__))
  RpcServerUnregisterIf( RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, unsigned int WaitForCallsToComplete );
 RPC_STATUS __attribute__((__stdcall__))
  RpcServerUnregisterIfEx( RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, int RundownContextHandles );
 RPC_STATUS __attribute__((__stdcall__))
  RpcServerUseProtseqA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor);
 RPC_STATUS __attribute__((__stdcall__))
  RpcServerUseProtseqW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor);
 RPC_STATUS __attribute__((__stdcall__))
  RpcServerUseProtseqEpA( RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor );
 RPC_STATUS __attribute__((__stdcall__))
  RpcServerUseProtseqEpW( RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor );
 RPC_STATUS __attribute__((__stdcall__))
  RpcServerUseProtseqEpExA( RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor,
                            PRPC_POLICY Policy );
 RPC_STATUS __attribute__((__stdcall__))
  RpcServerUseProtseqEpExW( RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor,
                            PRPC_POLICY Policy );
 RPC_STATUS __attribute__((__stdcall__))
  RpcServerRegisterAuthInfoA( RPC_CSTR ServerPrincName, ULONG AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
                              void *Arg );
 RPC_STATUS __attribute__((__stdcall__))
  RpcServerRegisterAuthInfoW( RPC_WSTR ServerPrincName, ULONG AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
                              void *Arg );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingSetAuthInfoExA( RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, ULONG AuthnLevel,
                            ULONG AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, ULONG AuthzSvr,
                            RPC_SECURITY_QOS *SecurityQos );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingSetAuthInfoExW( RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, ULONG AuthnLevel,
                            ULONG AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, ULONG AuthzSvr,
                            RPC_SECURITY_QOS *SecurityQos );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingSetAuthInfoA( RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, ULONG AuthnLevel,
                          ULONG AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, ULONG AuthzSvr );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingSetAuthInfoW( RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, ULONG AuthnLevel,
                          ULONG AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, ULONG AuthzSvr );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingInqAuthInfoExA( RPC_BINDING_HANDLE Binding, RPC_CSTR * ServerPrincName, ULONG *AuthnLevel,
                            ULONG *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, ULONG *AuthzSvc,
                            ULONG RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingInqAuthInfoExW( RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, ULONG *AuthnLevel,
                            ULONG *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, ULONG *AuthzSvc,
                            ULONG RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingInqAuthInfoA( RPC_BINDING_HANDLE Binding, RPC_CSTR * ServerPrincName, ULONG *AuthnLevel,
                          ULONG *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, ULONG *AuthzSvc );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingInqAuthInfoW( RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, ULONG *AuthnLevel,
                          ULONG *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, ULONG *AuthzSvc );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingInqAuthClientA( RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs,
                            RPC_CSTR *ServerPrincName, ULONG *AuthnLevel, ULONG *AuthnSvc,
                            ULONG *AuthzSvc );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingInqAuthClientW( RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs,
                            RPC_WSTR *ServerPrincName, ULONG *AuthnLevel, ULONG *AuthnSvc,
                            ULONG *AuthzSvc );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingInqAuthClientExA( RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs,
                              RPC_CSTR *ServerPrincName, ULONG *AuthnLevel, ULONG *AuthnSvc,
                              ULONG *AuthzSvc, ULONG Flags );
 RPC_STATUS __attribute__((__stdcall__))
  RpcBindingInqAuthClientExW( RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs,
                              RPC_WSTR *ServerPrincName, ULONG *AuthnLevel, ULONG *AuthnSvc,
                              ULONG *AuthzSvc, ULONG Flags );
 RPC_STATUS __attribute__((__stdcall__)) RpcCancelThread(void*);
 RPC_STATUS __attribute__((__stdcall__)) RpcCancelThreadEx(void*,LONG);
 RPC_STATUS __attribute__((__stdcall__))
  RpcImpersonateClient( RPC_BINDING_HANDLE Binding );
 RPC_STATUS __attribute__((__stdcall__))
  RpcNetworkIsProtseqValidA( RPC_CSTR protseq );
 RPC_STATUS __attribute__((__stdcall__))
  RpcNetworkIsProtseqValidW( RPC_WSTR protseq );
 RPC_STATUS __attribute__((__stdcall__))
  RpcRevertToSelf( void );
 RPC_STATUS __attribute__((__stdcall__))
  RpcRevertToSelfEx( RPC_BINDING_HANDLE Binding );
 RPC_STATUS __attribute__((__stdcall__))
  RpcStringFreeA(RPC_CSTR* String);
 RPC_STATUS __attribute__((__stdcall__))
  RpcStringFreeW(RPC_WSTR* String);
 RPC_STATUS __attribute__((__stdcall__))
  UuidToStringA( UUID* Uuid, RPC_CSTR* StringUuid );
 RPC_STATUS __attribute__((__stdcall__))
  UuidToStringW( UUID* Uuid, RPC_WSTR* StringUuid );
 RPC_STATUS __attribute__((__stdcall__))
  UuidFromStringA( RPC_CSTR StringUuid, UUID* Uuid );
 RPC_STATUS __attribute__((__stdcall__))
  UuidFromStringW( RPC_WSTR StringUuid, UUID* Uuid );
 RPC_STATUS __attribute__((__stdcall__))
  UuidCreate( UUID* Uuid );
 RPC_STATUS __attribute__((__stdcall__))
  UuidCreateSequential( UUID* Uuid );
 RPC_STATUS __attribute__((__stdcall__))
  UuidCreateNil( UUID* Uuid );
 signed int __attribute__((__stdcall__))
  UuidCompare( UUID* Uuid1, UUID* Uuid2, RPC_STATUS* Status_ );
 int __attribute__((__stdcall__))
  UuidEqual( UUID* Uuid1, UUID* Uuid2, RPC_STATUS* Status_ );
 unsigned short __attribute__((__stdcall__))
  UuidHash(UUID* Uuid, RPC_STATUS* Status_ );
 int __attribute__((__stdcall__))
  UuidIsNil( UUID* Uuid, RPC_STATUS* Status_ );
typedef struct _RPC_VERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} RPC_VERSION;
typedef struct _RPC_SYNTAX_IDENTIFIER {
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER, *PRPC_SYNTAX_IDENTIFIER;
typedef struct _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    ULONG DataRepresentation;
    void* Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void* RpcInterfaceInformation;
    void* ReservedForRuntime;
    void* ManagerEpv;
    void* ImportContext;
    ULONG RpcFlags;
} RPC_MESSAGE, *PRPC_MESSAGE;
typedef void (__attribute__((__stdcall__)) *RPC_DISPATCH_FUNCTION)(PRPC_MESSAGE Message);
typedef RPC_STATUS (__attribute__((__stdcall__)) *RPC_FORWARD_FUNCTION)(UUID *InterfaceId, RPC_VERSION *InterfaceVersion, UUID *ObjectId, unsigned char *Rpcpro, void **ppDestEndpoint);
typedef struct
{
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION* DispatchTable;
    LONG_PTR Reserved;
} RPC_DISPATCH_TABLE, *PRPC_DISPATCH_TABLE;
typedef struct _RPC_PROTSEQ_ENDPOINT
{
    unsigned char* RpcProtocolSequence;
    unsigned char* Endpoint;
} RPC_PROTSEQ_ENDPOINT, *PRPC_PROTSEQ_ENDPOINT;
typedef struct _RPC_SERVER_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void* DefaultManagerEpv;
    void const* InterpreterInfo;
    unsigned int Flags;
} RPC_SERVER_INTERFACE, *PRPC_SERVER_INTERFACE;
typedef struct _RPC_CLIENT_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    ULONG_PTR Reserved;
    void const* InterpreterInfo;
    unsigned int Flags;
} RPC_CLIENT_INTERFACE, *PRPC_CLIENT_INTERFACE;
 RPC_STATUS __attribute__((__stdcall__))
  I_RpcNegotiateTransferSyntax( RPC_MESSAGE* Message );
 RPC_STATUS __attribute__((__stdcall__))
  I_RpcGetBuffer( RPC_MESSAGE* Message );
 RPC_STATUS __attribute__((__stdcall__))
  I_RpcGetBufferWithObject( RPC_MESSAGE* Message, UUID* ObjectUuid );
 RPC_STATUS __attribute__((__stdcall__))
  I_RpcSendReceive( RPC_MESSAGE* Message );
 RPC_STATUS __attribute__((__stdcall__))
  I_RpcFreeBuffer( RPC_MESSAGE* Message );
 RPC_STATUS __attribute__((__stdcall__))
  I_RpcSend( RPC_MESSAGE* Message );
 RPC_STATUS __attribute__((__stdcall__))
  I_RpcReceive( RPC_MESSAGE* Message );
 void* __attribute__((__stdcall__))
  I_RpcAllocate( unsigned int Size );
 void __attribute__((__stdcall__))
  I_RpcFree( void* Object );
 RPC_BINDING_HANDLE __attribute__((__stdcall__))
  I_RpcGetCurrentCallHandle( void );
 RPC_STATUS __attribute__((__stdcall__))
  I_RpcBindingInqTransportType( RPC_BINDING_HANDLE Binding, unsigned int* Type );
 LONG __attribute__((__stdcall__)) I_RpcMapWin32Status(RPC_STATUS);
typedef struct tagRPC_ERROR_ENUM_HANDLE
{
    ULONG Signature;
    void* CurrentPos;
    void* Head;
} RPC_ERROR_ENUM_HANDLE;
typedef enum tagExtendedErrorParamTypes
{
    eeptAnsiString = 1,
    eeptUnicodeString,
    eeptLongVal,
    eeptShortVal,
    eeptPointerVal,
    eeptNone,
    eeptBinary
} ExtendedErrorParamTypes;
typedef struct tagBinaryParam
{
    void *Buffer;
    short Size;
} BinaryParam;
typedef struct tagRPC_EE_INFO_PARAM
{
    ExtendedErrorParamTypes ParameterType;
    union
    {
        LPSTR AnsiString;
        LPWSTR UnicodeString;
        LONG LVal;
        short SVal;
        ULONGLONG PVal;
        BinaryParam BVal;
    } u;
} RPC_EE_INFO_PARAM;
typedef struct tagRPC_EXTENDED_ERROR_INFO
{
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;
    union
    {
        SYSTEMTIME SystemTime;
        FILETIME FileTime;
    } u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM Parameters[4];
} RPC_EXTENDED_ERROR_INFO;
typedef enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone,
    RpcNotificationTypeEvent,
    RpcNotificationTypeApc,
    RpcNotificationTypeIoc,
    RpcNotificationTypeHwnd,
    RpcNotificationTypeCallback,
} RPC_NOTIFICATION_TYPES;
typedef enum _RPC_ASYNC_EVENT
{
    RpcCallComplete,
    RpcSendComplete,
    RpcReceiveComplete,
    RpcClientDisconnect,
    RpcClientCancel,
} RPC_ASYNC_EVENT;
struct _RPC_ASYNC_STATE;
typedef void __attribute__((__stdcall__)) RPCNOTIFICATION_ROUTINE(struct _RPC_ASYNC_STATE *,void *,RPC_ASYNC_EVENT);
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;
typedef union _RPC_ASYNC_NOTIFICATION_INFO
{
    struct
    {
        PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
        HANDLE hThread;
    } APC;
    struct
    {
        HANDLE hIOPort;
        DWORD dwNumberOfBytesTransferred;
        DWORD_PTR dwCompletionKey;
        LPOVERLAPPED lpOverlapped;
    } IOC;
    struct
    {
        HWND hWnd;
        UINT Msg;
    } HWND;
    HANDLE hEvent;
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
} RPC_ASYNC_NOTIFICATION_INFO, *PRPC_ASYNC_NOTIFICATION_INFO;
typedef struct _RPC_ASYNC_STATE
{
    unsigned int Size;
    ULONG Signature;
    LONG Lock;
    ULONG Flags;
    void *StubInfo;
    void *UserInfo;
    void *RuntimeInfo;
    RPC_ASYNC_EVENT Event;
    RPC_NOTIFICATION_TYPES NotificationType;
    RPC_ASYNC_NOTIFICATION_INFO u;
    LONG_PTR Reserved[4];
} RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;
 RPC_STATUS __attribute__((__stdcall__)) RpcAsyncInitializeHandle(PRPC_ASYNC_STATE,unsigned int);
 RPC_STATUS __attribute__((__stdcall__)) RpcAsyncRegisterInfo(PRPC_ASYNC_STATE);
 RPC_STATUS __attribute__((__stdcall__)) RpcAsyncGetCallStatus(PRPC_ASYNC_STATE);
 RPC_STATUS __attribute__((__stdcall__)) RpcAsyncCompleteCall(PRPC_ASYNC_STATE,void *);
 RPC_STATUS __attribute__((__stdcall__)) RpcAsyncAbortCall(PRPC_ASYNC_STATE,ULONG);
 RPC_STATUS __attribute__((__stdcall__)) RpcAsyncCancelCall(PRPC_ASYNC_STATE,BOOL);
 RPC_STATUS __attribute__((__stdcall__)) RpcAsyncCleanupThread(DWORD);
 RPC_STATUS __attribute__((__stdcall__)) RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE*);
 RPC_STATUS __attribute__((__stdcall__)) RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE*,BOOL,RPC_EXTENDED_ERROR_INFO*);
 RPC_STATUS __attribute__((__stdcall__)) RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE*);
 RPC_STATUS __attribute__((__stdcall__)) RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE*);
 RPC_STATUS __attribute__((__stdcall__)) RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE*,int*);
 RPC_STATUS __attribute__((__stdcall__)) RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE*,PVOID*,SIZE_T*);
 RPC_STATUS __attribute__((__stdcall__)) RpcErrorLoadErrorInfo(PVOID,SIZE_T,RPC_ERROR_ENUM_HANDLE*);
 RPC_STATUS __attribute__((__stdcall__)) RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO*);
 RPC_STATUS __attribute__((__stdcall__)) RpcErrorClearInformation(void);
 RPC_STATUS __attribute__((__stdcall__)) RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE,BOOL,LPVOID,PLARGE_INTEGER,LUID,DWORD,PVOID,PVOID*);
 RPC_STATUS __attribute__((__stdcall__)) RpcFreeAuthorizationContext(PVOID*);
 RPC_STATUS __attribute__((__stdcall__)) RpcSsContextLockExclusive(RPC_BINDING_HANDLE,PVOID);
 RPC_STATUS __attribute__((__stdcall__)) RpcSsContextLockShared(RPC_BINDING_HANDLE,PVOID);
 RPC_STATUS __attribute__((__stdcall__)) I_RpcAsyncSetHandle(PRPC_MESSAGE,PRPC_ASYNC_STATE);
 RPC_STATUS __attribute__((__stdcall__)) I_RpcAsyncAbortCall(PRPC_ASYNC_STATE,ULONG);
 int __attribute__((__stdcall__)) I_RpcExceptionFilter(ULONG);

typedef struct HDROP__ { int unused; } *HDROP;
typedef struct _DRAGINFOA
{ UINT uSize;
 POINT pt;
 BOOL fNC;
 LPSTR lpFileList;
 DWORD grfKeyState;
} DRAGINFOA, *LPDRAGINFOA;
typedef struct _DRAGINFOW
{ UINT uSize;
 POINT pt;
 BOOL fNC;
 LPWSTR lpFileList;
 DWORD grfKeyState;
} DRAGINFOW, *LPDRAGINFOW;
typedef DRAGINFOA DRAGINFO;
typedef LPDRAGINFOA LPDRAGINFO;
void __attribute__((__stdcall__)) DragAcceptFiles(HWND hWnd, BOOL b);
UINT __attribute__((__stdcall__)) DragQueryFileA(HDROP hDrop, UINT lFile, LPSTR lpszFile, UINT lLength);
UINT __attribute__((__stdcall__)) DragQueryFileW(HDROP hDrop, UINT lFile, LPWSTR lpszFile, UINT lLength);
void __attribute__((__stdcall__)) DragFinish(HDROP h);
BOOL __attribute__((__stdcall__)) DragQueryPoint(HDROP hDrop, POINT *p);
typedef struct _AppBarData
{ DWORD cbSize;
 HWND hWnd;
 UINT uCallbackMessage;
 UINT uEdge;
 RECT rc;
 LPARAM lParam;
} APPBARDATA, *PAPPBARDATA;
UINT_PTR __attribute__((__stdcall__)) SHAppBarMessage(DWORD,PAPPBARDATA);
typedef struct tagSHFILEINFOA
{ HICON hIcon;
 int iIcon;
 DWORD dwAttributes;
 CHAR szDisplayName[260];
 CHAR szTypeName[80];
} SHFILEINFOA;
typedef struct tagSHFILEINFOW
{ HICON hIcon;
 int iIcon;
 DWORD dwAttributes;
 WCHAR szDisplayName[260];
 WCHAR szTypeName[80];
} SHFILEINFOW;
typedef SHFILEINFOA SHFILEINFO;
DWORD_PTR __attribute__((__stdcall__)) SHGetFileInfoA(LPCSTR,DWORD,SHFILEINFOA*,UINT,UINT);
DWORD_PTR __attribute__((__stdcall__)) SHGetFileInfoW(LPCWSTR,DWORD,SHFILEINFOW*,UINT,UINT);
HRESULT __attribute__((__stdcall__)) SHGetImageList(INT, const IID* const, void **);
typedef WORD FILEOP_FLAGS;
typedef WORD PRINTEROP_FLAGS;
typedef struct _SHFILEOPSTRUCTA
{ HWND hwnd;
  UINT wFunc;
  LPCSTR pFrom;
  LPCSTR pTo;
  FILEOP_FLAGS fFlags;
  BOOL fAnyOperationsAborted;
  LPVOID hNameMappings;
  LPCSTR lpszProgressTitle;
} SHFILEOPSTRUCTA, *LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW
{ HWND hwnd;
  UINT wFunc;
  LPCWSTR pFrom;
  LPCWSTR pTo;
  FILEOP_FLAGS fFlags;
  BOOL fAnyOperationsAborted;
  LPVOID hNameMappings;
  LPCWSTR lpszProgressTitle;
} SHFILEOPSTRUCTW, *LPSHFILEOPSTRUCTW;
int __attribute__((__stdcall__)) SHFileOperationA (LPSHFILEOPSTRUCTA lpFileOp);
int __attribute__((__stdcall__)) SHFileOperationW (LPSHFILEOPSTRUCTW lpFileOp);
typedef struct _SHNAMEMAPPINGA
{
  LPSTR pszOldPath;
  LPSTR pszNewPath;
  int cchOldPath;
  int cchNewPath;
} SHNAMEMAPPINGA, *LPSHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW
{
  LPWSTR pszOldPath;
  LPWSTR pszNewPath;
  int cchOldPath;
  int cchNewPath;
} SHNAMEMAPPINGW, *LPSHNAMEMAPPINGW;
typedef SHNAMEMAPPINGA SHNAMEMAPPING;
typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING;
void __attribute__((__stdcall__)) SHFreeNameMappings(HANDLE hNameMappings);
HINSTANCE __attribute__((__stdcall__)) ShellExecuteA(HWND,LPCSTR,LPCSTR,LPCSTR,LPCSTR,INT);
HINSTANCE __attribute__((__stdcall__)) ShellExecuteW(HWND,LPCWSTR,LPCWSTR,LPCWSTR,LPCWSTR,INT);
typedef struct _SHELLEXECUTEINFOA
{ DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCSTR lpVerb;
        LPCSTR lpFile;
        LPCSTR lpParameters;
        LPCSTR lpDirectory;
       INT nShow;
        HINSTANCE hInstApp;
        LPVOID lpIDList;
        LPCSTR lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        union
        { HANDLE hIcon;
          HANDLE hMonitor;
        } ;
        HANDLE hProcess;
} SHELLEXECUTEINFOA, *LPSHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW
{ DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCWSTR lpVerb;
        LPCWSTR lpFile;
        LPCWSTR lpParameters;
        LPCWSTR lpDirectory;
       INT nShow;
        HINSTANCE hInstApp;
        LPVOID lpIDList;
        LPCWSTR lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        union
        { HANDLE hIcon;
          HANDLE hMonitor;
        } ;
        HANDLE hProcess;
} SHELLEXECUTEINFOW, *LPSHELLEXECUTEINFOW;
BOOL __attribute__((__stdcall__)) ShellExecuteExA(LPSHELLEXECUTEINFOA lpExecInfo);
BOOL __attribute__((__stdcall__)) ShellExecuteExW(LPSHELLEXECUTEINFOW lpExecInfo);
void __attribute__((__stdcall__)) WinExecErrorA(HWND hwnd,INT error, LPCSTR lpstrFileName, LPCSTR lpstrTitle);
void __attribute__((__stdcall__)) WinExecErrorW(HWND hwnd,INT error, LPCWSTR lpstrFileName, LPCWSTR lpstrTitle);
typedef struct _NOTIFYICONDATAA
{ DWORD cbSize;
 HWND hWnd;
 UINT uID;
 UINT uFlags;
 UINT uCallbackMessage;
 HICON hIcon;
 CHAR szTip[128];
 DWORD dwState;
 DWORD dwStateMask;
 CHAR szInfo[256];
 union {
     UINT uTimeout;
     UINT uVersion;
 } ;
 CHAR szInfoTitle[64];
 DWORD dwInfoFlags;
 GUID guidItem;
 HICON hBalloonIcon;
} NOTIFYICONDATAA, *PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW
{ DWORD cbSize;
 HWND hWnd;
 UINT uID;
 UINT uFlags;
 UINT uCallbackMessage;
 HICON hIcon;
 WCHAR szTip[128];
 DWORD dwState;
 DWORD dwStateMask;
 WCHAR szInfo[256];
 union {
     UINT uTimeout;
     UINT uVersion;
 } ;
 WCHAR szInfoTitle[64];
 DWORD dwInfoFlags;
 GUID guidItem;
 HICON hBalloonIcon;
} NOTIFYICONDATAW, *PNOTIFYICONDATAW;
typedef NOTIFYICONDATAA NOTIFYICONDATA;
typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
BOOL __attribute__((__stdcall__)) Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData);
BOOL __attribute__((__stdcall__)) Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData);
BOOL __attribute__((__stdcall__)) SHGetNewLinkInfoA(LPCSTR,LPCSTR,LPSTR,BOOL*,UINT);
BOOL __attribute__((__stdcall__)) SHGetNewLinkInfoW(LPCWSTR,LPCWSTR,LPWSTR,BOOL*,UINT);
typedef struct _SHQUERYRBINFO
{
    DWORD cbSize;
    DWORDLONG i64Size;
    DWORDLONG i64NumItems;
} SHQUERYRBINFO, *LPSHQUERYRBINFO;
HRESULT __attribute__((__stdcall__)) SHEmptyRecycleBinA(HWND,LPCSTR,DWORD);
HRESULT __attribute__((__stdcall__)) SHEmptyRecycleBinW(HWND,LPCWSTR,DWORD);
HRESULT __attribute__((__stdcall__)) SHQueryRecycleBinA(LPCSTR,LPSHQUERYRBINFO);
HRESULT __attribute__((__stdcall__)) SHQueryRecycleBinW(LPCWSTR,LPSHQUERYRBINFO);
LPWSTR* __attribute__((__stdcall__)) CommandLineToArgvW(LPCWSTR,int*);
HICON __attribute__((__stdcall__)) ExtractIconA(HINSTANCE,LPCSTR,UINT);
HICON __attribute__((__stdcall__)) ExtractIconW(HINSTANCE,LPCWSTR,UINT);
HICON __attribute__((__stdcall__)) ExtractAssociatedIconA(HINSTANCE,LPSTR,LPWORD);
HICON __attribute__((__stdcall__)) ExtractAssociatedIconW(HINSTANCE,LPWSTR,LPWORD);
HICON __attribute__((__stdcall__)) ExtractAssociatedIconExA(HINSTANCE,LPSTR,LPWORD,LPWORD);
HICON __attribute__((__stdcall__)) ExtractAssociatedIconExW(HINSTANCE,LPWSTR,LPWORD,LPWORD);
UINT __attribute__((__stdcall__)) ExtractIconExA(LPCSTR,INT,HICON*,HICON*,UINT);
UINT __attribute__((__stdcall__)) ExtractIconExW(LPCWSTR,INT,HICON*,HICON*,UINT);
HINSTANCE __attribute__((__stdcall__)) FindExecutableA(LPCSTR,LPCSTR,LPSTR);
HINSTANCE __attribute__((__stdcall__)) FindExecutableW(LPCWSTR,LPCWSTR,LPWSTR);
BOOL __attribute__((__stdcall__)) ShellAboutA(HWND,LPCSTR,LPCSTR,HICON);
BOOL __attribute__((__stdcall__)) ShellAboutW(HWND,LPCWSTR,LPCWSTR,HICON);
int __attribute__((__cdecl__)) ShellMessageBoxA(HINSTANCE,HWND,LPCSTR,LPCSTR,UINT,...);
int __attribute__((__cdecl__)) ShellMessageBoxW(HINSTANCE,HWND,LPCWSTR,LPCWSTR,UINT,...);
DWORD __attribute__((__stdcall__)) DoEnvironmentSubstA(LPSTR, UINT);
DWORD __attribute__((__stdcall__)) DoEnvironmentSubstW(LPWSTR, UINT);

typedef unsigned short _ino_t;
typedef unsigned short ino_t;
typedef unsigned int _dev_t;
typedef unsigned int dev_t;
typedef int _pid_t;
typedef _pid_t pid_t;
typedef unsigned short _mode_t;
typedef _mode_t mode_t;
  typedef long _off_t;
  typedef long off32_t;
  typedef long long _off64_t;
  typedef long long off64_t;
typedef off32_t off_t;
typedef unsigned int useconds_t;
struct timespec {
  time_t tv_sec;
  long tv_nsec;
};
struct itimerspec {
  struct timespec it_interval;
  struct timespec it_value;
};
typedef unsigned long _sigset_t;

  typedef long clock_t;
  struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
  };
  extern __attribute__ ((__dllimport__)) int _daylight;
  extern __attribute__ ((__dllimport__)) long _dstbias;
  extern __attribute__ ((__dllimport__)) long _timezone;
  extern __attribute__ ((__dllimport__)) char * _tzname[2];
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_daylight(int *_Daylight);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_dstbias(long *_Daylight_savings_bias);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_timezone(long *_Timezone);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_tzname(size_t *_ReturnValue,char *_Buffer,size_t _SizeInBytes,int _Index);
  char *__attribute__((__cdecl__)) asctime(const struct tm *_Tm) ;
  char *__attribute__((__cdecl__)) _ctime32(const __time32_t *_Time) ;
  clock_t __attribute__((__cdecl__)) clock(void);
  double __attribute__((__cdecl__)) _difftime32(__time32_t _Time1,__time32_t _Time2);
  struct tm *__attribute__((__cdecl__)) _gmtime32(const __time32_t *_Time) ;
  struct tm *__attribute__((__cdecl__)) _localtime32(const __time32_t *_Time) ;
  size_t __attribute__((__cdecl__)) strftime(char * __restrict__ _Buf,size_t _SizeInBytes,const char * __restrict__ _Format,const struct tm * __restrict__ _Tm);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _strftime_l(char * __restrict__ _Buf,size_t _Max_size,const char * __restrict__ _Format,const struct tm * __restrict__ _Tm,_locale_t _Locale);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strdate(char *_Buffer) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strtime(char *_Buffer) ;
  __time32_t __attribute__((__cdecl__)) _time32(__time32_t *_Time);
  __time32_t __attribute__((__cdecl__)) _mktime32(struct tm *_Tm);
  __time32_t __attribute__((__cdecl__)) _mkgmtime32(struct tm *_Tm);
  void __attribute__((__cdecl__)) tzset(void) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _tzset(void);
  double __attribute__((__cdecl__)) _difftime64(__time64_t _Time1,__time64_t _Time2);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ctime64(const __time64_t *_Time) ;
  __attribute__ ((__dllimport__)) struct tm *__attribute__((__cdecl__)) _gmtime64(const __time64_t *_Time) ;
  __attribute__ ((__dllimport__)) struct tm *__attribute__((__cdecl__)) _localtime64(const __time64_t *_Time) ;
  __attribute__ ((__dllimport__)) __time64_t __attribute__((__cdecl__)) _mktime64(struct tm *_Tm);
  __attribute__ ((__dllimport__)) __time64_t __attribute__((__cdecl__)) _mkgmtime64(struct tm *_Tm);
  __attribute__ ((__dllimport__)) __time64_t __attribute__((__cdecl__)) _time64(__time64_t *_Time);
  unsigned __attribute__((__cdecl__)) _getsystime(struct tm *_Tm);
  unsigned __attribute__((__cdecl__)) _setsystime(struct tm *_Tm,unsigned _MilliSec);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wasctime(const struct tm *_Tm);
  wchar_t *__attribute__((__cdecl__)) _wctime32(const __time32_t *_Time) ;
  size_t __attribute__((__cdecl__)) wcsftime(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcsftime_l(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wstrdate(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wstrtime(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wctime64(const __time64_t *_Time) ;
  wchar_t *__attribute__((__cdecl__)) _wctime(const time_t *) ;
double __attribute__((__cdecl__)) difftime(time_t _Time1,time_t _Time2);
char *__attribute__((__cdecl__)) ctime(const time_t *_Time) ;
struct tm *__attribute__((__cdecl__)) gmtime(const time_t *_Time) ;
struct tm *__attribute__((__cdecl__)) localtime(const time_t *_Time) ;
time_t __attribute__((__cdecl__)) mktime(struct tm *_Tm);
time_t __attribute__((__cdecl__)) _mkgmtime(struct tm *_Tm);
time_t __attribute__((__cdecl__)) time(time_t *_Time);
  __attribute__ ((__dllimport__)) extern int daylight;
  __attribute__ ((__dllimport__)) extern long timezone;
  __attribute__ ((__dllimport__)) extern char *tzname[2];
  void __attribute__((__cdecl__)) tzset(void) ;
struct unix_timeval
{
 long tv_sec;
 long tv_usec;
};
struct timezone {
  int tz_minuteswest;
  int tz_dsttime;
};
  extern int __attribute__((__cdecl__)) mingw_gettimeofday (struct unix_timeval *p, struct timezone *z);


  struct __timeb32 {
    __time32_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  };
  struct timeb {
    time_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  };
  struct __timeb64 {
    __time64_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  };
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _ftime64(struct __timeb64 *_Time);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _ftime(struct __timeb32 *);
  void __attribute__((__cdecl__)) ftime (struct timeb *);


  typedef int (__attribute__((__cdecl__)) *_onexit_t)(void);
  typedef struct _div_t {
    int quot;
    int rem;
  } div_t;
  typedef struct _ldiv_t {
    long quot;
    long rem;
  } ldiv_t;

  typedef struct {
    unsigned char ld[10];
  } _LDOUBLE;

  typedef struct {
    double x;
  } _CRT_DOUBLE;
  typedef struct {
    float f;
  } _CRT_FLOAT;
       
  typedef struct {
    long double x;
  } _LONGDOUBLE;
       

  typedef struct {
    unsigned char ld12[12];
  } _LDBL12;

  typedef void (__attribute__((__cdecl__)) *_purecall_handler)(void);
  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _set_purecall_handler(_purecall_handler _Handler);
  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _get_purecall_handler(void);
  typedef void (__attribute__((__cdecl__)) *_invalid_parameter_handler)(const wchar_t *,const wchar_t *,const wchar_t *,unsigned int,uintptr_t);
  _invalid_parameter_handler __attribute__((__cdecl__)) _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
  _invalid_parameter_handler __attribute__((__cdecl__)) _get_invalid_parameter_handler(void);
  __attribute__ ((__dllimport__)) unsigned long *__attribute__((__cdecl__)) __doserrno(void);
  errno_t __attribute__((__cdecl__)) _set_doserrno(unsigned long _Value);
  errno_t __attribute__((__cdecl__)) _get_doserrno(unsigned long *_Value);
  extern __attribute__ ((__dllimport__)) char *_sys_errlist[1];
  extern __attribute__ ((__dllimport__)) int _sys_nerr;
  __attribute__ ((__dllimport__)) int *__attribute__((__cdecl__)) __p___argc(void);
  __attribute__ ((__dllimport__)) char ***__attribute__((__cdecl__)) __p___argv(void);
  __attribute__ ((__dllimport__)) wchar_t ***__attribute__((__cdecl__)) __p___wargv(void);
  __attribute__ ((__dllimport__)) char ***__attribute__((__cdecl__)) __p__environ(void);
  __attribute__ ((__dllimport__)) wchar_t ***__attribute__((__cdecl__)) __p__wenviron(void);
  __attribute__ ((__dllimport__)) char **__attribute__((__cdecl__)) __p__pgmptr(void);
  __attribute__ ((__dllimport__)) wchar_t **__attribute__((__cdecl__)) __p__wpgmptr(void);
  extern int * _imp____argc;
  extern char *** _imp____argv;
  extern wchar_t *** _imp____wargv;
  extern char *** _imp___environ;
  extern wchar_t *** _imp___wenviron;
  extern char ** _imp___pgmptr;
  extern wchar_t ** _imp___wpgmptr;
  errno_t __attribute__((__cdecl__)) _get_pgmptr(char **_Value);
  errno_t __attribute__((__cdecl__)) _get_wpgmptr(wchar_t **_Value);
  extern int * _imp___fmode;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_fmode(int _Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_fmode(int *_PMode);
  extern unsigned int * _imp___osplatform;
  extern unsigned int * _imp___osver;
  extern unsigned int * _imp___winver;
  extern unsigned int * _imp___winmajor;
  extern unsigned int * _imp___winminor;
  errno_t __attribute__((__cdecl__)) _get_osplatform(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_osver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winmajor(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winminor(unsigned int *_Value);
  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) exit(int _Code) __attribute__ ((__noreturn__));
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _exit(int _Code) __attribute__ ((__noreturn__));
  void __attribute__((__cdecl__)) _Exit(int) __attribute__ ((__noreturn__));
       
  void __attribute__((__cdecl__)) __attribute__((noreturn)) abort(void);
       
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_abort_behavior(unsigned int _Flags,unsigned int _Mask);
  int __attribute__((__cdecl__)) abs(int _X);
  long __attribute__((__cdecl__)) labs(long _X);
  long long __attribute__((__cdecl__)) _abs64(long long);
  int __attribute__((__cdecl__)) atexit(void (__attribute__((__cdecl__)) *)(void));
  double __attribute__((__cdecl__)) atof(const char *_String);
  double __attribute__((__cdecl__)) _atof_l(const char *_String,_locale_t _Locale);
  int __attribute__((__cdecl__)) atoi(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoi_l(const char *_Str,_locale_t _Locale);
  long __attribute__((__cdecl__)) atol(const char *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _atol_l(const char *_Str,_locale_t _Locale);
  void *__attribute__((__cdecl__)) bsearch(const void *_Key,const void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));
  void __attribute__((__cdecl__)) qsort(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));
  unsigned short __attribute__((__cdecl__)) _byteswap_ushort(unsigned short _Short);
  unsigned long long __attribute__((__cdecl__)) _byteswap_uint64(unsigned long long _Int64);
  div_t __attribute__((__cdecl__)) div(int _Numerator,int _Denominator);
  char *__attribute__((__cdecl__)) getenv(const char *_VarName) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _itoa(int _Value,char *_Dest,int _Radix);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _i64toa(long long _Val,char *_DstBuf,int _Radix) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ui64toa(unsigned long long _Val,char *_DstBuf,int _Radix) ;
  __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64(const char *_String);
  __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64_l(const char *_String,_locale_t _Locale);
  __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64(const char *_String,char **_EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64(const char *_String,char **_EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  ldiv_t __attribute__((__cdecl__)) ldiv(long _Numerator,long _Denominator);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ltoa(long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) mblen(const char *_Ch,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mblen_l(const char *_Ch,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen(const char *_Str);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen_l(const char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen(const char *_Str,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen_l(const char *_Str,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mbtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mbtowc_l(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) mbstowcs(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstowcs_l(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) rand(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_error_mode(int _Mode);
  void __attribute__((__cdecl__)) srand(unsigned int _Seed);
  double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtod(const char * __restrict__ _Str,char ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtof(const char * __restrict__ nptr, char ** __restrict__ endptr);
  long double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtold(const char * __restrict__ , char ** __restrict__ );
  extern double __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
  __strtod (const char * __restrict__ , char ** __restrict__);
  float __attribute__((__cdecl__)) __mingw_strtof (const char * __restrict__, char ** __restrict__);
  long double __attribute__((__cdecl__)) __mingw_strtold(const char * __restrict__, char ** __restrict__);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _strtod_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) strtol(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _strtol_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) strtoul(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _strtoul_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  int __attribute__((__cdecl__)) system(const char *_Command);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ultoa(unsigned long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) wctomb(char *_MbCh,wchar_t _WCh) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wctomb_l(char *_MbCh,wchar_t _WCh,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcstombs(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcstombs_l(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale) ;
  void *__attribute__((__cdecl__)) calloc(size_t _NumOfElements,size_t _SizeOfElements);
  void __attribute__((__cdecl__)) free(void *_Memory);
  void *__attribute__((__cdecl__)) malloc(size_t _Size);
  void *__attribute__((__cdecl__)) realloc(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _recalloc(void *_Memory,size_t _Count,size_t _Size);
       
       
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _aligned_free(void *_Memory);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_malloc(size_t _Size,size_t _Alignment);
       
       
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_malloc(size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_realloc(void *_Memory,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_realloc(void *_Memory,size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _itow(int _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ltow(long _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ultow(unsigned long _Value,wchar_t *_Dest,int _Radix) ;
  double __attribute__((__cdecl__)) wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);
  double __attribute__((__cdecl__)) __mingw_wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __mingw_wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);
  long double __attribute__((__cdecl__)) __mingw_wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);
  float __attribute__((__cdecl__)) wcstof( const wchar_t * __restrict__, wchar_t ** __restrict__);
  long double __attribute__((__cdecl__)) wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wcstod_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) wcstol(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wcstol_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) wcstoul(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _wcstoul_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetenv(const wchar_t *_VarName) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wsystem(const wchar_t *_Command);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _i64tow(long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ui64tow(unsigned long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64_l(const wchar_t *_Str ,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fullpath(char *_FullPath,const char *_Path,size_t _SizeInBytes);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl(_CRT_DOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl(_LDOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt(_CRT_FLOAT *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl_l(_CRT_DOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl_l(_LDOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt_l(_CRT_FLOAT *_Result,char *_Str,_locale_t _Locale);
       
       
  unsigned long __attribute__((__cdecl__)) _lrotl(unsigned long _Val,int _Shift);
  unsigned long __attribute__((__cdecl__)) _lrotr(unsigned long _Val,int _Shift);
       
       
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _makepath(char *_Path,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  _onexit_t __attribute__((__cdecl__)) _onexit(_onexit_t _Func);
  void __attribute__((__cdecl__)) perror(const char *_ErrMsg);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putenv(const char *_EnvString);
       
       
  unsigned long long __attribute__((__cdecl__)) _rotl64(unsigned long long _Val,int _Shift);
  unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long Value,int Shift);
       
       
       
       
  unsigned int __attribute__((__cdecl__)) _rotr(unsigned int _Val,int _Shift);
  unsigned int __attribute__((__cdecl__)) _rotl(unsigned int _Val,int _Shift);
       
       
  unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long _Val,int _Shift);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _searchenv(const char *_Filename,const char *_EnvVar,char *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _splitpath(const char *_FullPath,char *_Drive,char *_Dir,char *_Filename,char *_Ext) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _swab(char *_Buf1,char *_Buf2,int _SizeInBytes);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wfullpath(wchar_t *_FullPath,const wchar_t *_Path,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wmakepath(wchar_t *_ResultPath,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wperror(const wchar_t *_ErrMsg);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wputenv(const wchar_t *_EnvString);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsearchenv(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsplitpath(const wchar_t *_FullPath,wchar_t *_Drive,wchar_t *_Dir,wchar_t *_Filename,wchar_t *_Ext) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _beep(unsigned _Frequency,unsigned _Duration) __attribute__ ((__deprecated__));
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _seterrormode(int _Mode) __attribute__ ((__deprecated__));
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _sleep(unsigned long _Duration) __attribute__ ((__deprecated__));
  char *__attribute__((__cdecl__)) ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  char *__attribute__((__cdecl__)) itoa(int _Val,char *_DstBuf,int _Radix) ;
  char *__attribute__((__cdecl__)) ltoa(long _Val,char *_DstBuf,int _Radix) ;
  int __attribute__((__cdecl__)) putenv(const char *_EnvString) ;
  void __attribute__((__cdecl__)) swab(char *_Buf1,char *_Buf2,int _SizeInBytes) ;
  char *__attribute__((__cdecl__)) ultoa(unsigned long _Val,char *_Dstbuf,int _Radix) ;
  _onexit_t __attribute__((__cdecl__)) onexit(_onexit_t _Func);
  typedef struct { long long quot, rem; } lldiv_t;
  lldiv_t __attribute__((__cdecl__)) lldiv(long long, long long);
  long long __attribute__((__cdecl__)) llabs(long long);
  long long __attribute__((__cdecl__)) strtoll(const char * __restrict__, char ** __restrict, int);
  unsigned long long __attribute__((__cdecl__)) strtoull(const char * __restrict__, char ** __restrict__, int);
  long long __attribute__((__cdecl__)) atoll (const char *);
  long long __attribute__((__cdecl__)) wtoll (const wchar_t *);
  char *__attribute__((__cdecl__)) lltoa (long long, char *, int);
  char *__attribute__((__cdecl__)) ulltoa (unsigned long long , char *, int);
  wchar_t *__attribute__((__cdecl__)) lltow (long long, wchar_t *, int);
  wchar_t *__attribute__((__cdecl__)) ulltow (unsigned long long, wchar_t *, int);


  typedef struct _heapinfo {
    int *_pentry;
    size_t _size;
    int _useflag;
  } _HEAPINFO;
  extern unsigned int _amblksiz;
       
       
       
       
void * __mingw_aligned_malloc (size_t _Size, size_t _Alignment);
void __mingw_aligned_free (void *_Memory);
void * __mingw_aligned_offset_realloc (void *_Memory, size_t _Size, size_t _Alignment, size_t _Offset);
void * __mingw_aligned_realloc (void *_Memory, size_t _Size, size_t _Offset);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _resetstkoflw (void);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _set_malloc_crt_max_wait(unsigned long _NewValue);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _expand(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _msize(void *_Memory);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _get_sbh_threshold(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_sbh_threshold(size_t _NewValue);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_amblksiz(size_t _Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_amblksiz(size_t *_Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapadd(void *_Memory,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapchk(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapmin(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapset(unsigned int _Fill);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapwalk(_HEAPINFO *_EntryInfo);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _heapused(size_t *_Used,size_t *_Commit);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _get_heap_handle(void);
  static __inline__ void *_MarkAllocaS(void *_Ptr,unsigned int _Marker) {
    if(_Ptr) {
      *((unsigned int*)_Ptr) = _Marker;
      _Ptr = (char*)_Ptr + 8;
    }
    return _Ptr;
  }
  static __inline__ void __attribute__((__cdecl__)) _freea(void *_Memory) {
    unsigned int _Marker;
    if(_Memory) {
      _Memory = (char*)_Memory - 8;
      _Marker = *(unsigned int *)_Memory;
      if(_Marker==0xDDDD) {
 free(_Memory);
      }
    }
  }

typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef ULONG u_long;
typedef struct protoent
{
    char* p_name;
    char** p_aliases;
    short p_proto;
} PROTOENT, *PPROTOENT, *LPPROTOENT;
struct netent
{
    char* n_name;
    char** n_aliases;
    short n_addrtype;
    ULONG n_net;
};
typedef struct servent
{
    char* s_name;
    char** s_aliases;
    short s_port;
    char* s_proto;
} SERVENT, *PSERVENT, *LPSERVENT;
typedef struct hostent
{
    char* h_name;
    char** h_aliases;
    short h_addrtype;
    short h_length;
    char** h_addr_list;
} HOSTENT, *PHOSTENT, *LPHOSTENT;
typedef UINT_PTR SOCKET;
typedef struct sockaddr
{
        u_short sa_family;
        char sa_data[14];
} SOCKADDR, *PSOCKADDR, *LPSOCKADDR;
typedef struct linger
{
    u_short l_onoff;
    u_short l_linger;
} LINGER, *PLINGER, *LPLINGER;
typedef struct fd_set
{
    u_int fd_count;
    SOCKET fd_array[64];
} fd_set, FD_SET, *PFD_SET, *LPFD_SET;
typedef struct timeval
{
    LONG tv_sec;
    LONG tv_usec;
} TIMEVAL, *PTIMEVAL, *LPTIMEVAL;
int __attribute__((__stdcall__)) __WSAFDIsSet(SOCKET,fd_set*);
static inline u_short __wine_ushort_swap(u_short s)
{
    return (s >> 8) | (s << 8);
}
static inline ULONG __wine_ulong_swap(ULONG l)
{
    return ((ULONG)__wine_ushort_swap((u_short)l) << 16) | __wine_ushort_swap((u_short)(l >> 16));
}
typedef struct in_addr
{
    union {
        struct {
            u_char s_b1,s_b2,s_b3,s_b4;
        } S_un_b;
        struct {
            u_short s_w1,s_w2;
        } S_un_w;
        ULONG S_addr;
    } S_un;
} IN_ADDR, *PIN_ADDR, *LPIN_ADDR;
typedef struct sockaddr_in
{
    short sin_family;
    u_short sin_port;
    struct in_addr sin_addr;
    char sin_zero[8];
} SOCKADDR_IN, *PSOCKADDR_IN, *LPSOCKADDR_IN;
typedef struct WSAData
{
    WORD wVersion;
    WORD wHighVersion;
    char szDescription[256 +1];
    char szSystemStatus[128 +1];
    WORD iMaxSockets;
    WORD iMaxUdpDg;
    char *lpVendorInfo;
} WSADATA, *LPWSADATA;
HANDLE __attribute__((__stdcall__)) WSAAsyncGetHostByAddr(HWND,u_int,const char*,int,int,char*,int);
HANDLE __attribute__((__stdcall__)) WSAAsyncGetHostByName(HWND,u_int,const char*,char*,int);
HANDLE __attribute__((__stdcall__)) WSAAsyncGetProtoByName(HWND,u_int,const char*,char*,int);
HANDLE __attribute__((__stdcall__)) WSAAsyncGetProtoByNumber(HWND,u_int,int,char*,int);
HANDLE __attribute__((__stdcall__)) WSAAsyncGetServByName(HWND,u_int,const char*,const char*,char*,int);
HANDLE __attribute__((__stdcall__)) WSAAsyncGetServByPort(HWND,u_int,int,const char*,char*,int);
int __attribute__((__stdcall__)) WSAAsyncSelect(SOCKET,HWND,u_int,LONG);
int __attribute__((__stdcall__)) WSACancelAsyncRequest(HANDLE);
int __attribute__((__stdcall__)) WSACancelBlockingCall(void);
int __attribute__((__stdcall__)) WSACleanup(void);
int __attribute__((__stdcall__)) WSAGetLastError(void);
BOOL __attribute__((__stdcall__)) WSAIsBlocking(void);
FARPROC __attribute__((__stdcall__)) WSASetBlockingHook(FARPROC);
void __attribute__((__stdcall__)) WSASetLastError(int);
int __attribute__((__stdcall__)) WSAStartup(WORD,LPWSADATA);
int __attribute__((__stdcall__)) WSAUnhookBlockingHook(void);
SOCKET __attribute__((__stdcall__)) accept(SOCKET,struct sockaddr*,int*);
int __attribute__((__stdcall__)) bind(SOCKET,const struct sockaddr*,int);
int __attribute__((__stdcall__)) closesocket(SOCKET);
int __attribute__((__stdcall__)) connect(SOCKET,const struct sockaddr*,int);
struct hostent* __attribute__((__stdcall__)) gethostbyaddr(const char*,int,int);
struct hostent* __attribute__((__stdcall__)) gethostbyname(const char*);
int __attribute__((__stdcall__)) getpeername(SOCKET,struct sockaddr*,int*);
struct protoent* __attribute__((__stdcall__)) getprotobyname(const char*);
struct protoent* __attribute__((__stdcall__)) getprotobynumber(int);
int __attribute__((__stdcall__)) select(int,fd_set*,fd_set*,fd_set*,const struct timeval*);
struct servent* __attribute__((__stdcall__)) getservbyname(const char*,const char*);
struct servent* __attribute__((__stdcall__)) getservbyport(int,const char*);
int __attribute__((__stdcall__)) getsockname(SOCKET,struct sockaddr*,int*);
int __attribute__((__stdcall__)) getsockopt(SOCKET,int,int,char*,int*);
ULONG __attribute__((__stdcall__)) inet_addr(const char*);
char* __attribute__((__stdcall__)) inet_ntoa(struct in_addr);
int __attribute__((__stdcall__)) ioctlsocket(SOCKET,LONG,ULONG*);
int __attribute__((__stdcall__)) listen(SOCKET,int);
int __attribute__((__stdcall__)) recv(SOCKET,char*,int,int);
int __attribute__((__stdcall__)) recvfrom(SOCKET,char*,int,int,struct sockaddr*,int*);
int __attribute__((__stdcall__)) send(SOCKET,const char*,int,int);
int __attribute__((__stdcall__)) sendto(SOCKET,const char*,int,int,const struct sockaddr*,int);
int __attribute__((__stdcall__)) setsockopt(SOCKET,int,int,const char*,int);
int __attribute__((__stdcall__)) shutdown(SOCKET,int);
SOCKET __attribute__((__stdcall__)) socket(int,int,int);
typedef struct _SOCKET_ADDRESS {
        LPSOCKADDR lpSockaddr;
        INT iSockaddrLength;
} SOCKET_ADDRESS, *PSOCKET_ADDRESS, *LPSOCKET_ADDRESS;
typedef struct _CSADDR_INFO {
        SOCKET_ADDRESS LocalAddr;
        SOCKET_ADDRESS RemoteAddr;
        INT iSocketType;
        INT iProtocol;
} CSADDR_INFO, *PCSADDR_INFO, *LPCSADDR_INFO;
typedef struct sockaddr_storage {
        short ss_family;
        char __ss_pad1[((sizeof(long long)) - sizeof(short))];
        long long __attribute__((aligned(8))) __ss_align;
        char __ss_pad2[(128 - 2 * (sizeof(long long)))];
} SOCKADDR_STORAGE, *PSOCKADDR_STORAGE, *LPSOCKADDR_STORAGE;
typedef struct _SOCKET_ADDRESS_LIST {
        INT iAddressCount;
        SOCKET_ADDRESS Address[1];
} SOCKET_ADDRESS_LIST, *LPSOCKET_ADDRESS_LIST;
typedef enum {
    ScopeLevelInterface = 1,
    ScopeLevelLink = 2,
    ScopeLevelSubnet = 3,
    ScopeLevelAdmin = 4,
    ScopeLevelSite = 5,
    ScopeLevelOrganization = 8,
    ScopeLevelGlobal = 14
} SCOPE_LEVEL;
typedef struct _WSAPROTOCOLCHAIN
{
    int ChainLen;
    DWORD ChainEntries[7];
} WSAPROTOCOLCHAIN, * LPWSAPROTOCOLCHAIN;
typedef struct _WSAPROTOCOL_INFOA
{
    DWORD dwServiceFlags1;
    DWORD dwServiceFlags2;
    DWORD dwServiceFlags3;
    DWORD dwServiceFlags4;
    DWORD dwProviderFlags;
    GUID ProviderId;
    DWORD dwCatalogEntryId;
    WSAPROTOCOLCHAIN ProtocolChain;
    int iVersion;
    int iAddressFamily;
    int iMaxSockAddr;
    int iMinSockAddr;
    int iSocketType;
    int iProtocol;
    int iProtocolMaxOffset;
    int iNetworkByteOrder;
    int iSecurityScheme;
    DWORD dwMessageSize;
    DWORD dwProviderReserved;
    CHAR szProtocol[255 +1];
} WSAPROTOCOL_INFOA, * LPWSAPROTOCOL_INFOA;
typedef struct _WSAPROTOCOL_INFOW
{
    DWORD dwServiceFlags1;
    DWORD dwServiceFlags2;
    DWORD dwServiceFlags3;
    DWORD dwServiceFlags4;
    DWORD dwProviderFlags;
    GUID ProviderId;
    DWORD dwCatalogEntryId;
    WSAPROTOCOLCHAIN ProtocolChain;
    int iVersion;
    int iAddressFamily;
    int iMaxSockAddr;
    int iMinSockAddr;
    int iSocketType;
    int iProtocol;
    int iProtocolMaxOffset;
    int iNetworkByteOrder;
    int iSecurityScheme;
    DWORD dwMessageSize;
    DWORD dwProviderReserved;
    WCHAR szProtocol[255 +1];
} WSAPROTOCOL_INFOW, *LPWSAPROTOCOL_INFOW;
typedef WSAPROTOCOL_INFOA WSAPROTOCOL_INFO;
typedef LPWSAPROTOCOL_INFOA LPWSAPROTOCOL_INFO;
typedef struct _WSANETWORKEVENTS
{
    LONG lNetworkEvents;
    int iErrorCode[10];
} WSANETWORKEVENTS, *LPWSANETWORKEVENTS;
typedef struct _WSANSClassInfoA
{
    LPSTR lpszName;
    DWORD dwNameSpace;
    DWORD dwValueType;
    DWORD dwValueSize;
    LPVOID lpValue;
} WSANSCLASSINFOA, *PWSANSCLASSINFOA, *LPWSANSCLASSINFOA;
typedef struct _WSANSClassInfoW
{
    LPSTR lpszName;
    DWORD dwNameSpace;
    DWORD dwValueType;
    DWORD dwValueSize;
    LPVOID lpValue;
} WSANSCLASSINFOW, *PWSANSCLASSINFOW, *LPWSANSCLASSINFOW;
typedef WSANSCLASSINFOA WSANSCLASSINFO;
typedef PWSANSCLASSINFOA PWSANSCLASSINFO;
typedef LPWSANSCLASSINFOA LPWSANSCLASSINFO;
typedef struct _WSAServiceClassInfoA
{
    LPGUID lpServiceClassId;
    LPSTR lpszServiceClassName;
    DWORD dwCount;
    LPWSANSCLASSINFOA lpClassInfos;
} WSASERVICECLASSINFOA, *PWSASERVICECLASSINFOA, *LPWSASERVICECLASSINFOA;
typedef struct _WSAServiceClassInfoW
{
    LPGUID lpServiceClassId;
    LPWSTR lpszServiceClassName;
    DWORD dwCount;
    LPWSANSCLASSINFOW lpClassInfos;
} WSASERVICECLASSINFOW, *PWSASERVICECLASSINFOW, *LPWSASERVICECLASSINFOW;
typedef WSASERVICECLASSINFOA WSASERVICECLASSINFO;
typedef PWSASERVICECLASSINFOA PWSASERVICECLASSINFO;
typedef LPWSASERVICECLASSINFOA LPWSASERVICECLASSINFO;
typedef struct _WSABUF
{
    ULONG len;
    CHAR* buf;
} WSABUF, *LPWSABUF;
typedef struct _OVERLAPPED* LPWSAOVERLAPPED;
typedef unsigned int GROUP;
typedef ULONG SERVICETYPE;
typedef struct _FLOWSPEC {
       unsigned int TokenRate;
       unsigned int TokenBucketSize;
       unsigned int PeakBandwidth;
       unsigned int Latency;
       unsigned int DelayVariation;
       SERVICETYPE ServiceType;
       unsigned int MaxSduSize;
       unsigned int MinimumPolicedSize;
   } FLOWSPEC, *PFLOWSPEC, *LPFLOWSPEC;
typedef struct _QUALITYOFSERVICE {
        FLOWSPEC SendingFlowspec;
        FLOWSPEC ReceivingFlowspec;
        WSABUF ProviderSpecific;
   } QOS, *LPQOS;
typedef int (__attribute__((__stdcall__)) *LPCONDITIONPROC)
(
    LPWSABUF lpCallerId,
    LPWSABUF lpCallerData,
    LPQOS lpSQOS,
    LPQOS lpGQOS,
    LPWSABUF lpCalleeId,
    LPWSABUF lpCalleeData,
    GROUP *g,
    DWORD dwCallbackData
);
typedef void (__attribute__((__stdcall__)) *LPWSAOVERLAPPED_COMPLETION_ROUTINE)
(
    DWORD dwError,
    DWORD cbTransferred,
    LPWSAOVERLAPPED lpOverlapped,
    DWORD dwFlags
);
typedef struct _BLOB {
        ULONG cbSize;
        BYTE *pBlobData;
} BLOB, *LPBLOB;
typedef struct _AFPROTOCOLS {
        INT iAddressFamily;
        INT iProtocol;
} AFPROTOCOLS, *PAFPROTOCOLS, *LPAFPROTOCOLS;
typedef enum _WSAEcomparator {
        COMP_EQUAL = 0,
        COMP_NOTLESS
} WSAECOMPARATOR, *PWSAECOMPARATOR, *LPWSAECOMPARATOR;
typedef struct _WSAVersion {
        DWORD dwVersion;
        WSAECOMPARATOR ecHow;
} WSAVERSION, *PWSAVERSION, *LPWSAVERSION;
typedef struct _WSAQuerySetA {
        DWORD dwSize;
        LPSTR lpszServiceInstanceName;
        LPGUID lpServiceClassId;
        LPWSAVERSION lpVersion;
        LPSTR lpszComment;
        DWORD dwNameSpace;
        LPGUID lpNSProviderId;
        LPSTR lpszContext;
        DWORD dwNumberOfProtocols;
        LPAFPROTOCOLS lpafpProtocols;
        LPSTR lpszQueryString;
        DWORD dwNumberOfCsAddrs;
        LPCSADDR_INFO lpcsaBuffer;
        DWORD dwOutputFlags;
        LPBLOB lpBlob;
} WSAQUERYSETA, *PWSAQUERYSETA, *LPWSAQUERYSETA;
typedef struct _WSAQuerySetW {
        DWORD dwSize;
        LPWSTR lpszServiceInstanceName;
        LPGUID lpServiceClassId;
        LPWSAVERSION lpVersion;
        LPWSTR lpszComment;
        DWORD dwNameSpace;
        LPGUID lpNSProviderId;
        LPWSTR lpszContext;
        DWORD dwNumberOfProtocols;
        LPAFPROTOCOLS lpafpProtocols;
        LPWSTR lpszQueryString;
        DWORD dwNumberOfCsAddrs;
        LPCSADDR_INFO lpcsaBuffer;
        DWORD dwOutputFlags;
        LPBLOB lpBlob;
} WSAQUERYSETW, *PWSAQUERYSETW, *LPWSAQUERYSETW;
typedef WSAQUERYSETA WSAQUERYSET;
typedef PWSAQUERYSETA PWSAQUERYSET;
typedef LPWSAQUERYSETA LPWSAQUERYSET;
typedef enum _WSAESETSERVICEOP {
        RNRSERVICE_REGISTER = 0,
        RNRSERVICE_DEREGISTER,
        RNRSERVICE_DELETE
} WSAESETSERVICEOP, *PWSAESETSERVICEOP, *LPWSAESETSERVICEOP;
typedef struct _WSANAMESPACE_INFOA {
        GUID NSProviderId;
        DWORD dwNameSpace;
        BOOL fActive;
        DWORD dwVersion;
        LPSTR lpszIdentifier;
} WSANAMESPACE_INFOA, *PWSANAMESPACE_INFOA, *LPWSANAMESPACE_INFOA;
typedef struct _WSANAMESPACE_INFOW {
        GUID NSProviderId;
        DWORD dwNameSpace;
        BOOL fActive;
        DWORD dwVersion;
        LPWSTR lpszIdentifier;
} WSANAMESPACE_INFOW, *PWSANAMESPACE_INFOW, *LPWSANAMESPACE_INFOW;
typedef WSANAMESPACE_INFOA WSANAMESPACE_INFO;
typedef PWSANAMESPACE_INFOA PWSANAMESPACE_INFO;
typedef LPWSANAMESPACE_INFOA LPWSANAMESPACE_INFO;
typedef enum _WSACOMPLETIONTYPE {
    NSP_NOTIFY_IMMEDIATELY = 0,
    NSP_NOTIFY_HWND = 1,
    NSP_NOTIFY_EVENT = 2,
    NSP_NOTIFY_PORT = 3,
    NSP_NOTIFY_APC = 4
} WSACOMPLETIONTYPE, * PWSACOMPLETIONTYPE, * LPWSACOMPLETIONTYPE;
typedef struct _WSACOMPLETION {
    WSACOMPLETIONTYPE Type;
    union {
        struct {
            HWND hWnd;
            UINT uMsg;
            WPARAM context;
        } WindowMessage;
        struct {
            LPWSAOVERLAPPED lpOverlapped;
        } Event;
        struct {
            LPWSAOVERLAPPED lpOverlapped;
            LPWSAOVERLAPPED_COMPLETION_ROUTINE lpfnCompletionProc;
        } Apc;
        struct {
            LPWSAOVERLAPPED lpOverlapped;
            HANDLE hPort;
            ULONG_PTR Key;
        } Port;
    } Parameters;
} WSACOMPLETION, *PWSACOMPLETION, *LPWSACOMPLETION;
SOCKET __attribute__((__stdcall__)) WSAAccept(SOCKET,struct sockaddr*,LPINT,LPCONDITIONPROC,DWORD);
INT __attribute__((__stdcall__)) WSAAddressToStringA(LPSOCKADDR,DWORD,LPWSAPROTOCOL_INFOA,LPSTR,LPDWORD);
INT __attribute__((__stdcall__)) WSAAddressToStringW(LPSOCKADDR,DWORD,LPWSAPROTOCOL_INFOW,LPWSTR,LPDWORD);
BOOL __attribute__((__stdcall__)) WSACloseEvent(HANDLE);
int __attribute__((__stdcall__)) WSAConnect(SOCKET,const struct sockaddr*,int,LPWSABUF,LPWSABUF,LPQOS,LPQOS);
HANDLE __attribute__((__stdcall__)) WSACreateEvent(void);
INT __attribute__((__stdcall__)) WSADuplicateSocketA(SOCKET,DWORD,LPWSAPROTOCOL_INFOA);
INT __attribute__((__stdcall__)) WSADuplicateSocketW(SOCKET,DWORD,LPWSAPROTOCOL_INFOW);
INT __attribute__((__stdcall__)) WSAEnumNameSpaceProvidersA(LPDWORD,LPWSANAMESPACE_INFOA);
INT __attribute__((__stdcall__)) WSAEnumNameSpaceProvidersW(LPDWORD,LPWSANAMESPACE_INFOW);
int __attribute__((__stdcall__)) WSAEnumNetworkEvents(SOCKET,HANDLE,LPWSANETWORKEVENTS);
int __attribute__((__stdcall__)) WSAEnumProtocolsA(LPINT,LPWSAPROTOCOL_INFOA,LPDWORD);
int __attribute__((__stdcall__)) WSAEnumProtocolsW(LPINT,LPWSAPROTOCOL_INFOW,LPDWORD);
int __attribute__((__stdcall__)) WSAEventSelect(SOCKET,HANDLE,LONG);
BOOL __attribute__((__stdcall__)) WSAGetOverlappedResult(SOCKET,LPWSAOVERLAPPED,LPDWORD,BOOL,LPDWORD);
BOOL __attribute__((__stdcall__)) WSAGetQOSByName(SOCKET,LPWSABUF,LPQOS);
INT __attribute__((__stdcall__)) WSAGetServiceClassInfoA(LPGUID,LPGUID,LPDWORD,LPWSASERVICECLASSINFOA);
INT __attribute__((__stdcall__)) WSAGetServiceClassInfoW(LPGUID,LPGUID,LPDWORD,LPWSASERVICECLASSINFOW);
INT __attribute__((__stdcall__)) WSAGetServiceClassNameByClassIdA(LPGUID,LPSTR,LPDWORD);
INT __attribute__((__stdcall__)) WSAGetServiceClassNameByClassIdW(LPGUID,LPWSTR,LPDWORD);
int __attribute__((__stdcall__)) WSAHtonl(SOCKET,ULONG,ULONG*);
int __attribute__((__stdcall__)) WSAHtons(SOCKET,u_short,u_short*);
int __attribute__((__stdcall__)) WSAInstallServiceClassA(LPWSASERVICECLASSINFOA);
int __attribute__((__stdcall__)) WSAInstallServiceClassW(LPWSASERVICECLASSINFOW);
int __attribute__((__stdcall__)) WSAIoctl(SOCKET,DWORD,LPVOID,DWORD,LPVOID,DWORD,LPDWORD,LPWSAOVERLAPPED,LPWSAOVERLAPPED_COMPLETION_ROUTINE);
SOCKET __attribute__((__stdcall__)) WSAJoinLeaf(SOCKET,const struct sockaddr*,int,LPWSABUF,LPWSABUF,LPQOS,LPQOS,DWORD);
INT __attribute__((__stdcall__)) WSALookupServiceBeginA(LPWSAQUERYSETA,DWORD,LPHANDLE);
INT __attribute__((__stdcall__)) WSALookupServiceBeginW(LPWSAQUERYSETW,DWORD,LPHANDLE);
INT __attribute__((__stdcall__)) WSALookupServiceEnd(HANDLE);
INT __attribute__((__stdcall__)) WSALookupServiceNextA(HANDLE,DWORD,LPDWORD,LPWSAQUERYSETA);
INT __attribute__((__stdcall__)) WSALookupServiceNextW(HANDLE,DWORD,LPDWORD,LPWSAQUERYSETW);
int __attribute__((__stdcall__)) WSANSPIoctl(HANDLE,DWORD,LPVOID,DWORD,LPVOID,DWORD,LPDWORD,LPWSACOMPLETION);
int __attribute__((__stdcall__)) WSANtohl(SOCKET,ULONG,ULONG*);
int __attribute__((__stdcall__)) WSANtohs(SOCKET,u_short,u_short*);
INT __attribute__((__stdcall__)) WSAProviderConfigChange(LPHANDLE,LPWSAOVERLAPPED,LPWSAOVERLAPPED_COMPLETION_ROUTINE);
int __attribute__((__stdcall__)) WSARecv(SOCKET,LPWSABUF,DWORD,LPDWORD,LPDWORD,LPWSAOVERLAPPED,LPWSAOVERLAPPED_COMPLETION_ROUTINE);
int __attribute__((__stdcall__)) WSARecvDisconnect(SOCKET,LPWSABUF);
int __attribute__((__stdcall__)) WSARecvFrom(SOCKET,LPWSABUF,DWORD,LPDWORD,LPDWORD,struct sockaddr*,LPINT,LPWSAOVERLAPPED,LPWSAOVERLAPPED_COMPLETION_ROUTINE);
INT __attribute__((__stdcall__)) WSARemoveServiceClass(LPGUID);
BOOL __attribute__((__stdcall__)) WSAResetEvent(HANDLE);
int __attribute__((__stdcall__)) WSASend(SOCKET,LPWSABUF,DWORD,LPDWORD,DWORD,LPWSAOVERLAPPED,LPWSAOVERLAPPED_COMPLETION_ROUTINE);
int __attribute__((__stdcall__)) WSASendDisconnect(SOCKET,LPWSABUF);
int __attribute__((__stdcall__)) WSASendTo(SOCKET,LPWSABUF,DWORD,LPDWORD,DWORD,const struct sockaddr*,int,LPWSAOVERLAPPED,LPWSAOVERLAPPED_COMPLETION_ROUTINE);
BOOL __attribute__((__stdcall__)) WSASetEvent(HANDLE);
INT __attribute__((__stdcall__)) WSASetServiceA(LPWSAQUERYSETA,WSAESETSERVICEOP,DWORD);
INT __attribute__((__stdcall__)) WSASetServiceW(LPWSAQUERYSETW,WSAESETSERVICEOP,DWORD);
SOCKET __attribute__((__stdcall__)) WSASocketA(int,int,int,LPWSAPROTOCOL_INFOA,GROUP,DWORD);
SOCKET __attribute__((__stdcall__)) WSASocketW(int,int,int,LPWSAPROTOCOL_INFOW,GROUP,DWORD);
INT __attribute__((__stdcall__)) WSAStringToAddressA(LPSTR,INT,LPWSAPROTOCOL_INFOA,LPSOCKADDR,LPINT);
INT __attribute__((__stdcall__)) WSAStringToAddressW(LPWSTR,INT,LPWSAPROTOCOL_INFOW,LPSOCKADDR,LPINT);
DWORD __attribute__((__stdcall__)) WSAWaitForMultipleEvents(DWORD,const HANDLE*,BOOL,DWORD,BOOL);
typedef LONG NTSTATUS;
typedef unsigned int ALG_ID;
typedef ULONG_PTR HCRYPTPROV;
typedef ULONG_PTR HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;
typedef ULONG_PTR HCRYPTPROV_LEGACY;
typedef ULONG_PTR HCRYPTKEY;
typedef ULONG_PTR HCRYPTHASH;
typedef void *HCERTSTORE;
typedef void *HCRYPTMSG;
typedef void *HCERTSTOREPROV;
typedef void *HCRYPTOIDFUNCSET;
typedef void *HCRYPTOIDFUNCADDR;
typedef void *HCRYPTDEFAULTCONTEXT;
typedef struct _PROV_ENUMALGS {
  ALG_ID aiAlgid;
  DWORD dwBitLen;
  DWORD dwNameLen;
  CHAR szName[20];
} PROV_ENUMALGS;
typedef struct _PROV_ENUMALGS_EX {
  ALG_ID aiAlgid;
  DWORD dwDefaultLen;
  DWORD dwMinLen;
  DWORD dwMaxLen;
  DWORD dwProtocols;
  DWORD dwNameLen;
  CHAR szName[20];
  DWORD dwLongNameLen;
  CHAR szLongName[40];
} PROV_ENUMALGS_EX;
typedef struct _SCHANNEL_ALG {
  DWORD dwUse;
  ALG_ID Algid;
  DWORD cBits;
  DWORD dwFlags;
  DWORD dwReserved;
} SCHANNEL_ALG, *PSCHANNEL_ALG;
typedef struct _HMAC_INFO {
  ALG_ID HashAlgid;
  BYTE* pbInnerString;
  DWORD cbInnerString;
  BYTE* pbOuterString;
  DWORD cbOuterString;
} HMAC_INFO, *PHMAC_INFO;
typedef struct _CRYPTOAPI_BLOB {
  DWORD cbData;
  BYTE* pbData;
} CRYPT_INTEGER_BLOB, *PCRYPT_INTEGER_BLOB,
  CRYPT_UINT_BLOB, *PCRYPT_UINT_BLOB,
  CRYPT_OBJID_BLOB, *PCRYPT_OBJID_BLOB,
  CERT_NAME_BLOB, *PCERT_NAME_BLOB,
  CERT_RDN_VALUE_BLOB, *PCERT_RDN_VALUE_BLOB,
  CERT_BLOB, *PCERT_BLOB,
  CRL_BLOB, *PCRL_BLOB,
  DATA_BLOB, *PDATA_BLOB,
  CRYPT_DATA_BLOB, *PCRYPT_DATA_BLOB,
  CRYPT_HASH_BLOB, *PCRYPT_HASH_BLOB,
  CRYPT_DIGEST_BLOB, *PCRYPT_DIGEST_BLOB,
  CRYPT_DER_BLOB, *PCRYPT_DER_BLOB,
  CRYPT_ATTR_BLOB, *PCRYPT_ATTR_BLOB;
typedef struct _CRYPTPROTECT_PROMPTSTRUCT{
  DWORD cbSize;
  DWORD dwPromptFlags;
  HWND hwndApp;
  LPCWSTR szPrompt;
} CRYPTPROTECT_PROMPTSTRUCT, *PCRYPTPROTECT_PROMPTSTRUCT;
typedef struct _CRYPT_ALGORITHM_IDENTIFIER {
  LPSTR pszObjId;
  CRYPT_OBJID_BLOB Parameters;
} CRYPT_ALGORITHM_IDENTIFIER, *PCRYPT_ALGORITHM_IDENTIFIER;
typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE {
  LPSTR pszObjId;
  CRYPT_OBJID_BLOB Value;
} CRYPT_ATTRIBUTE_TYPE_VALUE, *PCRYPT_ATTRIBUTE_TYPE_VALUE;
typedef struct _PUBLICKEYSTRUC {
    BYTE bType;
    BYTE bVersion;
    WORD reserved;
    ALG_ID aiKeyAlg;
} BLOBHEADER, PUBLICKEYSTRUC;
typedef struct _RSAPUBKEY {
    DWORD magic;
    DWORD bitlen;
    DWORD pubexp;
} RSAPUBKEY;
typedef struct _PUBKEY {
    DWORD magic;
    DWORD bitlen;
} DHPUBKEY, DSSPUBKEY, KEAPUBKEY, TEKPUBKEY;
typedef struct _DSSSEED {
    DWORD counter;
    BYTE seed[20];
} DSSSEED;
typedef struct _PUBKEYVER3 {
    DWORD magic;
    DWORD bitlenP;
    DWORD bitlenQ;
    DWORD bitlenJ;
    DSSSEED DSSSeed;
} DHPUBKEY_VER3, DSSPUBKEY_VER3;
typedef struct _PRIVKEYVER3 {
    DWORD magic;
    DWORD bitlenP;
    DWORD bitlenQ;
    DWORD bitlenJ;
    DWORD bitlenX;
    DSSSEED DSSSeed;
} DHPRIVKEY_VER3, DSSPRIVKEY_VER3;
typedef struct _KEY_TYPE_SUBTYPE {
    DWORD dwKeySpec;
    GUID Type;
    GUID SubType;
} KEY_TYPE_SUBTYPE, *PKEY_TYPE_SUBTYPE;
typedef struct _CERT_FORTEZZA_DATA_PROP {
    unsigned char SerialNumber[8];
    int CertIndex;
    unsigned char CertLabel[36];
} CERT_FORTEZZA_DATA_PROP;
typedef struct _CMS_DH_KEY_INFO {
    DWORD dwVersion;
    ALG_ID Algid;
    LPSTR pszContentEncObjId;
    CRYPT_DATA_BLOB PubInfo;
    void *pReserved;
} CMS_DH_KEY_INFO, *PCMS_DH_KEY_INFO;
typedef struct _CRYPT_BIT_BLOB {
    DWORD cbData;
    BYTE *pbData;
    DWORD cUnusedBits;
} CRYPT_BIT_BLOB, *PCRYPT_BIT_BLOB;
typedef struct _CRYPT_KEY_PROV_PARAM {
    DWORD dwParam;
    BYTE *pbData;
    DWORD cbData;
    DWORD dwFlags;
} CRYPT_KEY_PROV_PARAM, *PCRYPT_KEY_PROV_PARAM;
typedef struct _CRYPT_KEY_PROV_INFO {
    LPWSTR pwszContainerName;
    LPWSTR pwszProvName;
    DWORD dwProvType;
    DWORD dwFlags;
    DWORD cProvParam;
    PCRYPT_KEY_PROV_PARAM rgProvParam;
    DWORD dwKeySpec;
} CRYPT_KEY_PROV_INFO, *PCRYPT_KEY_PROV_INFO;
typedef struct _CERT_KEY_CONTEXT {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
} CERT_KEY_CONTEXT, *PCERT_KEY_CONTEXT;
typedef struct _CERT_PUBLIC_KEY_INFO {
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_BIT_BLOB PublicKey;
} CERT_PUBLIC_KEY_INFO, *PCERT_PUBLIC_KEY_INFO;
typedef struct _CERT_EXTENSION {
    LPSTR pszObjId;
    BOOL fCritical;
    CRYPT_OBJID_BLOB Value;
} CERT_EXTENSION, *PCERT_EXTENSION;
typedef struct _CERT_EXTENSIONS {
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CERT_EXTENSIONS, *PCERT_EXTENSIONS;
typedef struct _CERT_INFO {
    DWORD dwVersion;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME NotBefore;
    FILETIME NotAfter;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    CRYPT_BIT_BLOB IssuerUniqueId;
    CRYPT_BIT_BLOB SubjectUniqueId;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CERT_INFO, *PCERT_INFO;
typedef struct _CERT_RDN_ATTR {
    LPSTR pszObjId;
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
} CERT_RDN_ATTR, *PCERT_RDN_ATTR;
typedef struct _CERT_RDN {
    DWORD cRDNAttr;
    PCERT_RDN_ATTR rgRDNAttr;
} CERT_RDN, *PCERT_RDN;
typedef struct _CERT_NAME_INFO {
    DWORD cRDN;
    PCERT_RDN rgRDN;
} CERT_NAME_INFO, *PCERT_NAME_INFO;
typedef struct _CERT_NAME_VALUE {
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
} CERT_NAME_VALUE, *PCERT_NAME_VALUE;
typedef struct _CERT_ENCRYPTED_PRIVATE_KEY_INFO {
    CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedPrivateKey;
} CERT_ENCRYPTED_PRIVATE_KEY_INFO, *PCERT_ENCRYPTED_PRIVATE_KEY_INFO;
typedef struct _CERT_AUTHORITY_KEY_ID_INFO {
    CRYPT_DATA_BLOB KeyId;
    CERT_NAME_BLOB CertIssuer;
    CRYPT_INTEGER_BLOB CertSerialNumber;
} CERT_AUTHORITY_KEY_ID_INFO, *PCERT_AUTHORITY_KEY_ID_INFO;
typedef struct _CERT_PRIVATE_KEY_VALIDITY {
    FILETIME NotBefore;
    FILETIME NotAfter;
} CERT_PRIVATE_KEY_VALIDITY, *PCERT_PRIVATE_KEY_VALIDITY;
typedef struct _CERT_KEY_ATTRIBUTES_INFO {
    CRYPT_DATA_BLOB KeyId;
    CRYPT_BIT_BLOB IntendedKeyUsage;
    PCERT_PRIVATE_KEY_VALIDITY pPrivateKeyUsagePeriod;
} CERT_KEY_ATTRIBUTES_INFO, *PCERT_KEY_ATTRIBUTES_INFO;
typedef struct _CERT_POLICY_ID {
    DWORD cCertPolicyElementId;
    LPSTR *rgbszCertPolicyElementId;
} CERT_POLICY_ID, *PCERT_POLICY_ID;
typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO {
    DWORD cCertPolicyId;
    PCERT_POLICY_ID rgCertPolicyId;
    CRYPT_BIT_BLOB RestrictedKeyUsage;
} CERT_KEY_USAGE_RESTRICTION_INFO, *PCERT_KEY_USAGE_RESTRICTION_INFO;
typedef struct _CERT_OTHER_NAME {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} CERT_OTHER_NAME, *PCERT_OTHER_NAME;
typedef struct _CERT_ALT_NAME_ENTRY {
    DWORD dwAltNameChoice;
    union {
        PCERT_OTHER_NAME pOtherName;
        LPWSTR pwszRfc822Name;
        LPWSTR pwszDNSName;
        CERT_NAME_BLOB DirectoryName;
        LPWSTR pwszURL;
        CRYPT_DATA_BLOB IPAddress;
        LPSTR pszRegisteredID;
    } ;
} CERT_ALT_NAME_ENTRY, *PCERT_ALT_NAME_ENTRY;
typedef struct _CERT_ALT_NAME_INFO {
    DWORD cAltEntry;
    PCERT_ALT_NAME_ENTRY rgAltEntry;
} CERT_ALT_NAME_INFO, *PCERT_ALT_NAME_INFO;
typedef struct _CERT_BASIC_CONSTRAINTS_INFO {
    CRYPT_BIT_BLOB SubjectType;
    BOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
    DWORD cSubtreesConstraint;
    CERT_NAME_BLOB *rgSubtreesConstraint;
} CERT_BASIC_CONSTRAINTS_INFO, *PCERT_BASIC_CONSTRAINTS_INFO;
typedef struct _CERT_BASIC_CONSTRAINTS2_INFO {
    BOOL fCA;
    BOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
} CERT_BASIC_CONSTRAINTS2_INFO, *PCERT_BASIC_CONSTRAINTS2_INFO;
typedef struct _CERT_POLICY_QUALIFIER_INFO {
    LPSTR pszPolicyQualifierId;
    CRYPT_OBJID_BLOB Qualifier;
} CERT_POLICY_QUALIFIER_INFO, *PCERT_POLICY_QUALIFIER_INFO;
typedef struct _CERT_POLICY_INFO {
    LPSTR pszPolicyIdentifier;
    DWORD cPolicyQualifier;
    CERT_POLICY_QUALIFIER_INFO *rgPolicyQualifier;
} CERT_POLICY_INFO, *PCERT_POLICY_INFO;
typedef struct _CERT_POLICIES_INFO {
    DWORD cPolicyInfo;
    CERT_POLICY_INFO *rgPolicyInfo;
} CERT_POLICIES_INFO, *PCERT_POLICIES_INFO;
typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE {
    LPSTR pszOrganization;
    DWORD cNoticeNumbers;
    int *rgNoticeNumbers;
} CERT_POLICY_QUALIFIER_NOTICE_REFERENCE,
 *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE {
    CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *pNoticeReference;
    LPWSTR pszDisplayText;
} CERT_POLICY_QUALIFIER_USER_NOTICE, *PCERT_POLICY_QUALIFIER_USER_NOTICE;
typedef struct _CPS_URLS {
    LPWSTR pszURL;
    CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm;
    CRYPT_DATA_BLOB *pDigest;
} CPS_URLS, *PCPS_URLS;
typedef struct _CERT_POLICY95_QUALIFIER1 {
    LPWSTR pszPracticesReference;
    LPSTR pszNoticeIdentifier;
    LPSTR pszNSINoticeIdentifier;
    DWORD cCPSURLs;
    CPS_URLS *rgCPSURLs;
} CERT_POLICY95_QUALIFIER1, *PCERT_POLICY95_QUALIFIER1;
typedef struct _CERT_POLICY_MAPPING {
    LPSTR pszIssuerDomainPolicy;
    LPSTR pszSubjectDomainPolicy;
} CERT_POLICY_MAPPING, *PCERT_POLICY_MAPPING;
typedef struct _CERT_POLICY_MAPPINGS_INFO {
    DWORD cPolicyMapping;
    PCERT_POLICY_MAPPING rgPolicyMapping;
} CERT_POLICY_MAPPINGS_INFO, *PCERT_POLICY_MAPPINGS_INFO;
typedef struct _CERT_POLICY_CONSTRAINTS_INFO {
    BOOL fRequireExplicitPolicy;
    DWORD dwRequireExplicitPolicySkipCerts;
    BOOL fInhibitPolicyMapping;
    DWORD dwInhibitPolicyMappingSkipCerts;
} CERT_POLICY_CONSTRAINTS_INFO, *PCERT_POLICY_CONSTRAINTS_INFO;
typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
} CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY, *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
typedef struct _CRYPT_CONTENT_INFO {
    LPSTR pszObjId;
    CRYPT_DER_BLOB Content;
} CRYPT_CONTENT_INFO, *PCRYPT_CONTENT_INFO;
typedef struct _CRYPT_SEQUENCE_OF_ANY {
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
} CRYPT_SEQUENCE_OF_ANY, *PCRYPT_SEQUENCE_OF_ANY;
typedef struct _CERT_AUTHORITY_KEY_ID2_INFO {
    CRYPT_DATA_BLOB KeyId;
    CERT_ALT_NAME_INFO AuthorityCertIssuer;
    CRYPT_INTEGER_BLOB AuthorityCertSerialNumber;
} CERT_AUTHORITY_KEY_ID2_INFO, *PCERT_AUTHORITY_KEY_ID2_INFO;
typedef struct _CERT_ACCESS_DESCRIPTION {
    LPSTR pszAccessMethod;
    CERT_ALT_NAME_ENTRY AccessLocation;
} CERT_ACCESS_DESCRIPTION, *PCERT_ACCESS_DESCRIPTION;
typedef struct _CERT_AUTHORITY_INFO_ACCESS {
    DWORD cAccDescr;
    PCERT_ACCESS_DESCRIPTION rgAccDescr;
} CERT_AUTHORITY_INFO_ACCESS, *PCERT_AUTHORITY_INFO_ACCESS;
typedef struct _CERT_CONTEXT {
    DWORD dwCertEncodingType;
    BYTE *pbCertEncoded;
    DWORD cbCertEncoded;
    PCERT_INFO pCertInfo;
    HCERTSTORE hCertStore;
} CERT_CONTEXT, *PCERT_CONTEXT;
typedef const CERT_CONTEXT *PCCERT_CONTEXT;
typedef struct _CRL_ENTRY {
    CRYPT_INTEGER_BLOB SerialNumber;
    FILETIME RevocationDate;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CRL_ENTRY, *PCRL_ENTRY;
typedef struct _CRL_INFO {
    DWORD dwVersion;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    DWORD cCRLEntry;
    PCRL_ENTRY rgCRLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CRL_INFO, *PCRL_INFO;
typedef struct _CRL_DIST_POINT_NAME {
    DWORD dwDistPointNameChoice;
    union {
        CERT_ALT_NAME_INFO FullName;
    } ;
} CRL_DIST_POINT_NAME, *PCRL_DIST_POINT_NAME;
typedef struct _CRL_DIST_POINT {
    CRL_DIST_POINT_NAME DistPointName;
    CRYPT_BIT_BLOB ReasonFlags;
    CERT_ALT_NAME_INFO CRLIssuer;
} CRL_DIST_POINT, *PCRL_DIST_POINT;
typedef struct _CRL_DIST_POINTS_INFO {
    DWORD cDistPoint;
    PCRL_DIST_POINT rgDistPoint;
} CRL_DIST_POINTS_INFO, *PCRL_DIST_POINTS_INFO;
typedef struct _CROSS_CERT_DIST_POINTS_INFO {
    DWORD dwSyncDeltaTime;
    DWORD cDistPoint;
    PCERT_ALT_NAME_INFO rgDistPoint;
} CROSS_CERT_DIST_POINTS_INFO, *PCROSS_CERT_DIST_POINTS_INFO;
typedef struct _CERT_PAIR {
    CERT_BLOB Forward;
    CERT_BLOB Reverse;
} CERT_PAIR, *PCERT_PAIR;
typedef struct _CRL_ISSUING_DIST_POINT {
    CRL_DIST_POINT_NAME DistPointName;
    BOOL fOnlyContainsUserCerts;
    BOOL fOnlyContainsCACerts;
    CRYPT_BIT_BLOB OnlySomeReasonFlags;
    BOOL fIndirectCRL;
} CRL_ISSUING_DIST_POINT, *PCRL_ISSUING_DIST_POINT;
typedef struct _CERT_GENERAL_SUBTREE {
    CERT_ALT_NAME_ENTRY Base;
    DWORD dwMinimum;
    BOOL fMaximum;
    DWORD dwMaximum;
} CERT_GENERAL_SUBTREE, *PCERT_GENERAL_SUBTREE;
typedef struct _CERT_NAME_CONSTRAINTS_INFO {
    DWORD cPermittedSubtree;
    PCERT_GENERAL_SUBTREE rgPermittedSubtree;
    DWORD cExcludedSubtree;
    PCERT_GENERAL_SUBTREE rgExcludedSubtree;
} CERT_NAME_CONSTRAINTS_INFO, *PCERT_NAME_CONSTRAINTS_INFO;
typedef struct _CRYPT_ATTRIBUTE {
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_DATA_BLOB rgValue;
} CRYPT_ATTRIBUTE, *PCRYPT_ATTRIBUTE;
typedef struct _CRYPT_ATTRIBUTES {
    DWORD cAttr;
    PCRYPT_ATTRIBUTE rgAttr;
} CRYPT_ATTRIBUTES, *PCRYPT_ATTRIBUTES;
typedef struct _CERT_REQUEST_INFO {
    DWORD dwVersion;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CERT_REQUEST_INFO, *PCERT_REQUEST_INFO;
typedef struct _CERT_KEYGEN_REQUEST_INFO {
    DWORD dwVersion;
    CERT_PUBLIC_KEY_INFO SubjectPubliceKeyInfo;
    LPWSTR pwszChallengeString;
} CERT_KEYGEN_REQUEST_INFO, *PCERT_KEYGEN_REQUEST_INFO;
typedef struct _CERT_SIGNED_CONTENT_INFO {
    CRYPT_DER_BLOB ToBeSigned;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CRYPT_BIT_BLOB Signature;
} CERT_SIGNED_CONTENT_INFO, *PCERT_SIGNED_CONTENT_INFO;
typedef struct _CRL_CONTEXT {
    DWORD dwCertEncodingType;
    BYTE *pbCrlEncoded;
    DWORD cbCrlEncoded;
    PCRL_INFO pCrlInfo;
    HCERTSTORE hCertStore;
} CRL_CONTEXT, *PCRL_CONTEXT;
typedef const CRL_CONTEXT *PCCRL_CONTEXT;
typedef struct _CERT_DSS_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB g;
} CERT_DSS_PARAMETERS, *PCERT_DSS_PARAMETERS;
typedef struct _CERT_DH_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
} CERT_DH_PARAMETERS, *PCERT_DH_PARAMETERS;
typedef struct _CERT_X942_DH_VALIDATION_PARAMS {
    CRYPT_BIT_BLOB seed;
    DWORD pgenCounter;
} CERT_X942_DH_VALIDATION_PARAMS, *PCERT_X942_DH_VALIDATION_PARAMS;
typedef struct _CERT_X942_DH_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB j;
    PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;
} CERT_X942_DH_PARAMETERS, *PCERT_X942_DH_PARAMETERS;
typedef struct _CRYPT_X942_OTHER_INFO {
    LPSTR pszContentEncryptionObjId;
    BYTE rgbCounter[4];
    BYTE rgbKeyLength[4];
    CRYPT_DATA_BLOB PubInfo;
} CRYPT_X942_OTHER_INFO, *PCRYPT_X942_OTHER_INFO;
typedef struct _CRYPT_RC2_CBC_PARAMETERS {
    DWORD dwVersion;
    BOOL fIV;
    BYTE rgbIV[4];
} CRYPT_RC2_CBC_PARAMETERS, *PCRYPT_RC2_CBC_PARAMETERS;
typedef struct _CRYPT_SMIME_CAPABILITY {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
} CRYPT_SMIME_CAPABILITY, *PCRYPT_SMIME_CAPABILITY;
typedef struct _CRYPT_SMIME_CAPABILITIES {
    DWORD cCapability;
    PCRYPT_SMIME_CAPABILITY rgCapability;
} CRYPT_SMIME_CAPABILITIES, *PCRYPT_SMIME_CAPABILITIES;
typedef struct _VTableProvStruc {
    DWORD Version;
    FARPROC FuncVerifyImage;
    FARPROC FuncReturnhWnd;
    DWORD dwProvType;
    BYTE *pbContextInfo;
    DWORD cbContextInfo;
    LPSTR pszProvName;
} VTableProvStruc, *PVTableProvStruc;
typedef struct _CERT_PRIVATE_KEY_INFO {
    DWORD Version;
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_DER_BLOB PrivateKey;
    PCRYPT_ATTRIBUTES pAttributes;
} CERT_PRIVATE_KEY_INFO, *PCERT_PRIVATE_KEY_INFO;
typedef struct _CTL_USAGE {
    DWORD cUsageIdentifier;
    LPSTR *rgpszUsageIdentifier;
} CTL_USAGE, *PCTL_USAGE, CERT_ENHKEY_USAGE, *PCERT_ENHKEY_USAGE;
typedef struct _CTL_ENTRY {
    CRYPT_DATA_BLOB SubjectIdentifier;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CTL_ENTRY, *PCTL_ENTRY;
typedef struct _CTL_INFO {
    DWORD dwVersion;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    CRYPT_INTEGER_BLOB SequenceNumber;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    DWORD cCTLEntry;
    PCTL_ENTRY rgCTLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CTL_INFO, *PCTL_INFO;
typedef struct _CTL_CONTEXT {
    DWORD dwMsgAndCertEncodingType;
    BYTE *pbCtlEncoded;
    DWORD cbCtlEncoded;
    PCTL_INFO pCtlInfo;
    HCERTSTORE hCertStore;
    HCRYPTMSG hCryptMsg;
    BYTE *pbCtlContext;
    DWORD cbCtlContext;
} CTL_CONTEXT, *PCTL_CONTEXT;
typedef const CTL_CONTEXT *PCCTL_CONTEXT;
typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO {
    LPSTR pszTimeStampAlgorithm;
    LPSTR pszContentType;
    CRYPT_OBJID_BLOB Content;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CRYPT_TIME_STAMP_REQUEST_INFO, *PCRYPT_TIME_STAMP_REQUEST_INFO;
typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR {
    LPWSTR pwszName;
    LPWSTR pwszValue;
} CRYPT_ENROLLMENT_NAME_VALUE_PAIR, *PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;
typedef struct _CMSG_SIGNER_INFO {
    DWORD dwVersion;
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
} CMSG_SIGNER_INFO, *PCMSG_SIGNER_INFO;
typedef struct _CERT_REVOCATION_CRL_INFO {
    DWORD cbSize;
    PCCRL_CONTEXT pBaseCrlContext;
    PCCRL_CONTEXT pDeltaCrlContext;
    PCRL_ENTRY pCrlEntry;
    BOOL fDeltaCrlEntry;
} CERT_REVOCATION_CRL_INFO, *PCERT_REVOCATION_CRL_INFO;
typedef struct _CERT_REVOCATION_INFO {
    DWORD cbSize;
    DWORD dwRevocationResult;
    LPCSTR pszRevocationOid;
    LPVOID pvOidSpecificInfo;
    BOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;
    PCERT_REVOCATION_CRL_INFO pCrlInfo;
} CERT_REVOCATION_INFO, *PCERT_REVOCATION_INFO;
typedef struct _CERT_REVOCATION_PARA {
    DWORD cbSize;
    PCCERT_CONTEXT pIssuerCert;
    DWORD cCertStore;
    HCERTSTORE *rgCertStore;
    HCERTSTORE hCrlStore;
    LPFILETIME pftTimeToUse;
} CERT_REVOCATION_PARA, *PCERT_REVOCATION_PARA;
typedef struct _CTL_VERIFY_USAGE_PARA {
    DWORD cbSize;
    CRYPT_DATA_BLOB ListIdentifier;
    DWORD cCtlStore;
    HCERTSTORE *rghCtlStore;
    DWORD cSignerStore;
    HCERTSTORE *rghSignerStore;
} CTL_VERIFY_USAGE_PARA, *PCTL_VERIFY_USAGE_PARA;
typedef struct _CTL_VERIFY_USAGE_STATUS {
    DWORD cbSize;
    DWORD dwError;
    DWORD dwFlags;
    PCCTL_CONTEXT *ppCtl;
    DWORD dwCtlEntryIndex;
    PCCERT_CONTEXT *ppSigner;
    DWORD dwSignerIndex;
} CTL_VERIFY_USAGE_STATUS, *PCTL_VERIFY_USAGE_STATUS;
typedef struct _CERT_REVOCATION_STATUS {
    DWORD cbSize;
    DWORD dwIndex;
    DWORD dwError;
    DWORD dwReason;
    BOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;
} CERT_REVOCATION_STATUS, *PCERT_REVOCATION_STATUS;
typedef struct _CERT_TRUST_LIST_INFO {
    DWORD cbSize;
    PCTL_ENTRY pCtlEntry;
    PCCTL_CONTEXT pCtlContext;
} CERT_TRUST_LIST_INFO, *PCERT_TRUST_LIST_INFO;
typedef struct _CERT_TRUST_STATUS {
    DWORD dwErrorStatus;
    DWORD dwInfoStatus;
} CERT_TRUST_STATUS, *PCERT_TRUST_STATUS;
typedef struct _CERT_CHAIN_ELEMENT {
    DWORD cbSize;
    PCCERT_CONTEXT pCertContext;
    CERT_TRUST_STATUS TrustStatus;
    PCERT_REVOCATION_INFO pRevocationInfo;
    PCERT_ENHKEY_USAGE pIssuanceUsage;
    PCERT_ENHKEY_USAGE pApplicationUsage;
    LPCWSTR pwszExtendedErrorInfo;
} CERT_CHAIN_ELEMENT, *PCERT_CHAIN_ELEMENT;
typedef struct _CERT_SIMPLE_CHAIN {
    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cElement;
    PCERT_CHAIN_ELEMENT *rgpElement;
    PCERT_TRUST_LIST_INFO pTrustListInfo;
    BOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;
} CERT_SIMPLE_CHAIN, *PCERT_SIMPLE_CHAIN;
typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT, *PCERT_CHAIN_CONTEXT;
typedef const CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;
struct _CERT_CHAIN_CONTEXT {
    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cChain;
    PCERT_SIMPLE_CHAIN *rgpChain;
    DWORD cLowerQualityChainContext;
    PCCERT_CHAIN_CONTEXT *rgpLowerQualityChainContext;
    BOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;
};
typedef struct _CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwFlags;
    void *pvExtraPolicyPara;
} CERT_CHAIN_POLICY_PARA, *PCERT_CHAIN_POLICY_PARA;
typedef struct _CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    DWORD dwError;
    LONG lChainIndex;
    LONG lElementIndex;
    void *pvExtraPolicyStatus;
} CERT_CHAIN_POLICY_STATUS, *PCERT_CHAIN_POLICY_STATUS;
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    PCMSG_SIGNER_INFO pSignerInfo;
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA,
 *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    BOOL fCommercial;
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS,
 *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    BOOL fCommercial;
} AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA,
 *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _HTTPSPolicyCallbackData {
    union {
        DWORD cbStruct;
        DWORD cbSize;
    } ;
    DWORD dwAuthType;
    DWORD fdwChecks;
    WCHAR *pwszServerName;
} HTTPSPolicyCallbackData, *PHTTPSPolicyCallbackData,
 SSL_EXTRA_CERT_CHAIN_POLICY_PARA, *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _CERT_USAGE_MATCH {
    DWORD dwType;
    CERT_ENHKEY_USAGE Usage;
} CERT_USAGE_MATCH, *PCERT_USAGE_MATCH;
typedef struct _CTL_USAGE_MATCH {
    DWORD dwType;
    CTL_USAGE Usage;
} CTL_USAGE_MATCH, *PCTL_USAGE_MATCH;
typedef struct _CERT_CHAIN_PARA {
    DWORD cbSize;
    CERT_USAGE_MATCH RequestedUsage;
} CERT_CHAIN_PARA, *PCERT_CHAIN_PARA;
typedef struct _CERT_SYSTEM_STORE_INFO {
    DWORD cbSize;
} CERT_SYSTEM_STORE_INFO, *PCERT_SYSTEM_STORE_INFO;
typedef struct _CERT_PHYSICAL_STORE_INFO {
    DWORD cbSize;
    LPSTR pszOpenStoreProvider;
    DWORD dwOpenEncodingType;
    DWORD dwOpenFlags;
    CRYPT_DATA_BLOB OpenParameters;
    DWORD dwFlags;
    DWORD dwPriority;
} CERT_PHYSICAL_STORE_INFO, *PCERT_PHYSICAL_STORE_INFO;
typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA {
    union {
        HKEY hKeyBase;
        void *pvBase;
    } ;
    union {
        void *pvSystemStore;
        LPCSTR pszSystemStore;
        LPCWSTR pwszSystemStore;
    } ;
} CERT_SYSTEM_STORE_RELOCATE_PARA, *PCERT_SYSTEM_STORE_RELOCATE_PARA;
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(
 LPCWSTR pwszStoreLocation, DWORD dwFlags, void *pvReserved, void *pvArg);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_ENUM_SYSTEM_STORE)(const void *pvSystemStore,
 DWORD dwFlags, PCERT_SYSTEM_STORE_INFO pStoreInfo, void *pvReserved,
 void *pvArg);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_ENUM_PHYSICAL_STORE)(const void *pvSystemStore,
 DWORD dwFlags, LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo,
 void *pvReserved, void *pvArg);
typedef LPVOID (__attribute__((__alloc_size__(1))) __attribute__((__stdcall__)) *PFN_CRYPT_ALLOC)(size_t cbsize);
typedef void (__attribute__((__stdcall__)) *PFN_CRYPT_FREE)(LPVOID pv);
typedef struct _CRYPT_ENCODE_PARA {
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
} CRYPT_ENCODE_PARA, *PCRYPT_ENCODE_PARA;
typedef struct _CRYPT_DECODE_PARA {
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
} CRYPT_DECODE_PARA, *PCRYPT_DECODE_PARA;
typedef struct _CERT_STORE_PROV_INFO {
    DWORD cbSize;
    DWORD cStoreProvFunc;
    void **rgpvStoreProvFunc;
    HCERTSTOREPROV hStoreProv;
    DWORD dwStoreProvFlags;
    HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;
} CERT_STORE_PROV_INFO, *PCERT_STORE_PROV_INFO;
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(
 LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV_LEGACY hCryptProv,
 DWORD dwFlags, const void *pvPara, HCERTSTORE hCertStore,
 PCERT_STORE_PROV_INFO pStoreProvInfo);
typedef void (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_CLOSE)(HCERTSTOREPROV hStoreProv,
 DWORD dwFlags);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_READ_CERT)(HCERTSTOREPROV hStoreProv,
 PCCERT_CONTEXT pStoreCertContext, DWORD dwFlags,
 PCCERT_CONTEXT *ppProvCertContext);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_WRITE_CERT)(HCERTSTOREPROV hStoreProv,
 PCCERT_CONTEXT pCertContext, DWORD dwFlags);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_DELETE_CERT)(
 HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(
 HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId,
 DWORD dwFlags, const void *pvData);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_READ_CRL)(HCERTSTOREPROV hStoreProv,
 PCCRL_CONTEXT pStoreCrlContext, DWORD dwFlags,
 PCCRL_CONTEXT *ppProvCrlContext);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_WRITE_CRL)(HCERTSTOREPROV hStoreProv,
 PCCRL_CONTEXT pCrlContext, DWORD dwFlags);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_DELETE_CRL)(HCERTSTOREPROV hStoreProv,
 PCCRL_CONTEXT pCrlContext, DWORD dwFlags);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(
 HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId,
 DWORD dwFlags, const void *pvData);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_READ_CTL)(HCERTSTOREPROV hStoreProv,
 PCCTL_CONTEXT pStoreCtlContext, DWORD dwFlags,
 PCCTL_CONTEXT *ppProvCtlContext);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_WRITE_CTL)(HCERTSTOREPROV hStoreProv,
 PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_DELETE_CTL)(
 HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(
 HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId,
 DWORD dwFlags, const void *pvData);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_CONTROL)(HCERTSTOREPROV hStoreProv,
 DWORD dwFlags, DWORD dwCtrlType, void const *pvCtrlPara);
typedef struct _CERT_STORE_PROV_FIND_INFO {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD dwFindFlags;
    DWORD dwFindType;
    const void *pvFindPara;
} CERT_STORE_PROV_FIND_INFO, *PCERT_STORE_PROV_FIND_INFO;
typedef const CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO,
 *PCCERT_STORE_PROV_FIND_INFO;
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_FIND_CERT)(HCERTSTOREPROV hStoreProv,
 PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCERT_CONTEXT pPrevCertContext,
 DWORD dwFlags, void **ppvStoreProvFindInfo, PCCERT_CONTEXT *ppProvCertContext);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_FREE_FIND_CERT)(
 HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext,
 void *pvStoreProvFindInfo, DWORD dwFlags);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(
 HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId,
 DWORD dwFlags, void *pvData, DWORD *pcbData);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_FIND_CRL)(HCERTSTOREPROV hStoreProv,
 PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCRL_CONTEXT pPrevCrlContext,
 DWORD dwFlags, void **ppvStoreProvFindInfo, PCCRL_CONTEXT *ppProvCrlContext);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_FREE_FIND_CRL)(
 HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext,
 void *pvStoreProvFindInfo, DWORD dwFlags);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(
 HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId,
 DWORD dwFlags, void *pvData, DWORD *pcbData);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_FIND_CTL)(HCERTSTOREPROV hStoreProv,
 PCCTL_CONTEXT pCtlContext, void *pvStoreProvFindInfo, DWORD dwFlags);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(
 HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId,
 DWORD dwFlags, void *pvData);
typedef struct _CERT_CREATE_CONTEXT_PARA {
    DWORD cbSize;
    PFN_CRYPT_FREE pfnFree;
    void *pvFree;
} CERT_CREATE_CONTEXT_PARA, *PCERT_CREATE_CONTEXT_PARA;
typedef struct _CRYPT_OID_FUNC_ENTRY {
    LPCSTR pszOID;
    void *pvFuncAddr;
} CRYPT_OID_FUNC_ENTRY, *PCRYPT_OID_FUNC_ENTRY;
typedef BOOL (__attribute__((__stdcall__)) *PFN_CRYPT_ENUM_OID_FUNC)(DWORD dwEncodingType,
 LPCSTR pszFuncName, LPCSTR pszOID, DWORD cValue, const DWORD rgdwValueType[],
 LPCWSTR const rgpwszValueName[], const BYTE * const rgpbValueData[],
 const DWORD rgcbValueData[], void *pvArg);
typedef struct _CRYPT_OID_INFO {
    DWORD cbSize;
    LPCSTR pszOID;
    LPCWSTR pwszName;
    DWORD dwGroupId;
    union {
        DWORD dwValue;
        ALG_ID Algid;
        DWORD dwLength;
    } ;
    CRYPT_DATA_BLOB ExtraInfo;
} CRYPT_OID_INFO, *PCRYPT_OID_INFO;
typedef const CRYPT_OID_INFO CCRYPT_OID_INFO, *PCCRYPT_OID_INFO;
typedef BOOL (__attribute__((__stdcall__)) *PFN_CRYPT_ENUM_OID_INFO)(PCCRYPT_OID_INFO pInfo,
 void *pvArg);
typedef struct _CRYPT_SIGN_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    PCCERT_CONTEXT pSigningCert;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void * pvHashAuxInfo;
    DWORD cMsgCert;
    PCCERT_CONTEXT *rgpMsgCert;
    DWORD cMsgCrl;
    PCCRL_CONTEXT *rgpMsgCrl;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;
    DWORD dwFlags;
    DWORD dwInnerContentType;
} CRYPT_SIGN_MESSAGE_PARA, *PCRYPT_SIGN_MESSAGE_PARA;
typedef PCCERT_CONTEXT (__attribute__((__stdcall__)) *PFN_CRYPT_GET_SIGNER_CERTIFICATE)(void *pvArg,
 DWORD dwCertEncodingType, PCERT_INFO pSignerId, HCERTSTORE hMsgCertStore);
typedef struct _CRYPT_VERIFY_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;
    void * pvGetArg;
} CRYPT_VERIFY_MESSAGE_PARA, *PCRYPT_VERIFY_MESSAGE_PARA;
typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void * pvEncryptionAuxInfo;
    DWORD dwFlags;
    DWORD dwInnerContentType;
} CRYPT_ENCRYPT_MESSAGE_PARA, *PCRYPT_ENCRYPT_MESSAGE_PARA;
typedef struct _CRYPT_DECRYPT_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD cCertStore;
    HCERTSTORE *rghCertStore;
} CRYPT_DECRYPT_MESSAGE_PARA, *PCRYPT_DECRYPT_MESSAGE_PARA;
typedef struct _CRYPT_HASH_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void * pvHashAuxInfo;
} CRYPT_HASH_MESSAGE_PARA, *PCRYPT_HASH_MESSAGE_PARA;
typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void * pvHashAuxInfo;
} CRYPT_KEY_SIGN_MESSAGE_PARA, *PCRYPT_KEY_SIGN_MESSAGE_PARA;
typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
} CRYPT_KEY_VERIFY_MESSAGE_PARA, *PCRYPT_KEY_VERIFY_MESSAGE_PARA;
typedef struct _CRYPT_URL_ARRAY {
    DWORD cUrl;
    LPWSTR *rgwszUrl;
} CRYPT_URL_ARRAY, *PCRYPT_URL_ARRAY;
typedef struct _CRYPT_URL_INFO {
    DWORD cbSize;
    DWORD dwSyncDeltaTime;
    DWORD cGroup;
    DWORD *rgcGroupEntry;
} CRYPT_URL_INFO, *PCRYPT_URL_INFO;
typedef HANDLE HCRYPTASYNC, *PHCRYPTASYNC;
typedef void (__attribute__((__stdcall__)) *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC)(LPSTR pszParamOid,
 LPVOID pvParam);
typedef void (__attribute__((__stdcall__)) *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC)(
 void *pvCompletion, DWORD dwCompletionCode, LPCSTR pszURL, LPSTR pszObjectOid,
 void *pvObject);
typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION
{
    PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;
    void *pvCompletion;
} CRYPT_ASYNC_RETRIEVAL_COMPLETION, *PCRYPT_ASYNC_RETRIEVAL_COMPLETION;
typedef BOOL (__attribute__((__stdcall__)) *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC)(
 HCRYPTASYNC hAsyncRetrieve);
typedef struct _CRYPT_BLOB_ARRAY
{
    DWORD cBlob;
    PCRYPT_DATA_BLOB rgBlob;
} CRYPT_BLOB_ARRAY, *PCRYPT_BLOB_ARRAY;
typedef struct _CRYPT_CREDENTIALS {
    DWORD cbSize;
    LPCSTR pszCredentialsOid;
    LPVOID pvCredentials;
} CRYPT_CREDENTIALS, *PCRYPT_CREDENTIALS;
typedef struct _CRYPT_PASSWORD_CREDENTIALSA {
    DWORD cbSize;
    LPSTR pszUsername;
    LPSTR pszPassword;
} CRYPT_PASSWORD_CREDENTIALSA, *PCRYPT_PASSWORD_CREDENTIALSA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSW {
    DWORD cbSize;
    LPWSTR pszUsername;
    LPWSTR pszPassword;
} CRYPT_PASSWORD_CREDENTIALSW, *PCRYPT_PASSWORD_CREDENTIALSW;
typedef struct _CRYPT_RETRIEVE_AUX_INFO {
    DWORD cbSize;
    FILETIME *pLastSyncTime;
    DWORD dwMaxUrlRetrievalByteCount;
} CRYPT_RETRIEVE_AUX_INFO, *PCRYPT_RETRIEVE_AUX_INFO;
typedef void (__attribute__((__stdcall__)) *PFN_FREE_ENCODED_OBJECT_FUNC)(LPCSTR pszObjectOid,
 PCRYPT_BLOB_ARRAY pObject, void *pvFreeContext);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CRYPT_CANCEL_RETRIEVAL)(DWORD dwFlags, void *pvArg);
typedef struct _CERT_CRL_CONTEXT_PAIR
{
    PCCERT_CONTEXT pCertContext;
    PCCRL_CONTEXT pCrlContext;
} CERT_CRL_CONTEXT_PAIR, *PCERT_CRL_CONTEXT_PAIR;
typedef const CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;
typedef struct _CRL_FIND_ISSUED_FOR_PARA
{
    PCCERT_CONTEXT pSubjectCert;
    PCCERT_CONTEXT pIssuerCert;
} CRL_FIND_ISSUED_FOR_PARA, *PCRL_FIND_ISSUED_FOR_PARA;
typedef struct _CTL_FIND_USAGE_PARA
{
    DWORD cbSize;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    PCERT_INFO pSigner;
} CTL_FIND_USAGE_PARA, *PCTL_FIND_USAGE_PARA;
typedef struct _CTL_FIND_SUBJECT_PARA
{
    DWORD cbSize;
    PCTL_FIND_USAGE_PARA pUsagePara;
    DWORD dwSubjectType;
    void *pvSubject;
} CTL_FIND_SUBJECT_PARA, *PCTL_FIND_SUBJECT_PARA;
typedef HANDLE HCERTCHAINENGINE;
typedef struct _CERT_CHAIN_ENGINE_CONFIG
{
    DWORD cbSize;
    HCERTSTORE hRestrictedRoot;
    HCERTSTORE hRestrictedTrust;
    HCERTSTORE hRestrictedOther;
    DWORD cAdditionalStore;
    HCERTSTORE *rghAdditionalStore;
    DWORD dwFlags;
    DWORD dwUrlRetrievalTimeout;
    DWORD MaximumCachedCertificates;
    DWORD CycleDetectionModulus;
    HCERTSTORE hExclusiveRoot;
    HCERTSTORE hExclusiveRootTrustedPeople;
} CERT_CHAIN_ENGINE_CONFIG, *PCERT_CHAIN_ENGINE_CONFIG;
typedef BOOL (__attribute__((__stdcall__)) *PFN_CMSG_STREAM_OUTPUT)(const void *pvArg, BYTE *pbData,
 DWORD cbData, BOOL fFinal);
typedef struct _CMSG_STREAM_INFO
{
    DWORD cbContent;
    PFN_CMSG_STREAM_OUTPUT pfnStreamOutput;
    void *pvArg;
} CMSG_STREAM_INFO, *PCMSG_STREAM_INFO;
typedef struct _CERT_ISSUER_SERIAL_NUMBER
{
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
} CERT_ISSUER_SERIAL_NUMBER, *PCERT_ISSUER_SERIAL_NUMBER;
typedef struct _CERT_ID
{
    DWORD dwIdChoice;
    union {
        CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;
        CRYPT_HASH_BLOB KeyId;
        CRYPT_HASH_BLOB HashId;
    } ;
} CERT_ID, *PCERT_ID;
typedef struct _CMSG_SIGNER_ENCODE_INFO
{
    DWORD cbSize;
    PCERT_INFO pCertInfo;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;
} CMSG_SIGNER_ENCODE_INFO, *PCMSG_SIGNER_ENCODE_INFO;
typedef struct _CMSG_SIGNED_ENCODE_INFO
{
    DWORD cbSize;
    DWORD cSigners;
    PCMSG_SIGNER_ENCODE_INFO rgSigners;
    DWORD cCertEncoded;
    PCERT_BLOB rgCertEncoded;
    DWORD cCrlEncoded;
    PCRL_BLOB rgCrlEncoded;
} CMSG_SIGNED_ENCODE_INFO, *PCMSG_SIGNED_ENCODE_INFO;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;
} CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO,
 *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;
    void *pvKeyWrapAuxInfo;
    HCRYPTPROV_LEGACY hCryptProv;
    DWORD dwKeySpec;
    DWORD dwKeyChoice;
    union {
        PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;
        PCERT_ID pSenderId;
    } ;
    CRYPT_DATA_BLOB UserKeyingMaterial;
    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    HCRYPTPROV hCryptProv;
    DWORD dwKeyChoice;
    union {
        HCRYPTKEY hKeyEncryptionKey;
        void *pvKeyEncryptionKey;
    } ;
    CRYPT_DATA_BLOB KeyId;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO, *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_RECIPIENT_ENCODE_INFO
{
    DWORD dwRecipientChoice;
    union {
        PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTrans;
        PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgree;
        PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailList;
    } ;
} CMSG_RECIPIENT_ENCODE_INFO, *PCMSG_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_ENVELOPED_ENCODE_INFO
{
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD cRecipients;
    PCERT_INFO *rgpRecipientCert;
} CMSG_ENVELOPED_ENCODE_INFO, *PCMSG_ENVELOPED_ENCODE_INFO;
typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO
{
    DWORD cbSize;
    CMSG_SIGNED_ENCODE_INFO SignedInfo;
    CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;
} CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO,
 *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
typedef struct _CMSG_HASHED_ENCODE_INFO
{
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
} CMSG_HASHED_ENCODE_INFO, *PCMSG_HASHED_ENCODE_INFO;
typedef struct _CMSG_ENCRYPTED_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
} CMSG_ENCRYPTED_ENCODE_INFO, *PCMSG_ENCRYPTED_ENCODE_INFO;
typedef struct _CMSG_CTRL_DECRYPT_PARA
{
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    DWORD dwRecipientIndex;
} CMSG_CTRL_DECRYPT_PARA, *PCMSG_CTRL_DECRYPT_PARA;
typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA
{
    DWORD cbSize;
    DWORD dwSignerIndex;
    CRYPT_DATA_BLOB blob;
} CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA,
 *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA
{
    DWORD cbSize;
    DWORD dwSignerIndex;
    DWORD dwUnauthAttrIndex;
} CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA,
 *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    DWORD dwSignerIndex;
    DWORD dwSignerType;
    void *pvSigner;
} CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA, *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
typedef struct _CMSG_CMS_SIGNER_INFO {
    DWORD dwVersion;
    CERT_ID SignerId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
} CMSG_CMS_SIGNER_INFO, *PCMSG_CMS_SIGNER_INFO;
typedef CRYPT_ATTRIBUTES CMSG_ATTR, *PCMSG_ATTR;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO {
    DWORD dwVersion;
    CERT_ID RecipientId;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
} CMSG_KEY_TRANS_RECIPIENT_INFO, *PCMSG_KEY_TRANS_RECIPIENT_INFO;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO {
    CERT_ID RecipientId;
    CRYPT_DATA_BLOB EncryptedKey;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_INFO, *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO {
    DWORD dwVersion;
    DWORD dwOriginatorChoice;
    union {
        CERT_ID OriginatorCertId;
        CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    } ;
    CRYPT_ALGORITHM_IDENTIFIER UserKeyingMaterial;
    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_INFO, *PCMSG_KEY_AGREE_RECIPIENT_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO {
    DWORD dwVersion;
    CRYPT_DATA_BLOB KeyId;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_INFO, *PCMSG_MAIL_LIST_RECIPIENT_INFO;
typedef struct _CMSG_CMS_RECIPIENT_INFO {
    DWORD dwRecipientChoice;
    union {
        PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
        PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
        PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
    } ;
} CMSG_CMS_RECIPIENT_INFO, *PCMSG_CMS_RECIPIENT_INFO;
typedef void * (__attribute__((__stdcall__)) *PFN_CMSG_ALLOC)(size_t cb);
typedef void (__attribute__((__stdcall__)) *PFN_CMSG_FREE)(void *pv);
typedef struct _CMSG_CONTENT_ENCRYPT_INFO {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD cRecipients;
    PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;
    PFN_CMSG_ALLOC pfnAlloc;
    PFN_CMSG_FREE pfnFree;
    DWORD dwEncryptFlags;
    HCRYPTKEY hContentEncryptKey;
    DWORD dwFlags;
} CMSG_CONTENT_ENCRYPT_INFO, *PCMSG_CONTENT_ENCRYPT_INFO;
typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO {
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
} CMSG_KEY_TRANS_ENCRYPT_INFO, *PCMSG_KEY_TRANS_ENCRYPT_INFO;
typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
    DWORD dwRecipientIndex;
} CMSG_CTRL_KEY_TRANS_DECRYPT_PARA, *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
typedef BOOL (__attribute__((__stdcall__)) *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY)(
 PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, DWORD dwFlags,
 void *pvReserved);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CMSG_EXPORT_KEY_TRANS)(
 PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
 PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo,
 PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo,
 DWORD dwFlags, void *pvReserved);
typedef BOOL (__attribute__((__stdcall__)) *PFN_CMSG_IMPORT_KEY_TRANS)(
 PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
 PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara, DWORD dwFlags,
 void *pvReserved, HCRYPTKEY *phContentEncryptKey);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptAcquireContextA(HCRYPTPROV *, LPCSTR, LPCSTR, DWORD, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptAcquireContextW (HCRYPTPROV *, LPCWSTR, LPCWSTR, DWORD, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptGenRandom (HCRYPTPROV, DWORD, BYTE *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptContextAddRef (HCRYPTPROV, DWORD *, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptCreateHash (HCRYPTPROV, ALG_ID, HCRYPTKEY, DWORD, HCRYPTHASH *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptDecrypt (HCRYPTKEY, HCRYPTHASH, BOOL, DWORD, BYTE *, DWORD *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptDeriveKey (HCRYPTPROV, ALG_ID, HCRYPTHASH, DWORD, HCRYPTKEY *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptDestroyHash (HCRYPTHASH);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptDestroyKey (HCRYPTKEY);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptDuplicateKey (HCRYPTKEY, DWORD *, DWORD, HCRYPTKEY *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptDuplicateHash (HCRYPTHASH, DWORD *, DWORD, HCRYPTHASH *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptEncrypt (HCRYPTKEY, HCRYPTHASH, BOOL, DWORD, BYTE *, DWORD *, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptEnumProvidersA (DWORD, DWORD *, DWORD, DWORD *, LPSTR, DWORD *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptEnumProvidersW (DWORD, DWORD *, DWORD, DWORD *, LPWSTR, DWORD *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptEnumProviderTypesA (DWORD, DWORD *, DWORD, DWORD *, LPSTR, DWORD *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptEnumProviderTypesW (DWORD, DWORD *, DWORD, DWORD *, LPWSTR, DWORD *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptExportKey (HCRYPTKEY, HCRYPTKEY, DWORD, DWORD, BYTE *, DWORD *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptGenKey (HCRYPTPROV, ALG_ID, DWORD, HCRYPTKEY *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptGetKeyParam (HCRYPTKEY, DWORD, BYTE *, DWORD *, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptGetHashParam (HCRYPTHASH, DWORD, BYTE *, DWORD *, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptGetProvParam (HCRYPTPROV, DWORD, BYTE *, DWORD *, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptGetDefaultProviderA (DWORD, DWORD *, DWORD, LPSTR, DWORD *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptGetDefaultProviderW (DWORD, DWORD *, DWORD, LPWSTR, DWORD *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptGetUserKey (HCRYPTPROV, DWORD, HCRYPTKEY *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptHashData (HCRYPTHASH, const BYTE *, DWORD, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptHashSessionKey (HCRYPTHASH, HCRYPTKEY, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptImportKey (HCRYPTPROV, const BYTE *, DWORD, HCRYPTKEY, DWORD, HCRYPTKEY *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptReleaseContext (HCRYPTPROV, ULONG_PTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptSetHashParam (HCRYPTHASH, DWORD, const BYTE *, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptSetKeyParam (HCRYPTKEY, DWORD, const BYTE *, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptSetProviderA (LPCSTR, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptSetProviderW (LPCWSTR, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptSetProviderExA (LPCSTR, DWORD, DWORD *, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptSetProviderExW (LPCWSTR, DWORD, DWORD *, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptSetProvParam (HCRYPTPROV, DWORD, const BYTE *, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptSignHashA (HCRYPTHASH, DWORD, LPCSTR, DWORD, BYTE *, DWORD *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptSignHashW (HCRYPTHASH, DWORD, LPCWSTR, DWORD, BYTE *, DWORD *);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptVerifySignatureA (HCRYPTHASH, const BYTE *, DWORD, HCRYPTKEY, LPCSTR, DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CryptVerifySignatureW (HCRYPTHASH, const BYTE *, DWORD, HCRYPTKEY, LPCWSTR, DWORD);
LPVOID __attribute__((__stdcall__)) CryptMemAlloc(ULONG cbSize) __attribute__((__alloc_size__(1)));
LPVOID __attribute__((__stdcall__)) CryptMemRealloc(LPVOID pv, ULONG cbSize) __attribute__((__alloc_size__(2)));
void __attribute__((__stdcall__)) CryptMemFree(LPVOID pv);
BOOL __attribute__((__stdcall__)) CryptBinaryToStringA(const BYTE *pbBinary,
 DWORD cbBinary, DWORD dwFlags, LPSTR pszString, DWORD *pcchString);
BOOL __attribute__((__stdcall__)) CryptBinaryToStringW(const BYTE *pbBinary,
 DWORD cbBinary, DWORD dwFlags, LPWSTR pszString, DWORD *pcchString);
BOOL __attribute__((__stdcall__)) CryptStringToBinaryA(LPCSTR pszString,
 DWORD cchString, DWORD dwFlags, BYTE *pbBinary, DWORD *pcbBinary,
 DWORD *pdwSkip, DWORD *pdwFlags);
BOOL __attribute__((__stdcall__)) CryptStringToBinaryW(LPCWSTR pszString,
 DWORD cchString, DWORD dwFlags, BYTE *pbBinary, DWORD *pcbBinary,
 DWORD *pdwSkip, DWORD *pdwFlags);
BOOL __attribute__((__stdcall__)) CryptCreateAsyncHandle(DWORD dwFlags, PHCRYPTASYNC phAsync);
BOOL __attribute__((__stdcall__)) CryptSetAsyncParam(HCRYPTASYNC hAsync, LPSTR pszParamOid,
 LPVOID pvParam, PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree);
BOOL __attribute__((__stdcall__)) CryptGetAsyncParam(HCRYPTASYNC hAsync, LPSTR pszParamOid,
 LPVOID *ppvParam, PFN_CRYPT_ASYNC_PARAM_FREE_FUNC *ppfnFree);
BOOL __attribute__((__stdcall__)) CryptCloseAsyncHandle(HCRYPTASYNC hAsync);
BOOL __attribute__((__stdcall__)) CryptRegisterDefaultOIDFunction(DWORD,LPCSTR,DWORD,LPCWSTR);
BOOL __attribute__((__stdcall__)) CryptRegisterOIDFunction(DWORD,LPCSTR,LPCSTR,LPCWSTR,LPCSTR);
BOOL __attribute__((__stdcall__)) CryptGetOIDFunctionValue(DWORD dwEncodingType, LPCSTR pszFuncName,
                                     LPCSTR pszOID, LPCWSTR szValueName, DWORD *pdwValueType,
                                     BYTE *pbValueData, DWORD *pcbValueData);
BOOL __attribute__((__stdcall__)) CryptSetOIDFunctionValue(DWORD dwEncodingType, LPCSTR pszFuncName,
                                     LPCSTR pszOID, LPCWSTR pwszValueName, DWORD dwValueType,
                                     const BYTE *pbValueData, DWORD cbValueData);
BOOL __attribute__((__stdcall__)) CryptUnregisterDefaultOIDFunction(DWORD,LPCSTR,LPCWSTR);
BOOL __attribute__((__stdcall__)) CryptUnregisterOIDFunction(DWORD,LPCSTR,LPCSTR);
BOOL __attribute__((__stdcall__)) CryptEnumOIDFunction(DWORD dwEncodingType, LPCSTR pszFuncName,
 LPCSTR pszOID, DWORD dwFlags, void *pvArg,
 PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc);
HCRYPTOIDFUNCSET __attribute__((__stdcall__)) CryptInitOIDFunctionSet(LPCSTR,DWORD);
BOOL __attribute__((__stdcall__)) CryptGetDefaultOIDDllList(HCRYPTOIDFUNCSET hFuncSet,
 DWORD dwEncodingType, LPWSTR pwszDllList, DWORD *pcchDllList);
BOOL __attribute__((__stdcall__)) CryptGetDefaultOIDFunctionAddress(HCRYPTOIDFUNCSET hFuncSet,
 DWORD dwEncodingType, LPCWSTR pwszDll, DWORD dwFlags, void **ppvFuncAddr,
 HCRYPTOIDFUNCADDR *phFuncAddr);
BOOL __attribute__((__stdcall__)) CryptGetOIDFunctionAddress(HCRYPTOIDFUNCSET hFuncSet,
 DWORD dwEncodingType, LPCSTR pszOID, DWORD dwFlags, void **ppvFuncAddr,
 HCRYPTOIDFUNCADDR *phFuncAddr);
BOOL __attribute__((__stdcall__)) CryptFreeOIDFunctionAddress(HCRYPTOIDFUNCADDR hFuncAddr,
 DWORD dwFlags);
BOOL __attribute__((__stdcall__)) CryptInstallOIDFunctionAddress(HMODULE hModule,
 DWORD dwEncodingType, LPCSTR pszFuncName, DWORD cFuncEntry,
 const CRYPT_OID_FUNC_ENTRY rgFuncEntry[], DWORD dwFlags);
BOOL __attribute__((__stdcall__)) CryptInstallDefaultContext(HCRYPTPROV hCryptProv,
 DWORD dwDefaultType, const void *pvDefaultPara, DWORD dwFlags,
 void *pvReserved, HCRYPTDEFAULTCONTEXT *phDefaultContext);
BOOL __attribute__((__stdcall__)) CryptUninstallDefaultContext(HCRYPTDEFAULTCONTEXT hDefaultContext,
 DWORD dwFlags, void *pvReserved);
BOOL __attribute__((__stdcall__)) CryptEnumOIDInfo(DWORD dwGroupId, DWORD dwFlags, void *pvArg,
 PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo);
PCCRYPT_OID_INFO __attribute__((__stdcall__)) CryptFindOIDInfo(DWORD dwKeyType, void *pvKey,
 DWORD dwGroupId);
BOOL __attribute__((__stdcall__)) CryptRegisterOIDInfo(PCCRYPT_OID_INFO pInfo, DWORD dwFlags);
BOOL __attribute__((__stdcall__)) CryptUnregisterOIDInfo(PCCRYPT_OID_INFO pInfo);
LPCWSTR __attribute__((__stdcall__)) CryptFindLocalizedName(LPCWSTR pwszCryptName);
LPCSTR __attribute__((__stdcall__)) CertAlgIdToOID(DWORD dwAlgId);
DWORD __attribute__((__stdcall__)) CertOIDToAlgId(LPCSTR pszObjId);
HCERTSTORE __attribute__((__stdcall__)) CertOpenStore(LPCSTR lpszStoreProvider, DWORD dwEncodingType,
 HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const void *pvPara);
HCERTSTORE __attribute__((__stdcall__)) CertOpenSystemStoreA(HCRYPTPROV_LEGACY hProv,
 LPCSTR szSubSystemProtocol);
HCERTSTORE __attribute__((__stdcall__)) CertOpenSystemStoreW(HCRYPTPROV_LEGACY hProv,
 LPCWSTR szSubSystemProtocol);
PCCERT_CONTEXT __attribute__((__stdcall__)) CertEnumCertificatesInStore(HCERTSTORE hCertStore,
 PCCERT_CONTEXT pPrev);
PCCRL_CONTEXT __attribute__((__stdcall__)) CertEnumCRLsInStore(HCERTSTORE hCertStore,
 PCCRL_CONTEXT pPrev);
PCCTL_CONTEXT __attribute__((__stdcall__)) CertEnumCTLsInStore(HCERTSTORE hCertStore,
 PCCTL_CONTEXT pPrev);
BOOL __attribute__((__stdcall__)) CertEnumSystemStoreLocation(DWORD dwFlags, void *pvArg,
 PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum);
BOOL __attribute__((__stdcall__)) CertEnumSystemStore(DWORD dwFlags, void *pvSystemStoreLocationPara,
 void *pvArg, PFN_CERT_ENUM_SYSTEM_STORE pfnEnum);
BOOL __attribute__((__stdcall__)) CertEnumPhysicalStore(const void *pvSystemStore, DWORD dwFlags,
 void *pvArg, PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum);
BOOL __attribute__((__stdcall__)) CertRegisterPhysicalStore(const void *pvSystemStore, DWORD dwFlags,
 LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo, void *pvReserved);
BOOL __attribute__((__stdcall__)) CertSaveStore(HCERTSTORE hCertStore, DWORD dwMsgAndCertEncodingType,
             DWORD dwSaveAs, DWORD dwSaveTo, void* pvSaveToPara, DWORD dwFlags);
BOOL __attribute__((__stdcall__)) CertAddStoreToCollection(HCERTSTORE hCollectionStore,
 HCERTSTORE hSiblingStore, DWORD dwUpdateFlags, DWORD dwPriority);
void __attribute__((__stdcall__)) CertRemoveStoreFromCollection(HCERTSTORE hCollectionStore,
 HCERTSTORE hSiblingStore);
BOOL __attribute__((__stdcall__)) CertCreateCertificateChainEngine(PCERT_CHAIN_ENGINE_CONFIG pConfig,
 HCERTCHAINENGINE *phChainEngine);
BOOL __attribute__((__stdcall__)) CertResyncCertificateChainEngine(HCERTCHAINENGINE hChainEngine);
void __attribute__((__stdcall__)) CertFreeCertificateChainEngine(HCERTCHAINENGINE hChainEngine);
BOOL __attribute__((__stdcall__)) CertGetCertificateChain(HCERTCHAINENGINE hChainEngine,
 PCCERT_CONTEXT pCertContext, LPFILETIME pTime, HCERTSTORE hAdditionalStore,
 PCERT_CHAIN_PARA pChainPara, DWORD dwFlags, LPVOID pvReserved,
 PCCERT_CHAIN_CONTEXT *ppChainContext);
PCCERT_CHAIN_CONTEXT __attribute__((__stdcall__)) CertDuplicateCertificateChain(
 PCCERT_CHAIN_CONTEXT pChainContext);
void __attribute__((__stdcall__)) CertFreeCertificateChain(PCCERT_CHAIN_CONTEXT pChainContext);
PCCERT_CHAIN_CONTEXT __attribute__((__stdcall__)) CertFindChainInStore(HCERTSTORE hCertStore,
 DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType,
 const void *pvFindPara, PCCERT_CHAIN_CONTEXT pPrevChainContext);
BOOL __attribute__((__stdcall__)) CertVerifyCertificateChainPolicy(LPCSTR szPolicyOID,
 PCCERT_CHAIN_CONTEXT pChainContext, PCERT_CHAIN_POLICY_PARA pPolicyPara,
 PCERT_CHAIN_POLICY_STATUS pPolicyStatus);
DWORD __attribute__((__stdcall__)) CertEnumCertificateContextProperties(PCCERT_CONTEXT pCertContext,
 DWORD dwPropId);
BOOL __attribute__((__stdcall__)) CertGetCertificateContextProperty(PCCERT_CONTEXT pCertContext,
 DWORD dwPropId, void *pvData, DWORD *pcbData);
BOOL __attribute__((__stdcall__)) CertSetCertificateContextProperty(PCCERT_CONTEXT pCertContext,
 DWORD dwPropId, DWORD dwFlags, const void *pvData);
DWORD __attribute__((__stdcall__)) CertEnumCRLContextProperties(PCCRL_CONTEXT pCRLContext,
 DWORD dwPropId);
BOOL __attribute__((__stdcall__)) CertGetCRLContextProperty(PCCRL_CONTEXT pCRLContext,
 DWORD dwPropId, void *pvData, DWORD *pcbData);
BOOL __attribute__((__stdcall__)) CertSetCRLContextProperty(PCCRL_CONTEXT pCRLContext,
 DWORD dwPropId, DWORD dwFlags, const void *pvData);
DWORD __attribute__((__stdcall__)) CertEnumCTLContextProperties(PCCTL_CONTEXT pCTLContext,
 DWORD dwPropId);
BOOL __attribute__((__stdcall__)) CertEnumSubjectInSortedCTL(PCCTL_CONTEXT pCTLContext,
 void **ppvNextSubject, PCRYPT_DER_BLOB pSubjectIdentifier,
 PCRYPT_DER_BLOB pEncodedAttributes);
BOOL __attribute__((__stdcall__)) CertGetCTLContextProperty(PCCTL_CONTEXT pCTLContext,
 DWORD dwPropId, void *pvData, DWORD *pcbData);
BOOL __attribute__((__stdcall__)) CertSetCTLContextProperty(PCCTL_CONTEXT pCTLContext,
 DWORD dwPropId, DWORD dwFlags, const void *pvData);
BOOL __attribute__((__stdcall__)) CertGetStoreProperty(HCERTSTORE hCertStore, DWORD dwPropId,
 void *pvData, DWORD *pcbData);
BOOL __attribute__((__stdcall__)) CertSetStoreProperty(HCERTSTORE hCertStore, DWORD dwPropId,
 DWORD dwFlags, const void *pvData);
BOOL __attribute__((__stdcall__)) CertControlStore(HCERTSTORE hCertStore, DWORD dwFlags,
 DWORD dwCtrlType, void const *pvCtrlPara);
HCERTSTORE __attribute__((__stdcall__)) CertDuplicateStore(HCERTSTORE hCertStore);
BOOL __attribute__((__stdcall__)) CertCloseStore( HCERTSTORE hCertStore, DWORD dwFlags );
BOOL __attribute__((__stdcall__)) CertFreeCertificateContext( PCCERT_CONTEXT pCertContext );
BOOL __attribute__((__stdcall__)) CertFreeCRLContext( PCCRL_CONTEXT pCrlContext );
BOOL __attribute__((__stdcall__)) CertFreeCTLContext( PCCTL_CONTEXT pCtlContext );
BOOL __attribute__((__stdcall__)) CertAddCertificateContextToStore(HCERTSTORE hCertStore,
 PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition,
 PCCERT_CONTEXT *ppStoreContext);
BOOL __attribute__((__stdcall__)) CertAddCRLContextToStore( HCERTSTORE hCertStore,
 PCCRL_CONTEXT pCrlContext, DWORD dwAddDisposition,
 PCCRL_CONTEXT *ppStoreContext );
BOOL __attribute__((__stdcall__)) CertAddCTLContextToStore( HCERTSTORE hCertStore,
 PCCTL_CONTEXT pCtlContext, DWORD dwAddDisposition,
 PCCTL_CONTEXT *ppStoreContext );
BOOL __attribute__((__stdcall__)) CertAddCertificateLinkToStore(HCERTSTORE hCertStore,
 PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition,
 PCCERT_CONTEXT *ppStoreContext);
BOOL __attribute__((__stdcall__)) CertAddCRLLinkToStore(HCERTSTORE hCertStore,
 PCCRL_CONTEXT pCrlContext, DWORD dwAddDisposition,
 PCCRL_CONTEXT *ppStoreContext);
BOOL __attribute__((__stdcall__)) CertAddCTLLinkToStore(HCERTSTORE hCertStore,
 PCCTL_CONTEXT pCtlContext, DWORD dwAddDisposition,
 PCCTL_CONTEXT *ppStoreContext);
BOOL __attribute__((__stdcall__)) CertAddEncodedCertificateToStore(HCERTSTORE hCertStore,
 DWORD dwCertEncodingType, const BYTE *pbCertEncoded, DWORD cbCertEncoded,
 DWORD dwAddDisposition, PCCERT_CONTEXT *ppCertContext);
BOOL __attribute__((__stdcall__)) CertAddEncodedCertificateToSystemStoreA(LPCSTR pszCertStoreName,
 const BYTE *pbCertEncoded, DWORD cbCertEncoded);
BOOL __attribute__((__stdcall__)) CertAddEncodedCertificateToSystemStoreW(LPCWSTR pszCertStoreName,
 const BYTE *pbCertEncoded, DWORD cbCertEncoded);
BOOL __attribute__((__stdcall__)) CertAddEncodedCRLToStore(HCERTSTORE hCertStore,
 DWORD dwCertEncodingType, const BYTE *pbCrlEncoded, DWORD cbCrlEncoded,
 DWORD dwAddDisposition, PCCRL_CONTEXT *ppCrlContext);
BOOL __attribute__((__stdcall__)) CertAddEncodedCTLToStore(HCERTSTORE hCertStore,
 DWORD dwMsgAndCertEncodingType, const BYTE *pbCtlEncoded, DWORD cbCtlEncoded,
 DWORD dwAddDisposition, PCCTL_CONTEXT *ppCtlContext);
BOOL __attribute__((__stdcall__)) CertAddSerializedElementToStore(HCERTSTORE hCertStore,
 const BYTE *pbElement, DWORD cbElement, DWORD dwAddDisposition, DWORD dwFlags,
 DWORD dwContextTypeFlags, DWORD *pdwContentType, const void **ppvContext);
BOOL __attribute__((__stdcall__)) CertCompareCertificate(DWORD dwCertEncodingType,
 PCERT_INFO pCertId1, PCERT_INFO pCertId2);
BOOL __attribute__((__stdcall__)) CertCompareCertificateName(DWORD dwCertEncodingType,
 PCERT_NAME_BLOB pCertName1, PCERT_NAME_BLOB pCertName2);
BOOL __attribute__((__stdcall__)) CertCompareIntegerBlob(PCRYPT_INTEGER_BLOB pInt1,
 PCRYPT_INTEGER_BLOB pInt2);
BOOL __attribute__((__stdcall__)) CertComparePublicKeyInfo(DWORD dwCertEncodingType,
 PCERT_PUBLIC_KEY_INFO pPublicKey1, PCERT_PUBLIC_KEY_INFO pPublicKey2);
DWORD __attribute__((__stdcall__)) CertGetPublicKeyLength(DWORD dwCertEncodingType,
 PCERT_PUBLIC_KEY_INFO pPublicKey);
const void * __attribute__((__stdcall__)) CertCreateContext(DWORD dwContextType, DWORD dwEncodingType,
 const BYTE *pbEncoded, DWORD cbEncoded, DWORD dwFlags,
 PCERT_CREATE_CONTEXT_PARA pCreatePara);
PCCERT_CONTEXT __attribute__((__stdcall__)) CertCreateCertificateContext(DWORD dwCertEncodingType,
 const BYTE *pbCertEncoded, DWORD cbCertEncoded);
PCCRL_CONTEXT __attribute__((__stdcall__)) CertCreateCRLContext( DWORD dwCertEncodingType,
  const BYTE* pbCrlEncoded, DWORD cbCrlEncoded);
PCCTL_CONTEXT __attribute__((__stdcall__)) CertCreateCTLContext(DWORD dwMsgAndCertEncodingType,
 const BYTE *pbCtlEncoded, DWORD cbCtlEncoded);
PCCERT_CONTEXT __attribute__((__stdcall__)) CertCreateSelfSignCertificate(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hProv,
 PCERT_NAME_BLOB pSubjectIssuerBlob, DWORD dwFlags,
 PCRYPT_KEY_PROV_INFO pKeyProvInfo,
 PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, PSYSTEMTIME pStartTime,
 PSYSTEMTIME pEndTime, PCERT_EXTENSIONS pExtensions);
BOOL __attribute__((__stdcall__)) CertDeleteCertificateFromStore(PCCERT_CONTEXT pCertContext);
BOOL __attribute__((__stdcall__)) CertDeleteCRLFromStore(PCCRL_CONTEXT pCrlContext);
BOOL __attribute__((__stdcall__)) CertDeleteCTLFromStore(PCCTL_CONTEXT pCtlContext);
PCCERT_CONTEXT __attribute__((__stdcall__)) CertDuplicateCertificateContext(
 PCCERT_CONTEXT pCertContext);
PCCRL_CONTEXT __attribute__((__stdcall__)) CertDuplicateCRLContext(PCCRL_CONTEXT pCrlContext);
PCCTL_CONTEXT __attribute__((__stdcall__)) CertDuplicateCTLContext(PCCTL_CONTEXT pCtlContext);
PCCERT_CONTEXT __attribute__((__stdcall__)) CertFindCertificateInStore( HCERTSTORE hCertStore,
 DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType,
 const void *pvFindPara, PCCERT_CONTEXT pPrevCertContext );
PCCRL_CONTEXT __attribute__((__stdcall__)) CertFindCRLInStore(HCERTSTORE hCertStore,
 DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType,
 const void *pvFindPara, PCCRL_CONTEXT pPrevCrlContext);
PCCTL_CONTEXT __attribute__((__stdcall__)) CertFindCTLInStore(HCERTSTORE hCertStore,
 DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType,
 const void *pvFindPara, PCCTL_CONTEXT pPrevCtlContext);
PCCERT_CONTEXT __attribute__((__stdcall__)) CertGetIssuerCertificateFromStore(HCERTSTORE hCertStore,
 PCCERT_CONTEXT pSubjectContext, PCCERT_CONTEXT pPrevIssuerContext,
 DWORD *pdwFlags);
PCCERT_CONTEXT __attribute__((__stdcall__)) CertGetSubjectCertificateFromStore(HCERTSTORE hCertStore,
 DWORD dwCertEncodingType, PCERT_INFO pCertId);
PCCRL_CONTEXT __attribute__((__stdcall__)) CertGetCRLFromStore(HCERTSTORE hCertStore,
 PCCERT_CONTEXT pIssuerContext, PCCRL_CONTEXT pPrevCrlContext, DWORD *pdwFlags);
BOOL __attribute__((__stdcall__)) CertSerializeCertificateStoreElement(PCCERT_CONTEXT pCertContext,
 DWORD dwFlags, BYTE *pbElement, DWORD *pcbElement);
BOOL __attribute__((__stdcall__)) CertSerializeCRLStoreElement(PCCRL_CONTEXT pCrlContext,
 DWORD dwFlags, BYTE *pbElement, DWORD *pcbElement);
BOOL __attribute__((__stdcall__)) CertSerializeCTLStoreElement(PCCTL_CONTEXT pCtlContext,
 DWORD dwFlags, BYTE *pbElement, DWORD *pcbElement);
BOOL __attribute__((__stdcall__)) CertGetIntendedKeyUsage(DWORD dwCertEncodingType,
 PCERT_INFO pCertInfo, BYTE *pbKeyUsage, DWORD cbKeyUsage);
BOOL __attribute__((__stdcall__)) CertGetEnhancedKeyUsage(PCCERT_CONTEXT pCertContext, DWORD dwFlags,
 PCERT_ENHKEY_USAGE pUsage, DWORD *pcbUsage);
BOOL __attribute__((__stdcall__)) CertSetEnhancedKeyUsage(PCCERT_CONTEXT pCertContext,
 PCERT_ENHKEY_USAGE pUsage);
BOOL __attribute__((__stdcall__)) CertAddEnhancedKeyUsageIdentifier(PCCERT_CONTEXT pCertContext,
 LPCSTR pszUsageIdentifer);
BOOL __attribute__((__stdcall__)) CertRemoveEnhancedKeyUsageIdentifier(PCCERT_CONTEXT pCertContext,
 LPCSTR pszUsageIdentifer);
BOOL __attribute__((__stdcall__)) CertGetValidUsages(DWORD cCerts, PCCERT_CONTEXT *rghCerts,
 int *cNumOIDs, LPSTR *rghOIDs, DWORD *pcbOIDs);
BOOL __attribute__((__stdcall__)) CryptEncodeObject(DWORD dwCertEncodingType, LPCSTR lpszStructType,
 const void *pvStructInfo, BYTE *pbEncoded, DWORD *pcbEncoded);
BOOL __attribute__((__stdcall__)) CryptEncodeObjectEx(DWORD dwCertEncodingType, LPCSTR lpszStructType,
 const void *pvStructInfo, DWORD dwFlags, PCRYPT_ENCODE_PARA pEncodePara,
 void *pvEncoded, DWORD *pcbEncoded);
BOOL __attribute__((__stdcall__)) CryptDecodeObject(DWORD dwCertEncodingType, LPCSTR lpszStructType,
 const BYTE *pbEncoded, DWORD cbEncoded, DWORD dwFlags, void *pvStructInfo,
 DWORD *pcbStructInfo);
BOOL __attribute__((__stdcall__)) CryptDecodeObjectEx(DWORD dwCertEncodingType, LPCSTR lpszStructType,
 const BYTE *pbEncoded, DWORD cbEncoded, DWORD dwFlags,
 PCRYPT_DECODE_PARA pDecodePara, void *pvStructInfo, DWORD *pcbStructInfo);
BOOL __attribute__((__stdcall__)) CryptFormatObject(DWORD dwCertEncodingType, DWORD dwFormatType,
 DWORD dwFormatStrType, void *pFormatStruct, LPCSTR lpszStructType,
 const BYTE *pbEncoded, DWORD cbEncoded, void *pbFormat, DWORD *pcbFormat);
BOOL __attribute__((__stdcall__)) CryptHashCertificate(HCRYPTPROV_LEGACY hCryptProv, ALG_ID Algid,
 DWORD dwFlags, const BYTE *pbEncoded, DWORD cbEncoded, BYTE *pbComputedHash,
 DWORD *pcbComputedHash);
BOOL __attribute__((__stdcall__)) CryptHashPublicKeyInfo(HCRYPTPROV_LEGACY hCryptProv, ALG_ID Algid,
 DWORD dwFlags, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo,
 BYTE *pbComputedHash, DWORD *pcbComputedHash);
BOOL __attribute__((__stdcall__)) CryptHashToBeSigned(HCRYPTPROV_LEGACY hCryptProv, DWORD dwCertEncodingType,
 const BYTE *pbEncoded, DWORD cbEncoded, BYTE *pbComputedHash,
 DWORD *pcbComputedHash);
BOOL __attribute__((__stdcall__)) CryptQueryObject(DWORD dwObjectType, const void* pvObject,
 DWORD dwExpectedContentTypeFlags, DWORD dwExpectedFormatTypeFlags,
 DWORD dwFlags, DWORD* pdwMsgAndCertEncodingType, DWORD* pdwContentType,
 DWORD* pdwFormatType, HCERTSTORE* phCertStore, HCRYPTMSG* phMsg,
 const void** ppvContext);
BOOL __attribute__((__stdcall__)) CryptSignCertificate(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProv, DWORD dwKeySpec,
 DWORD dwCertEncodingType, const BYTE *pbEncodedToBeSigned,
 DWORD cbEncodedToBeSigned, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
 const void *pvHashAuxInfo, BYTE *pbSignature, DWORD *pcbSignature);
BOOL __attribute__((__stdcall__)) CryptSignAndEncodeCertificate(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProv,
 DWORD dwKeySpec, DWORD dwCertEncodingType, LPCSTR lpszStructType,
 const void *pvStructInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
 const void *pvHashAuxInfo, BYTE *pbEncoded, DWORD *pcbEncoded);
BOOL __attribute__((__stdcall__)) CryptVerifyCertificateSignature(HCRYPTPROV_LEGACY hCryptProv,
 DWORD dwCertEncodingType, const BYTE *pbEncoded, DWORD cbEncoded,
 PCERT_PUBLIC_KEY_INFO pPublicKey);
BOOL __attribute__((__stdcall__)) CryptVerifyCertificateSignatureEx(HCRYPTPROV_LEGACY hCryptProv,
 DWORD dwCertEncodingType, DWORD dwSubjectType, void *pvSubject,
 DWORD dwIssuerType, void *pvIssuer, DWORD dwFlags, void *pvReserved);
PCRYPT_ATTRIBUTE __attribute__((__stdcall__)) CertFindAttribute(LPCSTR pszObjId, DWORD cAttr,
 CRYPT_ATTRIBUTE rgAttr[]);
PCERT_EXTENSION __attribute__((__stdcall__)) CertFindExtension(LPCSTR pszObjId, DWORD cExtensions,
 CERT_EXTENSION rgExtensions[]);
PCERT_RDN_ATTR __attribute__((__stdcall__)) CertFindRDNAttr(LPCSTR pszObjId, PCERT_NAME_INFO pName);
BOOL __attribute__((__stdcall__)) CertFindSubjectInSortedCTL(PCRYPT_DATA_BLOB pSubjectIdentifier,
 PCCTL_CONTEXT pCtlContext, DWORD dwFlags, void *pvReserved,
 PCRYPT_DER_BLOB pEncodedAttributes);
BOOL __attribute__((__stdcall__)) CertIsRDNAttrsInCertificateName(DWORD dwCertEncodingType,
 DWORD dwFlags, PCERT_NAME_BLOB pCertName, PCERT_RDN pRDN);
BOOL __attribute__((__stdcall__)) CertIsValidCRLForCertificate(PCCERT_CONTEXT pCert,
 PCCRL_CONTEXT pCrl, DWORD dwFlags, void *pvReserved);
BOOL __attribute__((__stdcall__)) CertFindCertificateInCRL(PCCERT_CONTEXT pCert,
 PCCRL_CONTEXT pCrlContext, DWORD dwFlags, void *pvReserved,
 PCRL_ENTRY *ppCrlEntry);
BOOL __attribute__((__stdcall__)) CertVerifyCRLRevocation(DWORD dwCertEncodingType,
 PCERT_INFO pCertId, DWORD cCrlInfo, PCRL_INFO rgpCrlInfo[]);
BOOL __attribute__((__stdcall__)) CertVerifySubjectCertificateContext(PCCERT_CONTEXT pSubject,
 PCCERT_CONTEXT pIssuer, DWORD *pdwFlags);
LONG __attribute__((__stdcall__)) CertVerifyCRLTimeValidity(LPFILETIME pTimeToVerify,
 PCRL_INFO pCrlInfo);
LONG __attribute__((__stdcall__)) CertVerifyTimeValidity(LPFILETIME pTimeToVerify,
 PCERT_INFO pCertInfo);
BOOL __attribute__((__stdcall__)) CertVerifyValidityNesting(PCERT_INFO pSubjectInfo,
 PCERT_INFO pIssuerInfo);
BOOL __attribute__((__stdcall__)) CertVerifyCTLUsage(DWORD dwEncodingType, DWORD dwSubjectType,
 void *pvSubject, PCTL_USAGE pSubjectUsage, DWORD dwFlags,
 PCTL_VERIFY_USAGE_PARA pVerifyUsagePara,
 PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus);
BOOL __attribute__((__stdcall__)) CertVerifyRevocation(DWORD dwEncodingType, DWORD dwRevType,
 DWORD cContext, PVOID rgpvContext[], DWORD dwFlags,
 PCERT_REVOCATION_PARA pRevPara, PCERT_REVOCATION_STATUS pRevStatus);
BOOL __attribute__((__stdcall__)) CryptExportPublicKeyInfo(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProv, DWORD dwKeySpec,
 DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, DWORD *pcbInfo);
BOOL __attribute__((__stdcall__)) CryptExportPublicKeyInfoEx(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProv, DWORD dwKeySpec,
 DWORD dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags,
 void *pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD *pcbInfo);
BOOL __attribute__((__stdcall__)) CryptImportPublicKeyInfo(HCRYPTPROV hCryptProv,
 DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, HCRYPTKEY *phKey);
BOOL __attribute__((__stdcall__)) CryptImportPublicKeyInfoEx(HCRYPTPROV hCryptProv,
 DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, ALG_ID aiKeyAlg,
 DWORD dwFlags, void *pvAuxInfo, HCRYPTKEY *phKey);
BOOL __attribute__((__stdcall__)) CryptAcquireCertificatePrivateKey(PCCERT_CONTEXT pCert,
 DWORD dwFlags, void *pvReserved, HCRYPTPROV_OR_NCRYPT_KEY_HANDLE *phCryptProv, DWORD *pdwKeySpec,
 BOOL *pfCallerFreeProv);
BOOL __attribute__((__stdcall__)) CryptFindCertificateKeyProvInfo(PCCERT_CONTEXT pCert,
 DWORD dwFlags, void *pvReserved);
BOOL __attribute__((__stdcall__)) CryptProtectData( DATA_BLOB* pDataIn, LPCWSTR szDataDescr,
 DATA_BLOB* pOptionalEntropy, PVOID pvReserved,
 CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, DWORD dwFlags, DATA_BLOB* pDataOut );
BOOL __attribute__((__stdcall__)) CryptUnprotectData( DATA_BLOB* pDataIn, LPWSTR* ppszDataDescr,
 DATA_BLOB* pOptionalEntropy, PVOID pvReserved,
 CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, DWORD dwFlags, DATA_BLOB* pDataOut );
DWORD __attribute__((__stdcall__)) CertGetNameStringA(PCCERT_CONTEXT pCertContext, DWORD dwType,
 DWORD dwFlags, void *pvTypePara, LPSTR pszNameString, DWORD cchNameString);
DWORD __attribute__((__stdcall__)) CertGetNameStringW(PCCERT_CONTEXT pCertContext, DWORD dwType,
 DWORD dwFlags, void *pvTypePara, LPWSTR pszNameString, DWORD cchNameString);
DWORD __attribute__((__stdcall__)) CertRDNValueToStrA(DWORD dwValueType, PCERT_RDN_VALUE_BLOB pValue,
 LPSTR psz, DWORD csz);
DWORD __attribute__((__stdcall__)) CertRDNValueToStrW(DWORD dwValueType, PCERT_RDN_VALUE_BLOB pValue,
 LPWSTR psz, DWORD csz);
DWORD __attribute__((__stdcall__)) CertNameToStrA(DWORD dwCertEncodingType, PCERT_NAME_BLOB pName,
 DWORD dwStrType, LPSTR psz, DWORD csz);
DWORD __attribute__((__stdcall__)) CertNameToStrW(DWORD dwCertEncodingType, PCERT_NAME_BLOB pName,
 DWORD dwStrType, LPWSTR psz, DWORD csz);
BOOL __attribute__((__stdcall__)) CertStrToNameA(DWORD dwCertEncodingType, LPCSTR pszX500,
 DWORD dwStrType, void *pvReserved, BYTE *pbEncoded, DWORD *pcbEncoded,
 LPCSTR *ppszError);
BOOL __attribute__((__stdcall__)) CertStrToNameW(DWORD dwCertEncodingType, LPCWSTR pszX500,
 DWORD dwStrType, void *pvReserved, BYTE *pbEncoded, DWORD *pcbEncoded,
 LPCWSTR *ppszError);
DWORD __attribute__((__stdcall__)) CryptMsgCalculateEncodedLength(DWORD dwMsgEncodingType,
 DWORD dwFlags, DWORD dwMsgType, const void *pvMsgEncodeInfo,
 LPSTR pszInnerContentObjID, DWORD cbData);
BOOL __attribute__((__stdcall__)) CryptMsgClose(HCRYPTMSG hCryptMsg);
BOOL __attribute__((__stdcall__)) CryptMsgControl(HCRYPTMSG hCryptMsg, DWORD dwFlags,
 DWORD dwCtrlType, const void *pvCtrlPara);
BOOL __attribute__((__stdcall__)) CryptMsgCountersign(HCRYPTMSG hCryptMsg, DWORD dwIndex,
 DWORD dwCountersigners, PCMSG_SIGNER_ENCODE_INFO rgCountersigners);
BOOL __attribute__((__stdcall__)) CryptMsgCountersignEncoded(DWORD dwEncodingType, PBYTE pbSignerInfo,
 DWORD cbSignerInfo, DWORD cCountersigners,
 PCMSG_SIGNER_ENCODE_INFO rgCountersigners, PBYTE pbCountersignature,
 PDWORD pcbCountersignature);
HCRYPTMSG __attribute__((__stdcall__)) CryptMsgDuplicate(HCRYPTMSG hCryptMsg);
BOOL __attribute__((__stdcall__)) CryptMsgEncodeAndSignCTL(DWORD dwMsgEncodingType,
 PCTL_INFO pCtlInfo, PCMSG_SIGNED_ENCODE_INFO pSignInfo, DWORD dwFlags,
 BYTE *pbEncoded, DWORD *pcbEncoded);
BOOL __attribute__((__stdcall__)) CryptMsgGetAndVerifySigner(HCRYPTMSG hCryptMsg, DWORD cSignerStore,
 HCERTSTORE *rghSignerStore, DWORD dwFlags, PCCERT_CONTEXT *ppSigner,
 DWORD *pdwSignerIndex);
BOOL __attribute__((__stdcall__)) CryptMsgGetParam(HCRYPTMSG hCryptMsg, DWORD dwParamType,
 DWORD dwIndex, void *pvData, DWORD *pcbData);
HCRYPTMSG __attribute__((__stdcall__)) CryptMsgOpenToDecode(DWORD dwMsgEncodingType, DWORD dwFlags,
 DWORD dwMsgType, HCRYPTPROV_LEGACY hCryptProv, PCERT_INFO pRecipientInfo,
 PCMSG_STREAM_INFO pStreamInfo);
HCRYPTMSG __attribute__((__stdcall__)) CryptMsgOpenToEncode(DWORD dwMsgEncodingType, DWORD dwFlags,
 DWORD dwMsgType, const void *pvMsgEncodeInfo, LPSTR pszInnerContentObjID,
 PCMSG_STREAM_INFO pStreamInfo);
BOOL __attribute__((__stdcall__)) CryptMsgSignCTL(DWORD dwMsgEncodingType, BYTE *pbCtlContent,
 DWORD cbCtlContent, PCMSG_SIGNED_ENCODE_INFO pSignInfo, DWORD dwFlags,
 BYTE *pbEncoded, DWORD *pcbEncoded);
BOOL __attribute__((__stdcall__)) CryptMsgUpdate(HCRYPTMSG hCryptMsg, const BYTE *pbData,
 DWORD cbData, BOOL fFinal);
BOOL __attribute__((__stdcall__)) CryptMsgVerifyCountersignatureEncoded(HCRYPTPROV_LEGACY hCryptProv,
 DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo,
 PBYTE pbSignerInfoCountersignature, DWORD cbSignerInfoCountersignature,
 PCERT_INFO pciCountersigner);
BOOL __attribute__((__stdcall__)) CryptMsgVerifyCountersignatureEncodedEx(HCRYPTPROV_LEGACY hCryptProv,
 DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo,
 PBYTE pbSignerInfoCountersignature, DWORD cbSignerInfoCountersignature,
 DWORD dwSignerType, void *pvSigner, DWORD dwFlags, void *pvReserved);
BOOL __attribute__((__stdcall__)) CryptSignMessage(PCRYPT_SIGN_MESSAGE_PARA pSignPara,
 BOOL fDetachedSignature, DWORD cToBeSigned, const BYTE *rgpbToBeSigned[],
 DWORD rgcbToBeSigned[], BYTE *pbSignedBlob, DWORD *pcbSignedBlob);
BOOL __attribute__((__stdcall__)) CryptSignMessageWithKey(PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara,
 const BYTE *pbToBeSigned, DWORD cbToBeSigned, BYTE *pbSignedBlob,
 DWORD *pcbSignedBlob);
BOOL __attribute__((__stdcall__)) CryptVerifyMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
 DWORD dwSignerIndex, const BYTE* pbSignedBlob, DWORD cbSignedBlob,
 BYTE* pbDecoded, DWORD* pcbDecoded, PCCERT_CONTEXT* ppSignerCert);
BOOL __attribute__((__stdcall__)) CryptVerifyMessageSignatureWithKey(
 PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara,
 PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, const BYTE *pbSignedBlob,
 DWORD cbSignedBlob, BYTE *pbDecoded, DWORD *pcbDecoded);
BOOL __attribute__((__stdcall__)) CryptVerifyDetachedMessageSignature(
 PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex,
 const BYTE *pbDetachedSignBlob, DWORD cbDetachedSignBlob, DWORD cToBeSigned,
 const BYTE *rgpbToBeSigned[], DWORD rgcbToBeSigned[],
 PCCERT_CONTEXT *ppSignerCert);
LONG __attribute__((__stdcall__)) CryptGetMessageSignerCount(DWORD dwMsgEncodingType,
 const BYTE *pbSignedBlob, DWORD cbSignedBlob);
BOOL __attribute__((__stdcall__)) CryptEncryptMessage(PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
 DWORD cRecipientCert, PCCERT_CONTEXT rgpRecipientCert[],
 const BYTE *pbToBeEncrypted, DWORD cbToBeEncrypted, BYTE *pbEncryptedBlob,
 DWORD *pcbEncryptedBlob);
BOOL __attribute__((__stdcall__)) CryptDecryptMessage(PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
 const BYTE *pbEncryptedBlob, DWORD cbEncryptedBlob, BYTE *pbDecrypted,
 DWORD *pcbDecrypted, PCCERT_CONTEXT *ppXchgCert);
BOOL __attribute__((__stdcall__)) CryptSignAndEncryptMessage(PCRYPT_SIGN_MESSAGE_PARA pSignPara,
 PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, DWORD cRecipientCert,
 PCCERT_CONTEXT rgpRecipientCert[], const BYTE *pbToBeSignedAndEncrypted,
 DWORD cbToBeSignedAndEncrypted, BYTE *pbSignedAndEncryptedBlob,
 DWORD *pcbSignedAndEncryptedBlob);
BOOL __attribute__((__stdcall__)) CryptDecryptAndVerifyMessageSignature(
 PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
 PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex,
 const BYTE *pbEncryptedBlob, DWORD cbEncryptedBlob, BYTE *pbDecrypted,
 DWORD *pcbDecrypted, PCCERT_CONTEXT *ppXchgCert, PCCERT_CONTEXT *ppSignerCert);
HCERTSTORE __attribute__((__stdcall__)) CryptGetMessageCertificates(DWORD dwMsgAndCertEncodingType,
 HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const BYTE *pbSignedBlob,
 DWORD cbSignedBlob);
BOOL __attribute__((__stdcall__)) CryptDecodeMessage(DWORD dwMsgTypeFlags,
 PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
 PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex,
 const BYTE *pbEncodedBlob, DWORD cbEncodedBlob, DWORD dwPrevInnerContentType,
 DWORD *pdwMsgType, DWORD *pdwInnerContentType, BYTE *pbDecoded,
 DWORD *pcbDecoded, PCCERT_CONTEXT *ppXchgCert, PCCERT_CONTEXT *ppSignerCert);
BOOL __attribute__((__stdcall__)) CryptHashMessage(PCRYPT_HASH_MESSAGE_PARA pHashPara,
 BOOL fDetachedHash, DWORD cToBeHashed, const BYTE *rgpbToBeHashed[],
 DWORD rgcbToBeHashed[], BYTE *pbHashedBlob, DWORD *pcbHashedBlob,
 BYTE *pbComputedHash, DWORD *pcbComputedHash);
BOOL __attribute__((__stdcall__)) CryptVerifyMessageHash(PCRYPT_HASH_MESSAGE_PARA pHashPara,
 BYTE *pbHashedBlob, DWORD cbHashedBlob, BYTE *pbToBeHashed,
 DWORD *pcbToBeHashed, BYTE *pbComputedHash, DWORD *pcbComputedHash);
BOOL __attribute__((__stdcall__)) CryptVerifyDetachedMessageHash(PCRYPT_HASH_MESSAGE_PARA pHashPara,
 BYTE *pbDetachedHashBlob, DWORD cbDetachedHashBlob, DWORD cToBeHashed,
 const BYTE *rgpbToBeHashed[], DWORD rgcbToBeHashed[], BYTE *pbComputedHash,
 DWORD *pcbComputedHash);
HCERTSTORE __attribute__((__stdcall__)) PFXImportCertStore(CRYPT_DATA_BLOB *pPFX, LPCWSTR szPassword,
 DWORD dwFlags);
BOOL __attribute__((__stdcall__)) PFXIsPFXBlob(CRYPT_DATA_BLOB *pPFX);
BOOL __attribute__((__stdcall__)) PFXVerifyPassword(CRYPT_DATA_BLOB *pPFX, LPCWSTR szPassword,
 DWORD dwFlags);
BOOL __attribute__((__stdcall__)) PFXExportCertStoreEx(HCERTSTORE hStore, CRYPT_DATA_BLOB *pPFX,
 LPCWSTR szPassword, void *pvReserved, DWORD dwFlags);
BOOL __attribute__((__stdcall__)) PFXExportCertStore(HCERTSTORE hStore, CRYPT_DATA_BLOB *pPFX,
 LPCWSTR szPassword, DWORD dwFlags);
BOOL __attribute__((__stdcall__)) CryptCancelAsyncRetrieval(HCRYPTASYNC hAsyncRetrieval);
BOOL __attribute__((__stdcall__)) CryptGetObjectUrl(LPCSTR pszUrlOid, LPVOID pvPara, DWORD dwFlags,
 PCRYPT_URL_ARRAY pUrlArray, DWORD *pcbUrlArray, PCRYPT_URL_INFO pUrlInfo,
 DWORD *pcbUrlInfo, LPVOID pvReserved);
BOOL __attribute__((__stdcall__)) CryptGetTimeValidObject(LPCSTR pszTimeValidOid, void *pvPara,
 PCCERT_CONTEXT pIssuer, LPFILETIME pftValidFor, DWORD dwFlags, DWORD dwTimeout,
 void **ppvObject, PCRYPT_CREDENTIALS pCredentials, void *pvReserved);
BOOL __attribute__((__stdcall__)) CryptFlushTimeValidObject(LPCSTR pszFlushTimeValidOid, void *pvPara,
 PCCERT_CONTEXT pIssuer, DWORD dwFlags, void *pvReserved);
BOOL __attribute__((__stdcall__)) CryptInstallCancelRetrieval(PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel,
 const void *pvArg, DWORD dwFlags, void *pvReserved);
BOOL __attribute__((__stdcall__)) CryptUninstallCancelRetrieval(DWORD dwFlags, void *pvReserved);
BOOL __attribute__((__stdcall__)) CryptRetrieveObjectByUrlA(LPCSTR pszURL, LPCSTR pszObjectOid,
 DWORD dwRetrievalFlags, DWORD dwTimeout, LPVOID *ppvObject,
 HCRYPTASYNC hAsyncRetrieve, PCRYPT_CREDENTIALS pCredentials, LPVOID pvVerify,
 PCRYPT_RETRIEVE_AUX_INFO pAuxInfo);
BOOL __attribute__((__stdcall__)) CryptRetrieveObjectByUrlW(LPCWSTR pszURL, LPCSTR pszObjectOid,
 DWORD dwRetrievalFlags, DWORD dwTimeout, LPVOID *ppvObject,
 HCRYPTASYNC hAsyncRetrieve, PCRYPT_CREDENTIALS pCredentials, LPVOID pvVerify,
 PCRYPT_RETRIEVE_AUX_INFO pAuxInfo);
typedef struct _PRINTER_DEFAULTSA {
  LPSTR pDatatype;
  LPDEVMODEA pDevMode;
  ACCESS_MASK DesiredAccess;
} PRINTER_DEFAULTSA, *LPPRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW {
  LPWSTR pDatatype;
  LPDEVMODEW pDevMode;
  ACCESS_MASK DesiredAccess;
} PRINTER_DEFAULTSW, *LPPRINTER_DEFAULTSW;
typedef PRINTER_DEFAULTSA PRINTER_DEFAULTS;
typedef LPPRINTER_DEFAULTSA LPPRINTER_DEFAULTS;
typedef struct _DRIVER_INFO_1A {
  LPSTR pName;
} DRIVER_INFO_1A, *PDRIVER_INFO_1A, *LPDRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W {
  LPWSTR pName;
} DRIVER_INFO_1W, *PDRIVER_INFO_1W, *LPDRIVER_INFO_1W;
typedef DRIVER_INFO_1A DRIVER_INFO_1;
typedef PDRIVER_INFO_1A PDRIVER_INFO_1;
typedef LPDRIVER_INFO_1A LPDRIVER_INFO_1;
typedef struct _DRIVER_INFO_2A {
  DWORD cVersion;
  LPSTR pName;
  LPSTR pEnvironment;
  LPSTR pDriverPath;
  LPSTR pDataFile;
  LPSTR pConfigFile;
} DRIVER_INFO_2A, *PDRIVER_INFO_2A, *LPDRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W {
  DWORD cVersion;
  LPWSTR pName;
  LPWSTR pEnvironment;
  LPWSTR pDriverPath;
  LPWSTR pDataFile;
  LPWSTR pConfigFile;
} DRIVER_INFO_2W, *PDRIVER_INFO_2W, *LPDRIVER_INFO_2W;
typedef DRIVER_INFO_2A DRIVER_INFO_2;
typedef PDRIVER_INFO_2A PDRIVER_INFO_2;
typedef LPDRIVER_INFO_2A LPDRIVER_INFO_2;
typedef struct _DRIVER_INFO_3A {
  DWORD cVersion;
  LPSTR pName;
  LPSTR pEnvironment;
  LPSTR pDriverPath;
  LPSTR pDataFile;
  LPSTR pConfigFile;
  LPSTR pHelpFile;
  LPSTR pDependentFiles;
  LPSTR pMonitorName;
  LPSTR pDefaultDataType;
} DRIVER_INFO_3A, *PDRIVER_INFO_3A, *LPDRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W {
  DWORD cVersion;
  LPWSTR pName;
  LPWSTR pEnvironment;
  LPWSTR pDriverPath;
  LPWSTR pDataFile;
  LPWSTR pConfigFile;
  LPWSTR pHelpFile;
  LPWSTR pDependentFiles;
  LPWSTR pMonitorName;
  LPWSTR pDefaultDataType;
} DRIVER_INFO_3W, *PDRIVER_INFO_3W, *LPDRIVER_INFO_3W;
typedef DRIVER_INFO_3A DRIVER_INFO_3;
typedef PDRIVER_INFO_3A PDRIVER_INFO_3;
typedef LPDRIVER_INFO_3A LPDRIVER_INFO_3;
typedef struct _DRIVER_INFO_4A {
  DWORD cVersion;
  LPSTR pName;
  LPSTR pEnvironment;
  LPSTR pDriverPath;
  LPSTR pDataFile;
  LPSTR pConfigFile;
  LPSTR pHelpFile;
  LPSTR pDependentFiles;
  LPSTR pMonitorName;
  LPSTR pDefaultDataType;
  LPSTR pszzPreviousNames;
} DRIVER_INFO_4A, *PDRIVER_INFO_4A, *LPDRIVER_INFO_4A;
typedef struct _DRIVER_INFO_4W {
  DWORD cVersion;
  LPWSTR pName;
  LPWSTR pEnvironment;
  LPWSTR pDriverPath;
  LPWSTR pDataFile;
  LPWSTR pConfigFile;
  LPWSTR pHelpFile;
  LPWSTR pDependentFiles;
  LPWSTR pMonitorName;
  LPWSTR pDefaultDataType;
  LPWSTR pszzPreviousNames;
} DRIVER_INFO_4W, *PDRIVER_INFO_4W, *LPDRIVER_INFO_4W;
typedef DRIVER_INFO_4A DRIVER_INFO_4;
typedef PDRIVER_INFO_4A PDRIVER_INFO_4;
typedef LPDRIVER_INFO_4A LPDRIVER_INFO_4;
typedef struct _DRIVER_INFO_5A {
  DWORD cVersion;
  LPSTR pName;
  LPSTR pEnvironment;
  LPSTR pDriverPath;
  LPSTR pDataFile;
  LPSTR pConfigFile;
  DWORD dwDriverAttributes;
  DWORD dwConfigVersion;
  DWORD dwDriverVersion;
} DRIVER_INFO_5A, *PDRIVER_INFO_5A, *LPDRIVER_INFO_5A;
typedef struct _DRIVER_INFO_5W {
  DWORD cVersion;
  LPWSTR pName;
  LPWSTR pEnvironment;
  LPWSTR pDriverPath;
  LPWSTR pDataFile;
  LPWSTR pConfigFile;
  DWORD dwDriverAttributes;
  DWORD dwConfigVersion;
  DWORD dwDriverVersion;
} DRIVER_INFO_5W, *PDRIVER_INFO_5W, *LPDRIVER_INFO_5W;
typedef DRIVER_INFO_5A DRIVER_INFO_5;
typedef PDRIVER_INFO_5A PDRIVER_INFO_5;
typedef LPDRIVER_INFO_5A LPDRIVER_INFO_5;
typedef struct _DRIVER_INFO_6A {
  DWORD cVersion;
  LPSTR pName;
  LPSTR pEnvironment;
  LPSTR pDriverPath;
  LPSTR pDataFile;
  LPSTR pConfigFile;
  LPSTR pHelpFile;
  LPSTR pDependentFiles;
  LPSTR pMonitorName;
  LPSTR pDefaultDataType;
  LPSTR pszzPreviousNames;
  FILETIME ftDriverDate;
  DWORDLONG dwlDriverVersion;
  LPSTR pszMfgName;
  LPSTR pszOEMUrl;
  LPSTR pszHardwareID;
  LPSTR pszProvider;
} DRIVER_INFO_6A, *PDRIVER_INFO_6A, *LPDRIVER_INFO_6A;
typedef struct _DRIVER_INFO_6W {
  DWORD cVersion;
  LPWSTR pName;
  LPWSTR pEnvironment;
  LPWSTR pDriverPath;
  LPWSTR pDataFile;
  LPWSTR pConfigFile;
  LPWSTR pHelpFile;
  LPWSTR pDependentFiles;
  LPWSTR pMonitorName;
  LPWSTR pDefaultDataType;
  LPWSTR pszzPreviousNames;
  FILETIME ftDriverDate;
  DWORDLONG dwlDriverVersion;
  LPWSTR pszMfgName;
  LPWSTR pszOEMUrl;
  LPWSTR pszHardwareID;
  LPWSTR pszProvider;
} DRIVER_INFO_6W, *PDRIVER_INFO_6W, *LPDRIVER_INFO_6W;
typedef DRIVER_INFO_6A DRIVER_INFO_6;
typedef PDRIVER_INFO_6A PDRIVER_INFO_6;
typedef LPDRIVER_INFO_6A LPDRIVER_INFO_6;
typedef struct _DRIVER_INFO_8A {
  DWORD cVersion;
  LPSTR pName;
  LPSTR pEnvironment;
  LPSTR pDriverPath;
  LPSTR pDataFile;
  LPSTR pConfigFile;
  LPSTR pHelpFile;
  LPSTR pDependentFiles;
  LPSTR pMonitorName;
  LPSTR pDefaultDataType;
  LPSTR pszzPreviousNames;
  FILETIME ftDriverDate;
  DWORDLONG dwlDriverVersion;
  LPSTR pszMfgName;
  LPSTR pszOEMUrl;
  LPSTR pszHardwareID;
  LPSTR pszProvider;
  LPSTR pszPrintProcessor;
  LPSTR pszVendorSetup;
  LPSTR pszzColorProfiles;
  LPSTR pszInfPath;
  DWORD dwPrinterDriverAttributes;
  LPSTR pszzCoreDriverDependencies;
  FILETIME ftMinInboxDriverVerDate;
  DWORDLONG dwlMinInboxDriverVerVersion;
} DRIVER_INFO_8A, *PDRIVER_INFO_8A, *LPDRIVER_INFO_8A;
typedef struct _DRIVER_INFO_8W {
  DWORD cVersion;
  LPWSTR pName;
  LPWSTR pEnvironment;
  LPWSTR pDriverPath;
  LPWSTR pDataFile;
  LPWSTR pConfigFile;
  LPWSTR pHelpFile;
  LPWSTR pDependentFiles;
  LPWSTR pMonitorName;
  LPWSTR pDefaultDataType;
  LPWSTR pszzPreviousNames;
  FILETIME ftDriverDate;
  DWORDLONG dwlDriverVersion;
  LPWSTR pszMfgName;
  LPWSTR pszOEMUrl;
  LPWSTR pszHardwareID;
  LPWSTR pszProvider;
  LPWSTR pszPrintProcessor;
  LPWSTR pszVendorSetup;
  LPWSTR pszzColorProfiles;
  LPWSTR pszInfPath;
  DWORD dwPrinterDriverAttributes;
  LPWSTR pszzCoreDriverDependencies;
  FILETIME ftMinInboxDriverVerDate;
  DWORDLONG dwlMinInboxDriverVerVersion;
} DRIVER_INFO_8W, *PDRIVER_INFO_8W, *LPDRIVER_INFO_8W;
typedef DRIVER_INFO_8A DRIVER_INFO_8;
typedef PDRIVER_INFO_8A PDRIVER_INFO_8;
typedef LPDRIVER_INFO_8A LPDRIVER_INFO_8;
typedef struct _PRINTER_INFO_1A {
  DWORD Flags;
  LPSTR pDescription;
  LPSTR pName;
  LPSTR pComment;
} PRINTER_INFO_1A, *PPRINTER_INFO_1A, *LPPRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W {
  DWORD Flags;
  LPWSTR pDescription;
  LPWSTR pName;
  LPWSTR pComment;
} PRINTER_INFO_1W, *PPRINTER_INFO_1W, *LPPRINTER_INFO_1W;
typedef PRINTER_INFO_1A PRINTER_INFO_1;
typedef PPRINTER_INFO_1A PPRINTER_INFO_1;
typedef LPPRINTER_INFO_1A LPPRINTER_INFO_1;
typedef struct _PRINTER_INFO_2A {
  LPSTR pServerName;
  LPSTR pPrinterName;
  LPSTR pShareName;
  LPSTR pPortName;
  LPSTR pDriverName;
  LPSTR pComment;
  LPSTR pLocation;
  LPDEVMODEA pDevMode;
  LPSTR pSepFile;
  LPSTR pPrintProcessor;
  LPSTR pDatatype;
  LPSTR pParameters;
  PSECURITY_DESCRIPTOR pSecurityDescriptor;
  DWORD Attributes;
  DWORD Priority;
  DWORD DefaultPriority;
  DWORD StartTime;
  DWORD UntilTime;
  DWORD Status;
  DWORD cJobs;
  DWORD AveragePPM;
} PRINTER_INFO_2A, *PPRINTER_INFO_2A, *LPPRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W {
  LPWSTR pServerName;
  LPWSTR pPrinterName;
  LPWSTR pShareName;
  LPWSTR pPortName;
  LPWSTR pDriverName;
  LPWSTR pComment;
  LPWSTR pLocation;
  LPDEVMODEW pDevMode;
  LPWSTR pSepFile;
  LPWSTR pPrintProcessor;
  LPWSTR pDatatype;
  LPWSTR pParameters;
  PSECURITY_DESCRIPTOR pSecurityDescriptor;
  DWORD Attributes;
  DWORD Priority;
  DWORD DefaultPriority;
  DWORD StartTime;
  DWORD UntilTime;
  DWORD Status;
  DWORD cJobs;
  DWORD AveragePPM;
} PRINTER_INFO_2W, *PPRINTER_INFO_2W, *LPPRINTER_INFO_2W;
typedef PRINTER_INFO_2A PRINTER_INFO_2;
typedef PPRINTER_INFO_2A PPRINTER_INFO_2;
typedef LPPRINTER_INFO_2A LPPRINTER_INFO_2;
typedef struct _PRINTER_INFO_3 {
  PSECURITY_DESCRIPTOR pSecurityDescriptor;
} PRINTER_INFO_3, *PPRINTER_INFO_3, *LPPRINTER_INFO_3;
typedef struct _PRINTER_INFO_4A {
  LPSTR pPrinterName;
  LPSTR pServerName;
  DWORD Attributes;
} PRINTER_INFO_4A, *PPRINTER_INFO_4A, *LPPRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W {
  LPWSTR pPrinterName;
  LPWSTR pServerName;
  DWORD Attributes;
} PRINTER_INFO_4W, *PPRINTER_INFO_4W, *LPPRINTER_INFO_4W;
typedef PRINTER_INFO_4A PRINTER_INFO_4;
typedef PPRINTER_INFO_4A PPRINTER_INFO_4;
typedef LPPRINTER_INFO_4A LPPRINTER_INFO_4;
typedef struct _PRINTER_INFO_5A {
  LPSTR pPrinterName;
  LPSTR pPortName;
  DWORD Attributes;
  DWORD DeviceNotSelectedTimeout;
  DWORD TransmissionRetryTimeout;
} PRINTER_INFO_5A, *PPRINTER_INFO_5A, *LPPRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W {
  LPWSTR pPrinterName;
  LPWSTR pPortName;
  DWORD Attributes;
  DWORD DeviceNotSelectedTimeout;
  DWORD TransmissionRetryTimeout;
} PRINTER_INFO_5W, *PPRINTER_INFO_5W, *LPPRINTER_INFO_5W;
typedef PRINTER_INFO_5A PRINTER_INFO_5;
typedef PPRINTER_INFO_5A PPRINTER_INFO_5;
typedef LPPRINTER_INFO_5A LPPRINTER_INFO_5;
typedef struct _PRINTER_INFO_6 {
  DWORD dwStatus;
} PRINTER_INFO_6, *PPRINTER_INFO_6, *LPPRINTER_INFO_6;
typedef struct _PRINTER_INFO_7A {
  LPSTR pszObjectGUID;
  DWORD dwAction;
} PRINTER_INFO_7A, *PPRINTER_INFO_7A, *LPPRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W {
  LPWSTR pszObjectGUID;
  DWORD dwAction;
} PRINTER_INFO_7W, *PPRINTER_INFO_7W, *LPPRINTER_INFO_7W;
typedef PRINTER_INFO_7A PRINTER_INFO_7;
typedef PPRINTER_INFO_7A PPRINTER_INFO_7;
typedef LPPRINTER_INFO_7A LPPRINTER_INFO_7;
typedef struct _PRINTER_INFO_8A {
  LPDEVMODEA pDevMode;
} PRINTER_INFO_8A, *PPRINTER_INFO_8A, *LPPRINTER_INFO_8A;
typedef struct _PRINTER_INFO_8W {
  LPDEVMODEW pDevMode;
} PRINTER_INFO_8W, *PPRINTER_INFO_8W, *LPPRINTER_INFO_8W;
typedef PRINTER_INFO_8A PRINTER_INFO_8;
typedef PPRINTER_INFO_8A PPRINTER_INFO_8;
typedef LPPRINTER_INFO_8A LPPRINTER_INFO_8;
typedef struct _PRINTER_INFO_9A {
  LPDEVMODEA pDevMode;
} PRINTER_INFO_9A, *PPRINTER_INFO_9A, *LPPRINTER_INFO_9A;
typedef struct _PRINTER_INFO_9W {
  LPDEVMODEW pDevMode;
} PRINTER_INFO_9W, *PPRINTER_INFO_9W, *LPPRINTER_INFO_9W;
typedef PRINTER_INFO_9A PRINTER_INFO_9;
typedef PPRINTER_INFO_9A PPRINTER_INFO_9;
typedef LPPRINTER_INFO_9A LPPRINTER_INFO_9;
typedef struct _JOB_INFO_1A {
  DWORD JobId;
  LPSTR pPrinterName;
  LPSTR pMachineName;
  LPSTR pUserName;
  LPSTR pDocument;
  LPSTR pDatatype;
  LPSTR pStatus;
  DWORD Status;
  DWORD Priority;
  DWORD Position;
  DWORD TotalPages;
  DWORD PagesPrinted;
  SYSTEMTIME Submitted;
} JOB_INFO_1A, *PJOB_INFO_1A, *LPJOB_INFO_1A;
typedef struct _JOB_INFO_1W {
  DWORD JobId;
  LPWSTR pPrinterName;
  LPWSTR pMachineName;
  LPWSTR pUserName;
  LPWSTR pDocument;
  LPWSTR pDatatype;
  LPWSTR pStatus;
  DWORD Status;
  DWORD Priority;
  DWORD Position;
  DWORD TotalPages;
  DWORD PagesPrinted;
  SYSTEMTIME Submitted;
} JOB_INFO_1W, *PJOB_INFO_1W, *LPJOB_INFO_1W;
typedef JOB_INFO_1A JOB_INFO_1;
typedef PJOB_INFO_1A PJOB_INFO_1;
typedef LPJOB_INFO_1A LPJOB_INFO_1;
typedef struct _JOB_INFO_2A {
  DWORD JobId;
  LPSTR pPrinterName;
  LPSTR pMachineName;
  LPSTR pUserName;
  LPSTR pDocument;
  LPSTR pNotifyName;
  LPSTR pDatatype;
  LPSTR pPrintProcessor;
  LPSTR pParameters;
  LPSTR pDriverName;
  LPDEVMODEA pDevMode;
  LPSTR pStatus;
  PSECURITY_DESCRIPTOR pSecurityDescriptor;
  DWORD Status;
  DWORD Priority;
  DWORD Position;
  DWORD StartTime;
  DWORD UntilTime;
  DWORD TotalPages;
  DWORD Size;
  SYSTEMTIME Submitted;
  DWORD Time;
  DWORD PagesPrinted;
} JOB_INFO_2A, *PJOB_INFO_2A, *LPJOB_INFO_2A;
typedef struct _JOB_INFO_2W {
  DWORD JobId;
  LPWSTR pPrinterName;
  LPWSTR pMachineName;
  LPWSTR pUserName;
  LPWSTR pDocument;
  LPWSTR pNotifyName;
  LPWSTR pDatatype;
  LPWSTR pPrintProcessor;
  LPWSTR pParameters;
  LPWSTR pDriverName;
  LPDEVMODEW pDevMode;
  LPWSTR pStatus;
  PSECURITY_DESCRIPTOR pSecurityDescriptor;
  DWORD Status;
  DWORD Priority;
  DWORD Position;
  DWORD StartTime;
  DWORD UntilTime;
  DWORD TotalPages;
  DWORD Size;
  SYSTEMTIME Submitted;
  DWORD Time;
  DWORD PagesPrinted;
} JOB_INFO_2W, *PJOB_INFO_2W, *LPJOB_INFO_2W;
typedef JOB_INFO_2A JOB_INFO_2;
typedef PJOB_INFO_2A PJOB_INFO_2;
typedef LPJOB_INFO_2A LPJOB_INFO_2;
typedef struct _JOB_INFO_3 {
  DWORD JobId;
  DWORD NextJobId;
  DWORD Reserved;
} JOB_INFO_3, *PJOB_INFO_3, *LPJOB_INFO_3;
typedef struct _ADDJOB_INFO_1A {
  LPSTR Path;
  DWORD JobId;
} ADDJOB_INFO_1A, *PADDJOB_INFO_1A, *LPADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W {
  LPWSTR Path;
  DWORD JobId;
} ADDJOB_INFO_1W, *PADDJOB_INFO_1W, *LPADDJOB_INFO_1W;
typedef ADDJOB_INFO_1A ADDJOB_INFO_1;
typedef PADDJOB_INFO_1A PADDJOB_INFO_1;
typedef LPADDJOB_INFO_1A LPADDJOB_INFO_1;
typedef struct _DOC_INFO_1A {
  LPSTR pDocName;
  LPSTR pOutputFile;
  LPSTR pDatatype;
} DOC_INFO_1A, *PDOC_INFO_1A, *LPDOC_INFO_1A;
typedef struct _DOC_INFO_1W {
  LPWSTR pDocName;
  LPWSTR pOutputFile;
  LPWSTR pDatatype;
} DOC_INFO_1W, *PDOC_INFO_1W, *LPDOC_INFO_1W;
typedef DOC_INFO_1A DOC_INFO_1;
typedef PDOC_INFO_1A PDOC_INFO_1;
typedef LPDOC_INFO_1A LPDOC_INFO_1;
typedef struct _DOC_INFO_2A {
  LPSTR pDocName;
  LPSTR pOutputFile;
  LPSTR pDatatype;
  DWORD dwMode;
  DWORD JobId;
} DOC_INFO_2A, *PDOC_INFO_2A, *LPDOC_INFO_2A;
typedef struct _DOC_INFO_2W {
  LPWSTR pDocName;
  LPWSTR pOutputFile;
  LPWSTR pDatatype;
  DWORD dwMode;
  DWORD JobId;
} DOC_INFO_2W, *PDOC_INFO_2W, *LPDOC_INFO_2W;
typedef DOC_INFO_2A DOC_INFO_2;
typedef PDOC_INFO_2A PDOC_INFO_2;
typedef LPDOC_INFO_2A LPDOC_INFO_2;
typedef struct _FORM_INFO_1A {
  DWORD Flags;
  LPSTR pName;
  SIZEL Size;
  RECTL ImageableArea;
} FORM_INFO_1A, *PFORM_INFO_1A, *LPFORM_INFO_1A;
typedef struct _FORM_INFO_1W {
  DWORD Flags;
  LPWSTR pName;
  SIZEL Size;
  RECTL ImageableArea;
} FORM_INFO_1W, *PFORM_INFO_1W, *LPFORM_INFO_1W;
typedef FORM_INFO_1A FORM_INFO_1;
typedef PFORM_INFO_1A PFORM_INFO_1;
typedef LPFORM_INFO_1A LPFORM_INFO_1;
typedef struct _FORM_INFO_2A {
  DWORD Flags;
  LPSTR pName;
  SIZEL Size;
  RECTL ImageableArea;
  LPCSTR pKeyword;
  DWORD StringType;
  LPSTR pMuiDll;
  DWORD dwResourceId;
  LPSTR pDisplayName;
  LANGID wLangId;
} FORM_INFO_2A, *PFORM_INFO_2A, *LPFORM_INFO_2A;
typedef struct _FORM_INFO_2W {
  DWORD Flags;
  LPWSTR pName;
  SIZEL Size;
  RECTL ImageableArea;
  LPCSTR pKeyword;
  DWORD StringType;
  LPWSTR pMuiDll;
  DWORD dwResourceId;
  LPWSTR pDisplayName;
  LANGID wLangId;
} FORM_INFO_2W, *PFORM_INFO_2W, *LPFORM_INFO_2W;
typedef FORM_INFO_2A FORM_INFO_2;
typedef PFORM_INFO_2A PFORM_INFO_2;
typedef LPFORM_INFO_2A LPFORM_INFO_2;
typedef struct _PRINTPROCESSOR_INFO_1A {
  LPSTR pName;
} PRINTPROCESSOR_INFO_1A, *PPRINTPROCESSOR_INFO_1A,
  *LPPRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W {
  LPWSTR pName;
} PRINTPROCESSOR_INFO_1W, *PPRINTPROCESSOR_INFO_1W,
  *LPPRINTPROCESSOR_INFO_1W;
typedef PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1;
typedef PPRINTPROCESSOR_INFO_1A PPRINTPROCESSOR_INFO_1;
typedef LPPRINTPROCESSOR_INFO_1A LPPRINTPROCESSOR_INFO_1;
typedef struct _PORT_INFO_1A {
  LPSTR pName;
} PORT_INFO_1A, *PPORT_INFO_1A, *LPPORT_INFO_1A;
typedef struct _PORT_INFO_1W {
  LPWSTR pName;
} PORT_INFO_1W, *PPORT_INFO_1W, *LPPORT_INFO_1W;
typedef PORT_INFO_1A PORT_INFO_1;
typedef PPORT_INFO_1A PPORT_INFO_1;
typedef LPPORT_INFO_1A LPPORT_INFO_1;
typedef struct _PORT_INFO_2A {
  LPSTR pPortName;
  LPSTR pMonitorName;
  LPSTR pDescription;
  DWORD fPortType;
  DWORD Reserved;
} PORT_INFO_2A, *PPORT_INFO_2A, *LPPORT_INFO_2A;
typedef struct _PORT_INFO_2W {
  LPWSTR pPortName;
  LPWSTR pMonitorName;
  LPWSTR pDescription;
  DWORD fPortType;
  DWORD Reserved;
} PORT_INFO_2W, *PPORT_INFO_2W, *LPPORT_INFO_2W;
typedef PORT_INFO_2A PORT_INFO_2;
typedef PPORT_INFO_2A PPORT_INFO_2;
typedef LPPORT_INFO_2A LPPORT_INFO_2;
typedef struct _PORT_INFO_3A {
  DWORD dwStatus;
  LPSTR pszStatus;
  DWORD dwSeverity;
} PORT_INFO_3A, *PPORT_INFO_3A, *LPPORT_INFO_3A;
typedef struct _PORT_INFO_3W {
  DWORD dwStatus;
  LPWSTR pszStatus;
  DWORD dwSeverity;
} PORT_INFO_3W, *PPORT_INFO_3W, *LPPORT_INFO_3W;
typedef PORT_INFO_3A PORT_INFO_3;
typedef PPORT_INFO_3A PPORT_INFO_3;
typedef LPPORT_INFO_3A LPPORT_INFO_3;
typedef struct _MONITOR_INFO_1A {
  LPSTR pName;
} MONITOR_INFO_1A, *PMONITOR_INFO_1A, *LPMONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W {
  LPWSTR pName;
} MONITOR_INFO_1W, *PMONITOR_INFO_1W, *LPMONITOR_INFO_1W;
typedef MONITOR_INFO_1A MONITOR_INFO_1;
typedef PMONITOR_INFO_1A PMONITOR_INFO_1;
typedef LPMONITOR_INFO_1A LPMONITOR_INFO_1;
typedef struct _MONITOR_INFO_2A {
  LPSTR pName;
  LPSTR pEnvironment;
  LPSTR pDLLName;
} MONITOR_INFO_2A, *PMONITOR_INFO_2A, *LPMONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W {
  LPWSTR pName;
  LPWSTR pEnvironment;
  LPWSTR pDLLName;
} MONITOR_INFO_2W, *PMONITOR_INFO_2W, *LPMONITOR_INFO_2W;
typedef MONITOR_INFO_2A MONITOR_INFO_2;
typedef PMONITOR_INFO_2A PMONITOR_INFO_2;
typedef LPMONITOR_INFO_2A LPMONITOR_INFO_2;
typedef struct _DATATYPES_INFO_1A {
  LPSTR pName;
} DATATYPES_INFO_1A, *PDATATYPES_INFO_1A, *LPDATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W {
  LPWSTR pName;
} DATATYPES_INFO_1W, *PDATATYPES_INFO_1W, *LPDATATYPES_INFO_1W;
typedef DATATYPES_INFO_1A DATATYPES_INFO_1;
typedef PDATATYPES_INFO_1A PDATATYPES_INFO_1;
typedef LPDATATYPES_INFO_1A LPDATATYPES_INFO_1;
typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE {
  WORD Type;
  WORD Reserved0;
  DWORD Reserved1;
  DWORD Reserved2;
  DWORD Count;
  PWORD pFields;
} PRINTER_NOTIFY_OPTIONS_TYPE, *PPRINTER_NOTIFY_OPTIONS_TYPE,
*LPPRINTER_NOTIFY_OPTIONS_TYPE;
typedef struct _PRINTER_NOTIFY_OPTIONS {
  DWORD Version;
  DWORD Flags;
  DWORD Count;
  PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
} PRINTER_NOTIFY_OPTIONS, *PPRINTER_NOTIFY_OPTIONS, *LPPRINTER_NOTIFY_OPTIONS;
typedef struct _PRINTER_NOTIFY_INFO_DATA {
  WORD Type;
  WORD Field;
  DWORD Reserved;
  DWORD Id;
  union {
    DWORD adwData[2];
    struct {
      DWORD cbBuf;
      LPVOID pBuf;
    } Data;
  } NotifyData;
} PRINTER_NOTIFY_INFO_DATA, *PPRINTER_NOTIFY_INFO_DATA,
*LPPRINTER_NOTIFY_INFO_DATA;
typedef struct _PRINTER_NOTIFY_INFO {
  DWORD Version;
  DWORD Flags;
  DWORD Count;
  PRINTER_NOTIFY_INFO_DATA aData[1];
} PRINTER_NOTIFY_INFO, *PPRINTER_NOTIFY_INFO, *LPPRINTER_NOTIFY_INFO;
typedef struct _PROVIDOR_INFO_1A {
  LPSTR pName;
  LPSTR pEnvironment;
  LPSTR pDLLName;
} PROVIDOR_INFO_1A, *PPROVIDOR_INFO_1A, *LPPROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W {
  LPWSTR pName;
  LPWSTR pEnvironment;
  LPWSTR pDLLName;
} PROVIDOR_INFO_1W, *PPROVIDOR_INFO_1W, *LPPROVIDOR_INFO_1W;
typedef PROVIDOR_INFO_1A PROVIDOR_INFO_1;
typedef PPROVIDOR_INFO_1A PPROVIDOR_INFO_1;
typedef LPPROVIDOR_INFO_1A LPPROVIDOR_INFO_1;
typedef struct _PRINTER_ENUM_VALUESA {
  LPSTR pValueName;
  DWORD cbValueName;
  DWORD dwType;
  LPBYTE pData;
  DWORD cbData;
} PRINTER_ENUM_VALUESA, *PPRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW {
  LPWSTR pValueName;
  DWORD cbValueName;
  DWORD dwType;
  LPBYTE pData;
  DWORD cbData;
} PRINTER_ENUM_VALUESW, *PPRINTER_ENUM_VALUESW;
typedef PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUES;
typedef PPRINTER_ENUM_VALUESA PPRINTER_ENUM_VALUES;
typedef enum {
 BIDI_NULL = 0,
 BIDI_INT,
 BIDI_FLOAT,
 BIDI_BOOL,
 BIDI_STRING,
 BIDI_TEXT,
 BIDI_ENUM,
 BIDI_BLOB
} BIDI_TYPE;
typedef struct _BINARY_CONTAINER {
 DWORD cbBuf;
 LPBYTE pData;
} BINARY_CONTAINER, *PBINARY_CONTAINER;
typedef struct _BIDI_DATA {
 DWORD dwBidiType;
 union
 {
   BOOL bData;
   INT iData;
   LPWSTR sData;
   FLOAT fData;
   BINARY_CONTAINER biData;
 } u;
} BIDI_DATA, *LPBIDI_DATA, *PBIDI_DATA;
typedef struct _BIDI_REQUEST_DATA {
 DWORD dwReqNumber;
 LPWSTR pSchema;
 BIDI_DATA data;
} BIDI_REQUEST_DATA, *LPBIDI_REQUEST_DATA, *PBIDI_REQUEST_DATA;
typedef struct _BIDI_REQUEST_CONTAINER {
 DWORD Version;
 DWORD Flags;
 DWORD Count;
 BIDI_REQUEST_DATA aData[1];
} BIDI_REQUEST_CONTAINER, *LPBIDI_REQUEST_CONTAINER, *PBIDI_REQUEST_CONTAINER;
typedef struct _BIDI_RESPONSE_DATA {
 DWORD dwResult;
 DWORD dwReqNumber;
 LPWSTR pSchema;
 BIDI_DATA data;
} BIDI_RESPONSE_DATA, *LPBIDI_RESPONSE_DATA, *PBIDI_RESPONSE_DATA;
typedef struct _BIDI_RESPONSE_CONTAINER {
 DWORD Version;
 DWORD Flags;
 DWORD Count;
 BIDI_RESPONSE_DATA aData[1];
} BIDI_RESPONSE_CONTAINER, *LPBIDI_RESPONSE_CONTAINER, *PBIDI_RESPONSE_CONTAINER;
INT __attribute__((__stdcall__)) DeviceCapabilitiesA(LPCSTR pDevice,LPCSTR pPort,WORD fwCapability,
          LPSTR pOutput, LPDEVMODEA pDevMode);
INT __attribute__((__stdcall__)) DeviceCapabilitiesW(LPCWSTR pDevice, LPCWSTR pPort,
          WORD fwCapability, LPWSTR pOutput,
          const DEVMODEW *pDevMode);
LONG __attribute__((__stdcall__)) DocumentPropertiesA(HWND hWnd,HANDLE hPrinter,
                                LPSTR pDeviceName, LPDEVMODEA pDevModeOutput,
    LPDEVMODEA pDevModeInput,DWORD fMode );
LONG __attribute__((__stdcall__)) DocumentPropertiesW(HWND hWnd, HANDLE hPrinter,
    LPWSTR pDeviceName,
    LPDEVMODEW pDevModeOutput,
    LPDEVMODEW pDevModeInput, DWORD fMode);
BOOL __attribute__((__stdcall__)) OpenPrinterA(LPSTR lpPrinterName,HANDLE *phPrinter,
        LPPRINTER_DEFAULTSA pDefault);
BOOL __attribute__((__stdcall__)) OpenPrinterW(LPWSTR lpPrinterName,HANDLE *phPrinter,
        LPPRINTER_DEFAULTSW pDefault);
BOOL __attribute__((__stdcall__)) ResetPrinterA(HANDLE hPrinter, LPPRINTER_DEFAULTSA pDefault);
BOOL __attribute__((__stdcall__)) ResetPrinterW(HANDLE hPrinter, LPPRINTER_DEFAULTSW pDefault);
BOOL __attribute__((__stdcall__)) ClosePrinter (HANDLE phPrinter);
BOOL __attribute__((__stdcall__)) EnumJobsA(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs,
        DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded,
        LPDWORD pcReturned);
BOOL __attribute__((__stdcall__)) EnumJobsW(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs,
        DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded,
        LPDWORD pcReturned);
BOOL __attribute__((__stdcall__)) EnumPrintersA(DWORD dwType, LPSTR lpszName,
          DWORD dwLevel, LPBYTE lpbPrinters,
          DWORD cbBuf, LPDWORD lpdwNeeded,
          LPDWORD lpdwReturned);
BOOL __attribute__((__stdcall__)) EnumPrintersW(DWORD dwType, LPWSTR lpszName,
          DWORD dwLevel, LPBYTE lpbPrinters,
          DWORD cbBuf, LPDWORD lpdwNeeded,
          LPDWORD lpdwReturned);
BOOL __attribute__((__stdcall__)) PrinterProperties(HWND hWnd, HANDLE hPrinter);
BOOL __attribute__((__stdcall__)) GetPrinterDriverDirectoryA(LPSTR,LPSTR,DWORD,LPBYTE,DWORD,LPDWORD);
BOOL __attribute__((__stdcall__)) GetPrinterDriverDirectoryW(LPWSTR,LPWSTR,DWORD,LPBYTE,DWORD,LPDWORD);
BOOL __attribute__((__stdcall__)) GetPrinterDriverA(HANDLE hPrinter, LPSTR pEnvironment,
         DWORD Level, LPBYTE pDriverInfo,
         DWORD cbBuf, LPDWORD pcbNeeded);
BOOL __attribute__((__stdcall__)) GetPrinterDriverW(HANDLE hPrinter, LPWSTR pEnvironment,
         DWORD Level, LPBYTE pDriverInfo,
         DWORD cbBuf, LPDWORD pcbNeeded);
BOOL __attribute__((__stdcall__)) SetJobA(HANDLE hPrinter, DWORD JobID, DWORD Level, LPBYTE pJob,
      DWORD Command);
BOOL __attribute__((__stdcall__)) SetJobW(HANDLE hPrinter, DWORD JobID, DWORD Level, LPBYTE pJob,
      DWORD Command);
BOOL __attribute__((__stdcall__)) GetJobA(HANDLE hPrinter, DWORD JobID, DWORD Level, LPBYTE pJob,
      DWORD cbBuf, LPDWORD pcbNeeded);
BOOL __attribute__((__stdcall__)) GetJobW(HANDLE hPrinter, DWORD JobID, DWORD Level, LPBYTE pJob,
      DWORD cbBuf, LPDWORD pcbNeeded);
HANDLE __attribute__((__stdcall__)) AddPrinterA(LPSTR pName, DWORD Level, LPBYTE pPrinter);
HANDLE __attribute__((__stdcall__)) AddPrinterW(LPWSTR pName, DWORD Level, LPBYTE pPrinter);
BOOL __attribute__((__stdcall__)) DeletePrinter(HANDLE hPrinter);
BOOL __attribute__((__stdcall__)) SetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter,
   DWORD Command);
BOOL __attribute__((__stdcall__)) SetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter,
   DWORD Command);
BOOL __attribute__((__stdcall__)) GetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter,
   DWORD cbBuf, LPDWORD pcbNeeded);
BOOL __attribute__((__stdcall__)) GetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter,
   DWORD cbBuf, LPDWORD pcbNeeded);
BOOL __attribute__((__stdcall__)) AddPrinterDriverA(LPSTR pName, DWORD Level, LPBYTE pDriverInfo);
BOOL __attribute__((__stdcall__)) AddPrinterDriverW(LPWSTR pName, DWORD Level, LPBYTE pDriverInfo);
BOOL __attribute__((__stdcall__)) AddPrinterDriverExA(LPSTR pName, DWORD Level, LPBYTE pDriverInfo,
                                DWORD dwFileCopyFlags);
BOOL __attribute__((__stdcall__)) AddPrinterDriverExW(LPWSTR pName, DWORD Level, LPBYTE pDriverInfo,
                                DWORD dwFileCopyFlags);
BOOL __attribute__((__stdcall__)) EnumPrinterDriversA(LPSTR pName, LPSTR pEnvironment, DWORD Level,
    LPBYTE pDriverInfo, DWORD cbBuf,
    LPDWORD pcbNeeded, LPDWORD pcbReturned);
BOOL __attribute__((__stdcall__)) EnumPrinterDriversW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level,
    LPBYTE pDriverInfo, DWORD cbBuf,
    LPDWORD pcbNeeded, LPDWORD pcbReturned);
BOOL __attribute__((__stdcall__)) GetDefaultPrinterA(LPSTR pName, LPDWORD pcbNameSize);
BOOL __attribute__((__stdcall__)) GetDefaultPrinterW(LPWSTR pName, LPDWORD pcbNameSize);
BOOL __attribute__((__stdcall__)) SetDefaultPrinterA(LPCSTR);
BOOL __attribute__((__stdcall__)) SetDefaultPrinterW(LPCWSTR);
BOOL __attribute__((__stdcall__)) DeletePrinterDriverA(LPSTR pName, LPSTR pEnvironment,
     LPSTR pDriverName);
BOOL __attribute__((__stdcall__)) DeletePrinterDriverW(LPWSTR pName, LPWSTR pEnvironment,
     LPWSTR pDriverName);
BOOL __attribute__((__stdcall__)) DeletePrinterDriverExA(LPSTR pName, LPSTR pEnvironment,
                                   LPSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag);
BOOL __attribute__((__stdcall__)) DeletePrinterDriverExW(LPWSTR pName, LPWSTR pEnvironment,
                                   LPWSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag);
BOOL __attribute__((__stdcall__)) AddPrintProcessorA(LPSTR pName, LPSTR pEnvironment,
          LPSTR pPathName, LPSTR pPrintProcessorName);
BOOL __attribute__((__stdcall__)) AddPrintProcessorW(LPWSTR pName, LPWSTR pEnvironment,
          LPWSTR pPathName, LPWSTR pPrintProcessorName);
BOOL __attribute__((__stdcall__)) EnumPrintProcessorsA(LPSTR pName, LPSTR pEnvironment,
     DWORD Level, LPBYTE pPrintProcessorInfo,
     DWORD cbBuf, LPDWORD pcbNeeded,
     LPDWORD pcbReturned);
BOOL __attribute__((__stdcall__)) EnumPrintProcessorsW(LPWSTR pName, LPWSTR pEnvironment,
     DWORD Level, LPBYTE pPrintProcessorInfo,
     DWORD cbBuf, LPDWORD pcbNeeded,
     LPDWORD pcbReturned);
BOOL __attribute__((__stdcall__)) GetPrintProcessorDirectoryA(LPSTR pName, LPSTR pEnvironment,
     DWORD Level,
     LPBYTE pPrintProcessorInfo,
     DWORD cbBuf, LPDWORD pcbNeeded);
BOOL __attribute__((__stdcall__)) GetPrintProcessorDirectoryW(LPWSTR pName, LPWSTR pEnvironment,
     DWORD Level,
     LPBYTE pPrintProcessorInfo,
     DWORD cbBuf, LPDWORD pcbNeeded);
BOOL __attribute__((__stdcall__)) EnumPrintProcessorDatatypesA(LPSTR pName,
      LPSTR pPrintProcessorName,
      DWORD Level, LPBYTE pDatatypes,
      DWORD cbBuf, LPDWORD pcbNeeded,
      LPDWORD pcbReturned);
BOOL __attribute__((__stdcall__)) EnumPrintProcessorDatatypesW(LPWSTR pName,
      LPWSTR pPrintProcessorName,
      DWORD Level, LPBYTE pDatatypes,
      DWORD cbBuf, LPDWORD pcbNeeded,
      LPDWORD pcbReturned);
BOOL __attribute__((__stdcall__)) DeletePrintProcessorA(LPSTR pName, LPSTR pEnvironment,
      LPSTR pPrintProcessorName);
BOOL __attribute__((__stdcall__)) DeletePrintProcessorW(LPWSTR pName, LPWSTR pEnvironment,
      LPWSTR pPrintProcessorName);
DWORD __attribute__((__stdcall__)) StartDocPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo);
DWORD __attribute__((__stdcall__)) StartDocPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo);
BOOL __attribute__((__stdcall__)) StartPagePrinter(HANDLE hPrinter);
BOOL __attribute__((__stdcall__)) WritePrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf,
    LPDWORD pcWritten);
BOOL __attribute__((__stdcall__)) EndPagePrinter(HANDLE hPrinter);
BOOL __attribute__((__stdcall__)) AbortPrinter(HANDLE hPrinter);
BOOL __attribute__((__stdcall__)) ReadPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf,
   LPDWORD pNoBytesRead);
BOOL __attribute__((__stdcall__)) EndDocPrinter(HANDLE hPrinter);
BOOL __attribute__((__stdcall__)) AddJobA(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf,
      LPDWORD pcbNeeded);
BOOL __attribute__((__stdcall__)) AddJobW(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf,
      LPDWORD pcbNeeded);
BOOL __attribute__((__stdcall__)) ScheduleJob(HANDLE hPrinter, DWORD JobID);
LONG __attribute__((__stdcall__)) AdvancedDocumentPropertiesA(HWND hWnd, HANDLE hPrinter,
     LPSTR pDeviceName,
     PDEVMODEA pDevModeOutput,
     PDEVMODEA pDevModeInput);
LONG __attribute__((__stdcall__)) AdvancedDocumentPropertiesW(HWND hWnd, HANDLE hPrinter,
     LPWSTR pDeviceName,
     PDEVMODEW pDevModeOutput,
     PDEVMODEW pDevModeInput);
DWORD __attribute__((__stdcall__)) GetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, LPDWORD pType,
        LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded);
DWORD __attribute__((__stdcall__)) GetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, LPDWORD pType,
        LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded);
DWORD __attribute__((__stdcall__)) GetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName,
          LPCSTR pValueName, LPDWORD pType,
          LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded);
DWORD __attribute__((__stdcall__)) GetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName,
          LPCWSTR pValueName, LPDWORD pType,
          LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded);
DWORD __attribute__((__stdcall__)) DeletePrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName,
                                  LPCSTR pValueName);
DWORD __attribute__((__stdcall__)) DeletePrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName,
                                  LPCWSTR pValueName);
DWORD __attribute__((__stdcall__)) SetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, DWORD Type,
        LPBYTE pData, DWORD cbData);
DWORD __attribute__((__stdcall__)) SetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, DWORD Type,
        LPBYTE pData, DWORD cbData);
DWORD __attribute__((__stdcall__)) SetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName,
          LPCSTR pValueName, DWORD Type,
          LPBYTE pData, DWORD cbData);
DWORD __attribute__((__stdcall__)) SetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName,
          LPCWSTR pValueName, DWORD Type,
          LPBYTE pData, DWORD cbData);
DWORD __attribute__((__stdcall__)) WaitForPrinterChange(HANDLE hPrinter, DWORD Flags);
HANDLE __attribute__((__stdcall__)) FindFirstPrinterChangeNotification(HANDLE hPrinter,
       DWORD fdwFlags,
       DWORD fdwOptions,
       LPVOID pPrinterNotifyOptions);
BOOL __attribute__((__stdcall__)) FindNextPrinterChangeNotification(HANDLE hChange,
           PDWORD pdwChange,
           LPVOID pvReserved,
           LPVOID *ppPrinterNotifyInfo);
BOOL __attribute__((__stdcall__)) FreePrinterNotifyInfo(PPRINTER_NOTIFY_INFO pPrinterNotifyInfo);
BOOL __attribute__((__stdcall__)) FindClosePrinterChangeNotification(HANDLE hChange);
DWORD __attribute__((__stdcall__)) PrinterMessageBoxA(HANDLE hPrinter, DWORD Error, HWND hWnd,
    LPSTR pText, LPSTR pCaption, DWORD dwType);
DWORD __attribute__((__stdcall__)) PrinterMessageBoxW(HANDLE hPrinter, DWORD Error, HWND hWnd,
    LPWSTR pText, LPWSTR pCaption, DWORD dwType);
BOOL __attribute__((__stdcall__)) AddFormA(HANDLE hPrinter, DWORD Level, LPBYTE pForm);
BOOL __attribute__((__stdcall__)) AddFormW(HANDLE hPrinter, DWORD Level, LPBYTE pForm);
BOOL __attribute__((__stdcall__)) DeleteFormA(HANDLE hPrinter, LPSTR pFormName);
BOOL __attribute__((__stdcall__)) DeleteFormW(HANDLE hPrinter, LPWSTR pFormName);
BOOL __attribute__((__stdcall__)) GetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level,
       LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded);
BOOL __attribute__((__stdcall__)) GetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level,
       LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded);
BOOL __attribute__((__stdcall__)) SetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level,
       LPBYTE pForm);
BOOL __attribute__((__stdcall__)) SetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level,
       LPBYTE pForm);
BOOL __attribute__((__stdcall__)) EnumFormsA(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf,
         LPDWORD pcbNeeded, LPDWORD pcReturned);
BOOL __attribute__((__stdcall__)) EnumFormsW(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf,
         LPDWORD pcbNeeded, LPDWORD pcReturned);
BOOL __attribute__((__stdcall__)) EnumMonitorsA(LPSTR pName, DWORD Level, LPBYTE pMonitors,
     DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
BOOL __attribute__((__stdcall__)) EnumMonitorsW(LPWSTR pName, DWORD Level, LPBYTE pMonitors,
     DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
DWORD __attribute__((__stdcall__)) EnumPrinterDataA( HANDLE hPrinter, DWORD dwIndex, LPSTR pValueName,
    DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData,
    DWORD cbData, LPDWORD pcbData );
DWORD __attribute__((__stdcall__)) EnumPrinterDataW( HANDLE hPrinter, DWORD dwIndex, LPWSTR pValueName,
    DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData,
    DWORD cbData, LPDWORD pcbData );
BOOL __attribute__((__stdcall__)) AddMonitorA(LPSTR pName, DWORD Level, LPBYTE pMonitors);
BOOL __attribute__((__stdcall__)) AddMonitorW(LPWSTR pName, DWORD Level, LPBYTE pMonitors);
BOOL __attribute__((__stdcall__)) DeleteMonitorA(LPSTR pName, LPSTR pEnvironment,
      LPSTR pMonitorName);
BOOL __attribute__((__stdcall__)) DeleteMonitorW(LPWSTR pName, LPWSTR pEnvironment,
      LPWSTR pMonitorName);
BOOL __attribute__((__stdcall__)) EnumPortsA(LPSTR pName, DWORD Level, LPBYTE pPorts,
         DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
BOOL __attribute__((__stdcall__)) EnumPortsW(LPWSTR pName, DWORD Level, LPBYTE pPorts,
         DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
BOOL __attribute__((__stdcall__)) AddPortA(LPSTR pName, HWND hWnd, LPSTR pMonitorName);
BOOL __attribute__((__stdcall__)) AddPortW(LPWSTR pName, HWND hWnd, LPWSTR pMonitorName);
BOOL __attribute__((__stdcall__)) AddPortExA(LPSTR, DWORD, LPBYTE, LPSTR);
BOOL __attribute__((__stdcall__)) AddPortExW(LPWSTR, DWORD, LPBYTE, LPWSTR);
BOOL __attribute__((__stdcall__)) ConfigurePortA(LPSTR pName, HWND hWnd, LPSTR pPortName);
BOOL __attribute__((__stdcall__)) ConfigurePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName);
BOOL __attribute__((__stdcall__)) DeletePortA(LPSTR pName, HWND hWnd, LPSTR pPortName);
BOOL __attribute__((__stdcall__)) DeletePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName);
BOOL __attribute__((__stdcall__)) SetPortA(LPSTR pName, LPSTR pPortName, DWORD dwLevel,
       LPBYTE pPortInfo);
BOOL __attribute__((__stdcall__)) SetPortW(LPWSTR pName, LPWSTR pPortName, DWORD dwLevel,
       LPBYTE pPortInfo);
BOOL __attribute__((__stdcall__)) AddPrinterConnectionA(LPSTR pName);
BOOL __attribute__((__stdcall__)) AddPrinterConnectionW(LPWSTR pName);
BOOL __attribute__((__stdcall__)) DeletePrinterConnectionA(LPSTR pName);
BOOL __attribute__((__stdcall__)) DeletePrinterConnectionW(LPWSTR pName);
HANDLE __attribute__((__stdcall__)) ConnectToPrinterDlg(HWND hwnd, DWORD Flags);
BOOL __attribute__((__stdcall__)) AddPrintProvidorA(LPSTR pName, DWORD Level, LPBYTE pProvidorInfo);
BOOL __attribute__((__stdcall__)) AddPrintProvidorW(LPWSTR pName, DWORD Level, LPBYTE pProvidorInfo);
BOOL __attribute__((__stdcall__)) DeletePrintProvidorA(LPSTR pName, LPSTR pEnvironment,
     LPSTR pPrintProvidorName);
BOOL __attribute__((__stdcall__)) DeletePrintProvidorW(LPWSTR pName, LPWSTR pEnvironment,
     LPWSTR pPrintProvidorName);
DWORD __attribute__((__stdcall__)) EnumPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName,
    LPBYTE pEnumValues, DWORD cbEnumValues,
    LPDWORD pcbEnumValues, LPDWORD pnEnumValues);
DWORD __attribute__((__stdcall__)) EnumPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName,
    LPBYTE pEnumValues, DWORD cbEnumValues,
    LPDWORD pcbEnumValues, LPDWORD pnEnumValues);
LONG __attribute__((__stdcall__)) ExtDeviceMode( HWND hWnd, HANDLE hInst, LPDEVMODEA pDevModeOutput,
    LPSTR pDeviceName, LPSTR pPort, LPDEVMODEA pDevModeInput, LPSTR pProfile,
    DWORD fMode);
LPSTR __attribute__((__stdcall__)) StartDocDlgA(HANDLE hPrinter, DOCINFOA *doc);
LPWSTR __attribute__((__stdcall__)) StartDocDlgW(HANDLE hPrinter, DOCINFOW *doc);
BOOL __attribute__((__stdcall__)) XcvDataW(HANDLE hXcv, LPCWSTR pszDataName, PBYTE pInputData,
    DWORD cbInputData, PBYTE pOutputData, DWORD cbOutputData,
    PDWORD pcbOutputNeeded, PDWORD pdwStatus);
typedef unsigned char byte;
typedef INT64 hyper;
typedef UINT64 MIDL_uhyper;
typedef unsigned char boolean;
void * __attribute__((__stdcall__)) MIDL_user_allocate(SIZE_T);
void __attribute__((__stdcall__)) MIDL_user_free(void *);
typedef struct
{
  void *pad[2];
  void *userContext;
} *NDR_SCONTEXT;
typedef void (__attribute__((__stdcall__)) *NDR_RUNDOWN)(void *context);
typedef void (__attribute__((__stdcall__)) *NDR_NOTIFY_ROUTINE)(void);
typedef void (__attribute__((__stdcall__)) *NDR_NOTIFY2_ROUTINE)(boolean flag);
struct _MIDL_STUB_MESSAGE;
struct _MIDL_STUB_DESC;
struct _FULL_PTR_XLAT_TABLES;
struct NDR_ALLOC_ALL_NODES_CONTEXT;
struct NDR_POINTER_QUEUE_STATE;
typedef unsigned char *RPC_BUFPTR;
typedef ULONG RPC_LENGTH;
typedef void (__attribute__((__stdcall__)) *EXPR_EVAL)(struct _MIDL_STUB_MESSAGE *);
typedef const unsigned char *PFORMAT_STRING;
typedef struct
{
  LONG Dimension;
  ULONG *BufferConformanceMark;
  ULONG *BufferVarianceMark;
  ULONG *MaxCountArray;
  ULONG *OffsetArray;
  ULONG *ActualCountArray;
} ARRAY_INFO, *PARRAY_INFO;
typedef struct
{
  ULONG WireCodeset;
  ULONG DesiredReceivingCodeset;
  void *CSArrayInfo;
} CS_STUB_INFO;
typedef struct _NDR_PIPE_DESC *PNDR_PIPE_DESC;
typedef struct _NDR_PIPE_MESSAGE *PNDR_PIPE_MESSAGE;
typedef struct _NDR_ASYNC_MESSAGE *PNDR_ASYNC_MESSAGE;
typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;
typedef struct _MIDL_STUB_MESSAGE
{
  PRPC_MESSAGE RpcMsg;
  unsigned char *Buffer;
  unsigned char *BufferStart;
  unsigned char *BufferEnd;
  unsigned char *BufferMark;
  ULONG BufferLength;
  ULONG MemorySize;
  unsigned char *Memory;
  unsigned char IsClient;
  unsigned char Pad;
  unsigned short uFlags2;
  int ReuseBuffer;
  struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
  struct NDR_POINTER_QUEUE_STATE *pPointerQueueState;
  int IgnoreEmbeddedPointers;
  unsigned char *PointerBufferMark;
  unsigned char CorrDespIncrement;
  unsigned char uFlags;
  unsigned short UniquePtrCount;
  ULONG_PTR MaxCount;
  ULONG Offset;
  ULONG ActualCount;
  void * (__attribute__((__alloc_size__(1))) __attribute__((__stdcall__)) *pfnAllocate)(SIZE_T);
  void (__attribute__((__stdcall__)) *pfnFree)(void *);
  unsigned char *StackTop;
  unsigned char *pPresentedType;
  unsigned char *pTransmitType;
  handle_t SavedHandle;
  const struct _MIDL_STUB_DESC *StubDesc;
  struct _FULL_PTR_XLAT_TABLES *FullPtrXlatTables;
  ULONG FullPtrRefId;
  ULONG PointerLength;
  unsigned int fInDontFree:1;
  unsigned int fDontCallFreeInst:1;
  unsigned int fInOnlyParam:1;
  unsigned int fHasReturn:1;
  unsigned int fHasExtensions:1;
  unsigned int fHasNewCorrDesc:1;
  unsigned int fIsIn:1;
  unsigned int fIsOut:1;
  unsigned int fIsOicf:1;
  unsigned int fBufferValid:1;
  unsigned int fHasMemoryValidateCallback:1;
  unsigned int fInFree:1;
  unsigned int fNeedMCCP:1;
  int fUnused:3;
  int fUnused2:16;
  DWORD dwDestContext;
  void *pvDestContext;
  NDR_SCONTEXT *SavedContextHandles;
  LONG ParamNumber;
  struct IRpcChannelBuffer *pRpcChannelBuffer;
  PARRAY_INFO pArrayInfo;
  ULONG *SizePtrCountArray;
  ULONG *SizePtrOffsetArray;
  ULONG *SizePtrLengthArray;
  void *pArgQueue;
  DWORD dwStubPhase;
  void *LowStackMark;
  PNDR_ASYNC_MESSAGE pAsyncMsg;
  PNDR_CORRELATION_INFO pCorrInfo;
  unsigned char *pCorrMemory;
  void *pMemoryList;
  CS_STUB_INFO *pCSInfo;
  unsigned char *ConformanceMark;
  unsigned char *VarianceMark;
  INT_PTR Unused;
  struct _NDR_PROC_CONTEXT *pContext;
  void* ContextHandleHash;
  void* pUserMarshalList;
  INT_PTR Reserved51_3;
  INT_PTR Reserved51_4;
  INT_PTR Reserved51_5;
} MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;
typedef void * (__attribute__((__stdcall__)) * GENERIC_BINDING_ROUTINE)(void *);
typedef void (__attribute__((__stdcall__)) * GENERIC_UNBIND_ROUTINE)(void *, unsigned char *);
typedef struct _GENERIC_BINDING_ROUTINE_PAIR
{
  GENERIC_BINDING_ROUTINE pfnBind;
  GENERIC_UNBIND_ROUTINE pfnUnbind;
} GENERIC_BINDING_ROUTINE_PAIR, *PGENERIC_BINDING_ROUTINE_PAIR;
typedef struct __GENERIC_BINDING_INFO
{
  void *pObj;
  unsigned int Size;
  GENERIC_BINDING_ROUTINE pfnBind;
  GENERIC_UNBIND_ROUTINE pfnUnbind;
} GENERIC_BINDING_INFO, *PGENERIC_BINDING_INFO;
typedef void (__attribute__((__stdcall__)) *XMIT_HELPER_ROUTINE)(PMIDL_STUB_MESSAGE);
typedef struct _XMIT_ROUTINE_QUINTUPLE
{
  XMIT_HELPER_ROUTINE pfnTranslateToXmit;
  XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
  XMIT_HELPER_ROUTINE pfnFreeXmit;
  XMIT_HELPER_ROUTINE pfnFreeInst;
} XMIT_ROUTINE_QUINTUPLE, *PXMIT_ROUTINE_QUINTUPLE;
typedef ULONG (__attribute__((__stdcall__)) *USER_MARSHAL_SIZING_ROUTINE)(ULONG *, ULONG, void *);
typedef unsigned char * (__attribute__((__stdcall__)) *USER_MARSHAL_MARSHALLING_ROUTINE)(ULONG *, unsigned char *, void *);
typedef unsigned char * (__attribute__((__stdcall__)) *USER_MARSHAL_UNMARSHALLING_ROUTINE)(ULONG *, unsigned char *, void *);
typedef void (__attribute__((__stdcall__)) *USER_MARSHAL_FREEING_ROUTINE)(ULONG *, void *);
typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE
{
  USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
  USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
  USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
  USER_MARSHAL_FREEING_ROUTINE pfnFree;
} USER_MARSHAL_ROUTINE_QUADRUPLE;
typedef enum
{
    USER_MARSHAL_CB_BUFFER_SIZE,
    USER_MARSHAL_CB_MARSHALL,
    USER_MARSHAL_CB_UNMARSHALL,
    USER_MARSHAL_CB_FREE
} USER_MARSHAL_CB_TYPE;
typedef struct _USER_MARSHAL_CB
{
    ULONG Flags;
    PMIDL_STUB_MESSAGE pStubMsg;
    PFORMAT_STRING pReserve;
    ULONG Signature;
    USER_MARSHAL_CB_TYPE CBType;
    PFORMAT_STRING pFormat;
    PFORMAT_STRING pTypeFormat;
} USER_MARSHAL_CB;
typedef struct _MALLOC_FREE_STRUCT
{
  void * (__attribute__((__alloc_size__(1))) __attribute__((__stdcall__)) *pfnAllocate)(SIZE_T);
  void (__attribute__((__stdcall__)) *pfnFree)(void *);
} MALLOC_FREE_STRUCT;
typedef struct _COMM_FAULT_OFFSETS
{
  short CommOffset;
  short FaultOffset;
} COMM_FAULT_OFFSETS;
typedef struct _MIDL_STUB_DESC
{
  void *RpcInterfaceInformation;
  void * (__attribute__((__alloc_size__(1))) __attribute__((__stdcall__)) *pfnAllocate)(SIZE_T);
  void (__attribute__((__stdcall__)) *pfnFree)(void *);
  union {
    handle_t *pAutoHandle;
    handle_t *pPrimitiveHandle;
    PGENERIC_BINDING_INFO pGenericBindingInfo;
  } IMPLICIT_HANDLE_INFO;
  const NDR_RUNDOWN *apfnNdrRundownRoutines;
  const GENERIC_BINDING_ROUTINE_PAIR *aGenericBindingRoutinePairs;
  const EXPR_EVAL *apfnExprEval;
  const XMIT_ROUTINE_QUINTUPLE *aXmitQuintuple;
  const unsigned char *pFormatTypes;
  int fCheckBounds;
  ULONG Version;
  MALLOC_FREE_STRUCT *pMallocFreeStruct;
  LONG MIDLVersion;
  const COMM_FAULT_OFFSETS *CommFaultOffsets;
  const USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple;
  const NDR_NOTIFY_ROUTINE *NotifyRoutineTable;
  ULONG_PTR mFlags;
  ULONG_PTR Reserved3;
  ULONG_PTR Reserved4;
  ULONG_PTR Reserved5;
} MIDL_STUB_DESC;
typedef const MIDL_STUB_DESC *PMIDL_STUB_DESC;
typedef struct _MIDL_FORMAT_STRING
{
  short Pad;
  unsigned char Format[0];
} MIDL_FORMAT_STRING;
typedef struct _MIDL_SYNTAX_INFO
{
  RPC_SYNTAX_IDENTIFIER TransferSyntax;
  RPC_DISPATCH_TABLE* DispatchTable;
  PFORMAT_STRING ProcString;
  const unsigned short* FmtStringOffset;
  PFORMAT_STRING TypeString;
  const void* aUserMarshalQuadruple;
  ULONG_PTR pReserved1;
  ULONG_PTR pReserved2;
} MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;
typedef void (__attribute__((__stdcall__)) *STUB_THUNK)( PMIDL_STUB_MESSAGE );
typedef LONG (__attribute__((__stdcall__)) *SERVER_ROUTINE)();
typedef struct _MIDL_SERVER_INFO_
{
  PMIDL_STUB_DESC pStubDesc;
  const SERVER_ROUTINE *DispatchTable;
  PFORMAT_STRING ProcString;
  const unsigned short *FmtStringOffset;
  const STUB_THUNK *ThunkTable;
  PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
  ULONG_PTR nCount;
  PMIDL_SYNTAX_INFO pSyntaxInfo;
} MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;
typedef struct _MIDL_STUBLESS_PROXY_INFO
{
  PMIDL_STUB_DESC pStubDesc;
  PFORMAT_STRING ProcFormatString;
  const unsigned short *FormatStringOffset;
  PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
  ULONG_PTR nCount;
  PMIDL_SYNTAX_INFO pSyntaxInfo;
} MIDL_STUBLESS_PROXY_INFO, *PMIDL_STUBLESS_PROXY_INFO;
typedef union _CLIENT_CALL_RETURN
{
  void *Pointer;
  LONG_PTR Simple;
} CLIENT_CALL_RETURN;
typedef enum {
  STUB_UNMARSHAL,
  STUB_CALL_SERVER,
  STUB_MARSHAL,
  STUB_CALL_SERVER_NO_HRESULT
} STUB_PHASE;
typedef enum {
  PROXY_CALCSIZE,
  PROXY_GETBUFFER,
  PROXY_MARSHAL,
  PROXY_SENDRECEIVE,
  PROXY_UNMARSHAL
} PROXY_PHASE;
typedef enum {
  XLAT_SERVER = 1,
  XLAT_CLIENT
} XLAT_SIDE;
typedef struct _FULL_PTR_TO_REFID_ELEMENT {
  struct _FULL_PTR_TO_REFID_ELEMENT *Next;
  void *Pointer;
  ULONG RefId;
  unsigned char State;
} FULL_PTR_TO_REFID_ELEMENT, *PFULL_PTR_TO_REFID_ELEMENT;
typedef struct _FULL_PTR_XLAT_TABLES {
  struct {
    void **XlatTable;
    unsigned char *StateTable;
    ULONG NumberOfEntries;
  } RefIdToPointer;
  struct {
    PFULL_PTR_TO_REFID_ELEMENT *XlatTable;
    ULONG NumberOfBuckets;
    ULONG HashMask;
  } PointerToRefId;
  ULONG NextRefId;
  XLAT_SIDE XlatSide;
} FULL_PTR_XLAT_TABLES, *PFULL_PTR_XLAT_TABLES;
struct IRpcStubBuffer;
typedef ULONG error_status_t;
typedef void * NDR_CCONTEXT;
typedef struct _SCONTEXT_QUEUE {
  ULONG NumberOfObjects;
  NDR_SCONTEXT *ArrayOfObjects;
} SCONTEXT_QUEUE, *PSCONTEXT_QUEUE;
typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1
{
    void *Buffer;
    ULONG BufferSize;
    void * (__attribute__((__alloc_size__(1))) __attribute__((__stdcall__)) *pfnAllocate)(SIZE_T);
    void (__attribute__((__stdcall__)) *pfnFree)(void *);
    struct IRpcChannelBuffer *pRpcChannelBuffer;
    ULONG_PTR Reserved[5];
} NDR_USER_MARSHAL_INFO_LEVEL1;
typedef struct _NDR_USER_MARSHAL_INFO
{
    ULONG InformationLevel;
    union
    {
        NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    } ;
} NDR_USER_MARSHAL_INFO;
 RPC_BINDING_HANDLE __attribute__((__stdcall__))
  NDRCContextBinding( NDR_CCONTEXT CContext );
 void __attribute__((__stdcall__))
  NDRCContextMarshall( NDR_CCONTEXT CContext, void *pBuff );
 void __attribute__((__stdcall__))
  NDRCContextUnmarshall( NDR_CCONTEXT *pCContext, RPC_BINDING_HANDLE hBinding,
                         void *pBuff, ULONG DataRepresentation );
 void __attribute__((__stdcall__))
  NDRSContextMarshall( NDR_SCONTEXT CContext, void *pBuff, NDR_RUNDOWN userRunDownIn );
 NDR_SCONTEXT __attribute__((__stdcall__))
  NDRSContextUnmarshall( void *pBuff, ULONG DataRepresentation );
 void __attribute__((__stdcall__))
  NDRSContextMarshallEx( RPC_BINDING_HANDLE BindingHandle, NDR_SCONTEXT CContext,
                         void *pBuff, NDR_RUNDOWN userRunDownIn );
 void __attribute__((__stdcall__))
  NDRSContextMarshall2( RPC_BINDING_HANDLE BindingHandle, NDR_SCONTEXT CContext,
                        void *pBuff, NDR_RUNDOWN userRunDownIn, void * CtxGuard,
                        ULONG Flags );
 NDR_SCONTEXT __attribute__((__stdcall__))
  NDRSContextUnmarshallEx( RPC_BINDING_HANDLE BindingHandle, void *pBuff,
                           ULONG DataRepresentation );
 NDR_SCONTEXT __attribute__((__stdcall__))
  NDRSContextUnmarshall2( RPC_BINDING_HANDLE BindingHandle, void *pBuff,
                          ULONG DataRepresentation, void *CtxGuard,
                          ULONG Flags );
 void __attribute__((__stdcall__))
  NdrClientContextMarshall ( PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT ContextHandle, int fCheck );
 void __attribute__((__stdcall__))
  NdrClientContextUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT* pContextHandle,
                              RPC_BINDING_HANDLE BindHandle );
 void __attribute__((__stdcall__))
  NdrServerContextMarshall ( PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine );
 NDR_SCONTEXT __attribute__((__stdcall__))
  NdrServerContextUnmarshall( PMIDL_STUB_MESSAGE pStubMsg );
 void __attribute__((__stdcall__))
  NdrContextHandleSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 NDR_SCONTEXT __attribute__((__stdcall__))
  NdrContextHandleInitialize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );
 void __attribute__((__stdcall__))
  NdrServerContextNewMarshall( PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle,
                               NDR_RUNDOWN RundownRoutine, PFORMAT_STRING pFormat );
 NDR_SCONTEXT __attribute__((__stdcall__))
  NdrServerContextNewUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );
 RPC_STATUS __attribute__((__stdcall__))
  RpcSmDestroyClientContext( void **ContextHandle );
 void __attribute__((__stdcall__))
  RpcSsDestroyClientContext( void **ContextHandle );
 void __attribute__((__stdcall__))
  NdrSimpleTypeMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, unsigned char FormatChar );
 void __attribute__((__stdcall__))
  NdrSimpleTypeUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, unsigned char FormatChar );
 unsigned char* __attribute__((__stdcall__))
  NdrByteCountPointerMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__))
  NdrByteCountPointerUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );
 void __attribute__((__stdcall__))
  NdrByteCountPointerBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 void __attribute__((__stdcall__))
  NdrByteCountPointerFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__))
  NdrRangeUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );
 unsigned char* __attribute__((__stdcall__)) NdrPointerMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrPointerUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrPointerBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrPointerMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); void __attribute__((__stdcall__)) NdrPointerFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__)) NdrSimpleStructMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrSimpleStructUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrSimpleStructBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrSimpleStructMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); void __attribute__((__stdcall__)) NdrSimpleStructFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__)) NdrConformantStructMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrConformantStructUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrConformantStructBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrConformantStructMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); void __attribute__((__stdcall__)) NdrConformantStructFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__)) NdrConformantVaryingStructMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrConformantVaryingStructUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrConformantVaryingStructBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrConformantVaryingStructMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); void __attribute__((__stdcall__)) NdrConformantVaryingStructFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__)) NdrComplexStructMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrComplexStructUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrComplexStructBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrComplexStructMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); void __attribute__((__stdcall__)) NdrComplexStructFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__)) NdrFixedArrayMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrFixedArrayUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrFixedArrayBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrFixedArrayMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); void __attribute__((__stdcall__)) NdrFixedArrayFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__)) NdrConformantArrayMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrConformantArrayUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrConformantArrayBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrConformantArrayMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); void __attribute__((__stdcall__)) NdrConformantArrayFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__)) NdrConformantVaryingArrayMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrConformantVaryingArrayUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrConformantVaryingArrayBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrConformantVaryingArrayMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); void __attribute__((__stdcall__)) NdrConformantVaryingArrayFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__)) NdrVaryingArrayMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrVaryingArrayUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrVaryingArrayBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrVaryingArrayMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); void __attribute__((__stdcall__)) NdrVaryingArrayFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__)) NdrComplexArrayMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrComplexArrayUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrComplexArrayBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrComplexArrayMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); void __attribute__((__stdcall__)) NdrComplexArrayFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__)) NdrEncapsulatedUnionMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrEncapsulatedUnionUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrEncapsulatedUnionBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrEncapsulatedUnionMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); void __attribute__((__stdcall__)) NdrEncapsulatedUnionFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__)) NdrNonEncapsulatedUnionMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrNonEncapsulatedUnionUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrNonEncapsulatedUnionBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrNonEncapsulatedUnionMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); void __attribute__((__stdcall__)) NdrNonEncapsulatedUnionFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__)) NdrXmitOrRepAsMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrXmitOrRepAsUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrXmitOrRepAsBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrXmitOrRepAsMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); void __attribute__((__stdcall__)) NdrXmitOrRepAsFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__)) NdrUserMarshalMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrUserMarshalUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrUserMarshalBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrUserMarshalMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); void __attribute__((__stdcall__)) NdrUserMarshalFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__)) NdrInterfacePointerMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrInterfacePointerUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrInterfacePointerBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrInterfacePointerMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); void __attribute__((__stdcall__)) NdrInterfacePointerFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__)) NdrConformantStringMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrConformantStringUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrConformantStringBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrConformantStringMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__)) NdrNonConformantStringMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); unsigned char* __attribute__((__stdcall__)) NdrNonConformantStringUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc ); void __attribute__((__stdcall__)) NdrNonConformantStringBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); ULONG __attribute__((__stdcall__)) NdrNonConformantStringMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );
 void __attribute__((__stdcall__))
  NdrCorrelationInitialize( PMIDL_STUB_MESSAGE pStubMsg, void *pMemory, ULONG CacheSize, ULONG flags );
 void __attribute__((__stdcall__))
  NdrCorrelationPass( PMIDL_STUB_MESSAGE pStubMsg );
 void __attribute__((__stdcall__))
  NdrCorrelationFree( PMIDL_STUB_MESSAGE pStubMsg );
 void __attribute__((__stdcall__))
  NdrConvert2( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, LONG NumberParams );
 void __attribute__((__stdcall__))
  NdrConvert( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );
 unsigned char* __attribute__((__stdcall__))
  NdrUserMarshalSimpleTypeConvert( ULONG *pFlags, unsigned char *pBuffer, unsigned char FormatChar );
LONG_PTR __attribute__((__cdecl__))
  NdrClientCall2( PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ... );
LONG_PTR __attribute__((__cdecl__))
  NdrClientCall( PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ... );
LONG_PTR __attribute__((__cdecl__))
  NdrAsyncClientCall( PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ... );
LONG_PTR __attribute__((__cdecl__))
  NdrDcomAsyncClientCall( PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ... );
 void __attribute__((__stdcall__))
  NdrServerCall2( PRPC_MESSAGE pRpcMsg );
 void __attribute__((__stdcall__))
  NdrServerCall( PRPC_MESSAGE pRpcMsg );
 void __attribute__((__stdcall__))
  NdrAsyncServerCall( PRPC_MESSAGE pRpcMsg );
 LONG __attribute__((__stdcall__))
  NdrStubCall2( struct IRpcStubBuffer* pThis, struct IRpcChannelBuffer* pChannel, PRPC_MESSAGE pRpcMsg, DWORD * pdwStubPhase );
 LONG __attribute__((__stdcall__))
  NdrStubCall( struct IRpcStubBuffer* pThis, struct IRpcChannelBuffer* pChannel, PRPC_MESSAGE pRpcMsg, DWORD * pdwStubPhase );
 LONG __attribute__((__stdcall__))
  NdrAsyncStubCall( struct IRpcStubBuffer* pThis, struct IRpcChannelBuffer* pChannel, PRPC_MESSAGE pRpcMsg, DWORD * pdwStubPhase );
 LONG __attribute__((__stdcall__))
  NdrDcomAsyncStubCall( struct IRpcStubBuffer* pThis, struct IRpcChannelBuffer* pChannel, PRPC_MESSAGE pRpcMsg, DWORD * pdwStubPhase );
 void* __attribute__((__stdcall__))
  NdrAllocate( PMIDL_STUB_MESSAGE pStubMsg, SIZE_T Len ) __attribute__((__alloc_size__(2)));
 void __attribute__((__stdcall__))
  NdrClearOutParameters( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, void *ArgAddr );
 RPC_STATUS __attribute__((__stdcall__))
  NdrMapCommAndFaultStatus( PMIDL_STUB_MESSAGE pStubMsg, ULONG *pCommStatus,
                            ULONG *pFaultStatus, RPC_STATUS Status_ );
 void* __attribute__((__stdcall__))
  NdrOleAllocate( SIZE_T Size ) __attribute__((__alloc_size__(1)));
 void __attribute__((__stdcall__))
  NdrOleFree( void* NodeToFree );
 void __attribute__((__stdcall__))
  NdrClientInitialize( PRPC_MESSAGE pRpcMessage, PMIDL_STUB_MESSAGE pStubMsg,
                       PMIDL_STUB_DESC pStubDesc, unsigned int ProcNum );
 void __attribute__((__stdcall__))
  NdrClientInitializeNew( PRPC_MESSAGE pRpcMessage, PMIDL_STUB_MESSAGE pStubMsg,
                          PMIDL_STUB_DESC pStubDesc, unsigned int ProcNum );
 unsigned char* __attribute__((__stdcall__))
  NdrServerInitialize( PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDesc );
 unsigned char* __attribute__((__stdcall__))
  NdrServerInitializeNew( PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDesc );
 unsigned char* __attribute__((__stdcall__))
  NdrServerInitializeUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDesc, PRPC_MESSAGE pRpcMsg );
 void __attribute__((__stdcall__))
  NdrServerInitializeMarshall( PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg );
 void __attribute__((__stdcall__))
  NdrServerMarshall( struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );
 void __attribute__((__stdcall__))
  NdrServerUnmarshall( struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg,
                       PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDesc,
                       PFORMAT_STRING pFormat, void *pParamList );
 unsigned char* __attribute__((__stdcall__))
  NdrGetBuffer( PMIDL_STUB_MESSAGE stubmsg, ULONG buflen, RPC_BINDING_HANDLE handle );
 void __attribute__((__stdcall__))
  NdrFreeBuffer( PMIDL_STUB_MESSAGE pStubMsg );
 unsigned char* __attribute__((__stdcall__))
  NdrSendReceive( PMIDL_STUB_MESSAGE stubmsg, unsigned char *buffer );
 unsigned char * __attribute__((__stdcall__))
  NdrNsGetBuffer( PMIDL_STUB_MESSAGE pStubMsg, ULONG BufferLength, RPC_BINDING_HANDLE Handle );
 unsigned char * __attribute__((__stdcall__))
  NdrNsSendReceive( PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pBufferEnd, RPC_BINDING_HANDLE *pAutoHandle );
 RPC_STATUS __attribute__((__stdcall__))
  NdrGetDcomProtocolVersion( PMIDL_STUB_MESSAGE pStubMsg, RPC_VERSION *pVersion );
 PFULL_PTR_XLAT_TABLES __attribute__((__stdcall__))
  NdrFullPointerXlatInit( ULONG NumberOfPointers, XLAT_SIDE XlatSide );
 void __attribute__((__stdcall__))
  NdrFullPointerXlatFree( PFULL_PTR_XLAT_TABLES pXlatTables );
 int __attribute__((__stdcall__))
  NdrFullPointerQueryPointer( PFULL_PTR_XLAT_TABLES pXlatTables, void *pPointer,
                              unsigned char QueryType, ULONG *pRefId );
 int __attribute__((__stdcall__))
  NdrFullPointerQueryRefId( PFULL_PTR_XLAT_TABLES pXlatTables, ULONG RefId,
                            unsigned char QueryType, void **ppPointer );
 void __attribute__((__stdcall__))
  NdrFullPointerInsertRefId( PFULL_PTR_XLAT_TABLES pXlatTables, ULONG RefId, void *pPointer );
 int __attribute__((__stdcall__))
  NdrFullPointerFree( PFULL_PTR_XLAT_TABLES pXlatTables, void *Pointer );
 void __attribute__((__stdcall__))
  NdrRpcSsEnableAllocate( PMIDL_STUB_MESSAGE pMessage );
 void __attribute__((__stdcall__))
  NdrRpcSsDisableAllocate( PMIDL_STUB_MESSAGE pMessage );
 void __attribute__((__stdcall__))
  NdrRpcSmSetClientToOsf( PMIDL_STUB_MESSAGE pMessage );
 void * __attribute__((__stdcall__))
  NdrRpcSmClientAllocate( SIZE_T Size ) __attribute__((__alloc_size__(1)));
 void __attribute__((__stdcall__))
  NdrRpcSmClientFree( void *NodeToFree );
 void * __attribute__((__stdcall__))
  NdrRpcSsDefaultAllocate( SIZE_T Size ) __attribute__((__alloc_size__(1)));
 void __attribute__((__stdcall__))
  NdrRpcSsDefaultFree( void *NodeToFree );
 RPC_STATUS __attribute__((__stdcall__))
  NdrGetUserMarshalInfo( ULONG *pFlags, ULONG InformationLevel, NDR_USER_MARSHAL_INFO *pMarshalInfo );
typedef struct IRpcStubBuffer IRpcStubBuffer;
typedef struct IRpcChannelBuffer IRpcChannelBuffer;
extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;
typedef double __attribute__((aligned(8))) DOUBLE;
typedef WCHAR OLECHAR;
typedef OLECHAR *LPOLESTR;
typedef const OLECHAR *LPCOLESTR;
typedef LONG SCODE;
typedef struct _COAUTHIDENTITY {
    USHORT *User;
    ULONG UserLength;
    USHORT *Domain;
    ULONG DomainLength;
    USHORT *Password;
    ULONG PasswordLength;
    ULONG Flags;
} COAUTHIDENTITY;
typedef struct _COAUTHINFO {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY *pAuthIdentityData;
    DWORD dwCapabilities;
} COAUTHINFO;
typedef enum tagMEMCTX {
    MEMCTX_TASK = 1,
    MEMCTX_SHARED = 2,
    MEMCTX_MACSYSTEM = 3,
    MEMCTX_UNKNOWN = -1,
    MEMCTX_SAME = -2
} MEMCTX;
typedef enum tagCLSCTX {
    CLSCTX_INPROC_SERVER = 0x1,
    CLSCTX_INPROC_HANDLER = 0x2,
    CLSCTX_LOCAL_SERVER = 0x4,
    CLSCTX_INPROC_SERVER16 = 0x8,
    CLSCTX_REMOTE_SERVER = 0x10,
    CLSCTX_INPROC_HANDLER16 = 0x20,
    CLSCTX_INPROC_SERVERX86 = 0x40,
    CLSCTX_INPROC_HANDLERX86 = 0x80,
    CLSCTX_ESERVER_HANDLER = 0x100,
    CLSCTX_NO_CODE_DOWNLOAD = 0x400,
    CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,
    CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,
    CLSCTX_NO_FAILURE_LOG = 0x4000,
    CLSCTX_DISABLE_AAA = 0x8000,
    CLSCTX_ENABLE_AAA = 0x10000,
    CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000
} CLSCTX;
typedef enum tagMSHLFLAGS {
    MSHLFLAGS_NORMAL = 0,
    MSHLFLAGS_TABLESTRONG = 1,
    MSHLFLAGS_TABLEWEAK = 2,
    MSHLFLAGS_NOPING = 4
} MSHLFLAGS;
typedef enum tagMSHCTX {
    MSHCTX_LOCAL = 0,
    MSHCTX_NOSHAREDMEM = 1,
    MSHCTX_DIFFERENTMACHINE = 2,
    MSHCTX_INPROC = 3,
    MSHCTX_CROSSCTX = 4
} MSHCTX;
typedef struct _BYTE_BLOB {
    ULONG clSize;
    byte abData[1];
} BYTE_BLOB;
typedef BYTE_BLOB *UP_BYTE_BLOB;
typedef struct _FLAGGED_BYTE_BLOB {
    ULONG fFlags;
    ULONG clSize;
    byte abData[1];
} FLAGGED_BYTE_BLOB;
typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;
typedef struct _FLAGGED_WORD_BLOB {
    ULONG fFlags;
    ULONG clSize;
    unsigned short asData[1];
} FLAGGED_WORD_BLOB;
typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;
typedef struct _BYTE_SIZEDARR {
    ULONG clSize;
    byte *pData;
} BYTE_SIZEDARR;
typedef struct _SHORT_SIZEDARR {
    ULONG clSize;
    unsigned short *pData;
} WORD_SIZEDARR;
typedef struct _LONG_SIZEDARR {
    ULONG clSize;
    ULONG *pData;
} DWORD_SIZEDARR;
typedef struct _HYPER_SIZEDARR {
    ULONG clSize;
    hyper *pData;
} HYPER_SIZEDARR;
typedef struct _userCLIPFORMAT {
    LONG fContext;
    union {
        DWORD dwValue;
        LPWSTR pwszName;
    } u;
} userCLIPFORMAT;
typedef userCLIPFORMAT *wireCLIPFORMAT;
typedef WORD CLIPFORMAT;
typedef struct tagRemHGLOBAL {
    LONG fNullHGlobal;
    ULONG cbData;
    byte data[1];
} RemHGLOBAL;
typedef struct _userHGLOBAL {
    LONG fContext;
    union {
        LONG hInproc;
        FLAGGED_BYTE_BLOB *hRemote;
        INT64 hInproc64;
    } u;
} userHGLOBAL;
typedef userHGLOBAL *wireHGLOBAL;
typedef struct tagRemHMETAFILEPICT {
    LONG mm;
    LONG xExt;
    LONG yExt;
    ULONG cbData;
    byte data[1];
} RemHMETAFILEPICT;
typedef struct _userHMETAFILE {
    LONG fContext;
    union {
        LONG hInproc;
        BYTE_BLOB *hRemote;
        INT64 hInproc64;
    } u;
} userHMETAFILE;
typedef userHMETAFILE *wireHMETAFILE;
typedef struct _remoteMETAFILEPICT {
    LONG mm;
    LONG xExt;
    LONG yExt;
    userHMETAFILE *hMF;
} remoteMETAFILEPICT;
typedef struct _userHMETAFILEPICT {
    LONG fContext;
    union {
        LONG hInproc;
        remoteMETAFILEPICT *hRemote;
        INT64 hInproc64;
    } u;
} userHMETAFILEPICT;
typedef userHMETAFILEPICT *wireHMETAFILEPICT;
typedef struct tagRemHENHMETAFILE {
    ULONG cbData;
    byte data[1];
} RemHENHMETAFILE;
typedef struct _userHENHMETAFILE {
    LONG fContext;
    union {
        LONG hInproc;
        BYTE_BLOB *hRemote;
        INT64 hInproc64;
    } u;
} userHENHMETAFILE;
typedef userHENHMETAFILE *wireHENHMETAFILE;
typedef struct tagRemHBITMAP {
    ULONG cbData;
    byte data[1];
} RemHBITMAP;
typedef struct _userBITMAP {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
    byte pBuffer[1];
} userBITMAP;
typedef struct _userHBITMAP {
    LONG fContext;
    union {
        LONG hInproc;
        userBITMAP *hRemote;
        INT64 hInproc64;
    } u;
} userHBITMAP;
typedef userHBITMAP *wireHBITMAP;
typedef struct tagRemHPALETTE {
    ULONG cbData;
    byte data[1];
} RemHPALETTE;
typedef struct tagrpcLOGPALETTE {
    WORD palVersion;
    WORD palNumEntries;
    PALETTEENTRY palPalEntry[1];
} rpcLOGPALETTE;
typedef struct _userHPALETTE {
    LONG fContext;
    union {
        LONG hInproc;
        rpcLOGPALETTE *hRemote;
        INT64 hInproc64;
    } u;
} userHPALETTE;
typedef userHPALETTE *wireHPALETTE;
typedef void *HMETAFILEPICT;
typedef struct _RemotableHandle {
    LONG fContext;
    union {
        LONG hInproc;
        LONG hRemote;
    } u;
} RemotableHandle;
typedef RemotableHandle *wireHACCEL;
typedef RemotableHandle *wireHBRUSH;
typedef RemotableHandle *wireHDC;
typedef RemotableHandle *wireHFONT;
typedef RemotableHandle *wireHICON;
typedef RemotableHandle *wireHMENU;
typedef RemotableHandle *wireHWND;
typedef enum tagDVASPECT {
    DVASPECT_CONTENT = 1,
    DVASPECT_THUMBNAIL = 2,
    DVASPECT_ICON = 4,
    DVASPECT_DOCPRINT = 8
} DVASPECT;
typedef enum tagSTGC {
    STGC_DEFAULT = 0,
    STGC_OVERWRITE = 1,
    STGC_ONLYIFCURRENT = 2,
    STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
    STGC_CONSOLIDATE = 8
} STGC;
typedef enum tagSTGMOVE {
    STGMOVE_MOVE = 0,
    STGMOVE_COPY = 1,
    STGMOVE_SHALLOWCOPY = 2
} STGMOVE;
typedef enum tagSTATFLAG {
    STATFLAG_DEFAULT = 0,
    STATFLAG_NONAME = 1,
    STATFLAG_NOOPEN = 2
} STATFLAG;
typedef double __attribute__((aligned(8))) DATE;
typedef union tagCY {
    struct {
        ULONG Lo;
        LONG Hi;
    } ;
    LONGLONG int64;
} CY;
typedef CY *LPCY;
typedef struct tagDEC {
  USHORT wReserved;
  union {
    struct {
      BYTE scale;
      BYTE sign;
    } ;
    USHORT signscale;
  } ;
  ULONG Hi32;
  union {
    struct {
      ULONG Lo32;
      ULONG Mid32;
    } ;
    ULONGLONG Lo64;
  } ;
} DECIMAL;
typedef DECIMAL *LPDECIMAL;
typedef FLAGGED_WORD_BLOB *wireBSTR;
typedef OLECHAR *BSTR;
typedef BSTR *LPBSTR;
typedef short VARIANT_BOOL;
typedef VARIANT_BOOL _VARIANT_BOOL;
typedef struct tagBSTRBLOB {
    ULONG cbSize;
    BYTE *pData;
} BSTRBLOB;
typedef struct tagBSTRBLOB *LPBSTRBLOB;
typedef struct tagCLIPDATA {
    ULONG cbSize;
    LONG ulClipFmt;
    BYTE *pClipData;
} CLIPDATA;
typedef ULONG PROPID;
typedef unsigned short VARTYPE;
enum VARENUM {
    VT_EMPTY = 0,
    VT_NULL = 1,
    VT_I2 = 2,
    VT_I4 = 3,
    VT_R4 = 4,
    VT_R8 = 5,
    VT_CY = 6,
    VT_DATE = 7,
    VT_BSTR = 8,
    VT_DISPATCH = 9,
    VT_ERROR = 10,
    VT_BOOL = 11,
    VT_VARIANT = 12,
    VT_UNKNOWN = 13,
    VT_DECIMAL = 14,
    VT_I1 = 16,
    VT_UI1 = 17,
    VT_UI2 = 18,
    VT_UI4 = 19,
    VT_I8 = 20,
    VT_UI8 = 21,
    VT_INT = 22,
    VT_UINT = 23,
    VT_VOID = 24,
    VT_HRESULT = 25,
    VT_PTR = 26,
    VT_SAFEARRAY = 27,
    VT_CARRAY = 28,
    VT_USERDEFINED = 29,
    VT_LPSTR = 30,
    VT_LPWSTR = 31,
    VT_RECORD = 36,
    VT_INT_PTR = 37,
    VT_UINT_PTR = 38,
    VT_FILETIME = 64,
    VT_BLOB = 65,
    VT_STREAM = 66,
    VT_STORAGE = 67,
    VT_STREAMED_OBJECT = 68,
    VT_STORED_OBJECT = 69,
    VT_BLOB_OBJECT = 70,
    VT_CF = 71,
    VT_CLSID = 72,
    VT_VERSIONED_STREAM = 73,
    VT_BSTR_BLOB = 0xfff,
    VT_VECTOR = 0x1000,
    VT_ARRAY = 0x2000,
    VT_BYREF = 0x4000,
    VT_RESERVED = 0x8000,
    VT_ILLEGAL = 0xffff,
    VT_ILLEGALMASKED = 0xfff,
    VT_TYPEMASK = 0xfff
};
typedef struct tagCSPLATFORM {
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
} CSPLATFORM;
typedef struct tagQUERYCONTEXT {
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
} QUERYCONTEXT;
typedef enum tagTYSPEC {
    TYSPEC_CLSID = 0,
    TYSPEC_FILEEXT = 1,
    TYSPEC_MIMETYPE = 2,
    TYSPEC_PROGID = 3,
    TYSPEC_FILENAME = 4,
    TYSPEC_PACKAGENAME = 5,
    TYSPEC_OBJECTID = 6
} TYSPEC;
typedef struct __WIDL_wtypes_generated_name_00000000 {
    DWORD tyspec;
    union {
        CLSID clsid;
        LPOLESTR pFileExt;
        LPOLESTR pMimeType;
        LPOLESTR pProgId;
        LPOLESTR pFileName;
        struct {
            LPOLESTR pPackageName;
            GUID PolicyId;
        } ByName;
        struct {
            GUID ObjectId;
            GUID PolicyId;
        } ByObjectId;
    } tagged_union;
} uCLSSPEC;
typedef struct _tagpropertykey {
    GUID fmtid;
    DWORD pid;
} PROPERTYKEY;
typedef struct IUnknown IUnknown;
typedef struct IClassFactory IClassFactory;
typedef IUnknown *LPUNKNOWN;
extern const GUID IID_IUnknown ;
typedef struct IUnknownVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IUnknown* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IUnknown* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IUnknown* This);
   
} IUnknownVtbl;
struct IUnknown {
    IUnknownVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IUnknown_QueryInterface_Proxy(
    IUnknown* This,
    const IID* const riid,
    void **ppvObject);
void __attribute__((__stdcall__)) IUnknown_QueryInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG __attribute__((__stdcall__)) IUnknown_AddRef_Proxy(
    IUnknown* This);
void __attribute__((__stdcall__)) IUnknown_AddRef_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG __attribute__((__stdcall__)) IUnknown_Release_Proxy(
    IUnknown* This);
void __attribute__((__stdcall__)) IUnknown_Release_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IClassFactory *LPCLASSFACTORY;
extern const GUID IID_IClassFactory ;
typedef struct IClassFactoryVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IClassFactory* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IClassFactory* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IClassFactory* This);
    HRESULT (__attribute__((__stdcall__)) *CreateInstance)(
        IClassFactory* This,
        IUnknown *pUnkOuter,
        const IID* const riid,
        void **ppvObject);
    HRESULT (__attribute__((__stdcall__)) *LockServer)(
        IClassFactory* This,
        BOOL fLock);
   
} IClassFactoryVtbl;
struct IClassFactory {
    IClassFactoryVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IClassFactory_RemoteCreateInstance_Proxy(
    IClassFactory* This,
    const IID* const riid,
    IUnknown **ppvObject);
void __attribute__((__stdcall__)) IClassFactory_RemoteCreateInstance_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IClassFactory_RemoteLockServer_Proxy(
    IClassFactory* This,
    BOOL fLock);
void __attribute__((__stdcall__)) IClassFactory_RemoteLockServer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IClassFactory_CreateInstance_Proxy(
    IClassFactory* This,
    IUnknown *pUnkOuter,
    const IID* const riid,
    void **ppvObject);
HRESULT __attribute__((__stdcall__)) IClassFactory_CreateInstance_Stub(
    IClassFactory* This,
    const IID* const riid,
    IUnknown **ppvObject);
HRESULT __attribute__((__stdcall__)) IClassFactory_LockServer_Proxy(
    IClassFactory* This,
    BOOL fLock);
HRESULT __attribute__((__stdcall__)) IClassFactory_LockServer_Stub(
    IClassFactory* This,
    BOOL fLock);
typedef struct IMarshal IMarshal;
typedef struct IMarshal2 IMarshal2;
typedef struct IStdMarshalInfo IStdMarshalInfo;
typedef struct IExternalConnection IExternalConnection;
typedef struct IMultiQI IMultiQI;
typedef struct IMalloc IMalloc;
typedef struct IMallocSpy IMallocSpy;
typedef struct IInternalUnknown IInternalUnknown;
typedef struct IEnumUnknown IEnumUnknown;
typedef struct ISurrogate ISurrogate;
typedef struct IGlobalInterfaceTable IGlobalInterfaceTable;
typedef struct IBindCtx IBindCtx;
typedef struct IEnumMoniker IEnumMoniker;
typedef struct IRunnableObject IRunnableObject;
typedef struct IRunningObjectTable IRunningObjectTable;
typedef struct IPersist IPersist;
typedef struct IPersistStream IPersistStream;
typedef struct IMoniker IMoniker;
typedef struct IROTData IROTData;
typedef struct IEnumString IEnumString;
typedef struct IClassActivator IClassActivator;
typedef struct ISequentialStream ISequentialStream;
typedef struct IStream IStream;
typedef struct IEnumSTATSTG IEnumSTATSTG;
typedef struct IStorage IStorage;
typedef struct IPersistFile IPersistFile;
typedef struct IPersistStorage IPersistStorage;
typedef struct IRootStorage IRootStorage;
typedef struct ILockBytes ILockBytes;
typedef struct IFillLockBytes IFillLockBytes;
typedef struct IProgressNotify IProgressNotify;
typedef struct ILayoutStorage ILayoutStorage;
typedef struct IBlockingLock IBlockingLock;
typedef struct ITimeAndNoticeControl ITimeAndNoticeControl;
typedef struct IOplockStorage IOplockStorage;
typedef struct IEnumFORMATETC IEnumFORMATETC;
typedef struct IEnumSTATDATA IEnumSTATDATA;
typedef struct IAdviseSink IAdviseSink;
typedef struct IAdviseSink2 IAdviseSink2;
typedef struct IDataObject IDataObject;
typedef struct IDataAdviseHolder IDataAdviseHolder;
typedef struct IMessageFilter IMessageFilter;
typedef struct IRpcChannelBuffer2 IRpcChannelBuffer2;
typedef struct IRpcChannelBuffer3 IRpcChannelBuffer3;
typedef struct IAsyncRpcChannelBuffer IAsyncRpcChannelBuffer;
typedef struct IRpcSyntaxNegotiate IRpcSyntaxNegotiate;
typedef struct IRpcProxyBuffer IRpcProxyBuffer;
typedef struct IPSFactoryBuffer IPSFactoryBuffer;
typedef struct IChannelHook IChannelHook;
typedef struct IClientSecurity IClientSecurity;
typedef struct IServerSecurity IServerSecurity;
typedef struct IAsyncSetup IAsyncSetup;
typedef struct IDirectWriterLock IDirectWriterLock;
typedef struct ISynchronize ISynchronize;
typedef struct ISynchronizeHandle ISynchronizeHandle;
typedef struct ISynchronizeEvent ISynchronizeEvent;
typedef struct ISynchronizeContainer ISynchronizeContainer;
typedef struct ISynchronizeMutex ISynchronizeMutex;
typedef struct ICancelMethodCalls ICancelMethodCalls;
typedef struct IAsyncManager IAsyncManager;
typedef struct ICallFactory ICallFactory;
typedef struct IRpcOptions IRpcOptions;
typedef struct IRpcHelper IRpcHelper;
typedef struct IReleaseMarshalBuffers IReleaseMarshalBuffers;
typedef struct IWaitMultiple IWaitMultiple;
typedef struct IUrlMon IUrlMon;
typedef struct IForegroundTransfer IForegroundTransfer;
typedef struct IAddrTrackingControl IAddrTrackingControl;
typedef struct IAddrExclusionControl IAddrExclusionControl;
typedef struct IComThreadingInfo IComThreadingInfo;
typedef struct IProcessInitControl IProcessInitControl;
typedef struct IInitializeSpy IInitializeSpy;
typedef struct IThumbnailExtractor IThumbnailExtractor;
typedef struct IEnumContextProps IEnumContextProps;
typedef struct IContext IContext;
typedef struct IObjContext IObjContext;
typedef struct _COSERVERINFO {
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO *pAuthInfo;
    DWORD dwReserved2;
} COSERVERINFO;
typedef IMarshal *LPMARSHAL;
extern const GUID IID_IMarshal ;
typedef struct IMarshalVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IMarshal* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IMarshal* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IMarshal* This);
    HRESULT (__attribute__((__stdcall__)) *GetUnmarshalClass)(
        IMarshal* This,
        const IID* const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags,
        CLSID *pCid);
    HRESULT (__attribute__((__stdcall__)) *GetMarshalSizeMax)(
        IMarshal* This,
        const IID* const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags,
        DWORD *pSize);
    HRESULT (__attribute__((__stdcall__)) *MarshalInterface)(
        IMarshal* This,
        IStream *pStm,
        const IID* const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags);
    HRESULT (__attribute__((__stdcall__)) *UnmarshalInterface)(
        IMarshal* This,
        IStream *pStm,
        const IID* const riid,
        void **ppv);
    HRESULT (__attribute__((__stdcall__)) *ReleaseMarshalData)(
        IMarshal* This,
        IStream *pStm);
    HRESULT (__attribute__((__stdcall__)) *DisconnectObject)(
        IMarshal* This,
        DWORD dwReserved);
   
} IMarshalVtbl;
struct IMarshal {
    IMarshalVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IMarshal_GetUnmarshalClass_Proxy(
    IMarshal* This,
    const IID* const riid,
    void *pv,
    DWORD dwDestContext,
    void *pvDestContext,
    DWORD mshlflags,
    CLSID *pCid);
void __attribute__((__stdcall__)) IMarshal_GetUnmarshalClass_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMarshal_GetMarshalSizeMax_Proxy(
    IMarshal* This,
    const IID* const riid,
    void *pv,
    DWORD dwDestContext,
    void *pvDestContext,
    DWORD mshlflags,
    DWORD *pSize);
void __attribute__((__stdcall__)) IMarshal_GetMarshalSizeMax_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMarshal_MarshalInterface_Proxy(
    IMarshal* This,
    IStream *pStm,
    const IID* const riid,
    void *pv,
    DWORD dwDestContext,
    void *pvDestContext,
    DWORD mshlflags);
void __attribute__((__stdcall__)) IMarshal_MarshalInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMarshal_UnmarshalInterface_Proxy(
    IMarshal* This,
    IStream *pStm,
    const IID* const riid,
    void **ppv);
void __attribute__((__stdcall__)) IMarshal_UnmarshalInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMarshal_ReleaseMarshalData_Proxy(
    IMarshal* This,
    IStream *pStm);
void __attribute__((__stdcall__)) IMarshal_ReleaseMarshalData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMarshal_DisconnectObject_Proxy(
    IMarshal* This,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IMarshal_DisconnectObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IMarshal2 *LPMARSHAL2;
extern const GUID IID_IMarshal2 ;
typedef struct IMarshal2Vtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IMarshal2* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IMarshal2* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IMarshal2* This);
    HRESULT (__attribute__((__stdcall__)) *GetUnmarshalClass)(
        IMarshal2* This,
        const IID* const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags,
        CLSID *pCid);
    HRESULT (__attribute__((__stdcall__)) *GetMarshalSizeMax)(
        IMarshal2* This,
        const IID* const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags,
        DWORD *pSize);
    HRESULT (__attribute__((__stdcall__)) *MarshalInterface)(
        IMarshal2* This,
        IStream *pStm,
        const IID* const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags);
    HRESULT (__attribute__((__stdcall__)) *UnmarshalInterface)(
        IMarshal2* This,
        IStream *pStm,
        const IID* const riid,
        void **ppv);
    HRESULT (__attribute__((__stdcall__)) *ReleaseMarshalData)(
        IMarshal2* This,
        IStream *pStm);
    HRESULT (__attribute__((__stdcall__)) *DisconnectObject)(
        IMarshal2* This,
        DWORD dwReserved);
   
} IMarshal2Vtbl;
struct IMarshal2 {
    IMarshal2Vtbl* lpVtbl;
};
typedef IStdMarshalInfo *LPSTDMARSHALINFO;
extern const GUID IID_IStdMarshalInfo ;
typedef struct IStdMarshalInfoVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IStdMarshalInfo* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IStdMarshalInfo* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IStdMarshalInfo* This);
    HRESULT (__attribute__((__stdcall__)) *GetClassForHandler)(
        IStdMarshalInfo* This,
        DWORD dwDestContext,
        void *pvDestContext,
        CLSID *pClsid);
   
} IStdMarshalInfoVtbl;
struct IStdMarshalInfo {
    IStdMarshalInfoVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IStdMarshalInfo_GetClassForHandler_Proxy(
    IStdMarshalInfo* This,
    DWORD dwDestContext,
    void *pvDestContext,
    CLSID *pClsid);
void __attribute__((__stdcall__)) IStdMarshalInfo_GetClassForHandler_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IExternalConnection *LPEXTERNALCONNECTION;
typedef enum tagEXTCONN {
    EXTCONN_STRONG = 0x1,
    EXTCONN_WEAK = 0x2,
    EXTCONN_CALLABLE = 0x4
} EXTCONN;
extern const GUID IID_IExternalConnection ;
typedef struct IExternalConnectionVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IExternalConnection* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IExternalConnection* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IExternalConnection* This);
    DWORD (__attribute__((__stdcall__)) *AddConnection)(
        IExternalConnection* This,
        DWORD extconn,
        DWORD reserved);
    DWORD (__attribute__((__stdcall__)) *ReleaseConnection)(
        IExternalConnection* This,
        DWORD extconn,
        DWORD reserved,
        BOOL fLastReleaseCloses);
   
} IExternalConnectionVtbl;
struct IExternalConnection {
    IExternalConnectionVtbl* lpVtbl;
};
DWORD __attribute__((__stdcall__)) IExternalConnection_AddConnection_Proxy(
    IExternalConnection* This,
    DWORD extconn,
    DWORD reserved);
void __attribute__((__stdcall__)) IExternalConnection_AddConnection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
DWORD __attribute__((__stdcall__)) IExternalConnection_ReleaseConnection_Proxy(
    IExternalConnection* This,
    DWORD extconn,
    DWORD reserved,
    BOOL fLastReleaseCloses);
void __attribute__((__stdcall__)) IExternalConnection_ReleaseConnection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IMultiQI *LPMULTIQI;
typedef struct tagMULTI_QI {
    const IID *pIID;
    IUnknown *pItf;
    HRESULT hr;
} MULTI_QI;
extern const GUID IID_IMultiQI ;
typedef struct IMultiQIVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IMultiQI* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IMultiQI* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IMultiQI* This);
    HRESULT (__attribute__((__stdcall__)) *QueryMultipleInterfaces)(
        IMultiQI* This,
        ULONG cMQIs,
        MULTI_QI *pMQIs);
   
} IMultiQIVtbl;
struct IMultiQI {
    IMultiQIVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IMultiQI_QueryMultipleInterfaces_Proxy(
    IMultiQI* This,
    ULONG cMQIs,
    MULTI_QI *pMQIs);
void __attribute__((__stdcall__)) IMultiQI_QueryMultipleInterfaces_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IMalloc *LPMALLOC;
extern const GUID IID_IMalloc ;
typedef struct IMallocVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IMalloc* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IMalloc* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IMalloc* This);
    LPVOID (__attribute__((__stdcall__)) *Alloc)(
        IMalloc* This,
        ULONG cb);
    LPVOID (__attribute__((__stdcall__)) *Realloc)(
        IMalloc* This,
        LPVOID pv,
        ULONG cb);
    void (__attribute__((__stdcall__)) *Free)(
        IMalloc* This,
        LPVOID pv);
    ULONG (__attribute__((__stdcall__)) *GetSize)(
        IMalloc* This,
        LPVOID pv);
    int (__attribute__((__stdcall__)) *DidAlloc)(
        IMalloc* This,
        LPVOID pv);
    void (__attribute__((__stdcall__)) *HeapMinimize)(
        IMalloc* This);
   
} IMallocVtbl;
struct IMalloc {
    IMallocVtbl* lpVtbl;
};
LPVOID __attribute__((__stdcall__)) IMalloc_Alloc_Proxy(
    IMalloc* This,
    ULONG cb);
void __attribute__((__stdcall__)) IMalloc_Alloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
LPVOID __attribute__((__stdcall__)) IMalloc_Realloc_Proxy(
    IMalloc* This,
    LPVOID pv,
    ULONG cb);
void __attribute__((__stdcall__)) IMalloc_Realloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IMalloc_Free_Proxy(
    IMalloc* This,
    LPVOID pv);
void __attribute__((__stdcall__)) IMalloc_Free_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG __attribute__((__stdcall__)) IMalloc_GetSize_Proxy(
    IMalloc* This,
    LPVOID pv);
void __attribute__((__stdcall__)) IMalloc_GetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
int __attribute__((__stdcall__)) IMalloc_DidAlloc_Proxy(
    IMalloc* This,
    LPVOID pv);
void __attribute__((__stdcall__)) IMalloc_DidAlloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IMalloc_HeapMinimize_Proxy(
    IMalloc* This);
void __attribute__((__stdcall__)) IMalloc_HeapMinimize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IMallocSpy *LPMALLOCSPY;
extern const GUID IID_IMallocSpy ;
typedef struct IMallocSpyVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IMallocSpy* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IMallocSpy* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IMallocSpy* This);
    ULONG (__attribute__((__stdcall__)) *PreAlloc)(
        IMallocSpy* This,
        ULONG cbRequest);
    LPVOID (__attribute__((__stdcall__)) *PostAlloc)(
        IMallocSpy* This,
        LPVOID pActual);
    LPVOID (__attribute__((__stdcall__)) *PreFree)(
        IMallocSpy* This,
        LPVOID pRequest,
        BOOL fSpyed);
    void (__attribute__((__stdcall__)) *PostFree)(
        IMallocSpy* This,
        BOOL fSpyed);
    ULONG (__attribute__((__stdcall__)) *PreRealloc)(
        IMallocSpy* This,
        LPVOID pRequest,
        ULONG cbRequest,
        LPVOID *ppNewRequest,
        BOOL fSpyed);
    LPVOID (__attribute__((__stdcall__)) *PostRealloc)(
        IMallocSpy* This,
        LPVOID pActual,
        BOOL fSpyed);
    LPVOID (__attribute__((__stdcall__)) *PreGetSize)(
        IMallocSpy* This,
        LPVOID pRequest,
        BOOL fSpyed);
    ULONG (__attribute__((__stdcall__)) *PostGetSize)(
        IMallocSpy* This,
        ULONG cbActual,
        BOOL fSpyed);
    LPVOID (__attribute__((__stdcall__)) *PreDidAlloc)(
        IMallocSpy* This,
        LPVOID pRequest,
        BOOL fSpyed);
    int (__attribute__((__stdcall__)) *PostDidAlloc)(
        IMallocSpy* This,
        LPVOID pRequest,
        BOOL fSpyed,
        int fActual);
    void (__attribute__((__stdcall__)) *PreHeapMinimize)(
        IMallocSpy* This);
    void (__attribute__((__stdcall__)) *PostHeapMinimize)(
        IMallocSpy* This);
   
} IMallocSpyVtbl;
struct IMallocSpy {
    IMallocSpyVtbl* lpVtbl;
};
ULONG __attribute__((__stdcall__)) IMallocSpy_PreAlloc_Proxy(
    IMallocSpy* This,
    ULONG cbRequest);
void __attribute__((__stdcall__)) IMallocSpy_PreAlloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
LPVOID __attribute__((__stdcall__)) IMallocSpy_PostAlloc_Proxy(
    IMallocSpy* This,
    LPVOID pActual);
void __attribute__((__stdcall__)) IMallocSpy_PostAlloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
LPVOID __attribute__((__stdcall__)) IMallocSpy_PreFree_Proxy(
    IMallocSpy* This,
    LPVOID pRequest,
    BOOL fSpyed);
void __attribute__((__stdcall__)) IMallocSpy_PreFree_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IMallocSpy_PostFree_Proxy(
    IMallocSpy* This,
    BOOL fSpyed);
void __attribute__((__stdcall__)) IMallocSpy_PostFree_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG __attribute__((__stdcall__)) IMallocSpy_PreRealloc_Proxy(
    IMallocSpy* This,
    LPVOID pRequest,
    ULONG cbRequest,
    LPVOID *ppNewRequest,
    BOOL fSpyed);
void __attribute__((__stdcall__)) IMallocSpy_PreRealloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
LPVOID __attribute__((__stdcall__)) IMallocSpy_PostRealloc_Proxy(
    IMallocSpy* This,
    LPVOID pActual,
    BOOL fSpyed);
void __attribute__((__stdcall__)) IMallocSpy_PostRealloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
LPVOID __attribute__((__stdcall__)) IMallocSpy_PreGetSize_Proxy(
    IMallocSpy* This,
    LPVOID pRequest,
    BOOL fSpyed);
void __attribute__((__stdcall__)) IMallocSpy_PreGetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG __attribute__((__stdcall__)) IMallocSpy_PostGetSize_Proxy(
    IMallocSpy* This,
    ULONG cbActual,
    BOOL fSpyed);
void __attribute__((__stdcall__)) IMallocSpy_PostGetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
LPVOID __attribute__((__stdcall__)) IMallocSpy_PreDidAlloc_Proxy(
    IMallocSpy* This,
    LPVOID pRequest,
    BOOL fSpyed);
void __attribute__((__stdcall__)) IMallocSpy_PreDidAlloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
int __attribute__((__stdcall__)) IMallocSpy_PostDidAlloc_Proxy(
    IMallocSpy* This,
    LPVOID pRequest,
    BOOL fSpyed,
    int fActual);
void __attribute__((__stdcall__)) IMallocSpy_PostDidAlloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IMallocSpy_PreHeapMinimize_Proxy(
    IMallocSpy* This);
void __attribute__((__stdcall__)) IMallocSpy_PreHeapMinimize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IMallocSpy_PostHeapMinimize_Proxy(
    IMallocSpy* This);
void __attribute__((__stdcall__)) IMallocSpy_PostHeapMinimize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IInternalUnknown ;
typedef struct IInternalUnknownVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInternalUnknown* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInternalUnknown* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInternalUnknown* This);
    HRESULT (__attribute__((__stdcall__)) *QueryInternalInterface)(
        IInternalUnknown* This,
        const IID* const riid,
        void **ppv);
   
} IInternalUnknownVtbl;
struct IInternalUnknown {
    IInternalUnknownVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IInternalUnknown_QueryInternalInterface_Proxy(
    IInternalUnknown* This,
    const IID* const riid,
    void **ppv);
void __attribute__((__stdcall__)) IInternalUnknown_QueryInternalInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IEnumUnknown *LPENUMUNKNOWN;
extern const GUID IID_IEnumUnknown ;
typedef struct IEnumUnknownVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IEnumUnknown* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IEnumUnknown* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IEnumUnknown* This);
    HRESULT (__attribute__((__stdcall__)) *Next)(
        IEnumUnknown* This,
        ULONG celt,
        IUnknown **rgelt,
        ULONG *pceltFetched);
    HRESULT (__attribute__((__stdcall__)) *Skip)(
        IEnumUnknown* This,
        ULONG celt);
    HRESULT (__attribute__((__stdcall__)) *Reset)(
        IEnumUnknown* This);
    HRESULT (__attribute__((__stdcall__)) *Clone)(
        IEnumUnknown* This,
        IEnumUnknown **ppenum);
   
} IEnumUnknownVtbl;
struct IEnumUnknown {
    IEnumUnknownVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IEnumUnknown_RemoteNext_Proxy(
    IEnumUnknown* This,
    ULONG celt,
    IUnknown **rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumUnknown_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumUnknown_Skip_Proxy(
    IEnumUnknown* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumUnknown_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumUnknown_Reset_Proxy(
    IEnumUnknown* This);
void __attribute__((__stdcall__)) IEnumUnknown_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumUnknown_Clone_Proxy(
    IEnumUnknown* This,
    IEnumUnknown **ppenum);
void __attribute__((__stdcall__)) IEnumUnknown_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumUnknown_Next_Proxy(
    IEnumUnknown* This,
    ULONG celt,
    IUnknown **rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumUnknown_Next_Stub(
    IEnumUnknown* This,
    ULONG celt,
    IUnknown **rgelt,
    ULONG *pceltFetched);
typedef ISurrogate *LPSURROGATE;
extern const GUID IID_ISurrogate ;
typedef struct ISurrogateVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ISurrogate* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ISurrogate* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ISurrogate* This);
    HRESULT (__attribute__((__stdcall__)) *LoadDllServer)(
        ISurrogate* This,
        const CLSID* const Clsid);
    HRESULT (__attribute__((__stdcall__)) *FreeSurrogate)(
        ISurrogate* This);
   
} ISurrogateVtbl;
struct ISurrogate {
    ISurrogateVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ISurrogate_LoadDllServer_Proxy(
    ISurrogate* This,
    const CLSID* const Clsid);
void __attribute__((__stdcall__)) ISurrogate_LoadDllServer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISurrogate_FreeSurrogate_Proxy(
    ISurrogate* This);
void __attribute__((__stdcall__)) ISurrogate_FreeSurrogate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;
extern const GUID IID_IGlobalInterfaceTable ;
typedef struct IGlobalInterfaceTableVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IGlobalInterfaceTable* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IGlobalInterfaceTable* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IGlobalInterfaceTable* This);
    HRESULT (__attribute__((__stdcall__)) *RegisterInterfaceInGlobal)(
        IGlobalInterfaceTable* This,
        IUnknown *pUnk,
        const IID* const riid,
        DWORD *pdwCookie);
    HRESULT (__attribute__((__stdcall__)) *RevokeInterfaceFromGlobal)(
        IGlobalInterfaceTable* This,
        DWORD dwCookie);
    HRESULT (__attribute__((__stdcall__)) *GetInterfaceFromGlobal)(
        IGlobalInterfaceTable* This,
        DWORD dwCookie,
        const IID* const riid,
        void **ppv);
   
} IGlobalInterfaceTableVtbl;
struct IGlobalInterfaceTable {
    IGlobalInterfaceTableVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IGlobalInterfaceTable_RegisterInterfaceInGlobal_Proxy(
    IGlobalInterfaceTable* This,
    IUnknown *pUnk,
    const IID* const riid,
    DWORD *pdwCookie);
void __attribute__((__stdcall__)) IGlobalInterfaceTable_RegisterInterfaceInGlobal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Proxy(
    IGlobalInterfaceTable* This,
    DWORD dwCookie);
void __attribute__((__stdcall__)) IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IGlobalInterfaceTable_GetInterfaceFromGlobal_Proxy(
    IGlobalInterfaceTable* This,
    DWORD dwCookie,
    const IID* const riid,
    void **ppv);
void __attribute__((__stdcall__)) IGlobalInterfaceTable_GetInterfaceFromGlobal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IBindCtx *LPBINDCTX;
typedef IBindCtx *LPBC;
typedef struct tagBIND_OPTS {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
} BIND_OPTS;
typedef struct tagBIND_OPTS *LPBIND_OPTS;
typedef struct tagBIND_OPTS2 {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO *pServerInfo;
} BIND_OPTS2;
typedef struct tagBIND_OPTS2 *LPBIND_OPTS2;
typedef struct tagBIND_OPTS3 {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO *pServerInfo;
    HWND hwnd;
} BIND_OPTS3;
typedef struct tagBIND_OPTS3 *LPBIND_OPTS3;
typedef enum tagBIND_FLAGS {
    BIND_MAYBOTHERUSER = 1,
    BIND_JUSTTESTEXISTENCE = 2
} BIND_FLAGS;
extern const GUID IID_IBindCtx ;
typedef struct IBindCtxVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IBindCtx* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IBindCtx* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IBindCtx* This);
    HRESULT (__attribute__((__stdcall__)) *RegisterObjectBound)(
        IBindCtx* This,
        IUnknown *punk);
    HRESULT (__attribute__((__stdcall__)) *RevokeObjectBound)(
        IBindCtx* This,
        IUnknown *punk);
    HRESULT (__attribute__((__stdcall__)) *ReleaseBoundObjects)(
        IBindCtx* This);
    HRESULT (__attribute__((__stdcall__)) *SetBindOptions)(
        IBindCtx* This,
        BIND_OPTS *pbindopts);
    HRESULT (__attribute__((__stdcall__)) *GetBindOptions)(
        IBindCtx* This,
        BIND_OPTS *pbindopts);
    HRESULT (__attribute__((__stdcall__)) *GetRunningObjectTable)(
        IBindCtx* This,
        IRunningObjectTable **pprot);
    HRESULT (__attribute__((__stdcall__)) *RegisterObjectParam)(
        IBindCtx* This,
        LPOLESTR pszKey,
        IUnknown *punk);
    HRESULT (__attribute__((__stdcall__)) *GetObjectParam)(
        IBindCtx* This,
        LPOLESTR pszKey,
        IUnknown **ppunk);
    HRESULT (__attribute__((__stdcall__)) *EnumObjectParam)(
        IBindCtx* This,
        IEnumString **ppenum);
    HRESULT (__attribute__((__stdcall__)) *RevokeObjectParam)(
        IBindCtx* This,
        LPOLESTR pszKey);
   
} IBindCtxVtbl;
struct IBindCtx {
    IBindCtxVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IBindCtx_RegisterObjectBound_Proxy(
    IBindCtx* This,
    IUnknown *punk);
void __attribute__((__stdcall__)) IBindCtx_RegisterObjectBound_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_RevokeObjectBound_Proxy(
    IBindCtx* This,
    IUnknown *punk);
void __attribute__((__stdcall__)) IBindCtx_RevokeObjectBound_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_ReleaseBoundObjects_Proxy(
    IBindCtx* This);
void __attribute__((__stdcall__)) IBindCtx_ReleaseBoundObjects_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_RemoteSetBindOptions_Proxy(
    IBindCtx* This,
    BIND_OPTS2 *pbindopts);
void __attribute__((__stdcall__)) IBindCtx_RemoteSetBindOptions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_RemoteGetBindOptions_Proxy(
    IBindCtx* This,
    BIND_OPTS2 *pbindopts);
void __attribute__((__stdcall__)) IBindCtx_RemoteGetBindOptions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_GetRunningObjectTable_Proxy(
    IBindCtx* This,
    IRunningObjectTable **pprot);
void __attribute__((__stdcall__)) IBindCtx_GetRunningObjectTable_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_RegisterObjectParam_Proxy(
    IBindCtx* This,
    LPOLESTR pszKey,
    IUnknown *punk);
void __attribute__((__stdcall__)) IBindCtx_RegisterObjectParam_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_GetObjectParam_Proxy(
    IBindCtx* This,
    LPOLESTR pszKey,
    IUnknown **ppunk);
void __attribute__((__stdcall__)) IBindCtx_GetObjectParam_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_EnumObjectParam_Proxy(
    IBindCtx* This,
    IEnumString **ppenum);
void __attribute__((__stdcall__)) IBindCtx_EnumObjectParam_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_RevokeObjectParam_Proxy(
    IBindCtx* This,
    LPOLESTR pszKey);
void __attribute__((__stdcall__)) IBindCtx_RevokeObjectParam_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_SetBindOptions_Proxy(
    IBindCtx* This,
    BIND_OPTS *pbindopts);
HRESULT __attribute__((__stdcall__)) IBindCtx_SetBindOptions_Stub(
    IBindCtx* This,
    BIND_OPTS2 *pbindopts);
HRESULT __attribute__((__stdcall__)) IBindCtx_GetBindOptions_Proxy(
    IBindCtx* This,
    BIND_OPTS *pbindopts);
HRESULT __attribute__((__stdcall__)) IBindCtx_GetBindOptions_Stub(
    IBindCtx* This,
    BIND_OPTS2 *pbindopts);
typedef IEnumMoniker *LPENUMMONIKER;
extern const GUID IID_IEnumMoniker ;
typedef struct IEnumMonikerVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IEnumMoniker* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IEnumMoniker* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IEnumMoniker* This);
    HRESULT (__attribute__((__stdcall__)) *Next)(
        IEnumMoniker* This,
        ULONG celt,
        IMoniker **rgelt,
        ULONG *pceltFetched);
    HRESULT (__attribute__((__stdcall__)) *Skip)(
        IEnumMoniker* This,
        ULONG celt);
    HRESULT (__attribute__((__stdcall__)) *Reset)(
        IEnumMoniker* This);
    HRESULT (__attribute__((__stdcall__)) *Clone)(
        IEnumMoniker* This,
        IEnumMoniker **ppenum);
   
} IEnumMonikerVtbl;
struct IEnumMoniker {
    IEnumMonikerVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IEnumMoniker_RemoteNext_Proxy(
    IEnumMoniker* This,
    ULONG celt,
    IMoniker **rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumMoniker_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumMoniker_Skip_Proxy(
    IEnumMoniker* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumMoniker_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumMoniker_Reset_Proxy(
    IEnumMoniker* This);
void __attribute__((__stdcall__)) IEnumMoniker_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumMoniker_Clone_Proxy(
    IEnumMoniker* This,
    IEnumMoniker **ppenum);
void __attribute__((__stdcall__)) IEnumMoniker_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumMoniker_Next_Proxy(
    IEnumMoniker* This,
    ULONG celt,
    IMoniker **rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumMoniker_Next_Stub(
    IEnumMoniker* This,
    ULONG celt,
    IMoniker **rgelt,
    ULONG *pceltFetched);
typedef IRunnableObject *LPRUNNABLEOBJECT;
extern const GUID IID_IRunnableObject ;
typedef struct IRunnableObjectVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IRunnableObject* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IRunnableObject* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IRunnableObject* This);
    HRESULT (__attribute__((__stdcall__)) *GetRunningClass)(
        IRunnableObject* This,
        LPCLSID lpClsid);
    HRESULT (__attribute__((__stdcall__)) *Run)(
        IRunnableObject* This,
        LPBINDCTX pbc);
    BOOL (__attribute__((__stdcall__)) *IsRunning)(
        IRunnableObject* This);
    HRESULT (__attribute__((__stdcall__)) *LockRunning)(
        IRunnableObject* This,
        BOOL fLock,
        BOOL fLastUnlockCloses);
    HRESULT (__attribute__((__stdcall__)) *SetContainedObject)(
        IRunnableObject* This,
        BOOL fContained);
   
} IRunnableObjectVtbl;
struct IRunnableObject {
    IRunnableObjectVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IRunnableObject_GetRunningClass_Proxy(
    IRunnableObject* This,
    LPCLSID lpClsid);
void __attribute__((__stdcall__)) IRunnableObject_GetRunningClass_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunnableObject_Run_Proxy(
    IRunnableObject* This,
    LPBINDCTX pbc);
void __attribute__((__stdcall__)) IRunnableObject_Run_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunnableObject_RemoteIsRunning_Proxy(
    IRunnableObject* This);
void __attribute__((__stdcall__)) IRunnableObject_RemoteIsRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunnableObject_LockRunning_Proxy(
    IRunnableObject* This,
    BOOL fLock,
    BOOL fLastUnlockCloses);
void __attribute__((__stdcall__)) IRunnableObject_LockRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunnableObject_SetContainedObject_Proxy(
    IRunnableObject* This,
    BOOL fContained);
void __attribute__((__stdcall__)) IRunnableObject_SetContainedObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
BOOL __attribute__((__stdcall__)) IRunnableObject_IsRunning_Proxy(
    IRunnableObject* This);
HRESULT __attribute__((__stdcall__)) IRunnableObject_IsRunning_Stub(
    IRunnableObject* This);
typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;
extern const GUID IID_IRunningObjectTable ;
typedef struct IRunningObjectTableVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IRunningObjectTable* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IRunningObjectTable* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IRunningObjectTable* This);
    HRESULT (__attribute__((__stdcall__)) *Register)(
        IRunningObjectTable* This,
        DWORD grfFlags,
        IUnknown *punkObject,
        IMoniker *pmkObjectName,
        DWORD *pdwRegister);
    HRESULT (__attribute__((__stdcall__)) *Revoke)(
        IRunningObjectTable* This,
        DWORD dwRegister);
    HRESULT (__attribute__((__stdcall__)) *IsRunning)(
        IRunningObjectTable* This,
        IMoniker *pmkObjectName);
    HRESULT (__attribute__((__stdcall__)) *GetObjectA)(
        IRunningObjectTable* This,
        IMoniker *pmkObjectName,
        IUnknown **ppunkObject);
    HRESULT (__attribute__((__stdcall__)) *NoteChangeTime)(
        IRunningObjectTable* This,
        DWORD dwRegister,
        FILETIME *pfiletime);
    HRESULT (__attribute__((__stdcall__)) *GetTimeOfLastChange)(
        IRunningObjectTable* This,
        IMoniker *pmkObjectName,
        FILETIME *pfiletime);
    HRESULT (__attribute__((__stdcall__)) *EnumRunning)(
        IRunningObjectTable* This,
        IEnumMoniker **ppenumMoniker);
   
} IRunningObjectTableVtbl;
struct IRunningObjectTable {
    IRunningObjectTableVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_Register_Proxy(
    IRunningObjectTable* This,
    DWORD grfFlags,
    IUnknown *punkObject,
    IMoniker *pmkObjectName,
    DWORD *pdwRegister);
void __attribute__((__stdcall__)) IRunningObjectTable_Register_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_Revoke_Proxy(
    IRunningObjectTable* This,
    DWORD dwRegister);
void __attribute__((__stdcall__)) IRunningObjectTable_Revoke_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_IsRunning_Proxy(
    IRunningObjectTable* This,
    IMoniker *pmkObjectName);
void __attribute__((__stdcall__)) IRunningObjectTable_IsRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_GetObject_Proxy(
    IRunningObjectTable* This,
    IMoniker *pmkObjectName,
    IUnknown **ppunkObject);
void __attribute__((__stdcall__)) IRunningObjectTable_GetObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_NoteChangeTime_Proxy(
    IRunningObjectTable* This,
    DWORD dwRegister,
    FILETIME *pfiletime);
void __attribute__((__stdcall__)) IRunningObjectTable_NoteChangeTime_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_GetTimeOfLastChange_Proxy(
    IRunningObjectTable* This,
    IMoniker *pmkObjectName,
    FILETIME *pfiletime);
void __attribute__((__stdcall__)) IRunningObjectTable_GetTimeOfLastChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_EnumRunning_Proxy(
    IRunningObjectTable* This,
    IEnumMoniker **ppenumMoniker);
void __attribute__((__stdcall__)) IRunningObjectTable_EnumRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IPersist *LPPERSIST;
extern const GUID IID_IPersist ;
typedef struct IPersistVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IPersist* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IPersist* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IPersist* This);
    HRESULT (__attribute__((__stdcall__)) *GetClassID)(
        IPersist* This,
        CLSID *pClassID);
   
} IPersistVtbl;
struct IPersist {
    IPersistVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IPersist_GetClassID_Proxy(
    IPersist* This,
    CLSID *pClassID);
void __attribute__((__stdcall__)) IPersist_GetClassID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IPersistStream *LPPERSISTSTREAM;
extern const GUID IID_IPersistStream ;
typedef struct IPersistStreamVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IPersistStream* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IPersistStream* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IPersistStream* This);
    HRESULT (__attribute__((__stdcall__)) *GetClassID)(
        IPersistStream* This,
        CLSID *pClassID);
    HRESULT (__attribute__((__stdcall__)) *IsDirty)(
        IPersistStream* This);
    HRESULT (__attribute__((__stdcall__)) *Load)(
        IPersistStream* This,
        IStream *pStm);
    HRESULT (__attribute__((__stdcall__)) *Save)(
        IPersistStream* This,
        IStream *pStm,
        BOOL fClearDirty);
    HRESULT (__attribute__((__stdcall__)) *GetSizeMax)(
        IPersistStream* This,
        ULARGE_INTEGER *pcbSize);
   
} IPersistStreamVtbl;
struct IPersistStream {
    IPersistStreamVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IPersistStream_IsDirty_Proxy(
    IPersistStream* This);
void __attribute__((__stdcall__)) IPersistStream_IsDirty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistStream_Load_Proxy(
    IPersistStream* This,
    IStream *pStm);
void __attribute__((__stdcall__)) IPersistStream_Load_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistStream_Save_Proxy(
    IPersistStream* This,
    IStream *pStm,
    BOOL fClearDirty);
void __attribute__((__stdcall__)) IPersistStream_Save_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistStream_GetSizeMax_Proxy(
    IPersistStream* This,
    ULARGE_INTEGER *pcbSize);
void __attribute__((__stdcall__)) IPersistStream_GetSizeMax_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IMoniker *LPMONIKER;
typedef enum tagMKSYS {
    MKSYS_NONE = 0,
    MKSYS_GENERICCOMPOSITE = 1,
    MKSYS_FILEMONIKER = 2,
    MKSYS_ANTIMONIKER = 3,
    MKSYS_ITEMMONIKER = 4,
    MKSYS_POINTERMONIKER = 5,
    MKSYS_CLASSMONIKER = 7
} MKSYS;
typedef enum tagMKREDUCE {
    MKRREDUCE_ONE = 3 << 16,
    MKRREDUCE_TOUSER = 2 << 16,
    MKRREDUCE_THROUGHUSER = 1 << 16,
    MKRREDUCE_ALL = 0
} MKRREDUCE;
extern const GUID IID_IMoniker ;
typedef struct IMonikerVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IMoniker* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IMoniker* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IMoniker* This);
    HRESULT (__attribute__((__stdcall__)) *GetClassID)(
        IMoniker* This,
        CLSID *pClassID);
    HRESULT (__attribute__((__stdcall__)) *IsDirty)(
        IMoniker* This);
    HRESULT (__attribute__((__stdcall__)) *Load)(
        IMoniker* This,
        IStream *pStm);
    HRESULT (__attribute__((__stdcall__)) *Save)(
        IMoniker* This,
        IStream *pStm,
        BOOL fClearDirty);
    HRESULT (__attribute__((__stdcall__)) *GetSizeMax)(
        IMoniker* This,
        ULARGE_INTEGER *pcbSize);
    HRESULT (__attribute__((__stdcall__)) *BindToObject)(
        IMoniker* This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        const IID* const riidResult,
        void **ppvResult);
    HRESULT (__attribute__((__stdcall__)) *BindToStorage)(
        IMoniker* This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        const IID* const riid,
        void **ppvObj);
    HRESULT (__attribute__((__stdcall__)) *Reduce)(
        IMoniker* This,
        IBindCtx *pbc,
        DWORD dwReduceHowFar,
        IMoniker **ppmkToLeft,
        IMoniker **ppmkReduced);
    HRESULT (__attribute__((__stdcall__)) *ComposeWith)(
        IMoniker* This,
        IMoniker *pmkRight,
        BOOL fOnlyIfNotGeneric,
        IMoniker **ppmkComposite);
    HRESULT (__attribute__((__stdcall__)) *Enum)(
        IMoniker* This,
        BOOL fForward,
        IEnumMoniker **ppenumMoniker);
    HRESULT (__attribute__((__stdcall__)) *IsEqual)(
        IMoniker* This,
        IMoniker *pmkOtherMoniker);
    HRESULT (__attribute__((__stdcall__)) *Hash)(
        IMoniker* This,
        DWORD *pdwHash);
    HRESULT (__attribute__((__stdcall__)) *IsRunning)(
        IMoniker* This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        IMoniker *pmkNewlyRunning);
    HRESULT (__attribute__((__stdcall__)) *GetTimeOfLastChange)(
        IMoniker* This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        FILETIME *pFileTime);
    HRESULT (__attribute__((__stdcall__)) *Inverse)(
        IMoniker* This,
        IMoniker **ppmk);
    HRESULT (__attribute__((__stdcall__)) *CommonPrefixWith)(
        IMoniker* This,
        IMoniker *pmkOther,
        IMoniker **ppmkPrefix);
    HRESULT (__attribute__((__stdcall__)) *RelativePathTo)(
        IMoniker* This,
        IMoniker *pmkOther,
        IMoniker **ppmkRelPath);
    HRESULT (__attribute__((__stdcall__)) *GetDisplayName)(
        IMoniker* This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        LPOLESTR *ppszDisplayName);
    HRESULT (__attribute__((__stdcall__)) *ParseDisplayName)(
        IMoniker* This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut);
    HRESULT (__attribute__((__stdcall__)) *IsSystemMoniker)(
        IMoniker* This,
        DWORD *pdwMksys);
   
} IMonikerVtbl;
struct IMoniker {
    IMonikerVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IMoniker_RemoteBindToObject_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID* const riidResult,
    IUnknown **ppvResult);
void __attribute__((__stdcall__)) IMoniker_RemoteBindToObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_RemoteBindToStorage_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID* const riid,
    IUnknown **ppvObj);
void __attribute__((__stdcall__)) IMoniker_RemoteBindToStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_Reduce_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    DWORD dwReduceHowFar,
    IMoniker **ppmkToLeft,
    IMoniker **ppmkReduced);
void __attribute__((__stdcall__)) IMoniker_Reduce_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_ComposeWith_Proxy(
    IMoniker* This,
    IMoniker *pmkRight,
    BOOL fOnlyIfNotGeneric,
    IMoniker **ppmkComposite);
void __attribute__((__stdcall__)) IMoniker_ComposeWith_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_Enum_Proxy(
    IMoniker* This,
    BOOL fForward,
    IEnumMoniker **ppenumMoniker);
void __attribute__((__stdcall__)) IMoniker_Enum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_IsEqual_Proxy(
    IMoniker* This,
    IMoniker *pmkOtherMoniker);
void __attribute__((__stdcall__)) IMoniker_IsEqual_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_Hash_Proxy(
    IMoniker* This,
    DWORD *pdwHash);
void __attribute__((__stdcall__)) IMoniker_Hash_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_IsRunning_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    IMoniker *pmkNewlyRunning);
void __attribute__((__stdcall__)) IMoniker_IsRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_GetTimeOfLastChange_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    FILETIME *pFileTime);
void __attribute__((__stdcall__)) IMoniker_GetTimeOfLastChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_Inverse_Proxy(
    IMoniker* This,
    IMoniker **ppmk);
void __attribute__((__stdcall__)) IMoniker_Inverse_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_CommonPrefixWith_Proxy(
    IMoniker* This,
    IMoniker *pmkOther,
    IMoniker **ppmkPrefix);
void __attribute__((__stdcall__)) IMoniker_CommonPrefixWith_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_RelativePathTo_Proxy(
    IMoniker* This,
    IMoniker *pmkOther,
    IMoniker **ppmkRelPath);
void __attribute__((__stdcall__)) IMoniker_RelativePathTo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_GetDisplayName_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    LPOLESTR *ppszDisplayName);
void __attribute__((__stdcall__)) IMoniker_GetDisplayName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_ParseDisplayName_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    LPOLESTR pszDisplayName,
    ULONG *pchEaten,
    IMoniker **ppmkOut);
void __attribute__((__stdcall__)) IMoniker_ParseDisplayName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_IsSystemMoniker_Proxy(
    IMoniker* This,
    DWORD *pdwMksys);
void __attribute__((__stdcall__)) IMoniker_IsSystemMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_BindToObject_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID* const riidResult,
    void **ppvResult);
HRESULT __attribute__((__stdcall__)) IMoniker_BindToObject_Stub(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID* const riidResult,
    IUnknown **ppvResult);
HRESULT __attribute__((__stdcall__)) IMoniker_BindToStorage_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID* const riid,
    void **ppvObj);
HRESULT __attribute__((__stdcall__)) IMoniker_BindToStorage_Stub(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID* const riid,
    IUnknown **ppvObj);
extern const GUID IID_IROTData ;
typedef struct IROTDataVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IROTData* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IROTData* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IROTData* This);
    HRESULT (__attribute__((__stdcall__)) *GetComparisonData)(
        IROTData* This,
        byte *pbData,
        ULONG cbMax,
        ULONG *pcbData);
   
} IROTDataVtbl;
struct IROTData {
    IROTDataVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IROTData_GetComparisonData_Proxy(
    IROTData* This,
    byte *pbData,
    ULONG cbMax,
    ULONG *pcbData);
void __attribute__((__stdcall__)) IROTData_GetComparisonData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IEnumString *LPENUMSTRING;
extern const GUID IID_IEnumString ;
typedef struct IEnumStringVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IEnumString* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IEnumString* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IEnumString* This);
    HRESULT (__attribute__((__stdcall__)) *Next)(
        IEnumString* This,
        ULONG celt,
        LPOLESTR *rgelt,
        ULONG *pceltFetched);
    HRESULT (__attribute__((__stdcall__)) *Skip)(
        IEnumString* This,
        ULONG celt);
    HRESULT (__attribute__((__stdcall__)) *Reset)(
        IEnumString* This);
    HRESULT (__attribute__((__stdcall__)) *Clone)(
        IEnumString* This,
        IEnumString **ppenum);
   
} IEnumStringVtbl;
struct IEnumString {
    IEnumStringVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IEnumString_RemoteNext_Proxy(
    IEnumString* This,
    ULONG celt,
    LPOLESTR *rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumString_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumString_Skip_Proxy(
    IEnumString* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumString_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumString_Reset_Proxy(
    IEnumString* This);
void __attribute__((__stdcall__)) IEnumString_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumString_Clone_Proxy(
    IEnumString* This,
    IEnumString **ppenum);
void __attribute__((__stdcall__)) IEnumString_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumString_Next_Proxy(
    IEnumString* This,
    ULONG celt,
    LPOLESTR *rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumString_Next_Stub(
    IEnumString* This,
    ULONG celt,
    LPOLESTR *rgelt,
    ULONG *pceltFetched);
extern const GUID IID_IClassActivator ;
typedef struct IClassActivatorVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IClassActivator* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IClassActivator* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IClassActivator* This);
    HRESULT (__attribute__((__stdcall__)) *GetClassObject)(
        IClassActivator* This,
        const CLSID* const rclsid,
        DWORD dwClassContext,
        LCID locale,
        const IID* const riid,
        void **ppv);
   
} IClassActivatorVtbl;
struct IClassActivator {
    IClassActivatorVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IClassActivator_GetClassObject_Proxy(
    IClassActivator* This,
    const CLSID* const rclsid,
    DWORD dwClassContext,
    LCID locale,
    const IID* const riid,
    void **ppv);
void __attribute__((__stdcall__)) IClassActivator_GetClassObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_ISequentialStream ;
typedef struct ISequentialStreamVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ISequentialStream* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ISequentialStream* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ISequentialStream* This);
    HRESULT (__attribute__((__stdcall__)) *Read)(
        ISequentialStream* This,
        void *pv,
        ULONG cb,
        ULONG *pcbRead);
    HRESULT (__attribute__((__stdcall__)) *Write)(
        ISequentialStream* This,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten);
   
} ISequentialStreamVtbl;
struct ISequentialStream {
    ISequentialStreamVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ISequentialStream_RemoteRead_Proxy(
    ISequentialStream* This,
    byte *pv,
    ULONG cb,
    ULONG *pcbRead);
void __attribute__((__stdcall__)) ISequentialStream_RemoteRead_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISequentialStream_RemoteWrite_Proxy(
    ISequentialStream* This,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
void __attribute__((__stdcall__)) ISequentialStream_RemoteWrite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISequentialStream_Read_Proxy(
    ISequentialStream* This,
    void *pv,
    ULONG cb,
    ULONG *pcbRead);
HRESULT __attribute__((__stdcall__)) ISequentialStream_Read_Stub(
    ISequentialStream* This,
    byte *pv,
    ULONG cb,
    ULONG *pcbRead);
HRESULT __attribute__((__stdcall__)) ISequentialStream_Write_Proxy(
    ISequentialStream* This,
    const void *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT __attribute__((__stdcall__)) ISequentialStream_Write_Stub(
    ISequentialStream* This,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
typedef IStream *LPSTREAM;
typedef struct tagSTATSTG {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
} STATSTG;
typedef enum tagSTGTY {
    STGTY_STORAGE = 1,
    STGTY_STREAM = 2,
    STGTY_LOCKBYTES = 3,
    STGTY_PROPERTY = 4
} STGTY;
typedef enum tagSTREAM_SEEK {
    STREAM_SEEK_SET = 0,
    STREAM_SEEK_CUR = 1,
    STREAM_SEEK_END = 2
} STREAM_SEEK;
typedef enum tagLOCKTYPE {
    LOCK_WRITE = 1,
    LOCK_EXCLUSIVE = 2,
    LOCK_ONLYONCE = 4
} LOCKTYPE;
extern const GUID IID_IStream ;
typedef struct IStreamVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IStream* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IStream* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IStream* This);
    HRESULT (__attribute__((__stdcall__)) *Read)(
        IStream* This,
        void *pv,
        ULONG cb,
        ULONG *pcbRead);
    HRESULT (__attribute__((__stdcall__)) *Write)(
        IStream* This,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten);
    HRESULT (__attribute__((__stdcall__)) *Seek)(
        IStream* This,
        LARGE_INTEGER dlibMove,
        DWORD dwOrigin,
        ULARGE_INTEGER *plibNewPosition);
    HRESULT (__attribute__((__stdcall__)) *SetSize)(
        IStream* This,
        ULARGE_INTEGER libNewSize);
    HRESULT (__attribute__((__stdcall__)) *CopyTo)(
        IStream* This,
        IStream *pstm,
        ULARGE_INTEGER cb,
        ULARGE_INTEGER *pcbRead,
        ULARGE_INTEGER *pcbWritten);
    HRESULT (__attribute__((__stdcall__)) *Commit)(
        IStream* This,
        DWORD grfCommitFlags);
    HRESULT (__attribute__((__stdcall__)) *Revert)(
        IStream* This);
    HRESULT (__attribute__((__stdcall__)) *LockRegion)(
        IStream* This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);
    HRESULT (__attribute__((__stdcall__)) *UnlockRegion)(
        IStream* This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);
    HRESULT (__attribute__((__stdcall__)) *Stat)(
        IStream* This,
        STATSTG *pstatstg,
        DWORD grfStatFlag);
    HRESULT (__attribute__((__stdcall__)) *Clone)(
        IStream* This,
        IStream **ppstm);
   
} IStreamVtbl;
struct IStream {
    IStreamVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IStream_RemoteSeek_Proxy(
    IStream* This,
    LARGE_INTEGER dlibMove,
    DWORD dwOrigin,
    ULARGE_INTEGER *plibNewPosition);
void __attribute__((__stdcall__)) IStream_RemoteSeek_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_SetSize_Proxy(
    IStream* This,
    ULARGE_INTEGER libNewSize);
void __attribute__((__stdcall__)) IStream_SetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_RemoteCopyTo_Proxy(
    IStream* This,
    IStream *pstm,
    ULARGE_INTEGER cb,
    ULARGE_INTEGER *pcbRead,
    ULARGE_INTEGER *pcbWritten);
void __attribute__((__stdcall__)) IStream_RemoteCopyTo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_Commit_Proxy(
    IStream* This,
    DWORD grfCommitFlags);
void __attribute__((__stdcall__)) IStream_Commit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_Revert_Proxy(
    IStream* This);
void __attribute__((__stdcall__)) IStream_Revert_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_LockRegion_Proxy(
    IStream* This,
    ULARGE_INTEGER libOffset,
    ULARGE_INTEGER cb,
    DWORD dwLockType);
void __attribute__((__stdcall__)) IStream_LockRegion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_UnlockRegion_Proxy(
    IStream* This,
    ULARGE_INTEGER libOffset,
    ULARGE_INTEGER cb,
    DWORD dwLockType);
void __attribute__((__stdcall__)) IStream_UnlockRegion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_Stat_Proxy(
    IStream* This,
    STATSTG *pstatstg,
    DWORD grfStatFlag);
void __attribute__((__stdcall__)) IStream_Stat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_Clone_Proxy(
    IStream* This,
    IStream **ppstm);
void __attribute__((__stdcall__)) IStream_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_Seek_Proxy(
    IStream* This,
    LARGE_INTEGER dlibMove,
    DWORD dwOrigin,
    ULARGE_INTEGER *plibNewPosition);
HRESULT __attribute__((__stdcall__)) IStream_Seek_Stub(
    IStream* This,
    LARGE_INTEGER dlibMove,
    DWORD dwOrigin,
    ULARGE_INTEGER *plibNewPosition);
HRESULT __attribute__((__stdcall__)) IStream_CopyTo_Proxy(
    IStream* This,
    IStream *pstm,
    ULARGE_INTEGER cb,
    ULARGE_INTEGER *pcbRead,
    ULARGE_INTEGER *pcbWritten);
HRESULT __attribute__((__stdcall__)) IStream_CopyTo_Stub(
    IStream* This,
    IStream *pstm,
    ULARGE_INTEGER cb,
    ULARGE_INTEGER *pcbRead,
    ULARGE_INTEGER *pcbWritten);
typedef IEnumSTATSTG *LPENUMSTATSTG;
extern const GUID IID_IEnumSTATSTG ;
typedef struct IEnumSTATSTGVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IEnumSTATSTG* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IEnumSTATSTG* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IEnumSTATSTG* This);
    HRESULT (__attribute__((__stdcall__)) *Next)(
        IEnumSTATSTG* This,
        ULONG celt,
        STATSTG *rgelt,
        ULONG *pceltFetched);
    HRESULT (__attribute__((__stdcall__)) *Skip)(
        IEnumSTATSTG* This,
        ULONG celt);
    HRESULT (__attribute__((__stdcall__)) *Reset)(
        IEnumSTATSTG* This);
    HRESULT (__attribute__((__stdcall__)) *Clone)(
        IEnumSTATSTG* This,
        IEnumSTATSTG **ppenum);
   
} IEnumSTATSTGVtbl;
struct IEnumSTATSTG {
    IEnumSTATSTGVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_RemoteNext_Proxy(
    IEnumSTATSTG* This,
    ULONG celt,
    STATSTG *rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumSTATSTG_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_Skip_Proxy(
    IEnumSTATSTG* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumSTATSTG_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_Reset_Proxy(
    IEnumSTATSTG* This);
void __attribute__((__stdcall__)) IEnumSTATSTG_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_Clone_Proxy(
    IEnumSTATSTG* This,
    IEnumSTATSTG **ppenum);
void __attribute__((__stdcall__)) IEnumSTATSTG_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_Next_Proxy(
    IEnumSTATSTG* This,
    ULONG celt,
    STATSTG *rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_Next_Stub(
    IEnumSTATSTG* This,
    ULONG celt,
    STATSTG *rgelt,
    ULONG *pceltFetched);
typedef IStorage *LPSTORAGE;
typedef struct tagRemSNB {
    ULONG ulCntStr;
    ULONG ulCntChar;
    OLECHAR rgString[1];
} RemSNB;
typedef RemSNB *wireSNB;
typedef OLECHAR **SNB;
extern const GUID IID_IStorage ;
typedef struct IStorageVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IStorage* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IStorage* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IStorage* This);
    HRESULT (__attribute__((__stdcall__)) *CreateStream)(
        IStorage* This,
        LPCOLESTR pwcsName,
        DWORD grfMode,
        DWORD reserved1,
        DWORD reserved2,
        IStream **ppstm);
    HRESULT (__attribute__((__stdcall__)) *OpenStream)(
        IStorage* This,
        LPCOLESTR pwcsName,
        void *reserved1,
        DWORD grfMode,
        DWORD reserved2,
        IStream **ppstm);
    HRESULT (__attribute__((__stdcall__)) *CreateStorage)(
        IStorage* This,
        LPCOLESTR pwcsName,
        DWORD grfMode,
        DWORD dwStgFmt,
        DWORD reserved2,
        IStorage **ppstg);
    HRESULT (__attribute__((__stdcall__)) *OpenStorage)(
        IStorage* This,
        LPCOLESTR pwcsName,
        IStorage *pstgPriority,
        DWORD grfMode,
        SNB snbExclude,
        DWORD reserved,
        IStorage **ppstg);
    HRESULT (__attribute__((__stdcall__)) *CopyTo)(
        IStorage* This,
        DWORD ciidExclude,
        const IID *rgiidExclude,
        SNB snbExclude,
        IStorage *pstgDest);
    HRESULT (__attribute__((__stdcall__)) *MoveElementTo)(
        IStorage* This,
        LPCOLESTR pwcsName,
        IStorage *pstgDest,
        LPCOLESTR pwcsNewName,
        DWORD grfFlags);
    HRESULT (__attribute__((__stdcall__)) *Commit)(
        IStorage* This,
        DWORD grfCommitFlags);
    HRESULT (__attribute__((__stdcall__)) *Revert)(
        IStorage* This);
    HRESULT (__attribute__((__stdcall__)) *EnumElements)(
        IStorage* This,
        DWORD reserved1,
        void *reserved2,
        DWORD reserved3,
        IEnumSTATSTG **ppenum);
    HRESULT (__attribute__((__stdcall__)) *DestroyElement)(
        IStorage* This,
        LPCOLESTR pwcsName);
    HRESULT (__attribute__((__stdcall__)) *RenameElement)(
        IStorage* This,
        LPCOLESTR pwcsOldName,
        LPCOLESTR pwcsNewName);
    HRESULT (__attribute__((__stdcall__)) *SetElementTimes)(
        IStorage* This,
        LPCOLESTR pwcsName,
        const FILETIME *pctime,
        const FILETIME *patime,
        const FILETIME *pmtime);
    HRESULT (__attribute__((__stdcall__)) *SetClass)(
        IStorage* This,
        const CLSID* const clsid);
    HRESULT (__attribute__((__stdcall__)) *SetStateBits)(
        IStorage* This,
        DWORD grfStateBits,
        DWORD grfMask);
    HRESULT (__attribute__((__stdcall__)) *Stat)(
        IStorage* This,
        STATSTG *pstatstg,
        DWORD grfStatFlag);
   
} IStorageVtbl;
struct IStorage {
    IStorageVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IStorage_CreateStream_Proxy(
    IStorage* This,
    LPCOLESTR pwcsName,
    DWORD grfMode,
    DWORD reserved1,
    DWORD reserved2,
    IStream **ppstm);
void __attribute__((__stdcall__)) IStorage_CreateStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_RemoteOpenStream_Proxy(
    IStorage* This,
    LPCOLESTR pwcsName,
    ULONG cbReserved1,
    byte *reserved1,
    DWORD grfMode,
    DWORD reserved2,
    IStream **ppstm);
void __attribute__((__stdcall__)) IStorage_RemoteOpenStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_CreateStorage_Proxy(
    IStorage* This,
    LPCOLESTR pwcsName,
    DWORD grfMode,
    DWORD dwStgFmt,
    DWORD reserved2,
    IStorage **ppstg);
void __attribute__((__stdcall__)) IStorage_CreateStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_OpenStorage_Proxy(
    IStorage* This,
    LPCOLESTR pwcsName,
    IStorage *pstgPriority,
    DWORD grfMode,
    SNB snbExclude,
    DWORD reserved,
    IStorage **ppstg);
void __attribute__((__stdcall__)) IStorage_OpenStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_CopyTo_Proxy(
    IStorage* This,
    DWORD ciidExclude,
    const IID *rgiidExclude,
    SNB snbExclude,
    IStorage *pstgDest);
void __attribute__((__stdcall__)) IStorage_CopyTo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_MoveElementTo_Proxy(
    IStorage* This,
    LPCOLESTR pwcsName,
    IStorage *pstgDest,
    LPCOLESTR pwcsNewName,
    DWORD grfFlags);
void __attribute__((__stdcall__)) IStorage_MoveElementTo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_Commit_Proxy(
    IStorage* This,
    DWORD grfCommitFlags);
void __attribute__((__stdcall__)) IStorage_Commit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_Revert_Proxy(
    IStorage* This);
void __attribute__((__stdcall__)) IStorage_Revert_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_RemoteEnumElements_Proxy(
    IStorage* This,
    DWORD reserved1,
    ULONG cbReserved2,
    byte *reserved2,
    DWORD reserved3,
    IEnumSTATSTG **ppenum);
void __attribute__((__stdcall__)) IStorage_RemoteEnumElements_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_DestroyElement_Proxy(
    IStorage* This,
    LPCOLESTR pwcsName);
void __attribute__((__stdcall__)) IStorage_DestroyElement_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_RenameElement_Proxy(
    IStorage* This,
    LPCOLESTR pwcsOldName,
    LPCOLESTR pwcsNewName);
void __attribute__((__stdcall__)) IStorage_RenameElement_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_SetElementTimes_Proxy(
    IStorage* This,
    LPCOLESTR pwcsName,
    const FILETIME *pctime,
    const FILETIME *patime,
    const FILETIME *pmtime);
void __attribute__((__stdcall__)) IStorage_SetElementTimes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_SetClass_Proxy(
    IStorage* This,
    const CLSID* const clsid);
void __attribute__((__stdcall__)) IStorage_SetClass_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_SetStateBits_Proxy(
    IStorage* This,
    DWORD grfStateBits,
    DWORD grfMask);
void __attribute__((__stdcall__)) IStorage_SetStateBits_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_Stat_Proxy(
    IStorage* This,
    STATSTG *pstatstg,
    DWORD grfStatFlag);
void __attribute__((__stdcall__)) IStorage_Stat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_OpenStream_Proxy(
    IStorage* This,
    LPCOLESTR pwcsName,
    void *reserved1,
    DWORD grfMode,
    DWORD reserved2,
    IStream **ppstm);
HRESULT __attribute__((__stdcall__)) IStorage_OpenStream_Stub(
    IStorage* This,
    LPCOLESTR pwcsName,
    ULONG cbReserved1,
    byte *reserved1,
    DWORD grfMode,
    DWORD reserved2,
    IStream **ppstm);
HRESULT __attribute__((__stdcall__)) IStorage_EnumElements_Proxy(
    IStorage* This,
    DWORD reserved1,
    void *reserved2,
    DWORD reserved3,
    IEnumSTATSTG **ppenum);
HRESULT __attribute__((__stdcall__)) IStorage_EnumElements_Stub(
    IStorage* This,
    DWORD reserved1,
    ULONG cbReserved2,
    byte *reserved2,
    DWORD reserved3,
    IEnumSTATSTG **ppenum);
typedef IPersistFile *LPPERSISTFILE;
extern const GUID IID_IPersistFile ;
typedef struct IPersistFileVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IPersistFile* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IPersistFile* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IPersistFile* This);
    HRESULT (__attribute__((__stdcall__)) *GetClassID)(
        IPersistFile* This,
        CLSID *pClassID);
    HRESULT (__attribute__((__stdcall__)) *IsDirty)(
        IPersistFile* This);
    HRESULT (__attribute__((__stdcall__)) *Load)(
        IPersistFile* This,
        LPCOLESTR pszFileName,
        DWORD dwMode);
    HRESULT (__attribute__((__stdcall__)) *Save)(
        IPersistFile* This,
        LPCOLESTR pszFileName,
        BOOL fRemember);
    HRESULT (__attribute__((__stdcall__)) *SaveCompleted)(
        IPersistFile* This,
        LPCOLESTR pszFileName);
    HRESULT (__attribute__((__stdcall__)) *GetCurFile)(
        IPersistFile* This,
        LPOLESTR *ppszFileName);
   
} IPersistFileVtbl;
struct IPersistFile {
    IPersistFileVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IPersistFile_IsDirty_Proxy(
    IPersistFile* This);
void __attribute__((__stdcall__)) IPersistFile_IsDirty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistFile_Load_Proxy(
    IPersistFile* This,
    LPCOLESTR pszFileName,
    DWORD dwMode);
void __attribute__((__stdcall__)) IPersistFile_Load_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistFile_Save_Proxy(
    IPersistFile* This,
    LPCOLESTR pszFileName,
    BOOL fRemember);
void __attribute__((__stdcall__)) IPersistFile_Save_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistFile_SaveCompleted_Proxy(
    IPersistFile* This,
    LPCOLESTR pszFileName);
void __attribute__((__stdcall__)) IPersistFile_SaveCompleted_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistFile_GetCurFile_Proxy(
    IPersistFile* This,
    LPOLESTR *ppszFileName);
void __attribute__((__stdcall__)) IPersistFile_GetCurFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IPersistStorage *LPPERSISTSTORAGE;
extern const GUID IID_IPersistStorage ;
typedef struct IPersistStorageVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IPersistStorage* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IPersistStorage* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IPersistStorage* This);
    HRESULT (__attribute__((__stdcall__)) *GetClassID)(
        IPersistStorage* This,
        CLSID *pClassID);
    HRESULT (__attribute__((__stdcall__)) *IsDirty)(
        IPersistStorage* This);
    HRESULT (__attribute__((__stdcall__)) *InitNew)(
        IPersistStorage* This,
        IStorage *pStg);
    HRESULT (__attribute__((__stdcall__)) *Load)(
        IPersistStorage* This,
        IStorage *pStg);
    HRESULT (__attribute__((__stdcall__)) *Save)(
        IPersistStorage* This,
        IStorage *pStgSave,
        BOOL fSameAsLoad);
    HRESULT (__attribute__((__stdcall__)) *SaveCompleted)(
        IPersistStorage* This,
        IStorage *pStgNew);
    HRESULT (__attribute__((__stdcall__)) *HandsOffStorage)(
        IPersistStorage* This);
   
} IPersistStorageVtbl;
struct IPersistStorage {
    IPersistStorageVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IPersistStorage_IsDirty_Proxy(
    IPersistStorage* This);
void __attribute__((__stdcall__)) IPersistStorage_IsDirty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistStorage_InitNew_Proxy(
    IPersistStorage* This,
    IStorage *pStg);
void __attribute__((__stdcall__)) IPersistStorage_InitNew_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistStorage_Load_Proxy(
    IPersistStorage* This,
    IStorage *pStg);
void __attribute__((__stdcall__)) IPersistStorage_Load_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistStorage_Save_Proxy(
    IPersistStorage* This,
    IStorage *pStgSave,
    BOOL fSameAsLoad);
void __attribute__((__stdcall__)) IPersistStorage_Save_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistStorage_SaveCompleted_Proxy(
    IPersistStorage* This,
    IStorage *pStgNew);
void __attribute__((__stdcall__)) IPersistStorage_SaveCompleted_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistStorage_HandsOffStorage_Proxy(
    IPersistStorage* This);
void __attribute__((__stdcall__)) IPersistStorage_HandsOffStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IRootStorage *LPROOTSTORAGE;
extern const GUID IID_IRootStorage ;
typedef struct IRootStorageVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IRootStorage* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IRootStorage* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IRootStorage* This);
    HRESULT (__attribute__((__stdcall__)) *SwitchToFile)(
        IRootStorage* This,
        LPOLESTR pszFile);
   
} IRootStorageVtbl;
struct IRootStorage {
    IRootStorageVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IRootStorage_SwitchToFile_Proxy(
    IRootStorage* This,
    LPOLESTR pszFile);
void __attribute__((__stdcall__)) IRootStorage_SwitchToFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ILockBytes *LPLOCKBYTES;
extern const GUID IID_ILockBytes ;
typedef struct ILockBytesVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ILockBytes* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ILockBytes* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ILockBytes* This);
    HRESULT (__attribute__((__stdcall__)) *ReadAt)(
        ILockBytes* This,
        ULARGE_INTEGER ulOffset,
        void *pv,
        ULONG cb,
        ULONG *pcbRead);
    HRESULT (__attribute__((__stdcall__)) *WriteAt)(
        ILockBytes* This,
        ULARGE_INTEGER ulOffset,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten);
    HRESULT (__attribute__((__stdcall__)) *Flush)(
        ILockBytes* This);
    HRESULT (__attribute__((__stdcall__)) *SetSize)(
        ILockBytes* This,
        ULARGE_INTEGER cb);
    HRESULT (__attribute__((__stdcall__)) *LockRegion)(
        ILockBytes* This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);
    HRESULT (__attribute__((__stdcall__)) *UnlockRegion)(
        ILockBytes* This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);
    HRESULT (__attribute__((__stdcall__)) *Stat)(
        ILockBytes* This,
        STATSTG *pstatstg,
        DWORD grfStatFlag);
   
} ILockBytesVtbl;
struct ILockBytes {
    ILockBytesVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ILockBytes_RemoteReadAt_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    byte *pv,
    ULONG cb,
    ULONG *pcbRead);
void __attribute__((__stdcall__)) ILockBytes_RemoteReadAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILockBytes_RemoteWriteAt_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
void __attribute__((__stdcall__)) ILockBytes_RemoteWriteAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILockBytes_Flush_Proxy(
    ILockBytes* This);
void __attribute__((__stdcall__)) ILockBytes_Flush_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILockBytes_SetSize_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER cb);
void __attribute__((__stdcall__)) ILockBytes_SetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILockBytes_LockRegion_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER libOffset,
    ULARGE_INTEGER cb,
    DWORD dwLockType);
void __attribute__((__stdcall__)) ILockBytes_LockRegion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILockBytes_UnlockRegion_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER libOffset,
    ULARGE_INTEGER cb,
    DWORD dwLockType);
void __attribute__((__stdcall__)) ILockBytes_UnlockRegion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILockBytes_Stat_Proxy(
    ILockBytes* This,
    STATSTG *pstatstg,
    DWORD grfStatFlag);
void __attribute__((__stdcall__)) ILockBytes_Stat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILockBytes_ReadAt_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    void *pv,
    ULONG cb,
    ULONG *pcbRead);
HRESULT __attribute__((__stdcall__)) ILockBytes_ReadAt_Stub(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    byte *pv,
    ULONG cb,
    ULONG *pcbRead);
HRESULT __attribute__((__stdcall__)) ILockBytes_WriteAt_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    const void *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT __attribute__((__stdcall__)) ILockBytes_WriteAt_Stub(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
extern const GUID IID_IFillLockBytes ;
typedef struct IFillLockBytesVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IFillLockBytes* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IFillLockBytes* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IFillLockBytes* This);
    HRESULT (__attribute__((__stdcall__)) *FillAppend)(
        IFillLockBytes* This,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten);
    HRESULT (__attribute__((__stdcall__)) *FillAt)(
        IFillLockBytes* This,
        ULARGE_INTEGER ulOffset,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten);
    HRESULT (__attribute__((__stdcall__)) *SetFillSize)(
        IFillLockBytes* This,
        ULARGE_INTEGER ulSize);
    HRESULT (__attribute__((__stdcall__)) *Terminate)(
        IFillLockBytes* This,
        BOOL bCanceled);
   
} IFillLockBytesVtbl;
struct IFillLockBytes {
    IFillLockBytesVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IFillLockBytes_RemoteFillAppend_Proxy(
    IFillLockBytes* This,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
void __attribute__((__stdcall__)) IFillLockBytes_RemoteFillAppend_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IFillLockBytes_RemoteFillAt_Proxy(
    IFillLockBytes* This,
    ULARGE_INTEGER ulOffset,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
void __attribute__((__stdcall__)) IFillLockBytes_RemoteFillAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IFillLockBytes_SetFillSize_Proxy(
    IFillLockBytes* This,
    ULARGE_INTEGER ulSize);
void __attribute__((__stdcall__)) IFillLockBytes_SetFillSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IFillLockBytes_Terminate_Proxy(
    IFillLockBytes* This,
    BOOL bCanceled);
void __attribute__((__stdcall__)) IFillLockBytes_Terminate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IFillLockBytes_FillAppend_Proxy(
    IFillLockBytes* This,
    const void *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT __attribute__((__stdcall__)) IFillLockBytes_FillAppend_Stub(
    IFillLockBytes* This,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT __attribute__((__stdcall__)) IFillLockBytes_FillAt_Proxy(
    IFillLockBytes* This,
    ULARGE_INTEGER ulOffset,
    const void *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT __attribute__((__stdcall__)) IFillLockBytes_FillAt_Stub(
    IFillLockBytes* This,
    ULARGE_INTEGER ulOffset,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
extern const GUID IID_IProgressNotify ;
typedef struct IProgressNotifyVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IProgressNotify* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IProgressNotify* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IProgressNotify* This);
    HRESULT (__attribute__((__stdcall__)) *OnProgress)(
        IProgressNotify* This,
        DWORD dwProgressCurrent,
        DWORD dwProgressMaximum,
        BOOL fAccurate,
        BOOL fOwner);
   
} IProgressNotifyVtbl;
struct IProgressNotify {
    IProgressNotifyVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IProgressNotify_OnProgress_Proxy(
    IProgressNotify* This,
    DWORD dwProgressCurrent,
    DWORD dwProgressMaximum,
    BOOL fAccurate,
    BOOL fOwner);
void __attribute__((__stdcall__)) IProgressNotify_OnProgress_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef struct tagStorageLayout {
    DWORD LayoutType;
    OLECHAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
} StorageLayout;
extern const GUID IID_ILayoutStorage ;
typedef struct ILayoutStorageVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ILayoutStorage* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ILayoutStorage* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ILayoutStorage* This);
    HRESULT (__attribute__((__stdcall__)) *LayoutScript)(
        ILayoutStorage* This,
        StorageLayout *pStorageLayout,
        DWORD nEntries,
        DWORD glfInterleavedFlag);
    HRESULT (__attribute__((__stdcall__)) *BeginMonitor)(
        ILayoutStorage* This);
    HRESULT (__attribute__((__stdcall__)) *EndMonitor)(
        ILayoutStorage* This);
    HRESULT (__attribute__((__stdcall__)) *ReLayoutDocfile)(
        ILayoutStorage* This,
        OLECHAR *pwcsNewDfName);
    HRESULT (__attribute__((__stdcall__)) *ReLayoutDocfileOnILockBytes)(
        ILayoutStorage* This,
        ILockBytes *pILockBytes);
   
} ILayoutStorageVtbl;
struct ILayoutStorage {
    ILayoutStorageVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ILayoutStorage_LayoutScript_Proxy(
    ILayoutStorage* This,
    StorageLayout *pStorageLayout,
    DWORD nEntries,
    DWORD glfInterleavedFlag);
void __attribute__((__stdcall__)) ILayoutStorage_LayoutScript_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILayoutStorage_BeginMonitor_Proxy(
    ILayoutStorage* This);
void __attribute__((__stdcall__)) ILayoutStorage_BeginMonitor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILayoutStorage_EndMonitor_Proxy(
    ILayoutStorage* This);
void __attribute__((__stdcall__)) ILayoutStorage_EndMonitor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILayoutStorage_ReLayoutDocfile_Proxy(
    ILayoutStorage* This,
    OLECHAR *pwcsNewDfName);
void __attribute__((__stdcall__)) ILayoutStorage_ReLayoutDocfile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy(
    ILayoutStorage* This,
    ILockBytes *pILockBytes);
void __attribute__((__stdcall__)) ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IBlockingLock ;
typedef struct IBlockingLockVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IBlockingLock* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IBlockingLock* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IBlockingLock* This);
    HRESULT (__attribute__((__stdcall__)) *Lock)(
        IBlockingLock* This,
        DWORD dwTimeout);
    HRESULT (__attribute__((__stdcall__)) *Unlock)(
        IBlockingLock* This);
   
} IBlockingLockVtbl;
struct IBlockingLock {
    IBlockingLockVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IBlockingLock_Lock_Proxy(
    IBlockingLock* This,
    DWORD dwTimeout);
void __attribute__((__stdcall__)) IBlockingLock_Lock_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBlockingLock_Unlock_Proxy(
    IBlockingLock* This);
void __attribute__((__stdcall__)) IBlockingLock_Unlock_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_ITimeAndNoticeControl ;
typedef struct ITimeAndNoticeControlVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ITimeAndNoticeControl* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ITimeAndNoticeControl* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ITimeAndNoticeControl* This);
    HRESULT (__attribute__((__stdcall__)) *SuppressChanges)(
        ITimeAndNoticeControl* This,
        DWORD res1,
        DWORD res2);
   
} ITimeAndNoticeControlVtbl;
struct ITimeAndNoticeControl {
    ITimeAndNoticeControlVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ITimeAndNoticeControl_SuppressChanges_Proxy(
    ITimeAndNoticeControl* This,
    DWORD res1,
    DWORD res2);
void __attribute__((__stdcall__)) ITimeAndNoticeControl_SuppressChanges_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IOplockStorage ;
typedef struct IOplockStorageVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IOplockStorage* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IOplockStorage* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IOplockStorage* This);
    HRESULT (__attribute__((__stdcall__)) *CreateStorageEx)(
        IOplockStorage* This,
        LPCWSTR pwcsName,
        DWORD grfMode,
        DWORD stgfmt,
        DWORD grfAttrs,
        const IID* const riid,
        void **ppstgOpen);
    HRESULT (__attribute__((__stdcall__)) *OpenStorageEx)(
        IOplockStorage* This,
        LPCWSTR pwcsName,
        DWORD grfMode,
        DWORD stgfmt,
        DWORD grfAttrs,
        const IID* const riid,
        void **ppstgOpen);
   
} IOplockStorageVtbl;
struct IOplockStorage {
    IOplockStorageVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IOplockStorage_CreateStorageEx_Proxy(
    IOplockStorage* This,
    LPCWSTR pwcsName,
    DWORD grfMode,
    DWORD stgfmt,
    DWORD grfAttrs,
    const IID* const riid,
    void **ppstgOpen);
void __attribute__((__stdcall__)) IOplockStorage_CreateStorageEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOplockStorage_OpenStorageEx_Proxy(
    IOplockStorage* This,
    LPCWSTR pwcsName,
    DWORD grfMode,
    DWORD stgfmt,
    DWORD grfAttrs,
    const IID* const riid,
    void **ppstgOpen);
void __attribute__((__stdcall__)) IOplockStorage_OpenStorageEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IEnumFORMATETC *LPENUMFORMATETC;
typedef struct tagDVTARGETDEVICE {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
    BYTE tdData[1];
} DVTARGETDEVICE;
typedef CLIPFORMAT *LPCLIPFORMAT;
typedef struct tagFORMATETC {
    CLIPFORMAT cfFormat;
    DVTARGETDEVICE *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
} FORMATETC;
typedef struct tagFORMATETC *LPFORMATETC;
extern const GUID IID_IEnumFORMATETC ;
typedef struct IEnumFORMATETCVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IEnumFORMATETC* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IEnumFORMATETC* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IEnumFORMATETC* This);
    HRESULT (__attribute__((__stdcall__)) *Next)(
        IEnumFORMATETC* This,
        ULONG celt,
        FORMATETC *rgelt,
        ULONG *pceltFetched);
    HRESULT (__attribute__((__stdcall__)) *Skip)(
        IEnumFORMATETC* This,
        ULONG celt);
    HRESULT (__attribute__((__stdcall__)) *Reset)(
        IEnumFORMATETC* This);
    HRESULT (__attribute__((__stdcall__)) *Clone)(
        IEnumFORMATETC* This,
        IEnumFORMATETC **ppenum);
   
} IEnumFORMATETCVtbl;
struct IEnumFORMATETC {
    IEnumFORMATETCVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_RemoteNext_Proxy(
    IEnumFORMATETC* This,
    ULONG celt,
    FORMATETC *rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumFORMATETC_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_Skip_Proxy(
    IEnumFORMATETC* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumFORMATETC_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_Reset_Proxy(
    IEnumFORMATETC* This);
void __attribute__((__stdcall__)) IEnumFORMATETC_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_Clone_Proxy(
    IEnumFORMATETC* This,
    IEnumFORMATETC **ppenum);
void __attribute__((__stdcall__)) IEnumFORMATETC_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_Next_Proxy(
    IEnumFORMATETC* This,
    ULONG celt,
    FORMATETC *rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_Next_Stub(
    IEnumFORMATETC* This,
    ULONG celt,
    FORMATETC *rgelt,
    ULONG *pceltFetched);
typedef IEnumSTATDATA *LPENUMSTATDATA;
typedef enum tagADVF {
    ADVF_NODATA = 1,
    ADVF_PRIMEFIRST = 2,
    ADVF_ONLYONCE = 4,
    ADVF_DATAONSTOP = 64,
    ADVFCACHE_NOHANDLER = 8,
    ADVFCACHE_FORCEBUILTIN = 16,
    ADVFCACHE_ONSAVE = 32
} ADVF;
typedef struct tagSTATDATA {
    FORMATETC formatetc;
    DWORD advf;
    IAdviseSink *pAdvSink;
    DWORD dwConnection;
} STATDATA;
typedef struct tagSTATDATA *LPSTATDATA;
extern const GUID IID_IEnumSTATDATA ;
typedef struct IEnumSTATDATAVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IEnumSTATDATA* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IEnumSTATDATA* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IEnumSTATDATA* This);
    HRESULT (__attribute__((__stdcall__)) *Next)(
        IEnumSTATDATA* This,
        ULONG celt,
        STATDATA *rgelt,
        ULONG *pceltFetched);
    HRESULT (__attribute__((__stdcall__)) *Skip)(
        IEnumSTATDATA* This,
        ULONG celt);
    HRESULT (__attribute__((__stdcall__)) *Reset)(
        IEnumSTATDATA* This);
    HRESULT (__attribute__((__stdcall__)) *Clone)(
        IEnumSTATDATA* This,
        IEnumSTATDATA **ppenum);
   
} IEnumSTATDATAVtbl;
struct IEnumSTATDATA {
    IEnumSTATDATAVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_RemoteNext_Proxy(
    IEnumSTATDATA* This,
    ULONG celt,
    STATDATA *rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumSTATDATA_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_Skip_Proxy(
    IEnumSTATDATA* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumSTATDATA_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_Reset_Proxy(
    IEnumSTATDATA* This);
void __attribute__((__stdcall__)) IEnumSTATDATA_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_Clone_Proxy(
    IEnumSTATDATA* This,
    IEnumSTATDATA **ppenum);
void __attribute__((__stdcall__)) IEnumSTATDATA_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_Next_Proxy(
    IEnumSTATDATA* This,
    ULONG celt,
    STATDATA *rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_Next_Stub(
    IEnumSTATDATA* This,
    ULONG celt,
    STATDATA *rgelt,
    ULONG *pceltFetched);
typedef IAdviseSink *LPADVISESINK;
typedef enum tagTYMED {
    TYMED_HGLOBAL = 1,
    TYMED_FILE = 2,
    TYMED_ISTREAM = 4,
    TYMED_ISTORAGE = 8,
    TYMED_GDI = 16,
    TYMED_MFPICT = 32,
    TYMED_ENHMF = 64,
    TYMED_NULL = 0
} TYMED;
typedef struct tagRemSTGMEDIUM {
    DWORD tymed;
    DWORD dwHandleType;
    ULONG pData;
    ULONG pUnkForRelease;
    ULONG cbData;
    byte data[1];
} RemSTGMEDIUM;
typedef struct tagSTGMEDIUM {
    DWORD tymed;
    union {
        HBITMAP hBitmap;
        HMETAFILEPICT hMetaFilePict;
        HENHMETAFILE hEnhMetaFile;
        HGLOBAL hGlobal;
        LPOLESTR lpszFileName;
        IStream *pstm;
        IStorage *pstg;
    } ;
    IUnknown *pUnkForRelease;
} uSTGMEDIUM;
typedef struct _GDI_OBJECT {
    DWORD ObjectType;
    union {
        wireHBITMAP hBitmap;
        wireHPALETTE hPalette;
        wireHGLOBAL hGeneric;
    } u;
} GDI_OBJECT;
typedef struct _userSTGMEDIUM {
    struct {
        DWORD tymed;
        union {
            wireHMETAFILEPICT hMetaFilePict;
            wireHENHMETAFILE hHEnhMetaFile;
            GDI_OBJECT *hGdiHandle;
            wireHGLOBAL hGlobal;
            LPOLESTR lpszFileName;
            BYTE_BLOB *pstm;
            BYTE_BLOB *pstg;
        } u;
    } ;
    IUnknown *pUnkForRelease;
} userSTGMEDIUM;
typedef userSTGMEDIUM *wireSTGMEDIUM;
typedef uSTGMEDIUM STGMEDIUM;
typedef userSTGMEDIUM *wireASYNC_STGMEDIUM;
typedef STGMEDIUM ASYNC_STGMEDIUM;
typedef STGMEDIUM *LPSTGMEDIUM;
typedef struct _userFLAG_STGMEDIUM {
    LONG ContextFlags;
    LONG fPassOwnership;
    userSTGMEDIUM Stgmed;
} userFLAG_STGMEDIUM;
typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;
typedef struct _FLAG_STGMEDIUM {
    LONG ContextFlags;
    LONG fPassOwnership;
    STGMEDIUM Stgmed;
} FLAG_STGMEDIUM;
extern const GUID IID_IAdviseSink ;
typedef struct IAdviseSinkVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IAdviseSink* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IAdviseSink* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IAdviseSink* This);
    void (__attribute__((__stdcall__)) *OnDataChange)(
        IAdviseSink* This,
        FORMATETC *pFormatetc,
        STGMEDIUM *pStgmed);
    void (__attribute__((__stdcall__)) *OnViewChange)(
        IAdviseSink* This,
        DWORD dwAspect,
        LONG lindex);
    void (__attribute__((__stdcall__)) *OnRename)(
        IAdviseSink* This,
        IMoniker *pmk);
    void (__attribute__((__stdcall__)) *OnSave)(
        IAdviseSink* This);
    void (__attribute__((__stdcall__)) *OnClose)(
        IAdviseSink* This);
   
} IAdviseSinkVtbl;
struct IAdviseSink {
    IAdviseSinkVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IAdviseSink_RemoteOnDataChange_Proxy(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    ASYNC_STGMEDIUM *pStgmed);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnDataChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAdviseSink_RemoteOnViewChange_Proxy(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnViewChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAdviseSink_RemoteOnRename_Proxy(
    IAdviseSink* This,
    IMoniker *pmk);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnRename_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAdviseSink_RemoteOnSave_Proxy(
    IAdviseSink* This);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnSave_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAdviseSink_RemoteOnClose_Proxy(
    IAdviseSink* This);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnClose_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IAdviseSink_OnDataChange_Proxy(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    STGMEDIUM *pStgmed);
HRESULT __attribute__((__stdcall__)) IAdviseSink_OnDataChange_Stub(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    ASYNC_STGMEDIUM *pStgmed);
void __attribute__((__stdcall__)) IAdviseSink_OnViewChange_Proxy(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
HRESULT __attribute__((__stdcall__)) IAdviseSink_OnViewChange_Stub(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
void __attribute__((__stdcall__)) IAdviseSink_OnRename_Proxy(
    IAdviseSink* This,
    IMoniker *pmk);
HRESULT __attribute__((__stdcall__)) IAdviseSink_OnRename_Stub(
    IAdviseSink* This,
    IMoniker *pmk);
void __attribute__((__stdcall__)) IAdviseSink_OnSave_Proxy(
    IAdviseSink* This);
HRESULT __attribute__((__stdcall__)) IAdviseSink_OnSave_Stub(
    IAdviseSink* This);
void __attribute__((__stdcall__)) IAdviseSink_OnClose_Proxy(
    IAdviseSink* This);
HRESULT __attribute__((__stdcall__)) IAdviseSink_OnClose_Stub(
    IAdviseSink* This);
typedef IAdviseSink2 *LPADVISESINK2;
extern const GUID IID_IAdviseSink2 ;
typedef struct IAdviseSink2Vtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IAdviseSink2* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IAdviseSink2* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IAdviseSink2* This);
    void (__attribute__((__stdcall__)) *OnDataChange)(
        IAdviseSink2* This,
        FORMATETC *pFormatetc,
        STGMEDIUM *pStgmed);
    void (__attribute__((__stdcall__)) *OnViewChange)(
        IAdviseSink2* This,
        DWORD dwAspect,
        LONG lindex);
    void (__attribute__((__stdcall__)) *OnRename)(
        IAdviseSink2* This,
        IMoniker *pmk);
    void (__attribute__((__stdcall__)) *OnSave)(
        IAdviseSink2* This);
    void (__attribute__((__stdcall__)) *OnClose)(
        IAdviseSink2* This);
    void (__attribute__((__stdcall__)) *OnLinkSrcChange)(
        IAdviseSink2* This,
        IMoniker *pmk);
   
} IAdviseSink2Vtbl;
struct IAdviseSink2 {
    IAdviseSink2Vtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
    IAdviseSink2* This,
    IMoniker *pmk);
void __attribute__((__stdcall__)) IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IAdviseSink2_OnLinkSrcChange_Proxy(
    IAdviseSink2* This,
    IMoniker *pmk);
HRESULT __attribute__((__stdcall__)) IAdviseSink2_OnLinkSrcChange_Stub(
    IAdviseSink2* This,
    IMoniker *pmk);
typedef IDataObject *LPDATAOBJECT;
typedef enum tagDATADIR {
    DATADIR_GET = 1,
    DATADIR_SET = 2
} DATADIR;
extern const GUID IID_IDataObject ;
typedef struct IDataObjectVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IDataObject* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IDataObject* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IDataObject* This);
    HRESULT (__attribute__((__stdcall__)) *GetData)(
        IDataObject* This,
        FORMATETC *pformatetcIn,
        STGMEDIUM *pmedium);
    HRESULT (__attribute__((__stdcall__)) *GetDataHere)(
        IDataObject* This,
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium);
    HRESULT (__attribute__((__stdcall__)) *QueryGetData)(
        IDataObject* This,
        FORMATETC *pformatetc);
    HRESULT (__attribute__((__stdcall__)) *GetCanonicalFormatEtc)(
        IDataObject* This,
        FORMATETC *pformatectIn,
        FORMATETC *pformatetcOut);
    HRESULT (__attribute__((__stdcall__)) *SetData)(
        IDataObject* This,
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium,
        BOOL fRelease);
    HRESULT (__attribute__((__stdcall__)) *EnumFormatEtc)(
        IDataObject* This,
        DWORD dwDirection,
        IEnumFORMATETC **ppenumFormatEtc);
    HRESULT (__attribute__((__stdcall__)) *DAdvise)(
        IDataObject* This,
        FORMATETC *pformatetc,
        DWORD advf,
        IAdviseSink *pAdvSink,
        DWORD *pdwConnection);
    HRESULT (__attribute__((__stdcall__)) *DUnadvise)(
        IDataObject* This,
        DWORD dwConnection);
    HRESULT (__attribute__((__stdcall__)) *EnumDAdvise)(
        IDataObject* This,
        IEnumSTATDATA **ppenumAdvise);
   
} IDataObjectVtbl;
struct IDataObject {
    IDataObjectVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IDataObject_RemoteGetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetcIn,
    STGMEDIUM *pRemoteMedium);
void __attribute__((__stdcall__)) IDataObject_RemoteGetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_RemoteGetDataHere_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pRemoteMedium);
void __attribute__((__stdcall__)) IDataObject_RemoteGetDataHere_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_QueryGetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc);
void __attribute__((__stdcall__)) IDataObject_QueryGetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_GetCanonicalFormatEtc_Proxy(
    IDataObject* This,
    FORMATETC *pformatectIn,
    FORMATETC *pformatetcOut);
void __attribute__((__stdcall__)) IDataObject_GetCanonicalFormatEtc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_RemoteSetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    FLAG_STGMEDIUM *pmedium,
    BOOL fRelease);
void __attribute__((__stdcall__)) IDataObject_RemoteSetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_EnumFormatEtc_Proxy(
    IDataObject* This,
    DWORD dwDirection,
    IEnumFORMATETC **ppenumFormatEtc);
void __attribute__((__stdcall__)) IDataObject_EnumFormatEtc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_DAdvise_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    DWORD advf,
    IAdviseSink *pAdvSink,
    DWORD *pdwConnection);
void __attribute__((__stdcall__)) IDataObject_DAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_DUnadvise_Proxy(
    IDataObject* This,
    DWORD dwConnection);
void __attribute__((__stdcall__)) IDataObject_DUnadvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_EnumDAdvise_Proxy(
    IDataObject* This,
    IEnumSTATDATA **ppenumAdvise);
void __attribute__((__stdcall__)) IDataObject_EnumDAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_GetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetcIn,
    STGMEDIUM *pmedium);
HRESULT __attribute__((__stdcall__)) IDataObject_GetData_Stub(
    IDataObject* This,
    FORMATETC *pformatetcIn,
    STGMEDIUM *pRemoteMedium);
HRESULT __attribute__((__stdcall__)) IDataObject_GetDataHere_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pmedium);
HRESULT __attribute__((__stdcall__)) IDataObject_GetDataHere_Stub(
    IDataObject* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pRemoteMedium);
HRESULT __attribute__((__stdcall__)) IDataObject_SetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pmedium,
    BOOL fRelease);
HRESULT __attribute__((__stdcall__)) IDataObject_SetData_Stub(
    IDataObject* This,
    FORMATETC *pformatetc,
    FLAG_STGMEDIUM *pmedium,
    BOOL fRelease);
typedef IDataAdviseHolder *LPDATAADVISEHOLDER;
extern const GUID IID_IDataAdviseHolder ;
typedef struct IDataAdviseHolderVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IDataAdviseHolder* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IDataAdviseHolder* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IDataAdviseHolder* This);
    HRESULT (__attribute__((__stdcall__)) *Advise)(
        IDataAdviseHolder* This,
        IDataObject *pDataObject,
        FORMATETC *pFetc,
        DWORD advf,
        IAdviseSink *pAdvise,
        DWORD *pdwConnection);
    HRESULT (__attribute__((__stdcall__)) *Unadvise)(
        IDataAdviseHolder* This,
        DWORD dwConnection);
    HRESULT (__attribute__((__stdcall__)) *EnumAdvise)(
        IDataAdviseHolder* This,
        IEnumSTATDATA **ppenumAdvise);
    HRESULT (__attribute__((__stdcall__)) *SendOnDataChange)(
        IDataAdviseHolder* This,
        IDataObject *pDataObject,
        DWORD dwReserved,
        DWORD advf);
   
} IDataAdviseHolderVtbl;
struct IDataAdviseHolder {
    IDataAdviseHolderVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IDataAdviseHolder_Advise_Proxy(
    IDataAdviseHolder* This,
    IDataObject *pDataObject,
    FORMATETC *pFetc,
    DWORD advf,
    IAdviseSink *pAdvise,
    DWORD *pdwConnection);
void __attribute__((__stdcall__)) IDataAdviseHolder_Advise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataAdviseHolder_Unadvise_Proxy(
    IDataAdviseHolder* This,
    DWORD dwConnection);
void __attribute__((__stdcall__)) IDataAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataAdviseHolder_EnumAdvise_Proxy(
    IDataAdviseHolder* This,
    IEnumSTATDATA **ppenumAdvise);
void __attribute__((__stdcall__)) IDataAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataAdviseHolder_SendOnDataChange_Proxy(
    IDataAdviseHolder* This,
    IDataObject *pDataObject,
    DWORD dwReserved,
    DWORD advf);
void __attribute__((__stdcall__)) IDataAdviseHolder_SendOnDataChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IMessageFilter *LPMESSAGEFILTER;
typedef enum tagCALLTYPE {
    CALLTYPE_TOPLEVEL = 1,
    CALLTYPE_NESTED = 2,
    CALLTYPE_ASYNC = 3,
    CALLTYPE_TOPLEVEL_CALLPENDING = 4,
    CALLTYPE_ASYNC_CALLPENDING = 5
} CALLTYPE;
typedef enum tagSERVERCALL {
    SERVERCALL_ISHANDLED = 0,
    SERVERCALL_REJECTED = 1,
    SERVERCALL_RETRYLATER = 2
} SERVERCALL;
typedef enum tagPENDINGTYPE {
    PENDINGTYPE_TOPLEVEL = 1,
    PENDINGTYPE_NESTED = 2
} PENDINGTYPE;
typedef enum tagPENDINGMSG {
    PENDINGMSG_CANCELCALL = 0,
    PENDINGMSG_WAITNOPROCESS = 1,
    PENDINGMSG_WAITDEFPROCESS = 2
} PENDINGMSG;
typedef struct tagINTERFACEINFO {
    IUnknown *pUnk;
    IID iid;
    WORD wMethod;
} INTERFACEINFO;
typedef struct tagINTERFACEINFO *LPINTERFACEINFO;
extern const GUID IID_IMessageFilter ;
typedef struct IMessageFilterVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IMessageFilter* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IMessageFilter* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IMessageFilter* This);
    DWORD (__attribute__((__stdcall__)) *HandleInComingCall)(
        IMessageFilter* This,
        DWORD dwCallType,
        HTASK htaskCaller,
        DWORD dwTickCount,
        LPINTERFACEINFO lpInterfaceInfo);
    DWORD (__attribute__((__stdcall__)) *RetryRejectedCall)(
        IMessageFilter* This,
        HTASK htaskCallee,
        DWORD dwTickCount,
        DWORD dwRejectType);
    DWORD (__attribute__((__stdcall__)) *MessagePending)(
        IMessageFilter* This,
        HTASK htaskCallee,
        DWORD dwTickCount,
        DWORD dwPendingType);
   
} IMessageFilterVtbl;
struct IMessageFilter {
    IMessageFilterVtbl* lpVtbl;
};
DWORD __attribute__((__stdcall__)) IMessageFilter_HandleInComingCall_Proxy(
    IMessageFilter* This,
    DWORD dwCallType,
    HTASK htaskCaller,
    DWORD dwTickCount,
    LPINTERFACEINFO lpInterfaceInfo);
void __attribute__((__stdcall__)) IMessageFilter_HandleInComingCall_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
DWORD __attribute__((__stdcall__)) IMessageFilter_RetryRejectedCall_Proxy(
    IMessageFilter* This,
    HTASK htaskCallee,
    DWORD dwTickCount,
    DWORD dwRejectType);
void __attribute__((__stdcall__)) IMessageFilter_RetryRejectedCall_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
DWORD __attribute__((__stdcall__)) IMessageFilter_MessagePending_Proxy(
    IMessageFilter* This,
    HTASK htaskCallee,
    DWORD dwTickCount,
    DWORD dwPendingType);
void __attribute__((__stdcall__)) IMessageFilter_MessagePending_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IRpcChannelBuffer *LPRPCCHANNELBUFFER;
typedef ULONG RPCOLEDATAREP;
typedef struct tagRPCOLEMESSAGE {
    void *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void * reserved2[5];
    ULONG rpcFlags;
} RPCOLEMESSAGE;
typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;
extern const GUID IID_IRpcChannelBuffer ;
typedef struct IRpcChannelBufferVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IRpcChannelBuffer* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IRpcChannelBuffer* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IRpcChannelBuffer* This);
    HRESULT (__attribute__((__stdcall__)) *GetBuffer)(
        IRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMessage,
        const IID* const riid);
    HRESULT (__attribute__((__stdcall__)) *SendReceive)(
        IRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMessage,
        ULONG *pStatus);
    HRESULT (__attribute__((__stdcall__)) *FreeBuffer)(
        IRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMessage);
    HRESULT (__attribute__((__stdcall__)) *GetDestCtx)(
        IRpcChannelBuffer* This,
        DWORD *pdwDestContext,
        void **ppvDestContext);
    HRESULT (__attribute__((__stdcall__)) *IsConnected)(
        IRpcChannelBuffer* This);
   
} IRpcChannelBufferVtbl;
struct IRpcChannelBuffer {
    IRpcChannelBufferVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer_GetBuffer_Proxy(
    IRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMessage,
    const IID* const riid);
void __attribute__((__stdcall__)) IRpcChannelBuffer_GetBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer_SendReceive_Proxy(
    IRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMessage,
    ULONG *pStatus);
void __attribute__((__stdcall__)) IRpcChannelBuffer_SendReceive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer_FreeBuffer_Proxy(
    IRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMessage);
void __attribute__((__stdcall__)) IRpcChannelBuffer_FreeBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer_GetDestCtx_Proxy(
    IRpcChannelBuffer* This,
    DWORD *pdwDestContext,
    void **ppvDestContext);
void __attribute__((__stdcall__)) IRpcChannelBuffer_GetDestCtx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer_IsConnected_Proxy(
    IRpcChannelBuffer* This);
void __attribute__((__stdcall__)) IRpcChannelBuffer_IsConnected_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IRpcChannelBuffer2 *LPRPCCHANNELBUFFER2;
extern const GUID IID_IRpcChannelBuffer2 ;
typedef struct IRpcChannelBuffer2Vtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IRpcChannelBuffer2* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IRpcChannelBuffer2* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IRpcChannelBuffer2* This);
    HRESULT (__attribute__((__stdcall__)) *GetBuffer)(
        IRpcChannelBuffer2* This,
        RPCOLEMESSAGE *pMessage,
        const IID* const riid);
    HRESULT (__attribute__((__stdcall__)) *SendReceive)(
        IRpcChannelBuffer2* This,
        RPCOLEMESSAGE *pMessage,
        ULONG *pStatus);
    HRESULT (__attribute__((__stdcall__)) *FreeBuffer)(
        IRpcChannelBuffer2* This,
        RPCOLEMESSAGE *pMessage);
    HRESULT (__attribute__((__stdcall__)) *GetDestCtx)(
        IRpcChannelBuffer2* This,
        DWORD *pdwDestContext,
        void **ppvDestContext);
    HRESULT (__attribute__((__stdcall__)) *IsConnected)(
        IRpcChannelBuffer2* This);
    HRESULT (__attribute__((__stdcall__)) *GetProtocolVersion)(
        IRpcChannelBuffer2* This,
        DWORD *pdwVersion);
   
} IRpcChannelBuffer2Vtbl;
struct IRpcChannelBuffer2 {
    IRpcChannelBuffer2Vtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer2_GetProtocolVersion_Proxy(
    IRpcChannelBuffer2* This,
    DWORD *pdwVersion);
void __attribute__((__stdcall__)) IRpcChannelBuffer2_GetProtocolVersion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IRpcChannelBuffer3 *LPRPCCHANNELBUFFER3;
extern const GUID IID_IRpcChannelBuffer3 ;
typedef struct IRpcChannelBuffer3Vtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IRpcChannelBuffer3* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IRpcChannelBuffer3* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IRpcChannelBuffer3* This);
    HRESULT (__attribute__((__stdcall__)) *GetBuffer)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMessage,
        const IID* const riid);
    HRESULT (__attribute__((__stdcall__)) *SendReceive)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMessage,
        ULONG *pStatus);
    HRESULT (__attribute__((__stdcall__)) *FreeBuffer)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMessage);
    HRESULT (__attribute__((__stdcall__)) *GetDestCtx)(
        IRpcChannelBuffer3* This,
        DWORD *pdwDestContext,
        void **ppvDestContext);
    HRESULT (__attribute__((__stdcall__)) *IsConnected)(
        IRpcChannelBuffer3* This);
    HRESULT (__attribute__((__stdcall__)) *GetProtocolVersion)(
        IRpcChannelBuffer3* This,
        DWORD *pdwVersion);
    HRESULT (__attribute__((__stdcall__)) *Send)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMsg,
        ULONG *pulStatus);
    HRESULT (__attribute__((__stdcall__)) *Receive)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMsg,
        ULONG ulSize,
        ULONG *pulStatus);
    HRESULT (__attribute__((__stdcall__)) *Cancel)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMsg);
    HRESULT (__attribute__((__stdcall__)) *GetCallContext)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMsg,
        const IID* const riid,
        void **pInterface);
    HRESULT (__attribute__((__stdcall__)) *GetDestCtxEx)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMsg,
        DWORD *pdwDestContext,
        void **ppvDestContext);
    HRESULT (__attribute__((__stdcall__)) *GetState)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMsg,
        DWORD *pState);
    HRESULT (__attribute__((__stdcall__)) *RegisterAsync)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMsg,
        IAsyncManager *pAsyncMgr);
   
} IRpcChannelBuffer3Vtbl;
struct IRpcChannelBuffer3 {
    IRpcChannelBuffer3Vtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer3_Send_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    ULONG *pulStatus);
void __attribute__((__stdcall__)) IRpcChannelBuffer3_Send_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer3_Receive_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    ULONG ulSize,
    ULONG *pulStatus);
void __attribute__((__stdcall__)) IRpcChannelBuffer3_Receive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer3_Cancel_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg);
void __attribute__((__stdcall__)) IRpcChannelBuffer3_Cancel_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer3_GetCallContext_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    const IID* const riid,
    void **pInterface);
void __attribute__((__stdcall__)) IRpcChannelBuffer3_GetCallContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer3_GetDestCtxEx_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    DWORD *pdwDestContext,
    void **ppvDestContext);
void __attribute__((__stdcall__)) IRpcChannelBuffer3_GetDestCtxEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer3_GetState_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    DWORD *pState);
void __attribute__((__stdcall__)) IRpcChannelBuffer3_GetState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer3_RegisterAsync_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    IAsyncManager *pAsyncMgr);
void __attribute__((__stdcall__)) IRpcChannelBuffer3_RegisterAsync_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IAsyncRpcChannelBuffer ;
typedef struct IAsyncRpcChannelBufferVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IAsyncRpcChannelBuffer* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IAsyncRpcChannelBuffer* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IAsyncRpcChannelBuffer* This);
    HRESULT (__attribute__((__stdcall__)) *GetBuffer)(
        IAsyncRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMessage,
        const IID* const riid);
    HRESULT (__attribute__((__stdcall__)) *SendReceive)(
        IAsyncRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMessage,
        ULONG *pStatus);
    HRESULT (__attribute__((__stdcall__)) *FreeBuffer)(
        IAsyncRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMessage);
    HRESULT (__attribute__((__stdcall__)) *GetDestCtx)(
        IAsyncRpcChannelBuffer* This,
        DWORD *pdwDestContext,
        void **ppvDestContext);
    HRESULT (__attribute__((__stdcall__)) *IsConnected)(
        IAsyncRpcChannelBuffer* This);
    HRESULT (__attribute__((__stdcall__)) *GetProtocolVersion)(
        IAsyncRpcChannelBuffer* This,
        DWORD *pdwVersion);
    HRESULT (__attribute__((__stdcall__)) *Send)(
        IAsyncRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMsg,
        ISynchronize *pSync,
        ULONG *pulStatus);
    HRESULT (__attribute__((__stdcall__)) *Receive)(
        IAsyncRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMsg,
        ULONG *pulStatus);
    HRESULT (__attribute__((__stdcall__)) *GetDestCtxEx)(
        IAsyncRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMsg,
        DWORD *pdwDestContext,
        void **ppvDestContext);
   
} IAsyncRpcChannelBufferVtbl;
struct IAsyncRpcChannelBuffer {
    IAsyncRpcChannelBufferVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IAsyncRpcChannelBuffer_Send_Proxy(
    IAsyncRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMsg,
    ISynchronize *pSync,
    ULONG *pulStatus);
void __attribute__((__stdcall__)) IAsyncRpcChannelBuffer_Send_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAsyncRpcChannelBuffer_Receive_Proxy(
    IAsyncRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMsg,
    ULONG *pulStatus);
void __attribute__((__stdcall__)) IAsyncRpcChannelBuffer_Receive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAsyncRpcChannelBuffer_GetDestCtxEx_Proxy(
    IAsyncRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMsg,
    DWORD *pdwDestContext,
    void **ppvDestContext);
void __attribute__((__stdcall__)) IAsyncRpcChannelBuffer_GetDestCtxEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IRpcSyntaxNegotiate ;
typedef struct IRpcSyntaxNegotiateVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IRpcSyntaxNegotiate* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IRpcSyntaxNegotiate* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IRpcSyntaxNegotiate* This);
    HRESULT (__attribute__((__stdcall__)) *NegotiateSyntax)(
        IRpcSyntaxNegotiate* This,
        RPCOLEMESSAGE *pMsg);
   
} IRpcSyntaxNegotiateVtbl;
struct IRpcSyntaxNegotiate {
    IRpcSyntaxNegotiateVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IRpcSyntaxNegotiate_NegotiateSyntax_Proxy(
    IRpcSyntaxNegotiate* This,
    RPCOLEMESSAGE *pMsg);
void __attribute__((__stdcall__)) IRpcSyntaxNegotiate_NegotiateSyntax_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IRpcProxyBuffer *LPRPCPROXYBUFFER;
extern const GUID IID_IRpcProxyBuffer ;
typedef struct IRpcProxyBufferVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IRpcProxyBuffer* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IRpcProxyBuffer* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IRpcProxyBuffer* This);
    HRESULT (__attribute__((__stdcall__)) *Connect)(
        IRpcProxyBuffer* This,
        IRpcChannelBuffer *pRpcChannelBuffer);
    void (__attribute__((__stdcall__)) *Disconnect)(
        IRpcProxyBuffer* This);
   
} IRpcProxyBufferVtbl;
struct IRpcProxyBuffer {
    IRpcProxyBufferVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IRpcProxyBuffer_Connect_Proxy(
    IRpcProxyBuffer* This,
    IRpcChannelBuffer *pRpcChannelBuffer);
void __attribute__((__stdcall__)) IRpcProxyBuffer_Connect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IRpcProxyBuffer_Disconnect_Proxy(
    IRpcProxyBuffer* This);
void __attribute__((__stdcall__)) IRpcProxyBuffer_Disconnect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IRpcStubBuffer *LPRPCSTUBBUFFER;
extern const GUID IID_IRpcStubBuffer ;
typedef struct IRpcStubBufferVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IRpcStubBuffer* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IRpcStubBuffer* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IRpcStubBuffer* This);
    HRESULT (__attribute__((__stdcall__)) *Connect)(
        IRpcStubBuffer* This,
        IUnknown *pUnkServer);
    void (__attribute__((__stdcall__)) *Disconnect)(
        IRpcStubBuffer* This);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IRpcStubBuffer* This,
        RPCOLEMESSAGE *_prpcmsg,
        IRpcChannelBuffer *_pRpcChannelBuffer);
    IRpcStubBuffer * (__attribute__((__stdcall__)) *IsIIDSupported)(
        IRpcStubBuffer* This,
        const IID* const riid);
    ULONG (__attribute__((__stdcall__)) *CountRefs)(
        IRpcStubBuffer* This);
    HRESULT (__attribute__((__stdcall__)) *DebugServerQueryInterface)(
        IRpcStubBuffer* This,
        void **ppv);
    void (__attribute__((__stdcall__)) *DebugServerRelease)(
        IRpcStubBuffer* This,
        void *pv);
   
} IRpcStubBufferVtbl;
struct IRpcStubBuffer {
    IRpcStubBufferVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IRpcStubBuffer_Connect_Proxy(
    IRpcStubBuffer* This,
    IUnknown *pUnkServer);
void __attribute__((__stdcall__)) IRpcStubBuffer_Connect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IRpcStubBuffer_Disconnect_Proxy(
    IRpcStubBuffer* This);
void __attribute__((__stdcall__)) IRpcStubBuffer_Disconnect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcStubBuffer_Invoke_Proxy(
    IRpcStubBuffer* This,
    RPCOLEMESSAGE *_prpcmsg,
    IRpcChannelBuffer *_pRpcChannelBuffer);
void __attribute__((__stdcall__)) IRpcStubBuffer_Invoke_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
IRpcStubBuffer * __attribute__((__stdcall__)) IRpcStubBuffer_IsIIDSupported_Proxy(
    IRpcStubBuffer* This,
    const IID* const riid);
void __attribute__((__stdcall__)) IRpcStubBuffer_IsIIDSupported_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG __attribute__((__stdcall__)) IRpcStubBuffer_CountRefs_Proxy(
    IRpcStubBuffer* This);
void __attribute__((__stdcall__)) IRpcStubBuffer_CountRefs_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcStubBuffer_DebugServerQueryInterface_Proxy(
    IRpcStubBuffer* This,
    void **ppv);
void __attribute__((__stdcall__)) IRpcStubBuffer_DebugServerQueryInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IRpcStubBuffer_DebugServerRelease_Proxy(
    IRpcStubBuffer* This,
    void *pv);
void __attribute__((__stdcall__)) IRpcStubBuffer_DebugServerRelease_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IPSFactoryBuffer *LPPSFACTORYBUFFER;
extern const GUID IID_IPSFactoryBuffer ;
typedef struct IPSFactoryBufferVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IPSFactoryBuffer* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IPSFactoryBuffer* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IPSFactoryBuffer* This);
    HRESULT (__attribute__((__stdcall__)) *CreateProxy)(
        IPSFactoryBuffer* This,
        IUnknown *pUnkOuter,
        const IID* const riid,
        IRpcProxyBuffer **ppProxy,
        void **ppv);
    HRESULT (__attribute__((__stdcall__)) *CreateStub)(
        IPSFactoryBuffer* This,
        const IID* const riid,
        IUnknown *pUnkServer,
        IRpcStubBuffer **ppStub);
   
} IPSFactoryBufferVtbl;
struct IPSFactoryBuffer {
    IPSFactoryBufferVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IPSFactoryBuffer_CreateProxy_Proxy(
    IPSFactoryBuffer* This,
    IUnknown *pUnkOuter,
    const IID* const riid,
    IRpcProxyBuffer **ppProxy,
    void **ppv);
void __attribute__((__stdcall__)) IPSFactoryBuffer_CreateProxy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPSFactoryBuffer_CreateStub_Proxy(
    IPSFactoryBuffer* This,
    const IID* const riid,
    IUnknown *pUnkServer,
    IRpcStubBuffer **ppStub);
void __attribute__((__stdcall__)) IPSFactoryBuffer_CreateStub_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IChannelHook *LPCHANNELHOOK;
typedef struct SChannelHookCallInfo {
    IID iid;
    DWORD cbSize;
    GUID uCausality;
    DWORD dwServerPid;
    DWORD iMethod;
    void *pObject;
} SChannelHookCallInfo;
extern const GUID IID_IChannelHook ;
typedef struct IChannelHookVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IChannelHook* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IChannelHook* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IChannelHook* This);
    void (__attribute__((__stdcall__)) *ClientGetSize)(
        IChannelHook* This,
        const GUID* const uExtent,
        const IID* const riid,
        ULONG *pDataSize);
    void (__attribute__((__stdcall__)) *ClientFillBuffer)(
        IChannelHook* This,
        const GUID* const uExtent,
        const IID* const riid,
        ULONG *pDataSize,
        void *pDataBuffer);
    void (__attribute__((__stdcall__)) *ClientNotify)(
        IChannelHook* This,
        const GUID* const uExtent,
        const IID* const riid,
        ULONG cbDataSize,
        void *pDataBuffer,
        DWORD lDataRep,
        HRESULT hrFault);
    void (__attribute__((__stdcall__)) *ServerNotify)(
        IChannelHook* This,
        const GUID* const uExtent,
        const IID* const riid,
        ULONG cbDataSize,
        void *pDataBuffer,
        DWORD lDataRep);
    void (__attribute__((__stdcall__)) *ServerGetSize)(
        IChannelHook* This,
        const GUID* const uExtent,
        const IID* const riid,
        HRESULT hrFault,
        ULONG *pDataSize);
    void (__attribute__((__stdcall__)) *ServerFillBuffer)(
        IChannelHook* This,
        const GUID* const uExtent,
        const IID* const riid,
        ULONG *pDataSize,
        void *pDataBuffer,
        HRESULT hrFault);
   
} IChannelHookVtbl;
struct IChannelHook {
    IChannelHookVtbl* lpVtbl;
};
void __attribute__((__stdcall__)) IChannelHook_ClientGetSize_Proxy(
    IChannelHook* This,
    const GUID* const uExtent,
    const IID* const riid,
    ULONG *pDataSize);
void __attribute__((__stdcall__)) IChannelHook_ClientGetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IChannelHook_ClientFillBuffer_Proxy(
    IChannelHook* This,
    const GUID* const uExtent,
    const IID* const riid,
    ULONG *pDataSize,
    void *pDataBuffer);
void __attribute__((__stdcall__)) IChannelHook_ClientFillBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IChannelHook_ClientNotify_Proxy(
    IChannelHook* This,
    const GUID* const uExtent,
    const IID* const riid,
    ULONG cbDataSize,
    void *pDataBuffer,
    DWORD lDataRep,
    HRESULT hrFault);
void __attribute__((__stdcall__)) IChannelHook_ClientNotify_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IChannelHook_ServerNotify_Proxy(
    IChannelHook* This,
    const GUID* const uExtent,
    const IID* const riid,
    ULONG cbDataSize,
    void *pDataBuffer,
    DWORD lDataRep);
void __attribute__((__stdcall__)) IChannelHook_ServerNotify_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IChannelHook_ServerGetSize_Proxy(
    IChannelHook* This,
    const GUID* const uExtent,
    const IID* const riid,
    HRESULT hrFault,
    ULONG *pDataSize);
void __attribute__((__stdcall__)) IChannelHook_ServerGetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IChannelHook_ServerFillBuffer_Proxy(
    IChannelHook* This,
    const GUID* const uExtent,
    const IID* const riid,
    ULONG *pDataSize,
    void *pDataBuffer,
    HRESULT hrFault);
void __attribute__((__stdcall__)) IChannelHook_ServerFillBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const FMTID FMTID_SummaryInformation;
extern const FMTID FMTID_DocSummaryInformation;
extern const FMTID FMTID_UserDefinedProperties;
typedef struct tagSOLE_AUTHENTICATION_SERVICE {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR *pPrincipalName;
    HRESULT hr;
} SOLE_AUTHENTICATION_SERVICE;
typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;
typedef struct tagSOLE_AUTHENTICATION_INFO {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    void *pAuthInfo;
} SOLE_AUTHENTICATION_INFO;
typedef struct tagSOLE_AUTHENTICATION_LIST {
    DWORD cAuthInfo;
    SOLE_AUTHENTICATION_INFO *aAuthInfo;
} SOLE_AUTHENTICATION_LIST;
typedef enum tagEOLE_AUTHENTICATION_CAPABILITIES {
    EOAC_NONE = 0x0,
    EOAC_MUTUAL_AUTH = 0x1,
    EOAC_SECURE_REFS = 0x2,
    EOAC_ACCESS_CONTROL = 0x4,
    EOAC_APPID = 0x8,
    EOAC_DYNAMIC = 0x10,
    EOAC_STATIC_CLOAKING = 0x20,
    EOAC_DYNAMIC_CLOAKING = 0x40,
    EOAC_ANY_AUTHORITY = 0x80,
    EOAC_MAKE_FULLSIC = 0x100,
    EOAC_REQUIRE_FULLSIC = 0x200,
    EOAC_AUTO_IMPERSONATE = 0x400,
    EOAC_DEFAULT = 0x800,
    EOAC_DISABLE_AAA = 0x1000,
    EOAC_NO_CUSTOM_MARSHAL = 0x2000
} EOLE_AUTHENTICATION_CAPABILITIES;
extern const GUID IID_IClientSecurity ;
typedef struct IClientSecurityVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IClientSecurity* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IClientSecurity* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IClientSecurity* This);
    HRESULT (__attribute__((__stdcall__)) *QueryBlanket)(
        IClientSecurity* This,
        IUnknown *pProxy,
        DWORD *pAuthnSvc,
        DWORD *pAuthzSvc,
        OLECHAR **pServerPrincName,
        DWORD *pAuthnLevel,
        DWORD *pImpLevel,
        void **pAuthInfo,
        DWORD *pCapabilities);
    HRESULT (__attribute__((__stdcall__)) *SetBlanket)(
        IClientSecurity* This,
        IUnknown *pProxy,
        DWORD AuthnSvc,
        DWORD AuthzSvc,
        OLECHAR *pServerPrincName,
        DWORD AuthnLevel,
        DWORD ImpLevel,
        void *pAuthInfo,
        DWORD Capabilities);
    HRESULT (__attribute__((__stdcall__)) *CopyProxy)(
        IClientSecurity* This,
        IUnknown *pProxy,
        IUnknown **ppCopy);
   
} IClientSecurityVtbl;
struct IClientSecurity {
    IClientSecurityVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IClientSecurity_QueryBlanket_Proxy(
    IClientSecurity* This,
    IUnknown *pProxy,
    DWORD *pAuthnSvc,
    DWORD *pAuthzSvc,
    OLECHAR **pServerPrincName,
    DWORD *pAuthnLevel,
    DWORD *pImpLevel,
    void **pAuthInfo,
    DWORD *pCapabilities);
void __attribute__((__stdcall__)) IClientSecurity_QueryBlanket_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IClientSecurity_SetBlanket_Proxy(
    IClientSecurity* This,
    IUnknown *pProxy,
    DWORD AuthnSvc,
    DWORD AuthzSvc,
    OLECHAR *pServerPrincName,
    DWORD AuthnLevel,
    DWORD ImpLevel,
    void *pAuthInfo,
    DWORD Capabilities);
void __attribute__((__stdcall__)) IClientSecurity_SetBlanket_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IClientSecurity_CopyProxy_Proxy(
    IClientSecurity* This,
    IUnknown *pProxy,
    IUnknown **ppCopy);
void __attribute__((__stdcall__)) IClientSecurity_CopyProxy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IServerSecurity ;
typedef struct IServerSecurityVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IServerSecurity* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IServerSecurity* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IServerSecurity* This);
    HRESULT (__attribute__((__stdcall__)) *QueryBlanket)(
        IServerSecurity* This,
        DWORD *pAuthnSvc,
        DWORD *pAuthzSvc,
        OLECHAR **pServerPrincName,
        DWORD *pAuthnLevel,
        DWORD *pImpLevel,
        void **pPrivs,
        DWORD *pCapabilities);
    HRESULT (__attribute__((__stdcall__)) *ImpersonateClient)(
        IServerSecurity* This);
    HRESULT (__attribute__((__stdcall__)) *RevertToSelf)(
        IServerSecurity* This);
    BOOL (__attribute__((__stdcall__)) *IsImpersonating)(
        IServerSecurity* This);
   
} IServerSecurityVtbl;
struct IServerSecurity {
    IServerSecurityVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IServerSecurity_QueryBlanket_Proxy(
    IServerSecurity* This,
    DWORD *pAuthnSvc,
    DWORD *pAuthzSvc,
    OLECHAR **pServerPrincName,
    DWORD *pAuthnLevel,
    DWORD *pImpLevel,
    void **pPrivs,
    DWORD *pCapabilities);
void __attribute__((__stdcall__)) IServerSecurity_QueryBlanket_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IServerSecurity_ImpersonateClient_Proxy(
    IServerSecurity* This);
void __attribute__((__stdcall__)) IServerSecurity_ImpersonateClient_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IServerSecurity_RevertToSelf_Proxy(
    IServerSecurity* This);
void __attribute__((__stdcall__)) IServerSecurity_RevertToSelf_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
BOOL __attribute__((__stdcall__)) IServerSecurity_IsImpersonating_Proxy(
    IServerSecurity* This);
void __attribute__((__stdcall__)) IServerSecurity_IsImpersonating_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IAsyncSetup ;
typedef struct IAsyncSetupVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IAsyncSetup* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IAsyncSetup* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IAsyncSetup* This);
    HRESULT (__attribute__((__stdcall__)) *GetAsyncManager)(
        IAsyncSetup* This,
        const IID* const riid,
        IUnknown *pOuter,
        DWORD dwFlags,
        IUnknown **ppInner,
        IAsyncManager **ppAsyncMgr);
   
} IAsyncSetupVtbl;
struct IAsyncSetup {
    IAsyncSetupVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IAsyncSetup_GetAsyncManager_Proxy(
    IAsyncSetup* This,
    const IID* const riid,
    IUnknown *pOuter,
    DWORD dwFlags,
    IUnknown **ppInner,
    IAsyncManager **ppAsyncMgr);
void __attribute__((__stdcall__)) IAsyncSetup_GetAsyncManager_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IDirectWriterLock ;
typedef struct IDirectWriterLockVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IDirectWriterLock* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IDirectWriterLock* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IDirectWriterLock* This);
    HRESULT (__attribute__((__stdcall__)) *WaitForWriteAccess)(
        IDirectWriterLock* This,
        DWORD dwTimeout);
    HRESULT (__attribute__((__stdcall__)) *ReleaseWriteAccess)(
        IDirectWriterLock* This);
    HRESULT (__attribute__((__stdcall__)) *HaveWriteAccess)(
        IDirectWriterLock* This);
   
} IDirectWriterLockVtbl;
struct IDirectWriterLock {
    IDirectWriterLockVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IDirectWriterLock_WaitForWriteAccess_Proxy(
    IDirectWriterLock* This,
    DWORD dwTimeout);
void __attribute__((__stdcall__)) IDirectWriterLock_WaitForWriteAccess_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDirectWriterLock_ReleaseWriteAccess_Proxy(
    IDirectWriterLock* This);
void __attribute__((__stdcall__)) IDirectWriterLock_ReleaseWriteAccess_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDirectWriterLock_HaveWriteAccess_Proxy(
    IDirectWriterLock* This);
void __attribute__((__stdcall__)) IDirectWriterLock_HaveWriteAccess_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_ISynchronize ;
typedef struct ISynchronizeVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ISynchronize* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ISynchronize* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ISynchronize* This);
    HRESULT (__attribute__((__stdcall__)) *Wait)(
        ISynchronize* This,
        DWORD dwFlags,
        DWORD dwMilliseconds);
    HRESULT (__attribute__((__stdcall__)) *Signal)(
        ISynchronize* This);
    HRESULT (__attribute__((__stdcall__)) *Reset)(
        ISynchronize* This);
   
} ISynchronizeVtbl;
struct ISynchronize {
    ISynchronizeVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ISynchronize_Wait_Proxy(
    ISynchronize* This,
    DWORD dwFlags,
    DWORD dwMilliseconds);
void __attribute__((__stdcall__)) ISynchronize_Wait_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISynchronize_Signal_Proxy(
    ISynchronize* This);
void __attribute__((__stdcall__)) ISynchronize_Signal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISynchronize_Reset_Proxy(
    ISynchronize* This);
void __attribute__((__stdcall__)) ISynchronize_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_ISynchronizeHandle ;
typedef struct ISynchronizeHandleVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ISynchronizeHandle* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ISynchronizeHandle* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ISynchronizeHandle* This);
    HRESULT (__attribute__((__stdcall__)) *GetHandle)(
        ISynchronizeHandle* This,
        HANDLE *ph);
   
} ISynchronizeHandleVtbl;
struct ISynchronizeHandle {
    ISynchronizeHandleVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ISynchronizeHandle_GetHandle_Proxy(
    ISynchronizeHandle* This,
    HANDLE *ph);
void __attribute__((__stdcall__)) ISynchronizeHandle_GetHandle_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_ISynchronizeEvent ;
typedef struct ISynchronizeEventVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ISynchronizeEvent* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ISynchronizeEvent* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ISynchronizeEvent* This);
    HRESULT (__attribute__((__stdcall__)) *GetHandle)(
        ISynchronizeEvent* This,
        HANDLE *ph);
    HRESULT (__attribute__((__stdcall__)) *SetEventHandle)(
        ISynchronizeEvent* This,
        HANDLE *ph);
   
} ISynchronizeEventVtbl;
struct ISynchronizeEvent {
    ISynchronizeEventVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ISynchronizeEvent_SetEventHandle_Proxy(
    ISynchronizeEvent* This,
    HANDLE *ph);
void __attribute__((__stdcall__)) ISynchronizeEvent_SetEventHandle_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_ISynchronizeContainer ;
typedef struct ISynchronizeContainerVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ISynchronizeContainer* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ISynchronizeContainer* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ISynchronizeContainer* This);
    HRESULT (__attribute__((__stdcall__)) *AddSynchronize)(
        ISynchronizeContainer* This,
        ISynchronize *pSync);
    HRESULT (__attribute__((__stdcall__)) *WaitMultiple)(
        ISynchronizeContainer* This,
        DWORD dwFlags,
        DWORD dwTimeOut,
        ISynchronize **ppSync);
   
} ISynchronizeContainerVtbl;
struct ISynchronizeContainer {
    ISynchronizeContainerVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ISynchronizeContainer_AddSynchronize_Proxy(
    ISynchronizeContainer* This,
    ISynchronize *pSync);
void __attribute__((__stdcall__)) ISynchronizeContainer_AddSynchronize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISynchronizeContainer_WaitMultiple_Proxy(
    ISynchronizeContainer* This,
    DWORD dwFlags,
    DWORD dwTimeOut,
    ISynchronize **ppSync);
void __attribute__((__stdcall__)) ISynchronizeContainer_WaitMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_ISynchronizeMutex ;
typedef struct ISynchronizeMutexVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ISynchronizeMutex* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ISynchronizeMutex* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ISynchronizeMutex* This);
    HRESULT (__attribute__((__stdcall__)) *Wait)(
        ISynchronizeMutex* This,
        DWORD dwFlags,
        DWORD dwMilliseconds);
    HRESULT (__attribute__((__stdcall__)) *Signal)(
        ISynchronizeMutex* This);
    HRESULT (__attribute__((__stdcall__)) *Reset)(
        ISynchronizeMutex* This);
    HRESULT (__attribute__((__stdcall__)) *ReleaseMutex)(
        ISynchronizeMutex* This);
   
} ISynchronizeMutexVtbl;
struct ISynchronizeMutex {
    ISynchronizeMutexVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ISynchronizeMutex_ReleaseMutex_Proxy(
    ISynchronizeMutex* This);
void __attribute__((__stdcall__)) ISynchronizeMutex_ReleaseMutex_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ICancelMethodCalls *LPCANCELMETHODCALLS;
extern const GUID IID_ICancelMethodCalls ;
typedef struct ICancelMethodCallsVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ICancelMethodCalls* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ICancelMethodCalls* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ICancelMethodCalls* This);
    HRESULT (__attribute__((__stdcall__)) *Cancel)(
        ICancelMethodCalls* This,
        ULONG ulSeconds);
    HRESULT (__attribute__((__stdcall__)) *TestCancel)(
        ICancelMethodCalls* This);
   
} ICancelMethodCallsVtbl;
struct ICancelMethodCalls {
    ICancelMethodCallsVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ICancelMethodCalls_Cancel_Proxy(
    ICancelMethodCalls* This,
    ULONG ulSeconds);
void __attribute__((__stdcall__)) ICancelMethodCalls_Cancel_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICancelMethodCalls_TestCancel_Proxy(
    ICancelMethodCalls* This);
void __attribute__((__stdcall__)) ICancelMethodCalls_TestCancel_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef enum tagDCOM_CALL_STATE {
    DCOM_NONE = 0,
    DCOM_CALL_COMPLETE = 1,
    DCOM_CALL_CANCELED = 2
} DCOM_CALL_STATE;
extern const GUID IID_IAsyncManager ;
typedef struct IAsyncManagerVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IAsyncManager* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IAsyncManager* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IAsyncManager* This);
    HRESULT (__attribute__((__stdcall__)) *CompleteCall)(
        IAsyncManager* This,
        HRESULT Result);
    HRESULT (__attribute__((__stdcall__)) *GetCallContext)(
        IAsyncManager* This,
        const IID* const riid,
        void **pInterface);
    HRESULT (__attribute__((__stdcall__)) *GetState)(
        IAsyncManager* This,
        ULONG *pulStateFlags);
   
} IAsyncManagerVtbl;
struct IAsyncManager {
    IAsyncManagerVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IAsyncManager_CompleteCall_Proxy(
    IAsyncManager* This,
    HRESULT Result);
void __attribute__((__stdcall__)) IAsyncManager_CompleteCall_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAsyncManager_GetCallContext_Proxy(
    IAsyncManager* This,
    const IID* const riid,
    void **pInterface);
void __attribute__((__stdcall__)) IAsyncManager_GetCallContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAsyncManager_GetState_Proxy(
    IAsyncManager* This,
    ULONG *pulStateFlags);
void __attribute__((__stdcall__)) IAsyncManager_GetState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_ICallFactory ;
typedef struct ICallFactoryVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ICallFactory* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ICallFactory* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ICallFactory* This);
    HRESULT (__attribute__((__stdcall__)) *CreateCall)(
        ICallFactory* This,
        const IID* const riid,
        IUnknown *pCtrlUnk,
        const IID* const riid2,
        IUnknown **ppv);
   
} ICallFactoryVtbl;
struct ICallFactory {
    ICallFactoryVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ICallFactory_CreateCall_Proxy(
    ICallFactory* This,
    const IID* const riid,
    IUnknown *pCtrlUnk,
    const IID* const riid2,
    IUnknown **ppv);
void __attribute__((__stdcall__)) ICallFactory_CreateCall_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IRpcOptions ;
typedef struct IRpcOptionsVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IRpcOptions* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IRpcOptions* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IRpcOptions* This);
    HRESULT (__attribute__((__stdcall__)) *Set)(
        IRpcOptions* This,
        IUnknown *pPrx,
        DWORD dwProperty,
        ULONG_PTR dwValue);
    HRESULT (__attribute__((__stdcall__)) *Query)(
        IRpcOptions* This,
        IUnknown *pPrx,
        DWORD dwProperty,
        ULONG_PTR *pdwValue);
   
} IRpcOptionsVtbl;
struct IRpcOptions {
    IRpcOptionsVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IRpcOptions_Set_Proxy(
    IRpcOptions* This,
    IUnknown *pPrx,
    DWORD dwProperty,
    ULONG_PTR dwValue);
void __attribute__((__stdcall__)) IRpcOptions_Set_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcOptions_Query_Proxy(
    IRpcOptions* This,
    IUnknown *pPrx,
    DWORD dwProperty,
    ULONG_PTR *pdwValue);
void __attribute__((__stdcall__)) IRpcOptions_Query_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
enum {
    COMBND_RPCTIMEOUT = 1,
    COMBND_SERVER_LOCALITY = 2
};
enum {
    SERVER_LOCALITY_PROCESS_LOCAL = 0,
    SERVER_LOCALITY_MACHINE_LOCAL = 1,
    SERVER_LOCALITY_REMOTE = 2
};
extern const GUID IID_IRpcHelper ;
typedef struct IRpcHelperVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IRpcHelper* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IRpcHelper* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IRpcHelper* This);
    HRESULT (__attribute__((__stdcall__)) *GetDCOMProtocolVersion)(
        IRpcHelper* This,
        DWORD *pComVersion);
    HRESULT (__attribute__((__stdcall__)) *GetIIDFromOBJREF)(
        IRpcHelper* This,
        void *pObjRef,
        IID **piid);
   
} IRpcHelperVtbl;
struct IRpcHelper {
    IRpcHelperVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IRpcHelper_GetDCOMProtocolVersion_Proxy(
    IRpcHelper* This,
    DWORD *pComVersion);
void __attribute__((__stdcall__)) IRpcHelper_GetDCOMProtocolVersion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcHelper_GetIIDFromOBJREF_Proxy(
    IRpcHelper* This,
    void *pObjRef,
    IID **piid);
void __attribute__((__stdcall__)) IRpcHelper_GetIIDFromOBJREF_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IReleaseMarshalBuffers ;
typedef struct IReleaseMarshalBuffersVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IReleaseMarshalBuffers* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IReleaseMarshalBuffers* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IReleaseMarshalBuffers* This);
    HRESULT (__attribute__((__stdcall__)) *ReleaseMarshalBuffer)(
        IReleaseMarshalBuffers* This,
        RPCOLEMESSAGE *pMsg,
        DWORD dwFlags,
        IUnknown *pChnl);
   
} IReleaseMarshalBuffersVtbl;
struct IReleaseMarshalBuffers {
    IReleaseMarshalBuffersVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IReleaseMarshalBuffers_ReleaseMarshalBuffer_Proxy(
    IReleaseMarshalBuffers* This,
    RPCOLEMESSAGE *pMsg,
    DWORD dwFlags,
    IUnknown *pChnl);
void __attribute__((__stdcall__)) IReleaseMarshalBuffers_ReleaseMarshalBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IWaitMultiple ;
typedef struct IWaitMultipleVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IWaitMultiple* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IWaitMultiple* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IWaitMultiple* This);
    HRESULT (__attribute__((__stdcall__)) *WaitMultiple)(
        IWaitMultiple* This,
        DWORD timeout,
        ISynchronize **pSync);
    HRESULT (__attribute__((__stdcall__)) *AddSynchronize)(
        IWaitMultiple* This,
        ISynchronize *pSync);
   
} IWaitMultipleVtbl;
struct IWaitMultiple {
    IWaitMultipleVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IWaitMultiple_WaitMultiple_Proxy(
    IWaitMultiple* This,
    DWORD timeout,
    ISynchronize **pSync);
void __attribute__((__stdcall__)) IWaitMultiple_WaitMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IWaitMultiple_AddSynchronize_Proxy(
    IWaitMultiple* This,
    ISynchronize *pSync);
void __attribute__((__stdcall__)) IWaitMultiple_AddSynchronize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IUrlMon ;
typedef struct IUrlMonVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IUrlMon* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IUrlMon* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IUrlMon* This);
    HRESULT (__attribute__((__stdcall__)) *AsyncGetClassBits)(
        IUrlMon* This,
        const CLSID* const rclsid,
        LPCWSTR pszTYPE,
        LPCWSTR pszExt,
        DWORD dwFileVersionMS,
        DWORD dwFileVersionLS,
        LPCWSTR pszCodeBase,
        IBindCtx *pbc,
        DWORD dwClassContext,
        const IID* const riid,
        DWORD flags);
   
} IUrlMonVtbl;
struct IUrlMon {
    IUrlMonVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IUrlMon_AsyncGetClassBits_Proxy(
    IUrlMon* This,
    const CLSID* const rclsid,
    LPCWSTR pszTYPE,
    LPCWSTR pszExt,
    DWORD dwFileVersionMS,
    DWORD dwFileVersionLS,
    LPCWSTR pszCodeBase,
    IBindCtx *pbc,
    DWORD dwClassContext,
    const IID* const riid,
    DWORD flags);
void __attribute__((__stdcall__)) IUrlMon_AsyncGetClassBits_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IForegroundTransfer ;
typedef struct IForegroundTransferVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IForegroundTransfer* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IForegroundTransfer* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IForegroundTransfer* This);
    HRESULT (__attribute__((__stdcall__)) *AllowForegroundTransfer)(
        IForegroundTransfer* This,
        void *lpvReserved);
   
} IForegroundTransferVtbl;
struct IForegroundTransfer {
    IForegroundTransferVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IForegroundTransfer_AllowForegroundTransfer_Proxy(
    IForegroundTransfer* This,
    void *lpvReserved);
void __attribute__((__stdcall__)) IForegroundTransfer_AllowForegroundTransfer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IAddrTrackingControl *LPADDRTRACKINGCONTROL;
extern const GUID IID_IAddrTrackingControl ;
typedef struct IAddrTrackingControlVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IAddrTrackingControl* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IAddrTrackingControl* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IAddrTrackingControl* This);
    HRESULT (__attribute__((__stdcall__)) *EnableCOMDynamicAddrTracking)(
        IAddrTrackingControl* This);
    HRESULT (__attribute__((__stdcall__)) *DisableCOMDynamicAddrTracking)(
        IAddrTrackingControl* This);
   
} IAddrTrackingControlVtbl;
struct IAddrTrackingControl {
    IAddrTrackingControlVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IAddrTrackingControl_EnableCOMDynamicAddrTracking_Proxy(
    IAddrTrackingControl* This);
void __attribute__((__stdcall__)) IAddrTrackingControl_EnableCOMDynamicAddrTracking_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAddrTrackingControl_DisableCOMDynamicAddrTracking_Proxy(
    IAddrTrackingControl* This);
void __attribute__((__stdcall__)) IAddrTrackingControl_DisableCOMDynamicAddrTracking_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IAddrExclusionControl *LPADDREXCLUSIONCONTROL;
extern const GUID IID_IAddrExclusionControl ;
typedef struct IAddrExclusionControlVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IAddrExclusionControl* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IAddrExclusionControl* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IAddrExclusionControl* This);
    HRESULT (__attribute__((__stdcall__)) *GetCurrentAddrExclusionList)(
        IAddrExclusionControl* This,
        const IID* const riid,
        void **ppEnumerator);
    HRESULT (__attribute__((__stdcall__)) *UpdateAddrExclusionList)(
        IAddrExclusionControl* This,
        IUnknown *pEnumerator);
   
} IAddrExclusionControlVtbl;
struct IAddrExclusionControl {
    IAddrExclusionControlVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IAddrExclusionControl_GetCurrentAddrExclusionList_Proxy(
    IAddrExclusionControl* This,
    const IID* const riid,
    void **ppEnumerator);
void __attribute__((__stdcall__)) IAddrExclusionControl_GetCurrentAddrExclusionList_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAddrExclusionControl_UpdateAddrExclusionList_Proxy(
    IAddrExclusionControl* This,
    IUnknown *pEnumerator);
void __attribute__((__stdcall__)) IAddrExclusionControl_UpdateAddrExclusionList_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef enum _APTTYPE {
    APTTYPE_CURRENT = -1,
    APTTYPE_STA = 0,
    APTTYPE_MTA = 1,
    APTTYPE_NA = 2,
    APTTYPE_MAINSTA = 3
} APTTYPE;
typedef enum _THDTYPE {
    THDTYPE_BLOCKMESSAGES = 0,
    THDTYPE_PROCESSMESSAGES = 1
} THDTYPE;
extern const GUID IID_IComThreadingInfo ;
typedef struct IComThreadingInfoVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IComThreadingInfo* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IComThreadingInfo* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IComThreadingInfo* This);
    HRESULT (__attribute__((__stdcall__)) *GetCurrentApartmentType)(
        IComThreadingInfo* This,
        APTTYPE *pAptType);
    HRESULT (__attribute__((__stdcall__)) *GetCurrentThreadType)(
        IComThreadingInfo* This,
        THDTYPE *pThreadType);
    HRESULT (__attribute__((__stdcall__)) *GetCurrentLogicalThreadId)(
        IComThreadingInfo* This,
        GUID *pguidLogicalThreadId);
    HRESULT (__attribute__((__stdcall__)) *SetCurrentLogicalThreadId)(
        IComThreadingInfo* This,
        const GUID* const rguid);
   
} IComThreadingInfoVtbl;
struct IComThreadingInfo {
    IComThreadingInfoVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IComThreadingInfo_GetCurrentApartmentType_Proxy(
    IComThreadingInfo* This,
    APTTYPE *pAptType);
void __attribute__((__stdcall__)) IComThreadingInfo_GetCurrentApartmentType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IComThreadingInfo_GetCurrentThreadType_Proxy(
    IComThreadingInfo* This,
    THDTYPE *pThreadType);
void __attribute__((__stdcall__)) IComThreadingInfo_GetCurrentThreadType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IComThreadingInfo_GetCurrentLogicalThreadId_Proxy(
    IComThreadingInfo* This,
    GUID *pguidLogicalThreadId);
void __attribute__((__stdcall__)) IComThreadingInfo_GetCurrentLogicalThreadId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IComThreadingInfo_SetCurrentLogicalThreadId_Proxy(
    IComThreadingInfo* This,
    const GUID* const rguid);
void __attribute__((__stdcall__)) IComThreadingInfo_SetCurrentLogicalThreadId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IProcessInitControl ;
typedef struct IProcessInitControlVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IProcessInitControl* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IProcessInitControl* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IProcessInitControl* This);
    HRESULT (__attribute__((__stdcall__)) *ResetInitializerTimeout)(
        IProcessInitControl* This,
        DWORD dwSecondsRemaining);
   
} IProcessInitControlVtbl;
struct IProcessInitControl {
    IProcessInitControlVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IProcessInitControl_ResetInitializerTimeout_Proxy(
    IProcessInitControl* This,
    DWORD dwSecondsRemaining);
void __attribute__((__stdcall__)) IProcessInitControl_ResetInitializerTimeout_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInitializeSpy *LPINITIALIZESPY;
extern const GUID IID_IInitializeSpy ;
typedef struct IInitializeSpyVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInitializeSpy* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInitializeSpy* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInitializeSpy* This);
    HRESULT (__attribute__((__stdcall__)) *PreInitialize)(
        IInitializeSpy* This,
        DWORD dwCoInit,
        DWORD dwCurThreadAptRefs);
    HRESULT (__attribute__((__stdcall__)) *PostInitialize)(
        IInitializeSpy* This,
        HRESULT hrCoInit,
        DWORD dwCoInit,
        DWORD dwNewThreadAptRefs);
    HRESULT (__attribute__((__stdcall__)) *PreUninitialize)(
        IInitializeSpy* This,
        DWORD dwCurThreadAptRefs);
    HRESULT (__attribute__((__stdcall__)) *PostUninitialize)(
        IInitializeSpy* This,
        DWORD dwNewThreadAptRefs);
   
} IInitializeSpyVtbl;
struct IInitializeSpy {
    IInitializeSpyVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IInitializeSpy_PreInitialize_Proxy(
    IInitializeSpy* This,
    DWORD dwCoInit,
    DWORD dwCurThreadAptRefs);
void __attribute__((__stdcall__)) IInitializeSpy_PreInitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInitializeSpy_PostInitialize_Proxy(
    IInitializeSpy* This,
    HRESULT hrCoInit,
    DWORD dwCoInit,
    DWORD dwNewThreadAptRefs);
void __attribute__((__stdcall__)) IInitializeSpy_PostInitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInitializeSpy_PreUninitialize_Proxy(
    IInitializeSpy* This,
    DWORD dwCurThreadAptRefs);
void __attribute__((__stdcall__)) IInitializeSpy_PreUninitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInitializeSpy_PostUninitialize_Proxy(
    IInitializeSpy* This,
    DWORD dwNewThreadAptRefs);
void __attribute__((__stdcall__)) IInitializeSpy_PostUninitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IThumbnailExtractor ;
typedef struct IThumbnailExtractorVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IThumbnailExtractor* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IThumbnailExtractor* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IThumbnailExtractor* This);
    HRESULT (__attribute__((__stdcall__)) *ExtractThumbnail)(
        IThumbnailExtractor* This,
        IStorage *pStg,
        ULONG ulLength,
        ULONG ulHeight,
        ULONG *pulOutputLength,
        ULONG *pulOutputHeight,
        HBITMAP *phOutputBitmap);
    HRESULT (__attribute__((__stdcall__)) *OnFileUpdated)(
        IThumbnailExtractor* This,
        IStorage *pStg);
   
} IThumbnailExtractorVtbl;
struct IThumbnailExtractor {
    IThumbnailExtractorVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IThumbnailExtractor_ExtractThumbnail_Proxy(
    IThumbnailExtractor* This,
    IStorage *pStg,
    ULONG ulLength,
    ULONG ulHeight,
    ULONG *pulOutputLength,
    ULONG *pulOutputHeight,
    HBITMAP *phOutputBitmap);
void __attribute__((__stdcall__)) IThumbnailExtractor_ExtractThumbnail_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IThumbnailExtractor_OnFileUpdated_Proxy(
    IThumbnailExtractor* This,
    IStorage *pStg);
void __attribute__((__stdcall__)) IThumbnailExtractor_OnFileUpdated_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG __attribute__((__stdcall__)) SNB_UserSize (ULONG *, ULONG, SNB *);
unsigned char * __attribute__((__stdcall__)) SNB_UserMarshal (ULONG *, unsigned char *, SNB *);
unsigned char * __attribute__((__stdcall__)) SNB_UserUnmarshal(ULONG *, unsigned char *, SNB *);
void __attribute__((__stdcall__)) SNB_UserFree (ULONG *, SNB *);
ULONG __attribute__((__stdcall__)) CLIPFORMAT_UserSize (ULONG *, ULONG, CLIPFORMAT *);
unsigned char * __attribute__((__stdcall__)) CLIPFORMAT_UserMarshal (ULONG *, unsigned char *, CLIPFORMAT *);
unsigned char * __attribute__((__stdcall__)) CLIPFORMAT_UserUnmarshal(ULONG *, unsigned char *, CLIPFORMAT *);
void __attribute__((__stdcall__)) CLIPFORMAT_UserFree (ULONG *, CLIPFORMAT *);
ULONG __attribute__((__stdcall__)) STGMEDIUM_UserSize (ULONG *, ULONG, STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) STGMEDIUM_UserMarshal (ULONG *, unsigned char *, STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, STGMEDIUM *);
void __attribute__((__stdcall__)) STGMEDIUM_UserFree (ULONG *, STGMEDIUM *);
ULONG __attribute__((__stdcall__)) ASYNC_STGMEDIUM_UserSize (ULONG *, ULONG, ASYNC_STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) ASYNC_STGMEDIUM_UserMarshal (ULONG *, unsigned char *, ASYNC_STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) ASYNC_STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, ASYNC_STGMEDIUM *);
void __attribute__((__stdcall__)) ASYNC_STGMEDIUM_UserFree (ULONG *, ASYNC_STGMEDIUM *);
ULONG __attribute__((__stdcall__)) FLAG_STGMEDIUM_UserSize (ULONG *, ULONG, FLAG_STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) FLAG_STGMEDIUM_UserMarshal (ULONG *, unsigned char *, FLAG_STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) FLAG_STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, FLAG_STGMEDIUM *);
void __attribute__((__stdcall__)) FLAG_STGMEDIUM_UserFree (ULONG *, FLAG_STGMEDIUM *);
ULONG __attribute__((__stdcall__)) HBITMAP_UserSize (ULONG *, ULONG, HBITMAP *);
unsigned char * __attribute__((__stdcall__)) HBITMAP_UserMarshal (ULONG *, unsigned char *, HBITMAP *);
unsigned char * __attribute__((__stdcall__)) HBITMAP_UserUnmarshal(ULONG *, unsigned char *, HBITMAP *);
void __attribute__((__stdcall__)) HBITMAP_UserFree (ULONG *, HBITMAP *);
extern const IID GUID_NULL;
extern const IID IID_IRpcChannel;
extern const IID IID_IRpcStub;
extern const IID IID_IStubManager;
extern const IID IID_IRpcProxy;
extern const IID IID_IProxyManager;
extern const IID IID_IPSFactory;
extern const IID IID_IInternalMoniker;
extern const IID IID_IDfReserved1;
extern const IID IID_IDfReserved2;
extern const IID IID_IDfReserved3;
extern const CLSID CLSID_StdMarshal;
extern const CLSID CLSID_AggStdMarshal;
extern const CLSID CLSID_StdAsyncActManager;
extern const IID IID_IStub;
extern const IID IID_IProxy;
extern const IID IID_IEnumGeneric;
extern const IID IID_IEnumHolder;
extern const IID IID_IEnumCallback;
extern const IID IID_IOleManager;
extern const IID IID_IOlePresObj;
extern const IID IID_IDebug;
extern const IID IID_IDebugStream;
extern const CLSID CLSID_PSGenObject;
extern const CLSID CLSID_PSClientSite;
extern const CLSID CLSID_PSClassObject;
extern const CLSID CLSID_PSInPlaceActive;
extern const CLSID CLSID_PSInPlaceFrame;
extern const CLSID CLSID_PSDragDrop;
extern const CLSID CLSID_PSBindCtx;
extern const CLSID CLSID_PSEnumerators;
extern const CLSID CLSID_StaticMetafile;
extern const CLSID CLSID_StaticDib;
extern const CLSID CID_CDfsVolume;
extern const CLSID CLSID_DCOMAccessControl;
extern const CLSID CLSID_StdGlobalInterfaceTable;
extern const CLSID CLSID_ComBinding;
extern const CLSID CLSID_StdEvent;
extern const CLSID CLSID_ManualResetEvent;
extern const CLSID CLSID_SynchronizeContainer;
extern const CLSID CLSID_CCDFormKrnl;
extern const CLSID CLSID_CCDPropertyPage;
extern const CLSID CLSID_CCDFormDialog;
extern const CLSID CLSID_CCDCommandButton;
extern const CLSID CLSID_CCDComboBox;
extern const CLSID CLSID_CCDTextBox;
extern const CLSID CLSID_CCDCheckBox;
extern const CLSID CLSID_CCDLabel;
extern const CLSID CLSID_CCDOptionButton;
extern const CLSID CLSID_CCDListBox;
extern const CLSID CLSID_CCDScrollBar;
extern const CLSID CLSID_CCDGroupBox;
extern const CLSID CLSID_CCDGeneralPropertyPage;
extern const CLSID CLSID_CCDGenericPropertyPage;
extern const CLSID CLSID_CCDFontPropertyPage;
extern const CLSID CLSID_CCDColorPropertyPage;
extern const CLSID CLSID_CCDLabelPropertyPage;
extern const CLSID CLSID_CCDCheckBoxPropertyPage;
extern const CLSID CLSID_CCDTextBoxPropertyPage;
extern const CLSID CLSID_CCDOptionButtonPropertyPage;
extern const CLSID CLSID_CCDListBoxPropertyPage;
extern const CLSID CLSID_CCDCommandButtonPropertyPage;
extern const CLSID CLSID_CCDComboBoxPropertyPage;
extern const CLSID CLSID_CCDScrollBarPropertyPage;
extern const CLSID CLSID_CCDGroupBoxPropertyPage;
extern const CLSID CLSID_CCDXObjectPropertyPage;
extern const CLSID CLSID_CStdPropertyFrame;
extern const CLSID CLSID_CFormPropertyPage;
extern const CLSID CLSID_CGridPropertyPage;
extern const CLSID CLSID_CWSJArticlePage;
extern const CLSID CLSID_CSystemPage;
extern const CLSID CLSID_IdentityUnmarshal;
extern const CLSID CLSID_InProcFreeMarshaler;
extern const CLSID CLSID_Picture_Metafile;
extern const CLSID CLSID_Picture_EnhMetafile;
extern const CLSID CLSID_Picture_Dib;
extern const GUID GUID_TRISTATE;
DWORD __attribute__((__stdcall__)) CoBuildVersion(void);
typedef enum tagCOINIT
{
    COINIT_APARTMENTTHREADED = 0x2,
    COINIT_MULTITHREADED = 0x0,
    COINIT_DISABLE_OLE1DDE = 0x4,
    COINIT_SPEED_OVER_MEMORY = 0x8
} COINIT;
HRESULT __attribute__((__stdcall__)) CoInitialize(LPVOID lpReserved);
HRESULT __attribute__((__stdcall__)) CoInitializeEx(LPVOID lpReserved, DWORD dwCoInit);
void __attribute__((__stdcall__)) CoUninitialize(void);
DWORD __attribute__((__stdcall__)) CoGetCurrentProcess(void);
HINSTANCE __attribute__((__stdcall__)) CoLoadLibrary(LPOLESTR lpszLibName, BOOL bAutoFree);
void __attribute__((__stdcall__)) CoFreeAllLibraries(void);
void __attribute__((__stdcall__)) CoFreeLibrary(HINSTANCE hLibrary);
void __attribute__((__stdcall__)) CoFreeUnusedLibraries(void);
void __attribute__((__stdcall__)) CoFreeUnusedLibrariesEx(DWORD dwUnloadDelay, DWORD dwReserved);
HRESULT __attribute__((__stdcall__)) CoCreateInstance(const CLSID* const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID* const iid, LPVOID *ppv);
HRESULT __attribute__((__stdcall__)) CoCreateInstanceEx(const CLSID* const rclsid,
      LPUNKNOWN pUnkOuter,
      DWORD dwClsContext,
      COSERVERINFO* pServerInfo,
      ULONG cmq,
      MULTI_QI* pResults);
HRESULT __attribute__((__stdcall__)) CoGetInstanceFromFile(COSERVERINFO* pServerInfo, CLSID* pClsid, IUnknown* punkOuter, DWORD dwClsCtx, DWORD grfMode, OLECHAR* pwszName, DWORD dwCount, MULTI_QI* pResults);
HRESULT __attribute__((__stdcall__)) CoGetInstanceFromIStorage(COSERVERINFO* pServerInfo, CLSID* pClsid, IUnknown* punkOuter, DWORD dwClsCtx, IStorage* pstg, DWORD dwCount, MULTI_QI* pResults);
HRESULT __attribute__((__stdcall__)) CoGetMalloc(DWORD dwMemContext, LPMALLOC* lpMalloc);
LPVOID __attribute__((__stdcall__)) CoTaskMemAlloc(ULONG size) __attribute__((__alloc_size__(1)));
void __attribute__((__stdcall__)) CoTaskMemFree(LPVOID ptr);
LPVOID __attribute__((__stdcall__)) CoTaskMemRealloc(LPVOID ptr, ULONG size);
HRESULT __attribute__((__stdcall__)) CoRegisterMallocSpy(LPMALLOCSPY pMallocSpy);
HRESULT __attribute__((__stdcall__)) CoRevokeMallocSpy(void);
HRESULT __attribute__((__stdcall__)) CoGetContextToken( ULONG_PTR *token );
typedef enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,
    REGCLS_MULTIPLEUSE = 1,
    REGCLS_MULTI_SEPARATE = 2,
    REGCLS_SUSPENDED = 4,
    REGCLS_SURROGATE = 8
} REGCLS;
HRESULT __attribute__((__stdcall__)) CoGetClassObject(const CLSID* const rclsid, DWORD dwClsContext, COSERVERINFO *pServerInfo, const IID* const iid, LPVOID *ppv);
HRESULT __attribute__((__stdcall__)) CoRegisterClassObject(const CLSID* const rclsid,LPUNKNOWN pUnk,DWORD dwClsContext,DWORD flags,LPDWORD lpdwRegister);
HRESULT __attribute__((__stdcall__)) CoRevokeClassObject(DWORD dwRegister);
HRESULT __attribute__((__stdcall__)) CoGetPSClsid(const IID* const riid,CLSID *pclsid);
HRESULT __attribute__((__stdcall__)) CoRegisterPSClsid(const IID* const riid, const CLSID* const rclsid);
HRESULT __attribute__((__stdcall__)) CoRegisterSurrogate(LPSURROGATE pSurrogate);
HRESULT __attribute__((__stdcall__)) CoSuspendClassObjects(void);
HRESULT __attribute__((__stdcall__)) CoResumeClassObjects(void);
ULONG __attribute__((__stdcall__)) CoAddRefServerProcess(void);
ULONG __attribute__((__stdcall__)) CoReleaseServerProcess(void);
HRESULT __attribute__((__stdcall__)) CoCreateFreeThreadedMarshaler(LPUNKNOWN punkOuter, LPUNKNOWN* ppunkMarshal);
HRESULT __attribute__((__stdcall__)) CoGetInterfaceAndReleaseStream(LPSTREAM pStm, const IID* const iid, LPVOID* ppv);
HRESULT __attribute__((__stdcall__)) CoGetMarshalSizeMax(ULONG* pulSize, const IID* const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
HRESULT __attribute__((__stdcall__)) CoGetStandardMarshal(const IID* const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL* ppMarshal);
HRESULT __attribute__((__stdcall__)) CoMarshalHresult(LPSTREAM pstm, HRESULT hresult);
HRESULT __attribute__((__stdcall__)) CoMarshalInterface(LPSTREAM pStm, const IID* const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
HRESULT __attribute__((__stdcall__)) CoMarshalInterThreadInterfaceInStream(const IID* const riid, LPUNKNOWN pUnk, LPSTREAM* ppStm);
HRESULT __attribute__((__stdcall__)) CoReleaseMarshalData(LPSTREAM pStm);
HRESULT __attribute__((__stdcall__)) CoDisconnectObject(LPUNKNOWN lpUnk, DWORD reserved);
HRESULT __attribute__((__stdcall__)) CoUnmarshalHresult(LPSTREAM pstm, HRESULT* phresult);
HRESULT __attribute__((__stdcall__)) CoUnmarshalInterface(LPSTREAM pStm, const IID* const riid, LPVOID* ppv);
HRESULT __attribute__((__stdcall__)) CoLockObjectExternal(LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases);
BOOL __attribute__((__stdcall__)) CoIsHandlerConnected(LPUNKNOWN pUnk);
HRESULT __attribute__((__stdcall__)) CoInitializeSecurity(PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE* asAuthSvc, void* pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void* pReserved2, DWORD dwCapabilities, void* pReserved3);
HRESULT __attribute__((__stdcall__)) CoGetCallContext(const IID* const riid, void** ppInterface);
HRESULT __attribute__((__stdcall__)) CoSwitchCallContext(IUnknown *pContext, IUnknown **ppOldContext);
HRESULT __attribute__((__stdcall__)) CoQueryAuthenticationServices(DWORD* pcAuthSvc, SOLE_AUTHENTICATION_SERVICE** asAuthSvc);
HRESULT __attribute__((__stdcall__)) CoQueryProxyBlanket(IUnknown* pProxy, DWORD* pwAuthnSvc, DWORD* pAuthzSvc, OLECHAR** pServerPrincName, DWORD* pAuthnLevel, DWORD* pImpLevel, RPC_AUTH_IDENTITY_HANDLE* pAuthInfo, DWORD* pCapabilities);
HRESULT __attribute__((__stdcall__)) CoSetProxyBlanket(IUnknown* pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR* pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities);
HRESULT __attribute__((__stdcall__)) CoCopyProxy(IUnknown* pProxy, IUnknown** ppCopy);
HRESULT __attribute__((__stdcall__)) CoImpersonateClient(void);
HRESULT __attribute__((__stdcall__)) CoQueryClientBlanket(DWORD* pAuthnSvc, DWORD* pAuthzSvc, OLECHAR** pServerPrincName, DWORD* pAuthnLevel, DWORD* pImpLevel, RPC_AUTHZ_HANDLE* pPrivs, DWORD* pCapabilities);
HRESULT __attribute__((__stdcall__)) CoRevertToSelf(void);
HRESULT __attribute__((__stdcall__)) CoGetTreatAsClass(const CLSID* const clsidOld, LPCLSID pClsidNew);
HRESULT __attribute__((__stdcall__)) CoTreatAsClass(const CLSID* const clsidOld, const CLSID* const clsidNew);
HRESULT __attribute__((__stdcall__)) CoAllowSetForegroundWindow(IUnknown *pUnk, LPVOID lpvReserved);
HRESULT __attribute__((__stdcall__)) CoGetObjectContext(const IID* const riid, LPVOID *ppv);
HRESULT __attribute__((__stdcall__)) CoCreateGuid(GUID* pguid);
BOOL __attribute__((__stdcall__)) CoIsOle1Class(const CLSID* const rclsid);
BOOL __attribute__((__stdcall__)) CoDosDateTimeToFileTime(WORD nDosDate, WORD nDosTime, FILETIME* lpFileTime);
BOOL __attribute__((__stdcall__)) CoFileTimeToDosDateTime(FILETIME* lpFileTime, WORD* lpDosDate, WORD* lpDosTime);
HRESULT __attribute__((__stdcall__)) CoFileTimeNow(FILETIME* lpFileTime);
HRESULT __attribute__((__stdcall__)) CoRegisterMessageFilter(LPMESSAGEFILTER lpMessageFilter,LPMESSAGEFILTER *lplpMessageFilter);
HRESULT __attribute__((__stdcall__)) CoRegisterChannelHook(const GUID* const ExtensionGuid, IChannelHook *pChannelHook);
typedef enum tagCOWAIT_FLAGS
{
    COWAIT_WAITALL = 0x00000001,
    COWAIT_ALERTABLE = 0x00000002
} COWAIT_FLAGS;
HRESULT __attribute__((__stdcall__)) CoWaitForMultipleHandles(DWORD dwFlags,DWORD dwTimeout,ULONG cHandles,LPHANDLE pHandles,LPDWORD lpdwindex);
HRESULT __attribute__((__stdcall__)) StringFromCLSID(const CLSID* const id, LPOLESTR*);
HRESULT __attribute__((__stdcall__)) CLSIDFromString(LPCOLESTR, LPCLSID);
HRESULT __attribute__((__stdcall__)) CLSIDFromProgID(LPCOLESTR progid, LPCLSID riid);
HRESULT __attribute__((__stdcall__)) ProgIDFromCLSID(const CLSID* const clsid, LPOLESTR *lplpszProgID);
INT __attribute__((__stdcall__)) StringFromGUID2(const GUID* const id, LPOLESTR str, INT cmax);
HRESULT __attribute__((__stdcall__)) DllGetClassObject(const CLSID* const rclsid, const IID* const riid, LPVOID * ppv) ;
HRESULT __attribute__((__stdcall__)) DllCanUnloadNow(void) ;
HRESULT __attribute__((__stdcall__)) CreateDataAdviseHolder(LPDATAADVISEHOLDER* ppDAHolder);
HRESULT __attribute__((__stdcall__)) CreateDataCache(LPUNKNOWN pUnkOuter, const CLSID* const rclsid, const IID* const iid, LPVOID* ppv);
HRESULT __attribute__((__stdcall__)) BindMoniker(LPMONIKER pmk, DWORD grfOpt, const IID* const iidResult, LPVOID* ppvResult);
HRESULT __attribute__((__stdcall__)) CoGetObject(LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID* const riid, void **ppv);
HRESULT __attribute__((__stdcall__)) CreateAntiMoniker(LPMONIKER * ppmk);
HRESULT __attribute__((__stdcall__)) CreateBindCtx(DWORD reserved, LPBC* ppbc);
HRESULT __attribute__((__stdcall__)) CreateClassMoniker(const CLSID* const rclsid, LPMONIKER* ppmk);
HRESULT __attribute__((__stdcall__)) CreateFileMoniker(LPCOLESTR lpszPathName, LPMONIKER* ppmk);
HRESULT __attribute__((__stdcall__)) CreateGenericComposite(LPMONIKER pmkFirst, LPMONIKER pmkRest, LPMONIKER* ppmkComposite);
HRESULT __attribute__((__stdcall__)) CreateItemMoniker(LPCOLESTR lpszDelim, LPCOLESTR lpszItem, LPMONIKER* ppmk);
HRESULT __attribute__((__stdcall__)) CreateObjrefMoniker(LPUNKNOWN punk, LPMONIKER * ppmk);
HRESULT __attribute__((__stdcall__)) CreatePointerMoniker(LPUNKNOWN punk, LPMONIKER * ppmk);
HRESULT __attribute__((__stdcall__)) GetClassFile(LPCOLESTR filePathName,CLSID *pclsid);
HRESULT __attribute__((__stdcall__)) GetRunningObjectTable(DWORD reserved, LPRUNNINGOBJECTTABLE *pprot);
HRESULT __attribute__((__stdcall__)) MkParseDisplayName(LPBC pbc, LPCOLESTR szUserName, ULONG * pchEaten, LPMONIKER * ppmk);
HRESULT __attribute__((__stdcall__)) MonikerCommonPrefixWith(IMoniker* pmkThis,IMoniker* pmkOther,IMoniker** ppmkCommon);
HRESULT __attribute__((__stdcall__)) MonikerRelativePathTo(LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER * ppmkRelPath, BOOL dwReserved);
typedef struct tagSTGOPTIONS
{
    USHORT usVersion;
    USHORT reserved;
    ULONG ulSectorSize;
    const WCHAR* pwcsTemplateFile;
} STGOPTIONS;
HRESULT __attribute__((__stdcall__)) StgCreateDocfile(LPCOLESTR pwcsName,DWORD grfMode,DWORD reserved,IStorage **ppstgOpen);
HRESULT __attribute__((__stdcall__)) StgCreateStorageEx(const WCHAR*,DWORD,DWORD,DWORD,STGOPTIONS*,void*,const IID* const,void**);
HRESULT __attribute__((__stdcall__)) StgIsStorageFile(LPCOLESTR fn);
HRESULT __attribute__((__stdcall__)) StgIsStorageILockBytes(ILockBytes *plkbyt);
HRESULT __attribute__((__stdcall__)) StgOpenStorage(const OLECHAR* pwcsName,IStorage* pstgPriority,DWORD grfMode,SNB snbExclude,DWORD reserved,IStorage**ppstgOpen);
HRESULT __attribute__((__stdcall__)) StgOpenStorageEx(const WCHAR* pwcwName,DWORD grfMode,DWORD stgfmt,DWORD grfAttrs,STGOPTIONS *pStgOptions, void *reserved, const IID* const riid, void **ppObjectOpen);
HRESULT __attribute__((__stdcall__)) StgCreateDocfileOnILockBytes(ILockBytes *plkbyt,DWORD grfMode, DWORD reserved, IStorage** ppstgOpen);
HRESULT __attribute__((__stdcall__)) StgOpenStorageOnILockBytes(ILockBytes *plkbyt, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen);
HRESULT __attribute__((__stdcall__)) StgSetTimes( OLECHAR const *lpszName, FILETIME const *pctime, FILETIME const *patime, FILETIME const *pmtime);
typedef struct IInternet IInternet;
typedef struct IBinding IBinding;
typedef struct IBindStatusCallback IBindStatusCallback;
typedef struct IBindStatusCallbackEx IBindStatusCallbackEx;
typedef struct IAuthenticate IAuthenticate;
typedef struct IHttpNegotiate IHttpNegotiate;
typedef struct IHttpNegotiate2 IHttpNegotiate2;
typedef struct IBindHost IBindHost;
typedef struct IWinInetInfo IWinInetInfo;
typedef struct IWinInetHttpInfo IWinInetHttpInfo;
typedef struct IWindowForBindingUI IWindowForBindingUI;
typedef struct IHttpSecurity IHttpSecurity;
typedef struct IPersistMoniker IPersistMoniker;
typedef struct IMonikerProp IMonikerProp;
typedef struct IBindProtocol IBindProtocol;
typedef struct IInternetBindInfo IInternetBindInfo;
typedef struct IInternetPriority IInternetPriority;
typedef struct IInternetProtocolRoot IInternetProtocolRoot;
typedef struct IInternetProtocolSink IInternetProtocolSink;
typedef struct IInternetProtocol IInternetProtocol;
typedef struct IInternetProtocolInfo IInternetProtocolInfo;
typedef struct IInternetSession IInternetSession;
typedef struct IInternetSecurityMgrSite IInternetSecurityMgrSite;
typedef struct IInternetSecurityManager IInternetSecurityManager;
typedef struct IInternetHostSecurityManager IInternetHostSecurityManager;
typedef struct IInternetZoneManager IInternetZoneManager;
typedef struct IInternetZoneManagerEx IInternetZoneManagerEx;
typedef struct IInternetZoneManagerEx2 IInternetZoneManagerEx2;
typedef struct ISoftDistExt ISoftDistExt;
typedef struct IUri IUri;
typedef struct IUriContainer IUriContainer;
typedef struct IUriBuilder IUriBuilder;
typedef struct IUriBuilderFactory IUriBuilderFactory;
typedef struct IInternetProtocolEx IInternetProtocolEx;
typedef struct IOleWindow IOleWindow;
typedef struct IOleInPlaceObject IOleInPlaceObject;
typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;
typedef struct IOleInPlaceFrame IOleInPlaceFrame;
typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;
typedef struct IOleInPlaceSite IOleInPlaceSite;
typedef struct IParseDisplayName IParseDisplayName;
typedef struct IOleContainer IOleContainer;
typedef struct IOleItemContainer IOleItemContainer;
typedef struct IOleLink IOleLink;
typedef struct IOleClientSite IOleClientSite;
typedef struct IOleCache IOleCache;
typedef struct IOleCache2 IOleCache2;
typedef struct IOleCacheControl IOleCacheControl;
typedef struct IEnumOLEVERB IEnumOLEVERB;
typedef struct IOleObject IOleObject;
typedef struct IOleAdviseHolder IOleAdviseHolder;
typedef struct IContinue IContinue;
typedef struct IViewObject IViewObject;
typedef struct IViewObject2 IViewObject2;
typedef struct IDropSource IDropSource;
typedef struct IDropTarget IDropTarget;
extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
typedef enum tagOLERENDER {
    OLERENDER_NONE = 0,
    OLERENDER_DRAW = 1,
    OLERENDER_FORMAT = 2,
    OLERENDER_ASIS = 3
} OLERENDER;
typedef enum tagOLERENDER *LPOLERENDER;
typedef struct tagOBJECTDESCRIPTOR {
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
} OBJECTDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;
typedef IOleWindow *LPOLEWINDOW;
extern const GUID IID_IOleWindow ;
typedef struct IOleWindowVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IOleWindow* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IOleWindow* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IOleWindow* This);
    HRESULT (__attribute__((__stdcall__)) *GetWindow)(
        IOleWindow* This,
        HWND *phwnd);
    HRESULT (__attribute__((__stdcall__)) *ContextSensitiveHelp)(
        IOleWindow* This,
        BOOL fEnterMode);
   
} IOleWindowVtbl;
struct IOleWindow {
    IOleWindowVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IOleWindow_GetWindow_Proxy(
    IOleWindow* This,
    HWND *phwnd);
void __attribute__((__stdcall__)) IOleWindow_GetWindow_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleWindow_ContextSensitiveHelp_Proxy(
    IOleWindow* This,
    BOOL fEnterMode);
void __attribute__((__stdcall__)) IOleWindow_ContextSensitiveHelp_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;
extern const GUID IID_IOleInPlaceObject ;
typedef struct IOleInPlaceObjectVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IOleInPlaceObject* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IOleInPlaceObject* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IOleInPlaceObject* This);
    HRESULT (__attribute__((__stdcall__)) *GetWindow)(
        IOleInPlaceObject* This,
        HWND *phwnd);
    HRESULT (__attribute__((__stdcall__)) *ContextSensitiveHelp)(
        IOleInPlaceObject* This,
        BOOL fEnterMode);
    HRESULT (__attribute__((__stdcall__)) *InPlaceDeactivate)(
        IOleInPlaceObject* This);
    HRESULT (__attribute__((__stdcall__)) *UIDeactivate)(
        IOleInPlaceObject* This);
    HRESULT (__attribute__((__stdcall__)) *SetObjectRects)(
        IOleInPlaceObject* This,
        LPCRECT lprcPosRect,
        LPCRECT lprcClipRect);
    HRESULT (__attribute__((__stdcall__)) *ReactivateAndUndo)(
        IOleInPlaceObject* This);
   
} IOleInPlaceObjectVtbl;
struct IOleInPlaceObject {
    IOleInPlaceObjectVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IOleInPlaceObject_InPlaceDeactivate_Proxy(
    IOleInPlaceObject* This);
void __attribute__((__stdcall__)) IOleInPlaceObject_InPlaceDeactivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceObject_UIDeactivate_Proxy(
    IOleInPlaceObject* This);
void __attribute__((__stdcall__)) IOleInPlaceObject_UIDeactivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceObject_SetObjectRects_Proxy(
    IOleInPlaceObject* This,
    LPCRECT lprcPosRect,
    LPCRECT lprcClipRect);
void __attribute__((__stdcall__)) IOleInPlaceObject_SetObjectRects_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceObject_ReactivateAndUndo_Proxy(
    IOleInPlaceObject* This);
void __attribute__((__stdcall__)) IOleInPlaceObject_ReactivateAndUndo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;
typedef RECT BORDERWIDTHS;
typedef LPRECT LPBORDERWIDTHS;
typedef LPCRECT LPCBORDERWIDTHS;
extern const GUID IID_IOleInPlaceUIWindow ;
typedef struct IOleInPlaceUIWindowVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IOleInPlaceUIWindow* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IOleInPlaceUIWindow* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IOleInPlaceUIWindow* This);
    HRESULT (__attribute__((__stdcall__)) *GetWindow)(
        IOleInPlaceUIWindow* This,
        HWND *phwnd);
    HRESULT (__attribute__((__stdcall__)) *ContextSensitiveHelp)(
        IOleInPlaceUIWindow* This,
        BOOL fEnterMode);
    HRESULT (__attribute__((__stdcall__)) *GetBorder)(
        IOleInPlaceUIWindow* This,
        LPRECT lprectBorder);
    HRESULT (__attribute__((__stdcall__)) *RequestBorderSpace)(
        IOleInPlaceUIWindow* This,
        LPCBORDERWIDTHS pborderwidths);
    HRESULT (__attribute__((__stdcall__)) *SetBorderSpace)(
        IOleInPlaceUIWindow* This,
        LPCBORDERWIDTHS pborderwidths);
    HRESULT (__attribute__((__stdcall__)) *SetActiveObject)(
        IOleInPlaceUIWindow* This,
        IOleInPlaceActiveObject *pActiveObject,
        LPCOLESTR pszObjName);
   
} IOleInPlaceUIWindowVtbl;
struct IOleInPlaceUIWindow {
    IOleInPlaceUIWindowVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IOleInPlaceUIWindow_GetBorder_Proxy(
    IOleInPlaceUIWindow* This,
    LPRECT lprectBorder);
void __attribute__((__stdcall__)) IOleInPlaceUIWindow_GetBorder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceUIWindow_RequestBorderSpace_Proxy(
    IOleInPlaceUIWindow* This,
    LPCBORDERWIDTHS pborderwidths);
void __attribute__((__stdcall__)) IOleInPlaceUIWindow_RequestBorderSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceUIWindow_SetBorderSpace_Proxy(
    IOleInPlaceUIWindow* This,
    LPCBORDERWIDTHS pborderwidths);
void __attribute__((__stdcall__)) IOleInPlaceUIWindow_SetBorderSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceUIWindow_SetActiveObject_Proxy(
    IOleInPlaceUIWindow* This,
    IOleInPlaceActiveObject *pActiveObject,
    LPCOLESTR pszObjName);
void __attribute__((__stdcall__)) IOleInPlaceUIWindow_SetActiveObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;
typedef struct tagOleInPlaceFrameInfo {
    UINT cb;
    BOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
} OLEINPLACEFRAMEINFO;
typedef struct tagOleInPlaceFrameInfo *LPOLEINPLACEFRAMEINFO;
typedef struct tagOleMenuGroupWidths {
    LONG width[6];
} OLEMENUGROUPWIDTHS;
typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;
typedef HGLOBAL HOLEMENU;
extern const GUID IID_IOleInPlaceFrame ;
typedef struct IOleInPlaceFrameVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IOleInPlaceFrame* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IOleInPlaceFrame* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IOleInPlaceFrame* This);
    HRESULT (__attribute__((__stdcall__)) *GetWindow)(
        IOleInPlaceFrame* This,
        HWND *phwnd);
    HRESULT (__attribute__((__stdcall__)) *ContextSensitiveHelp)(
        IOleInPlaceFrame* This,
        BOOL fEnterMode);
    HRESULT (__attribute__((__stdcall__)) *GetBorder)(
        IOleInPlaceFrame* This,
        LPRECT lprectBorder);
    HRESULT (__attribute__((__stdcall__)) *RequestBorderSpace)(
        IOleInPlaceFrame* This,
        LPCBORDERWIDTHS pborderwidths);
    HRESULT (__attribute__((__stdcall__)) *SetBorderSpace)(
        IOleInPlaceFrame* This,
        LPCBORDERWIDTHS pborderwidths);
    HRESULT (__attribute__((__stdcall__)) *SetActiveObject)(
        IOleInPlaceFrame* This,
        IOleInPlaceActiveObject *pActiveObject,
        LPCOLESTR pszObjName);
    HRESULT (__attribute__((__stdcall__)) *InsertMenus)(
        IOleInPlaceFrame* This,
        HMENU hmenuShared,
        LPOLEMENUGROUPWIDTHS lpMenuWidths);
    HRESULT (__attribute__((__stdcall__)) *SetMenu)(
        IOleInPlaceFrame* This,
        HMENU hmenuShared,
        HOLEMENU holemenu,
        HWND hwndActiveObject);
    HRESULT (__attribute__((__stdcall__)) *RemoveMenus)(
        IOleInPlaceFrame* This,
        HMENU hmenuShared);
    HRESULT (__attribute__((__stdcall__)) *SetStatusText)(
        IOleInPlaceFrame* This,
        LPCOLESTR pszStatusText);
    HRESULT (__attribute__((__stdcall__)) *EnableModeless)(
        IOleInPlaceFrame* This,
        BOOL fEnable);
    HRESULT (__attribute__((__stdcall__)) *TranslateAcceleratorA)(
        IOleInPlaceFrame* This,
        LPMSG lpmsg,
        WORD wID);
   
} IOleInPlaceFrameVtbl;
struct IOleInPlaceFrame {
    IOleInPlaceFrameVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IOleInPlaceFrame_InsertMenus_Proxy(
    IOleInPlaceFrame* This,
    HMENU hmenuShared,
    LPOLEMENUGROUPWIDTHS lpMenuWidths);
void __attribute__((__stdcall__)) IOleInPlaceFrame_InsertMenus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceFrame_SetMenu_Proxy(
    IOleInPlaceFrame* This,
    HMENU hmenuShared,
    HOLEMENU holemenu,
    HWND hwndActiveObject);
void __attribute__((__stdcall__)) IOleInPlaceFrame_SetMenu_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceFrame_RemoveMenus_Proxy(
    IOleInPlaceFrame* This,
    HMENU hmenuShared);
void __attribute__((__stdcall__)) IOleInPlaceFrame_RemoveMenus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceFrame_SetStatusText_Proxy(
    IOleInPlaceFrame* This,
    LPCOLESTR pszStatusText);
void __attribute__((__stdcall__)) IOleInPlaceFrame_SetStatusText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceFrame_EnableModeless_Proxy(
    IOleInPlaceFrame* This,
    BOOL fEnable);
void __attribute__((__stdcall__)) IOleInPlaceFrame_EnableModeless_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceFrame_TranslateAccelerator_Proxy(
    IOleInPlaceFrame* This,
    LPMSG lpmsg,
    WORD wID);
void __attribute__((__stdcall__)) IOleInPlaceFrame_TranslateAccelerator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;
extern const GUID IID_IOleInPlaceActiveObject ;
typedef struct IOleInPlaceActiveObjectVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IOleInPlaceActiveObject* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IOleInPlaceActiveObject* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IOleInPlaceActiveObject* This);
    HRESULT (__attribute__((__stdcall__)) *GetWindow)(
        IOleInPlaceActiveObject* This,
        HWND *phwnd);
    HRESULT (__attribute__((__stdcall__)) *ContextSensitiveHelp)(
        IOleInPlaceActiveObject* This,
        BOOL fEnterMode);
    HRESULT (__attribute__((__stdcall__)) *TranslateAcceleratorA)(
        IOleInPlaceActiveObject* This,
        LPMSG lpmsg);
    HRESULT (__attribute__((__stdcall__)) *OnFrameWindowActivate)(
        IOleInPlaceActiveObject* This,
        BOOL fActivate);
    HRESULT (__attribute__((__stdcall__)) *OnDocWindowActivate)(
        IOleInPlaceActiveObject* This,
        BOOL fActivate);
    HRESULT (__attribute__((__stdcall__)) *ResizeBorder)(
        IOleInPlaceActiveObject* This,
        LPCRECT prcBorder,
        IOleInPlaceUIWindow *pUIWindow,
        BOOL fFrameWindow);
    HRESULT (__attribute__((__stdcall__)) *EnableModeless)(
        IOleInPlaceActiveObject* This,
        BOOL fEnable);
   
} IOleInPlaceActiveObjectVtbl;
struct IOleInPlaceActiveObject {
    IOleInPlaceActiveObjectVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(
    IOleInPlaceActiveObject* This);
void __attribute__((__stdcall__)) IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy(
    IOleInPlaceActiveObject* This,
    BOOL fActivate);
void __attribute__((__stdcall__)) IOleInPlaceActiveObject_OnFrameWindowActivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_OnDocWindowActivate_Proxy(
    IOleInPlaceActiveObject* This,
    BOOL fActivate);
void __attribute__((__stdcall__)) IOleInPlaceActiveObject_OnDocWindowActivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(
    IOleInPlaceActiveObject* This,
    LPCRECT prcBorder,
    const IID* const riid,
    IOleInPlaceUIWindow *pUIWindow,
    BOOL fFrameWindow);
void __attribute__((__stdcall__)) IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_EnableModeless_Proxy(
    IOleInPlaceActiveObject* This,
    BOOL fEnable);
void __attribute__((__stdcall__)) IOleInPlaceActiveObject_EnableModeless_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_TranslateAccelerator_Proxy(
    IOleInPlaceActiveObject* This,
    LPMSG lpmsg);
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_TranslateAccelerator_Stub(
    IOleInPlaceActiveObject* This);
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_ResizeBorder_Proxy(
    IOleInPlaceActiveObject* This,
    LPCRECT prcBorder,
    IOleInPlaceUIWindow *pUIWindow,
    BOOL fFrameWindow);
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_ResizeBorder_Stub(
    IOleInPlaceActiveObject* This,
    LPCRECT prcBorder,
    const IID* const riid,
    IOleInPlaceUIWindow *pUIWindow,
    BOOL fFrameWindow);
typedef IOleInPlaceSite *LPOLEINPLACESITE;
extern const GUID IID_IOleInPlaceSite ;
typedef struct IOleInPlaceSiteVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IOleInPlaceSite* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IOleInPlaceSite* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IOleInPlaceSite* This);
    HRESULT (__attribute__((__stdcall__)) *GetWindow)(
        IOleInPlaceSite* This,
        HWND *phwnd);
    HRESULT (__attribute__((__stdcall__)) *ContextSensitiveHelp)(
        IOleInPlaceSite* This,
        BOOL fEnterMode);
    HRESULT (__attribute__((__stdcall__)) *CanInPlaceActivate)(
        IOleInPlaceSite* This);
    HRESULT (__attribute__((__stdcall__)) *OnInPlaceActivate)(
        IOleInPlaceSite* This);
    HRESULT (__attribute__((__stdcall__)) *OnUIActivate)(
        IOleInPlaceSite* This);
    HRESULT (__attribute__((__stdcall__)) *GetWindowContext)(
        IOleInPlaceSite* This,
        IOleInPlaceFrame **ppFrame,
        IOleInPlaceUIWindow **ppDoc,
        LPRECT lprcPosRect,
        LPRECT lprcClipRect,
        LPOLEINPLACEFRAMEINFO lpFrameInfo);
    HRESULT (__attribute__((__stdcall__)) *Scroll)(
        IOleInPlaceSite* This,
        SIZE scrollExtent);
    HRESULT (__attribute__((__stdcall__)) *OnUIDeactivate)(
        IOleInPlaceSite* This,
        BOOL fUndoable);
    HRESULT (__attribute__((__stdcall__)) *OnInPlaceDeactivate)(
        IOleInPlaceSite* This);
    HRESULT (__attribute__((__stdcall__)) *DiscardUndoState)(
        IOleInPlaceSite* This);
    HRESULT (__attribute__((__stdcall__)) *DeactivateAndUndo)(
        IOleInPlaceSite* This);
    HRESULT (__attribute__((__stdcall__)) *OnPosRectChange)(
        IOleInPlaceSite* This,
        LPCRECT lprcPosRect);
   
} IOleInPlaceSiteVtbl;
struct IOleInPlaceSite {
    IOleInPlaceSiteVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_CanInPlaceActivate_Proxy(
    IOleInPlaceSite* This);
void __attribute__((__stdcall__)) IOleInPlaceSite_CanInPlaceActivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_OnInPlaceActivate_Proxy(
    IOleInPlaceSite* This);
void __attribute__((__stdcall__)) IOleInPlaceSite_OnInPlaceActivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_OnUIActivate_Proxy(
    IOleInPlaceSite* This);
void __attribute__((__stdcall__)) IOleInPlaceSite_OnUIActivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_GetWindowContext_Proxy(
    IOleInPlaceSite* This,
    IOleInPlaceFrame **ppFrame,
    IOleInPlaceUIWindow **ppDoc,
    LPRECT lprcPosRect,
    LPRECT lprcClipRect,
    LPOLEINPLACEFRAMEINFO lpFrameInfo);
void __attribute__((__stdcall__)) IOleInPlaceSite_GetWindowContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_Scroll_Proxy(
    IOleInPlaceSite* This,
    SIZE scrollExtent);
void __attribute__((__stdcall__)) IOleInPlaceSite_Scroll_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_OnUIDeactivate_Proxy(
    IOleInPlaceSite* This,
    BOOL fUndoable);
void __attribute__((__stdcall__)) IOleInPlaceSite_OnUIDeactivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_OnInPlaceDeactivate_Proxy(
    IOleInPlaceSite* This);
void __attribute__((__stdcall__)) IOleInPlaceSite_OnInPlaceDeactivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_DiscardUndoState_Proxy(
    IOleInPlaceSite* This);
void __attribute__((__stdcall__)) IOleInPlaceSite_DiscardUndoState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_DeactivateAndUndo_Proxy(
    IOleInPlaceSite* This);
void __attribute__((__stdcall__)) IOleInPlaceSite_DeactivateAndUndo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_OnPosRectChange_Proxy(
    IOleInPlaceSite* This,
    LPCRECT lprcPosRect);
void __attribute__((__stdcall__)) IOleInPlaceSite_OnPosRectChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IParseDisplayName *LPPARSEDISPLAYNAME;
extern const GUID IID_IParseDisplayName ;
typedef struct IParseDisplayNameVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IParseDisplayName* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IParseDisplayName* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IParseDisplayName* This);
    HRESULT (__attribute__((__stdcall__)) *ParseDisplayName)(
        IParseDisplayName* This,
        IBindCtx *pbc,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut);
   
} IParseDisplayNameVtbl;
struct IParseDisplayName {
    IParseDisplayNameVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IParseDisplayName_ParseDisplayName_Proxy(
    IParseDisplayName* This,
    IBindCtx *pbc,
    LPOLESTR pszDisplayName,
    ULONG *pchEaten,
    IMoniker **ppmkOut);
void __attribute__((__stdcall__)) IParseDisplayName_ParseDisplayName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleContainer *LPOLECONTAINER;
extern const GUID IID_IOleContainer ;
typedef struct IOleContainerVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IOleContainer* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IOleContainer* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IOleContainer* This);
    HRESULT (__attribute__((__stdcall__)) *ParseDisplayName)(
        IOleContainer* This,
        IBindCtx *pbc,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut);
    HRESULT (__attribute__((__stdcall__)) *EnumObjects)(
        IOleContainer* This,
        DWORD grfFlags,
        IEnumUnknown **ppenum);
    HRESULT (__attribute__((__stdcall__)) *LockContainer)(
        IOleContainer* This,
        BOOL fLock);
   
} IOleContainerVtbl;
struct IOleContainer {
    IOleContainerVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IOleContainer_EnumObjects_Proxy(
    IOleContainer* This,
    DWORD grfFlags,
    IEnumUnknown **ppenum);
void __attribute__((__stdcall__)) IOleContainer_EnumObjects_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleContainer_LockContainer_Proxy(
    IOleContainer* This,
    BOOL fLock);
void __attribute__((__stdcall__)) IOleContainer_LockContainer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleItemContainer *LPOLEITEMCONTAINER;
typedef enum tagBINDSPEED {
    BINDSPEED_INDEFINITE = 1,
    BINDSPEED_MODERATE = 2,
    BINDSPEED_IMMEDIATE = 3
} BINDSPEED;
typedef enum tagOLECONTF {
    OLECONTF_EMBEDDINGS = 1,
    OLECONTF_LINKS = 2,
    OLECONTF_OTHERS = 4,
    OLECONTF_ONLYUSER = 8,
    OLECONTF_ONLYIFRUNNING = 16
} OLECONTF;
extern const GUID IID_IOleItemContainer ;
typedef struct IOleItemContainerVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IOleItemContainer* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IOleItemContainer* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IOleItemContainer* This);
    HRESULT (__attribute__((__stdcall__)) *ParseDisplayName)(
        IOleItemContainer* This,
        IBindCtx *pbc,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut);
    HRESULT (__attribute__((__stdcall__)) *EnumObjects)(
        IOleItemContainer* This,
        DWORD grfFlags,
        IEnumUnknown **ppenum);
    HRESULT (__attribute__((__stdcall__)) *LockContainer)(
        IOleItemContainer* This,
        BOOL fLock);
    HRESULT (__attribute__((__stdcall__)) *GetObjectA)(
        IOleItemContainer* This,
        LPOLESTR pszItem,
        DWORD dwSpeedNeeded,
        IBindCtx *pbc,
        const IID* const riid,
        void **ppvObject);
    HRESULT (__attribute__((__stdcall__)) *GetObjectStorage)(
        IOleItemContainer* This,
        LPOLESTR pszItem,
        IBindCtx *pbc,
        const IID* const riid,
        void **ppvStorage);
    HRESULT (__attribute__((__stdcall__)) *IsRunning)(
        IOleItemContainer* This,
        LPOLESTR pszItem);
   
} IOleItemContainerVtbl;
struct IOleItemContainer {
    IOleItemContainerVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IOleItemContainer_GetObject_Proxy(
    IOleItemContainer* This,
    LPOLESTR pszItem,
    DWORD dwSpeedNeeded,
    IBindCtx *pbc,
    const IID* const riid,
    void **ppvObject);
void __attribute__((__stdcall__)) IOleItemContainer_GetObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleItemContainer_GetObjectStorage_Proxy(
    IOleItemContainer* This,
    LPOLESTR pszItem,
    IBindCtx *pbc,
    const IID* const riid,
    void **ppvStorage);
void __attribute__((__stdcall__)) IOleItemContainer_GetObjectStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleItemContainer_IsRunning_Proxy(
    IOleItemContainer* This,
    LPOLESTR pszItem);
void __attribute__((__stdcall__)) IOleItemContainer_IsRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleLink *LPOLELINK;
typedef enum tagOLEUPDATE {
    OLEUPDATE_ALWAYS = 1,
    OLEUPDATE_ONCALL = 3
} OLEUPDATE;
typedef enum tagOLEUPDATE *POLEUPDATE;
typedef enum tagOLEUPDATE *LPOLEUPDATE;
typedef enum tagOLELINKBIND {
    OLELINKBIND_EVENIFCLASSDIFF = 1
} OLELINKBIND;
extern const GUID IID_IOleLink ;
typedef struct IOleLinkVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IOleLink* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IOleLink* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IOleLink* This);
    HRESULT (__attribute__((__stdcall__)) *SetUpdateOptions)(
        IOleLink* This,
        DWORD dwUpdateOpt);
    HRESULT (__attribute__((__stdcall__)) *GetUpdateOptions)(
        IOleLink* This,
        DWORD *pdwUpdateOpt);
    HRESULT (__attribute__((__stdcall__)) *SetSourceMoniker)(
        IOleLink* This,
        IMoniker *pmk,
        const CLSID* const rclsid);
    HRESULT (__attribute__((__stdcall__)) *GetSourceMoniker)(
        IOleLink* This,
        IMoniker **ppmk);
    HRESULT (__attribute__((__stdcall__)) *SetSourceDisplayName)(
        IOleLink* This,
        LPCOLESTR pszStatusText);
    HRESULT (__attribute__((__stdcall__)) *GetSourceDisplayName)(
        IOleLink* This,
        LPOLESTR *ppszDisplayName);
    HRESULT (__attribute__((__stdcall__)) *BindToSource)(
        IOleLink* This,
        DWORD bindflags,
        IBindCtx *pbc);
    HRESULT (__attribute__((__stdcall__)) *BindIfRunning)(
        IOleLink* This);
    HRESULT (__attribute__((__stdcall__)) *GetBoundSource)(
        IOleLink* This,
        IUnknown **ppunk);
    HRESULT (__attribute__((__stdcall__)) *UnbindSource)(
        IOleLink* This);
    HRESULT (__attribute__((__stdcall__)) *Update)(
        IOleLink* This,
        IBindCtx *pbc);
   
} IOleLinkVtbl;
struct IOleLink {
    IOleLinkVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IOleLink_SetUpdateOptions_Proxy(
    IOleLink* This,
    DWORD dwUpdateOpt);
void __attribute__((__stdcall__)) IOleLink_SetUpdateOptions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_GetUpdateOptions_Proxy(
    IOleLink* This,
    DWORD *pdwUpdateOpt);
void __attribute__((__stdcall__)) IOleLink_GetUpdateOptions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_SetSourceMoniker_Proxy(
    IOleLink* This,
    IMoniker *pmk,
    const CLSID* const rclsid);
void __attribute__((__stdcall__)) IOleLink_SetSourceMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_GetSourceMoniker_Proxy(
    IOleLink* This,
    IMoniker **ppmk);
void __attribute__((__stdcall__)) IOleLink_GetSourceMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_SetSourceDisplayName_Proxy(
    IOleLink* This,
    LPCOLESTR pszStatusText);
void __attribute__((__stdcall__)) IOleLink_SetSourceDisplayName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_GetSourceDisplayName_Proxy(
    IOleLink* This,
    LPOLESTR *ppszDisplayName);
void __attribute__((__stdcall__)) IOleLink_GetSourceDisplayName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_BindToSource_Proxy(
    IOleLink* This,
    DWORD bindflags,
    IBindCtx *pbc);
void __attribute__((__stdcall__)) IOleLink_BindToSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_BindIfRunning_Proxy(
    IOleLink* This);
void __attribute__((__stdcall__)) IOleLink_BindIfRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_GetBoundSource_Proxy(
    IOleLink* This,
    IUnknown **ppunk);
void __attribute__((__stdcall__)) IOleLink_GetBoundSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_UnbindSource_Proxy(
    IOleLink* This);
void __attribute__((__stdcall__)) IOleLink_UnbindSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_Update_Proxy(
    IOleLink* This,
    IBindCtx *pbc);
void __attribute__((__stdcall__)) IOleLink_Update_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleClientSite *LPOLECLIENTSITE;
extern const GUID IID_IOleClientSite ;
typedef struct IOleClientSiteVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IOleClientSite* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IOleClientSite* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IOleClientSite* This);
    HRESULT (__attribute__((__stdcall__)) *SaveObject)(
        IOleClientSite* This);
    HRESULT (__attribute__((__stdcall__)) *GetMoniker)(
        IOleClientSite* This,
        DWORD dwAssign,
        DWORD dwWhichMoniker,
        IMoniker **ppmk);
    HRESULT (__attribute__((__stdcall__)) *GetContainer)(
        IOleClientSite* This,
        IOleContainer **ppContainer);
    HRESULT (__attribute__((__stdcall__)) *ShowObject)(
        IOleClientSite* This);
    HRESULT (__attribute__((__stdcall__)) *OnShowWindow)(
        IOleClientSite* This,
        BOOL fShow);
    HRESULT (__attribute__((__stdcall__)) *RequestNewObjectLayout)(
        IOleClientSite* This);
   
} IOleClientSiteVtbl;
struct IOleClientSite {
    IOleClientSiteVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IOleClientSite_SaveObject_Proxy(
    IOleClientSite* This);
void __attribute__((__stdcall__)) IOleClientSite_SaveObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleClientSite_GetMoniker_Proxy(
    IOleClientSite* This,
    DWORD dwAssign,
    DWORD dwWhichMoniker,
    IMoniker **ppmk);
void __attribute__((__stdcall__)) IOleClientSite_GetMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleClientSite_GetContainer_Proxy(
    IOleClientSite* This,
    IOleContainer **ppContainer);
void __attribute__((__stdcall__)) IOleClientSite_GetContainer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleClientSite_ShowObject_Proxy(
    IOleClientSite* This);
void __attribute__((__stdcall__)) IOleClientSite_ShowObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleClientSite_OnShowWindow_Proxy(
    IOleClientSite* This,
    BOOL fShow);
void __attribute__((__stdcall__)) IOleClientSite_OnShowWindow_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleClientSite_RequestNewObjectLayout_Proxy(
    IOleClientSite* This);
void __attribute__((__stdcall__)) IOleClientSite_RequestNewObjectLayout_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleCache *LPOLECACHE;
extern const GUID IID_IOleCache ;
typedef struct IOleCacheVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IOleCache* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IOleCache* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IOleCache* This);
    HRESULT (__attribute__((__stdcall__)) *Cache)(
        IOleCache* This,
        FORMATETC *pformatetc,
        DWORD advf,
        DWORD *pdwConnection);
    HRESULT (__attribute__((__stdcall__)) *Uncache)(
        IOleCache* This,
        DWORD dwConnection);
    HRESULT (__attribute__((__stdcall__)) *EnumCache)(
        IOleCache* This,
        IEnumSTATDATA **ppenumSTATDATA);
    HRESULT (__attribute__((__stdcall__)) *InitCache)(
        IOleCache* This,
        IDataObject *pDataObject);
    HRESULT (__attribute__((__stdcall__)) *SetData)(
        IOleCache* This,
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium,
        BOOL fRelease);
   
} IOleCacheVtbl;
struct IOleCache {
    IOleCacheVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IOleCache_Cache_Proxy(
    IOleCache* This,
    FORMATETC *pformatetc,
    DWORD advf,
    DWORD *pdwConnection);
void __attribute__((__stdcall__)) IOleCache_Cache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleCache_Uncache_Proxy(
    IOleCache* This,
    DWORD dwConnection);
void __attribute__((__stdcall__)) IOleCache_Uncache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleCache_EnumCache_Proxy(
    IOleCache* This,
    IEnumSTATDATA **ppenumSTATDATA);
void __attribute__((__stdcall__)) IOleCache_EnumCache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleCache_InitCache_Proxy(
    IOleCache* This,
    IDataObject *pDataObject);
void __attribute__((__stdcall__)) IOleCache_InitCache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleCache_SetData_Proxy(
    IOleCache* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pmedium,
    BOOL fRelease);
void __attribute__((__stdcall__)) IOleCache_SetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleCache2 *LPOLECACHE2;
typedef enum tagDISCARDCACHE {
    DISCARDCACHE_SAVEIFDIRTY = 0,
    DISCARDCACHE_NOSAVE = 1
} DISCARDCACHE;
extern const GUID IID_IOleCache2 ;
typedef struct IOleCache2Vtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IOleCache2* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IOleCache2* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IOleCache2* This);
    HRESULT (__attribute__((__stdcall__)) *Cache)(
        IOleCache2* This,
        FORMATETC *pformatetc,
        DWORD advf,
        DWORD *pdwConnection);
    HRESULT (__attribute__((__stdcall__)) *Uncache)(
        IOleCache2* This,
        DWORD dwConnection);
    HRESULT (__attribute__((__stdcall__)) *EnumCache)(
        IOleCache2* This,
        IEnumSTATDATA **ppenumSTATDATA);
    HRESULT (__attribute__((__stdcall__)) *InitCache)(
        IOleCache2* This,
        IDataObject *pDataObject);
    HRESULT (__attribute__((__stdcall__)) *SetData)(
        IOleCache2* This,
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium,
        BOOL fRelease);
    HRESULT (__attribute__((__stdcall__)) *UpdateCache)(
        IOleCache2* This,
        LPDATAOBJECT pDataObject,
        DWORD grfUpdf,
        LPVOID pReserved);
    HRESULT (__attribute__((__stdcall__)) *DiscardCache)(
        IOleCache2* This,
        DWORD dwDiscardOptions);
   
} IOleCache2Vtbl;
struct IOleCache2 {
    IOleCache2Vtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IOleCache2_RemoteUpdateCache_Proxy(
    IOleCache2* This,
    LPDATAOBJECT pDataObject,
    DWORD grfUpdf,
    LONG_PTR pReserved);
void __attribute__((__stdcall__)) IOleCache2_RemoteUpdateCache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleCache2_DiscardCache_Proxy(
    IOleCache2* This,
    DWORD dwDiscardOptions);
void __attribute__((__stdcall__)) IOleCache2_DiscardCache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleCache2_UpdateCache_Proxy(
    IOleCache2* This,
    LPDATAOBJECT pDataObject,
    DWORD grfUpdf,
    LPVOID pReserved);
HRESULT __attribute__((__stdcall__)) IOleCache2_UpdateCache_Stub(
    IOleCache2* This,
    LPDATAOBJECT pDataObject,
    DWORD grfUpdf,
    LONG_PTR pReserved);
typedef IOleCacheControl *LPOLECACHECONTROL;
extern const GUID IID_IOleCacheControl ;
typedef struct IOleCacheControlVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IOleCacheControl* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IOleCacheControl* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IOleCacheControl* This);
    HRESULT (__attribute__((__stdcall__)) *OnRun)(
        IOleCacheControl* This,
        LPDATAOBJECT pDataObject);
    HRESULT (__attribute__((__stdcall__)) *OnStop)(
        IOleCacheControl* This);
   
} IOleCacheControlVtbl;
struct IOleCacheControl {
    IOleCacheControlVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IOleCacheControl_OnRun_Proxy(
    IOleCacheControl* This,
    LPDATAOBJECT pDataObject);
void __attribute__((__stdcall__)) IOleCacheControl_OnRun_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleCacheControl_OnStop_Proxy(
    IOleCacheControl* This);
void __attribute__((__stdcall__)) IOleCacheControl_OnStop_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IEnumOLEVERB *LPENUMOLEVERB;
typedef struct tagOLEVERB {
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
} OLEVERB;
typedef struct tagOLEVERB *LPOLEVERB;
typedef enum tagOLEVERBATTRIB {
    OLEVERBATTRIB_NEVERDIRTIES = 1,
    OLEVERBATTRIB_ONCONTAINERMENU = 2
} OLEVERBATTRIB;
extern const GUID IID_IEnumOLEVERB ;
typedef struct IEnumOLEVERBVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IEnumOLEVERB* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IEnumOLEVERB* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IEnumOLEVERB* This);
    HRESULT (__attribute__((__stdcall__)) *Next)(
        IEnumOLEVERB* This,
        ULONG celt,
        LPOLEVERB rgelt,
        ULONG *pceltFetched);
    HRESULT (__attribute__((__stdcall__)) *Skip)(
        IEnumOLEVERB* This,
        ULONG celt);
    HRESULT (__attribute__((__stdcall__)) *Reset)(
        IEnumOLEVERB* This);
    HRESULT (__attribute__((__stdcall__)) *Clone)(
        IEnumOLEVERB* This,
        IEnumOLEVERB **ppenum);
   
} IEnumOLEVERBVtbl;
struct IEnumOLEVERB {
    IEnumOLEVERBVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IEnumOLEVERB_RemoteNext_Proxy(
    IEnumOLEVERB* This,
    ULONG celt,
    LPOLEVERB rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumOLEVERB_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumOLEVERB_Skip_Proxy(
    IEnumOLEVERB* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumOLEVERB_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumOLEVERB_Reset_Proxy(
    IEnumOLEVERB* This);
void __attribute__((__stdcall__)) IEnumOLEVERB_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumOLEVERB_Clone_Proxy(
    IEnumOLEVERB* This,
    IEnumOLEVERB **ppenum);
void __attribute__((__stdcall__)) IEnumOLEVERB_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumOLEVERB_Next_Proxy(
    IEnumOLEVERB* This,
    ULONG celt,
    LPOLEVERB rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumOLEVERB_Next_Stub(
    IEnumOLEVERB* This,
    ULONG celt,
    LPOLEVERB rgelt,
    ULONG *pceltFetched);
typedef IOleObject *LPOLEOBJECT;
typedef enum tagOLEGETMONIKER {
    OLEGETMONIKER_ONLYIFTHERE = 1,
    OLEGETMONIKER_FORCEASSIGN = 2,
    OLEGETMONIKER_UNASSIGN = 3,
    OLEGETMONIKER_TEMPFORUSER = 4
} OLEGETMONIKER;
typedef enum tagOLEWHICHMK {
    OLEWHICHMK_CONTAINER = 1,
    OLEWHICHMK_OBJREL = 2,
    OLEWHICHMK_OBJFULL = 3
} OLEWHICHMK;
typedef enum tagUSERCLASSTYPE {
    USERCLASSTYPE_FULL = 1,
    USERCLASSTYPE_SHORT = 2,
    USERCLASSTYPE_APPNAME = 3
} USERCLASSTYPE;
typedef enum tagOLEMISC {
    OLEMISC_RECOMPOSEONRESIZE = 0x1,
    OLEMISC_ONLYICONIC = 0x2,
    OLEMISC_INSERTNOTREPLACE = 0x4,
    OLEMISC_STATIC = 0x8,
    OLEMISC_CANTLINKINSIDE = 0x10,
    OLEMISC_CANLINKBYOLE1 = 0x20,
    OLEMISC_ISLINKOBJECT = 0x40,
    OLEMISC_INSIDEOUT = 0x80,
    OLEMISC_ACTIVATEWHENVISIBLE = 0x100,
    OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,
    OLEMISC_INVISIBLEATRUNTIME = 0x400,
    OLEMISC_ALWAYSRUN = 0x800,
    OLEMISC_ACTSLIKEBUTTON = 0x1000,
    OLEMISC_ACTSLIKELABEL = 0x2000,
    OLEMISC_NOUIACTIVATE = 0x4000,
    OLEMISC_ALIGNABLE = 0x8000,
    OLEMISC_SIMPLEFRAME = 0x10000,
    OLEMISC_SETCLIENTSITEFIRST = 0x20000,
    OLEMISC_IMEMODE = 0x40000,
    OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,
    OLEMISC_WANTSTOMENUMERGE = 0x100000,
    OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000
} OLEMISC;
typedef enum tagOLECLOSE {
    OLECLOSE_SAVEIFDIRTY = 0,
    OLECLOSE_NOSAVE = 1,
    OLECLOSE_PROMPTSAVE = 2
} OLECLOSE;
extern const GUID IID_IOleObject ;
typedef struct IOleObjectVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IOleObject* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IOleObject* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IOleObject* This);
    HRESULT (__attribute__((__stdcall__)) *SetClientSite)(
        IOleObject* This,
        IOleClientSite *pClientSite);
    HRESULT (__attribute__((__stdcall__)) *GetClientSite)(
        IOleObject* This,
        IOleClientSite **ppClientSite);
    HRESULT (__attribute__((__stdcall__)) *SetHostNames)(
        IOleObject* This,
        LPCOLESTR szContainerApp,
        LPCOLESTR szContainerObj);
    HRESULT (__attribute__((__stdcall__)) *Close)(
        IOleObject* This,
        DWORD dwSaveOption);
    HRESULT (__attribute__((__stdcall__)) *SetMoniker)(
        IOleObject* This,
        DWORD dwWhichMoniker,
        IMoniker *pmk);
    HRESULT (__attribute__((__stdcall__)) *GetMoniker)(
        IOleObject* This,
        DWORD dwAssign,
        DWORD dwWhichMoniker,
        IMoniker **ppmk);
    HRESULT (__attribute__((__stdcall__)) *InitFromData)(
        IOleObject* This,
        IDataObject *pDataObject,
        BOOL fCreation,
        DWORD dwReserved);
    HRESULT (__attribute__((__stdcall__)) *GetClipboardData)(
        IOleObject* This,
        DWORD dwReserved,
        IDataObject **ppDataObject);
    HRESULT (__attribute__((__stdcall__)) *DoVerb)(
        IOleObject* This,
        LONG iVerb,
        LPMSG lpmsg,
        IOleClientSite *pActiveSite,
        LONG lindex,
        HWND hwndParent,
        LPCRECT lprcPosRect);
    HRESULT (__attribute__((__stdcall__)) *EnumVerbs)(
        IOleObject* This,
        IEnumOLEVERB **ppEnumOleVerb);
    HRESULT (__attribute__((__stdcall__)) *Update)(
        IOleObject* This);
    HRESULT (__attribute__((__stdcall__)) *IsUpToDate)(
        IOleObject* This);
    HRESULT (__attribute__((__stdcall__)) *GetUserClassID)(
        IOleObject* This,
        CLSID *pClsid);
    HRESULT (__attribute__((__stdcall__)) *GetUserType)(
        IOleObject* This,
        DWORD dwFormOfType,
        LPOLESTR *pszUserType);
    HRESULT (__attribute__((__stdcall__)) *SetExtent)(
        IOleObject* This,
        DWORD dwDrawAspect,
        SIZEL *psizel);
    HRESULT (__attribute__((__stdcall__)) *GetExtent)(
        IOleObject* This,
        DWORD dwDrawAspect,
        SIZEL *psizel);
    HRESULT (__attribute__((__stdcall__)) *Advise)(
        IOleObject* This,
        IAdviseSink *pAdvSink,
        DWORD *pdwConnection);
    HRESULT (__attribute__((__stdcall__)) *Unadvise)(
        IOleObject* This,
        DWORD dwConnection);
    HRESULT (__attribute__((__stdcall__)) *EnumAdvise)(
        IOleObject* This,
        IEnumSTATDATA **ppenumAdvise);
    HRESULT (__attribute__((__stdcall__)) *GetMiscStatus)(
        IOleObject* This,
        DWORD dwAspect,
        DWORD *pdwStatus);
    HRESULT (__attribute__((__stdcall__)) *SetColorScheme)(
        IOleObject* This,
        LOGPALETTE *pLogpal);
   
} IOleObjectVtbl;
struct IOleObject {
    IOleObjectVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IOleObject_SetClientSite_Proxy(
    IOleObject* This,
    IOleClientSite *pClientSite);
void __attribute__((__stdcall__)) IOleObject_SetClientSite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_GetClientSite_Proxy(
    IOleObject* This,
    IOleClientSite **ppClientSite);
void __attribute__((__stdcall__)) IOleObject_GetClientSite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_SetHostNames_Proxy(
    IOleObject* This,
    LPCOLESTR szContainerApp,
    LPCOLESTR szContainerObj);
void __attribute__((__stdcall__)) IOleObject_SetHostNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_Close_Proxy(
    IOleObject* This,
    DWORD dwSaveOption);
void __attribute__((__stdcall__)) IOleObject_Close_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_SetMoniker_Proxy(
    IOleObject* This,
    DWORD dwWhichMoniker,
    IMoniker *pmk);
void __attribute__((__stdcall__)) IOleObject_SetMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_GetMoniker_Proxy(
    IOleObject* This,
    DWORD dwAssign,
    DWORD dwWhichMoniker,
    IMoniker **ppmk);
void __attribute__((__stdcall__)) IOleObject_GetMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_InitFromData_Proxy(
    IOleObject* This,
    IDataObject *pDataObject,
    BOOL fCreation,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IOleObject_InitFromData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_GetClipboardData_Proxy(
    IOleObject* This,
    DWORD dwReserved,
    IDataObject **ppDataObject);
void __attribute__((__stdcall__)) IOleObject_GetClipboardData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_DoVerb_Proxy(
    IOleObject* This,
    LONG iVerb,
    LPMSG lpmsg,
    IOleClientSite *pActiveSite,
    LONG lindex,
    HWND hwndParent,
    LPCRECT lprcPosRect);
void __attribute__((__stdcall__)) IOleObject_DoVerb_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_EnumVerbs_Proxy(
    IOleObject* This,
    IEnumOLEVERB **ppEnumOleVerb);
void __attribute__((__stdcall__)) IOleObject_EnumVerbs_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_Update_Proxy(
    IOleObject* This);
void __attribute__((__stdcall__)) IOleObject_Update_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_IsUpToDate_Proxy(
    IOleObject* This);
void __attribute__((__stdcall__)) IOleObject_IsUpToDate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_GetUserClassID_Proxy(
    IOleObject* This,
    CLSID *pClsid);
void __attribute__((__stdcall__)) IOleObject_GetUserClassID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_GetUserType_Proxy(
    IOleObject* This,
    DWORD dwFormOfType,
    LPOLESTR *pszUserType);
void __attribute__((__stdcall__)) IOleObject_GetUserType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_SetExtent_Proxy(
    IOleObject* This,
    DWORD dwDrawAspect,
    SIZEL *psizel);
void __attribute__((__stdcall__)) IOleObject_SetExtent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_GetExtent_Proxy(
    IOleObject* This,
    DWORD dwDrawAspect,
    SIZEL *psizel);
void __attribute__((__stdcall__)) IOleObject_GetExtent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_Advise_Proxy(
    IOleObject* This,
    IAdviseSink *pAdvSink,
    DWORD *pdwConnection);
void __attribute__((__stdcall__)) IOleObject_Advise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_Unadvise_Proxy(
    IOleObject* This,
    DWORD dwConnection);
void __attribute__((__stdcall__)) IOleObject_Unadvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_EnumAdvise_Proxy(
    IOleObject* This,
    IEnumSTATDATA **ppenumAdvise);
void __attribute__((__stdcall__)) IOleObject_EnumAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_GetMiscStatus_Proxy(
    IOleObject* This,
    DWORD dwAspect,
    DWORD *pdwStatus);
void __attribute__((__stdcall__)) IOleObject_GetMiscStatus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_SetColorScheme_Proxy(
    IOleObject* This,
    LOGPALETTE *pLogpal);
void __attribute__((__stdcall__)) IOleObject_SetColorScheme_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleAdviseHolder *LPOLEADVISEHOLDER;
extern const GUID IID_IOleAdviseHolder ;
typedef struct IOleAdviseHolderVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IOleAdviseHolder* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IOleAdviseHolder* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IOleAdviseHolder* This);
    HRESULT (__attribute__((__stdcall__)) *Advise)(
        IOleAdviseHolder* This,
        IAdviseSink *pAdvise,
        DWORD *pdwConnection);
    HRESULT (__attribute__((__stdcall__)) *Unadvise)(
        IOleAdviseHolder* This,
        DWORD dwConnection);
    HRESULT (__attribute__((__stdcall__)) *EnumAdvise)(
        IOleAdviseHolder* This,
        IEnumSTATDATA **ppenumAdvise);
    HRESULT (__attribute__((__stdcall__)) *SendOnRename)(
        IOleAdviseHolder* This,
        IMoniker *pmk);
    HRESULT (__attribute__((__stdcall__)) *SendOnSave)(
        IOleAdviseHolder* This);
    HRESULT (__attribute__((__stdcall__)) *SendOnClose)(
        IOleAdviseHolder* This);
   
} IOleAdviseHolderVtbl;
struct IOleAdviseHolder {
    IOleAdviseHolderVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IOleAdviseHolder_Advise_Proxy(
    IOleAdviseHolder* This,
    IAdviseSink *pAdvise,
    DWORD *pdwConnection);
void __attribute__((__stdcall__)) IOleAdviseHolder_Advise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleAdviseHolder_Unadvise_Proxy(
    IOleAdviseHolder* This,
    DWORD dwConnection);
void __attribute__((__stdcall__)) IOleAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleAdviseHolder_EnumAdvise_Proxy(
    IOleAdviseHolder* This,
    IEnumSTATDATA **ppenumAdvise);
void __attribute__((__stdcall__)) IOleAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleAdviseHolder_SendOnRename_Proxy(
    IOleAdviseHolder* This,
    IMoniker *pmk);
void __attribute__((__stdcall__)) IOleAdviseHolder_SendOnRename_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleAdviseHolder_SendOnSave_Proxy(
    IOleAdviseHolder* This);
void __attribute__((__stdcall__)) IOleAdviseHolder_SendOnSave_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleAdviseHolder_SendOnClose_Proxy(
    IOleAdviseHolder* This);
void __attribute__((__stdcall__)) IOleAdviseHolder_SendOnClose_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IContinue ;
typedef struct IContinueVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IContinue* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IContinue* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IContinue* This);
    HRESULT (__attribute__((__stdcall__)) *FContinue)(
        IContinue* This);
   
} IContinueVtbl;
struct IContinue {
    IContinueVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IContinue_FContinue_Proxy(
    IContinue* This);
void __attribute__((__stdcall__)) IContinue_FContinue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IViewObject *LPVIEWOBJECT;
extern const GUID IID_IViewObject ;
typedef struct IViewObjectVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IViewObject* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IViewObject* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IViewObject* This);
    HRESULT (__attribute__((__stdcall__)) *Draw)(
        IViewObject* This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DVTARGETDEVICE *ptd,
        HDC hdcTargetDev,
        HDC hdcDraw,
        LPCRECTL lprcBounds,
        LPCRECTL lprcWBounds,
        BOOL (__attribute__((__stdcall__)) *pfnContinue)(ULONG_PTR dwContinue),
        ULONG_PTR dwContinue);
    HRESULT (__attribute__((__stdcall__)) *GetColorSet)(
        IViewObject* This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DVTARGETDEVICE *ptd,
        HDC hicTargetDev,
        LOGPALETTE **ppColorSet);
    HRESULT (__attribute__((__stdcall__)) *Freeze)(
        IViewObject* This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DWORD *pdwFreeze);
    HRESULT (__attribute__((__stdcall__)) *Unfreeze)(
        IViewObject* This,
        DWORD dwFreeze);
    HRESULT (__attribute__((__stdcall__)) *SetAdvise)(
        IViewObject* This,
        DWORD aspects,
        DWORD advf,
        IAdviseSink *pAdvSink);
    HRESULT (__attribute__((__stdcall__)) *GetAdvise)(
        IViewObject* This,
        DWORD *pAspects,
        DWORD *pAdvf,
        IAdviseSink **ppAdvSink);
   
} IViewObjectVtbl;
struct IViewObject {
    IViewObjectVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IViewObject_RemoteDraw_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DVTARGETDEVICE *ptd,
    ULONG_PTR hdcTargetDev,
    ULONG_PTR hdcDraw,
    LPCRECTL lprcBounds,
    LPCRECTL lprcWBounds,
    IContinue *pContinue);
void __attribute__((__stdcall__)) IViewObject_RemoteDraw_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IViewObject_RemoteGetColorSet_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DVTARGETDEVICE *ptd,
    ULONG_PTR hicTargetDev,
    LOGPALETTE **ppColorSet);
void __attribute__((__stdcall__)) IViewObject_RemoteGetColorSet_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IViewObject_RemoteFreeze_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DWORD *pdwFreeze);
void __attribute__((__stdcall__)) IViewObject_RemoteFreeze_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IViewObject_Unfreeze_Proxy(
    IViewObject* This,
    DWORD dwFreeze);
void __attribute__((__stdcall__)) IViewObject_Unfreeze_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IViewObject_SetAdvise_Proxy(
    IViewObject* This,
    DWORD aspects,
    DWORD advf,
    IAdviseSink *pAdvSink);
void __attribute__((__stdcall__)) IViewObject_SetAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IViewObject_RemoteGetAdvise_Proxy(
    IViewObject* This,
    DWORD *pAspects,
    DWORD *pAdvf,
    IAdviseSink **ppAdvSink);
void __attribute__((__stdcall__)) IViewObject_RemoteGetAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IViewObject_Draw_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    void *pvAspect,
    DVTARGETDEVICE *ptd,
    HDC hdcTargetDev,
    HDC hdcDraw,
    LPCRECTL lprcBounds,
    LPCRECTL lprcWBounds,
    BOOL (__attribute__((__stdcall__)) *pfnContinue)(ULONG_PTR dwContinue),
    ULONG_PTR dwContinue);
HRESULT __attribute__((__stdcall__)) IViewObject_Draw_Stub(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DVTARGETDEVICE *ptd,
    ULONG_PTR hdcTargetDev,
    ULONG_PTR hdcDraw,
    LPCRECTL lprcBounds,
    LPCRECTL lprcWBounds,
    IContinue *pContinue);
HRESULT __attribute__((__stdcall__)) IViewObject_GetColorSet_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    void *pvAspect,
    DVTARGETDEVICE *ptd,
    HDC hicTargetDev,
    LOGPALETTE **ppColorSet);
HRESULT __attribute__((__stdcall__)) IViewObject_GetColorSet_Stub(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DVTARGETDEVICE *ptd,
    ULONG_PTR hicTargetDev,
    LOGPALETTE **ppColorSet);
HRESULT __attribute__((__stdcall__)) IViewObject_Freeze_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    void *pvAspect,
    DWORD *pdwFreeze);
HRESULT __attribute__((__stdcall__)) IViewObject_Freeze_Stub(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DWORD *pdwFreeze);
HRESULT __attribute__((__stdcall__)) IViewObject_GetAdvise_Proxy(
    IViewObject* This,
    DWORD *pAspects,
    DWORD *pAdvf,
    IAdviseSink **ppAdvSink);
HRESULT __attribute__((__stdcall__)) IViewObject_GetAdvise_Stub(
    IViewObject* This,
    DWORD *pAspects,
    DWORD *pAdvf,
    IAdviseSink **ppAdvSink);
typedef IViewObject2 *LPVIEWOBJECT2;
extern const GUID IID_IViewObject2 ;
typedef struct IViewObject2Vtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IViewObject2* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IViewObject2* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IViewObject2* This);
    HRESULT (__attribute__((__stdcall__)) *Draw)(
        IViewObject2* This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DVTARGETDEVICE *ptd,
        HDC hdcTargetDev,
        HDC hdcDraw,
        LPCRECTL lprcBounds,
        LPCRECTL lprcWBounds,
        BOOL (__attribute__((__stdcall__)) *pfnContinue)(ULONG_PTR dwContinue),
        ULONG_PTR dwContinue);
    HRESULT (__attribute__((__stdcall__)) *GetColorSet)(
        IViewObject2* This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DVTARGETDEVICE *ptd,
        HDC hicTargetDev,
        LOGPALETTE **ppColorSet);
    HRESULT (__attribute__((__stdcall__)) *Freeze)(
        IViewObject2* This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DWORD *pdwFreeze);
    HRESULT (__attribute__((__stdcall__)) *Unfreeze)(
        IViewObject2* This,
        DWORD dwFreeze);
    HRESULT (__attribute__((__stdcall__)) *SetAdvise)(
        IViewObject2* This,
        DWORD aspects,
        DWORD advf,
        IAdviseSink *pAdvSink);
    HRESULT (__attribute__((__stdcall__)) *GetAdvise)(
        IViewObject2* This,
        DWORD *pAspects,
        DWORD *pAdvf,
        IAdviseSink **ppAdvSink);
    HRESULT (__attribute__((__stdcall__)) *GetExtent)(
        IViewObject2* This,
        DWORD dwDrawAspect,
        LONG lindex,
        DVTARGETDEVICE *ptd,
        LPSIZEL lpsizel);
   
} IViewObject2Vtbl;
struct IViewObject2 {
    IViewObject2Vtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IViewObject2_GetExtent_Proxy(
    IViewObject2* This,
    DWORD dwDrawAspect,
    LONG lindex,
    DVTARGETDEVICE *ptd,
    LPSIZEL lpsizel);
void __attribute__((__stdcall__)) IViewObject2_GetExtent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IDropSource *LPDROPSOURCE;
extern const GUID IID_IDropSource ;
typedef struct IDropSourceVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IDropSource* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IDropSource* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IDropSource* This);
    HRESULT (__attribute__((__stdcall__)) *QueryContinueDrag)(
        IDropSource* This,
        BOOL fEscapePressed,
        DWORD grfKeyState);
    HRESULT (__attribute__((__stdcall__)) *GiveFeedback)(
        IDropSource* This,
        DWORD dwEffect);
   
} IDropSourceVtbl;
struct IDropSource {
    IDropSourceVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IDropSource_QueryContinueDrag_Proxy(
    IDropSource* This,
    BOOL fEscapePressed,
    DWORD grfKeyState);
void __attribute__((__stdcall__)) IDropSource_QueryContinueDrag_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDropSource_GiveFeedback_Proxy(
    IDropSource* This,
    DWORD dwEffect);
void __attribute__((__stdcall__)) IDropSource_GiveFeedback_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IDropTarget *LPDROPTARGET;
extern const GUID IID_IDropTarget ;
typedef struct IDropTargetVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IDropTarget* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IDropTarget* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IDropTarget* This);
    HRESULT (__attribute__((__stdcall__)) *DragEnter)(
        IDropTarget* This,
        IDataObject *pDataObj,
        DWORD grfKeyState,
        POINTL pt,
        DWORD *pdwEffect);
    HRESULT (__attribute__((__stdcall__)) *DragOver)(
        IDropTarget* This,
        DWORD grfKeyState,
        POINTL pt,
        DWORD *pdwEffect);
    HRESULT (__attribute__((__stdcall__)) *DragLeave)(
        IDropTarget* This);
    HRESULT (__attribute__((__stdcall__)) *Drop)(
        IDropTarget* This,
        IDataObject *pDataObj,
        DWORD grfKeyState,
        POINTL pt,
        DWORD *pdwEffect);
   
} IDropTargetVtbl;
struct IDropTarget {
    IDropTargetVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IDropTarget_DragEnter_Proxy(
    IDropTarget* This,
    IDataObject *pDataObj,
    DWORD grfKeyState,
    POINTL pt,
    DWORD *pdwEffect);
void __attribute__((__stdcall__)) IDropTarget_DragEnter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDropTarget_DragOver_Proxy(
    IDropTarget* This,
    DWORD grfKeyState,
    POINTL pt,
    DWORD *pdwEffect);
void __attribute__((__stdcall__)) IDropTarget_DragOver_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDropTarget_DragLeave_Proxy(
    IDropTarget* This);
void __attribute__((__stdcall__)) IDropTarget_DragLeave_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDropTarget_Drop_Proxy(
    IDropTarget* This,
    IDataObject *pDataObj,
    DWORD grfKeyState,
    POINTL pt,
    DWORD *pdwEffect);
void __attribute__((__stdcall__)) IDropTarget_Drop_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG __attribute__((__stdcall__)) HWND_UserSize (ULONG *, ULONG, HWND *);
unsigned char * __attribute__((__stdcall__)) HWND_UserMarshal (ULONG *, unsigned char *, HWND *);
unsigned char * __attribute__((__stdcall__)) HWND_UserUnmarshal(ULONG *, unsigned char *, HWND *);
void __attribute__((__stdcall__)) HWND_UserFree (ULONG *, HWND *);
ULONG __attribute__((__stdcall__)) HMENU_UserSize (ULONG *, ULONG, HMENU *);
unsigned char * __attribute__((__stdcall__)) HMENU_UserMarshal (ULONG *, unsigned char *, HMENU *);
unsigned char * __attribute__((__stdcall__)) HMENU_UserUnmarshal(ULONG *, unsigned char *, HMENU *);
void __attribute__((__stdcall__)) HMENU_UserFree (ULONG *, HMENU *);
ULONG __attribute__((__stdcall__)) HGLOBAL_UserSize (ULONG *, ULONG, HGLOBAL *);
unsigned char * __attribute__((__stdcall__)) HGLOBAL_UserMarshal (ULONG *, unsigned char *, HGLOBAL *);
unsigned char * __attribute__((__stdcall__)) HGLOBAL_UserUnmarshal(ULONG *, unsigned char *, HGLOBAL *);
void __attribute__((__stdcall__)) HGLOBAL_UserFree (ULONG *, HGLOBAL *);
ULONG __attribute__((__stdcall__)) HACCEL_UserSize (ULONG *, ULONG, HACCEL *);
unsigned char * __attribute__((__stdcall__)) HACCEL_UserMarshal (ULONG *, unsigned char *, HACCEL *);
unsigned char * __attribute__((__stdcall__)) HACCEL_UserUnmarshal(ULONG *, unsigned char *, HACCEL *);
void __attribute__((__stdcall__)) HACCEL_UserFree (ULONG *, HACCEL *);
ULONG __attribute__((__stdcall__)) CLIPFORMAT_UserSize (ULONG *, ULONG, CLIPFORMAT *);
unsigned char * __attribute__((__stdcall__)) CLIPFORMAT_UserMarshal (ULONG *, unsigned char *, CLIPFORMAT *);
unsigned char * __attribute__((__stdcall__)) CLIPFORMAT_UserUnmarshal(ULONG *, unsigned char *, CLIPFORMAT *);
void __attribute__((__stdcall__)) CLIPFORMAT_UserFree (ULONG *, CLIPFORMAT *);
ULONG __attribute__((__stdcall__)) STGMEDIUM_UserSize (ULONG *, ULONG, STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) STGMEDIUM_UserMarshal (ULONG *, unsigned char *, STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, STGMEDIUM *);
void __attribute__((__stdcall__)) STGMEDIUM_UserFree (ULONG *, STGMEDIUM *);
ULONG __attribute__((__stdcall__)) HDC_UserSize (ULONG *, ULONG, HDC *);
unsigned char * __attribute__((__stdcall__)) HDC_UserMarshal (ULONG *, unsigned char *, HDC *);
unsigned char * __attribute__((__stdcall__)) HDC_UserUnmarshal(ULONG *, unsigned char *, HDC *);
void __attribute__((__stdcall__)) HDC_UserFree (ULONG *, HDC *);
typedef struct IServiceProvider IServiceProvider;
typedef IServiceProvider *LPSERVICEPROVIDER;
extern const GUID IID_IServiceProvider ;
typedef struct IServiceProviderVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IServiceProvider* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IServiceProvider* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IServiceProvider* This);
    HRESULT (__attribute__((__stdcall__)) *QueryService)(
        IServiceProvider* This,
        const GUID* const guidService,
        const IID* const riid,
        void **ppvObject);
   
} IServiceProviderVtbl;
struct IServiceProvider {
    IServiceProviderVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IServiceProvider_RemoteQueryService_Proxy(
    IServiceProvider* This,
    const GUID* const guidService,
    const IID* const riid,
    IUnknown **ppvObject);
void __attribute__((__stdcall__)) IServiceProvider_RemoteQueryService_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IServiceProvider_QueryService_Proxy(
    IServiceProvider* This,
    const GUID* const guidService,
    const IID* const riid,
    void **ppvObject);
HRESULT __attribute__((__stdcall__)) IServiceProvider_QueryService_Stub(
    IServiceProvider* This,
    const GUID* const guidService,
    const IID* const riid,
    IUnknown **ppvObject);
typedef struct IXMLDOMNode IXMLDOMNode;
typedef struct IXMLDOMDocument IXMLDOMDocument;
typedef struct IXMLDOMNodeList IXMLDOMNodeList;
typedef struct IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;
typedef struct IXMLDOMDocumentFragment IXMLDOMDocumentFragment;
typedef struct IXMLDOMCharacterData IXMLDOMCharacterData;
typedef struct IXMLDOMAttribute IXMLDOMAttribute;
typedef struct IXMLDOMElement IXMLDOMElement;
typedef struct IXMLDOMText IXMLDOMText;
typedef struct IXMLDOMComment IXMLDOMComment;
typedef struct IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;
typedef struct IXMLDOMCDATASection IXMLDOMCDATASection;
typedef struct IXMLDOMDocumentType IXMLDOMDocumentType;
typedef struct IXMLDOMNotation IXMLDOMNotation;
typedef struct IXMLDOMEntity IXMLDOMEntity;
typedef struct IXMLDOMEntityReference IXMLDOMEntityReference;
typedef struct IXMLDOMImplementation IXMLDOMImplementation;
typedef struct IXMLDOMParseError IXMLDOMParseError;
typedef struct XMLDOMDocumentEvents XMLDOMDocumentEvents;
typedef struct DOMDocument DOMDocument;
typedef struct DOMFreeThreadedDocument DOMFreeThreadedDocument;
typedef struct IXMLHttpRequest IXMLHttpRequest;
typedef struct XMLHTTPRequest XMLHTTPRequest;
typedef struct IXMLDSOControl IXMLDSOControl;
typedef struct XMLDSOControl XMLDSOControl;
typedef struct IXMLElementCollection IXMLElementCollection;
typedef struct IXMLElement IXMLElement;
typedef struct IXMLDocument IXMLDocument;
typedef struct IXMLElement2 IXMLElement2;
typedef struct IXMLDocument2 IXMLDocument2;
typedef struct IXMLAttribute IXMLAttribute;
typedef struct IXMLError IXMLError;
typedef struct IXMLElementNotificationSink IXMLElementNotificationSink;
typedef struct XMLDocument XMLDocument;
typedef struct IDispatch IDispatch;
typedef struct IEnumVARIANT IEnumVARIANT;
typedef struct ITypeComp ITypeComp;
typedef struct ITypeInfo ITypeInfo;
typedef struct ITypeInfo2 ITypeInfo2;
typedef struct ITypeLib ITypeLib;
typedef struct ITypeLib2 ITypeLib2;
typedef struct ITypeChangeEvents ITypeChangeEvents;
typedef struct IErrorInfo IErrorInfo;
typedef struct ICreateErrorInfo ICreateErrorInfo;
typedef struct ISupportErrorInfo ISupportErrorInfo;
typedef struct ITypeFactory ITypeFactory;
typedef struct ITypeMarshal ITypeMarshal;
typedef struct IRecordInfo IRecordInfo;
typedef struct ICreateTypeInfo ICreateTypeInfo;
typedef struct ICreateTypeInfo2 ICreateTypeInfo2;
typedef struct ICreateTypeLib ICreateTypeLib;
typedef struct ICreateTypeLib2 ICreateTypeLib2;
typedef struct IErrorLog IErrorLog;
typedef struct IPropertyBag IPropertyBag;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
typedef CY CURRENCY;
typedef struct tagSAFEARRAYBOUND {
    ULONG cElements;
    LONG lLbound;
} SAFEARRAYBOUND;
typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;
typedef struct _wireVARIANT *wireVARIANT;
typedef struct _wireBRECORD *wireBRECORD;
typedef struct _wireSAFEARR_BSTR {
    ULONG Size;
    wireBSTR *aBstr;
} SAFEARR_BSTR;
typedef struct _wireSAFEARR_UNKNOWN {
    ULONG Size;
    IUnknown **apUnknown;
} SAFEARR_UNKNOWN;
typedef struct _wireSAFEARR_DISPATCH {
    ULONG Size;
    IDispatch **apDispatch;
} SAFEARR_DISPATCH;
typedef struct _wireSAFEARR_VARIANT {
    ULONG Size;
    wireVARIANT *aVariant;
} SAFEARR_VARIANT;
typedef struct _wireSAFEARR_BRECORD {
    ULONG Size;
    wireBRECORD *aRecord;
} SAFEARR_BRECORD;
typedef struct _wireSAFEARR_HAVEIID {
    ULONG Size;
    IUnknown **apUnknown;
    IID iid;
} SAFEARR_HAVEIID;
typedef enum tagSF_TYPE {
    SF_ERROR = VT_ERROR,
    SF_I1 = VT_I1,
    SF_I2 = VT_I2,
    SF_I4 = VT_I4,
    SF_I8 = VT_I8,
    SF_BSTR = VT_BSTR,
    SF_UNKNOWN = VT_UNKNOWN,
    SF_DISPATCH = VT_DISPATCH,
    SF_VARIANT = VT_VARIANT,
    SF_RECORD = VT_RECORD,
    SF_HAVEIID = VT_UNKNOWN | VT_RESERVED
} SF_TYPE;
typedef struct _wireSAFEARRAY_UNION {
    ULONG sfType;
    union {
        SAFEARR_BSTR BstrStr;
        SAFEARR_UNKNOWN UnknownStr;
        SAFEARR_DISPATCH DispatchStr;
        SAFEARR_VARIANT VariantStr;
        SAFEARR_BRECORD RecordStr;
        SAFEARR_HAVEIID HaveIidStr;
        BYTE_SIZEDARR ByteStr;
        WORD_SIZEDARR WordStr;
        DWORD_SIZEDARR LongStr;
        HYPER_SIZEDARR HyperStr;
    } u;
} SAFEARRAYUNION;
typedef struct _wireSAFEARRAY {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
    SAFEARRAYBOUND rgsabound[1];
} *wireSAFEARRAY;
typedef wireSAFEARRAY *wirePSAFEARRAY;
typedef struct tagSAFEARRAY {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[1];
} SAFEARRAY;
typedef SAFEARRAY *LPSAFEARRAY;
typedef struct tagVARIANT VARIANT;
struct tagVARIANT {
    union {
        struct __tagVARIANT {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union {
                signed char cVal;
                USHORT uiVal;
                ULONG ulVal;
                INT intVal;
                UINT uintVal;
                BYTE bVal;
                SHORT iVal;
                LONG lVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                SCODE scode;
                DATE date;
                BSTR bstrVal;
                CY cyVal;
                IUnknown *punkVal;
                IDispatch *pdispVal;
                SAFEARRAY *parray;
                LONGLONG llVal;
                ULONGLONG ullVal;
                signed char *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                INT *pintVal;
                UINT *puintVal;
                BYTE *pbVal;
                SHORT *piVal;
                LONG *plVal;
                FLOAT *pfltVal;
                DOUBLE *pdblVal;
                VARIANT_BOOL *pboolVal;
                SCODE *pscode;
                DATE *pdate;
                BSTR *pbstrVal;
                VARIANT *pvarVal;
                PVOID byref;
                CY *pcyVal;
                DECIMAL *pdecVal;
                IUnknown **ppunkVal;
                IDispatch **ppdispVal;
                SAFEARRAY **pparray;
                LONGLONG *pllVal;
                ULONGLONG *pullVal;
                struct __tagBRECORD {
                    PVOID pvRecord;
                    IRecordInfo *pRecInfo;
                } brecVal;
            } n3;
        } n2;
        DECIMAL decVal;
    } n1;
};
typedef VARIANT *LPVARIANT;
typedef VARIANT VARIANTARG;
typedef VARIANTARG *LPVARIANTARG;
struct _wireBRECORD {
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo *pRecInfo;
    byte *pRecord;
};
struct _wireVARIANT {
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
    union {
        signed char cVal;
        USHORT uiVal;
        ULONG ulVal;
        INT intVal;
        UINT uintVal;
        BYTE bVal;
        SHORT iVal;
        LONG lVal;
        FLOAT fltVal;
        DOUBLE dblVal;
        VARIANT_BOOL boolVal;
        SCODE scode;
        DATE date;
        wireBSTR bstrVal;
        CY cyVal;
        DECIMAL decVal;
        IUnknown *punkVal;
        IDispatch *pdispVal;
        wireSAFEARRAY parray;
        signed char *pcVal;
        USHORT *puiVal;
        ULONG *pulVal;
        INT *pintVal;
        UINT *puintVal;
        BYTE *pbVal;
        SHORT *piVal;
        LONG *plVal;
        FLOAT *pfltVal;
        DOUBLE *pdblVal;
        VARIANT_BOOL *pboolVal;
        SCODE *pscode;
        DATE *pdate;
        wireBSTR *pbstrVal;
        wireVARIANT *pvarVal;
        CY *pcyVal;
        DECIMAL *pdecVal;
        IUnknown **ppunkVal;
        IDispatch **ppdispVal;
        wireSAFEARRAY *pparray;
        wireBRECORD brecVal;
    } ;
};
typedef LONG DISPID;
typedef DWORD HREFTYPE;
typedef DISPID MEMBERID;
typedef enum tagTYPEKIND {
    TKIND_ENUM = 0,
    TKIND_RECORD = 1,
    TKIND_MODULE = 2,
    TKIND_INTERFACE = 3,
    TKIND_DISPATCH = 4,
    TKIND_COCLASS = 5,
    TKIND_ALIAS = 6,
    TKIND_UNION = 7,
    TKIND_MAX = 8
} TYPEKIND;
typedef struct tagTYPEDESC {
    union {
        struct tagTYPEDESC *lptdesc;
        struct tagARRAYDESC *lpadesc;
        HREFTYPE hreftype;
    } ;
    VARTYPE vt;
} TYPEDESC;
typedef struct tagARRAYDESC {
    TYPEDESC tdescElem;
    USHORT cDims;
    SAFEARRAYBOUND rgbounds[1];
} ARRAYDESC;
typedef struct tagPARAMDESCEX {
    ULONG cBytes;
    VARIANTARG varDefaultValue;
} PARAMDESCEX;
typedef struct tagPARAMDESCEX *LPPARAMDESCEX;
typedef struct tagPARAMDESC {
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
} PARAMDESC;
typedef struct tagPARAMDESC *LPPARAMDESC;
typedef struct tagIDLDESC {
    ULONG_PTR dwReserved;
    USHORT wIDLFlags;
} IDLDESC;
typedef struct tagIDLDESC *LPIDLDESC;
typedef struct tagELEMDESC {
  TYPEDESC tdesc;
  union {
    IDLDESC idldesc;
    PARAMDESC paramdesc;
  } ;
} ELEMDESC, *LPELEMDESC;
typedef struct tagTYPEATTR {
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
} TYPEATTR;
typedef struct tagTYPEATTR *LPTYPEATTR;
typedef struct tagDISPPARAMS {
    VARIANTARG *rgvarg;
    DISPID *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
} DISPPARAMS;
typedef struct tagEXCEPINFO {
  WORD wCode;
  WORD wReserved;
  BSTR bstrSource;
  BSTR bstrDescription;
  BSTR bstrHelpFile;
  DWORD dwHelpContext;
  PVOID pvReserved;
  HRESULT (__attribute__((__stdcall__)) *pfnDeferredFillIn)(struct tagEXCEPINFO *);
  SCODE scode;
} EXCEPINFO, *LPEXCEPINFO;
typedef enum tagCALLCONV {
    CC_FASTCALL = 0,
    CC_CDECL = 1,
    CC_MSCPASCAL = 2,
    CC_PASCAL = CC_MSCPASCAL,
    CC_MACPASCAL = 3,
    CC_STDCALL = 4,
    CC_FPFASTCALL = 5,
    CC_SYSCALL = 6,
    CC_MPWCDECL = 7,
    CC_MPWPASCAL = 8,
    CC_MAX = 9
} CALLCONV;
typedef enum tagFUNCKIND {
    FUNC_VIRTUAL = 0,
    FUNC_PUREVIRTUAL = 1,
    FUNC_NONVIRTUAL = 2,
    FUNC_STATIC = 3,
    FUNC_DISPATCH = 4
} FUNCKIND;
typedef enum tagINVOKEKIND {
    INVOKE_FUNC = 1,
    INVOKE_PROPERTYGET = 2,
    INVOKE_PROPERTYPUT = 4,
    INVOKE_PROPERTYPUTREF = 8
} INVOKEKIND;
typedef struct tagFUNCDESC {
    MEMBERID memid;
    SCODE *lprgscode;
    ELEMDESC *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
} FUNCDESC;
typedef struct tagFUNCDESC *LPFUNCDESC;
typedef enum tagVARKIND {
    VAR_PERINSTANCE = 0,
    VAR_STATIC = 1,
    VAR_CONST = 2,
    VAR_DISPATCH = 3
} VARKIND;
typedef struct tagVARDESC {
    MEMBERID memid;
    LPOLESTR lpstrSchema;
    union {
        ULONG oInst;
        VARIANT *lpvarValue;
    } ;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
} VARDESC;
typedef struct tagVARDESC *LPVARDESC;
typedef enum tagTYPEFLAGS {
    TYPEFLAG_FAPPOBJECT = 0x1,
    TYPEFLAG_FCANCREATE = 0x2,
    TYPEFLAG_FLICENSED = 0x4,
    TYPEFLAG_FPREDECLID = 0x8,
    TYPEFLAG_FHIDDEN = 0x10,
    TYPEFLAG_FCONTROL = 0x20,
    TYPEFLAG_FDUAL = 0x40,
    TYPEFLAG_FNONEXTENSIBLE = 0x80,
    TYPEFLAG_FOLEAUTOMATION = 0x100,
    TYPEFLAG_FRESTRICTED = 0x200,
    TYPEFLAG_FAGGREGATABLE = 0x400,
    TYPEFLAG_FREPLACEABLE = 0x800,
    TYPEFLAG_FDISPATCHABLE = 0x1000,
    TYPEFLAG_FREVERSEBIND = 0x2000,
    TYPEFLAG_FPROXY = 0x4000
} TYPEFLAGS;
typedef enum tagFUNCFLAGS {
    FUNCFLAG_FRESTRICTED = 0x1,
    FUNCFLAG_FSOURCE = 0x2,
    FUNCFLAG_FBINDABLE = 0x4,
    FUNCFLAG_FREQUESTEDIT = 0x8,
    FUNCFLAG_FDISPLAYBIND = 0x10,
    FUNCFLAG_FDEFAULTBIND = 0x20,
    FUNCFLAG_FHIDDEN = 0x40,
    FUNCFLAG_FUSESGETLASTERROR = 0x80,
    FUNCFLAG_FDEFAULTCOLLELEM = 0x100,
    FUNCFLAG_FUIDEFAULT = 0x200,
    FUNCFLAG_FNONBROWSABLE = 0x400,
    FUNCFLAG_FREPLACEABLE = 0x800,
    FUNCFLAG_FIMMEDIATEBIND = 0x1000
} FUNCFLAGS;
typedef enum tagVARFLAGS {
    VARFLAG_FREADONLY = 0x1,
    VARFLAG_FSOURCE = 0x2,
    VARFLAG_FBINDABLE = 0x4,
    VARFLAG_FREQUESTEDIT = 0x8,
    VARFLAG_FDISPLAYBIND = 0x10,
    VARFLAG_FDEFAULTBIND = 0x20,
    VARFLAG_FHIDDEN = 0x40,
    VARFLAG_FRESTRICTED = 0x80,
    VARFLAG_FDEFAULTCOLLELEM = 0x100,
    VARFLAG_FUIDEFAULT = 0x200,
    VARFLAG_FNONBROWSABLE = 0x400,
    VARFLAG_FREPLACEABLE = 0x800,
    VARFLAG_FIMMEDIATEBIND = 0x1000
} VARFLAGS;
typedef struct tagCLEANLOCALSTORAGE {
    IUnknown *pInterface;
    PVOID pStorage;
    DWORD flags;
} CLEANLOCALSTORAGE;
typedef struct tagCUSTDATAITEM {
    GUID guid;
    VARIANTARG varValue;
} CUSTDATAITEM;
typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;
typedef struct tagCUSTDATA {
    DWORD cCustData;
    LPCUSTDATAITEM prgCustData;
} CUSTDATA;
typedef struct tagCUSTDATA *LPCUSTDATA;
typedef IDispatch *LPDISPATCH;
extern const GUID IID_IDispatch ;
typedef struct IDispatchVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IDispatch* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IDispatch* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IDispatch* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IDispatch* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IDispatch* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IDispatch* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IDispatch* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
   
} IDispatchVtbl;
struct IDispatch {
    IDispatchVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IDispatch_GetTypeInfoCount_Proxy(
    IDispatch* This,
    UINT *pctinfo);
void __attribute__((__stdcall__)) IDispatch_GetTypeInfoCount_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDispatch_GetTypeInfo_Proxy(
    IDispatch* This,
    UINT iTInfo,
    LCID lcid,
    ITypeInfo **ppTInfo);
void __attribute__((__stdcall__)) IDispatch_GetTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDispatch_GetIDsOfNames_Proxy(
    IDispatch* This,
    const IID* const riid,
    LPOLESTR *rgszNames,
    UINT cNames,
    LCID lcid,
    DISPID *rgDispId);
void __attribute__((__stdcall__)) IDispatch_GetIDsOfNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDispatch_RemoteInvoke_Proxy(
    IDispatch* This,
    DISPID dispIdMember,
    const IID* const riid,
    LCID lcid,
    DWORD dwFlags,
    DISPPARAMS *pDispParams,
    VARIANT *pVarResult,
    EXCEPINFO *pExcepInfo,
    UINT *pArgErr,
    UINT cVarRef,
    UINT *rgVarRefIdx,
    VARIANTARG *rgVarRef);
void __attribute__((__stdcall__)) IDispatch_RemoteInvoke_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDispatch_Invoke_Proxy(
    IDispatch* This,
    DISPID dispIdMember,
    const IID* const riid,
    LCID lcid,
    WORD wFlags,
    DISPPARAMS *pDispParams,
    VARIANT *pVarResult,
    EXCEPINFO *pExcepInfo,
    UINT *puArgErr);
HRESULT __attribute__((__stdcall__)) IDispatch_Invoke_Stub(
    IDispatch* This,
    DISPID dispIdMember,
    const IID* const riid,
    LCID lcid,
    DWORD dwFlags,
    DISPPARAMS *pDispParams,
    VARIANT *pVarResult,
    EXCEPINFO *pExcepInfo,
    UINT *pArgErr,
    UINT cVarRef,
    UINT *rgVarRefIdx,
    VARIANTARG *rgVarRef);
typedef IEnumVARIANT *LPENUMVARIANT;
extern const GUID IID_IEnumVARIANT ;
typedef struct IEnumVARIANTVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IEnumVARIANT* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IEnumVARIANT* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IEnumVARIANT* This);
    HRESULT (__attribute__((__stdcall__)) *Next)(
        IEnumVARIANT* This,
        ULONG celt,
        VARIANT *rgVar,
        ULONG *pCeltFetched);
    HRESULT (__attribute__((__stdcall__)) *Skip)(
        IEnumVARIANT* This,
        ULONG celt);
    HRESULT (__attribute__((__stdcall__)) *Reset)(
        IEnumVARIANT* This);
    HRESULT (__attribute__((__stdcall__)) *Clone)(
        IEnumVARIANT* This,
        IEnumVARIANT **ppEnum);
   
} IEnumVARIANTVtbl;
struct IEnumVARIANT {
    IEnumVARIANTVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IEnumVARIANT_RemoteNext_Proxy(
    IEnumVARIANT* This,
    ULONG celt,
    VARIANT *rgVar,
    ULONG *pCeltFetched);
void __attribute__((__stdcall__)) IEnumVARIANT_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumVARIANT_Skip_Proxy(
    IEnumVARIANT* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumVARIANT_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumVARIANT_Reset_Proxy(
    IEnumVARIANT* This);
void __attribute__((__stdcall__)) IEnumVARIANT_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumVARIANT_Clone_Proxy(
    IEnumVARIANT* This,
    IEnumVARIANT **ppEnum);
void __attribute__((__stdcall__)) IEnumVARIANT_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumVARIANT_Next_Proxy(
    IEnumVARIANT* This,
    ULONG celt,
    VARIANT *rgVar,
    ULONG *pCeltFetched);
HRESULT __attribute__((__stdcall__)) IEnumVARIANT_Next_Stub(
    IEnumVARIANT* This,
    ULONG celt,
    VARIANT *rgVar,
    ULONG *pCeltFetched);
typedef ITypeComp *LPTYPECOMP;
typedef enum tagDESCKIND {
    DESCKIND_NONE = 0,
    DESCKIND_FUNCDESC = 1,
    DESCKIND_VARDESC = 2,
    DESCKIND_TYPECOMP = 3,
    DESCKIND_IMPLICITAPPOBJ = 4,
    DESCKIND_MAX = 5
} DESCKIND;
typedef union tagBINDPTR {
    FUNCDESC *lpfuncdesc;
    VARDESC *lpvardesc;
    ITypeComp *lptcomp;
} BINDPTR;
typedef union tagBINDPTR *LPBINDPTR;
extern const GUID IID_ITypeComp ;
typedef struct ITypeCompVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ITypeComp* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ITypeComp* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ITypeComp* This);
    HRESULT (__attribute__((__stdcall__)) *Bind)(
        ITypeComp* This,
        LPOLESTR szName,
        ULONG lHashVal,
        WORD wFlags,
        ITypeInfo **ppTInfo,
        DESCKIND *pDescKind,
        BINDPTR *pBindPtr);
    HRESULT (__attribute__((__stdcall__)) *BindType)(
        ITypeComp* This,
        LPOLESTR szName,
        ULONG lHashVal,
        ITypeInfo **ppTInfo,
        ITypeComp **ppTComp);
   
} ITypeCompVtbl;
struct ITypeComp {
    ITypeCompVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ITypeComp_RemoteBind_Proxy(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    WORD wFlags,
    ITypeInfo **ppTInfo,
    DESCKIND *pDescKind,
    LPFUNCDESC *ppFuncDesc,
    LPVARDESC *ppVarDesc,
    ITypeComp **ppTypeComp,
    CLEANLOCALSTORAGE *pDummy);
void __attribute__((__stdcall__)) ITypeComp_RemoteBind_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeComp_RemoteBindType_Proxy(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    ITypeInfo **ppTInfo);
void __attribute__((__stdcall__)) ITypeComp_RemoteBindType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeComp_Bind_Proxy(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    WORD wFlags,
    ITypeInfo **ppTInfo,
    DESCKIND *pDescKind,
    BINDPTR *pBindPtr);
HRESULT __attribute__((__stdcall__)) ITypeComp_Bind_Stub(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    WORD wFlags,
    ITypeInfo **ppTInfo,
    DESCKIND *pDescKind,
    LPFUNCDESC *ppFuncDesc,
    LPVARDESC *ppVarDesc,
    ITypeComp **ppTypeComp,
    CLEANLOCALSTORAGE *pDummy);
HRESULT __attribute__((__stdcall__)) ITypeComp_BindType_Proxy(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    ITypeInfo **ppTInfo,
    ITypeComp **ppTComp);
HRESULT __attribute__((__stdcall__)) ITypeComp_BindType_Stub(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    ITypeInfo **ppTInfo);
typedef ITypeInfo *LPTYPEINFO;
extern const GUID IID_ITypeInfo ;
typedef struct ITypeInfoVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ITypeInfo* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ITypeInfo* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ITypeInfo* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeAttr)(
        ITypeInfo* This,
        TYPEATTR **ppTypeAttr);
    HRESULT (__attribute__((__stdcall__)) *GetTypeComp)(
        ITypeInfo* This,
        ITypeComp **ppTComp);
    HRESULT (__attribute__((__stdcall__)) *GetFuncDesc)(
        ITypeInfo* This,
        UINT index,
        FUNCDESC **ppFuncDesc);
    HRESULT (__attribute__((__stdcall__)) *GetVarDesc)(
        ITypeInfo* This,
        UINT index,
        VARDESC **ppVarDesc);
    HRESULT (__attribute__((__stdcall__)) *GetNames)(
        ITypeInfo* This,
        MEMBERID memid,
        BSTR *rgBstrNames,
        UINT cMaxNames,
        UINT *pcNames);
    HRESULT (__attribute__((__stdcall__)) *GetRefTypeOfImplType)(
        ITypeInfo* This,
        UINT index,
        HREFTYPE *pRefType);
    HRESULT (__attribute__((__stdcall__)) *GetImplTypeFlags)(
        ITypeInfo* This,
        UINT index,
        INT *pImplTypeFlags);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        ITypeInfo* This,
        LPOLESTR *rgszNames,
        UINT cNames,
        MEMBERID *pMemId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        ITypeInfo* This,
        PVOID pvInstance,
        MEMBERID memid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *GetDocumentation)(
        ITypeInfo* This,
        MEMBERID memid,
        BSTR *pBstrName,
        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,
        BSTR *pBstrHelpFile);
    HRESULT (__attribute__((__stdcall__)) *GetDllEntry)(
        ITypeInfo* This,
        MEMBERID memid,
        INVOKEKIND invKind,
        BSTR *pBstrDllName,
        BSTR *pBstrName,
        WORD *pwOrdinal);
    HRESULT (__attribute__((__stdcall__)) *GetRefTypeInfo)(
        ITypeInfo* This,
        HREFTYPE hRefType,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *AddressOfMember)(
        ITypeInfo* This,
        MEMBERID memid,
        INVOKEKIND invKind,
        PVOID *ppv);
    HRESULT (__attribute__((__stdcall__)) *CreateInstance)(
        ITypeInfo* This,
        IUnknown *pUnkOuter,
        const IID* const riid,
        PVOID *ppvObj);
    HRESULT (__attribute__((__stdcall__)) *GetMops)(
        ITypeInfo* This,
        MEMBERID memid,
        BSTR *pBstrMops);
    HRESULT (__attribute__((__stdcall__)) *GetContainingTypeLib)(
        ITypeInfo* This,
        ITypeLib **ppTLib,
        UINT *pIndex);
    void (__attribute__((__stdcall__)) *ReleaseTypeAttr)(
        ITypeInfo* This,
        TYPEATTR *pTypeAttr);
    void (__attribute__((__stdcall__)) *ReleaseFuncDesc)(
        ITypeInfo* This,
        FUNCDESC *pFuncDesc);
    void (__attribute__((__stdcall__)) *ReleaseVarDesc)(
        ITypeInfo* This,
        VARDESC *pVarDesc);
   
} ITypeInfoVtbl;
struct ITypeInfo {
    ITypeInfoVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ITypeInfo_RemoteGetTypeAttr_Proxy(
    ITypeInfo* This,
    LPTYPEATTR *ppTypeAttr,
    CLEANLOCALSTORAGE *pDummy);
void __attribute__((__stdcall__)) ITypeInfo_RemoteGetTypeAttr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetTypeComp_Proxy(
    ITypeInfo* This,
    ITypeComp **ppTComp);
void __attribute__((__stdcall__)) ITypeInfo_GetTypeComp_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_RemoteGetFuncDesc_Proxy(
    ITypeInfo* This,
    UINT index,
    LPFUNCDESC *ppFuncDesc,
    CLEANLOCALSTORAGE *pDummy);
void __attribute__((__stdcall__)) ITypeInfo_RemoteGetFuncDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_RemoteGetVarDesc_Proxy(
    ITypeInfo* This,
    UINT index,
    LPVARDESC *ppVarDesc,
    CLEANLOCALSTORAGE *pDummy);
void __attribute__((__stdcall__)) ITypeInfo_RemoteGetVarDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_RemoteGetNames_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *rgBstrNames,
    UINT cMaxNames,
    UINT *pcNames);
void __attribute__((__stdcall__)) ITypeInfo_RemoteGetNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetRefTypeOfImplType_Proxy(
    ITypeInfo* This,
    UINT index,
    HREFTYPE *pRefType);
void __attribute__((__stdcall__)) ITypeInfo_GetRefTypeOfImplType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetImplTypeFlags_Proxy(
    ITypeInfo* This,
    UINT index,
    INT *pImplTypeFlags);
void __attribute__((__stdcall__)) ITypeInfo_GetImplTypeFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_LocalGetIDsOfNames_Proxy(
    ITypeInfo* This);
void __attribute__((__stdcall__)) ITypeInfo_LocalGetIDsOfNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_LocalInvoke_Proxy(
    ITypeInfo* This);
void __attribute__((__stdcall__)) ITypeInfo_LocalInvoke_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_RemoteGetDocumentation_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    DWORD refPtrFlags,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
void __attribute__((__stdcall__)) ITypeInfo_RemoteGetDocumentation_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_RemoteGetDllEntry_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    DWORD refPtrFlags,
    BSTR *pBstrDllName,
    BSTR *pBstrName,
    WORD *pwOrdinal);
void __attribute__((__stdcall__)) ITypeInfo_RemoteGetDllEntry_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetRefTypeInfo_Proxy(
    ITypeInfo* This,
    HREFTYPE hRefType,
    ITypeInfo **ppTInfo);
void __attribute__((__stdcall__)) ITypeInfo_GetRefTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_LocalAddressOfMember_Proxy(
    ITypeInfo* This);
void __attribute__((__stdcall__)) ITypeInfo_LocalAddressOfMember_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_RemoteCreateInstance_Proxy(
    ITypeInfo* This,
    const IID* const riid,
    IUnknown **ppvObj);
void __attribute__((__stdcall__)) ITypeInfo_RemoteCreateInstance_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetMops_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *pBstrMops);
void __attribute__((__stdcall__)) ITypeInfo_GetMops_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_RemoteGetContainingTypeLib_Proxy(
    ITypeInfo* This,
    ITypeLib **ppTLib,
    UINT *pIndex);
void __attribute__((__stdcall__)) ITypeInfo_RemoteGetContainingTypeLib_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_LocalReleaseTypeAttr_Proxy(
    ITypeInfo* This);
void __attribute__((__stdcall__)) ITypeInfo_LocalReleaseTypeAttr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_LocalReleaseFuncDesc_Proxy(
    ITypeInfo* This);
void __attribute__((__stdcall__)) ITypeInfo_LocalReleaseFuncDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_LocalReleaseVarDesc_Proxy(
    ITypeInfo* This);
void __attribute__((__stdcall__)) ITypeInfo_LocalReleaseVarDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetTypeAttr_Proxy(
    ITypeInfo* This,
    TYPEATTR **ppTypeAttr);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetTypeAttr_Stub(
    ITypeInfo* This,
    LPTYPEATTR *ppTypeAttr,
    CLEANLOCALSTORAGE *pDummy);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetFuncDesc_Proxy(
    ITypeInfo* This,
    UINT index,
    FUNCDESC **ppFuncDesc);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetFuncDesc_Stub(
    ITypeInfo* This,
    UINT index,
    LPFUNCDESC *ppFuncDesc,
    CLEANLOCALSTORAGE *pDummy);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetVarDesc_Proxy(
    ITypeInfo* This,
    UINT index,
    VARDESC **ppVarDesc);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetVarDesc_Stub(
    ITypeInfo* This,
    UINT index,
    LPVARDESC *ppVarDesc,
    CLEANLOCALSTORAGE *pDummy);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetNames_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *rgBstrNames,
    UINT cMaxNames,
    UINT *pcNames);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetNames_Stub(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *rgBstrNames,
    UINT cMaxNames,
    UINT *pcNames);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetIDsOfNames_Proxy(
    ITypeInfo* This,
    LPOLESTR *rgszNames,
    UINT cNames,
    MEMBERID *pMemId);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetIDsOfNames_Stub(
    ITypeInfo* This);
HRESULT __attribute__((__stdcall__)) ITypeInfo_Invoke_Proxy(
    ITypeInfo* This,
    PVOID pvInstance,
    MEMBERID memid,
    WORD wFlags,
    DISPPARAMS *pDispParams,
    VARIANT *pVarResult,
    EXCEPINFO *pExcepInfo,
    UINT *puArgErr);
HRESULT __attribute__((__stdcall__)) ITypeInfo_Invoke_Stub(
    ITypeInfo* This);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetDocumentation_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetDocumentation_Stub(
    ITypeInfo* This,
    MEMBERID memid,
    DWORD refPtrFlags,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetDllEntry_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    BSTR *pBstrDllName,
    BSTR *pBstrName,
    WORD *pwOrdinal);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetDllEntry_Stub(
    ITypeInfo* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    DWORD refPtrFlags,
    BSTR *pBstrDllName,
    BSTR *pBstrName,
    WORD *pwOrdinal);
HRESULT __attribute__((__stdcall__)) ITypeInfo_AddressOfMember_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    PVOID *ppv);
HRESULT __attribute__((__stdcall__)) ITypeInfo_AddressOfMember_Stub(
    ITypeInfo* This);
HRESULT __attribute__((__stdcall__)) ITypeInfo_CreateInstance_Proxy(
    ITypeInfo* This,
    IUnknown *pUnkOuter,
    const IID* const riid,
    PVOID *ppvObj);
HRESULT __attribute__((__stdcall__)) ITypeInfo_CreateInstance_Stub(
    ITypeInfo* This,
    const IID* const riid,
    IUnknown **ppvObj);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetContainingTypeLib_Proxy(
    ITypeInfo* This,
    ITypeLib **ppTLib,
    UINT *pIndex);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetContainingTypeLib_Stub(
    ITypeInfo* This,
    ITypeLib **ppTLib,
    UINT *pIndex);
void __attribute__((__stdcall__)) ITypeInfo_ReleaseTypeAttr_Proxy(
    ITypeInfo* This,
    TYPEATTR *pTypeAttr);
HRESULT __attribute__((__stdcall__)) ITypeInfo_ReleaseTypeAttr_Stub(
    ITypeInfo* This);
void __attribute__((__stdcall__)) ITypeInfo_ReleaseFuncDesc_Proxy(
    ITypeInfo* This,
    FUNCDESC *pFuncDesc);
HRESULT __attribute__((__stdcall__)) ITypeInfo_ReleaseFuncDesc_Stub(
    ITypeInfo* This);
void __attribute__((__stdcall__)) ITypeInfo_ReleaseVarDesc_Proxy(
    ITypeInfo* This,
    VARDESC *pVarDesc);
HRESULT __attribute__((__stdcall__)) ITypeInfo_ReleaseVarDesc_Stub(
    ITypeInfo* This);
typedef ITypeInfo2 *LPTYPEINFO2;
extern const GUID IID_ITypeInfo2 ;
typedef struct ITypeInfo2Vtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ITypeInfo2* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ITypeInfo2* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ITypeInfo2* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeAttr)(
        ITypeInfo2* This,
        TYPEATTR **ppTypeAttr);
    HRESULT (__attribute__((__stdcall__)) *GetTypeComp)(
        ITypeInfo2* This,
        ITypeComp **ppTComp);
    HRESULT (__attribute__((__stdcall__)) *GetFuncDesc)(
        ITypeInfo2* This,
        UINT index,
        FUNCDESC **ppFuncDesc);
    HRESULT (__attribute__((__stdcall__)) *GetVarDesc)(
        ITypeInfo2* This,
        UINT index,
        VARDESC **ppVarDesc);
    HRESULT (__attribute__((__stdcall__)) *GetNames)(
        ITypeInfo2* This,
        MEMBERID memid,
        BSTR *rgBstrNames,
        UINT cMaxNames,
        UINT *pcNames);
    HRESULT (__attribute__((__stdcall__)) *GetRefTypeOfImplType)(
        ITypeInfo2* This,
        UINT index,
        HREFTYPE *pRefType);
    HRESULT (__attribute__((__stdcall__)) *GetImplTypeFlags)(
        ITypeInfo2* This,
        UINT index,
        INT *pImplTypeFlags);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        ITypeInfo2* This,
        LPOLESTR *rgszNames,
        UINT cNames,
        MEMBERID *pMemId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        ITypeInfo2* This,
        PVOID pvInstance,
        MEMBERID memid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *GetDocumentation)(
        ITypeInfo2* This,
        MEMBERID memid,
        BSTR *pBstrName,
        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,
        BSTR *pBstrHelpFile);
    HRESULT (__attribute__((__stdcall__)) *GetDllEntry)(
        ITypeInfo2* This,
        MEMBERID memid,
        INVOKEKIND invKind,
        BSTR *pBstrDllName,
        BSTR *pBstrName,
        WORD *pwOrdinal);
    HRESULT (__attribute__((__stdcall__)) *GetRefTypeInfo)(
        ITypeInfo2* This,
        HREFTYPE hRefType,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *AddressOfMember)(
        ITypeInfo2* This,
        MEMBERID memid,
        INVOKEKIND invKind,
        PVOID *ppv);
    HRESULT (__attribute__((__stdcall__)) *CreateInstance)(
        ITypeInfo2* This,
        IUnknown *pUnkOuter,
        const IID* const riid,
        PVOID *ppvObj);
    HRESULT (__attribute__((__stdcall__)) *GetMops)(
        ITypeInfo2* This,
        MEMBERID memid,
        BSTR *pBstrMops);
    HRESULT (__attribute__((__stdcall__)) *GetContainingTypeLib)(
        ITypeInfo2* This,
        ITypeLib **ppTLib,
        UINT *pIndex);
    void (__attribute__((__stdcall__)) *ReleaseTypeAttr)(
        ITypeInfo2* This,
        TYPEATTR *pTypeAttr);
    void (__attribute__((__stdcall__)) *ReleaseFuncDesc)(
        ITypeInfo2* This,
        FUNCDESC *pFuncDesc);
    void (__attribute__((__stdcall__)) *ReleaseVarDesc)(
        ITypeInfo2* This,
        VARDESC *pVarDesc);
    HRESULT (__attribute__((__stdcall__)) *GetTypeKind)(
        ITypeInfo2* This,
        TYPEKIND *pTypeKind);
    HRESULT (__attribute__((__stdcall__)) *GetTypeFlags)(
        ITypeInfo2* This,
        ULONG *pTypeFlags);
    HRESULT (__attribute__((__stdcall__)) *GetFuncIndexOfMemId)(
        ITypeInfo2* This,
        MEMBERID memid,
        INVOKEKIND invKind,
        UINT *pFuncIndex);
    HRESULT (__attribute__((__stdcall__)) *GetVarIndexOfMemId)(
        ITypeInfo2* This,
        MEMBERID memid,
        UINT *pVarIndex);
    HRESULT (__attribute__((__stdcall__)) *GetCustData)(
        ITypeInfo2* This,
        const GUID* const guid,
        VARIANT *pVarVal);
    HRESULT (__attribute__((__stdcall__)) *GetFuncCustData)(
        ITypeInfo2* This,
        UINT index,
        const GUID* const guid,
        VARIANT *pVarVal);
    HRESULT (__attribute__((__stdcall__)) *GetParamCustData)(
        ITypeInfo2* This,
        UINT indexFunc,
        UINT indexParam,
        const GUID* const guid,
        VARIANT *pVarVal);
    HRESULT (__attribute__((__stdcall__)) *GetVarCustData)(
        ITypeInfo2* This,
        UINT index,
        const GUID* const guid,
        VARIANT *pVarVal);
    HRESULT (__attribute__((__stdcall__)) *GetImplTypeCustData)(
        ITypeInfo2* This,
        UINT index,
        const GUID* const guid,
        VARIANT *pVarVal);
    HRESULT (__attribute__((__stdcall__)) *GetDocumentation2)(
        ITypeInfo2* This,
        MEMBERID memid,
        LCID lcid,
        BSTR *pbstrHelpString,
        DWORD *pdwHelpStringContext,
        BSTR *pbstrHelpStringDll);
    HRESULT (__attribute__((__stdcall__)) *GetAllCustData)(
        ITypeInfo2* This,
        CUSTDATA *pCustData);
    HRESULT (__attribute__((__stdcall__)) *GetAllFuncCustData)(
        ITypeInfo2* This,
        UINT index,
        CUSTDATA *pCustData);
    HRESULT (__attribute__((__stdcall__)) *GetAllParamCustData)(
        ITypeInfo2* This,
        UINT indexFunc,
        UINT indexParam,
        CUSTDATA *pCustData);
    HRESULT (__attribute__((__stdcall__)) *GetAllVarCustData)(
        ITypeInfo2* This,
        UINT index,
        CUSTDATA *pCustData);
    HRESULT (__attribute__((__stdcall__)) *GetAllImplTypeCustData)(
        ITypeInfo2* This,
        UINT index,
        CUSTDATA *pCustData);
   
} ITypeInfo2Vtbl;
struct ITypeInfo2 {
    ITypeInfo2Vtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetTypeKind_Proxy(
    ITypeInfo2* This,
    TYPEKIND *pTypeKind);
void __attribute__((__stdcall__)) ITypeInfo2_GetTypeKind_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetTypeFlags_Proxy(
    ITypeInfo2* This,
    ULONG *pTypeFlags);
void __attribute__((__stdcall__)) ITypeInfo2_GetTypeFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetFuncIndexOfMemId_Proxy(
    ITypeInfo2* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    UINT *pFuncIndex);
void __attribute__((__stdcall__)) ITypeInfo2_GetFuncIndexOfMemId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetVarIndexOfMemId_Proxy(
    ITypeInfo2* This,
    MEMBERID memid,
    UINT *pVarIndex);
void __attribute__((__stdcall__)) ITypeInfo2_GetVarIndexOfMemId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetCustData_Proxy(
    ITypeInfo2* This,
    const GUID* const guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ITypeInfo2_GetCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetFuncCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    const GUID* const guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ITypeInfo2_GetFuncCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetParamCustData_Proxy(
    ITypeInfo2* This,
    UINT indexFunc,
    UINT indexParam,
    const GUID* const guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ITypeInfo2_GetParamCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetVarCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    const GUID* const guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ITypeInfo2_GetVarCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetImplTypeCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    const GUID* const guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ITypeInfo2_GetImplTypeCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_RemoteGetDocumentation2_Proxy(
    ITypeInfo2* This,
    MEMBERID memid,
    LCID lcid,
    DWORD refPtrFlags,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
void __attribute__((__stdcall__)) ITypeInfo2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetAllCustData_Proxy(
    ITypeInfo2* This,
    CUSTDATA *pCustData);
void __attribute__((__stdcall__)) ITypeInfo2_GetAllCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetAllFuncCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    CUSTDATA *pCustData);
void __attribute__((__stdcall__)) ITypeInfo2_GetAllFuncCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetAllParamCustData_Proxy(
    ITypeInfo2* This,
    UINT indexFunc,
    UINT indexParam,
    CUSTDATA *pCustData);
void __attribute__((__stdcall__)) ITypeInfo2_GetAllParamCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetAllVarCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    CUSTDATA *pCustData);
void __attribute__((__stdcall__)) ITypeInfo2_GetAllVarCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetAllImplTypeCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    CUSTDATA *pCustData);
void __attribute__((__stdcall__)) ITypeInfo2_GetAllImplTypeCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetDocumentation2_Proxy(
    ITypeInfo2* This,
    MEMBERID memid,
    LCID lcid,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetDocumentation2_Stub(
    ITypeInfo2* This,
    MEMBERID memid,
    LCID lcid,
    DWORD refPtrFlags,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
typedef ITypeLib *LPTYPELIB;
typedef enum tagSYSKIND {
    SYS_WIN16 = 0,
    SYS_WIN32 = 1,
    SYS_MAC = 2,
    SYS_WIN64 = 3
} SYSKIND;
typedef enum tagLIBFLAGS {
    LIBFLAG_FRESTRICTED = 0x1,
    LIBFLAG_FCONTROL = 0x2,
    LIBFLAG_FHIDDEN = 0x4,
    LIBFLAG_FHASDISKIMAGE = 0x8
} LIBFLAGS;
typedef struct tagTLIBATTR {
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
} TLIBATTR;
typedef struct tagTLIBATTR *LPTLIBATTR;
extern const GUID IID_ITypeLib ;
typedef struct ITypeLibVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ITypeLib* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ITypeLib* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ITypeLib* This);
    UINT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        ITypeLib* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        ITypeLib* This,
        UINT index,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoType)(
        ITypeLib* This,
        UINT index,
        TYPEKIND *pTKind);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoOfGuid)(
        ITypeLib* This,
        const GUID* const guid,
        ITypeInfo **ppTinfo);
    HRESULT (__attribute__((__stdcall__)) *GetLibAttr)(
        ITypeLib* This,
        TLIBATTR **ppTLibAttr);
    HRESULT (__attribute__((__stdcall__)) *GetTypeComp)(
        ITypeLib* This,
        ITypeComp **ppTComp);
    HRESULT (__attribute__((__stdcall__)) *GetDocumentation)(
        ITypeLib* This,
        INT index,
        BSTR *pBstrName,
        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,
        BSTR *pBstrHelpFile);
    HRESULT (__attribute__((__stdcall__)) *IsName)(
        ITypeLib* This,
        LPOLESTR szNameBuf,
        ULONG lHashVal,
        BOOL *pfName);
    HRESULT (__attribute__((__stdcall__)) *FindName)(
        ITypeLib* This,
        LPOLESTR szNameBuf,
        ULONG lHashVal,
        ITypeInfo **ppTInfo,
        MEMBERID *rgMemId,
        USHORT *pcFound);
    void (__attribute__((__stdcall__)) *ReleaseTLibAttr)(
        ITypeLib* This,
        TLIBATTR *pTLibAttr);
   
} ITypeLibVtbl;
struct ITypeLib {
    ITypeLibVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ITypeLib_RemoteGetTypeInfoCount_Proxy(
    ITypeLib* This,
    UINT *pcTInfo);
void __attribute__((__stdcall__)) ITypeLib_RemoteGetTypeInfoCount_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetTypeInfo_Proxy(
    ITypeLib* This,
    UINT index,
    ITypeInfo **ppTInfo);
void __attribute__((__stdcall__)) ITypeLib_GetTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetTypeInfoType_Proxy(
    ITypeLib* This,
    UINT index,
    TYPEKIND *pTKind);
void __attribute__((__stdcall__)) ITypeLib_GetTypeInfoType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetTypeInfoOfGuid_Proxy(
    ITypeLib* This,
    const GUID* const guid,
    ITypeInfo **ppTinfo);
void __attribute__((__stdcall__)) ITypeLib_GetTypeInfoOfGuid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_RemoteGetLibAttr_Proxy(
    ITypeLib* This,
    LPTLIBATTR *ppTLibAttr,
    CLEANLOCALSTORAGE *pDummy);
void __attribute__((__stdcall__)) ITypeLib_RemoteGetLibAttr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetTypeComp_Proxy(
    ITypeLib* This,
    ITypeComp **ppTComp);
void __attribute__((__stdcall__)) ITypeLib_GetTypeComp_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_RemoteGetDocumentation_Proxy(
    ITypeLib* This,
    INT index,
    DWORD refPtrFlags,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
void __attribute__((__stdcall__)) ITypeLib_RemoteGetDocumentation_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_RemoteIsName_Proxy(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    BOOL *pfName,
    BSTR *pBstrLibName);
void __attribute__((__stdcall__)) ITypeLib_RemoteIsName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_RemoteFindName_Proxy(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    ITypeInfo **ppTInfo,
    MEMBERID *rgMemId,
    USHORT *pcFound,
    BSTR *pBstrLibName);
void __attribute__((__stdcall__)) ITypeLib_RemoteFindName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_LocalReleaseTLibAttr_Proxy(
    ITypeLib* This);
void __attribute__((__stdcall__)) ITypeLib_LocalReleaseTLibAttr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
UINT __attribute__((__stdcall__)) ITypeLib_GetTypeInfoCount_Proxy(
    ITypeLib* This);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetTypeInfoCount_Stub(
    ITypeLib* This,
    UINT *pcTInfo);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetLibAttr_Proxy(
    ITypeLib* This,
    TLIBATTR **ppTLibAttr);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetLibAttr_Stub(
    ITypeLib* This,
    LPTLIBATTR *ppTLibAttr,
    CLEANLOCALSTORAGE *pDummy);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetDocumentation_Proxy(
    ITypeLib* This,
    INT index,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetDocumentation_Stub(
    ITypeLib* This,
    INT index,
    DWORD refPtrFlags,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
HRESULT __attribute__((__stdcall__)) ITypeLib_IsName_Proxy(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    BOOL *pfName);
HRESULT __attribute__((__stdcall__)) ITypeLib_IsName_Stub(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    BOOL *pfName,
    BSTR *pBstrLibName);
HRESULT __attribute__((__stdcall__)) ITypeLib_FindName_Proxy(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    ITypeInfo **ppTInfo,
    MEMBERID *rgMemId,
    USHORT *pcFound);
HRESULT __attribute__((__stdcall__)) ITypeLib_FindName_Stub(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    ITypeInfo **ppTInfo,
    MEMBERID *rgMemId,
    USHORT *pcFound,
    BSTR *pBstrLibName);
void __attribute__((__stdcall__)) ITypeLib_ReleaseTLibAttr_Proxy(
    ITypeLib* This,
    TLIBATTR *pTLibAttr);
HRESULT __attribute__((__stdcall__)) ITypeLib_ReleaseTLibAttr_Stub(
    ITypeLib* This);
typedef ITypeLib2 *LPTYPELIB2;
extern const GUID IID_ITypeLib2 ;
typedef struct ITypeLib2Vtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ITypeLib2* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ITypeLib2* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ITypeLib2* This);
    UINT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        ITypeLib2* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        ITypeLib2* This,
        UINT index,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoType)(
        ITypeLib2* This,
        UINT index,
        TYPEKIND *pTKind);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoOfGuid)(
        ITypeLib2* This,
        const GUID* const guid,
        ITypeInfo **ppTinfo);
    HRESULT (__attribute__((__stdcall__)) *GetLibAttr)(
        ITypeLib2* This,
        TLIBATTR **ppTLibAttr);
    HRESULT (__attribute__((__stdcall__)) *GetTypeComp)(
        ITypeLib2* This,
        ITypeComp **ppTComp);
    HRESULT (__attribute__((__stdcall__)) *GetDocumentation)(
        ITypeLib2* This,
        INT index,
        BSTR *pBstrName,
        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,
        BSTR *pBstrHelpFile);
    HRESULT (__attribute__((__stdcall__)) *IsName)(
        ITypeLib2* This,
        LPOLESTR szNameBuf,
        ULONG lHashVal,
        BOOL *pfName);
    HRESULT (__attribute__((__stdcall__)) *FindName)(
        ITypeLib2* This,
        LPOLESTR szNameBuf,
        ULONG lHashVal,
        ITypeInfo **ppTInfo,
        MEMBERID *rgMemId,
        USHORT *pcFound);
    void (__attribute__((__stdcall__)) *ReleaseTLibAttr)(
        ITypeLib2* This,
        TLIBATTR *pTLibAttr);
    HRESULT (__attribute__((__stdcall__)) *GetCustData)(
        ITypeLib2* This,
        const GUID* const guid,
        VARIANT *pVarVal);
    HRESULT (__attribute__((__stdcall__)) *GetLibStatistics)(
        ITypeLib2* This,
        ULONG *pcUniqueNames,
        ULONG *pcchUniqueNames);
    HRESULT (__attribute__((__stdcall__)) *GetDocumentation2)(
        ITypeLib2* This,
        INT index,
        LCID lcid,
        BSTR *pbstrHelpString,
        DWORD *pdwHelpStringContext,
        BSTR *pbstrHelpStringDll);
    HRESULT (__attribute__((__stdcall__)) *GetAllCustData)(
        ITypeLib2* This,
        CUSTDATA *pCustData);
   
} ITypeLib2Vtbl;
struct ITypeLib2 {
    ITypeLib2Vtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ITypeLib2_GetCustData_Proxy(
    ITypeLib2* This,
    const GUID* const guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ITypeLib2_GetCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib2_RemoteGetLibStatistics_Proxy(
    ITypeLib2* This,
    ULONG *pcUniqueNames,
    ULONG *pcchUniqueNames);
void __attribute__((__stdcall__)) ITypeLib2_RemoteGetLibStatistics_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib2_RemoteGetDocumentation2_Proxy(
    ITypeLib2* This,
    INT index,
    LCID lcid,
    DWORD refPtrFlags,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
void __attribute__((__stdcall__)) ITypeLib2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib2_GetAllCustData_Proxy(
    ITypeLib2* This,
    CUSTDATA *pCustData);
void __attribute__((__stdcall__)) ITypeLib2_GetAllCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib2_GetLibStatistics_Proxy(
    ITypeLib2* This,
    ULONG *pcUniqueNames,
    ULONG *pcchUniqueNames);
HRESULT __attribute__((__stdcall__)) ITypeLib2_GetLibStatistics_Stub(
    ITypeLib2* This,
    ULONG *pcUniqueNames,
    ULONG *pcchUniqueNames);
HRESULT __attribute__((__stdcall__)) ITypeLib2_GetDocumentation2_Proxy(
    ITypeLib2* This,
    INT index,
    LCID lcid,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
HRESULT __attribute__((__stdcall__)) ITypeLib2_GetDocumentation2_Stub(
    ITypeLib2* This,
    INT index,
    LCID lcid,
    DWORD refPtrFlags,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;
typedef enum tagCHANGEKIND {
    CHANGEKIND_ADDMEMBER = 0,
    CHANGEKIND_DELETEMEMBER = 1,
    CHANGEKIND_SETNAMES = 2,
    CHANGEKIND_SETDOCUMENTATION = 3,
    CHANGEKIND_GENERAL = 4,
    CHANGEKIND_INVALIDATE = 5,
    CHANGEKIND_CHANGEFAILED = 6,
    CHANGEKIND_MAX = 7
} CHANGEKIND;
extern const GUID IID_ITypeChangeEvents ;
typedef struct ITypeChangeEventsVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ITypeChangeEvents* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ITypeChangeEvents* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ITypeChangeEvents* This);
    HRESULT (__attribute__((__stdcall__)) *RequestTypeChange)(
        ITypeChangeEvents* This,
        CHANGEKIND changeKind,
        ITypeInfo *pTInfoBefore,
        LPOLESTR pStrName,
        INT *pfCancel);
    HRESULT (__attribute__((__stdcall__)) *AfterTypeChange)(
        ITypeChangeEvents* This,
        CHANGEKIND changeKind,
        ITypeInfo *pTInfoAfter,
        LPOLESTR pStrName);
   
} ITypeChangeEventsVtbl;
struct ITypeChangeEvents {
    ITypeChangeEventsVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ITypeChangeEvents_RequestTypeChange_Proxy(
    ITypeChangeEvents* This,
    CHANGEKIND changeKind,
    ITypeInfo *pTInfoBefore,
    LPOLESTR pStrName,
    INT *pfCancel);
void __attribute__((__stdcall__)) ITypeChangeEvents_RequestTypeChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeChangeEvents_AfterTypeChange_Proxy(
    ITypeChangeEvents* This,
    CHANGEKIND changeKind,
    ITypeInfo *pTInfoAfter,
    LPOLESTR pStrName);
void __attribute__((__stdcall__)) ITypeChangeEvents_AfterTypeChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IErrorInfo *LPERRORINFO;
extern const GUID IID_IErrorInfo ;
typedef struct IErrorInfoVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IErrorInfo* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IErrorInfo* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IErrorInfo* This);
    HRESULT (__attribute__((__stdcall__)) *GetGUID)(
        IErrorInfo* This,
        GUID *pGUID);
    HRESULT (__attribute__((__stdcall__)) *GetSource)(
        IErrorInfo* This,
        BSTR *pBstrSource);
    HRESULT (__attribute__((__stdcall__)) *GetDescription)(
        IErrorInfo* This,
        BSTR *pBstrDescription);
    HRESULT (__attribute__((__stdcall__)) *GetHelpFile)(
        IErrorInfo* This,
        BSTR *pBstrHelpFile);
    HRESULT (__attribute__((__stdcall__)) *GetHelpContext)(
        IErrorInfo* This,
        DWORD *pdwHelpContext);
   
} IErrorInfoVtbl;
struct IErrorInfo {
    IErrorInfoVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IErrorInfo_GetGUID_Proxy(
    IErrorInfo* This,
    GUID *pGUID);
void __attribute__((__stdcall__)) IErrorInfo_GetGUID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IErrorInfo_GetSource_Proxy(
    IErrorInfo* This,
    BSTR *pBstrSource);
void __attribute__((__stdcall__)) IErrorInfo_GetSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IErrorInfo_GetDescription_Proxy(
    IErrorInfo* This,
    BSTR *pBstrDescription);
void __attribute__((__stdcall__)) IErrorInfo_GetDescription_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IErrorInfo_GetHelpFile_Proxy(
    IErrorInfo* This,
    BSTR *pBstrHelpFile);
void __attribute__((__stdcall__)) IErrorInfo_GetHelpFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IErrorInfo_GetHelpContext_Proxy(
    IErrorInfo* This,
    DWORD *pdwHelpContext);
void __attribute__((__stdcall__)) IErrorInfo_GetHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ICreateErrorInfo *LPCREATEERRORINFO;
extern const GUID IID_ICreateErrorInfo ;
typedef struct ICreateErrorInfoVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ICreateErrorInfo* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ICreateErrorInfo* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ICreateErrorInfo* This);
    HRESULT (__attribute__((__stdcall__)) *SetGUID)(
        ICreateErrorInfo* This,
        const GUID* const rguid);
    HRESULT (__attribute__((__stdcall__)) *SetSource)(
        ICreateErrorInfo* This,
        LPOLESTR szSource);
    HRESULT (__attribute__((__stdcall__)) *SetDescription)(
        ICreateErrorInfo* This,
        LPOLESTR szDescription);
    HRESULT (__attribute__((__stdcall__)) *SetHelpFile)(
        ICreateErrorInfo* This,
        LPOLESTR szHelpFile);
    HRESULT (__attribute__((__stdcall__)) *SetHelpContext)(
        ICreateErrorInfo* This,
        DWORD dwHelpContext);
   
} ICreateErrorInfoVtbl;
struct ICreateErrorInfo {
    ICreateErrorInfoVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ICreateErrorInfo_SetGUID_Proxy(
    ICreateErrorInfo* This,
    const GUID* const rguid);
void __attribute__((__stdcall__)) ICreateErrorInfo_SetGUID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateErrorInfo_SetSource_Proxy(
    ICreateErrorInfo* This,
    LPOLESTR szSource);
void __attribute__((__stdcall__)) ICreateErrorInfo_SetSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateErrorInfo_SetDescription_Proxy(
    ICreateErrorInfo* This,
    LPOLESTR szDescription);
void __attribute__((__stdcall__)) ICreateErrorInfo_SetDescription_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateErrorInfo_SetHelpFile_Proxy(
    ICreateErrorInfo* This,
    LPOLESTR szHelpFile);
void __attribute__((__stdcall__)) ICreateErrorInfo_SetHelpFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateErrorInfo_SetHelpContext_Proxy(
    ICreateErrorInfo* This,
    DWORD dwHelpContext);
void __attribute__((__stdcall__)) ICreateErrorInfo_SetHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ISupportErrorInfo *LPSUPPORTERRORINFO;
extern const GUID IID_ISupportErrorInfo ;
typedef struct ISupportErrorInfoVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ISupportErrorInfo* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ISupportErrorInfo* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ISupportErrorInfo* This);
    HRESULT (__attribute__((__stdcall__)) *InterfaceSupportsErrorInfo)(
        ISupportErrorInfo* This,
        const IID* const riid);
   
} ISupportErrorInfoVtbl;
struct ISupportErrorInfo {
    ISupportErrorInfoVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ISupportErrorInfo_InterfaceSupportsErrorInfo_Proxy(
    ISupportErrorInfo* This,
    const IID* const riid);
void __attribute__((__stdcall__)) ISupportErrorInfo_InterfaceSupportsErrorInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_ITypeFactory ;
typedef struct ITypeFactoryVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ITypeFactory* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ITypeFactory* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ITypeFactory* This);
    HRESULT (__attribute__((__stdcall__)) *CreateFromTypeInfo)(
        ITypeFactory* This,
        ITypeInfo *pTypeInfo,
        const IID* const riid,
        IUnknown **ppv);
   
} ITypeFactoryVtbl;
struct ITypeFactory {
    ITypeFactoryVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ITypeFactory_CreateFromTypeInfo_Proxy(
    ITypeFactory* This,
    ITypeInfo *pTypeInfo,
    const IID* const riid,
    IUnknown **ppv);
void __attribute__((__stdcall__)) ITypeFactory_CreateFromTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_ITypeMarshal ;
typedef struct ITypeMarshalVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ITypeMarshal* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ITypeMarshal* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ITypeMarshal* This);
    HRESULT (__attribute__((__stdcall__)) *Size)(
        ITypeMarshal* This,
        PVOID pvType,
        DWORD dwDestContext,
        PVOID pvDestContext,
        ULONG *pSize);
    HRESULT (__attribute__((__stdcall__)) *Marshal)(
        ITypeMarshal* This,
        PVOID pvType,
        DWORD dwDestContext,
        PVOID pvDestContext,
        ULONG cbBufferLength,
        BYTE *pBuffer,
        ULONG *pcbWritten);
    HRESULT (__attribute__((__stdcall__)) *Unmarshal)(
        ITypeMarshal* This,
        PVOID pvType,
        DWORD dwFlags,
        ULONG cbBufferLength,
        BYTE *pBuffer,
        ULONG *pcbRead);
    HRESULT (__attribute__((__stdcall__)) *Free)(
        ITypeMarshal* This,
        PVOID pvType);
   
} ITypeMarshalVtbl;
struct ITypeMarshal {
    ITypeMarshalVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ITypeMarshal_Size_Proxy(
    ITypeMarshal* This,
    PVOID pvType,
    DWORD dwDestContext,
    PVOID pvDestContext,
    ULONG *pSize);
void __attribute__((__stdcall__)) ITypeMarshal_Size_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeMarshal_Marshal_Proxy(
    ITypeMarshal* This,
    PVOID pvType,
    DWORD dwDestContext,
    PVOID pvDestContext,
    ULONG cbBufferLength,
    BYTE *pBuffer,
    ULONG *pcbWritten);
void __attribute__((__stdcall__)) ITypeMarshal_Marshal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeMarshal_Unmarshal_Proxy(
    ITypeMarshal* This,
    PVOID pvType,
    DWORD dwFlags,
    ULONG cbBufferLength,
    BYTE *pBuffer,
    ULONG *pcbRead);
void __attribute__((__stdcall__)) ITypeMarshal_Unmarshal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeMarshal_Free_Proxy(
    ITypeMarshal* This,
    PVOID pvType);
void __attribute__((__stdcall__)) ITypeMarshal_Free_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IRecordInfo *LPRECORDINFO;
extern const GUID IID_IRecordInfo ;
typedef struct IRecordInfoVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IRecordInfo* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IRecordInfo* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IRecordInfo* This);
    HRESULT (__attribute__((__stdcall__)) *RecordInit)(
        IRecordInfo* This,
        PVOID pvNew);
    HRESULT (__attribute__((__stdcall__)) *RecordClear)(
        IRecordInfo* This,
        PVOID pvExisting);
    HRESULT (__attribute__((__stdcall__)) *RecordCopy)(
        IRecordInfo* This,
        PVOID pvExisting,
        PVOID pvNew);
    HRESULT (__attribute__((__stdcall__)) *GetGuid)(
        IRecordInfo* This,
        GUID *pguid);
    HRESULT (__attribute__((__stdcall__)) *GetName)(
        IRecordInfo* This,
        BSTR *pbstrName);
    HRESULT (__attribute__((__stdcall__)) *GetSize)(
        IRecordInfo* This,
        ULONG *pcbSize);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IRecordInfo* This,
        ITypeInfo **ppTypeInfo);
    HRESULT (__attribute__((__stdcall__)) *GetField)(
        IRecordInfo* This,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField);
    HRESULT (__attribute__((__stdcall__)) *GetFieldNoCopy)(
        IRecordInfo* This,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField,
        PVOID *ppvDataCArray);
    HRESULT (__attribute__((__stdcall__)) *PutField)(
        IRecordInfo* This,
        ULONG wFlags,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField);
    HRESULT (__attribute__((__stdcall__)) *PutFieldNoCopy)(
        IRecordInfo* This,
        ULONG wFlags,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField);
    HRESULT (__attribute__((__stdcall__)) *GetFieldNames)(
        IRecordInfo* This,
        ULONG *pcNames,
        BSTR *rgBstrNames);
    BOOL (__attribute__((__stdcall__)) *IsMatchingType)(
        IRecordInfo* This,
        IRecordInfo *pRecordInfo);
    PVOID (__attribute__((__stdcall__)) *RecordCreate)(
        IRecordInfo* This);
    HRESULT (__attribute__((__stdcall__)) *RecordCreateCopy)(
        IRecordInfo* This,
        PVOID pvSource,
        PVOID *ppvDest);
    HRESULT (__attribute__((__stdcall__)) *RecordDestroy)(
        IRecordInfo* This,
        PVOID pvRecord);
   
} IRecordInfoVtbl;
struct IRecordInfo {
    IRecordInfoVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IRecordInfo_RecordInit_Proxy(
    IRecordInfo* This,
    PVOID pvNew);
void __attribute__((__stdcall__)) IRecordInfo_RecordInit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_RecordClear_Proxy(
    IRecordInfo* This,
    PVOID pvExisting);
void __attribute__((__stdcall__)) IRecordInfo_RecordClear_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_RecordCopy_Proxy(
    IRecordInfo* This,
    PVOID pvExisting,
    PVOID pvNew);
void __attribute__((__stdcall__)) IRecordInfo_RecordCopy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_GetGuid_Proxy(
    IRecordInfo* This,
    GUID *pguid);
void __attribute__((__stdcall__)) IRecordInfo_GetGuid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_GetName_Proxy(
    IRecordInfo* This,
    BSTR *pbstrName);
void __attribute__((__stdcall__)) IRecordInfo_GetName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_GetSize_Proxy(
    IRecordInfo* This,
    ULONG *pcbSize);
void __attribute__((__stdcall__)) IRecordInfo_GetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_GetTypeInfo_Proxy(
    IRecordInfo* This,
    ITypeInfo **ppTypeInfo);
void __attribute__((__stdcall__)) IRecordInfo_GetTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_GetField_Proxy(
    IRecordInfo* This,
    PVOID pvData,
    LPCOLESTR szFieldName,
    VARIANT *pvarField);
void __attribute__((__stdcall__)) IRecordInfo_GetField_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_GetFieldNoCopy_Proxy(
    IRecordInfo* This,
    PVOID pvData,
    LPCOLESTR szFieldName,
    VARIANT *pvarField,
    PVOID *ppvDataCArray);
void __attribute__((__stdcall__)) IRecordInfo_GetFieldNoCopy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_PutField_Proxy(
    IRecordInfo* This,
    ULONG wFlags,
    PVOID pvData,
    LPCOLESTR szFieldName,
    VARIANT *pvarField);
void __attribute__((__stdcall__)) IRecordInfo_PutField_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_PutFieldNoCopy_Proxy(
    IRecordInfo* This,
    ULONG wFlags,
    PVOID pvData,
    LPCOLESTR szFieldName,
    VARIANT *pvarField);
void __attribute__((__stdcall__)) IRecordInfo_PutFieldNoCopy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_GetFieldNames_Proxy(
    IRecordInfo* This,
    ULONG *pcNames,
    BSTR *rgBstrNames);
void __attribute__((__stdcall__)) IRecordInfo_GetFieldNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
BOOL __attribute__((__stdcall__)) IRecordInfo_IsMatchingType_Proxy(
    IRecordInfo* This,
    IRecordInfo *pRecordInfo);
void __attribute__((__stdcall__)) IRecordInfo_IsMatchingType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
PVOID __attribute__((__stdcall__)) IRecordInfo_RecordCreate_Proxy(
    IRecordInfo* This);
void __attribute__((__stdcall__)) IRecordInfo_RecordCreate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_RecordCreateCopy_Proxy(
    IRecordInfo* This,
    PVOID pvSource,
    PVOID *ppvDest);
void __attribute__((__stdcall__)) IRecordInfo_RecordCreateCopy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_RecordDestroy_Proxy(
    IRecordInfo* This,
    PVOID pvRecord);
void __attribute__((__stdcall__)) IRecordInfo_RecordDestroy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ICreateTypeInfo *LPCREATETYPEINFO;
extern const GUID IID_ICreateTypeInfo ;
typedef struct ICreateTypeInfoVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ICreateTypeInfo* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ICreateTypeInfo* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ICreateTypeInfo* This);
    HRESULT (__attribute__((__stdcall__)) *SetGuid)(
        ICreateTypeInfo* This,
        const GUID* const guid);
    HRESULT (__attribute__((__stdcall__)) *SetTypeFlags)(
        ICreateTypeInfo* This,
        UINT uTypeFlags);
    HRESULT (__attribute__((__stdcall__)) *SetDocString)(
        ICreateTypeInfo* This,
        LPOLESTR pStrDoc);
    HRESULT (__attribute__((__stdcall__)) *SetHelpContext)(
        ICreateTypeInfo* This,
        DWORD dwHelpContext);
    HRESULT (__attribute__((__stdcall__)) *SetVersion)(
        ICreateTypeInfo* This,
        WORD wMajorVerNum,
        WORD wMinorVerNum);
    HRESULT (__attribute__((__stdcall__)) *AddRefTypeInfo)(
        ICreateTypeInfo* This,
        ITypeInfo *pTInfo,
        HREFTYPE *phRefType);
    HRESULT (__attribute__((__stdcall__)) *AddFuncDesc)(
        ICreateTypeInfo* This,
        UINT index,
        FUNCDESC *pFuncDesc);
    HRESULT (__attribute__((__stdcall__)) *AddImplType)(
        ICreateTypeInfo* This,
        UINT index,
        HREFTYPE hRefType);
    HRESULT (__attribute__((__stdcall__)) *SetImplTypeFlags)(
        ICreateTypeInfo* This,
        UINT index,
        INT implTypeFlags);
    HRESULT (__attribute__((__stdcall__)) *SetAlignment)(
        ICreateTypeInfo* This,
        WORD cbAlignment);
    HRESULT (__attribute__((__stdcall__)) *SetSchema)(
        ICreateTypeInfo* This,
        LPOLESTR pStrSchema);
    HRESULT (__attribute__((__stdcall__)) *AddVarDesc)(
        ICreateTypeInfo* This,
        UINT index,
        VARDESC *pVarDesc);
    HRESULT (__attribute__((__stdcall__)) *SetFuncAndParamNames)(
        ICreateTypeInfo* This,
        UINT index,
        LPOLESTR *rgszNames,
        UINT cNames);
    HRESULT (__attribute__((__stdcall__)) *SetVarName)(
        ICreateTypeInfo* This,
        UINT index,
        LPOLESTR szName);
    HRESULT (__attribute__((__stdcall__)) *SetTypeDescAlias)(
        ICreateTypeInfo* This,
        TYPEDESC *pTDescAlias);
    HRESULT (__attribute__((__stdcall__)) *DefineFuncAsDllEntry)(
        ICreateTypeInfo* This,
        UINT index,
        LPOLESTR szDllName,
        LPOLESTR szProcName);
    HRESULT (__attribute__((__stdcall__)) *SetFuncDocString)(
        ICreateTypeInfo* This,
        UINT index,
        LPOLESTR szDocString);
    HRESULT (__attribute__((__stdcall__)) *SetVarDocString)(
        ICreateTypeInfo* This,
        UINT index,
        LPOLESTR szDocString);
    HRESULT (__attribute__((__stdcall__)) *SetFuncHelpContext)(
        ICreateTypeInfo* This,
        UINT index,
        DWORD dwHelpContext);
    HRESULT (__attribute__((__stdcall__)) *SetVarHelpContext)(
        ICreateTypeInfo* This,
        UINT index,
        DWORD dwHelpContext);
    HRESULT (__attribute__((__stdcall__)) *SetMops)(
        ICreateTypeInfo* This,
        UINT index,
        BSTR bstrMops);
    HRESULT (__attribute__((__stdcall__)) *SetTypeIdldesc)(
        ICreateTypeInfo* This,
        IDLDESC *pIdlDesc);
    HRESULT (__attribute__((__stdcall__)) *LayOut)(
        ICreateTypeInfo* This);
   
} ICreateTypeInfoVtbl;
struct ICreateTypeInfo {
    ICreateTypeInfoVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetGuid_Proxy(
    ICreateTypeInfo* This,
    const GUID* const guid);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetGuid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetTypeFlags_Proxy(
    ICreateTypeInfo* This,
    UINT uTypeFlags);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetTypeFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetDocString_Proxy(
    ICreateTypeInfo* This,
    LPOLESTR pStrDoc);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetDocString_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetHelpContext_Proxy(
    ICreateTypeInfo* This,
    DWORD dwHelpContext);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetVersion_Proxy(
    ICreateTypeInfo* This,
    WORD wMajorVerNum,
    WORD wMinorVerNum);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetVersion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_AddRefTypeInfo_Proxy(
    ICreateTypeInfo* This,
    ITypeInfo *pTInfo,
    HREFTYPE *phRefType);
void __attribute__((__stdcall__)) ICreateTypeInfo_AddRefTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_AddFuncDesc_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    FUNCDESC *pFuncDesc);
void __attribute__((__stdcall__)) ICreateTypeInfo_AddFuncDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_AddImplType_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    HREFTYPE hRefType);
void __attribute__((__stdcall__)) ICreateTypeInfo_AddImplType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetImplTypeFlags_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    INT implTypeFlags);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetImplTypeFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetAlignment_Proxy(
    ICreateTypeInfo* This,
    WORD cbAlignment);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetAlignment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetSchema_Proxy(
    ICreateTypeInfo* This,
    LPOLESTR pStrSchema);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetSchema_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_AddVarDesc_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    VARDESC *pVarDesc);
void __attribute__((__stdcall__)) ICreateTypeInfo_AddVarDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetFuncAndParamNames_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    LPOLESTR *rgszNames,
    UINT cNames);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetFuncAndParamNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetVarName_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    LPOLESTR szName);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetVarName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetTypeDescAlias_Proxy(
    ICreateTypeInfo* This,
    TYPEDESC *pTDescAlias);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetTypeDescAlias_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_DefineFuncAsDllEntry_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    LPOLESTR szDllName,
    LPOLESTR szProcName);
void __attribute__((__stdcall__)) ICreateTypeInfo_DefineFuncAsDllEntry_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetFuncDocString_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    LPOLESTR szDocString);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetFuncDocString_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetVarDocString_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    LPOLESTR szDocString);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetVarDocString_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetFuncHelpContext_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    DWORD dwHelpContext);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetFuncHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetVarHelpContext_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    DWORD dwHelpContext);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetVarHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetMops_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    BSTR bstrMops);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetMops_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetTypeIdldesc_Proxy(
    ICreateTypeInfo* This,
    IDLDESC *pIdlDesc);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetTypeIdldesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_LayOut_Proxy(
    ICreateTypeInfo* This);
void __attribute__((__stdcall__)) ICreateTypeInfo_LayOut_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;
extern const GUID IID_ICreateTypeInfo2 ;
typedef struct ICreateTypeInfo2Vtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ICreateTypeInfo2* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ICreateTypeInfo2* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ICreateTypeInfo2* This);
    HRESULT (__attribute__((__stdcall__)) *SetGuid)(
        ICreateTypeInfo2* This,
        const GUID* const guid);
    HRESULT (__attribute__((__stdcall__)) *SetTypeFlags)(
        ICreateTypeInfo2* This,
        UINT uTypeFlags);
    HRESULT (__attribute__((__stdcall__)) *SetDocString)(
        ICreateTypeInfo2* This,
        LPOLESTR pStrDoc);
    HRESULT (__attribute__((__stdcall__)) *SetHelpContext)(
        ICreateTypeInfo2* This,
        DWORD dwHelpContext);
    HRESULT (__attribute__((__stdcall__)) *SetVersion)(
        ICreateTypeInfo2* This,
        WORD wMajorVerNum,
        WORD wMinorVerNum);
    HRESULT (__attribute__((__stdcall__)) *AddRefTypeInfo)(
        ICreateTypeInfo2* This,
        ITypeInfo *pTInfo,
        HREFTYPE *phRefType);
    HRESULT (__attribute__((__stdcall__)) *AddFuncDesc)(
        ICreateTypeInfo2* This,
        UINT index,
        FUNCDESC *pFuncDesc);
    HRESULT (__attribute__((__stdcall__)) *AddImplType)(
        ICreateTypeInfo2* This,
        UINT index,
        HREFTYPE hRefType);
    HRESULT (__attribute__((__stdcall__)) *SetImplTypeFlags)(
        ICreateTypeInfo2* This,
        UINT index,
        INT implTypeFlags);
    HRESULT (__attribute__((__stdcall__)) *SetAlignment)(
        ICreateTypeInfo2* This,
        WORD cbAlignment);
    HRESULT (__attribute__((__stdcall__)) *SetSchema)(
        ICreateTypeInfo2* This,
        LPOLESTR pStrSchema);
    HRESULT (__attribute__((__stdcall__)) *AddVarDesc)(
        ICreateTypeInfo2* This,
        UINT index,
        VARDESC *pVarDesc);
    HRESULT (__attribute__((__stdcall__)) *SetFuncAndParamNames)(
        ICreateTypeInfo2* This,
        UINT index,
        LPOLESTR *rgszNames,
        UINT cNames);
    HRESULT (__attribute__((__stdcall__)) *SetVarName)(
        ICreateTypeInfo2* This,
        UINT index,
        LPOLESTR szName);
    HRESULT (__attribute__((__stdcall__)) *SetTypeDescAlias)(
        ICreateTypeInfo2* This,
        TYPEDESC *pTDescAlias);
    HRESULT (__attribute__((__stdcall__)) *DefineFuncAsDllEntry)(
        ICreateTypeInfo2* This,
        UINT index,
        LPOLESTR szDllName,
        LPOLESTR szProcName);
    HRESULT (__attribute__((__stdcall__)) *SetFuncDocString)(
        ICreateTypeInfo2* This,
        UINT index,
        LPOLESTR szDocString);
    HRESULT (__attribute__((__stdcall__)) *SetVarDocString)(
        ICreateTypeInfo2* This,
        UINT index,
        LPOLESTR szDocString);
    HRESULT (__attribute__((__stdcall__)) *SetFuncHelpContext)(
        ICreateTypeInfo2* This,
        UINT index,
        DWORD dwHelpContext);
    HRESULT (__attribute__((__stdcall__)) *SetVarHelpContext)(
        ICreateTypeInfo2* This,
        UINT index,
        DWORD dwHelpContext);
    HRESULT (__attribute__((__stdcall__)) *SetMops)(
        ICreateTypeInfo2* This,
        UINT index,
        BSTR bstrMops);
    HRESULT (__attribute__((__stdcall__)) *SetTypeIdldesc)(
        ICreateTypeInfo2* This,
        IDLDESC *pIdlDesc);
    HRESULT (__attribute__((__stdcall__)) *LayOut)(
        ICreateTypeInfo2* This);
    HRESULT (__attribute__((__stdcall__)) *DeleteFuncDesc)(
        ICreateTypeInfo2* This,
        UINT index);
    HRESULT (__attribute__((__stdcall__)) *DeleteFuncDescByMemId)(
        ICreateTypeInfo2* This,
        MEMBERID memid,
        INVOKEKIND invKind);
    HRESULT (__attribute__((__stdcall__)) *DeleteVarDesc)(
        ICreateTypeInfo2* This,
        UINT index);
    HRESULT (__attribute__((__stdcall__)) *DeleteVarDescByMemId)(
        ICreateTypeInfo2* This,
        MEMBERID memid);
    HRESULT (__attribute__((__stdcall__)) *DeleteImplType)(
        ICreateTypeInfo2* This,
        UINT index);
    HRESULT (__attribute__((__stdcall__)) *SetCustData)(
        ICreateTypeInfo2* This,
        const GUID* const guid,
        VARIANT *pVarVal);
    HRESULT (__attribute__((__stdcall__)) *SetFuncCustData)(
        ICreateTypeInfo2* This,
        UINT index,
        const GUID* const guid,
        VARIANT *pVarVal);
    HRESULT (__attribute__((__stdcall__)) *SetParamCustData)(
        ICreateTypeInfo2* This,
        UINT indexFunc,
        UINT indexParam,
        const GUID* const guid,
        VARIANT *pVarVal);
    HRESULT (__attribute__((__stdcall__)) *SetVarCustData)(
        ICreateTypeInfo2* This,
        UINT index,
        const GUID* const guid,
        VARIANT *pVarVal);
    HRESULT (__attribute__((__stdcall__)) *SetImplTypeCustData)(
        ICreateTypeInfo2* This,
        UINT index,
        const GUID* const guid,
        VARIANT *pVarVal);
    HRESULT (__attribute__((__stdcall__)) *SetHelpStringContext)(
        ICreateTypeInfo2* This,
        ULONG dwHelpStringContext);
    HRESULT (__attribute__((__stdcall__)) *SetFuncHelpStringContext)(
        ICreateTypeInfo2* This,
        UINT index,
        ULONG dwHelpStringContext);
    HRESULT (__attribute__((__stdcall__)) *SetVarHelpStringContext)(
        ICreateTypeInfo2* This,
        UINT index,
        ULONG dwHelpStringContext);
    HRESULT (__attribute__((__stdcall__)) *Invalidate)(
        ICreateTypeInfo2* This);
    HRESULT (__attribute__((__stdcall__)) *SetName)(
        ICreateTypeInfo2* This,
        LPOLESTR szName);
   
} ICreateTypeInfo2Vtbl;
struct ICreateTypeInfo2 {
    ICreateTypeInfo2Vtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteFuncDesc_Proxy(
    ICreateTypeInfo2* This,
    UINT index);
void __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteFuncDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteFuncDescByMemId_Proxy(
    ICreateTypeInfo2* This,
    MEMBERID memid,
    INVOKEKIND invKind);
void __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteFuncDescByMemId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteVarDesc_Proxy(
    ICreateTypeInfo2* This,
    UINT index);
void __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteVarDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteVarDescByMemId_Proxy(
    ICreateTypeInfo2* This,
    MEMBERID memid);
void __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteVarDescByMemId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteImplType_Proxy(
    ICreateTypeInfo2* This,
    UINT index);
void __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteImplType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetCustData_Proxy(
    ICreateTypeInfo2* This,
    const GUID* const guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetFuncCustData_Proxy(
    ICreateTypeInfo2* This,
    UINT index,
    const GUID* const guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetFuncCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetParamCustData_Proxy(
    ICreateTypeInfo2* This,
    UINT indexFunc,
    UINT indexParam,
    const GUID* const guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetParamCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetVarCustData_Proxy(
    ICreateTypeInfo2* This,
    UINT index,
    const GUID* const guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetVarCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetImplTypeCustData_Proxy(
    ICreateTypeInfo2* This,
    UINT index,
    const GUID* const guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetImplTypeCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetHelpStringContext_Proxy(
    ICreateTypeInfo2* This,
    ULONG dwHelpStringContext);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetHelpStringContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetFuncHelpStringContext_Proxy(
    ICreateTypeInfo2* This,
    UINT index,
    ULONG dwHelpStringContext);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetFuncHelpStringContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetVarHelpStringContext_Proxy(
    ICreateTypeInfo2* This,
    UINT index,
    ULONG dwHelpStringContext);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetVarHelpStringContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_Invalidate_Proxy(
    ICreateTypeInfo2* This);
void __attribute__((__stdcall__)) ICreateTypeInfo2_Invalidate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetName_Proxy(
    ICreateTypeInfo2* This,
    LPOLESTR szName);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ICreateTypeLib *LPCREATETYPELIB;
extern const GUID IID_ICreateTypeLib ;
typedef struct ICreateTypeLibVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ICreateTypeLib* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ICreateTypeLib* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ICreateTypeLib* This);
    HRESULT (__attribute__((__stdcall__)) *CreateTypeInfo)(
        ICreateTypeLib* This,
        LPOLESTR szName,
        TYPEKIND tkind,
        ICreateTypeInfo **ppCTInfo);
    HRESULT (__attribute__((__stdcall__)) *SetName)(
        ICreateTypeLib* This,
        LPOLESTR szName);
    HRESULT (__attribute__((__stdcall__)) *SetVersion)(
        ICreateTypeLib* This,
        WORD wMajorVerNum,
        WORD wMinorVerNum);
    HRESULT (__attribute__((__stdcall__)) *SetGuid)(
        ICreateTypeLib* This,
        const GUID* const guid);
    HRESULT (__attribute__((__stdcall__)) *SetDocString)(
        ICreateTypeLib* This,
        LPOLESTR szDoc);
    HRESULT (__attribute__((__stdcall__)) *SetHelpFileName)(
        ICreateTypeLib* This,
        LPOLESTR szHelpFileName);
    HRESULT (__attribute__((__stdcall__)) *SetHelpContext)(
        ICreateTypeLib* This,
        DWORD dwHelpContext);
    HRESULT (__attribute__((__stdcall__)) *SetLcid)(
        ICreateTypeLib* This,
        LCID lcid);
    HRESULT (__attribute__((__stdcall__)) *SetLibFlags)(
        ICreateTypeLib* This,
        UINT uLibFlags);
    HRESULT (__attribute__((__stdcall__)) *SaveAllChanges)(
        ICreateTypeLib* This);
   
} ICreateTypeLibVtbl;
struct ICreateTypeLib {
    ICreateTypeLibVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_CreateTypeInfo_Proxy(
    ICreateTypeLib* This,
    LPOLESTR szName,
    TYPEKIND tkind,
    ICreateTypeInfo **ppCTInfo);
void __attribute__((__stdcall__)) ICreateTypeLib_CreateTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SetName_Proxy(
    ICreateTypeLib* This,
    LPOLESTR szName);
void __attribute__((__stdcall__)) ICreateTypeLib_SetName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SetVersion_Proxy(
    ICreateTypeLib* This,
    WORD wMajorVerNum,
    WORD wMinorVerNum);
void __attribute__((__stdcall__)) ICreateTypeLib_SetVersion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SetGuid_Proxy(
    ICreateTypeLib* This,
    const GUID* const guid);
void __attribute__((__stdcall__)) ICreateTypeLib_SetGuid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SetDocString_Proxy(
    ICreateTypeLib* This,
    LPOLESTR szDoc);
void __attribute__((__stdcall__)) ICreateTypeLib_SetDocString_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SetHelpFileName_Proxy(
    ICreateTypeLib* This,
    LPOLESTR szHelpFileName);
void __attribute__((__stdcall__)) ICreateTypeLib_SetHelpFileName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SetHelpContext_Proxy(
    ICreateTypeLib* This,
    DWORD dwHelpContext);
void __attribute__((__stdcall__)) ICreateTypeLib_SetHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SetLcid_Proxy(
    ICreateTypeLib* This,
    LCID lcid);
void __attribute__((__stdcall__)) ICreateTypeLib_SetLcid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SetLibFlags_Proxy(
    ICreateTypeLib* This,
    UINT uLibFlags);
void __attribute__((__stdcall__)) ICreateTypeLib_SetLibFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SaveAllChanges_Proxy(
    ICreateTypeLib* This);
void __attribute__((__stdcall__)) ICreateTypeLib_SaveAllChanges_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ICreateTypeLib2 *LPCREATETYPELIB2;
extern const GUID IID_ICreateTypeLib2 ;
typedef struct ICreateTypeLib2Vtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ICreateTypeLib2* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ICreateTypeLib2* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ICreateTypeLib2* This);
    HRESULT (__attribute__((__stdcall__)) *CreateTypeInfo)(
        ICreateTypeLib2* This,
        LPOLESTR szName,
        TYPEKIND tkind,
        ICreateTypeInfo **ppCTInfo);
    HRESULT (__attribute__((__stdcall__)) *SetName)(
        ICreateTypeLib2* This,
        LPOLESTR szName);
    HRESULT (__attribute__((__stdcall__)) *SetVersion)(
        ICreateTypeLib2* This,
        WORD wMajorVerNum,
        WORD wMinorVerNum);
    HRESULT (__attribute__((__stdcall__)) *SetGuid)(
        ICreateTypeLib2* This,
        const GUID* const guid);
    HRESULT (__attribute__((__stdcall__)) *SetDocString)(
        ICreateTypeLib2* This,
        LPOLESTR szDoc);
    HRESULT (__attribute__((__stdcall__)) *SetHelpFileName)(
        ICreateTypeLib2* This,
        LPOLESTR szHelpFileName);
    HRESULT (__attribute__((__stdcall__)) *SetHelpContext)(
        ICreateTypeLib2* This,
        DWORD dwHelpContext);
    HRESULT (__attribute__((__stdcall__)) *SetLcid)(
        ICreateTypeLib2* This,
        LCID lcid);
    HRESULT (__attribute__((__stdcall__)) *SetLibFlags)(
        ICreateTypeLib2* This,
        UINT uLibFlags);
    HRESULT (__attribute__((__stdcall__)) *SaveAllChanges)(
        ICreateTypeLib2* This);
    HRESULT (__attribute__((__stdcall__)) *DeleteTypeInfo)(
        ICreateTypeLib2* This,
        LPOLESTR szName);
    HRESULT (__attribute__((__stdcall__)) *SetCustData)(
        ICreateTypeLib2* This,
        const GUID* const guid,
        VARIANT *pVarVal);
    HRESULT (__attribute__((__stdcall__)) *SetHelpStringContext)(
        ICreateTypeLib2* This,
        ULONG dwHelpStringContext);
    HRESULT (__attribute__((__stdcall__)) *SetHelpStringDll)(
        ICreateTypeLib2* This,
        LPOLESTR szFileName);
   
} ICreateTypeLib2Vtbl;
struct ICreateTypeLib2 {
    ICreateTypeLib2Vtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ICreateTypeLib2_DeleteTypeInfo_Proxy(
    ICreateTypeLib2* This,
    LPOLESTR szName);
void __attribute__((__stdcall__)) ICreateTypeLib2_DeleteTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib2_SetCustData_Proxy(
    ICreateTypeLib2* This,
    const GUID* const guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ICreateTypeLib2_SetCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib2_SetHelpStringContext_Proxy(
    ICreateTypeLib2* This,
    ULONG dwHelpStringContext);
void __attribute__((__stdcall__)) ICreateTypeLib2_SetHelpStringContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib2_SetHelpStringDll_Proxy(
    ICreateTypeLib2* This,
    LPOLESTR szFileName);
void __attribute__((__stdcall__)) ICreateTypeLib2_SetHelpStringDll_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IErrorLog *LPERRORLOG;
extern const GUID IID_IErrorLog ;
typedef struct IErrorLogVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IErrorLog* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IErrorLog* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IErrorLog* This);
    HRESULT (__attribute__((__stdcall__)) *AddError)(
        IErrorLog* This,
        LPCOLESTR pszPropName,
        EXCEPINFO *pExcepInfo);
   
} IErrorLogVtbl;
struct IErrorLog {
    IErrorLogVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IErrorLog_AddError_Proxy(
    IErrorLog* This,
    LPCOLESTR pszPropName,
    EXCEPINFO *pExcepInfo);
void __attribute__((__stdcall__)) IErrorLog_AddError_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IPropertyBag *LPPROPERTYBAG;
extern const GUID IID_IPropertyBag ;
typedef struct IPropertyBagVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IPropertyBag* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IPropertyBag* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IPropertyBag* This);
    HRESULT (__attribute__((__stdcall__)) *Read)(
        IPropertyBag* This,
        LPCOLESTR pszPropName,
        VARIANT *pVar,
        IErrorLog *pErrorLog);
    HRESULT (__attribute__((__stdcall__)) *Write)(
        IPropertyBag* This,
        LPCOLESTR pszPropName,
        VARIANT *pVar);
   
} IPropertyBagVtbl;
struct IPropertyBag {
    IPropertyBagVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IPropertyBag_RemoteRead_Proxy(
    IPropertyBag* This,
    LPCOLESTR pszPropName,
    VARIANT *pVar,
    IErrorLog *pErrorLog,
    DWORD varType,
    IUnknown *pUnkObj);
void __attribute__((__stdcall__)) IPropertyBag_RemoteRead_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyBag_Write_Proxy(
    IPropertyBag* This,
    LPCOLESTR pszPropName,
    VARIANT *pVar);
void __attribute__((__stdcall__)) IPropertyBag_Write_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyBag_Read_Proxy(
    IPropertyBag* This,
    LPCOLESTR pszPropName,
    VARIANT *pVar,
    IErrorLog *pErrorLog);
HRESULT __attribute__((__stdcall__)) IPropertyBag_Read_Stub(
    IPropertyBag* This,
    LPCOLESTR pszPropName,
    VARIANT *pVar,
    IErrorLog *pErrorLog,
    DWORD varType,
    IUnknown *pUnkObj);
ULONG __attribute__((__stdcall__)) VARIANT_UserSize (ULONG *, ULONG, VARIANT *);
unsigned char * __attribute__((__stdcall__)) VARIANT_UserMarshal (ULONG *, unsigned char *, VARIANT *);
unsigned char * __attribute__((__stdcall__)) VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void __attribute__((__stdcall__)) VARIANT_UserFree (ULONG *, VARIANT *);
ULONG __attribute__((__stdcall__)) BSTR_UserSize (ULONG *, ULONG, BSTR *);
unsigned char * __attribute__((__stdcall__)) BSTR_UserMarshal (ULONG *, unsigned char *, BSTR *);
unsigned char * __attribute__((__stdcall__)) BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void __attribute__((__stdcall__)) BSTR_UserFree (ULONG *, BSTR *);
ULONG __attribute__((__stdcall__)) CLEANLOCALSTORAGE_UserSize (ULONG *, ULONG, CLEANLOCALSTORAGE *);
unsigned char * __attribute__((__stdcall__)) CLEANLOCALSTORAGE_UserMarshal (ULONG *, unsigned char *, CLEANLOCALSTORAGE *);
unsigned char * __attribute__((__stdcall__)) CLEANLOCALSTORAGE_UserUnmarshal(ULONG *, unsigned char *, CLEANLOCALSTORAGE *);
void __attribute__((__stdcall__)) CLEANLOCALSTORAGE_UserFree (ULONG *, CLEANLOCALSTORAGE *);
extern const GUID LIBID_MSXML ;
typedef enum tagDOMNodeType {
    NODE_INVALID = 0,
    NODE_ELEMENT = 1,
    NODE_ATTRIBUTE = 2,
    NODE_TEXT = 3,
    NODE_CDATA_SECTION = 4,
    NODE_ENTITY_REFERENCE = 5,
    NODE_ENTITY = 6,
    NODE_PROCESSING_INSTRUCTION = 7,
    NODE_COMMENT = 8,
    NODE_DOCUMENT = 9,
    NODE_DOCUMENT_TYPE = 10,
    NODE_DOCUMENT_FRAGMENT = 11,
    NODE_NOTATION = 12
} DOMNodeType;
extern const GUID IID_IXMLDOMNode ;
typedef struct IXMLDOMNodeVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMNode* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMNode* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMNode* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMNode* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMNode* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMNode* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMNode* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_nodeName)(
        IXMLDOMNode* This,
        BSTR *name);
    HRESULT (__attribute__((__stdcall__)) *get_nodeValue)(
        IXMLDOMNode* This,
        VARIANT *value);
    HRESULT (__attribute__((__stdcall__)) *put_nodeValue)(
        IXMLDOMNode* This,
        VARIANT value);
    HRESULT (__attribute__((__stdcall__)) *get_nodeType)(
        IXMLDOMNode* This,
        DOMNodeType *type);
    HRESULT (__attribute__((__stdcall__)) *get_parentNode)(
        IXMLDOMNode* This,
        IXMLDOMNode **parent);
    HRESULT (__attribute__((__stdcall__)) *get_childNodes)(
        IXMLDOMNode* This,
        IXMLDOMNodeList **childList);
    HRESULT (__attribute__((__stdcall__)) *get_firstChild)(
        IXMLDOMNode* This,
        IXMLDOMNode **firstChild);
    HRESULT (__attribute__((__stdcall__)) *get_lastChild)(
        IXMLDOMNode* This,
        IXMLDOMNode **lastChild);
    HRESULT (__attribute__((__stdcall__)) *get_previousSibling)(
        IXMLDOMNode* This,
        IXMLDOMNode **previousSibling);
    HRESULT (__attribute__((__stdcall__)) *get_nextSibling)(
        IXMLDOMNode* This,
        IXMLDOMNode **nextSibling);
    HRESULT (__attribute__((__stdcall__)) *get_attributes)(
        IXMLDOMNode* This,
        IXMLDOMNamedNodeMap **attributeMap);
    HRESULT (__attribute__((__stdcall__)) *insertBefore)(
        IXMLDOMNode* This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *replaceChild)(
        IXMLDOMNode* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);
    HRESULT (__attribute__((__stdcall__)) *removeChild)(
        IXMLDOMNode* This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);
    HRESULT (__attribute__((__stdcall__)) *appendChild)(
        IXMLDOMNode* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *hasChildNodes)(
        IXMLDOMNode* This,
        VARIANT_BOOL *hasChild);
    HRESULT (__attribute__((__stdcall__)) *get_ownerDocument)(
        IXMLDOMNode* This,
        IXMLDOMDocument **DOMDocument);
    HRESULT (__attribute__((__stdcall__)) *cloneNode)(
        IXMLDOMNode* This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypeString)(
        IXMLDOMNode* This,
        BSTR *nodeType);
    HRESULT (__attribute__((__stdcall__)) *get_text)(
        IXMLDOMNode* This,
        BSTR *text);
    HRESULT (__attribute__((__stdcall__)) *put_text)(
        IXMLDOMNode* This,
        BSTR text);
    HRESULT (__attribute__((__stdcall__)) *get_specified)(
        IXMLDOMNode* This,
        VARIANT_BOOL *isSpecified);
    HRESULT (__attribute__((__stdcall__)) *get_definition)(
        IXMLDOMNode* This,
        IXMLDOMNode **definitionNode);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypedValue)(
        IXMLDOMNode* This,
        VARIANT *typedValue);
    HRESULT (__attribute__((__stdcall__)) *put_nodeTypedValue)(
        IXMLDOMNode* This,
        VARIANT typedValue);
    HRESULT (__attribute__((__stdcall__)) *get_dataType)(
        IXMLDOMNode* This,
        VARIANT *dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *put_dataType)(
        IXMLDOMNode* This,
        BSTR dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *get_xml)(
        IXMLDOMNode* This,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *transformNode)(
        IXMLDOMNode* This,
        IXMLDOMNode *styleSheet,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *selectNodes)(
        IXMLDOMNode* This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);
    HRESULT (__attribute__((__stdcall__)) *selectSingleNode)(
        IXMLDOMNode* This,
        BSTR queryString,
        IXMLDOMNode **resultNode);
    HRESULT (__attribute__((__stdcall__)) *get_parsed)(
        IXMLDOMNode* This,
        VARIANT_BOOL *isParsed);
    HRESULT (__attribute__((__stdcall__)) *get_namespaceURI)(
        IXMLDOMNode* This,
        BSTR *namespaceURI);
    HRESULT (__attribute__((__stdcall__)) *get_prefix)(
        IXMLDOMNode* This,
        BSTR *prefixString);
    HRESULT (__attribute__((__stdcall__)) *get_baseName)(
        IXMLDOMNode* This,
        BSTR *nameString);
    HRESULT (__attribute__((__stdcall__)) *transformNodeToObject)(
        IXMLDOMNode* This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);
   
} IXMLDOMNodeVtbl;
struct IXMLDOMNode {
    IXMLDOMNodeVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_nodeName_Proxy(
    IXMLDOMNode* This,
    BSTR *name);
void __attribute__((__stdcall__)) IXMLDOMNode_get_nodeName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_nodeValue_Proxy(
    IXMLDOMNode* This,
    VARIANT *value);
void __attribute__((__stdcall__)) IXMLDOMNode_get_nodeValue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_put_nodeValue_Proxy(
    IXMLDOMNode* This,
    VARIANT value);
void __attribute__((__stdcall__)) IXMLDOMNode_put_nodeValue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_nodeType_Proxy(
    IXMLDOMNode* This,
    DOMNodeType *type);
void __attribute__((__stdcall__)) IXMLDOMNode_get_nodeType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_parentNode_Proxy(
    IXMLDOMNode* This,
    IXMLDOMNode **parent);
void __attribute__((__stdcall__)) IXMLDOMNode_get_parentNode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_childNodes_Proxy(
    IXMLDOMNode* This,
    IXMLDOMNodeList **childList);
void __attribute__((__stdcall__)) IXMLDOMNode_get_childNodes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_firstChild_Proxy(
    IXMLDOMNode* This,
    IXMLDOMNode **firstChild);
void __attribute__((__stdcall__)) IXMLDOMNode_get_firstChild_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_lastChild_Proxy(
    IXMLDOMNode* This,
    IXMLDOMNode **lastChild);
void __attribute__((__stdcall__)) IXMLDOMNode_get_lastChild_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_previousSibling_Proxy(
    IXMLDOMNode* This,
    IXMLDOMNode **previousSibling);
void __attribute__((__stdcall__)) IXMLDOMNode_get_previousSibling_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_nextSibling_Proxy(
    IXMLDOMNode* This,
    IXMLDOMNode **nextSibling);
void __attribute__((__stdcall__)) IXMLDOMNode_get_nextSibling_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_attributes_Proxy(
    IXMLDOMNode* This,
    IXMLDOMNamedNodeMap **attributeMap);
void __attribute__((__stdcall__)) IXMLDOMNode_get_attributes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_insertBefore_Proxy(
    IXMLDOMNode* This,
    IXMLDOMNode *newChild,
    VARIANT refChild,
    IXMLDOMNode **outNewChild);
void __attribute__((__stdcall__)) IXMLDOMNode_insertBefore_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_replaceChild_Proxy(
    IXMLDOMNode* This,
    IXMLDOMNode *newChild,
    IXMLDOMNode *oldChild,
    IXMLDOMNode **outOldChild);
void __attribute__((__stdcall__)) IXMLDOMNode_replaceChild_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_removeChild_Proxy(
    IXMLDOMNode* This,
    IXMLDOMNode *childNode,
    IXMLDOMNode **oldChild);
void __attribute__((__stdcall__)) IXMLDOMNode_removeChild_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_appendChild_Proxy(
    IXMLDOMNode* This,
    IXMLDOMNode *newChild,
    IXMLDOMNode **outNewChild);
void __attribute__((__stdcall__)) IXMLDOMNode_appendChild_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_hasChildNodes_Proxy(
    IXMLDOMNode* This,
    VARIANT_BOOL *hasChild);
void __attribute__((__stdcall__)) IXMLDOMNode_hasChildNodes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_ownerDocument_Proxy(
    IXMLDOMNode* This,
    IXMLDOMDocument **DOMDocument);
void __attribute__((__stdcall__)) IXMLDOMNode_get_ownerDocument_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_cloneNode_Proxy(
    IXMLDOMNode* This,
    VARIANT_BOOL deep,
    IXMLDOMNode **cloneRoot);
void __attribute__((__stdcall__)) IXMLDOMNode_cloneNode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_nodeTypeString_Proxy(
    IXMLDOMNode* This,
    BSTR *nodeType);
void __attribute__((__stdcall__)) IXMLDOMNode_get_nodeTypeString_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_text_Proxy(
    IXMLDOMNode* This,
    BSTR *text);
void __attribute__((__stdcall__)) IXMLDOMNode_get_text_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_put_text_Proxy(
    IXMLDOMNode* This,
    BSTR text);
void __attribute__((__stdcall__)) IXMLDOMNode_put_text_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_specified_Proxy(
    IXMLDOMNode* This,
    VARIANT_BOOL *isSpecified);
void __attribute__((__stdcall__)) IXMLDOMNode_get_specified_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_definition_Proxy(
    IXMLDOMNode* This,
    IXMLDOMNode **definitionNode);
void __attribute__((__stdcall__)) IXMLDOMNode_get_definition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_nodeTypedValue_Proxy(
    IXMLDOMNode* This,
    VARIANT *typedValue);
void __attribute__((__stdcall__)) IXMLDOMNode_get_nodeTypedValue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_put_nodeTypedValue_Proxy(
    IXMLDOMNode* This,
    VARIANT typedValue);
void __attribute__((__stdcall__)) IXMLDOMNode_put_nodeTypedValue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_dataType_Proxy(
    IXMLDOMNode* This,
    VARIANT *dataTypeName);
void __attribute__((__stdcall__)) IXMLDOMNode_get_dataType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_put_dataType_Proxy(
    IXMLDOMNode* This,
    BSTR dataTypeName);
void __attribute__((__stdcall__)) IXMLDOMNode_put_dataType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_xml_Proxy(
    IXMLDOMNode* This,
    BSTR *xmlString);
void __attribute__((__stdcall__)) IXMLDOMNode_get_xml_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_transformNode_Proxy(
    IXMLDOMNode* This,
    IXMLDOMNode *styleSheet,
    BSTR *xmlString);
void __attribute__((__stdcall__)) IXMLDOMNode_transformNode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_selectNodes_Proxy(
    IXMLDOMNode* This,
    BSTR queryString,
    IXMLDOMNodeList **resultList);
void __attribute__((__stdcall__)) IXMLDOMNode_selectNodes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_selectSingleNode_Proxy(
    IXMLDOMNode* This,
    BSTR queryString,
    IXMLDOMNode **resultNode);
void __attribute__((__stdcall__)) IXMLDOMNode_selectSingleNode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_parsed_Proxy(
    IXMLDOMNode* This,
    VARIANT_BOOL *isParsed);
void __attribute__((__stdcall__)) IXMLDOMNode_get_parsed_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_namespaceURI_Proxy(
    IXMLDOMNode* This,
    BSTR *namespaceURI);
void __attribute__((__stdcall__)) IXMLDOMNode_get_namespaceURI_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_prefix_Proxy(
    IXMLDOMNode* This,
    BSTR *prefixString);
void __attribute__((__stdcall__)) IXMLDOMNode_get_prefix_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_baseName_Proxy(
    IXMLDOMNode* This,
    BSTR *nameString);
void __attribute__((__stdcall__)) IXMLDOMNode_get_baseName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNode_transformNodeToObject_Proxy(
    IXMLDOMNode* This,
    IXMLDOMNode *stylesheet,
    VARIANT outputObject);
void __attribute__((__stdcall__)) IXMLDOMNode_transformNodeToObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLDOMDocument ;
typedef struct IXMLDOMDocumentVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMDocument* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMDocument* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMDocument* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMDocument* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMDocument* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMDocument* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMDocument* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_nodeName)(
        IXMLDOMDocument* This,
        BSTR *name);
    HRESULT (__attribute__((__stdcall__)) *get_nodeValue)(
        IXMLDOMDocument* This,
        VARIANT *value);
    HRESULT (__attribute__((__stdcall__)) *put_nodeValue)(
        IXMLDOMDocument* This,
        VARIANT value);
    HRESULT (__attribute__((__stdcall__)) *get_nodeType)(
        IXMLDOMDocument* This,
        DOMNodeType *type);
    HRESULT (__attribute__((__stdcall__)) *get_parentNode)(
        IXMLDOMDocument* This,
        IXMLDOMNode **parent);
    HRESULT (__attribute__((__stdcall__)) *get_childNodes)(
        IXMLDOMDocument* This,
        IXMLDOMNodeList **childList);
    HRESULT (__attribute__((__stdcall__)) *get_firstChild)(
        IXMLDOMDocument* This,
        IXMLDOMNode **firstChild);
    HRESULT (__attribute__((__stdcall__)) *get_lastChild)(
        IXMLDOMDocument* This,
        IXMLDOMNode **lastChild);
    HRESULT (__attribute__((__stdcall__)) *get_previousSibling)(
        IXMLDOMDocument* This,
        IXMLDOMNode **previousSibling);
    HRESULT (__attribute__((__stdcall__)) *get_nextSibling)(
        IXMLDOMDocument* This,
        IXMLDOMNode **nextSibling);
    HRESULT (__attribute__((__stdcall__)) *get_attributes)(
        IXMLDOMDocument* This,
        IXMLDOMNamedNodeMap **attributeMap);
    HRESULT (__attribute__((__stdcall__)) *insertBefore)(
        IXMLDOMDocument* This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *replaceChild)(
        IXMLDOMDocument* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);
    HRESULT (__attribute__((__stdcall__)) *removeChild)(
        IXMLDOMDocument* This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);
    HRESULT (__attribute__((__stdcall__)) *appendChild)(
        IXMLDOMDocument* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *hasChildNodes)(
        IXMLDOMDocument* This,
        VARIANT_BOOL *hasChild);
    HRESULT (__attribute__((__stdcall__)) *get_ownerDocument)(
        IXMLDOMDocument* This,
        IXMLDOMDocument **DOMDocument);
    HRESULT (__attribute__((__stdcall__)) *cloneNode)(
        IXMLDOMDocument* This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypeString)(
        IXMLDOMDocument* This,
        BSTR *nodeType);
    HRESULT (__attribute__((__stdcall__)) *get_text)(
        IXMLDOMDocument* This,
        BSTR *text);
    HRESULT (__attribute__((__stdcall__)) *put_text)(
        IXMLDOMDocument* This,
        BSTR text);
    HRESULT (__attribute__((__stdcall__)) *get_specified)(
        IXMLDOMDocument* This,
        VARIANT_BOOL *isSpecified);
    HRESULT (__attribute__((__stdcall__)) *get_definition)(
        IXMLDOMDocument* This,
        IXMLDOMNode **definitionNode);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypedValue)(
        IXMLDOMDocument* This,
        VARIANT *typedValue);
    HRESULT (__attribute__((__stdcall__)) *put_nodeTypedValue)(
        IXMLDOMDocument* This,
        VARIANT typedValue);
    HRESULT (__attribute__((__stdcall__)) *get_dataType)(
        IXMLDOMDocument* This,
        VARIANT *dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *put_dataType)(
        IXMLDOMDocument* This,
        BSTR dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *get_xml)(
        IXMLDOMDocument* This,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *transformNode)(
        IXMLDOMDocument* This,
        IXMLDOMNode *styleSheet,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *selectNodes)(
        IXMLDOMDocument* This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);
    HRESULT (__attribute__((__stdcall__)) *selectSingleNode)(
        IXMLDOMDocument* This,
        BSTR queryString,
        IXMLDOMNode **resultNode);
    HRESULT (__attribute__((__stdcall__)) *get_parsed)(
        IXMLDOMDocument* This,
        VARIANT_BOOL *isParsed);
    HRESULT (__attribute__((__stdcall__)) *get_namespaceURI)(
        IXMLDOMDocument* This,
        BSTR *namespaceURI);
    HRESULT (__attribute__((__stdcall__)) *get_prefix)(
        IXMLDOMDocument* This,
        BSTR *prefixString);
    HRESULT (__attribute__((__stdcall__)) *get_baseName)(
        IXMLDOMDocument* This,
        BSTR *nameString);
    HRESULT (__attribute__((__stdcall__)) *transformNodeToObject)(
        IXMLDOMDocument* This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);
    HRESULT (__attribute__((__stdcall__)) *get_doctype)(
        IXMLDOMDocument* This,
        IXMLDOMDocumentType **documentType);
    HRESULT (__attribute__((__stdcall__)) *get_implementation)(
        IXMLDOMDocument* This,
        IXMLDOMImplementation **impl);
    HRESULT (__attribute__((__stdcall__)) *get_documentElement)(
        IXMLDOMDocument* This,
        IXMLDOMElement **DOMElement);
    HRESULT (__attribute__((__stdcall__)) *putref_documentElement)(
        IXMLDOMDocument* This,
        IXMLDOMElement *DOMElement);
    HRESULT (__attribute__((__stdcall__)) *createElement)(
        IXMLDOMDocument* This,
        BSTR tagname,
        IXMLDOMElement **element);
    HRESULT (__attribute__((__stdcall__)) *createDocumentFragment)(
        IXMLDOMDocument* This,
        IXMLDOMDocumentFragment **docFrag);
    HRESULT (__attribute__((__stdcall__)) *createTextNode)(
        IXMLDOMDocument* This,
        BSTR data,
        IXMLDOMText **text);
    HRESULT (__attribute__((__stdcall__)) *createComment)(
        IXMLDOMDocument* This,
        BSTR data,
        IXMLDOMComment **comment);
    HRESULT (__attribute__((__stdcall__)) *createCDATASection)(
        IXMLDOMDocument* This,
        BSTR data,
        IXMLDOMCDATASection **cdata);
    HRESULT (__attribute__((__stdcall__)) *createProcessingInstruction)(
        IXMLDOMDocument* This,
        BSTR target,
        BSTR data,
        IXMLDOMProcessingInstruction **pi);
    HRESULT (__attribute__((__stdcall__)) *createAttribute)(
        IXMLDOMDocument* This,
        BSTR name,
        IXMLDOMAttribute **attribute);
    HRESULT (__attribute__((__stdcall__)) *createEntityReference)(
        IXMLDOMDocument* This,
        BSTR name,
        IXMLDOMEntityReference **entityRef);
    HRESULT (__attribute__((__stdcall__)) *getElementsByTagName)(
        IXMLDOMDocument* This,
        BSTR tagName,
        IXMLDOMNodeList **resultList);
    HRESULT (__attribute__((__stdcall__)) *createNode)(
        IXMLDOMDocument* This,
        VARIANT Type,
        BSTR name,
        BSTR namespaceURI,
        IXMLDOMNode **node);
    HRESULT (__attribute__((__stdcall__)) *nodeFromID)(
        IXMLDOMDocument* This,
        BSTR idString,
        IXMLDOMNode **node);
    HRESULT (__attribute__((__stdcall__)) *load)(
        IXMLDOMDocument* This,
        VARIANT xmlSource,
        VARIANT_BOOL *isSuccessful);
    HRESULT (__attribute__((__stdcall__)) *get_readyState)(
        IXMLDOMDocument* This,
        LONG *value);
    HRESULT (__attribute__((__stdcall__)) *get_parseError)(
        IXMLDOMDocument* This,
        IXMLDOMParseError **errorObj);
    HRESULT (__attribute__((__stdcall__)) *get_url)(
        IXMLDOMDocument* This,
        BSTR *urlString);
    HRESULT (__attribute__((__stdcall__)) *get_async)(
        IXMLDOMDocument* This,
        VARIANT_BOOL *isAsync);
    HRESULT (__attribute__((__stdcall__)) *put_async)(
        IXMLDOMDocument* This,
        VARIANT_BOOL isAsync);
    HRESULT (__attribute__((__stdcall__)) *abort)(
        IXMLDOMDocument* This);
    HRESULT (__attribute__((__stdcall__)) *loadXML)(
        IXMLDOMDocument* This,
        BSTR bstrXML,
        VARIANT_BOOL *isSuccessful);
    HRESULT (__attribute__((__stdcall__)) *save)(
        IXMLDOMDocument* This,
        VARIANT destination);
    HRESULT (__attribute__((__stdcall__)) *get_validateOnParse)(
        IXMLDOMDocument* This,
        VARIANT_BOOL *isValidating);
    HRESULT (__attribute__((__stdcall__)) *put_validateOnParse)(
        IXMLDOMDocument* This,
        VARIANT_BOOL isValidating);
    HRESULT (__attribute__((__stdcall__)) *get_resolveExternals)(
        IXMLDOMDocument* This,
        VARIANT_BOOL *isResolving);
    HRESULT (__attribute__((__stdcall__)) *put_resolveExternals)(
        IXMLDOMDocument* This,
        VARIANT_BOOL isValidating);
    HRESULT (__attribute__((__stdcall__)) *get_preserveWhiteSpace)(
        IXMLDOMDocument* This,
        VARIANT_BOOL *isPreserving);
    HRESULT (__attribute__((__stdcall__)) *put_preserveWhiteSpace)(
        IXMLDOMDocument* This,
        VARIANT_BOOL isPreserving);
    HRESULT (__attribute__((__stdcall__)) *put_onreadystatechange)(
        IXMLDOMDocument* This,
        VARIANT readystatechangeSink);
    HRESULT (__attribute__((__stdcall__)) *put_ondataavailable)(
        IXMLDOMDocument* This,
        VARIANT ondataavailableSink);
    HRESULT (__attribute__((__stdcall__)) *put_ontransformnode)(
        IXMLDOMDocument* This,
        VARIANT ontransformnodeSink);
   
} IXMLDOMDocumentVtbl;
struct IXMLDOMDocument {
    IXMLDOMDocumentVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_doctype_Proxy(
    IXMLDOMDocument* This,
    IXMLDOMDocumentType **documentType);
void __attribute__((__stdcall__)) IXMLDOMDocument_get_doctype_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_implementation_Proxy(
    IXMLDOMDocument* This,
    IXMLDOMImplementation **impl);
void __attribute__((__stdcall__)) IXMLDOMDocument_get_implementation_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_documentElement_Proxy(
    IXMLDOMDocument* This,
    IXMLDOMElement **DOMElement);
void __attribute__((__stdcall__)) IXMLDOMDocument_get_documentElement_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_putref_documentElement_Proxy(
    IXMLDOMDocument* This,
    IXMLDOMElement *DOMElement);
void __attribute__((__stdcall__)) IXMLDOMDocument_putref_documentElement_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createElement_Proxy(
    IXMLDOMDocument* This,
    BSTR tagname,
    IXMLDOMElement **element);
void __attribute__((__stdcall__)) IXMLDOMDocument_createElement_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createDocumentFragment_Proxy(
    IXMLDOMDocument* This,
    IXMLDOMDocumentFragment **docFrag);
void __attribute__((__stdcall__)) IXMLDOMDocument_createDocumentFragment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createTextNode_Proxy(
    IXMLDOMDocument* This,
    BSTR data,
    IXMLDOMText **text);
void __attribute__((__stdcall__)) IXMLDOMDocument_createTextNode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createComment_Proxy(
    IXMLDOMDocument* This,
    BSTR data,
    IXMLDOMComment **comment);
void __attribute__((__stdcall__)) IXMLDOMDocument_createComment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createCDATASection_Proxy(
    IXMLDOMDocument* This,
    BSTR data,
    IXMLDOMCDATASection **cdata);
void __attribute__((__stdcall__)) IXMLDOMDocument_createCDATASection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createProcessingInstruction_Proxy(
    IXMLDOMDocument* This,
    BSTR target,
    BSTR data,
    IXMLDOMProcessingInstruction **pi);
void __attribute__((__stdcall__)) IXMLDOMDocument_createProcessingInstruction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createAttribute_Proxy(
    IXMLDOMDocument* This,
    BSTR name,
    IXMLDOMAttribute **attribute);
void __attribute__((__stdcall__)) IXMLDOMDocument_createAttribute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createEntityReference_Proxy(
    IXMLDOMDocument* This,
    BSTR name,
    IXMLDOMEntityReference **entityRef);
void __attribute__((__stdcall__)) IXMLDOMDocument_createEntityReference_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_getElementsByTagName_Proxy(
    IXMLDOMDocument* This,
    BSTR tagName,
    IXMLDOMNodeList **resultList);
void __attribute__((__stdcall__)) IXMLDOMDocument_getElementsByTagName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createNode_Proxy(
    IXMLDOMDocument* This,
    VARIANT Type,
    BSTR name,
    BSTR namespaceURI,
    IXMLDOMNode **node);
void __attribute__((__stdcall__)) IXMLDOMDocument_createNode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_nodeFromID_Proxy(
    IXMLDOMDocument* This,
    BSTR idString,
    IXMLDOMNode **node);
void __attribute__((__stdcall__)) IXMLDOMDocument_nodeFromID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_load_Proxy(
    IXMLDOMDocument* This,
    VARIANT xmlSource,
    VARIANT_BOOL *isSuccessful);
void __attribute__((__stdcall__)) IXMLDOMDocument_load_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_readyState_Proxy(
    IXMLDOMDocument* This,
    LONG *value);
void __attribute__((__stdcall__)) IXMLDOMDocument_get_readyState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_parseError_Proxy(
    IXMLDOMDocument* This,
    IXMLDOMParseError **errorObj);
void __attribute__((__stdcall__)) IXMLDOMDocument_get_parseError_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_url_Proxy(
    IXMLDOMDocument* This,
    BSTR *urlString);
void __attribute__((__stdcall__)) IXMLDOMDocument_get_url_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_async_Proxy(
    IXMLDOMDocument* This,
    VARIANT_BOOL *isAsync);
void __attribute__((__stdcall__)) IXMLDOMDocument_get_async_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_put_async_Proxy(
    IXMLDOMDocument* This,
    VARIANT_BOOL isAsync);
void __attribute__((__stdcall__)) IXMLDOMDocument_put_async_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_abort_Proxy(
    IXMLDOMDocument* This);
void __attribute__((__stdcall__)) IXMLDOMDocument_abort_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_loadXML_Proxy(
    IXMLDOMDocument* This,
    BSTR bstrXML,
    VARIANT_BOOL *isSuccessful);
void __attribute__((__stdcall__)) IXMLDOMDocument_loadXML_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_save_Proxy(
    IXMLDOMDocument* This,
    VARIANT destination);
void __attribute__((__stdcall__)) IXMLDOMDocument_save_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_validateOnParse_Proxy(
    IXMLDOMDocument* This,
    VARIANT_BOOL *isValidating);
void __attribute__((__stdcall__)) IXMLDOMDocument_get_validateOnParse_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_put_validateOnParse_Proxy(
    IXMLDOMDocument* This,
    VARIANT_BOOL isValidating);
void __attribute__((__stdcall__)) IXMLDOMDocument_put_validateOnParse_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_resolveExternals_Proxy(
    IXMLDOMDocument* This,
    VARIANT_BOOL *isResolving);
void __attribute__((__stdcall__)) IXMLDOMDocument_get_resolveExternals_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_put_resolveExternals_Proxy(
    IXMLDOMDocument* This,
    VARIANT_BOOL isValidating);
void __attribute__((__stdcall__)) IXMLDOMDocument_put_resolveExternals_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_preserveWhiteSpace_Proxy(
    IXMLDOMDocument* This,
    VARIANT_BOOL *isPreserving);
void __attribute__((__stdcall__)) IXMLDOMDocument_get_preserveWhiteSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_put_preserveWhiteSpace_Proxy(
    IXMLDOMDocument* This,
    VARIANT_BOOL isPreserving);
void __attribute__((__stdcall__)) IXMLDOMDocument_put_preserveWhiteSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_put_onreadystatechange_Proxy(
    IXMLDOMDocument* This,
    VARIANT readystatechangeSink);
void __attribute__((__stdcall__)) IXMLDOMDocument_put_onreadystatechange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_put_ondataavailable_Proxy(
    IXMLDOMDocument* This,
    VARIANT ondataavailableSink);
void __attribute__((__stdcall__)) IXMLDOMDocument_put_ondataavailable_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_put_ontransformnode_Proxy(
    IXMLDOMDocument* This,
    VARIANT ontransformnodeSink);
void __attribute__((__stdcall__)) IXMLDOMDocument_put_ontransformnode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLDOMNodeList ;
typedef struct IXMLDOMNodeListVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMNodeList* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMNodeList* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMNodeList* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMNodeList* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMNodeList* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMNodeList* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMNodeList* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_item)(
        IXMLDOMNodeList* This,
        LONG index,
        IXMLDOMNode **listItem);
    HRESULT (__attribute__((__stdcall__)) *get_length)(
        IXMLDOMNodeList* This,
        LONG *listLength);
    HRESULT (__attribute__((__stdcall__)) *nextNode)(
        IXMLDOMNodeList* This,
        IXMLDOMNode **nextItem);
    HRESULT (__attribute__((__stdcall__)) *reset)(
        IXMLDOMNodeList* This);
    HRESULT (__attribute__((__stdcall__)) *_newEnum)(
        IXMLDOMNodeList* This,
        IUnknown **ppUnk);
   
} IXMLDOMNodeListVtbl;
struct IXMLDOMNodeList {
    IXMLDOMNodeListVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDOMNodeList_get_item_Proxy(
    IXMLDOMNodeList* This,
    LONG index,
    IXMLDOMNode **listItem);
void __attribute__((__stdcall__)) IXMLDOMNodeList_get_item_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNodeList_get_length_Proxy(
    IXMLDOMNodeList* This,
    LONG *listLength);
void __attribute__((__stdcall__)) IXMLDOMNodeList_get_length_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNodeList_nextNode_Proxy(
    IXMLDOMNodeList* This,
    IXMLDOMNode **nextItem);
void __attribute__((__stdcall__)) IXMLDOMNodeList_nextNode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNodeList_reset_Proxy(
    IXMLDOMNodeList* This);
void __attribute__((__stdcall__)) IXMLDOMNodeList_reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNodeList__newEnum_Proxy(
    IXMLDOMNodeList* This,
    IUnknown **ppUnk);
void __attribute__((__stdcall__)) IXMLDOMNodeList__newEnum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLDOMNamedNodeMap ;
typedef struct IXMLDOMNamedNodeMapVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMNamedNodeMap* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMNamedNodeMap* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMNamedNodeMap* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMNamedNodeMap* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMNamedNodeMap* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMNamedNodeMap* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMNamedNodeMap* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *getNamedItem)(
        IXMLDOMNamedNodeMap* This,
        BSTR name,
        IXMLDOMNode **namedItem);
    HRESULT (__attribute__((__stdcall__)) *setNamedItem)(
        IXMLDOMNamedNodeMap* This,
        IXMLDOMNode *newItem,
        IXMLDOMNode **namedItem);
    HRESULT (__attribute__((__stdcall__)) *removeNamedItem)(
        IXMLDOMNamedNodeMap* This,
        BSTR name,
        IXMLDOMNode **namedItem);
    HRESULT (__attribute__((__stdcall__)) *get_item)(
        IXMLDOMNamedNodeMap* This,
        LONG index,
        IXMLDOMNode **listItem);
    HRESULT (__attribute__((__stdcall__)) *get_length)(
        IXMLDOMNamedNodeMap* This,
        LONG *listLength);
    HRESULT (__attribute__((__stdcall__)) *getQualifiedItem)(
        IXMLDOMNamedNodeMap* This,
        BSTR baseName,
        BSTR namespaceURI,
        IXMLDOMNode **qualifiedItem);
    HRESULT (__attribute__((__stdcall__)) *removeQualifiedItem)(
        IXMLDOMNamedNodeMap* This,
        BSTR baseName,
        BSTR namespaceURI,
        IXMLDOMNode **qualifiedItem);
    HRESULT (__attribute__((__stdcall__)) *nextNode)(
        IXMLDOMNamedNodeMap* This,
        IXMLDOMNode **nextItem);
    HRESULT (__attribute__((__stdcall__)) *reset)(
        IXMLDOMNamedNodeMap* This);
    HRESULT (__attribute__((__stdcall__)) *_newEnum)(
        IXMLDOMNamedNodeMap* This,
        IUnknown **ppUnk);
   
} IXMLDOMNamedNodeMapVtbl;
struct IXMLDOMNamedNodeMap {
    IXMLDOMNamedNodeMapVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_getNamedItem_Proxy(
    IXMLDOMNamedNodeMap* This,
    BSTR name,
    IXMLDOMNode **namedItem);
void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_getNamedItem_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_setNamedItem_Proxy(
    IXMLDOMNamedNodeMap* This,
    IXMLDOMNode *newItem,
    IXMLDOMNode **namedItem);
void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_setNamedItem_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_removeNamedItem_Proxy(
    IXMLDOMNamedNodeMap* This,
    BSTR name,
    IXMLDOMNode **namedItem);
void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_removeNamedItem_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_get_item_Proxy(
    IXMLDOMNamedNodeMap* This,
    LONG index,
    IXMLDOMNode **listItem);
void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_get_item_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_get_length_Proxy(
    IXMLDOMNamedNodeMap* This,
    LONG *listLength);
void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_get_length_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_getQualifiedItem_Proxy(
    IXMLDOMNamedNodeMap* This,
    BSTR baseName,
    BSTR namespaceURI,
    IXMLDOMNode **qualifiedItem);
void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_getQualifiedItem_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_removeQualifiedItem_Proxy(
    IXMLDOMNamedNodeMap* This,
    BSTR baseName,
    BSTR namespaceURI,
    IXMLDOMNode **qualifiedItem);
void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_removeQualifiedItem_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_nextNode_Proxy(
    IXMLDOMNamedNodeMap* This,
    IXMLDOMNode **nextItem);
void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_nextNode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_reset_Proxy(
    IXMLDOMNamedNodeMap* This);
void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap__newEnum_Proxy(
    IXMLDOMNamedNodeMap* This,
    IUnknown **ppUnk);
void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap__newEnum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLDOMDocumentFragment ;
typedef struct IXMLDOMDocumentFragmentVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMDocumentFragment* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMDocumentFragment* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMDocumentFragment* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMDocumentFragment* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMDocumentFragment* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMDocumentFragment* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMDocumentFragment* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_nodeName)(
        IXMLDOMDocumentFragment* This,
        BSTR *name);
    HRESULT (__attribute__((__stdcall__)) *get_nodeValue)(
        IXMLDOMDocumentFragment* This,
        VARIANT *value);
    HRESULT (__attribute__((__stdcall__)) *put_nodeValue)(
        IXMLDOMDocumentFragment* This,
        VARIANT value);
    HRESULT (__attribute__((__stdcall__)) *get_nodeType)(
        IXMLDOMDocumentFragment* This,
        DOMNodeType *type);
    HRESULT (__attribute__((__stdcall__)) *get_parentNode)(
        IXMLDOMDocumentFragment* This,
        IXMLDOMNode **parent);
    HRESULT (__attribute__((__stdcall__)) *get_childNodes)(
        IXMLDOMDocumentFragment* This,
        IXMLDOMNodeList **childList);
    HRESULT (__attribute__((__stdcall__)) *get_firstChild)(
        IXMLDOMDocumentFragment* This,
        IXMLDOMNode **firstChild);
    HRESULT (__attribute__((__stdcall__)) *get_lastChild)(
        IXMLDOMDocumentFragment* This,
        IXMLDOMNode **lastChild);
    HRESULT (__attribute__((__stdcall__)) *get_previousSibling)(
        IXMLDOMDocumentFragment* This,
        IXMLDOMNode **previousSibling);
    HRESULT (__attribute__((__stdcall__)) *get_nextSibling)(
        IXMLDOMDocumentFragment* This,
        IXMLDOMNode **nextSibling);
    HRESULT (__attribute__((__stdcall__)) *get_attributes)(
        IXMLDOMDocumentFragment* This,
        IXMLDOMNamedNodeMap **attributeMap);
    HRESULT (__attribute__((__stdcall__)) *insertBefore)(
        IXMLDOMDocumentFragment* This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *replaceChild)(
        IXMLDOMDocumentFragment* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);
    HRESULT (__attribute__((__stdcall__)) *removeChild)(
        IXMLDOMDocumentFragment* This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);
    HRESULT (__attribute__((__stdcall__)) *appendChild)(
        IXMLDOMDocumentFragment* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *hasChildNodes)(
        IXMLDOMDocumentFragment* This,
        VARIANT_BOOL *hasChild);
    HRESULT (__attribute__((__stdcall__)) *get_ownerDocument)(
        IXMLDOMDocumentFragment* This,
        IXMLDOMDocument **DOMDocument);
    HRESULT (__attribute__((__stdcall__)) *cloneNode)(
        IXMLDOMDocumentFragment* This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypeString)(
        IXMLDOMDocumentFragment* This,
        BSTR *nodeType);
    HRESULT (__attribute__((__stdcall__)) *get_text)(
        IXMLDOMDocumentFragment* This,
        BSTR *text);
    HRESULT (__attribute__((__stdcall__)) *put_text)(
        IXMLDOMDocumentFragment* This,
        BSTR text);
    HRESULT (__attribute__((__stdcall__)) *get_specified)(
        IXMLDOMDocumentFragment* This,
        VARIANT_BOOL *isSpecified);
    HRESULT (__attribute__((__stdcall__)) *get_definition)(
        IXMLDOMDocumentFragment* This,
        IXMLDOMNode **definitionNode);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypedValue)(
        IXMLDOMDocumentFragment* This,
        VARIANT *typedValue);
    HRESULT (__attribute__((__stdcall__)) *put_nodeTypedValue)(
        IXMLDOMDocumentFragment* This,
        VARIANT typedValue);
    HRESULT (__attribute__((__stdcall__)) *get_dataType)(
        IXMLDOMDocumentFragment* This,
        VARIANT *dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *put_dataType)(
        IXMLDOMDocumentFragment* This,
        BSTR dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *get_xml)(
        IXMLDOMDocumentFragment* This,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *transformNode)(
        IXMLDOMDocumentFragment* This,
        IXMLDOMNode *styleSheet,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *selectNodes)(
        IXMLDOMDocumentFragment* This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);
    HRESULT (__attribute__((__stdcall__)) *selectSingleNode)(
        IXMLDOMDocumentFragment* This,
        BSTR queryString,
        IXMLDOMNode **resultNode);
    HRESULT (__attribute__((__stdcall__)) *get_parsed)(
        IXMLDOMDocumentFragment* This,
        VARIANT_BOOL *isParsed);
    HRESULT (__attribute__((__stdcall__)) *get_namespaceURI)(
        IXMLDOMDocumentFragment* This,
        BSTR *namespaceURI);
    HRESULT (__attribute__((__stdcall__)) *get_prefix)(
        IXMLDOMDocumentFragment* This,
        BSTR *prefixString);
    HRESULT (__attribute__((__stdcall__)) *get_baseName)(
        IXMLDOMDocumentFragment* This,
        BSTR *nameString);
    HRESULT (__attribute__((__stdcall__)) *transformNodeToObject)(
        IXMLDOMDocumentFragment* This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);
   
} IXMLDOMDocumentFragmentVtbl;
struct IXMLDOMDocumentFragment {
    IXMLDOMDocumentFragmentVtbl* lpVtbl;
};
extern const GUID IID_IXMLDOMCharacterData ;
typedef struct IXMLDOMCharacterDataVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMCharacterData* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMCharacterData* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMCharacterData* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMCharacterData* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMCharacterData* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMCharacterData* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMCharacterData* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_nodeName)(
        IXMLDOMCharacterData* This,
        BSTR *name);
    HRESULT (__attribute__((__stdcall__)) *get_nodeValue)(
        IXMLDOMCharacterData* This,
        VARIANT *value);
    HRESULT (__attribute__((__stdcall__)) *put_nodeValue)(
        IXMLDOMCharacterData* This,
        VARIANT value);
    HRESULT (__attribute__((__stdcall__)) *get_nodeType)(
        IXMLDOMCharacterData* This,
        DOMNodeType *type);
    HRESULT (__attribute__((__stdcall__)) *get_parentNode)(
        IXMLDOMCharacterData* This,
        IXMLDOMNode **parent);
    HRESULT (__attribute__((__stdcall__)) *get_childNodes)(
        IXMLDOMCharacterData* This,
        IXMLDOMNodeList **childList);
    HRESULT (__attribute__((__stdcall__)) *get_firstChild)(
        IXMLDOMCharacterData* This,
        IXMLDOMNode **firstChild);
    HRESULT (__attribute__((__stdcall__)) *get_lastChild)(
        IXMLDOMCharacterData* This,
        IXMLDOMNode **lastChild);
    HRESULT (__attribute__((__stdcall__)) *get_previousSibling)(
        IXMLDOMCharacterData* This,
        IXMLDOMNode **previousSibling);
    HRESULT (__attribute__((__stdcall__)) *get_nextSibling)(
        IXMLDOMCharacterData* This,
        IXMLDOMNode **nextSibling);
    HRESULT (__attribute__((__stdcall__)) *get_attributes)(
        IXMLDOMCharacterData* This,
        IXMLDOMNamedNodeMap **attributeMap);
    HRESULT (__attribute__((__stdcall__)) *insertBefore)(
        IXMLDOMCharacterData* This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *replaceChild)(
        IXMLDOMCharacterData* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);
    HRESULT (__attribute__((__stdcall__)) *removeChild)(
        IXMLDOMCharacterData* This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);
    HRESULT (__attribute__((__stdcall__)) *appendChild)(
        IXMLDOMCharacterData* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *hasChildNodes)(
        IXMLDOMCharacterData* This,
        VARIANT_BOOL *hasChild);
    HRESULT (__attribute__((__stdcall__)) *get_ownerDocument)(
        IXMLDOMCharacterData* This,
        IXMLDOMDocument **DOMDocument);
    HRESULT (__attribute__((__stdcall__)) *cloneNode)(
        IXMLDOMCharacterData* This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypeString)(
        IXMLDOMCharacterData* This,
        BSTR *nodeType);
    HRESULT (__attribute__((__stdcall__)) *get_text)(
        IXMLDOMCharacterData* This,
        BSTR *text);
    HRESULT (__attribute__((__stdcall__)) *put_text)(
        IXMLDOMCharacterData* This,
        BSTR text);
    HRESULT (__attribute__((__stdcall__)) *get_specified)(
        IXMLDOMCharacterData* This,
        VARIANT_BOOL *isSpecified);
    HRESULT (__attribute__((__stdcall__)) *get_definition)(
        IXMLDOMCharacterData* This,
        IXMLDOMNode **definitionNode);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypedValue)(
        IXMLDOMCharacterData* This,
        VARIANT *typedValue);
    HRESULT (__attribute__((__stdcall__)) *put_nodeTypedValue)(
        IXMLDOMCharacterData* This,
        VARIANT typedValue);
    HRESULT (__attribute__((__stdcall__)) *get_dataType)(
        IXMLDOMCharacterData* This,
        VARIANT *dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *put_dataType)(
        IXMLDOMCharacterData* This,
        BSTR dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *get_xml)(
        IXMLDOMCharacterData* This,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *transformNode)(
        IXMLDOMCharacterData* This,
        IXMLDOMNode *styleSheet,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *selectNodes)(
        IXMLDOMCharacterData* This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);
    HRESULT (__attribute__((__stdcall__)) *selectSingleNode)(
        IXMLDOMCharacterData* This,
        BSTR queryString,
        IXMLDOMNode **resultNode);
    HRESULT (__attribute__((__stdcall__)) *get_parsed)(
        IXMLDOMCharacterData* This,
        VARIANT_BOOL *isParsed);
    HRESULT (__attribute__((__stdcall__)) *get_namespaceURI)(
        IXMLDOMCharacterData* This,
        BSTR *namespaceURI);
    HRESULT (__attribute__((__stdcall__)) *get_prefix)(
        IXMLDOMCharacterData* This,
        BSTR *prefixString);
    HRESULT (__attribute__((__stdcall__)) *get_baseName)(
        IXMLDOMCharacterData* This,
        BSTR *nameString);
    HRESULT (__attribute__((__stdcall__)) *transformNodeToObject)(
        IXMLDOMCharacterData* This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);
    HRESULT (__attribute__((__stdcall__)) *get_data)(
        IXMLDOMCharacterData* This,
        BSTR *data);
    HRESULT (__attribute__((__stdcall__)) *put_data)(
        IXMLDOMCharacterData* This,
        BSTR data);
    HRESULT (__attribute__((__stdcall__)) *get_length)(
        IXMLDOMCharacterData* This,
        LONG *dataLength);
    HRESULT (__attribute__((__stdcall__)) *substringData)(
        IXMLDOMCharacterData* This,
        LONG offset,
        LONG count,
        BSTR *data);
    HRESULT (__attribute__((__stdcall__)) *appendData)(
        IXMLDOMCharacterData* This,
        BSTR data);
    HRESULT (__attribute__((__stdcall__)) *insertData)(
        IXMLDOMCharacterData* This,
        LONG offset,
        BSTR data);
    HRESULT (__attribute__((__stdcall__)) *deleteData)(
        IXMLDOMCharacterData* This,
        LONG offset,
        LONG count);
    HRESULT (__attribute__((__stdcall__)) *replaceData)(
        IXMLDOMCharacterData* This,
        LONG offset,
        LONG count,
        BSTR data);
   
} IXMLDOMCharacterDataVtbl;
struct IXMLDOMCharacterData {
    IXMLDOMCharacterDataVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDOMCharacterData_get_data_Proxy(
    IXMLDOMCharacterData* This,
    BSTR *data);
void __attribute__((__stdcall__)) IXMLDOMCharacterData_get_data_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMCharacterData_put_data_Proxy(
    IXMLDOMCharacterData* This,
    BSTR data);
void __attribute__((__stdcall__)) IXMLDOMCharacterData_put_data_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMCharacterData_get_length_Proxy(
    IXMLDOMCharacterData* This,
    LONG *dataLength);
void __attribute__((__stdcall__)) IXMLDOMCharacterData_get_length_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMCharacterData_substringData_Proxy(
    IXMLDOMCharacterData* This,
    LONG offset,
    LONG count,
    BSTR *data);
void __attribute__((__stdcall__)) IXMLDOMCharacterData_substringData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMCharacterData_appendData_Proxy(
    IXMLDOMCharacterData* This,
    BSTR data);
void __attribute__((__stdcall__)) IXMLDOMCharacterData_appendData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMCharacterData_insertData_Proxy(
    IXMLDOMCharacterData* This,
    LONG offset,
    BSTR data);
void __attribute__((__stdcall__)) IXMLDOMCharacterData_insertData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMCharacterData_deleteData_Proxy(
    IXMLDOMCharacterData* This,
    LONG offset,
    LONG count);
void __attribute__((__stdcall__)) IXMLDOMCharacterData_deleteData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMCharacterData_replaceData_Proxy(
    IXMLDOMCharacterData* This,
    LONG offset,
    LONG count,
    BSTR data);
void __attribute__((__stdcall__)) IXMLDOMCharacterData_replaceData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLDOMAttribute ;
typedef struct IXMLDOMAttributeVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMAttribute* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMAttribute* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMAttribute* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMAttribute* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMAttribute* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMAttribute* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMAttribute* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_nodeName)(
        IXMLDOMAttribute* This,
        BSTR *name);
    HRESULT (__attribute__((__stdcall__)) *get_nodeValue)(
        IXMLDOMAttribute* This,
        VARIANT *value);
    HRESULT (__attribute__((__stdcall__)) *put_nodeValue)(
        IXMLDOMAttribute* This,
        VARIANT value);
    HRESULT (__attribute__((__stdcall__)) *get_nodeType)(
        IXMLDOMAttribute* This,
        DOMNodeType *type);
    HRESULT (__attribute__((__stdcall__)) *get_parentNode)(
        IXMLDOMAttribute* This,
        IXMLDOMNode **parent);
    HRESULT (__attribute__((__stdcall__)) *get_childNodes)(
        IXMLDOMAttribute* This,
        IXMLDOMNodeList **childList);
    HRESULT (__attribute__((__stdcall__)) *get_firstChild)(
        IXMLDOMAttribute* This,
        IXMLDOMNode **firstChild);
    HRESULT (__attribute__((__stdcall__)) *get_lastChild)(
        IXMLDOMAttribute* This,
        IXMLDOMNode **lastChild);
    HRESULT (__attribute__((__stdcall__)) *get_previousSibling)(
        IXMLDOMAttribute* This,
        IXMLDOMNode **previousSibling);
    HRESULT (__attribute__((__stdcall__)) *get_nextSibling)(
        IXMLDOMAttribute* This,
        IXMLDOMNode **nextSibling);
    HRESULT (__attribute__((__stdcall__)) *get_attributes)(
        IXMLDOMAttribute* This,
        IXMLDOMNamedNodeMap **attributeMap);
    HRESULT (__attribute__((__stdcall__)) *insertBefore)(
        IXMLDOMAttribute* This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *replaceChild)(
        IXMLDOMAttribute* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);
    HRESULT (__attribute__((__stdcall__)) *removeChild)(
        IXMLDOMAttribute* This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);
    HRESULT (__attribute__((__stdcall__)) *appendChild)(
        IXMLDOMAttribute* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *hasChildNodes)(
        IXMLDOMAttribute* This,
        VARIANT_BOOL *hasChild);
    HRESULT (__attribute__((__stdcall__)) *get_ownerDocument)(
        IXMLDOMAttribute* This,
        IXMLDOMDocument **DOMDocument);
    HRESULT (__attribute__((__stdcall__)) *cloneNode)(
        IXMLDOMAttribute* This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypeString)(
        IXMLDOMAttribute* This,
        BSTR *nodeType);
    HRESULT (__attribute__((__stdcall__)) *get_text)(
        IXMLDOMAttribute* This,
        BSTR *text);
    HRESULT (__attribute__((__stdcall__)) *put_text)(
        IXMLDOMAttribute* This,
        BSTR text);
    HRESULT (__attribute__((__stdcall__)) *get_specified)(
        IXMLDOMAttribute* This,
        VARIANT_BOOL *isSpecified);
    HRESULT (__attribute__((__stdcall__)) *get_definition)(
        IXMLDOMAttribute* This,
        IXMLDOMNode **definitionNode);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypedValue)(
        IXMLDOMAttribute* This,
        VARIANT *typedValue);
    HRESULT (__attribute__((__stdcall__)) *put_nodeTypedValue)(
        IXMLDOMAttribute* This,
        VARIANT typedValue);
    HRESULT (__attribute__((__stdcall__)) *get_dataType)(
        IXMLDOMAttribute* This,
        VARIANT *dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *put_dataType)(
        IXMLDOMAttribute* This,
        BSTR dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *get_xml)(
        IXMLDOMAttribute* This,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *transformNode)(
        IXMLDOMAttribute* This,
        IXMLDOMNode *styleSheet,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *selectNodes)(
        IXMLDOMAttribute* This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);
    HRESULT (__attribute__((__stdcall__)) *selectSingleNode)(
        IXMLDOMAttribute* This,
        BSTR queryString,
        IXMLDOMNode **resultNode);
    HRESULT (__attribute__((__stdcall__)) *get_parsed)(
        IXMLDOMAttribute* This,
        VARIANT_BOOL *isParsed);
    HRESULT (__attribute__((__stdcall__)) *get_namespaceURI)(
        IXMLDOMAttribute* This,
        BSTR *namespaceURI);
    HRESULT (__attribute__((__stdcall__)) *get_prefix)(
        IXMLDOMAttribute* This,
        BSTR *prefixString);
    HRESULT (__attribute__((__stdcall__)) *get_baseName)(
        IXMLDOMAttribute* This,
        BSTR *nameString);
    HRESULT (__attribute__((__stdcall__)) *transformNodeToObject)(
        IXMLDOMAttribute* This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);
    HRESULT (__attribute__((__stdcall__)) *get_name)(
        IXMLDOMAttribute* This,
        BSTR *attributeName);
    HRESULT (__attribute__((__stdcall__)) *get_value)(
        IXMLDOMAttribute* This,
        VARIANT *attributeValue);
    HRESULT (__attribute__((__stdcall__)) *put_value)(
        IXMLDOMAttribute* This,
        VARIANT attributeValue);
   
} IXMLDOMAttributeVtbl;
struct IXMLDOMAttribute {
    IXMLDOMAttributeVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDOMAttribute_get_name_Proxy(
    IXMLDOMAttribute* This,
    BSTR *attributeName);
void __attribute__((__stdcall__)) IXMLDOMAttribute_get_name_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMAttribute_get_value_Proxy(
    IXMLDOMAttribute* This,
    VARIANT *attributeValue);
void __attribute__((__stdcall__)) IXMLDOMAttribute_get_value_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMAttribute_put_value_Proxy(
    IXMLDOMAttribute* This,
    VARIANT attributeValue);
void __attribute__((__stdcall__)) IXMLDOMAttribute_put_value_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLDOMElement ;
typedef struct IXMLDOMElementVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMElement* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMElement* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMElement* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMElement* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMElement* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMElement* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMElement* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_nodeName)(
        IXMLDOMElement* This,
        BSTR *name);
    HRESULT (__attribute__((__stdcall__)) *get_nodeValue)(
        IXMLDOMElement* This,
        VARIANT *value);
    HRESULT (__attribute__((__stdcall__)) *put_nodeValue)(
        IXMLDOMElement* This,
        VARIANT value);
    HRESULT (__attribute__((__stdcall__)) *get_nodeType)(
        IXMLDOMElement* This,
        DOMNodeType *type);
    HRESULT (__attribute__((__stdcall__)) *get_parentNode)(
        IXMLDOMElement* This,
        IXMLDOMNode **parent);
    HRESULT (__attribute__((__stdcall__)) *get_childNodes)(
        IXMLDOMElement* This,
        IXMLDOMNodeList **childList);
    HRESULT (__attribute__((__stdcall__)) *get_firstChild)(
        IXMLDOMElement* This,
        IXMLDOMNode **firstChild);
    HRESULT (__attribute__((__stdcall__)) *get_lastChild)(
        IXMLDOMElement* This,
        IXMLDOMNode **lastChild);
    HRESULT (__attribute__((__stdcall__)) *get_previousSibling)(
        IXMLDOMElement* This,
        IXMLDOMNode **previousSibling);
    HRESULT (__attribute__((__stdcall__)) *get_nextSibling)(
        IXMLDOMElement* This,
        IXMLDOMNode **nextSibling);
    HRESULT (__attribute__((__stdcall__)) *get_attributes)(
        IXMLDOMElement* This,
        IXMLDOMNamedNodeMap **attributeMap);
    HRESULT (__attribute__((__stdcall__)) *insertBefore)(
        IXMLDOMElement* This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *replaceChild)(
        IXMLDOMElement* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);
    HRESULT (__attribute__((__stdcall__)) *removeChild)(
        IXMLDOMElement* This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);
    HRESULT (__attribute__((__stdcall__)) *appendChild)(
        IXMLDOMElement* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *hasChildNodes)(
        IXMLDOMElement* This,
        VARIANT_BOOL *hasChild);
    HRESULT (__attribute__((__stdcall__)) *get_ownerDocument)(
        IXMLDOMElement* This,
        IXMLDOMDocument **DOMDocument);
    HRESULT (__attribute__((__stdcall__)) *cloneNode)(
        IXMLDOMElement* This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypeString)(
        IXMLDOMElement* This,
        BSTR *nodeType);
    HRESULT (__attribute__((__stdcall__)) *get_text)(
        IXMLDOMElement* This,
        BSTR *text);
    HRESULT (__attribute__((__stdcall__)) *put_text)(
        IXMLDOMElement* This,
        BSTR text);
    HRESULT (__attribute__((__stdcall__)) *get_specified)(
        IXMLDOMElement* This,
        VARIANT_BOOL *isSpecified);
    HRESULT (__attribute__((__stdcall__)) *get_definition)(
        IXMLDOMElement* This,
        IXMLDOMNode **definitionNode);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypedValue)(
        IXMLDOMElement* This,
        VARIANT *typedValue);
    HRESULT (__attribute__((__stdcall__)) *put_nodeTypedValue)(
        IXMLDOMElement* This,
        VARIANT typedValue);
    HRESULT (__attribute__((__stdcall__)) *get_dataType)(
        IXMLDOMElement* This,
        VARIANT *dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *put_dataType)(
        IXMLDOMElement* This,
        BSTR dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *get_xml)(
        IXMLDOMElement* This,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *transformNode)(
        IXMLDOMElement* This,
        IXMLDOMNode *styleSheet,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *selectNodes)(
        IXMLDOMElement* This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);
    HRESULT (__attribute__((__stdcall__)) *selectSingleNode)(
        IXMLDOMElement* This,
        BSTR queryString,
        IXMLDOMNode **resultNode);
    HRESULT (__attribute__((__stdcall__)) *get_parsed)(
        IXMLDOMElement* This,
        VARIANT_BOOL *isParsed);
    HRESULT (__attribute__((__stdcall__)) *get_namespaceURI)(
        IXMLDOMElement* This,
        BSTR *namespaceURI);
    HRESULT (__attribute__((__stdcall__)) *get_prefix)(
        IXMLDOMElement* This,
        BSTR *prefixString);
    HRESULT (__attribute__((__stdcall__)) *get_baseName)(
        IXMLDOMElement* This,
        BSTR *nameString);
    HRESULT (__attribute__((__stdcall__)) *transformNodeToObject)(
        IXMLDOMElement* This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);
    HRESULT (__attribute__((__stdcall__)) *get_tagName)(
        IXMLDOMElement* This,
        BSTR *tagName);
    HRESULT (__attribute__((__stdcall__)) *getAttribute)(
        IXMLDOMElement* This,
        BSTR name,
        VARIANT *value);
    HRESULT (__attribute__((__stdcall__)) *setAttribute)(
        IXMLDOMElement* This,
        BSTR name,
        VARIANT value);
    HRESULT (__attribute__((__stdcall__)) *removeAttribute)(
        IXMLDOMElement* This,
        BSTR name);
    HRESULT (__attribute__((__stdcall__)) *getAttributeNode)(
        IXMLDOMElement* This,
        BSTR name,
        IXMLDOMAttribute **attributeNode);
    HRESULT (__attribute__((__stdcall__)) *setAttributeNode)(
        IXMLDOMElement* This,
        IXMLDOMAttribute *DOMAttribute,
        IXMLDOMAttribute **attributeNode);
    HRESULT (__attribute__((__stdcall__)) *removeAttributeNode)(
        IXMLDOMElement* This,
        IXMLDOMAttribute *DOMAttribute,
        IXMLDOMAttribute **attributeNode);
    HRESULT (__attribute__((__stdcall__)) *getElementsByTagName)(
        IXMLDOMElement* This,
        BSTR tagName,
        IXMLDOMNodeList **resultList);
    HRESULT (__attribute__((__stdcall__)) *normalize)(
        IXMLDOMElement* This);
   
} IXMLDOMElementVtbl;
struct IXMLDOMElement {
    IXMLDOMElementVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDOMElement_get_tagName_Proxy(
    IXMLDOMElement* This,
    BSTR *tagName);
void __attribute__((__stdcall__)) IXMLDOMElement_get_tagName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMElement_getAttribute_Proxy(
    IXMLDOMElement* This,
    BSTR name,
    VARIANT *value);
void __attribute__((__stdcall__)) IXMLDOMElement_getAttribute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMElement_setAttribute_Proxy(
    IXMLDOMElement* This,
    BSTR name,
    VARIANT value);
void __attribute__((__stdcall__)) IXMLDOMElement_setAttribute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMElement_removeAttribute_Proxy(
    IXMLDOMElement* This,
    BSTR name);
void __attribute__((__stdcall__)) IXMLDOMElement_removeAttribute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMElement_getAttributeNode_Proxy(
    IXMLDOMElement* This,
    BSTR name,
    IXMLDOMAttribute **attributeNode);
void __attribute__((__stdcall__)) IXMLDOMElement_getAttributeNode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMElement_setAttributeNode_Proxy(
    IXMLDOMElement* This,
    IXMLDOMAttribute *DOMAttribute,
    IXMLDOMAttribute **attributeNode);
void __attribute__((__stdcall__)) IXMLDOMElement_setAttributeNode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMElement_removeAttributeNode_Proxy(
    IXMLDOMElement* This,
    IXMLDOMAttribute *DOMAttribute,
    IXMLDOMAttribute **attributeNode);
void __attribute__((__stdcall__)) IXMLDOMElement_removeAttributeNode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMElement_getElementsByTagName_Proxy(
    IXMLDOMElement* This,
    BSTR tagName,
    IXMLDOMNodeList **resultList);
void __attribute__((__stdcall__)) IXMLDOMElement_getElementsByTagName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMElement_normalize_Proxy(
    IXMLDOMElement* This);
void __attribute__((__stdcall__)) IXMLDOMElement_normalize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLDOMText ;
typedef struct IXMLDOMTextVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMText* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMText* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMText* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMText* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMText* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMText* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMText* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_nodeName)(
        IXMLDOMText* This,
        BSTR *name);
    HRESULT (__attribute__((__stdcall__)) *get_nodeValue)(
        IXMLDOMText* This,
        VARIANT *value);
    HRESULT (__attribute__((__stdcall__)) *put_nodeValue)(
        IXMLDOMText* This,
        VARIANT value);
    HRESULT (__attribute__((__stdcall__)) *get_nodeType)(
        IXMLDOMText* This,
        DOMNodeType *type);
    HRESULT (__attribute__((__stdcall__)) *get_parentNode)(
        IXMLDOMText* This,
        IXMLDOMNode **parent);
    HRESULT (__attribute__((__stdcall__)) *get_childNodes)(
        IXMLDOMText* This,
        IXMLDOMNodeList **childList);
    HRESULT (__attribute__((__stdcall__)) *get_firstChild)(
        IXMLDOMText* This,
        IXMLDOMNode **firstChild);
    HRESULT (__attribute__((__stdcall__)) *get_lastChild)(
        IXMLDOMText* This,
        IXMLDOMNode **lastChild);
    HRESULT (__attribute__((__stdcall__)) *get_previousSibling)(
        IXMLDOMText* This,
        IXMLDOMNode **previousSibling);
    HRESULT (__attribute__((__stdcall__)) *get_nextSibling)(
        IXMLDOMText* This,
        IXMLDOMNode **nextSibling);
    HRESULT (__attribute__((__stdcall__)) *get_attributes)(
        IXMLDOMText* This,
        IXMLDOMNamedNodeMap **attributeMap);
    HRESULT (__attribute__((__stdcall__)) *insertBefore)(
        IXMLDOMText* This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *replaceChild)(
        IXMLDOMText* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);
    HRESULT (__attribute__((__stdcall__)) *removeChild)(
        IXMLDOMText* This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);
    HRESULT (__attribute__((__stdcall__)) *appendChild)(
        IXMLDOMText* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *hasChildNodes)(
        IXMLDOMText* This,
        VARIANT_BOOL *hasChild);
    HRESULT (__attribute__((__stdcall__)) *get_ownerDocument)(
        IXMLDOMText* This,
        IXMLDOMDocument **DOMDocument);
    HRESULT (__attribute__((__stdcall__)) *cloneNode)(
        IXMLDOMText* This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypeString)(
        IXMLDOMText* This,
        BSTR *nodeType);
    HRESULT (__attribute__((__stdcall__)) *get_text)(
        IXMLDOMText* This,
        BSTR *text);
    HRESULT (__attribute__((__stdcall__)) *put_text)(
        IXMLDOMText* This,
        BSTR text);
    HRESULT (__attribute__((__stdcall__)) *get_specified)(
        IXMLDOMText* This,
        VARIANT_BOOL *isSpecified);
    HRESULT (__attribute__((__stdcall__)) *get_definition)(
        IXMLDOMText* This,
        IXMLDOMNode **definitionNode);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypedValue)(
        IXMLDOMText* This,
        VARIANT *typedValue);
    HRESULT (__attribute__((__stdcall__)) *put_nodeTypedValue)(
        IXMLDOMText* This,
        VARIANT typedValue);
    HRESULT (__attribute__((__stdcall__)) *get_dataType)(
        IXMLDOMText* This,
        VARIANT *dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *put_dataType)(
        IXMLDOMText* This,
        BSTR dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *get_xml)(
        IXMLDOMText* This,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *transformNode)(
        IXMLDOMText* This,
        IXMLDOMNode *styleSheet,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *selectNodes)(
        IXMLDOMText* This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);
    HRESULT (__attribute__((__stdcall__)) *selectSingleNode)(
        IXMLDOMText* This,
        BSTR queryString,
        IXMLDOMNode **resultNode);
    HRESULT (__attribute__((__stdcall__)) *get_parsed)(
        IXMLDOMText* This,
        VARIANT_BOOL *isParsed);
    HRESULT (__attribute__((__stdcall__)) *get_namespaceURI)(
        IXMLDOMText* This,
        BSTR *namespaceURI);
    HRESULT (__attribute__((__stdcall__)) *get_prefix)(
        IXMLDOMText* This,
        BSTR *prefixString);
    HRESULT (__attribute__((__stdcall__)) *get_baseName)(
        IXMLDOMText* This,
        BSTR *nameString);
    HRESULT (__attribute__((__stdcall__)) *transformNodeToObject)(
        IXMLDOMText* This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);
    HRESULT (__attribute__((__stdcall__)) *get_data)(
        IXMLDOMText* This,
        BSTR *data);
    HRESULT (__attribute__((__stdcall__)) *put_data)(
        IXMLDOMText* This,
        BSTR data);
    HRESULT (__attribute__((__stdcall__)) *get_length)(
        IXMLDOMText* This,
        LONG *dataLength);
    HRESULT (__attribute__((__stdcall__)) *substringData)(
        IXMLDOMText* This,
        LONG offset,
        LONG count,
        BSTR *data);
    HRESULT (__attribute__((__stdcall__)) *appendData)(
        IXMLDOMText* This,
        BSTR data);
    HRESULT (__attribute__((__stdcall__)) *insertData)(
        IXMLDOMText* This,
        LONG offset,
        BSTR data);
    HRESULT (__attribute__((__stdcall__)) *deleteData)(
        IXMLDOMText* This,
        LONG offset,
        LONG count);
    HRESULT (__attribute__((__stdcall__)) *replaceData)(
        IXMLDOMText* This,
        LONG offset,
        LONG count,
        BSTR data);
    HRESULT (__attribute__((__stdcall__)) *splitText)(
        IXMLDOMText* This,
        LONG offset,
        IXMLDOMText **rightHandTextNode);
   
} IXMLDOMTextVtbl;
struct IXMLDOMText {
    IXMLDOMTextVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDOMText_splitText_Proxy(
    IXMLDOMText* This,
    LONG offset,
    IXMLDOMText **rightHandTextNode);
void __attribute__((__stdcall__)) IXMLDOMText_splitText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLDOMComment ;
typedef struct IXMLDOMCommentVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMComment* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMComment* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMComment* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMComment* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMComment* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMComment* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMComment* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_nodeName)(
        IXMLDOMComment* This,
        BSTR *name);
    HRESULT (__attribute__((__stdcall__)) *get_nodeValue)(
        IXMLDOMComment* This,
        VARIANT *value);
    HRESULT (__attribute__((__stdcall__)) *put_nodeValue)(
        IXMLDOMComment* This,
        VARIANT value);
    HRESULT (__attribute__((__stdcall__)) *get_nodeType)(
        IXMLDOMComment* This,
        DOMNodeType *type);
    HRESULT (__attribute__((__stdcall__)) *get_parentNode)(
        IXMLDOMComment* This,
        IXMLDOMNode **parent);
    HRESULT (__attribute__((__stdcall__)) *get_childNodes)(
        IXMLDOMComment* This,
        IXMLDOMNodeList **childList);
    HRESULT (__attribute__((__stdcall__)) *get_firstChild)(
        IXMLDOMComment* This,
        IXMLDOMNode **firstChild);
    HRESULT (__attribute__((__stdcall__)) *get_lastChild)(
        IXMLDOMComment* This,
        IXMLDOMNode **lastChild);
    HRESULT (__attribute__((__stdcall__)) *get_previousSibling)(
        IXMLDOMComment* This,
        IXMLDOMNode **previousSibling);
    HRESULT (__attribute__((__stdcall__)) *get_nextSibling)(
        IXMLDOMComment* This,
        IXMLDOMNode **nextSibling);
    HRESULT (__attribute__((__stdcall__)) *get_attributes)(
        IXMLDOMComment* This,
        IXMLDOMNamedNodeMap **attributeMap);
    HRESULT (__attribute__((__stdcall__)) *insertBefore)(
        IXMLDOMComment* This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *replaceChild)(
        IXMLDOMComment* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);
    HRESULT (__attribute__((__stdcall__)) *removeChild)(
        IXMLDOMComment* This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);
    HRESULT (__attribute__((__stdcall__)) *appendChild)(
        IXMLDOMComment* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *hasChildNodes)(
        IXMLDOMComment* This,
        VARIANT_BOOL *hasChild);
    HRESULT (__attribute__((__stdcall__)) *get_ownerDocument)(
        IXMLDOMComment* This,
        IXMLDOMDocument **DOMDocument);
    HRESULT (__attribute__((__stdcall__)) *cloneNode)(
        IXMLDOMComment* This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypeString)(
        IXMLDOMComment* This,
        BSTR *nodeType);
    HRESULT (__attribute__((__stdcall__)) *get_text)(
        IXMLDOMComment* This,
        BSTR *text);
    HRESULT (__attribute__((__stdcall__)) *put_text)(
        IXMLDOMComment* This,
        BSTR text);
    HRESULT (__attribute__((__stdcall__)) *get_specified)(
        IXMLDOMComment* This,
        VARIANT_BOOL *isSpecified);
    HRESULT (__attribute__((__stdcall__)) *get_definition)(
        IXMLDOMComment* This,
        IXMLDOMNode **definitionNode);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypedValue)(
        IXMLDOMComment* This,
        VARIANT *typedValue);
    HRESULT (__attribute__((__stdcall__)) *put_nodeTypedValue)(
        IXMLDOMComment* This,
        VARIANT typedValue);
    HRESULT (__attribute__((__stdcall__)) *get_dataType)(
        IXMLDOMComment* This,
        VARIANT *dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *put_dataType)(
        IXMLDOMComment* This,
        BSTR dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *get_xml)(
        IXMLDOMComment* This,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *transformNode)(
        IXMLDOMComment* This,
        IXMLDOMNode *styleSheet,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *selectNodes)(
        IXMLDOMComment* This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);
    HRESULT (__attribute__((__stdcall__)) *selectSingleNode)(
        IXMLDOMComment* This,
        BSTR queryString,
        IXMLDOMNode **resultNode);
    HRESULT (__attribute__((__stdcall__)) *get_parsed)(
        IXMLDOMComment* This,
        VARIANT_BOOL *isParsed);
    HRESULT (__attribute__((__stdcall__)) *get_namespaceURI)(
        IXMLDOMComment* This,
        BSTR *namespaceURI);
    HRESULT (__attribute__((__stdcall__)) *get_prefix)(
        IXMLDOMComment* This,
        BSTR *prefixString);
    HRESULT (__attribute__((__stdcall__)) *get_baseName)(
        IXMLDOMComment* This,
        BSTR *nameString);
    HRESULT (__attribute__((__stdcall__)) *transformNodeToObject)(
        IXMLDOMComment* This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);
    HRESULT (__attribute__((__stdcall__)) *get_data)(
        IXMLDOMComment* This,
        BSTR *data);
    HRESULT (__attribute__((__stdcall__)) *put_data)(
        IXMLDOMComment* This,
        BSTR data);
    HRESULT (__attribute__((__stdcall__)) *get_length)(
        IXMLDOMComment* This,
        LONG *dataLength);
    HRESULT (__attribute__((__stdcall__)) *substringData)(
        IXMLDOMComment* This,
        LONG offset,
        LONG count,
        BSTR *data);
    HRESULT (__attribute__((__stdcall__)) *appendData)(
        IXMLDOMComment* This,
        BSTR data);
    HRESULT (__attribute__((__stdcall__)) *insertData)(
        IXMLDOMComment* This,
        LONG offset,
        BSTR data);
    HRESULT (__attribute__((__stdcall__)) *deleteData)(
        IXMLDOMComment* This,
        LONG offset,
        LONG count);
    HRESULT (__attribute__((__stdcall__)) *replaceData)(
        IXMLDOMComment* This,
        LONG offset,
        LONG count,
        BSTR data);
   
} IXMLDOMCommentVtbl;
struct IXMLDOMComment {
    IXMLDOMCommentVtbl* lpVtbl;
};
extern const GUID IID_IXMLDOMProcessingInstruction ;
typedef struct IXMLDOMProcessingInstructionVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMProcessingInstruction* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMProcessingInstruction* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMProcessingInstruction* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMProcessingInstruction* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMProcessingInstruction* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMProcessingInstruction* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMProcessingInstruction* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_nodeName)(
        IXMLDOMProcessingInstruction* This,
        BSTR *name);
    HRESULT (__attribute__((__stdcall__)) *get_nodeValue)(
        IXMLDOMProcessingInstruction* This,
        VARIANT *value);
    HRESULT (__attribute__((__stdcall__)) *put_nodeValue)(
        IXMLDOMProcessingInstruction* This,
        VARIANT value);
    HRESULT (__attribute__((__stdcall__)) *get_nodeType)(
        IXMLDOMProcessingInstruction* This,
        DOMNodeType *type);
    HRESULT (__attribute__((__stdcall__)) *get_parentNode)(
        IXMLDOMProcessingInstruction* This,
        IXMLDOMNode **parent);
    HRESULT (__attribute__((__stdcall__)) *get_childNodes)(
        IXMLDOMProcessingInstruction* This,
        IXMLDOMNodeList **childList);
    HRESULT (__attribute__((__stdcall__)) *get_firstChild)(
        IXMLDOMProcessingInstruction* This,
        IXMLDOMNode **firstChild);
    HRESULT (__attribute__((__stdcall__)) *get_lastChild)(
        IXMLDOMProcessingInstruction* This,
        IXMLDOMNode **lastChild);
    HRESULT (__attribute__((__stdcall__)) *get_previousSibling)(
        IXMLDOMProcessingInstruction* This,
        IXMLDOMNode **previousSibling);
    HRESULT (__attribute__((__stdcall__)) *get_nextSibling)(
        IXMLDOMProcessingInstruction* This,
        IXMLDOMNode **nextSibling);
    HRESULT (__attribute__((__stdcall__)) *get_attributes)(
        IXMLDOMProcessingInstruction* This,
        IXMLDOMNamedNodeMap **attributeMap);
    HRESULT (__attribute__((__stdcall__)) *insertBefore)(
        IXMLDOMProcessingInstruction* This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *replaceChild)(
        IXMLDOMProcessingInstruction* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);
    HRESULT (__attribute__((__stdcall__)) *removeChild)(
        IXMLDOMProcessingInstruction* This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);
    HRESULT (__attribute__((__stdcall__)) *appendChild)(
        IXMLDOMProcessingInstruction* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *hasChildNodes)(
        IXMLDOMProcessingInstruction* This,
        VARIANT_BOOL *hasChild);
    HRESULT (__attribute__((__stdcall__)) *get_ownerDocument)(
        IXMLDOMProcessingInstruction* This,
        IXMLDOMDocument **DOMDocument);
    HRESULT (__attribute__((__stdcall__)) *cloneNode)(
        IXMLDOMProcessingInstruction* This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypeString)(
        IXMLDOMProcessingInstruction* This,
        BSTR *nodeType);
    HRESULT (__attribute__((__stdcall__)) *get_text)(
        IXMLDOMProcessingInstruction* This,
        BSTR *text);
    HRESULT (__attribute__((__stdcall__)) *put_text)(
        IXMLDOMProcessingInstruction* This,
        BSTR text);
    HRESULT (__attribute__((__stdcall__)) *get_specified)(
        IXMLDOMProcessingInstruction* This,
        VARIANT_BOOL *isSpecified);
    HRESULT (__attribute__((__stdcall__)) *get_definition)(
        IXMLDOMProcessingInstruction* This,
        IXMLDOMNode **definitionNode);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypedValue)(
        IXMLDOMProcessingInstruction* This,
        VARIANT *typedValue);
    HRESULT (__attribute__((__stdcall__)) *put_nodeTypedValue)(
        IXMLDOMProcessingInstruction* This,
        VARIANT typedValue);
    HRESULT (__attribute__((__stdcall__)) *get_dataType)(
        IXMLDOMProcessingInstruction* This,
        VARIANT *dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *put_dataType)(
        IXMLDOMProcessingInstruction* This,
        BSTR dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *get_xml)(
        IXMLDOMProcessingInstruction* This,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *transformNode)(
        IXMLDOMProcessingInstruction* This,
        IXMLDOMNode *styleSheet,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *selectNodes)(
        IXMLDOMProcessingInstruction* This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);
    HRESULT (__attribute__((__stdcall__)) *selectSingleNode)(
        IXMLDOMProcessingInstruction* This,
        BSTR queryString,
        IXMLDOMNode **resultNode);
    HRESULT (__attribute__((__stdcall__)) *get_parsed)(
        IXMLDOMProcessingInstruction* This,
        VARIANT_BOOL *isParsed);
    HRESULT (__attribute__((__stdcall__)) *get_namespaceURI)(
        IXMLDOMProcessingInstruction* This,
        BSTR *namespaceURI);
    HRESULT (__attribute__((__stdcall__)) *get_prefix)(
        IXMLDOMProcessingInstruction* This,
        BSTR *prefixString);
    HRESULT (__attribute__((__stdcall__)) *get_baseName)(
        IXMLDOMProcessingInstruction* This,
        BSTR *nameString);
    HRESULT (__attribute__((__stdcall__)) *transformNodeToObject)(
        IXMLDOMProcessingInstruction* This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);
    HRESULT (__attribute__((__stdcall__)) *get_target)(
        IXMLDOMProcessingInstruction* This,
        BSTR *name);
    HRESULT (__attribute__((__stdcall__)) *get_data)(
        IXMLDOMProcessingInstruction* This,
        BSTR *value);
    HRESULT (__attribute__((__stdcall__)) *put_data)(
        IXMLDOMProcessingInstruction* This,
        BSTR value);
   
} IXMLDOMProcessingInstructionVtbl;
struct IXMLDOMProcessingInstruction {
    IXMLDOMProcessingInstructionVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDOMProcessingInstruction_get_target_Proxy(
    IXMLDOMProcessingInstruction* This,
    BSTR *name);
void __attribute__((__stdcall__)) IXMLDOMProcessingInstruction_get_target_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMProcessingInstruction_get_data_Proxy(
    IXMLDOMProcessingInstruction* This,
    BSTR *value);
void __attribute__((__stdcall__)) IXMLDOMProcessingInstruction_get_data_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMProcessingInstruction_put_data_Proxy(
    IXMLDOMProcessingInstruction* This,
    BSTR value);
void __attribute__((__stdcall__)) IXMLDOMProcessingInstruction_put_data_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLDOMCDATASection ;
typedef struct IXMLDOMCDATASectionVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMCDATASection* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMCDATASection* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMCDATASection* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMCDATASection* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMCDATASection* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMCDATASection* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMCDATASection* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_nodeName)(
        IXMLDOMCDATASection* This,
        BSTR *name);
    HRESULT (__attribute__((__stdcall__)) *get_nodeValue)(
        IXMLDOMCDATASection* This,
        VARIANT *value);
    HRESULT (__attribute__((__stdcall__)) *put_nodeValue)(
        IXMLDOMCDATASection* This,
        VARIANT value);
    HRESULT (__attribute__((__stdcall__)) *get_nodeType)(
        IXMLDOMCDATASection* This,
        DOMNodeType *type);
    HRESULT (__attribute__((__stdcall__)) *get_parentNode)(
        IXMLDOMCDATASection* This,
        IXMLDOMNode **parent);
    HRESULT (__attribute__((__stdcall__)) *get_childNodes)(
        IXMLDOMCDATASection* This,
        IXMLDOMNodeList **childList);
    HRESULT (__attribute__((__stdcall__)) *get_firstChild)(
        IXMLDOMCDATASection* This,
        IXMLDOMNode **firstChild);
    HRESULT (__attribute__((__stdcall__)) *get_lastChild)(
        IXMLDOMCDATASection* This,
        IXMLDOMNode **lastChild);
    HRESULT (__attribute__((__stdcall__)) *get_previousSibling)(
        IXMLDOMCDATASection* This,
        IXMLDOMNode **previousSibling);
    HRESULT (__attribute__((__stdcall__)) *get_nextSibling)(
        IXMLDOMCDATASection* This,
        IXMLDOMNode **nextSibling);
    HRESULT (__attribute__((__stdcall__)) *get_attributes)(
        IXMLDOMCDATASection* This,
        IXMLDOMNamedNodeMap **attributeMap);
    HRESULT (__attribute__((__stdcall__)) *insertBefore)(
        IXMLDOMCDATASection* This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *replaceChild)(
        IXMLDOMCDATASection* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);
    HRESULT (__attribute__((__stdcall__)) *removeChild)(
        IXMLDOMCDATASection* This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);
    HRESULT (__attribute__((__stdcall__)) *appendChild)(
        IXMLDOMCDATASection* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *hasChildNodes)(
        IXMLDOMCDATASection* This,
        VARIANT_BOOL *hasChild);
    HRESULT (__attribute__((__stdcall__)) *get_ownerDocument)(
        IXMLDOMCDATASection* This,
        IXMLDOMDocument **DOMDocument);
    HRESULT (__attribute__((__stdcall__)) *cloneNode)(
        IXMLDOMCDATASection* This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypeString)(
        IXMLDOMCDATASection* This,
        BSTR *nodeType);
    HRESULT (__attribute__((__stdcall__)) *get_text)(
        IXMLDOMCDATASection* This,
        BSTR *text);
    HRESULT (__attribute__((__stdcall__)) *put_text)(
        IXMLDOMCDATASection* This,
        BSTR text);
    HRESULT (__attribute__((__stdcall__)) *get_specified)(
        IXMLDOMCDATASection* This,
        VARIANT_BOOL *isSpecified);
    HRESULT (__attribute__((__stdcall__)) *get_definition)(
        IXMLDOMCDATASection* This,
        IXMLDOMNode **definitionNode);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypedValue)(
        IXMLDOMCDATASection* This,
        VARIANT *typedValue);
    HRESULT (__attribute__((__stdcall__)) *put_nodeTypedValue)(
        IXMLDOMCDATASection* This,
        VARIANT typedValue);
    HRESULT (__attribute__((__stdcall__)) *get_dataType)(
        IXMLDOMCDATASection* This,
        VARIANT *dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *put_dataType)(
        IXMLDOMCDATASection* This,
        BSTR dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *get_xml)(
        IXMLDOMCDATASection* This,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *transformNode)(
        IXMLDOMCDATASection* This,
        IXMLDOMNode *styleSheet,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *selectNodes)(
        IXMLDOMCDATASection* This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);
    HRESULT (__attribute__((__stdcall__)) *selectSingleNode)(
        IXMLDOMCDATASection* This,
        BSTR queryString,
        IXMLDOMNode **resultNode);
    HRESULT (__attribute__((__stdcall__)) *get_parsed)(
        IXMLDOMCDATASection* This,
        VARIANT_BOOL *isParsed);
    HRESULT (__attribute__((__stdcall__)) *get_namespaceURI)(
        IXMLDOMCDATASection* This,
        BSTR *namespaceURI);
    HRESULT (__attribute__((__stdcall__)) *get_prefix)(
        IXMLDOMCDATASection* This,
        BSTR *prefixString);
    HRESULT (__attribute__((__stdcall__)) *get_baseName)(
        IXMLDOMCDATASection* This,
        BSTR *nameString);
    HRESULT (__attribute__((__stdcall__)) *transformNodeToObject)(
        IXMLDOMCDATASection* This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);
    HRESULT (__attribute__((__stdcall__)) *get_data)(
        IXMLDOMCDATASection* This,
        BSTR *data);
    HRESULT (__attribute__((__stdcall__)) *put_data)(
        IXMLDOMCDATASection* This,
        BSTR data);
    HRESULT (__attribute__((__stdcall__)) *get_length)(
        IXMLDOMCDATASection* This,
        LONG *dataLength);
    HRESULT (__attribute__((__stdcall__)) *substringData)(
        IXMLDOMCDATASection* This,
        LONG offset,
        LONG count,
        BSTR *data);
    HRESULT (__attribute__((__stdcall__)) *appendData)(
        IXMLDOMCDATASection* This,
        BSTR data);
    HRESULT (__attribute__((__stdcall__)) *insertData)(
        IXMLDOMCDATASection* This,
        LONG offset,
        BSTR data);
    HRESULT (__attribute__((__stdcall__)) *deleteData)(
        IXMLDOMCDATASection* This,
        LONG offset,
        LONG count);
    HRESULT (__attribute__((__stdcall__)) *replaceData)(
        IXMLDOMCDATASection* This,
        LONG offset,
        LONG count,
        BSTR data);
    HRESULT (__attribute__((__stdcall__)) *splitText)(
        IXMLDOMCDATASection* This,
        LONG offset,
        IXMLDOMText **rightHandTextNode);
   
} IXMLDOMCDATASectionVtbl;
struct IXMLDOMCDATASection {
    IXMLDOMCDATASectionVtbl* lpVtbl;
};
extern const GUID IID_IXMLDOMDocumentType ;
typedef struct IXMLDOMDocumentTypeVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMDocumentType* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMDocumentType* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMDocumentType* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMDocumentType* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMDocumentType* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMDocumentType* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMDocumentType* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_nodeName)(
        IXMLDOMDocumentType* This,
        BSTR *name);
    HRESULT (__attribute__((__stdcall__)) *get_nodeValue)(
        IXMLDOMDocumentType* This,
        VARIANT *value);
    HRESULT (__attribute__((__stdcall__)) *put_nodeValue)(
        IXMLDOMDocumentType* This,
        VARIANT value);
    HRESULT (__attribute__((__stdcall__)) *get_nodeType)(
        IXMLDOMDocumentType* This,
        DOMNodeType *type);
    HRESULT (__attribute__((__stdcall__)) *get_parentNode)(
        IXMLDOMDocumentType* This,
        IXMLDOMNode **parent);
    HRESULT (__attribute__((__stdcall__)) *get_childNodes)(
        IXMLDOMDocumentType* This,
        IXMLDOMNodeList **childList);
    HRESULT (__attribute__((__stdcall__)) *get_firstChild)(
        IXMLDOMDocumentType* This,
        IXMLDOMNode **firstChild);
    HRESULT (__attribute__((__stdcall__)) *get_lastChild)(
        IXMLDOMDocumentType* This,
        IXMLDOMNode **lastChild);
    HRESULT (__attribute__((__stdcall__)) *get_previousSibling)(
        IXMLDOMDocumentType* This,
        IXMLDOMNode **previousSibling);
    HRESULT (__attribute__((__stdcall__)) *get_nextSibling)(
        IXMLDOMDocumentType* This,
        IXMLDOMNode **nextSibling);
    HRESULT (__attribute__((__stdcall__)) *get_attributes)(
        IXMLDOMDocumentType* This,
        IXMLDOMNamedNodeMap **attributeMap);
    HRESULT (__attribute__((__stdcall__)) *insertBefore)(
        IXMLDOMDocumentType* This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *replaceChild)(
        IXMLDOMDocumentType* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);
    HRESULT (__attribute__((__stdcall__)) *removeChild)(
        IXMLDOMDocumentType* This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);
    HRESULT (__attribute__((__stdcall__)) *appendChild)(
        IXMLDOMDocumentType* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *hasChildNodes)(
        IXMLDOMDocumentType* This,
        VARIANT_BOOL *hasChild);
    HRESULT (__attribute__((__stdcall__)) *get_ownerDocument)(
        IXMLDOMDocumentType* This,
        IXMLDOMDocument **DOMDocument);
    HRESULT (__attribute__((__stdcall__)) *cloneNode)(
        IXMLDOMDocumentType* This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypeString)(
        IXMLDOMDocumentType* This,
        BSTR *nodeType);
    HRESULT (__attribute__((__stdcall__)) *get_text)(
        IXMLDOMDocumentType* This,
        BSTR *text);
    HRESULT (__attribute__((__stdcall__)) *put_text)(
        IXMLDOMDocumentType* This,
        BSTR text);
    HRESULT (__attribute__((__stdcall__)) *get_specified)(
        IXMLDOMDocumentType* This,
        VARIANT_BOOL *isSpecified);
    HRESULT (__attribute__((__stdcall__)) *get_definition)(
        IXMLDOMDocumentType* This,
        IXMLDOMNode **definitionNode);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypedValue)(
        IXMLDOMDocumentType* This,
        VARIANT *typedValue);
    HRESULT (__attribute__((__stdcall__)) *put_nodeTypedValue)(
        IXMLDOMDocumentType* This,
        VARIANT typedValue);
    HRESULT (__attribute__((__stdcall__)) *get_dataType)(
        IXMLDOMDocumentType* This,
        VARIANT *dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *put_dataType)(
        IXMLDOMDocumentType* This,
        BSTR dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *get_xml)(
        IXMLDOMDocumentType* This,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *transformNode)(
        IXMLDOMDocumentType* This,
        IXMLDOMNode *styleSheet,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *selectNodes)(
        IXMLDOMDocumentType* This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);
    HRESULT (__attribute__((__stdcall__)) *selectSingleNode)(
        IXMLDOMDocumentType* This,
        BSTR queryString,
        IXMLDOMNode **resultNode);
    HRESULT (__attribute__((__stdcall__)) *get_parsed)(
        IXMLDOMDocumentType* This,
        VARIANT_BOOL *isParsed);
    HRESULT (__attribute__((__stdcall__)) *get_namespaceURI)(
        IXMLDOMDocumentType* This,
        BSTR *namespaceURI);
    HRESULT (__attribute__((__stdcall__)) *get_prefix)(
        IXMLDOMDocumentType* This,
        BSTR *prefixString);
    HRESULT (__attribute__((__stdcall__)) *get_baseName)(
        IXMLDOMDocumentType* This,
        BSTR *nameString);
    HRESULT (__attribute__((__stdcall__)) *transformNodeToObject)(
        IXMLDOMDocumentType* This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);
    HRESULT (__attribute__((__stdcall__)) *get_name)(
        IXMLDOMDocumentType* This,
        BSTR *rootName);
    HRESULT (__attribute__((__stdcall__)) *get_entities)(
        IXMLDOMDocumentType* This,
        IXMLDOMNamedNodeMap **entityMap);
    HRESULT (__attribute__((__stdcall__)) *get_notations)(
        IXMLDOMDocumentType* This,
        IXMLDOMNamedNodeMap **notationMap);
   
} IXMLDOMDocumentTypeVtbl;
struct IXMLDOMDocumentType {
    IXMLDOMDocumentTypeVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDOMDocumentType_get_name_Proxy(
    IXMLDOMDocumentType* This,
    BSTR *rootName);
void __attribute__((__stdcall__)) IXMLDOMDocumentType_get_name_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocumentType_get_entities_Proxy(
    IXMLDOMDocumentType* This,
    IXMLDOMNamedNodeMap **entityMap);
void __attribute__((__stdcall__)) IXMLDOMDocumentType_get_entities_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMDocumentType_get_notations_Proxy(
    IXMLDOMDocumentType* This,
    IXMLDOMNamedNodeMap **notationMap);
void __attribute__((__stdcall__)) IXMLDOMDocumentType_get_notations_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLDOMNotation ;
typedef struct IXMLDOMNotationVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMNotation* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMNotation* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMNotation* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMNotation* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMNotation* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMNotation* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMNotation* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_nodeName)(
        IXMLDOMNotation* This,
        BSTR *name);
    HRESULT (__attribute__((__stdcall__)) *get_nodeValue)(
        IXMLDOMNotation* This,
        VARIANT *value);
    HRESULT (__attribute__((__stdcall__)) *put_nodeValue)(
        IXMLDOMNotation* This,
        VARIANT value);
    HRESULT (__attribute__((__stdcall__)) *get_nodeType)(
        IXMLDOMNotation* This,
        DOMNodeType *type);
    HRESULT (__attribute__((__stdcall__)) *get_parentNode)(
        IXMLDOMNotation* This,
        IXMLDOMNode **parent);
    HRESULT (__attribute__((__stdcall__)) *get_childNodes)(
        IXMLDOMNotation* This,
        IXMLDOMNodeList **childList);
    HRESULT (__attribute__((__stdcall__)) *get_firstChild)(
        IXMLDOMNotation* This,
        IXMLDOMNode **firstChild);
    HRESULT (__attribute__((__stdcall__)) *get_lastChild)(
        IXMLDOMNotation* This,
        IXMLDOMNode **lastChild);
    HRESULT (__attribute__((__stdcall__)) *get_previousSibling)(
        IXMLDOMNotation* This,
        IXMLDOMNode **previousSibling);
    HRESULT (__attribute__((__stdcall__)) *get_nextSibling)(
        IXMLDOMNotation* This,
        IXMLDOMNode **nextSibling);
    HRESULT (__attribute__((__stdcall__)) *get_attributes)(
        IXMLDOMNotation* This,
        IXMLDOMNamedNodeMap **attributeMap);
    HRESULT (__attribute__((__stdcall__)) *insertBefore)(
        IXMLDOMNotation* This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *replaceChild)(
        IXMLDOMNotation* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);
    HRESULT (__attribute__((__stdcall__)) *removeChild)(
        IXMLDOMNotation* This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);
    HRESULT (__attribute__((__stdcall__)) *appendChild)(
        IXMLDOMNotation* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *hasChildNodes)(
        IXMLDOMNotation* This,
        VARIANT_BOOL *hasChild);
    HRESULT (__attribute__((__stdcall__)) *get_ownerDocument)(
        IXMLDOMNotation* This,
        IXMLDOMDocument **DOMDocument);
    HRESULT (__attribute__((__stdcall__)) *cloneNode)(
        IXMLDOMNotation* This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypeString)(
        IXMLDOMNotation* This,
        BSTR *nodeType);
    HRESULT (__attribute__((__stdcall__)) *get_text)(
        IXMLDOMNotation* This,
        BSTR *text);
    HRESULT (__attribute__((__stdcall__)) *put_text)(
        IXMLDOMNotation* This,
        BSTR text);
    HRESULT (__attribute__((__stdcall__)) *get_specified)(
        IXMLDOMNotation* This,
        VARIANT_BOOL *isSpecified);
    HRESULT (__attribute__((__stdcall__)) *get_definition)(
        IXMLDOMNotation* This,
        IXMLDOMNode **definitionNode);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypedValue)(
        IXMLDOMNotation* This,
        VARIANT *typedValue);
    HRESULT (__attribute__((__stdcall__)) *put_nodeTypedValue)(
        IXMLDOMNotation* This,
        VARIANT typedValue);
    HRESULT (__attribute__((__stdcall__)) *get_dataType)(
        IXMLDOMNotation* This,
        VARIANT *dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *put_dataType)(
        IXMLDOMNotation* This,
        BSTR dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *get_xml)(
        IXMLDOMNotation* This,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *transformNode)(
        IXMLDOMNotation* This,
        IXMLDOMNode *styleSheet,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *selectNodes)(
        IXMLDOMNotation* This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);
    HRESULT (__attribute__((__stdcall__)) *selectSingleNode)(
        IXMLDOMNotation* This,
        BSTR queryString,
        IXMLDOMNode **resultNode);
    HRESULT (__attribute__((__stdcall__)) *get_parsed)(
        IXMLDOMNotation* This,
        VARIANT_BOOL *isParsed);
    HRESULT (__attribute__((__stdcall__)) *get_namespaceURI)(
        IXMLDOMNotation* This,
        BSTR *namespaceURI);
    HRESULT (__attribute__((__stdcall__)) *get_prefix)(
        IXMLDOMNotation* This,
        BSTR *prefixString);
    HRESULT (__attribute__((__stdcall__)) *get_baseName)(
        IXMLDOMNotation* This,
        BSTR *nameString);
    HRESULT (__attribute__((__stdcall__)) *transformNodeToObject)(
        IXMLDOMNotation* This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);
    HRESULT (__attribute__((__stdcall__)) *get_publicId)(
        IXMLDOMNotation* This,
        VARIANT *publicId);
    HRESULT (__attribute__((__stdcall__)) *get_systemId)(
        IXMLDOMNotation* This,
        VARIANT *systemId);
   
} IXMLDOMNotationVtbl;
struct IXMLDOMNotation {
    IXMLDOMNotationVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDOMNotation_get_publicId_Proxy(
    IXMLDOMNotation* This,
    VARIANT *publicId);
void __attribute__((__stdcall__)) IXMLDOMNotation_get_publicId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMNotation_get_systemId_Proxy(
    IXMLDOMNotation* This,
    VARIANT *systemId);
void __attribute__((__stdcall__)) IXMLDOMNotation_get_systemId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLDOMEntity ;
typedef struct IXMLDOMEntityVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMEntity* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMEntity* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMEntity* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMEntity* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMEntity* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMEntity* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMEntity* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_nodeName)(
        IXMLDOMEntity* This,
        BSTR *name);
    HRESULT (__attribute__((__stdcall__)) *get_nodeValue)(
        IXMLDOMEntity* This,
        VARIANT *value);
    HRESULT (__attribute__((__stdcall__)) *put_nodeValue)(
        IXMLDOMEntity* This,
        VARIANT value);
    HRESULT (__attribute__((__stdcall__)) *get_nodeType)(
        IXMLDOMEntity* This,
        DOMNodeType *type);
    HRESULT (__attribute__((__stdcall__)) *get_parentNode)(
        IXMLDOMEntity* This,
        IXMLDOMNode **parent);
    HRESULT (__attribute__((__stdcall__)) *get_childNodes)(
        IXMLDOMEntity* This,
        IXMLDOMNodeList **childList);
    HRESULT (__attribute__((__stdcall__)) *get_firstChild)(
        IXMLDOMEntity* This,
        IXMLDOMNode **firstChild);
    HRESULT (__attribute__((__stdcall__)) *get_lastChild)(
        IXMLDOMEntity* This,
        IXMLDOMNode **lastChild);
    HRESULT (__attribute__((__stdcall__)) *get_previousSibling)(
        IXMLDOMEntity* This,
        IXMLDOMNode **previousSibling);
    HRESULT (__attribute__((__stdcall__)) *get_nextSibling)(
        IXMLDOMEntity* This,
        IXMLDOMNode **nextSibling);
    HRESULT (__attribute__((__stdcall__)) *get_attributes)(
        IXMLDOMEntity* This,
        IXMLDOMNamedNodeMap **attributeMap);
    HRESULT (__attribute__((__stdcall__)) *insertBefore)(
        IXMLDOMEntity* This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *replaceChild)(
        IXMLDOMEntity* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);
    HRESULT (__attribute__((__stdcall__)) *removeChild)(
        IXMLDOMEntity* This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);
    HRESULT (__attribute__((__stdcall__)) *appendChild)(
        IXMLDOMEntity* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *hasChildNodes)(
        IXMLDOMEntity* This,
        VARIANT_BOOL *hasChild);
    HRESULT (__attribute__((__stdcall__)) *get_ownerDocument)(
        IXMLDOMEntity* This,
        IXMLDOMDocument **DOMDocument);
    HRESULT (__attribute__((__stdcall__)) *cloneNode)(
        IXMLDOMEntity* This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypeString)(
        IXMLDOMEntity* This,
        BSTR *nodeType);
    HRESULT (__attribute__((__stdcall__)) *get_text)(
        IXMLDOMEntity* This,
        BSTR *text);
    HRESULT (__attribute__((__stdcall__)) *put_text)(
        IXMLDOMEntity* This,
        BSTR text);
    HRESULT (__attribute__((__stdcall__)) *get_specified)(
        IXMLDOMEntity* This,
        VARIANT_BOOL *isSpecified);
    HRESULT (__attribute__((__stdcall__)) *get_definition)(
        IXMLDOMEntity* This,
        IXMLDOMNode **definitionNode);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypedValue)(
        IXMLDOMEntity* This,
        VARIANT *typedValue);
    HRESULT (__attribute__((__stdcall__)) *put_nodeTypedValue)(
        IXMLDOMEntity* This,
        VARIANT typedValue);
    HRESULT (__attribute__((__stdcall__)) *get_dataType)(
        IXMLDOMEntity* This,
        VARIANT *dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *put_dataType)(
        IXMLDOMEntity* This,
        BSTR dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *get_xml)(
        IXMLDOMEntity* This,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *transformNode)(
        IXMLDOMEntity* This,
        IXMLDOMNode *styleSheet,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *selectNodes)(
        IXMLDOMEntity* This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);
    HRESULT (__attribute__((__stdcall__)) *selectSingleNode)(
        IXMLDOMEntity* This,
        BSTR queryString,
        IXMLDOMNode **resultNode);
    HRESULT (__attribute__((__stdcall__)) *get_parsed)(
        IXMLDOMEntity* This,
        VARIANT_BOOL *isParsed);
    HRESULT (__attribute__((__stdcall__)) *get_namespaceURI)(
        IXMLDOMEntity* This,
        BSTR *namespaceURI);
    HRESULT (__attribute__((__stdcall__)) *get_prefix)(
        IXMLDOMEntity* This,
        BSTR *prefixString);
    HRESULT (__attribute__((__stdcall__)) *get_baseName)(
        IXMLDOMEntity* This,
        BSTR *nameString);
    HRESULT (__attribute__((__stdcall__)) *transformNodeToObject)(
        IXMLDOMEntity* This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);
    HRESULT (__attribute__((__stdcall__)) *get_publicId)(
        IXMLDOMEntity* This,
        VARIANT *publicId);
    HRESULT (__attribute__((__stdcall__)) *get_systemId)(
        IXMLDOMEntity* This,
        VARIANT *systemId);
    HRESULT (__attribute__((__stdcall__)) *get_notationName)(
        IXMLDOMEntity* This,
        BSTR *name);
   
} IXMLDOMEntityVtbl;
struct IXMLDOMEntity {
    IXMLDOMEntityVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDOMEntity_get_publicId_Proxy(
    IXMLDOMEntity* This,
    VARIANT *publicId);
void __attribute__((__stdcall__)) IXMLDOMEntity_get_publicId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMEntity_get_systemId_Proxy(
    IXMLDOMEntity* This,
    VARIANT *systemId);
void __attribute__((__stdcall__)) IXMLDOMEntity_get_systemId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMEntity_get_notationName_Proxy(
    IXMLDOMEntity* This,
    BSTR *name);
void __attribute__((__stdcall__)) IXMLDOMEntity_get_notationName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLDOMEntityReference ;
typedef struct IXMLDOMEntityReferenceVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMEntityReference* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMEntityReference* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMEntityReference* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMEntityReference* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMEntityReference* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMEntityReference* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMEntityReference* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_nodeName)(
        IXMLDOMEntityReference* This,
        BSTR *name);
    HRESULT (__attribute__((__stdcall__)) *get_nodeValue)(
        IXMLDOMEntityReference* This,
        VARIANT *value);
    HRESULT (__attribute__((__stdcall__)) *put_nodeValue)(
        IXMLDOMEntityReference* This,
        VARIANT value);
    HRESULT (__attribute__((__stdcall__)) *get_nodeType)(
        IXMLDOMEntityReference* This,
        DOMNodeType *type);
    HRESULT (__attribute__((__stdcall__)) *get_parentNode)(
        IXMLDOMEntityReference* This,
        IXMLDOMNode **parent);
    HRESULT (__attribute__((__stdcall__)) *get_childNodes)(
        IXMLDOMEntityReference* This,
        IXMLDOMNodeList **childList);
    HRESULT (__attribute__((__stdcall__)) *get_firstChild)(
        IXMLDOMEntityReference* This,
        IXMLDOMNode **firstChild);
    HRESULT (__attribute__((__stdcall__)) *get_lastChild)(
        IXMLDOMEntityReference* This,
        IXMLDOMNode **lastChild);
    HRESULT (__attribute__((__stdcall__)) *get_previousSibling)(
        IXMLDOMEntityReference* This,
        IXMLDOMNode **previousSibling);
    HRESULT (__attribute__((__stdcall__)) *get_nextSibling)(
        IXMLDOMEntityReference* This,
        IXMLDOMNode **nextSibling);
    HRESULT (__attribute__((__stdcall__)) *get_attributes)(
        IXMLDOMEntityReference* This,
        IXMLDOMNamedNodeMap **attributeMap);
    HRESULT (__attribute__((__stdcall__)) *insertBefore)(
        IXMLDOMEntityReference* This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *replaceChild)(
        IXMLDOMEntityReference* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);
    HRESULT (__attribute__((__stdcall__)) *removeChild)(
        IXMLDOMEntityReference* This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);
    HRESULT (__attribute__((__stdcall__)) *appendChild)(
        IXMLDOMEntityReference* This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);
    HRESULT (__attribute__((__stdcall__)) *hasChildNodes)(
        IXMLDOMEntityReference* This,
        VARIANT_BOOL *hasChild);
    HRESULT (__attribute__((__stdcall__)) *get_ownerDocument)(
        IXMLDOMEntityReference* This,
        IXMLDOMDocument **DOMDocument);
    HRESULT (__attribute__((__stdcall__)) *cloneNode)(
        IXMLDOMEntityReference* This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypeString)(
        IXMLDOMEntityReference* This,
        BSTR *nodeType);
    HRESULT (__attribute__((__stdcall__)) *get_text)(
        IXMLDOMEntityReference* This,
        BSTR *text);
    HRESULT (__attribute__((__stdcall__)) *put_text)(
        IXMLDOMEntityReference* This,
        BSTR text);
    HRESULT (__attribute__((__stdcall__)) *get_specified)(
        IXMLDOMEntityReference* This,
        VARIANT_BOOL *isSpecified);
    HRESULT (__attribute__((__stdcall__)) *get_definition)(
        IXMLDOMEntityReference* This,
        IXMLDOMNode **definitionNode);
    HRESULT (__attribute__((__stdcall__)) *get_nodeTypedValue)(
        IXMLDOMEntityReference* This,
        VARIANT *typedValue);
    HRESULT (__attribute__((__stdcall__)) *put_nodeTypedValue)(
        IXMLDOMEntityReference* This,
        VARIANT typedValue);
    HRESULT (__attribute__((__stdcall__)) *get_dataType)(
        IXMLDOMEntityReference* This,
        VARIANT *dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *put_dataType)(
        IXMLDOMEntityReference* This,
        BSTR dataTypeName);
    HRESULT (__attribute__((__stdcall__)) *get_xml)(
        IXMLDOMEntityReference* This,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *transformNode)(
        IXMLDOMEntityReference* This,
        IXMLDOMNode *styleSheet,
        BSTR *xmlString);
    HRESULT (__attribute__((__stdcall__)) *selectNodes)(
        IXMLDOMEntityReference* This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);
    HRESULT (__attribute__((__stdcall__)) *selectSingleNode)(
        IXMLDOMEntityReference* This,
        BSTR queryString,
        IXMLDOMNode **resultNode);
    HRESULT (__attribute__((__stdcall__)) *get_parsed)(
        IXMLDOMEntityReference* This,
        VARIANT_BOOL *isParsed);
    HRESULT (__attribute__((__stdcall__)) *get_namespaceURI)(
        IXMLDOMEntityReference* This,
        BSTR *namespaceURI);
    HRESULT (__attribute__((__stdcall__)) *get_prefix)(
        IXMLDOMEntityReference* This,
        BSTR *prefixString);
    HRESULT (__attribute__((__stdcall__)) *get_baseName)(
        IXMLDOMEntityReference* This,
        BSTR *nameString);
    HRESULT (__attribute__((__stdcall__)) *transformNodeToObject)(
        IXMLDOMEntityReference* This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);
   
} IXMLDOMEntityReferenceVtbl;
struct IXMLDOMEntityReference {
    IXMLDOMEntityReferenceVtbl* lpVtbl;
};
extern const GUID IID_IXMLDOMImplementation ;
typedef struct IXMLDOMImplementationVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMImplementation* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMImplementation* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMImplementation* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMImplementation* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMImplementation* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMImplementation* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMImplementation* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *hasFeature)(
        IXMLDOMImplementation* This,
        BSTR feature,
        BSTR version,
        VARIANT_BOOL *pbool);
   
} IXMLDOMImplementationVtbl;
struct IXMLDOMImplementation {
    IXMLDOMImplementationVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDOMImplementation_hasFeature_Proxy(
    IXMLDOMImplementation* This,
    BSTR feature,
    BSTR version,
    VARIANT_BOOL *pbool);
void __attribute__((__stdcall__)) IXMLDOMImplementation_hasFeature_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLDOMParseError ;
typedef struct IXMLDOMParseErrorVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDOMParseError* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDOMParseError* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDOMParseError* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDOMParseError* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDOMParseError* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDOMParseError* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDOMParseError* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_errorCode)(
        IXMLDOMParseError* This,
        LONG *errCode);
    HRESULT (__attribute__((__stdcall__)) *get_url)(
        IXMLDOMParseError* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *get_reason)(
        IXMLDOMParseError* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *get_srcText)(
        IXMLDOMParseError* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *get_line)(
        IXMLDOMParseError* This,
        LONG *lineNo);
    HRESULT (__attribute__((__stdcall__)) *get_linepos)(
        IXMLDOMParseError* This,
        LONG *linePos);
    HRESULT (__attribute__((__stdcall__)) *get_filepos)(
        IXMLDOMParseError* This,
        LONG *filePos);
   
} IXMLDOMParseErrorVtbl;
struct IXMLDOMParseError {
    IXMLDOMParseErrorVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDOMParseError_get_errorCode_Proxy(
    IXMLDOMParseError* This,
    LONG *errCode);
void __attribute__((__stdcall__)) IXMLDOMParseError_get_errorCode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMParseError_get_url_Proxy(
    IXMLDOMParseError* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDOMParseError_get_url_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMParseError_get_reason_Proxy(
    IXMLDOMParseError* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDOMParseError_get_reason_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMParseError_get_srcText_Proxy(
    IXMLDOMParseError* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDOMParseError_get_srcText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMParseError_get_line_Proxy(
    IXMLDOMParseError* This,
    LONG *lineNo);
void __attribute__((__stdcall__)) IXMLDOMParseError_get_line_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMParseError_get_linepos_Proxy(
    IXMLDOMParseError* This,
    LONG *linePos);
void __attribute__((__stdcall__)) IXMLDOMParseError_get_linepos_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDOMParseError_get_filepos_Proxy(
    IXMLDOMParseError* This,
    LONG *filePos);
void __attribute__((__stdcall__)) IXMLDOMParseError_get_filepos_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID DIID_XMLDOMDocumentEvents ;
typedef struct XMLDOMDocumentEventsVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        XMLDOMDocumentEvents* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        XMLDOMDocumentEvents* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        XMLDOMDocumentEvents* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        XMLDOMDocumentEvents* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        XMLDOMDocumentEvents* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        XMLDOMDocumentEvents* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        XMLDOMDocumentEvents* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
   
} XMLDOMDocumentEventsVtbl;
struct XMLDOMDocumentEvents {
    XMLDOMDocumentEventsVtbl* lpVtbl;
};
extern const GUID CLSID_DOMDocument ;
extern const GUID CLSID_DOMFreeThreadedDocument ;
extern const GUID IID_IXMLHttpRequest ;
typedef struct IXMLHttpRequestVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLHttpRequest* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLHttpRequest* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLHttpRequest* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLHttpRequest* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLHttpRequest* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLHttpRequest* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLHttpRequest* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *open)(
        IXMLHttpRequest* This,
        BSTR bstrMethod,
        BSTR bstrUrl,
        VARIANT varAsync,
        VARIANT varUser,
        VARIANT varPassword);
    HRESULT (__attribute__((__stdcall__)) *setRequestHeader)(
        IXMLHttpRequest* This,
        BSTR bstrHeader,
        BSTR bstrValue);
    HRESULT (__attribute__((__stdcall__)) *getResponseHeader)(
        IXMLHttpRequest* This,
        BSTR bstrHeader,
        BSTR *pbstrValue);
    HRESULT (__attribute__((__stdcall__)) *getAllResponseHeaders)(
        IXMLHttpRequest* This,
        BSTR *pbstrHeaders);
    HRESULT (__attribute__((__stdcall__)) *send)(
        IXMLHttpRequest* This,
        VARIANT varBody);
    HRESULT (__attribute__((__stdcall__)) *abort)(
        IXMLHttpRequest* This);
    HRESULT (__attribute__((__stdcall__)) *get_status)(
        IXMLHttpRequest* This,
        LONG *plStatus);
    HRESULT (__attribute__((__stdcall__)) *get_statusText)(
        IXMLHttpRequest* This,
        BSTR *bstrStatus);
    HRESULT (__attribute__((__stdcall__)) *get_responseXML)(
        IXMLHttpRequest* This,
        IDispatch **ppBody);
    HRESULT (__attribute__((__stdcall__)) *get_responseText)(
        IXMLHttpRequest* This,
        BSTR *pbstrBody);
    HRESULT (__attribute__((__stdcall__)) *get_responseBody)(
        IXMLHttpRequest* This,
        VARIANT *pvarBody);
    HRESULT (__attribute__((__stdcall__)) *get_responseStream)(
        IXMLHttpRequest* This,
        VARIANT *pvarBody);
    HRESULT (__attribute__((__stdcall__)) *get_readyState)(
        IXMLHttpRequest* This,
        LONG *plState);
    HRESULT (__attribute__((__stdcall__)) *put_onreadystatechange)(
        IXMLHttpRequest* This,
        IDispatch *pReadyStateSink);
   
} IXMLHttpRequestVtbl;
struct IXMLHttpRequest {
    IXMLHttpRequestVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_open_Proxy(
    IXMLHttpRequest* This,
    BSTR bstrMethod,
    BSTR bstrUrl,
    VARIANT varAsync,
    VARIANT varUser,
    VARIANT varPassword);
void __attribute__((__stdcall__)) IXMLHttpRequest_open_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_setRequestHeader_Proxy(
    IXMLHttpRequest* This,
    BSTR bstrHeader,
    BSTR bstrValue);
void __attribute__((__stdcall__)) IXMLHttpRequest_setRequestHeader_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_getResponseHeader_Proxy(
    IXMLHttpRequest* This,
    BSTR bstrHeader,
    BSTR *pbstrValue);
void __attribute__((__stdcall__)) IXMLHttpRequest_getResponseHeader_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_getAllResponseHeaders_Proxy(
    IXMLHttpRequest* This,
    BSTR *pbstrHeaders);
void __attribute__((__stdcall__)) IXMLHttpRequest_getAllResponseHeaders_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_send_Proxy(
    IXMLHttpRequest* This,
    VARIANT varBody);
void __attribute__((__stdcall__)) IXMLHttpRequest_send_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_abort_Proxy(
    IXMLHttpRequest* This);
void __attribute__((__stdcall__)) IXMLHttpRequest_abort_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_get_status_Proxy(
    IXMLHttpRequest* This,
    LONG *plStatus);
void __attribute__((__stdcall__)) IXMLHttpRequest_get_status_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_get_statusText_Proxy(
    IXMLHttpRequest* This,
    BSTR *bstrStatus);
void __attribute__((__stdcall__)) IXMLHttpRequest_get_statusText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_get_responseXML_Proxy(
    IXMLHttpRequest* This,
    IDispatch **ppBody);
void __attribute__((__stdcall__)) IXMLHttpRequest_get_responseXML_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_get_responseText_Proxy(
    IXMLHttpRequest* This,
    BSTR *pbstrBody);
void __attribute__((__stdcall__)) IXMLHttpRequest_get_responseText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_get_responseBody_Proxy(
    IXMLHttpRequest* This,
    VARIANT *pvarBody);
void __attribute__((__stdcall__)) IXMLHttpRequest_get_responseBody_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_get_responseStream_Proxy(
    IXMLHttpRequest* This,
    VARIANT *pvarBody);
void __attribute__((__stdcall__)) IXMLHttpRequest_get_responseStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_get_readyState_Proxy(
    IXMLHttpRequest* This,
    LONG *plState);
void __attribute__((__stdcall__)) IXMLHttpRequest_get_readyState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_put_onreadystatechange_Proxy(
    IXMLHttpRequest* This,
    IDispatch *pReadyStateSink);
void __attribute__((__stdcall__)) IXMLHttpRequest_put_onreadystatechange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID CLSID_XMLHTTPRequest ;
extern const GUID IID_IXMLDSOControl ;
typedef struct IXMLDSOControlVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDSOControl* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDSOControl* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDSOControl* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDSOControl* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDSOControl* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDSOControl* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDSOControl* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_XMLDocument)(
        IXMLDSOControl* This,
        IXMLDOMDocument **ppDoc);
    HRESULT (__attribute__((__stdcall__)) *put_XMLDocument)(
        IXMLDSOControl* This,
        IXMLDOMDocument *ppDoc);
    HRESULT (__attribute__((__stdcall__)) *get_JavaDSOCompatible)(
        IXMLDSOControl* This,
        BOOL *fJavaDSOCompatible);
    HRESULT (__attribute__((__stdcall__)) *put_JavaDSOCompatible)(
        IXMLDSOControl* This,
        BOOL fJavaDSOCompatible);
    HRESULT (__attribute__((__stdcall__)) *get_readyState)(
        IXMLDSOControl* This,
        LONG *state);
   
} IXMLDSOControlVtbl;
struct IXMLDSOControl {
    IXMLDSOControlVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDSOControl_get_XMLDocument_Proxy(
    IXMLDSOControl* This,
    IXMLDOMDocument **ppDoc);
void __attribute__((__stdcall__)) IXMLDSOControl_get_XMLDocument_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDSOControl_put_XMLDocument_Proxy(
    IXMLDSOControl* This,
    IXMLDOMDocument *ppDoc);
void __attribute__((__stdcall__)) IXMLDSOControl_put_XMLDocument_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDSOControl_get_JavaDSOCompatible_Proxy(
    IXMLDSOControl* This,
    BOOL *fJavaDSOCompatible);
void __attribute__((__stdcall__)) IXMLDSOControl_get_JavaDSOCompatible_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDSOControl_put_JavaDSOCompatible_Proxy(
    IXMLDSOControl* This,
    BOOL fJavaDSOCompatible);
void __attribute__((__stdcall__)) IXMLDSOControl_put_JavaDSOCompatible_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDSOControl_get_readyState_Proxy(
    IXMLDSOControl* This,
    LONG *state);
void __attribute__((__stdcall__)) IXMLDSOControl_get_readyState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID CLSID_XMLDSOControl ;
extern const GUID IID_IXMLElementCollection ;
typedef struct IXMLElementCollectionVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLElementCollection* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLElementCollection* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLElementCollection* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLElementCollection* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLElementCollection* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLElementCollection* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLElementCollection* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *put_length)(
        IXMLElementCollection* This,
        LONG v);
    HRESULT (__attribute__((__stdcall__)) *get_length)(
        IXMLElementCollection* This,
        LONG *p);
    HRESULT (__attribute__((__stdcall__)) *get__newEnum)(
        IXMLElementCollection* This,
        IUnknown **ppUnk);
    HRESULT (__attribute__((__stdcall__)) *item)(
        IXMLElementCollection* This,
        VARIANT var1,
        VARIANT var2,
        IDispatch **ppDisp);
   
} IXMLElementCollectionVtbl;
struct IXMLElementCollection {
    IXMLElementCollectionVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLElementCollection_put_length_Proxy(
    IXMLElementCollection* This,
    LONG v);
void __attribute__((__stdcall__)) IXMLElementCollection_put_length_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElementCollection_get_length_Proxy(
    IXMLElementCollection* This,
    LONG *p);
void __attribute__((__stdcall__)) IXMLElementCollection_get_length_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElementCollection_get__newEnum_Proxy(
    IXMLElementCollection* This,
    IUnknown **ppUnk);
void __attribute__((__stdcall__)) IXMLElementCollection_get__newEnum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElementCollection_item_Proxy(
    IXMLElementCollection* This,
    VARIANT var1,
    VARIANT var2,
    IDispatch **ppDisp);
void __attribute__((__stdcall__)) IXMLElementCollection_item_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLElement ;
typedef struct IXMLElementVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLElement* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLElement* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLElement* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLElement* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLElement* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLElement* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLElement* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_tagName)(
        IXMLElement* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *put_tagName)(
        IXMLElement* This,
        BSTR p);
    HRESULT (__attribute__((__stdcall__)) *get_parent)(
        IXMLElement* This,
        IXMLElement **parent);
    HRESULT (__attribute__((__stdcall__)) *setAttribute)(
        IXMLElement* This,
        BSTR strPropertyName,
        VARIANT PropertyValue);
    HRESULT (__attribute__((__stdcall__)) *getAttribute)(
        IXMLElement* This,
        BSTR strPropertyName,
        VARIANT *PropertyValue);
    HRESULT (__attribute__((__stdcall__)) *removeAttribute)(
        IXMLElement* This,
        BSTR strPropertyName);
    HRESULT (__attribute__((__stdcall__)) *get_children)(
        IXMLElement* This,
        IXMLElementCollection **p);
    HRESULT (__attribute__((__stdcall__)) *get_type)(
        IXMLElement* This,
        LONG *p);
    HRESULT (__attribute__((__stdcall__)) *get_text)(
        IXMLElement* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *put_text)(
        IXMLElement* This,
        BSTR p);
    HRESULT (__attribute__((__stdcall__)) *addChild)(
        IXMLElement* This,
        IXMLElement *pChildElem,
        LONG lIndex,
        LONG lreserved);
    HRESULT (__attribute__((__stdcall__)) *removeChild)(
        IXMLElement* This,
        IXMLElement *pChildElem);
   
} IXMLElementVtbl;
struct IXMLElement {
    IXMLElementVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLElement_get_tagName_Proxy(
    IXMLElement* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLElement_get_tagName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement_put_tagName_Proxy(
    IXMLElement* This,
    BSTR p);
void __attribute__((__stdcall__)) IXMLElement_put_tagName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement_get_parent_Proxy(
    IXMLElement* This,
    IXMLElement **parent);
void __attribute__((__stdcall__)) IXMLElement_get_parent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement_setAttribute_Proxy(
    IXMLElement* This,
    BSTR strPropertyName,
    VARIANT PropertyValue);
void __attribute__((__stdcall__)) IXMLElement_setAttribute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement_getAttribute_Proxy(
    IXMLElement* This,
    BSTR strPropertyName,
    VARIANT *PropertyValue);
void __attribute__((__stdcall__)) IXMLElement_getAttribute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement_removeAttribute_Proxy(
    IXMLElement* This,
    BSTR strPropertyName);
void __attribute__((__stdcall__)) IXMLElement_removeAttribute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement_get_children_Proxy(
    IXMLElement* This,
    IXMLElementCollection **p);
void __attribute__((__stdcall__)) IXMLElement_get_children_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement_get_type_Proxy(
    IXMLElement* This,
    LONG *p);
void __attribute__((__stdcall__)) IXMLElement_get_type_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement_get_text_Proxy(
    IXMLElement* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLElement_get_text_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement_put_text_Proxy(
    IXMLElement* This,
    BSTR p);
void __attribute__((__stdcall__)) IXMLElement_put_text_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement_addChild_Proxy(
    IXMLElement* This,
    IXMLElement *pChildElem,
    LONG lIndex,
    LONG lreserved);
void __attribute__((__stdcall__)) IXMLElement_addChild_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement_removeChild_Proxy(
    IXMLElement* This,
    IXMLElement *pChildElem);
void __attribute__((__stdcall__)) IXMLElement_removeChild_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLDocument ;
typedef struct IXMLDocumentVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDocument* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDocument* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDocument* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDocument* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDocument* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDocument* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDocument* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_root)(
        IXMLDocument* This,
        IXMLElement **p);
    HRESULT (__attribute__((__stdcall__)) *get_fileSize)(
        IXMLDocument* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *get_fileModifiedDate)(
        IXMLDocument* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *get_fileUpdatedDate)(
        IXMLDocument* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *get_URL)(
        IXMLDocument* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *put_URL)(
        IXMLDocument* This,
        BSTR p);
    HRESULT (__attribute__((__stdcall__)) *get_mimeType)(
        IXMLDocument* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *get_readyState)(
        IXMLDocument* This,
        LONG *p);
    HRESULT (__attribute__((__stdcall__)) *get_charset)(
        IXMLDocument* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *put_charset)(
        IXMLDocument* This,
        BSTR p);
    HRESULT (__attribute__((__stdcall__)) *get_version)(
        IXMLDocument* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *get_doctype)(
        IXMLDocument* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *get_dtdURl)(
        IXMLDocument* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *createElement)(
        IXMLDocument* This,
        VARIANT vType,
        VARIANT var1,
        IXMLElement **ppElem);
   
} IXMLDocumentVtbl;
struct IXMLDocument {
    IXMLDocumentVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDocument_get_root_Proxy(
    IXMLDocument* This,
    IXMLElement **p);
void __attribute__((__stdcall__)) IXMLDocument_get_root_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument_get_fileSize_Proxy(
    IXMLDocument* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument_get_fileSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument_get_fileModifiedDate_Proxy(
    IXMLDocument* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument_get_fileModifiedDate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument_get_fileUpdatedDate_Proxy(
    IXMLDocument* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument_get_fileUpdatedDate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument_get_URL_Proxy(
    IXMLDocument* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument_get_URL_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument_put_URL_Proxy(
    IXMLDocument* This,
    BSTR p);
void __attribute__((__stdcall__)) IXMLDocument_put_URL_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument_get_mimeType_Proxy(
    IXMLDocument* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument_get_mimeType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument_get_readyState_Proxy(
    IXMLDocument* This,
    LONG *p);
void __attribute__((__stdcall__)) IXMLDocument_get_readyState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument_get_charset_Proxy(
    IXMLDocument* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument_get_charset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument_put_charset_Proxy(
    IXMLDocument* This,
    BSTR p);
void __attribute__((__stdcall__)) IXMLDocument_put_charset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument_get_version_Proxy(
    IXMLDocument* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument_get_version_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument_get_doctype_Proxy(
    IXMLDocument* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument_get_doctype_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument_get_dtdURl_Proxy(
    IXMLDocument* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument_get_dtdURl_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument_createElement_Proxy(
    IXMLDocument* This,
    VARIANT vType,
    VARIANT var1,
    IXMLElement **ppElem);
void __attribute__((__stdcall__)) IXMLDocument_createElement_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLElement2 ;
typedef struct IXMLElement2Vtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLElement2* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLElement2* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLElement2* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLElement2* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLElement2* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLElement2* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLElement2* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_tagName)(
        IXMLElement2* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *put_tagName)(
        IXMLElement2* This,
        BSTR p);
    HRESULT (__attribute__((__stdcall__)) *get_parent)(
        IXMLElement2* This,
        IXMLElement2 **ppParent);
    HRESULT (__attribute__((__stdcall__)) *setAttribute)(
        IXMLElement2* This,
        BSTR strPropertyName,
        VARIANT PropertyValue);
    HRESULT (__attribute__((__stdcall__)) *getAttribute)(
        IXMLElement2* This,
        BSTR strPropertyName,
        VARIANT *PropertyValue);
    HRESULT (__attribute__((__stdcall__)) *removeAttribute)(
        IXMLElement2* This,
        BSTR strPropertyName);
    HRESULT (__attribute__((__stdcall__)) *get_children)(
        IXMLElement2* This,
        IXMLElementCollection **pp);
    HRESULT (__attribute__((__stdcall__)) *get_type)(
        IXMLElement2* This,
        LONG *plType);
    HRESULT (__attribute__((__stdcall__)) *get_text)(
        IXMLElement2* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *put_text)(
        IXMLElement2* This,
        BSTR p);
    HRESULT (__attribute__((__stdcall__)) *addChild)(
        IXMLElement2* This,
        IXMLElement2 *pChildElem,
        LONG lIndex,
        LONG lReserved);
    HRESULT (__attribute__((__stdcall__)) *removeChild)(
        IXMLElement2* This,
        IXMLElement2 *pChildElem);
    HRESULT (__attribute__((__stdcall__)) *get_attributes)(
        IXMLElement2* This,
        IXMLElementCollection **pp);
   
} IXMLElement2Vtbl;
struct IXMLElement2 {
    IXMLElement2Vtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLElement2_get_tagName_Proxy(
    IXMLElement2* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLElement2_get_tagName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement2_put_tagName_Proxy(
    IXMLElement2* This,
    BSTR p);
void __attribute__((__stdcall__)) IXMLElement2_put_tagName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement2_get_parent_Proxy(
    IXMLElement2* This,
    IXMLElement2 **ppParent);
void __attribute__((__stdcall__)) IXMLElement2_get_parent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement2_setAttribute_Proxy(
    IXMLElement2* This,
    BSTR strPropertyName,
    VARIANT PropertyValue);
void __attribute__((__stdcall__)) IXMLElement2_setAttribute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement2_getAttribute_Proxy(
    IXMLElement2* This,
    BSTR strPropertyName,
    VARIANT *PropertyValue);
void __attribute__((__stdcall__)) IXMLElement2_getAttribute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement2_removeAttribute_Proxy(
    IXMLElement2* This,
    BSTR strPropertyName);
void __attribute__((__stdcall__)) IXMLElement2_removeAttribute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement2_get_children_Proxy(
    IXMLElement2* This,
    IXMLElementCollection **pp);
void __attribute__((__stdcall__)) IXMLElement2_get_children_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement2_get_type_Proxy(
    IXMLElement2* This,
    LONG *plType);
void __attribute__((__stdcall__)) IXMLElement2_get_type_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement2_get_text_Proxy(
    IXMLElement2* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLElement2_get_text_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement2_put_text_Proxy(
    IXMLElement2* This,
    BSTR p);
void __attribute__((__stdcall__)) IXMLElement2_put_text_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement2_addChild_Proxy(
    IXMLElement2* This,
    IXMLElement2 *pChildElem,
    LONG lIndex,
    LONG lReserved);
void __attribute__((__stdcall__)) IXMLElement2_addChild_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement2_removeChild_Proxy(
    IXMLElement2* This,
    IXMLElement2 *pChildElem);
void __attribute__((__stdcall__)) IXMLElement2_removeChild_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLElement2_get_attributes_Proxy(
    IXMLElement2* This,
    IXMLElementCollection **pp);
void __attribute__((__stdcall__)) IXMLElement2_get_attributes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLDocument2 ;
typedef struct IXMLDocument2Vtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLDocument2* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLDocument2* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLDocument2* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLDocument2* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLDocument2* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLDocument2* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLDocument2* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_root)(
        IXMLDocument2* This,
        IXMLElement2 **p);
    HRESULT (__attribute__((__stdcall__)) *get_fileSize)(
        IXMLDocument2* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *get_fileModifiedDate)(
        IXMLDocument2* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *get_fileUpdatedDate)(
        IXMLDocument2* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *get_URL)(
        IXMLDocument2* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *put_URL)(
        IXMLDocument2* This,
        BSTR p);
    HRESULT (__attribute__((__stdcall__)) *get_mimeType)(
        IXMLDocument2* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *get_readyState)(
        IXMLDocument2* This,
        LONG *pl);
    HRESULT (__attribute__((__stdcall__)) *get_charset)(
        IXMLDocument2* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *put_charset)(
        IXMLDocument2* This,
        BSTR p);
    HRESULT (__attribute__((__stdcall__)) *get_version)(
        IXMLDocument2* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *get_doctype)(
        IXMLDocument2* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *get_dtdURL)(
        IXMLDocument2* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *createElement)(
        IXMLDocument2* This,
        VARIANT vType,
        VARIANT var,
        IXMLElement2 **ppElem);
    HRESULT (__attribute__((__stdcall__)) *get_async)(
        IXMLDocument2* This,
        VARIANT_BOOL *pf);
    HRESULT (__attribute__((__stdcall__)) *put_async)(
        IXMLDocument2* This,
        VARIANT_BOOL f);
   
} IXMLDocument2Vtbl;
struct IXMLDocument2 {
    IXMLDocument2Vtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_root_Proxy(
    IXMLDocument2* This,
    IXMLElement2 **p);
void __attribute__((__stdcall__)) IXMLDocument2_get_root_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_fileSize_Proxy(
    IXMLDocument2* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument2_get_fileSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_fileModifiedDate_Proxy(
    IXMLDocument2* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument2_get_fileModifiedDate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_fileUpdatedDate_Proxy(
    IXMLDocument2* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument2_get_fileUpdatedDate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_URL_Proxy(
    IXMLDocument2* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument2_get_URL_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument2_put_URL_Proxy(
    IXMLDocument2* This,
    BSTR p);
void __attribute__((__stdcall__)) IXMLDocument2_put_URL_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_mimeType_Proxy(
    IXMLDocument2* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument2_get_mimeType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_readyState_Proxy(
    IXMLDocument2* This,
    LONG *pl);
void __attribute__((__stdcall__)) IXMLDocument2_get_readyState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_charset_Proxy(
    IXMLDocument2* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument2_get_charset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument2_put_charset_Proxy(
    IXMLDocument2* This,
    BSTR p);
void __attribute__((__stdcall__)) IXMLDocument2_put_charset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_version_Proxy(
    IXMLDocument2* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument2_get_version_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_doctype_Proxy(
    IXMLDocument2* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument2_get_doctype_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_dtdURL_Proxy(
    IXMLDocument2* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLDocument2_get_dtdURL_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument2_createElement_Proxy(
    IXMLDocument2* This,
    VARIANT vType,
    VARIANT var,
    IXMLElement2 **ppElem);
void __attribute__((__stdcall__)) IXMLDocument2_createElement_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_async_Proxy(
    IXMLDocument2* This,
    VARIANT_BOOL *pf);
void __attribute__((__stdcall__)) IXMLDocument2_get_async_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLDocument2_put_async_Proxy(
    IXMLDocument2* This,
    VARIANT_BOOL f);
void __attribute__((__stdcall__)) IXMLDocument2_put_async_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef enum tagXMLEMEM_TYPE {
    XMLELEMTYPE_ELEMENT = 0,
    XMLELEMTYPE_TEXT = 1,
    XMLELEMTYPE_COMMENT = 2,
    XMLELEMTYPE_DOCUMENT = 3,
    XMLELEMTYPE_DTD = 4,
    XMLELEMTYPE_PI = 5,
    XMLELEMTYPE_OTHER = 6
} XMLELEM_TYPE;
typedef struct _xml_error {
    UINT _nLine;
    BSTR _pchBuf;
    BSTR _cchBuf;
    UINT _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
} XML_ERROR;
extern const GUID IID_IXMLAttribute ;
typedef struct IXMLAttributeVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLAttribute* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLAttribute* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLAttribute* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLAttribute* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLAttribute* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLAttribute* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLAttribute* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *get_name)(
        IXMLAttribute* This,
        BSTR *p);
    HRESULT (__attribute__((__stdcall__)) *get_value)(
        IXMLAttribute* This,
        BSTR *p);
   
} IXMLAttributeVtbl;
struct IXMLAttribute {
    IXMLAttributeVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLAttribute_get_name_Proxy(
    IXMLAttribute* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLAttribute_get_name_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IXMLAttribute_get_value_Proxy(
    IXMLAttribute* This,
    BSTR *p);
void __attribute__((__stdcall__)) IXMLAttribute_get_value_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLError ;
typedef struct IXMLErrorVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLError* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLError* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLError* This);
    HRESULT (__attribute__((__stdcall__)) *GetErrorInfo)(
        IXMLError* This,
        XML_ERROR *pErrorReturn);
   
} IXMLErrorVtbl;
struct IXMLError {
    IXMLErrorVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLError_GetErrorInfo_Proxy(
    IXMLError* This,
    XML_ERROR *pErrorReturn);
void __attribute__((__stdcall__)) IXMLError_GetErrorInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IXMLElementNotificationSink ;
typedef struct IXMLElementNotificationSinkVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IXMLElementNotificationSink* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IXMLElementNotificationSink* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IXMLElementNotificationSink* This);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfoCount)(
        IXMLElementNotificationSink* This,
        UINT *pctinfo);
    HRESULT (__attribute__((__stdcall__)) *GetTypeInfo)(
        IXMLElementNotificationSink* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);
    HRESULT (__attribute__((__stdcall__)) *GetIDsOfNames)(
        IXMLElementNotificationSink* This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);
    HRESULT (__attribute__((__stdcall__)) *Invoke)(
        IXMLElementNotificationSink* This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);
    HRESULT (__attribute__((__stdcall__)) *ChildAdded)(
        IXMLElementNotificationSink* This,
        IDispatch *pChildElem);
   
} IXMLElementNotificationSinkVtbl;
struct IXMLElementNotificationSink {
    IXMLElementNotificationSinkVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IXMLElementNotificationSink_ChildAdded_Proxy(
    IXMLElementNotificationSink* This,
    IDispatch *pChildElem);
void __attribute__((__stdcall__)) IXMLElementNotificationSink_ChildAdded_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID CLSID_XMLDocument ;
ULONG __attribute__((__stdcall__)) BSTR_UserSize (ULONG *, ULONG, BSTR *);
unsigned char * __attribute__((__stdcall__)) BSTR_UserMarshal (ULONG *, unsigned char *, BSTR *);
unsigned char * __attribute__((__stdcall__)) BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void __attribute__((__stdcall__)) BSTR_UserFree (ULONG *, BSTR *);
ULONG __attribute__((__stdcall__)) VARIANT_UserSize (ULONG *, ULONG, VARIANT *);
unsigned char * __attribute__((__stdcall__)) VARIANT_UserMarshal (ULONG *, unsigned char *, VARIANT *);
unsigned char * __attribute__((__stdcall__)) VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void __attribute__((__stdcall__)) VARIANT_UserFree (ULONG *, VARIANT *);
typedef IInternet *LPIINTERNET;
extern const GUID IID_IInternet ;
typedef struct IInternetVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInternet* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInternet* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInternet* This);
   
} IInternetVtbl;
struct IInternet {
    IInternetVtbl* lpVtbl;
};
typedef IBinding *LPBINDING;
extern const GUID IID_IBinding ;
typedef struct IBindingVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IBinding* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IBinding* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IBinding* This);
    HRESULT (__attribute__((__stdcall__)) *Abort)(
        IBinding* This);
    HRESULT (__attribute__((__stdcall__)) *Suspend)(
        IBinding* This);
    HRESULT (__attribute__((__stdcall__)) *Resume)(
        IBinding* This);
    HRESULT (__attribute__((__stdcall__)) *SetPriority)(
        IBinding* This,
        LONG nPriority);
    HRESULT (__attribute__((__stdcall__)) *GetPriority)(
        IBinding* This,
        LONG *pnPriority);
    HRESULT (__attribute__((__stdcall__)) *GetBindResult)(
        IBinding* This,
        CLSID *pclsidProtocol,
        DWORD *pdwResult,
        LPOLESTR *pszResult,
        DWORD *pdwReserved);
   
} IBindingVtbl;
struct IBinding {
    IBindingVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IBinding_Abort_Proxy(
    IBinding* This);
void __attribute__((__stdcall__)) IBinding_Abort_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBinding_Suspend_Proxy(
    IBinding* This);
void __attribute__((__stdcall__)) IBinding_Suspend_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBinding_Resume_Proxy(
    IBinding* This);
void __attribute__((__stdcall__)) IBinding_Resume_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBinding_SetPriority_Proxy(
    IBinding* This,
    LONG nPriority);
void __attribute__((__stdcall__)) IBinding_SetPriority_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBinding_GetPriority_Proxy(
    IBinding* This,
    LONG *pnPriority);
void __attribute__((__stdcall__)) IBinding_GetPriority_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBinding_RemoteGetBindResult_Proxy(
    IBinding* This,
    CLSID *pclsidProtocol,
    DWORD *pdwResult,
    LPOLESTR *pszResult,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IBinding_RemoteGetBindResult_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBinding_GetBindResult_Proxy(
    IBinding* This,
    CLSID *pclsidProtocol,
    DWORD *pdwResult,
    LPOLESTR *pszResult,
    DWORD *pdwReserved);
HRESULT __attribute__((__stdcall__)) IBinding_GetBindResult_Stub(
    IBinding* This,
    CLSID *pclsidProtocol,
    DWORD *pdwResult,
    LPOLESTR *pszResult,
    DWORD dwReserved);
typedef IBindStatusCallback *LPBINDSTATUSCALLBACK;
typedef enum __WIDL_urlmon_generated_name_00000000 {
    BINDVERB_GET = 0x0,
    BINDVERB_POST = 0x1,
    BINDVERB_PUT = 0x2,
    BINDVERB_CUSTOM = 0x3
} BINDVERB;
typedef enum __WIDL_urlmon_generated_name_00000001 {
    BINDINFOF_URLENCODESTGMEDDATA = 0x1,
    BINDINFOF_URLENCODEDEXTRAINFO = 0x2
} BINDINFOF;
typedef enum __WIDL_urlmon_generated_name_00000002 {
    BINDF_ASYNCHRONOUS = 0x1,
    BINDF_ASYNCSTORAGE = 0x2,
    BINDF_NOPROGRESSIVERENDERING = 0x4,
    BINDF_OFFLINEOPERATION = 0x8,
    BINDF_GETNEWESTVERSION = 0x10,
    BINDF_NOWRITECACHE = 0x20,
    BINDF_NEEDFILE = 0x40,
    BINDF_PULLDATA = 0x80,
    BINDF_IGNORESECURITYPROBLEM = 0x100,
    BINDF_RESYNCHRONIZE = 0x200,
    BINDF_HYPERLINK = 0x400,
    BINDF_NO_UI = 0x800,
    BINDF_SILENTOPERATION = 0x1000,
    BINDF_PRAGMA_NO_CACHE = 0x2000,
    BINDF_GETCLASSOBJECT = 0x4000,
    BINDF_RESERVED_1 = 0x8000,
    BINDF_FREE_THREADED = 0x10000,
    BINDF_DIRECT_READ = 0x20000,
    BINDF_FORMS_SUBMIT = 0x40000,
    BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,
    BINDF_FROMURLMON = 0x100000,
    BINDF_FWD_BACK = 0x200000,
    BINDF_PREFERDEFAULTHANDLER = 0x400000,
    BINDF_ENFORCERESTRICTED = 0x800000
} BINDF;
typedef enum __WIDL_urlmon_generated_name_00000003 {
    URL_ENCODING_NONE = 0x0,
    URL_ENCODING_ENABLE_UTF8 = 0x10000000,
    URL_ENCODING_DISABLE_UTF8 = 0x20000000
} URL_ENCODING;
typedef struct _tagBINDINFO {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    STGMEDIUM stgmedData;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
} BINDINFO;
typedef struct _REMSECURITY_ATTRIBUTES {
    DWORD nLength;
    DWORD lpSecurityDescriptor;
    BOOL bInheritHandle;
} REMSECURITY_ATTRIBUTES;
typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;
typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;
typedef struct _tagRemBINDINFO {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
} RemBINDINFO;
typedef struct tagRemFORMATETC {
    DWORD cfFormat;
    DWORD ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
} RemFORMATETC;
typedef struct tagRemFORMATETC *LPREMFORMATETC;
typedef enum __WIDL_urlmon_generated_name_00000004 {
    BSCF_FIRSTDATANOTIFICATION = 0x1,
    BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,
    BSCF_LASTDATANOTIFICATION = 0x4,
    BSCF_DATAFULLYAVAILABLE = 0x8,
    BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10,
    BSCF_SKIPDRAINDATAFORFILEURLS = 0x20,
    BSCF_64BITLENGTHDOWNLOAD = 0x40
} BSCF;
typedef enum BINDSTATUS {
    BINDSTATUS_FINDINGRESOURCE = 1,
    BINDSTATUS_CONNECTING = 2,
    BINDSTATUS_REDIRECTING = 3,
    BINDSTATUS_BEGINDOWNLOADDATA = 4,
    BINDSTATUS_DOWNLOADINGDATA = 5,
    BINDSTATUS_ENDDOWNLOADDATA = 6,
    BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 7,
    BINDSTATUS_INSTALLINGCOMPONENTS = 8,
    BINDSTATUS_ENDDOWNLOADCOMPONENTS = 9,
    BINDSTATUS_USINGCACHEDCOPY = 10,
    BINDSTATUS_SENDINGREQUEST = 11,
    BINDSTATUS_CLASSIDAVAILABLE = 12,
    BINDSTATUS_MIMETYPEAVAILABLE = 13,
    BINDSTATUS_CACHEFILENAMEAVAILABLE = 14,
    BINDSTATUS_BEGINSYNCOPERATION = 15,
    BINDSTATUS_ENDSYNCOPERATION = 16,
    BINDSTATUS_BEGINUPLOADDATA = 17,
    BINDSTATUS_UPLOADINGDATA = 18,
    BINDSTATUS_ENDUPLOADINGDATA = 19,
    BINDSTATUS_PROTOCOLCLASSID = 20,
    BINDSTATUS_ENCODING = 21,
    BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 22,
    BINDSTATUS_CLASSINSTALLLOCATION = 23,
    BINDSTATUS_DECODING = 24,
    BINDSTATUS_LOADINGMIMEHANDLER = 25,
    BINDSTATUS_CONTENTDISPOSITIONATTACH = 26,
    BINDSTATUS_FILTERREPORTMIMETYPE = 27,
    BINDSTATUS_CLSIDCANINSTANTIATE = 28,
    BINDSTATUS_IUNKNOWNAVAILABLE = 29,
    BINDSTATUS_DIRECTBIND = 30,
    BINDSTATUS_RAWMIMETYPE = 31,
    BINDSTATUS_PROXYDETECTING = 32,
    BINDSTATUS_ACCEPTRANGES = 33,
    BINDSTATUS_COOKIE_SENT = 34,
    BINDSTATUS_COMPACT_POLICY_RECEIVED = 35,
    BINDSTATUS_COOKIE_SUPPRESSED = 36,
    BINDSTATUS_COOKIE_STATE_UNKNOWN = 37,
    BINDSTATUS_COOKIE_STATE_ACCEPT = 38,
    BINDSTATUS_COOKIE_STATE_REJECT = 39,
    BINDSTATUS_COOKIE_STATE_PROMPT = 40,
    BINDSTATUS_COOKIE_STATE_LEASH = 41,
    BINDSTATUS_COOKIE_STATE_DOWNGRADE = 42,
    BINDSTATUS_POLICY_HREF = 43,
    BINDSTATUS_P3P_HEADER = 44,
    BINDSTATUS_SESSION_COOKIE_RECEIVED = 45,
    BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46,
    BINDSTATUS_SESSION_COOKIES_ALLOWED = 47,
    BINDSTATUS_CACHECONTROL = 48,
    BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49,
    BINDSTATUS_MIMETEXTPLAINMISMATCH = 50,
    BINDSTATUS_PUBLISHERAVAILABLE = 51,
    BINDSTATUS_DISPLAYNAMEAVAILABLE = 52
} BINDSTATUS;
extern const GUID IID_IBindStatusCallback ;
typedef struct IBindStatusCallbackVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IBindStatusCallback* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IBindStatusCallback* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IBindStatusCallback* This);
    HRESULT (__attribute__((__stdcall__)) *OnStartBinding)(
        IBindStatusCallback* This,
        DWORD dwReserved,
        IBinding *pib);
    HRESULT (__attribute__((__stdcall__)) *GetPriority)(
        IBindStatusCallback* This,
        LONG *pnPriority);
    HRESULT (__attribute__((__stdcall__)) *OnLowResource)(
        IBindStatusCallback* This,
        DWORD reserved);
    HRESULT (__attribute__((__stdcall__)) *OnProgress)(
        IBindStatusCallback* This,
        ULONG ulProgress,
        ULONG ulProgressMax,
        ULONG ulStatusCode,
        LPCWSTR szStatusText);
    HRESULT (__attribute__((__stdcall__)) *OnStopBinding)(
        IBindStatusCallback* This,
        HRESULT hresult,
        LPCWSTR szError);
    HRESULT (__attribute__((__stdcall__)) *GetBindInfo)(
        IBindStatusCallback* This,
        DWORD *grfBINDF,
        BINDINFO *pbindinfo);
    HRESULT (__attribute__((__stdcall__)) *OnDataAvailable)(
        IBindStatusCallback* This,
        DWORD grfBSCF,
        DWORD dwSize,
        FORMATETC *pformatetc,
        STGMEDIUM *pstgmed);
    HRESULT (__attribute__((__stdcall__)) *OnObjectAvailable)(
        IBindStatusCallback* This,
        const IID* const riid,
        IUnknown *punk);
   
} IBindStatusCallbackVtbl;
struct IBindStatusCallback {
    IBindStatusCallbackVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_OnStartBinding_Proxy(
    IBindStatusCallback* This,
    DWORD dwReserved,
    IBinding *pib);
void __attribute__((__stdcall__)) IBindStatusCallback_OnStartBinding_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_GetPriority_Proxy(
    IBindStatusCallback* This,
    LONG *pnPriority);
void __attribute__((__stdcall__)) IBindStatusCallback_GetPriority_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_OnLowResource_Proxy(
    IBindStatusCallback* This,
    DWORD reserved);
void __attribute__((__stdcall__)) IBindStatusCallback_OnLowResource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_OnProgress_Proxy(
    IBindStatusCallback* This,
    ULONG ulProgress,
    ULONG ulProgressMax,
    ULONG ulStatusCode,
    LPCWSTR szStatusText);
void __attribute__((__stdcall__)) IBindStatusCallback_OnProgress_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_OnStopBinding_Proxy(
    IBindStatusCallback* This,
    HRESULT hresult,
    LPCWSTR szError);
void __attribute__((__stdcall__)) IBindStatusCallback_OnStopBinding_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_RemoteGetBindInfo_Proxy(
    IBindStatusCallback* This,
    DWORD *grfBINDF,
    RemBINDINFO *pbindinfo,
    RemSTGMEDIUM *pstgmed);
void __attribute__((__stdcall__)) IBindStatusCallback_RemoteGetBindInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_RemoteOnDataAvailable_Proxy(
    IBindStatusCallback* This,
    DWORD grfBSCF,
    DWORD dwSize,
    RemFORMATETC *pformatetc,
    RemSTGMEDIUM *pstgmed);
void __attribute__((__stdcall__)) IBindStatusCallback_RemoteOnDataAvailable_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_OnObjectAvailable_Proxy(
    IBindStatusCallback* This,
    const IID* const riid,
    IUnknown *punk);
void __attribute__((__stdcall__)) IBindStatusCallback_OnObjectAvailable_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_GetBindInfo_Proxy(
    IBindStatusCallback* This,
    DWORD *grfBINDF,
    BINDINFO *pbindinfo);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_GetBindInfo_Stub(
    IBindStatusCallback* This,
    DWORD *grfBINDF,
    RemBINDINFO *pbindinfo,
    RemSTGMEDIUM *pstgmed);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_OnDataAvailable_Proxy(
    IBindStatusCallback* This,
    DWORD grfBSCF,
    DWORD dwSize,
    FORMATETC *pformatetc,
    STGMEDIUM *pstgmed);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_OnDataAvailable_Stub(
    IBindStatusCallback* This,
    DWORD grfBSCF,
    DWORD dwSize,
    RemFORMATETC *pformatetc,
    RemSTGMEDIUM *pstgmed);
typedef IBindStatusCallbackEx *LPBINDSTATUSCALLBACKEX;
typedef enum __WIDL_urlmon_generated_name_00000005 {
    BINDF2_DISABLEBASICOVERHTTP = 0x1,
    BINDF2_DISABLEAUTOCOOKIEHANDLING = 0x2,
    BINDF2_READ_DATA_GREATER_THAN_4GB = 0x4,
    BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 0x8,
    BINDF2_RESERVED_3 = 0x20000000,
    BINDF2_RESERVED_2 = 0x40000000,
    BINDF2_RESERVED_1 = 0x80000000
} BINDF2;
extern const GUID IID_IBindStatusCallbackEx ;
typedef struct IBindStatusCallbackExVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IBindStatusCallbackEx* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IBindStatusCallbackEx* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IBindStatusCallbackEx* This);
    HRESULT (__attribute__((__stdcall__)) *OnStartBinding)(
        IBindStatusCallbackEx* This,
        DWORD dwReserved,
        IBinding *pib);
    HRESULT (__attribute__((__stdcall__)) *GetPriority)(
        IBindStatusCallbackEx* This,
        LONG *pnPriority);
    HRESULT (__attribute__((__stdcall__)) *OnLowResource)(
        IBindStatusCallbackEx* This,
        DWORD reserved);
    HRESULT (__attribute__((__stdcall__)) *OnProgress)(
        IBindStatusCallbackEx* This,
        ULONG ulProgress,
        ULONG ulProgressMax,
        ULONG ulStatusCode,
        LPCWSTR szStatusText);
    HRESULT (__attribute__((__stdcall__)) *OnStopBinding)(
        IBindStatusCallbackEx* This,
        HRESULT hresult,
        LPCWSTR szError);
    HRESULT (__attribute__((__stdcall__)) *GetBindInfo)(
        IBindStatusCallbackEx* This,
        DWORD *grfBINDF,
        BINDINFO *pbindinfo);
    HRESULT (__attribute__((__stdcall__)) *OnDataAvailable)(
        IBindStatusCallbackEx* This,
        DWORD grfBSCF,
        DWORD dwSize,
        FORMATETC *pformatetc,
        STGMEDIUM *pstgmed);
    HRESULT (__attribute__((__stdcall__)) *OnObjectAvailable)(
        IBindStatusCallbackEx* This,
        const IID* const riid,
        IUnknown *punk);
    HRESULT (__attribute__((__stdcall__)) *GetBindInfoEx)(
        IBindStatusCallbackEx* This,
        DWORD *grfBINDF,
        BINDINFO *pbindinfo,
        DWORD *grfBINDF2,
        DWORD *pdwReserved);
   
} IBindStatusCallbackExVtbl;
struct IBindStatusCallbackEx {
    IBindStatusCallbackExVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(
    IBindStatusCallbackEx* This,
    DWORD *grfBINDF,
    RemBINDINFO *pbindinfo,
    RemSTGMEDIUM *pstgmed,
    DWORD *grfBINDF2,
    DWORD *pdwReserved);
void __attribute__((__stdcall__)) IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallbackEx_GetBindInfoEx_Proxy(
    IBindStatusCallbackEx* This,
    DWORD *grfBINDF,
    BINDINFO *pbindinfo,
    DWORD *grfBINDF2,
    DWORD *pdwReserved);
HRESULT __attribute__((__stdcall__)) IBindStatusCallbackEx_GetBindInfoEx_Stub(
    IBindStatusCallbackEx* This,
    DWORD *grfBINDF,
    RemBINDINFO *pbindinfo,
    RemSTGMEDIUM *pstgmed,
    DWORD *grfBINDF2,
    DWORD *pdwReserved);
typedef IAuthenticate *LPAUTHENTICATION;
extern const GUID IID_IAuthenticate ;
typedef struct IAuthenticateVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IAuthenticate* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IAuthenticate* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IAuthenticate* This);
    HRESULT (__attribute__((__stdcall__)) *Authenticate)(
        IAuthenticate* This,
        HWND *phwnd,
        LPWSTR *pszUsername,
        LPWSTR *pszPassword);
   
} IAuthenticateVtbl;
struct IAuthenticate {
    IAuthenticateVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IAuthenticate_Authenticate_Proxy(
    IAuthenticate* This,
    HWND *phwnd,
    LPWSTR *pszUsername,
    LPWSTR *pszPassword);
void __attribute__((__stdcall__)) IAuthenticate_Authenticate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IHttpNegotiate *LPHTTPNEGOTIATE;
extern const GUID IID_IHttpNegotiate ;
typedef struct IHttpNegotiateVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IHttpNegotiate* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IHttpNegotiate* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IHttpNegotiate* This);
    HRESULT (__attribute__((__stdcall__)) *BeginningTransaction)(
        IHttpNegotiate* This,
        LPCWSTR szURL,
        LPCWSTR szHeaders,
        DWORD dwReserved,
        LPWSTR *pszAdditionalHeaders);
    HRESULT (__attribute__((__stdcall__)) *OnResponse)(
        IHttpNegotiate* This,
        DWORD dwResponseCode,
        LPCWSTR szResponseHeaders,
        LPCWSTR szRequestHeaders,
        LPWSTR *pszAdditionalRequestHeaders);
   
} IHttpNegotiateVtbl;
struct IHttpNegotiate {
    IHttpNegotiateVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IHttpNegotiate_BeginningTransaction_Proxy(
    IHttpNegotiate* This,
    LPCWSTR szURL,
    LPCWSTR szHeaders,
    DWORD dwReserved,
    LPWSTR *pszAdditionalHeaders);
void __attribute__((__stdcall__)) IHttpNegotiate_BeginningTransaction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IHttpNegotiate_OnResponse_Proxy(
    IHttpNegotiate* This,
    DWORD dwResponseCode,
    LPCWSTR szResponseHeaders,
    LPCWSTR szRequestHeaders,
    LPWSTR *pszAdditionalRequestHeaders);
void __attribute__((__stdcall__)) IHttpNegotiate_OnResponse_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IHttpNegotiate2 *LPHTTPNEGOTIATE2;
extern const GUID IID_IHttpNegotiate2 ;
typedef struct IHttpNegotiate2Vtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IHttpNegotiate2* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IHttpNegotiate2* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IHttpNegotiate2* This);
    HRESULT (__attribute__((__stdcall__)) *BeginningTransaction)(
        IHttpNegotiate2* This,
        LPCWSTR szURL,
        LPCWSTR szHeaders,
        DWORD dwReserved,
        LPWSTR *pszAdditionalHeaders);
    HRESULT (__attribute__((__stdcall__)) *OnResponse)(
        IHttpNegotiate2* This,
        DWORD dwResponseCode,
        LPCWSTR szResponseHeaders,
        LPCWSTR szRequestHeaders,
        LPWSTR *pszAdditionalRequestHeaders);
    HRESULT (__attribute__((__stdcall__)) *GetRootSecurityId)(
        IHttpNegotiate2* This,
        BYTE *pbSecurityId,
        DWORD *pcbSecurityId,
        DWORD_PTR dwReserved);
   
} IHttpNegotiate2Vtbl;
struct IHttpNegotiate2 {
    IHttpNegotiate2Vtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IHttpNegotiate2_GetRootSecurityId_Proxy(
    IHttpNegotiate2* This,
    BYTE *pbSecurityId,
    DWORD *pcbSecurityId,
    DWORD_PTR dwReserved);
void __attribute__((__stdcall__)) IHttpNegotiate2_GetRootSecurityId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IBindHost *LPBINDHOST;
extern const GUID IID_IBindHost ;
typedef struct IBindHostVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IBindHost* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IBindHost* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IBindHost* This);
    HRESULT (__attribute__((__stdcall__)) *CreateMoniker)(
        IBindHost* This,
        LPOLESTR szName,
        IBindCtx *pBC,
        IMoniker **ppmk,
        DWORD dwReserved);
    HRESULT (__attribute__((__stdcall__)) *MonikerBindToStorage)(
        IBindHost* This,
        IMoniker *pMk,
        IBindCtx *pBC,
        IBindStatusCallback *pBSC,
        const IID* const riid,
        void **ppvObj);
    HRESULT (__attribute__((__stdcall__)) *MonikerBindToObject)(
        IBindHost* This,
        IMoniker *pMk,
        IBindCtx *pBC,
        IBindStatusCallback *pBSC,
        const IID* const riid,
        void **ppvObj);
   
} IBindHostVtbl;
struct IBindHost {
    IBindHostVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IBindHost_CreateMoniker_Proxy(
    IBindHost* This,
    LPOLESTR szName,
    IBindCtx *pBC,
    IMoniker **ppmk,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IBindHost_CreateMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindHost_RemoteMonikerBindToStorage_Proxy(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID* const riid,
    IUnknown **ppvObj);
void __attribute__((__stdcall__)) IBindHost_RemoteMonikerBindToStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindHost_RemoteMonikerBindToObject_Proxy(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID* const riid,
    IUnknown **ppvObj);
void __attribute__((__stdcall__)) IBindHost_RemoteMonikerBindToObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindHost_MonikerBindToStorage_Proxy(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID* const riid,
    void **ppvObj);
HRESULT __attribute__((__stdcall__)) IBindHost_MonikerBindToStorage_Stub(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID* const riid,
    IUnknown **ppvObj);
HRESULT __attribute__((__stdcall__)) IBindHost_MonikerBindToObject_Proxy(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID* const riid,
    void **ppvObj);
HRESULT __attribute__((__stdcall__)) IBindHost_MonikerBindToObject_Stub(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID* const riid,
    IUnknown **ppvObj);
typedef IWinInetInfo *LPWININETINFO;
extern const GUID IID_IWinInetInfo ;
typedef struct IWinInetInfoVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IWinInetInfo* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IWinInetInfo* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IWinInetInfo* This);
    HRESULT (__attribute__((__stdcall__)) *QueryOption)(
        IWinInetInfo* This,
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD *pcbBuf);
   
} IWinInetInfoVtbl;
struct IWinInetInfo {
    IWinInetInfoVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IWinInetInfo_RemoteQueryOption_Proxy(
    IWinInetInfo* This,
    DWORD dwOption,
    BYTE *pBuffer,
    DWORD *pcbBuf);
void __attribute__((__stdcall__)) IWinInetInfo_RemoteQueryOption_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IWinInetInfo_QueryOption_Proxy(
    IWinInetInfo* This,
    DWORD dwOption,
    LPVOID pBuffer,
    DWORD *pcbBuf);
HRESULT __attribute__((__stdcall__)) IWinInetInfo_QueryOption_Stub(
    IWinInetInfo* This,
    DWORD dwOption,
    BYTE *pBuffer,
    DWORD *pcbBuf);
typedef IWinInetHttpInfo *LPWININETHTTPINFO;
extern const GUID IID_IWinInetHttpInfo ;
typedef struct IWinInetHttpInfoVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IWinInetHttpInfo* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IWinInetHttpInfo* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IWinInetHttpInfo* This);
    HRESULT (__attribute__((__stdcall__)) *QueryOption)(
        IWinInetHttpInfo* This,
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD *pcbBuf);
    HRESULT (__attribute__((__stdcall__)) *QueryInfo)(
        IWinInetHttpInfo* This,
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD *pcbBuf,
        DWORD *pdwFlags,
        DWORD *pdwReserved);
   
} IWinInetHttpInfoVtbl;
struct IWinInetHttpInfo {
    IWinInetHttpInfoVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IWinInetHttpInfo_RemoteQueryInfo_Proxy(
    IWinInetHttpInfo* This,
    DWORD dwOption,
    BYTE *pBuffer,
    DWORD *pcbBuf,
    DWORD *pdwFlags,
    DWORD *pdwReserved);
void __attribute__((__stdcall__)) IWinInetHttpInfo_RemoteQueryInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IWinInetHttpInfo_QueryInfo_Proxy(
    IWinInetHttpInfo* This,
    DWORD dwOption,
    LPVOID pBuffer,
    DWORD *pcbBuf,
    DWORD *pdwFlags,
    DWORD *pdwReserved);
HRESULT __attribute__((__stdcall__)) IWinInetHttpInfo_QueryInfo_Stub(
    IWinInetHttpInfo* This,
    DWORD dwOption,
    BYTE *pBuffer,
    DWORD *pcbBuf,
    DWORD *pdwFlags,
    DWORD *pdwReserved);
typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI;
extern const GUID IID_IWindowForBindingUI ;
typedef struct IWindowForBindingUIVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IWindowForBindingUI* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IWindowForBindingUI* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IWindowForBindingUI* This);
    HRESULT (__attribute__((__stdcall__)) *GetWindow)(
        IWindowForBindingUI* This,
        const GUID* const rguidReason,
        HWND *phwnd);
   
} IWindowForBindingUIVtbl;
struct IWindowForBindingUI {
    IWindowForBindingUIVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IWindowForBindingUI_GetWindow_Proxy(
    IWindowForBindingUI* This,
    const GUID* const rguidReason,
    HWND *phwnd);
void __attribute__((__stdcall__)) IWindowForBindingUI_GetWindow_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IHttpSecurity *LPHTTPSECURITY;
extern const GUID IID_IHttpSecurity ;
typedef struct IHttpSecurityVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IHttpSecurity* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IHttpSecurity* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IHttpSecurity* This);
    HRESULT (__attribute__((__stdcall__)) *GetWindow)(
        IHttpSecurity* This,
        const GUID* const rguidReason,
        HWND *phwnd);
    HRESULT (__attribute__((__stdcall__)) *OnSecurityProblem)(
        IHttpSecurity* This,
        DWORD dwProblem);
   
} IHttpSecurityVtbl;
struct IHttpSecurity {
    IHttpSecurityVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IHttpSecurity_OnSecurityProblem_Proxy(
    IHttpSecurity* This,
    DWORD dwProblem);
void __attribute__((__stdcall__)) IHttpSecurity_OnSecurityProblem_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IPersistMoniker *LPPERSISTMONIKER;
extern const GUID IID_IPersistMoniker ;
typedef struct IPersistMonikerVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IPersistMoniker* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IPersistMoniker* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IPersistMoniker* This);
    HRESULT (__attribute__((__stdcall__)) *GetClassID)(
        IPersistMoniker* This,
        CLSID *pClassID);
    HRESULT (__attribute__((__stdcall__)) *IsDirty)(
        IPersistMoniker* This);
    HRESULT (__attribute__((__stdcall__)) *Load)(
        IPersistMoniker* This,
        BOOL fFullyAvailable,
        IMoniker *pimkName,
        LPBC pibc,
        DWORD grfMode);
    HRESULT (__attribute__((__stdcall__)) *Save)(
        IPersistMoniker* This,
        IMoniker *pimkName,
        LPBC pbc,
        BOOL fRemember);
    HRESULT (__attribute__((__stdcall__)) *SaveCompleted)(
        IPersistMoniker* This,
        IMoniker *pimkName,
        LPBC pibc);
    HRESULT (__attribute__((__stdcall__)) *GetCurMoniker)(
        IPersistMoniker* This,
        IMoniker **ppimkName);
   
} IPersistMonikerVtbl;
struct IPersistMoniker {
    IPersistMonikerVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IPersistMoniker_GetClassID_Proxy(
    IPersistMoniker* This,
    CLSID *pClassID);
void __attribute__((__stdcall__)) IPersistMoniker_GetClassID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistMoniker_IsDirty_Proxy(
    IPersistMoniker* This);
void __attribute__((__stdcall__)) IPersistMoniker_IsDirty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistMoniker_Load_Proxy(
    IPersistMoniker* This,
    BOOL fFullyAvailable,
    IMoniker *pimkName,
    LPBC pibc,
    DWORD grfMode);
void __attribute__((__stdcall__)) IPersistMoniker_Load_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistMoniker_Save_Proxy(
    IPersistMoniker* This,
    IMoniker *pimkName,
    LPBC pbc,
    BOOL fRemember);
void __attribute__((__stdcall__)) IPersistMoniker_Save_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistMoniker_SaveCompleted_Proxy(
    IPersistMoniker* This,
    IMoniker *pimkName,
    LPBC pibc);
void __attribute__((__stdcall__)) IPersistMoniker_SaveCompleted_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistMoniker_GetCurMoniker_Proxy(
    IPersistMoniker* This,
    IMoniker **ppimkName);
void __attribute__((__stdcall__)) IPersistMoniker_GetCurMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IMonikerProp *LPMONIKERPROP;
typedef enum __WIDL_urlmon_generated_name_00000006 {
    MIMETYPEPROP = 0,
    USE_SRC_URL = 1,
    CLASSIDPROP = 2,
    TRUSTEDDOWNLOADPROP = 3,
    POPUPLEVELPROP = 4
} MONIKERPROPERTY;
extern const GUID IID_IMonikerProp ;
typedef struct IMonikerPropVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IMonikerProp* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IMonikerProp* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IMonikerProp* This);
    HRESULT (__attribute__((__stdcall__)) *PutProperty)(
        IMonikerProp* This,
        MONIKERPROPERTY mkp,
        LPCWSTR val);
   
} IMonikerPropVtbl;
struct IMonikerProp {
    IMonikerPropVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IMonikerProp_PutProperty_Proxy(
    IMonikerProp* This,
    MONIKERPROPERTY mkp,
    LPCWSTR val);
void __attribute__((__stdcall__)) IMonikerProp_PutProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IBindProtocol *LPBINDPROTOCOL;
extern const GUID IID_IBindProtocol ;
typedef struct IBindProtocolVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IBindProtocol* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IBindProtocol* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IBindProtocol* This);
    HRESULT (__attribute__((__stdcall__)) *CreateBinding)(
        IBindProtocol* This,
        LPCWSTR szUrl,
        IBindCtx *pbc,
        IBinding **ppb);
   
} IBindProtocolVtbl;
struct IBindProtocol {
    IBindProtocolVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IBindProtocol_CreateBinding_Proxy(
    IBindProtocol* This,
    LPCWSTR szUrl,
    IBindCtx *pbc,
    IBinding **ppb);
void __attribute__((__stdcall__)) IBindProtocol_CreateBinding_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetBindInfo *LPIINTERNETBINDINFO;
typedef enum tagBINDSTRING {
    BINDSTRING_HEADERS = 1,
    BINDSTRING_ACCEPT_MIMES = 2,
    BINDSTRING_EXTRA_URL = 3,
    BINDSTRING_LANGUAGE = 4,
    BINDSTRING_USERNAME = 5,
    BINDSTRING_PASSWORD = 6,
    BINDSTRING_UA_PIXELS = 7,
    BINDSTRING_UA_COLOR = 8,
    BINDSTRING_OS = 9,
    BINDSTRING_USER_AGENT = 10,
    BINDSTRING_ACCEPT_ENCODINGS = 11,
    BINDSTRING_POST_COOKIE = 12,
    BINDSTRING_POST_DATA_MIME = 13,
    BINDSTRING_URL = 14,
    BINDSTRING_IID = 15,
    BINDSTRING_FLAG_BIND_TO_OBJECT = 16,
    BINDSTRING_PTR_BIND_CONTEXT = 17
} BINDSTRING;
extern const GUID IID_IInternetBindInfo ;
typedef struct IInternetBindInfoVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInternetBindInfo* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInternetBindInfo* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInternetBindInfo* This);
    HRESULT (__attribute__((__stdcall__)) *GetBindInfo)(
        IInternetBindInfo* This,
        DWORD *grfBINDF,
        BINDINFO *pbindinfo);
    HRESULT (__attribute__((__stdcall__)) *GetBindString)(
        IInternetBindInfo* This,
        ULONG ulStringType,
        LPOLESTR *ppwzStr,
        ULONG cEl,
        ULONG *pcElFetched);
   
} IInternetBindInfoVtbl;
struct IInternetBindInfo {
    IInternetBindInfoVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IInternetBindInfo_GetBindInfo_Proxy(
    IInternetBindInfo* This,
    DWORD *grfBINDF,
    BINDINFO *pbindinfo);
void __attribute__((__stdcall__)) IInternetBindInfo_GetBindInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetBindInfo_GetBindString_Proxy(
    IInternetBindInfo* This,
    ULONG ulStringType,
    LPOLESTR *ppwzStr,
    ULONG cEl,
    ULONG *pcElFetched);
void __attribute__((__stdcall__)) IInternetBindInfo_GetBindString_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetPriority *LPIINTERNETPRIORITY;
extern const GUID IID_IInternetPriority ;
typedef struct IInternetPriorityVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInternetPriority* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInternetPriority* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInternetPriority* This);
    HRESULT (__attribute__((__stdcall__)) *SetPriority)(
        IInternetPriority* This,
        LONG nPriority);
    HRESULT (__attribute__((__stdcall__)) *GetPriority)(
        IInternetPriority* This,
        LONG *pnPriority);
   
} IInternetPriorityVtbl;
struct IInternetPriority {
    IInternetPriorityVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IInternetPriority_SetPriority_Proxy(
    IInternetPriority* This,
    LONG nPriority);
void __attribute__((__stdcall__)) IInternetPriority_SetPriority_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetPriority_GetPriority_Proxy(
    IInternetPriority* This,
    LONG *pnPriority);
void __attribute__((__stdcall__)) IInternetPriority_GetPriority_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;
typedef enum _tagPI_FLAGS {
    PI_PARSE_URL = 0x1,
    PI_FILTER_MODE = 0x2,
    PI_FORCE_ASYNC = 0x4,
    PI_USE_WORKERTHREAD = 0x8,
    PI_MIMEVERIFICATION = 0x10,
    PI_CLSIDLOOKUP = 0x20,
    PI_DATAPROGRESS = 0x40,
    PI_SYNCHRONOUS = 0x80,
    PI_APARTMENTTHREADED = 0x100,
    PI_CLASSINSTALL = 0x200,
    PD_FORCE_SWITCH = 0x10000
} PI_FLAGS;
typedef struct _tagPROTOCOLDATA {
    DWORD grfFlags;
    DWORD dwState;
    LPVOID pData;
    ULONG cbData;
} PROTOCOLDATA;
extern const GUID IID_IInternetProtocolRoot ;
typedef struct IInternetProtocolRootVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInternetProtocolRoot* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInternetProtocolRoot* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInternetProtocolRoot* This);
    HRESULT (__attribute__((__stdcall__)) *Start)(
        IInternetProtocolRoot* This,
        LPCWSTR szUrl,
        IInternetProtocolSink *pOIProtSink,
        IInternetBindInfo *pOIBindInfo,
        DWORD grfPI,
        HANDLE_PTR dwReserved);
    HRESULT (__attribute__((__stdcall__)) *Continue)(
        IInternetProtocolRoot* This,
        PROTOCOLDATA *pProtocolData);
    HRESULT (__attribute__((__stdcall__)) *Abort)(
        IInternetProtocolRoot* This,
        HRESULT hrReason,
        DWORD dwOptions);
    HRESULT (__attribute__((__stdcall__)) *Terminate)(
        IInternetProtocolRoot* This,
        DWORD dwOptions);
    HRESULT (__attribute__((__stdcall__)) *Suspend)(
        IInternetProtocolRoot* This);
    HRESULT (__attribute__((__stdcall__)) *Resume)(
        IInternetProtocolRoot* This);
   
} IInternetProtocolRootVtbl;
struct IInternetProtocolRoot {
    IInternetProtocolRootVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IInternetProtocolRoot_Start_Proxy(
    IInternetProtocolRoot* This,
    LPCWSTR szUrl,
    IInternetProtocolSink *pOIProtSink,
    IInternetBindInfo *pOIBindInfo,
    DWORD grfPI,
    HANDLE_PTR dwReserved);
void __attribute__((__stdcall__)) IInternetProtocolRoot_Start_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolRoot_Continue_Proxy(
    IInternetProtocolRoot* This,
    PROTOCOLDATA *pProtocolData);
void __attribute__((__stdcall__)) IInternetProtocolRoot_Continue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolRoot_Abort_Proxy(
    IInternetProtocolRoot* This,
    HRESULT hrReason,
    DWORD dwOptions);
void __attribute__((__stdcall__)) IInternetProtocolRoot_Abort_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolRoot_Terminate_Proxy(
    IInternetProtocolRoot* This,
    DWORD dwOptions);
void __attribute__((__stdcall__)) IInternetProtocolRoot_Terminate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolRoot_Suspend_Proxy(
    IInternetProtocolRoot* This);
void __attribute__((__stdcall__)) IInternetProtocolRoot_Suspend_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolRoot_Resume_Proxy(
    IInternetProtocolRoot* This);
void __attribute__((__stdcall__)) IInternetProtocolRoot_Resume_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;
extern const GUID IID_IInternetProtocolSink ;
typedef struct IInternetProtocolSinkVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInternetProtocolSink* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInternetProtocolSink* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInternetProtocolSink* This);
    HRESULT (__attribute__((__stdcall__)) *Switch)(
        IInternetProtocolSink* This,
        PROTOCOLDATA *pProtocolData);
    HRESULT (__attribute__((__stdcall__)) *ReportProgress)(
        IInternetProtocolSink* This,
        ULONG ulStatusCode,
        LPCWSTR szStatusText);
    HRESULT (__attribute__((__stdcall__)) *ReportData)(
        IInternetProtocolSink* This,
        DWORD grfBSCF,
        ULONG ulProgress,
        ULONG ulProgressMax);
    HRESULT (__attribute__((__stdcall__)) *ReportResult)(
        IInternetProtocolSink* This,
        HRESULT hrResult,
        DWORD dwError,
        LPCWSTR szResult);
   
} IInternetProtocolSinkVtbl;
struct IInternetProtocolSink {
    IInternetProtocolSinkVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IInternetProtocolSink_Switch_Proxy(
    IInternetProtocolSink* This,
    PROTOCOLDATA *pProtocolData);
void __attribute__((__stdcall__)) IInternetProtocolSink_Switch_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolSink_ReportProgress_Proxy(
    IInternetProtocolSink* This,
    ULONG ulStatusCode,
    LPCWSTR szStatusText);
void __attribute__((__stdcall__)) IInternetProtocolSink_ReportProgress_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolSink_ReportData_Proxy(
    IInternetProtocolSink* This,
    DWORD grfBSCF,
    ULONG ulProgress,
    ULONG ulProgressMax);
void __attribute__((__stdcall__)) IInternetProtocolSink_ReportData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolSink_ReportResult_Proxy(
    IInternetProtocolSink* This,
    HRESULT hrResult,
    DWORD dwError,
    LPCWSTR szResult);
void __attribute__((__stdcall__)) IInternetProtocolSink_ReportResult_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetProtocol *LPIINTERNETPROTOCOL;
extern const GUID IID_IInternetProtocol ;
typedef struct IInternetProtocolVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInternetProtocol* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInternetProtocol* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInternetProtocol* This);
    HRESULT (__attribute__((__stdcall__)) *Start)(
        IInternetProtocol* This,
        LPCWSTR szUrl,
        IInternetProtocolSink *pOIProtSink,
        IInternetBindInfo *pOIBindInfo,
        DWORD grfPI,
        HANDLE_PTR dwReserved);
    HRESULT (__attribute__((__stdcall__)) *Continue)(
        IInternetProtocol* This,
        PROTOCOLDATA *pProtocolData);
    HRESULT (__attribute__((__stdcall__)) *Abort)(
        IInternetProtocol* This,
        HRESULT hrReason,
        DWORD dwOptions);
    HRESULT (__attribute__((__stdcall__)) *Terminate)(
        IInternetProtocol* This,
        DWORD dwOptions);
    HRESULT (__attribute__((__stdcall__)) *Suspend)(
        IInternetProtocol* This);
    HRESULT (__attribute__((__stdcall__)) *Resume)(
        IInternetProtocol* This);
    HRESULT (__attribute__((__stdcall__)) *Read)(
        IInternetProtocol* This,
        void *pv,
        ULONG cb,
        ULONG *pcbRead);
    HRESULT (__attribute__((__stdcall__)) *Seek)(
        IInternetProtocol* This,
        LARGE_INTEGER dlibMove,
        DWORD dwOrigin,
        ULARGE_INTEGER *plibNewPosition);
    HRESULT (__attribute__((__stdcall__)) *LockRequest)(
        IInternetProtocol* This,
        DWORD dwOptions);
    HRESULT (__attribute__((__stdcall__)) *UnlockRequest)(
        IInternetProtocol* This);
   
} IInternetProtocolVtbl;
struct IInternetProtocol {
    IInternetProtocolVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IInternetProtocol_Read_Proxy(
    IInternetProtocol* This,
    void *pv,
    ULONG cb,
    ULONG *pcbRead);
void __attribute__((__stdcall__)) IInternetProtocol_Read_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocol_Seek_Proxy(
    IInternetProtocol* This,
    LARGE_INTEGER dlibMove,
    DWORD dwOrigin,
    ULARGE_INTEGER *plibNewPosition);
void __attribute__((__stdcall__)) IInternetProtocol_Seek_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocol_LockRequest_Proxy(
    IInternetProtocol* This,
    DWORD dwOptions);
void __attribute__((__stdcall__)) IInternetProtocol_LockRequest_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocol_UnlockRequest_Proxy(
    IInternetProtocol* This);
void __attribute__((__stdcall__)) IInternetProtocol_UnlockRequest_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;
typedef enum _tagPARSEACTION {
    PARSE_CANONICALIZE = 1,
    PARSE_FRIENDLY = 2,
    PARSE_SECURITY_URL = 3,
    PARSE_ROOTDOCUMENT = 4,
    PARSE_DOCUMENT = 5,
    PARSE_ANCHOR = 6,
    PARSE_ENCODE = 7,
    PARSE_DECODE = 8,
    PARSE_PATH_FROM_URL = 9,
    PARSE_URL_FROM_PATH = 10,
    PARSE_MIME = 11,
    PARSE_SERVER = 12,
    PARSE_SCHEMA = 13,
    PARSE_SITE = 14,
    PARSE_DOMAIN = 15,
    PARSE_LOCATION = 16,
    PARSE_SECURITY_DOMAIN = 17,
    PARSE_ESCAPE = 18,
    PARSE_UNESCAPE = 19
} PARSEACTION;
typedef enum _tagPSUACTION {
    PSU_DEFAULT = 1,
    PSU_SECURITY_URL_ONLY = 2
} PSUACTION;
typedef enum _tagQUERYOPTION {
    QUERY_EXPIRATION_DATE = 1,
    QUERY_TIME_OF_LAST_CHANGE = 2,
    QUERY_CONTENT_ENCODING = 3,
    QUERY_CONTENT_TYPE = 4,
    QUERY_REFRESH = 5,
    QUERY_RECOMBINE = 6,
    QUERY_CAN_NAVIGATE = 7,
    QUERY_USES_NETWORK = 8,
    QUERY_IS_CACHED = 9,
    QUERY_IS_INSTALLEDENTRY = 10,
    QUERY_IS_CACHED_OR_MAPPED = 11,
    QUERY_USES_CACHE = 12,
    QUERY_IS_SECURE = 13,
    QUERY_IS_SAFE = 14,
    QUERY_USES_HISTORYFOLDER = 15
} QUERYOPTION;
extern const GUID IID_IInternetProtocolInfo ;
typedef struct IInternetProtocolInfoVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInternetProtocolInfo* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInternetProtocolInfo* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInternetProtocolInfo* This);
    HRESULT (__attribute__((__stdcall__)) *ParseUrl)(
        IInternetProtocolInfo* This,
        LPCWSTR pwzUrl,
        PARSEACTION ParseAction,
        DWORD dwParseFlags,
        LPWSTR pwzResult,
        DWORD cchResult,
        DWORD *pcchResult,
        DWORD dwReserved);
    HRESULT (__attribute__((__stdcall__)) *CombineUrl)(
        IInternetProtocolInfo* This,
        LPCWSTR pwzBaseUrl,
        LPCWSTR pwzRelativeUrl,
        DWORD dwCombineFlags,
        LPWSTR pwzResult,
        DWORD cchResult,
        DWORD *pcchResult,
        DWORD dwReserved);
    HRESULT (__attribute__((__stdcall__)) *CompareUrl)(
        IInternetProtocolInfo* This,
        LPCWSTR pwzUrl1,
        LPCWSTR pwzUrl2,
        DWORD dwCompareFlags);
    HRESULT (__attribute__((__stdcall__)) *QueryInfo)(
        IInternetProtocolInfo* This,
        LPCWSTR pwzUrl,
        QUERYOPTION OueryOption,
        DWORD dwQueryFlags,
        LPVOID pBuffer,
        DWORD cbBuffer,
        DWORD *pcbBuf,
        DWORD dwReserved);
   
} IInternetProtocolInfoVtbl;
struct IInternetProtocolInfo {
    IInternetProtocolInfoVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IInternetProtocolInfo_ParseUrl_Proxy(
    IInternetProtocolInfo* This,
    LPCWSTR pwzUrl,
    PARSEACTION ParseAction,
    DWORD dwParseFlags,
    LPWSTR pwzResult,
    DWORD cchResult,
    DWORD *pcchResult,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetProtocolInfo_ParseUrl_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolInfo_CombineUrl_Proxy(
    IInternetProtocolInfo* This,
    LPCWSTR pwzBaseUrl,
    LPCWSTR pwzRelativeUrl,
    DWORD dwCombineFlags,
    LPWSTR pwzResult,
    DWORD cchResult,
    DWORD *pcchResult,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetProtocolInfo_CombineUrl_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolInfo_CompareUrl_Proxy(
    IInternetProtocolInfo* This,
    LPCWSTR pwzUrl1,
    LPCWSTR pwzUrl2,
    DWORD dwCompareFlags);
void __attribute__((__stdcall__)) IInternetProtocolInfo_CompareUrl_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolInfo_QueryInfo_Proxy(
    IInternetProtocolInfo* This,
    LPCWSTR pwzUrl,
    QUERYOPTION OueryOption,
    DWORD dwQueryFlags,
    LPVOID pBuffer,
    DWORD cbBuffer,
    DWORD *pcbBuf,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetProtocolInfo_QueryInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetSession *LPIINTERNETSESSION;
typedef enum _tagOIBDG_FLAGS {
    OIBDG_APARTMENTTHREADED = 0x100,
    OIBDG_DATAONLY = 0x1000
} OIBDG_FLAGS;
extern const GUID IID_IInternetSession ;
typedef struct IInternetSessionVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInternetSession* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInternetSession* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInternetSession* This);
    HRESULT (__attribute__((__stdcall__)) *RegisterNameSpace)(
        IInternetSession* This,
        IClassFactory *pCF,
        const CLSID* const rclsid,
        LPCWSTR pwzProtocol,
        ULONG cPatterns,
        const LPCWSTR *ppwzPatterns,
        DWORD dwReserved);
    HRESULT (__attribute__((__stdcall__)) *UnregisterNameSpace)(
        IInternetSession* This,
        IClassFactory *pCF,
        LPCWSTR pszProtocol);
    HRESULT (__attribute__((__stdcall__)) *RegisterMimeFilter)(
        IInternetSession* This,
        IClassFactory *pCF,
        const CLSID* const rclsid,
        LPCWSTR pwzType);
    HRESULT (__attribute__((__stdcall__)) *UnregisterMimeFilter)(
        IInternetSession* This,
        IClassFactory *pCF,
        LPCWSTR pwzType);
    HRESULT (__attribute__((__stdcall__)) *CreateBinding)(
        IInternetSession* This,
        LPBC pBC,
        LPCWSTR szUrl,
        IUnknown *pUnkOuter,
        IUnknown **ppUnk,
        IInternetProtocol **ppOInetProt,
        DWORD dwOption);
    HRESULT (__attribute__((__stdcall__)) *SetSessionOption)(
        IInternetSession* This,
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD dwBufferLength,
        DWORD dwReserved);
   
} IInternetSessionVtbl;
struct IInternetSession {
    IInternetSessionVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IInternetSession_RegisterNameSpace_Proxy(
    IInternetSession* This,
    IClassFactory *pCF,
    const CLSID* const rclsid,
    LPCWSTR pwzProtocol,
    ULONG cPatterns,
    const LPCWSTR *ppwzPatterns,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetSession_RegisterNameSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSession_UnregisterNameSpace_Proxy(
    IInternetSession* This,
    IClassFactory *pCF,
    LPCWSTR pszProtocol);
void __attribute__((__stdcall__)) IInternetSession_UnregisterNameSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSession_RegisterMimeFilter_Proxy(
    IInternetSession* This,
    IClassFactory *pCF,
    const CLSID* const rclsid,
    LPCWSTR pwzType);
void __attribute__((__stdcall__)) IInternetSession_RegisterMimeFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSession_UnregisterMimeFilter_Proxy(
    IInternetSession* This,
    IClassFactory *pCF,
    LPCWSTR pwzType);
void __attribute__((__stdcall__)) IInternetSession_UnregisterMimeFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSession_CreateBinding_Proxy(
    IInternetSession* This,
    LPBC pBC,
    LPCWSTR szUrl,
    IUnknown *pUnkOuter,
    IUnknown **ppUnk,
    IInternetProtocol **ppOInetProt,
    DWORD dwOption);
void __attribute__((__stdcall__)) IInternetSession_CreateBinding_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSession_SetSessionOption_Proxy(
    IInternetSession* This,
    DWORD dwOption,
    LPVOID pBuffer,
    DWORD dwBufferLength,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetSession_SetSessionOption_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IInternetSecurityMgrSite ;
typedef struct IInternetSecurityMgrSiteVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInternetSecurityMgrSite* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInternetSecurityMgrSite* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInternetSecurityMgrSite* This);
    HRESULT (__attribute__((__stdcall__)) *GetWindow)(
        IInternetSecurityMgrSite* This,
        HWND *phwnd);
    HRESULT (__attribute__((__stdcall__)) *EnableModeless)(
        IInternetSecurityMgrSite* This,
        BOOL fEnable);
   
} IInternetSecurityMgrSiteVtbl;
struct IInternetSecurityMgrSite {
    IInternetSecurityMgrSiteVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IInternetSecurityMgrSite_GetWindow_Proxy(
    IInternetSecurityMgrSite* This,
    HWND *phwnd);
void __attribute__((__stdcall__)) IInternetSecurityMgrSite_GetWindow_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSecurityMgrSite_EnableModeless_Proxy(
    IInternetSecurityMgrSite* This,
    BOOL fEnable);
void __attribute__((__stdcall__)) IInternetSecurityMgrSite_EnableModeless_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef enum __WIDL_urlmon_generated_name_00000007 {
    PUAF_DEFAULT = 0x0,
    PUAF_NOUI = 0x1,
    PUAF_ISFILE = 0x2,
    PUAF_WARN_IF_DENIED = 0x4,
    PUAF_FORCEUI_FOREGROUND = 0x8,
    PUAF_CHECK_TIPS = 0x10
} PUAF;
typedef enum __WIDL_urlmon_generated_name_00000008 {
    SZM_CREATE = 0x0,
    SZM_DELETE = 0x1
} SZM_FLAGS;
extern const GUID IID_IInternetSecurityManager ;
typedef struct IInternetSecurityManagerVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInternetSecurityManager* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInternetSecurityManager* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInternetSecurityManager* This);
    HRESULT (__attribute__((__stdcall__)) *SetSecuritySite)(
        IInternetSecurityManager* This,
        IInternetSecurityMgrSite *pSite);
    HRESULT (__attribute__((__stdcall__)) *GetSecuritySite)(
        IInternetSecurityManager* This,
        IInternetSecurityMgrSite **ppSite);
    HRESULT (__attribute__((__stdcall__)) *MapUrlToZone)(
        IInternetSecurityManager* This,
        LPCWSTR pwszUrl,
        DWORD *pdwZone,
        DWORD dwFlags);
    HRESULT (__attribute__((__stdcall__)) *GetSecurityId)(
        IInternetSecurityManager* This,
        LPCWSTR pwszUrl,
        BYTE *pbSecurityId,
        DWORD *pcbSecurityId,
        DWORD_PTR dwReserved);
    HRESULT (__attribute__((__stdcall__)) *ProcessUrlAction)(
        IInternetSecurityManager* This,
        LPCWSTR pwszUrl,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwFlags,
        DWORD dwReserved);
    HRESULT (__attribute__((__stdcall__)) *QueryCustomPolicy)(
        IInternetSecurityManager* This,
        LPCWSTR pwszUrl,
        const GUID* const guidKey,
        BYTE **ppPolicy,
        DWORD *pcbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwReserved);
    HRESULT (__attribute__((__stdcall__)) *SetZoneMapping)(
        IInternetSecurityManager* This,
        DWORD dwZone,
        LPCWSTR lpszPattern,
        DWORD dwFlags);
    HRESULT (__attribute__((__stdcall__)) *GetZoneMappings)(
        IInternetSecurityManager* This,
        DWORD dwZone,
        IEnumString **ppenumString,
        DWORD dwFlags);
   
} IInternetSecurityManagerVtbl;
struct IInternetSecurityManager {
    IInternetSecurityManagerVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IInternetSecurityManager_SetSecuritySite_Proxy(
    IInternetSecurityManager* This,
    IInternetSecurityMgrSite *pSite);
void __attribute__((__stdcall__)) IInternetSecurityManager_SetSecuritySite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSecurityManager_GetSecuritySite_Proxy(
    IInternetSecurityManager* This,
    IInternetSecurityMgrSite **ppSite);
void __attribute__((__stdcall__)) IInternetSecurityManager_GetSecuritySite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSecurityManager_MapUrlToZone_Proxy(
    IInternetSecurityManager* This,
    LPCWSTR pwszUrl,
    DWORD *pdwZone,
    DWORD dwFlags);
void __attribute__((__stdcall__)) IInternetSecurityManager_MapUrlToZone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSecurityManager_GetSecurityId_Proxy(
    IInternetSecurityManager* This,
    LPCWSTR pwszUrl,
    BYTE *pbSecurityId,
    DWORD *pcbSecurityId,
    DWORD_PTR dwReserved);
void __attribute__((__stdcall__)) IInternetSecurityManager_GetSecurityId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSecurityManager_ProcessUrlAction_Proxy(
    IInternetSecurityManager* This,
    LPCWSTR pwszUrl,
    DWORD dwAction,
    BYTE *pPolicy,
    DWORD cbPolicy,
    BYTE *pContext,
    DWORD cbContext,
    DWORD dwFlags,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetSecurityManager_ProcessUrlAction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSecurityManager_QueryCustomPolicy_Proxy(
    IInternetSecurityManager* This,
    LPCWSTR pwszUrl,
    const GUID* const guidKey,
    BYTE **ppPolicy,
    DWORD *pcbPolicy,
    BYTE *pContext,
    DWORD cbContext,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetSecurityManager_QueryCustomPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSecurityManager_SetZoneMapping_Proxy(
    IInternetSecurityManager* This,
    DWORD dwZone,
    LPCWSTR lpszPattern,
    DWORD dwFlags);
void __attribute__((__stdcall__)) IInternetSecurityManager_SetZoneMapping_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSecurityManager_GetZoneMappings_Proxy(
    IInternetSecurityManager* This,
    DWORD dwZone,
    IEnumString **ppenumString,
    DWORD dwFlags);
void __attribute__((__stdcall__)) IInternetSecurityManager_GetZoneMappings_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IInternetHostSecurityManager ;
typedef struct IInternetHostSecurityManagerVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInternetHostSecurityManager* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInternetHostSecurityManager* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInternetHostSecurityManager* This);
    HRESULT (__attribute__((__stdcall__)) *GetSecurityId)(
        IInternetHostSecurityManager* This,
        BYTE *pbSecurityId,
        DWORD *pcbSecurityId,
        DWORD_PTR dwReserved);
    HRESULT (__attribute__((__stdcall__)) *ProcessUrlAction)(
        IInternetHostSecurityManager* This,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwFlags,
        DWORD dwReserved);
    HRESULT (__attribute__((__stdcall__)) *QueryCustomPolicy)(
        IInternetHostSecurityManager* This,
        const GUID* const guidKey,
        BYTE **ppPolicy,
        DWORD *pcbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwReserved);
   
} IInternetHostSecurityManagerVtbl;
struct IInternetHostSecurityManager {
    IInternetHostSecurityManagerVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IInternetHostSecurityManager_GetSecurityId_Proxy(
    IInternetHostSecurityManager* This,
    BYTE *pbSecurityId,
    DWORD *pcbSecurityId,
    DWORD_PTR dwReserved);
void __attribute__((__stdcall__)) IInternetHostSecurityManager_GetSecurityId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetHostSecurityManager_ProcessUrlAction_Proxy(
    IInternetHostSecurityManager* This,
    DWORD dwAction,
    BYTE *pPolicy,
    DWORD cbPolicy,
    BYTE *pContext,
    DWORD cbContext,
    DWORD dwFlags,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetHostSecurityManager_ProcessUrlAction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetHostSecurityManager_QueryCustomPolicy_Proxy(
    IInternetHostSecurityManager* This,
    const GUID* const guidKey,
    BYTE **ppPolicy,
    DWORD *pcbPolicy,
    BYTE *pContext,
    DWORD cbContext,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetHostSecurityManager_QueryCustomPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetZoneManager *LPURLZONEMANAGER;
typedef enum tagURLZONE {
    URLZONE_INVALID = -1,
    URLZONE_PREDEFINED_MIN = 0,
    URLZONE_LOCAL_MACHINE = 0,
    URLZONE_INTRANET = 1,
    URLZONE_TRUSTED = 2,
    URLZONE_INTERNET = 3,
    URLZONE_UNTRUSTED = 4,
    URLZONE_PREDEFINED_MAX = 999,
    URLZONE_USER_MIN = 1000,
    URLZONE_USER_MAX = 10000
} URLZONE;
typedef enum tagURLTEMPLATE {
    URLTEMPLATE_CUSTOM = 0x0,
    URLTEMPLATE_PREDEFINED_MIN = 0x10000,
    URLTEMPLATE_LOW = 0x10000,
    URLTEMPLATE_MEDLOW = 0x10500,
    URLTEMPLATE_MEDIUM = 0x11000,
    URLTEMPLATE_MEDHIGH = 0x11500,
    URLTEMPLATE_HIGH = 0x12000,
    URLTEMPLATE_PREDEFINED_MAX = 0x20000
} URLTEMPLATE;
typedef enum __WIDL_urlmon_generated_name_00000009 {
    ZAFLAGS_CUSTOM_EDIT = 0x1,
    ZAFLAGS_ADD_SITES = 0x2,
    ZAFLAGS_REQUIRE_VERIFICATION = 0x4,
    ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,
    ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,
    ZAFLAGS_NO_UI = 0x20,
    ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,
    ZAFLAGS_UNC_AS_INTRANET = 0x80,
    ZAFLAGS_DETECT_INTRANET = 0x100,
    ZAFLAGS_USE_LOCKED_ZONES = 0x10000,
    ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 0x20000,
    ZAFLAGS_NO_CACHE = 0x40000
} ZAFLAGS;
enum {
    MAX_ZONE_PATH = 260,
    MAX_ZONE_DESCRIPTION = 200
};
typedef struct _ZONEATTRIBUTES {
    ULONG cbSize;
    WCHAR szDisplayName[260];
    WCHAR szDescription[200];
    WCHAR szIconPath[260];
    DWORD dwTemplateMinLevel;
    DWORD dwTemplateRecommended;
    DWORD dwTemplateCurrentLevel;
    DWORD dwFlags;
} ZONEATTRIBUTES;
typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;
typedef enum _URLZONEREG {
    URLZONEREG_DEFAULT = 0,
    URLZONEREG_HKLM = 1,
    URLZONEREG_HKCU = 2
} URLZONEREG;
extern const GUID IID_IInternetZoneManager ;
typedef struct IInternetZoneManagerVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInternetZoneManager* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInternetZoneManager* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInternetZoneManager* This);
    HRESULT (__attribute__((__stdcall__)) *GetZoneAttributes)(
        IInternetZoneManager* This,
        DWORD dwZone,
        ZONEATTRIBUTES *pZoneAttributes);
    HRESULT (__attribute__((__stdcall__)) *SetZoneAttributes)(
        IInternetZoneManager* This,
        DWORD dwZone,
        ZONEATTRIBUTES *pZoneAttributes);
    HRESULT (__attribute__((__stdcall__)) *GetZoneCustomPolicy)(
        IInternetZoneManager* This,
        DWORD dwZone,
        const GUID* const guidKey,
        BYTE **ppPolicy,
        DWORD *pcbPolicy,
        URLZONEREG ulrZoneReg);
    HRESULT (__attribute__((__stdcall__)) *SetZoneCustomPolicy)(
        IInternetZoneManager* This,
        DWORD dwZone,
        const GUID* const guidKey,
        BYTE *ppPolicy,
        DWORD pcbPolicy,
        URLZONEREG ulrZoneReg);
    HRESULT (__attribute__((__stdcall__)) *GetZoneActionPolicy)(
        IInternetZoneManager* This,
        DWORD dwZone,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);
    HRESULT (__attribute__((__stdcall__)) *SetZoneActionPolicy)(
        IInternetZoneManager* This,
        DWORD dwZone,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);
    HRESULT (__attribute__((__stdcall__)) *PromptAction)(
        IInternetZoneManager* This,
        DWORD dwAction,
        HWND hwndParent,
        LPCWSTR pwszUrl,
        LPCWSTR pwszText,
        DWORD dwPromptFlags);
    HRESULT (__attribute__((__stdcall__)) *LogAction)(
        IInternetZoneManager* This,
        DWORD dwAction,
        LPCWSTR pwszUrl,
        LPCWSTR pwszText,
        DWORD dwLogFlags);
    HRESULT (__attribute__((__stdcall__)) *CreateZoneEnumerator)(
        IInternetZoneManager* This,
        DWORD *pdwEnum,
        DWORD *pdwCount,
        DWORD dwFlags);
    HRESULT (__attribute__((__stdcall__)) *GetZoneAt)(
        IInternetZoneManager* This,
        DWORD dwEnum,
        DWORD dwIndex,
        DWORD *pdwZone);
    HRESULT (__attribute__((__stdcall__)) *DestroyZoneEnumerator)(
        IInternetZoneManager* This,
        DWORD dwEnum);
    HRESULT (__attribute__((__stdcall__)) *CopyTemplatePoliciesToZone)(
        IInternetZoneManager* This,
        DWORD dwTemplate,
        DWORD dwZone,
        DWORD dwReserved);
   
} IInternetZoneManagerVtbl;
struct IInternetZoneManager {
    IInternetZoneManagerVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_GetZoneAttributes_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    ZONEATTRIBUTES *pZoneAttributes);
void __attribute__((__stdcall__)) IInternetZoneManager_GetZoneAttributes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_SetZoneAttributes_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    ZONEATTRIBUTES *pZoneAttributes);
void __attribute__((__stdcall__)) IInternetZoneManager_SetZoneAttributes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_GetZoneCustomPolicy_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    const GUID* const guidKey,
    BYTE **ppPolicy,
    DWORD *pcbPolicy,
    URLZONEREG ulrZoneReg);
void __attribute__((__stdcall__)) IInternetZoneManager_GetZoneCustomPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_SetZoneCustomPolicy_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    const GUID* const guidKey,
    BYTE *ppPolicy,
    DWORD pcbPolicy,
    URLZONEREG ulrZoneReg);
void __attribute__((__stdcall__)) IInternetZoneManager_SetZoneCustomPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_GetZoneActionPolicy_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    DWORD dwAction,
    BYTE *pPolicy,
    DWORD cbPolicy,
    URLZONEREG urlZoneReg);
void __attribute__((__stdcall__)) IInternetZoneManager_GetZoneActionPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_SetZoneActionPolicy_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    DWORD dwAction,
    BYTE *pPolicy,
    DWORD cbPolicy,
    URLZONEREG urlZoneReg);
void __attribute__((__stdcall__)) IInternetZoneManager_SetZoneActionPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_PromptAction_Proxy(
    IInternetZoneManager* This,
    DWORD dwAction,
    HWND hwndParent,
    LPCWSTR pwszUrl,
    LPCWSTR pwszText,
    DWORD dwPromptFlags);
void __attribute__((__stdcall__)) IInternetZoneManager_PromptAction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_LogAction_Proxy(
    IInternetZoneManager* This,
    DWORD dwAction,
    LPCWSTR pwszUrl,
    LPCWSTR pwszText,
    DWORD dwLogFlags);
void __attribute__((__stdcall__)) IInternetZoneManager_LogAction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_CreateZoneEnumerator_Proxy(
    IInternetZoneManager* This,
    DWORD *pdwEnum,
    DWORD *pdwCount,
    DWORD dwFlags);
void __attribute__((__stdcall__)) IInternetZoneManager_CreateZoneEnumerator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_GetZoneAt_Proxy(
    IInternetZoneManager* This,
    DWORD dwEnum,
    DWORD dwIndex,
    DWORD *pdwZone);
void __attribute__((__stdcall__)) IInternetZoneManager_GetZoneAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_DestroyZoneEnumerator_Proxy(
    IInternetZoneManager* This,
    DWORD dwEnum);
void __attribute__((__stdcall__)) IInternetZoneManager_DestroyZoneEnumerator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_CopyTemplatePoliciesToZone_Proxy(
    IInternetZoneManager* This,
    DWORD dwTemplate,
    DWORD dwZone,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetZoneManager_CopyTemplatePoliciesToZone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IInternetZoneManagerEx ;
typedef struct IInternetZoneManagerExVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInternetZoneManagerEx* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInternetZoneManagerEx* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInternetZoneManagerEx* This);
    HRESULT (__attribute__((__stdcall__)) *GetZoneAttributes)(
        IInternetZoneManagerEx* This,
        DWORD dwZone,
        ZONEATTRIBUTES *pZoneAttributes);
    HRESULT (__attribute__((__stdcall__)) *SetZoneAttributes)(
        IInternetZoneManagerEx* This,
        DWORD dwZone,
        ZONEATTRIBUTES *pZoneAttributes);
    HRESULT (__attribute__((__stdcall__)) *GetZoneCustomPolicy)(
        IInternetZoneManagerEx* This,
        DWORD dwZone,
        const GUID* const guidKey,
        BYTE **ppPolicy,
        DWORD *pcbPolicy,
        URLZONEREG ulrZoneReg);
    HRESULT (__attribute__((__stdcall__)) *SetZoneCustomPolicy)(
        IInternetZoneManagerEx* This,
        DWORD dwZone,
        const GUID* const guidKey,
        BYTE *ppPolicy,
        DWORD pcbPolicy,
        URLZONEREG ulrZoneReg);
    HRESULT (__attribute__((__stdcall__)) *GetZoneActionPolicy)(
        IInternetZoneManagerEx* This,
        DWORD dwZone,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);
    HRESULT (__attribute__((__stdcall__)) *SetZoneActionPolicy)(
        IInternetZoneManagerEx* This,
        DWORD dwZone,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);
    HRESULT (__attribute__((__stdcall__)) *PromptAction)(
        IInternetZoneManagerEx* This,
        DWORD dwAction,
        HWND hwndParent,
        LPCWSTR pwszUrl,
        LPCWSTR pwszText,
        DWORD dwPromptFlags);
    HRESULT (__attribute__((__stdcall__)) *LogAction)(
        IInternetZoneManagerEx* This,
        DWORD dwAction,
        LPCWSTR pwszUrl,
        LPCWSTR pwszText,
        DWORD dwLogFlags);
    HRESULT (__attribute__((__stdcall__)) *CreateZoneEnumerator)(
        IInternetZoneManagerEx* This,
        DWORD *pdwEnum,
        DWORD *pdwCount,
        DWORD dwFlags);
    HRESULT (__attribute__((__stdcall__)) *GetZoneAt)(
        IInternetZoneManagerEx* This,
        DWORD dwEnum,
        DWORD dwIndex,
        DWORD *pdwZone);
    HRESULT (__attribute__((__stdcall__)) *DestroyZoneEnumerator)(
        IInternetZoneManagerEx* This,
        DWORD dwEnum);
    HRESULT (__attribute__((__stdcall__)) *CopyTemplatePoliciesToZone)(
        IInternetZoneManagerEx* This,
        DWORD dwTemplate,
        DWORD dwZone,
        DWORD dwReserved);
    HRESULT (__attribute__((__stdcall__)) *GetZoneActionPolicyEx)(
        IInternetZoneManagerEx* This,
        DWORD dwZone,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg,
        DWORD dwFlags);
    HRESULT (__attribute__((__stdcall__)) *SetZoneActionPolicyEx)(
        IInternetZoneManagerEx* This,
        DWORD dwZone,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg,
        DWORD dwFlags);
   
} IInternetZoneManagerExVtbl;
struct IInternetZoneManagerEx {
    IInternetZoneManagerExVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IInternetZoneManagerEx_GetZoneActionPolicyEx_Proxy(
    IInternetZoneManagerEx* This,
    DWORD dwZone,
    DWORD dwAction,
    BYTE *pPolicy,
    DWORD cbPolicy,
    URLZONEREG urlZoneReg,
    DWORD dwFlags);
void __attribute__((__stdcall__)) IInternetZoneManagerEx_GetZoneActionPolicyEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManagerEx_SetZoneActionPolicyEx_Proxy(
    IInternetZoneManagerEx* This,
    DWORD dwZone,
    DWORD dwAction,
    BYTE *pPolicy,
    DWORD cbPolicy,
    URLZONEREG urlZoneReg,
    DWORD dwFlags);
void __attribute__((__stdcall__)) IInternetZoneManagerEx_SetZoneActionPolicyEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IInternetZoneManagerEx2 ;
typedef struct IInternetZoneManagerEx2Vtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInternetZoneManagerEx2* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInternetZoneManagerEx2* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInternetZoneManagerEx2* This);
    HRESULT (__attribute__((__stdcall__)) *GetZoneAttributes)(
        IInternetZoneManagerEx2* This,
        DWORD dwZone,
        ZONEATTRIBUTES *pZoneAttributes);
    HRESULT (__attribute__((__stdcall__)) *SetZoneAttributes)(
        IInternetZoneManagerEx2* This,
        DWORD dwZone,
        ZONEATTRIBUTES *pZoneAttributes);
    HRESULT (__attribute__((__stdcall__)) *GetZoneCustomPolicy)(
        IInternetZoneManagerEx2* This,
        DWORD dwZone,
        const GUID* const guidKey,
        BYTE **ppPolicy,
        DWORD *pcbPolicy,
        URLZONEREG ulrZoneReg);
    HRESULT (__attribute__((__stdcall__)) *SetZoneCustomPolicy)(
        IInternetZoneManagerEx2* This,
        DWORD dwZone,
        const GUID* const guidKey,
        BYTE *ppPolicy,
        DWORD pcbPolicy,
        URLZONEREG ulrZoneReg);
    HRESULT (__attribute__((__stdcall__)) *GetZoneActionPolicy)(
        IInternetZoneManagerEx2* This,
        DWORD dwZone,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);
    HRESULT (__attribute__((__stdcall__)) *SetZoneActionPolicy)(
        IInternetZoneManagerEx2* This,
        DWORD dwZone,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);
    HRESULT (__attribute__((__stdcall__)) *PromptAction)(
        IInternetZoneManagerEx2* This,
        DWORD dwAction,
        HWND hwndParent,
        LPCWSTR pwszUrl,
        LPCWSTR pwszText,
        DWORD dwPromptFlags);
    HRESULT (__attribute__((__stdcall__)) *LogAction)(
        IInternetZoneManagerEx2* This,
        DWORD dwAction,
        LPCWSTR pwszUrl,
        LPCWSTR pwszText,
        DWORD dwLogFlags);
    HRESULT (__attribute__((__stdcall__)) *CreateZoneEnumerator)(
        IInternetZoneManagerEx2* This,
        DWORD *pdwEnum,
        DWORD *pdwCount,
        DWORD dwFlags);
    HRESULT (__attribute__((__stdcall__)) *GetZoneAt)(
        IInternetZoneManagerEx2* This,
        DWORD dwEnum,
        DWORD dwIndex,
        DWORD *pdwZone);
    HRESULT (__attribute__((__stdcall__)) *DestroyZoneEnumerator)(
        IInternetZoneManagerEx2* This,
        DWORD dwEnum);
    HRESULT (__attribute__((__stdcall__)) *CopyTemplatePoliciesToZone)(
        IInternetZoneManagerEx2* This,
        DWORD dwTemplate,
        DWORD dwZone,
        DWORD dwReserved);
    HRESULT (__attribute__((__stdcall__)) *GetZoneActionPolicyEx)(
        IInternetZoneManagerEx2* This,
        DWORD dwZone,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg,
        DWORD dwFlags);
    HRESULT (__attribute__((__stdcall__)) *SetZoneActionPolicyEx)(
        IInternetZoneManagerEx2* This,
        DWORD dwZone,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg,
        DWORD dwFlags);
    HRESULT (__attribute__((__stdcall__)) *GetZoneAttributesEx)(
        IInternetZoneManagerEx2* This,
        DWORD dwZone,
        ZONEATTRIBUTES *pZoneAttributes,
        DWORD dwFlags);
    HRESULT (__attribute__((__stdcall__)) *GetZoneSecurityState)(
        IInternetZoneManagerEx2* This,
        DWORD dwZoneIndex,
        BOOL fRespectPolicy,
        LPDWORD pdwState,
        BOOL *pfPolicyEncountered);
    HRESULT (__attribute__((__stdcall__)) *GetIESecurityState)(
        IInternetZoneManagerEx2* This,
        BOOL fRespectPolicy,
        LPDWORD pdwState,
        BOOL *pfPolicyEncountered,
        BOOL fNoCache);
    HRESULT (__attribute__((__stdcall__)) *FixInsecureSettings)(
        IInternetZoneManagerEx2* This);
   
} IInternetZoneManagerEx2Vtbl;
struct IInternetZoneManagerEx2 {
    IInternetZoneManagerEx2Vtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IInternetZoneManagerEx2_GetZoneAttributesEx_Proxy(
    IInternetZoneManagerEx2* This,
    DWORD dwZone,
    ZONEATTRIBUTES *pZoneAttributes,
    DWORD dwFlags);
void __attribute__((__stdcall__)) IInternetZoneManagerEx2_GetZoneAttributesEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManagerEx2_GetZoneSecurityState_Proxy(
    IInternetZoneManagerEx2* This,
    DWORD dwZoneIndex,
    BOOL fRespectPolicy,
    LPDWORD pdwState,
    BOOL *pfPolicyEncountered);
void __attribute__((__stdcall__)) IInternetZoneManagerEx2_GetZoneSecurityState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManagerEx2_GetIESecurityState_Proxy(
    IInternetZoneManagerEx2* This,
    BOOL fRespectPolicy,
    LPDWORD pdwState,
    BOOL *pfPolicyEncountered,
    BOOL fNoCache);
void __attribute__((__stdcall__)) IInternetZoneManagerEx2_GetIESecurityState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManagerEx2_FixInsecureSettings_Proxy(
    IInternetZoneManagerEx2* This);
void __attribute__((__stdcall__)) IInternetZoneManagerEx2_FixInsecureSettings_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef struct _tagSOFTDISTINFO {
    ULONG cbSize;
    DWORD dwFlags;
    DWORD dwAdState;
    LPWSTR szTitle;
    LPWSTR szAbstract;
    LPWSTR szHREF;
    DWORD dwInstalledVersionMS;
    DWORD dwInstalledVersionLS;
    DWORD dwUpdateVersionMS;
    DWORD dwUpdateVersionLS;
    DWORD dwAdvertisedVersionMS;
    DWORD dwAdvertisedVersionLS;
    DWORD dwReserved;
} SOFTDISTINFO;
typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;
typedef struct _tagCODEBASEHOLD {
    DWORD cbSize;
    LPWSTR szDistUnit;
    LPWSTR szCodeBase;
    DWORD dwVersionMS;
    DWORD dwVersionLS;
    DWORD dwStyle;
} CODEBASEHOLD;
typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;
extern const GUID IID_ISoftDistExt ;
typedef struct ISoftDistExtVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        ISoftDistExt* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        ISoftDistExt* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        ISoftDistExt* This);
    HRESULT (__attribute__((__stdcall__)) *ProcessSoftDist)(
        ISoftDistExt* This,
        LPCWSTR szCDFURL,
        IXMLElement *pSoftDistElement,
        LPSOFTDISTINFO lpsdi);
    HRESULT (__attribute__((__stdcall__)) *GetFirstCodeBase)(
        ISoftDistExt* This,
        LPWSTR *szCodeBase,
        LPDWORD dwMaxSize);
    HRESULT (__attribute__((__stdcall__)) *GetNextCodeBase)(
        ISoftDistExt* This,
        LPWSTR *szCodeBase,
        LPDWORD dwMaxSize);
    HRESULT (__attribute__((__stdcall__)) *AsyncInstallDistributionUnit)(
        ISoftDistExt* This,
        IBindCtx *pbc,
        LPVOID lpReserved,
        DWORD flags,
        LPCODEBASEHOLD lpcbh);
   
} ISoftDistExtVtbl;
struct ISoftDistExt {
    ISoftDistExtVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) ISoftDistExt_ProcessSoftDist_Proxy(
    ISoftDistExt* This,
    LPCWSTR szCDFURL,
    IXMLElement *pSoftDistElement,
    LPSOFTDISTINFO lpsdi);
void __attribute__((__stdcall__)) ISoftDistExt_ProcessSoftDist_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISoftDistExt_GetFirstCodeBase_Proxy(
    ISoftDistExt* This,
    LPWSTR *szCodeBase,
    LPDWORD dwMaxSize);
void __attribute__((__stdcall__)) ISoftDistExt_GetFirstCodeBase_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISoftDistExt_GetNextCodeBase_Proxy(
    ISoftDistExt* This,
    LPWSTR *szCodeBase,
    LPDWORD dwMaxSize);
void __attribute__((__stdcall__)) ISoftDistExt_GetNextCodeBase_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISoftDistExt_AsyncInstallDistributionUnit_Proxy(
    ISoftDistExt* This,
    IBindCtx *pbc,
    LPVOID lpReserved,
    DWORD flags,
    LPCODEBASEHOLD lpcbh);
void __attribute__((__stdcall__)) ISoftDistExt_AsyncInstallDistributionUnit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef enum _tagINTERNETFEATURELIST {
    FEATURE_OBJECT_CACHING = 0,
    FEATURE_ZONE_ELEVATION = 1,
    FEATURE_MIME_HANDLING = 2,
    FEATURE_MIME_SNIFFING = 3,
    FEATURE_WINDOW_RESTRICTIONS = 4,
    FEATURE_WEBOC_POPUPMANAGEMENT = 5,
    FEATURE_BEHAVIORS = 6,
    FEATURE_DISABLE_MK_PROTOCOL = 7,
    FEATURE_LOCALMACHINE_LOCKDOWN = 8,
    FEATURE_SECURITYBAND = 9,
    FEATURE_RESTRICT_ACTIVEXINSTALL = 10,
    FEATURE_VALIDATE_NAVIGATE_URL = 11,
    FEATURE_RESTRICT_FILEDOWNLOAD = 12,
    FEATURE_ADDON_MANAGEMENT = 13,
    FEATURE_PROTOCOL_LOCKDOWN = 14,
    FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 15,
    FEATURE_SAFE_BINDTOOBJECT = 16,
    FEATURE_UNC_SAVEDFILECHECK = 17,
    FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 18,
    FEATURE_TABBED_BROWSING = 19,
    FEATURE_SSLUX = 20,
    FEATURE_DISABLE_NAVIGATION_SOUNDS = 21,
    FEATURE_DISABLE_LEGACY_COMPRESSION = 22,
    FEATURE_FORCE_ADDR_AND_STATUS = 23,
    FEATURE_XMLHTTP = 24,
    FEATURE_DISABLE_TELNET_PROTOCOL = 25,
    FEATURE_FEEDS = 26,
    FEATURE_BLOCK_INPUT_PROMPTS = 27,
    FEATURE_DOMSTORAGE = 28,
    FEATURE_XDOMAINREQUEST = 29,
    FEATURE_DATAURI = 30,
    FEATURE_AJAX_CONNECTIONSERVICES = 31,
    FEATURE_ENTRY_COUNT = 32
} INTERNETFEATURELIST;
typedef struct _tagPROTOCOLFILTERDATA {
    DWORD cbSize;
    IInternetProtocolSink *pProtocolSink;
    IInternetProtocol *pProtocol;
    IUnknown *pUnk;
    DWORD dwFilterFlags;
} PROTOCOLFILTERDATA;
typedef enum __WIDL_urlmon_generated_name_0000000A {
    Uri_PROPERTY_ABSOLUTE_URI = 0,
    Uri_PROPERTY_STRING_START = Uri_PROPERTY_ABSOLUTE_URI,
    Uri_PROPERTY_AUTHORITY = 1,
    Uri_PROPERTY_DISPLAY_URI = 2,
    Uri_PROPERTY_DOMAIN = 3,
    Uri_PROPERTY_EXTENSION = 4,
    Uri_PROPERTY_FRAGMENT = 5,
    Uri_PROPERTY_HOST = 6,
    Uri_PROPERTY_PASSWORD = 7,
    Uri_PROPERTY_PATH = 8,
    Uri_PROPERTY_PATH_AND_QUERY = 9,
    Uri_PROPERTY_QUERY = 10,
    Uri_PROPERTY_RAW_URI = 11,
    Uri_PROPERTY_SCHEME_NAME = 12,
    Uri_PROPERTY_USER_INFO = 13,
    Uri_PROPERTY_USER_NAME = 14,
    Uri_PROPERTY_STRING_LAST = Uri_PROPERTY_USER_NAME,
    Uri_PROPERTY_HOST_TYPE = 15,
    Uri_PROPERTY_DWORD_START = Uri_PROPERTY_HOST_TYPE,
    Uri_PROPERTY_PORT = 16,
    Uri_PROPERTY_SCHEME = 17,
    Uri_PROPERTY_ZONE = 18,
    Uri_PROPERTY_DWORD_LAST = Uri_PROPERTY_ZONE
} Uri_PROPERTY;
typedef enum __WIDL_urlmon_generated_name_0000000B {
    Uri_HOST_UNKNOWN = 0,
    Uri_HOST_DNS = 1,
    Uri_HOST_IPV4 = 2,
    Uri_HOST_IPV6 = 3,
    Uri_HOST_IDN = 4
} Uri_HOST_TYPE;
extern const GUID IID_IUri ;
typedef struct IUriVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IUri* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IUri* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IUri* This);
    HRESULT (__attribute__((__stdcall__)) *GetPropertyBSTR)(
        IUri* This,
        Uri_PROPERTY uriProp,
        BSTR *pbstrProperty,
        DWORD dwFlags);
    HRESULT (__attribute__((__stdcall__)) *GetPropertyLength)(
        IUri* This,
        Uri_PROPERTY uriProp,
        DWORD *pcchProperty,
        DWORD dwFlags);
    HRESULT (__attribute__((__stdcall__)) *GetPropertyDWORD)(
        IUri* This,
        Uri_PROPERTY uriProp,
        DWORD *pdwProperty,
        DWORD dwFlags);
    HRESULT (__attribute__((__stdcall__)) *HasProperty)(
        IUri* This,
        Uri_PROPERTY uriProp,
        BOOL *pfHasProperty);
    HRESULT (__attribute__((__stdcall__)) *GetAbsoluteUri)(
        IUri* This,
        BSTR *pbstrAbsoluteUri);
    HRESULT (__attribute__((__stdcall__)) *GetAuthority)(
        IUri* This,
        BSTR *pbstrAuthority);
    HRESULT (__attribute__((__stdcall__)) *GetDisplayUri)(
        IUri* This,
        BSTR *pbstrDisplayString);
    HRESULT (__attribute__((__stdcall__)) *GetDomain)(
        IUri* This,
        BSTR *pbstrDomain);
    HRESULT (__attribute__((__stdcall__)) *GetExtension)(
        IUri* This,
        BSTR *pbstrExtension);
    HRESULT (__attribute__((__stdcall__)) *GetFragment)(
        IUri* This,
        BSTR *pbstrFragment);
    HRESULT (__attribute__((__stdcall__)) *GetHost)(
        IUri* This,
        BSTR *pbstrHost);
    HRESULT (__attribute__((__stdcall__)) *GetPassword)(
        IUri* This,
        BSTR *pbstrPassword);
    HRESULT (__attribute__((__stdcall__)) *GetPath)(
        IUri* This,
        BSTR *pbstrPath);
    HRESULT (__attribute__((__stdcall__)) *GetPathAndQuery)(
        IUri* This,
        BSTR *pbstrPathAndQuery);
    HRESULT (__attribute__((__stdcall__)) *GetQuery)(
        IUri* This,
        BSTR *pbstrQuery);
    HRESULT (__attribute__((__stdcall__)) *GetRawUri)(
        IUri* This,
        BSTR *pbstrRawUri);
    HRESULT (__attribute__((__stdcall__)) *GetSchemeName)(
        IUri* This,
        BSTR *pbstrSchemeName);
    HRESULT (__attribute__((__stdcall__)) *GetUserInfo)(
        IUri* This,
        BSTR *pbstrUserInfo);
    HRESULT (__attribute__((__stdcall__)) *GetUserNameA)(
        IUri* This,
        BSTR *pbstrUserName);
    HRESULT (__attribute__((__stdcall__)) *GetHostType)(
        IUri* This,
        DWORD *pdwHostType);
    HRESULT (__attribute__((__stdcall__)) *GetPort)(
        IUri* This,
        DWORD *pdwPort);
    HRESULT (__attribute__((__stdcall__)) *GetScheme)(
        IUri* This,
        DWORD *pdwScheme);
    HRESULT (__attribute__((__stdcall__)) *GetZone)(
        IUri* This,
        DWORD *pdwZone);
    HRESULT (__attribute__((__stdcall__)) *GetProperties)(
        IUri* This,
        LPDWORD pdwFlags);
    HRESULT (__attribute__((__stdcall__)) *IsEqual)(
        IUri* This,
        IUri *pUri,
        BOOL *pfEqual);
   
} IUriVtbl;
struct IUri {
    IUriVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IUri_GetPropertyBSTR_Proxy(
    IUri* This,
    Uri_PROPERTY uriProp,
    BSTR *pbstrProperty,
    DWORD dwFlags);
void __attribute__((__stdcall__)) IUri_GetPropertyBSTR_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetPropertyLength_Proxy(
    IUri* This,
    Uri_PROPERTY uriProp,
    DWORD *pcchProperty,
    DWORD dwFlags);
void __attribute__((__stdcall__)) IUri_GetPropertyLength_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetPropertyDWORD_Proxy(
    IUri* This,
    Uri_PROPERTY uriProp,
    DWORD *pdwProperty,
    DWORD dwFlags);
void __attribute__((__stdcall__)) IUri_GetPropertyDWORD_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_HasProperty_Proxy(
    IUri* This,
    Uri_PROPERTY uriProp,
    BOOL *pfHasProperty);
void __attribute__((__stdcall__)) IUri_HasProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetAbsoluteUri_Proxy(
    IUri* This,
    BSTR *pbstrAbsoluteUri);
void __attribute__((__stdcall__)) IUri_GetAbsoluteUri_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetAuthority_Proxy(
    IUri* This,
    BSTR *pbstrAuthority);
void __attribute__((__stdcall__)) IUri_GetAuthority_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetDisplayUri_Proxy(
    IUri* This,
    BSTR *pbstrDisplayString);
void __attribute__((__stdcall__)) IUri_GetDisplayUri_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetDomain_Proxy(
    IUri* This,
    BSTR *pbstrDomain);
void __attribute__((__stdcall__)) IUri_GetDomain_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetExtension_Proxy(
    IUri* This,
    BSTR *pbstrExtension);
void __attribute__((__stdcall__)) IUri_GetExtension_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetFragment_Proxy(
    IUri* This,
    BSTR *pbstrFragment);
void __attribute__((__stdcall__)) IUri_GetFragment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetHost_Proxy(
    IUri* This,
    BSTR *pbstrHost);
void __attribute__((__stdcall__)) IUri_GetHost_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetPassword_Proxy(
    IUri* This,
    BSTR *pbstrPassword);
void __attribute__((__stdcall__)) IUri_GetPassword_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetPath_Proxy(
    IUri* This,
    BSTR *pbstrPath);
void __attribute__((__stdcall__)) IUri_GetPath_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetPathAndQuery_Proxy(
    IUri* This,
    BSTR *pbstrPathAndQuery);
void __attribute__((__stdcall__)) IUri_GetPathAndQuery_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetQuery_Proxy(
    IUri* This,
    BSTR *pbstrQuery);
void __attribute__((__stdcall__)) IUri_GetQuery_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetRawUri_Proxy(
    IUri* This,
    BSTR *pbstrRawUri);
void __attribute__((__stdcall__)) IUri_GetRawUri_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetSchemeName_Proxy(
    IUri* This,
    BSTR *pbstrSchemeName);
void __attribute__((__stdcall__)) IUri_GetSchemeName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetUserInfo_Proxy(
    IUri* This,
    BSTR *pbstrUserInfo);
void __attribute__((__stdcall__)) IUri_GetUserInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetUserName_Proxy(
    IUri* This,
    BSTR *pbstrUserName);
void __attribute__((__stdcall__)) IUri_GetUserName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetHostType_Proxy(
    IUri* This,
    DWORD *pdwHostType);
void __attribute__((__stdcall__)) IUri_GetHostType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetPort_Proxy(
    IUri* This,
    DWORD *pdwPort);
void __attribute__((__stdcall__)) IUri_GetPort_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetScheme_Proxy(
    IUri* This,
    DWORD *pdwScheme);
void __attribute__((__stdcall__)) IUri_GetScheme_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetZone_Proxy(
    IUri* This,
    DWORD *pdwZone);
void __attribute__((__stdcall__)) IUri_GetZone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_GetProperties_Proxy(
    IUri* This,
    LPDWORD pdwFlags);
void __attribute__((__stdcall__)) IUri_GetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUri_IsEqual_Proxy(
    IUri* This,
    IUri *pUri,
    BOOL *pfEqual);
void __attribute__((__stdcall__)) IUri_IsEqual_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) CreateUri(LPCWSTR,DWORD,DWORD_PTR,IUri**);
HRESULT __attribute__((__stdcall__)) CreateUriWithFragment(LPCWSTR,LPCWSTR,DWORD,DWORD_PTR,IUri**);
HRESULT __attribute__((__stdcall__)) CreateUriFromMultiByteString(LPCSTR,DWORD,DWORD,DWORD,DWORD_PTR,IUri**);
extern const GUID IID_IUriContainer ;
typedef struct IUriContainerVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IUriContainer* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IUriContainer* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IUriContainer* This);
    HRESULT (__attribute__((__stdcall__)) *GetIUri)(
        IUriContainer* This,
        IUri **ppIUri);
   
} IUriContainerVtbl;
struct IUriContainer {
    IUriContainerVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IUriContainer_GetIUri_Proxy(
    IUriContainer* This,
    IUri **ppIUri);
void __attribute__((__stdcall__)) IUriContainer_GetIUri_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IUriBuilder ;
typedef struct IUriBuilderVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IUriBuilder* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IUriBuilder* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IUriBuilder* This);
    HRESULT (__attribute__((__stdcall__)) *CreateUriSimple)(
        IUriBuilder* This,
        DWORD dwAllowEncodingPropertyMask,
        DWORD_PTR dwReserved,
        IUri **ppIUri);
    HRESULT (__attribute__((__stdcall__)) *CreateUri)(
        IUriBuilder* This,
        DWORD dwCreateFlags,
        DWORD dwAllowEncodingPropertyMask,
        DWORD_PTR dwReserved,
        IUri **ppIUri);
    HRESULT (__attribute__((__stdcall__)) *CreateUriWithFlags)(
        IUriBuilder* This,
        DWORD dwCreateFlags,
        DWORD dwUriBuilderFlags,
        DWORD dwAllowEncodingPropertyMask,
        DWORD_PTR dwReserved,
        IUri **ppIUri);
    HRESULT (__attribute__((__stdcall__)) *GetIUri)(
        IUriBuilder* This,
        IUri **ppIUri);
    HRESULT (__attribute__((__stdcall__)) *SetIUri)(
        IUriBuilder* This,
        IUri *pIUri);
    HRESULT (__attribute__((__stdcall__)) *GetFragment)(
        IUriBuilder* This,
        DWORD *pcchFragment,
        LPCWSTR *ppwzFragment);
    HRESULT (__attribute__((__stdcall__)) *GetHost)(
        IUriBuilder* This,
        DWORD *pcchHost,
        LPCWSTR *ppwzHost);
    HRESULT (__attribute__((__stdcall__)) *GetPassword)(
        IUriBuilder* This,
        DWORD *pcchPassword,
        LPCWSTR *ppwzPassword);
    HRESULT (__attribute__((__stdcall__)) *GetPath)(
        IUriBuilder* This,
        DWORD *pcchPath,
        LPCWSTR *ppwzPath);
    HRESULT (__attribute__((__stdcall__)) *GetPort)(
        IUriBuilder* This,
        BOOL *pfHasPort,
        DWORD *pdwPort);
    HRESULT (__attribute__((__stdcall__)) *GetQuery)(
        IUriBuilder* This,
        DWORD *pcchQuery,
        LPCWSTR *ppwzQuery);
    HRESULT (__attribute__((__stdcall__)) *GetSchemeName)(
        IUriBuilder* This,
        DWORD *pcchSchemeName,
        LPCWSTR *ppwzSchemeName);
    HRESULT (__attribute__((__stdcall__)) *GetUserNameA)(
        IUriBuilder* This,
        DWORD *pcchUserName,
        LPCWSTR *ppwzUserName);
    HRESULT (__attribute__((__stdcall__)) *SetFragment)(
        IUriBuilder* This,
        LPCWSTR pwzNewValue);
    HRESULT (__attribute__((__stdcall__)) *SetHost)(
        IUriBuilder* This,
        LPCWSTR pwzNewValue);
    HRESULT (__attribute__((__stdcall__)) *SetPassword)(
        IUriBuilder* This,
        LPCWSTR pwzNewValue);
    HRESULT (__attribute__((__stdcall__)) *SetPath)(
        IUriBuilder* This,
        LPCWSTR pwzNewValue);
    HRESULT (__attribute__((__stdcall__)) *SetPortA)(
        IUriBuilder* This,
        BOOL fHasPort,
        DWORD dwNewValue);
    HRESULT (__attribute__((__stdcall__)) *SetQuery)(
        IUriBuilder* This,
        LPCWSTR pwzNewValue);
    HRESULT (__attribute__((__stdcall__)) *SetSchemeName)(
        IUriBuilder* This,
        LPCWSTR pwzNewValue);
    HRESULT (__attribute__((__stdcall__)) *SetUserName)(
        IUriBuilder* This,
        LPCWSTR pwzNewValue);
    HRESULT (__attribute__((__stdcall__)) *RemoveProperties)(
        IUriBuilder* This,
        DWORD dwPropertyMask);
    HRESULT (__attribute__((__stdcall__)) *HasBeenModified)(
        IUriBuilder* This,
        BOOL *pfModified);
   
} IUriBuilderVtbl;
struct IUriBuilder {
    IUriBuilderVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IUriBuilder_CreateUriSimple_Proxy(
    IUriBuilder* This,
    DWORD dwAllowEncodingPropertyMask,
    DWORD_PTR dwReserved,
    IUri **ppIUri);
void __attribute__((__stdcall__)) IUriBuilder_CreateUriSimple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_CreateUri_Proxy(
    IUriBuilder* This,
    DWORD dwCreateFlags,
    DWORD dwAllowEncodingPropertyMask,
    DWORD_PTR dwReserved,
    IUri **ppIUri);
void __attribute__((__stdcall__)) IUriBuilder_CreateUri_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_CreateUriWithFlags_Proxy(
    IUriBuilder* This,
    DWORD dwCreateFlags,
    DWORD dwUriBuilderFlags,
    DWORD dwAllowEncodingPropertyMask,
    DWORD_PTR dwReserved,
    IUri **ppIUri);
void __attribute__((__stdcall__)) IUriBuilder_CreateUriWithFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_GetIUri_Proxy(
    IUriBuilder* This,
    IUri **ppIUri);
void __attribute__((__stdcall__)) IUriBuilder_GetIUri_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_SetIUri_Proxy(
    IUriBuilder* This,
    IUri *pIUri);
void __attribute__((__stdcall__)) IUriBuilder_SetIUri_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_GetFragment_Proxy(
    IUriBuilder* This,
    DWORD *pcchFragment,
    LPCWSTR *ppwzFragment);
void __attribute__((__stdcall__)) IUriBuilder_GetFragment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_GetHost_Proxy(
    IUriBuilder* This,
    DWORD *pcchHost,
    LPCWSTR *ppwzHost);
void __attribute__((__stdcall__)) IUriBuilder_GetHost_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_GetPassword_Proxy(
    IUriBuilder* This,
    DWORD *pcchPassword,
    LPCWSTR *ppwzPassword);
void __attribute__((__stdcall__)) IUriBuilder_GetPassword_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_GetPath_Proxy(
    IUriBuilder* This,
    DWORD *pcchPath,
    LPCWSTR *ppwzPath);
void __attribute__((__stdcall__)) IUriBuilder_GetPath_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_GetPort_Proxy(
    IUriBuilder* This,
    BOOL *pfHasPort,
    DWORD *pdwPort);
void __attribute__((__stdcall__)) IUriBuilder_GetPort_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_GetQuery_Proxy(
    IUriBuilder* This,
    DWORD *pcchQuery,
    LPCWSTR *ppwzQuery);
void __attribute__((__stdcall__)) IUriBuilder_GetQuery_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_GetSchemeName_Proxy(
    IUriBuilder* This,
    DWORD *pcchSchemeName,
    LPCWSTR *ppwzSchemeName);
void __attribute__((__stdcall__)) IUriBuilder_GetSchemeName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_GetUserName_Proxy(
    IUriBuilder* This,
    DWORD *pcchUserName,
    LPCWSTR *ppwzUserName);
void __attribute__((__stdcall__)) IUriBuilder_GetUserName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_SetFragment_Proxy(
    IUriBuilder* This,
    LPCWSTR pwzNewValue);
void __attribute__((__stdcall__)) IUriBuilder_SetFragment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_SetHost_Proxy(
    IUriBuilder* This,
    LPCWSTR pwzNewValue);
void __attribute__((__stdcall__)) IUriBuilder_SetHost_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_SetPassword_Proxy(
    IUriBuilder* This,
    LPCWSTR pwzNewValue);
void __attribute__((__stdcall__)) IUriBuilder_SetPassword_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_SetPath_Proxy(
    IUriBuilder* This,
    LPCWSTR pwzNewValue);
void __attribute__((__stdcall__)) IUriBuilder_SetPath_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_SetPort_Proxy(
    IUriBuilder* This,
    BOOL fHasPort,
    DWORD dwNewValue);
void __attribute__((__stdcall__)) IUriBuilder_SetPort_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_SetQuery_Proxy(
    IUriBuilder* This,
    LPCWSTR pwzNewValue);
void __attribute__((__stdcall__)) IUriBuilder_SetQuery_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_SetSchemeName_Proxy(
    IUriBuilder* This,
    LPCWSTR pwzNewValue);
void __attribute__((__stdcall__)) IUriBuilder_SetSchemeName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_SetUserName_Proxy(
    IUriBuilder* This,
    LPCWSTR pwzNewValue);
void __attribute__((__stdcall__)) IUriBuilder_SetUserName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_RemoveProperties_Proxy(
    IUriBuilder* This,
    DWORD dwPropertyMask);
void __attribute__((__stdcall__)) IUriBuilder_RemoveProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilder_HasBeenModified_Proxy(
    IUriBuilder* This,
    BOOL *pfModified);
void __attribute__((__stdcall__)) IUriBuilder_HasBeenModified_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) CreateIUriBuilder(IUri*,DWORD,DWORD_PTR,IUriBuilder**);
extern const GUID IID_IUriBuilderFactory ;
typedef struct IUriBuilderFactoryVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IUriBuilderFactory* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IUriBuilderFactory* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IUriBuilderFactory* This);
    HRESULT (__attribute__((__stdcall__)) *CreateIUriBuilder)(
        IUriBuilderFactory* This,
        DWORD dwFlags,
        DWORD_PTR dwReserved,
        IUriBuilder **ppIUriBuilder);
    HRESULT (__attribute__((__stdcall__)) *CreateInitializedIUriBuilder)(
        IUriBuilderFactory* This,
        DWORD dwFlags,
        DWORD_PTR dwReserved,
        IUriBuilder **ppIUriBuilder);
   
} IUriBuilderFactoryVtbl;
struct IUriBuilderFactory {
    IUriBuilderFactoryVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IUriBuilderFactory_CreateIUriBuilder_Proxy(
    IUriBuilderFactory* This,
    DWORD dwFlags,
    DWORD_PTR dwReserved,
    IUriBuilder **ppIUriBuilder);
void __attribute__((__stdcall__)) IUriBuilderFactory_CreateIUriBuilder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IUriBuilderFactory_CreateInitializedIUriBuilder_Proxy(
    IUriBuilderFactory* This,
    DWORD dwFlags,
    DWORD_PTR dwReserved,
    IUriBuilder **ppIUriBuilder);
void __attribute__((__stdcall__)) IUriBuilderFactory_CreateInitializedIUriBuilder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern const GUID IID_IInternetProtocolEx ;
typedef struct IInternetProtocolExVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IInternetProtocolEx* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IInternetProtocolEx* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IInternetProtocolEx* This);
    HRESULT (__attribute__((__stdcall__)) *Start)(
        IInternetProtocolEx* This,
        LPCWSTR szUrl,
        IInternetProtocolSink *pOIProtSink,
        IInternetBindInfo *pOIBindInfo,
        DWORD grfPI,
        HANDLE_PTR dwReserved);
    HRESULT (__attribute__((__stdcall__)) *Continue)(
        IInternetProtocolEx* This,
        PROTOCOLDATA *pProtocolData);
    HRESULT (__attribute__((__stdcall__)) *Abort)(
        IInternetProtocolEx* This,
        HRESULT hrReason,
        DWORD dwOptions);
    HRESULT (__attribute__((__stdcall__)) *Terminate)(
        IInternetProtocolEx* This,
        DWORD dwOptions);
    HRESULT (__attribute__((__stdcall__)) *Suspend)(
        IInternetProtocolEx* This);
    HRESULT (__attribute__((__stdcall__)) *Resume)(
        IInternetProtocolEx* This);
    HRESULT (__attribute__((__stdcall__)) *Read)(
        IInternetProtocolEx* This,
        void *pv,
        ULONG cb,
        ULONG *pcbRead);
    HRESULT (__attribute__((__stdcall__)) *Seek)(
        IInternetProtocolEx* This,
        LARGE_INTEGER dlibMove,
        DWORD dwOrigin,
        ULARGE_INTEGER *plibNewPosition);
    HRESULT (__attribute__((__stdcall__)) *LockRequest)(
        IInternetProtocolEx* This,
        DWORD dwOptions);
    HRESULT (__attribute__((__stdcall__)) *UnlockRequest)(
        IInternetProtocolEx* This);
    HRESULT (__attribute__((__stdcall__)) *StartEx)(
        IInternetProtocolEx* This,
        IUri *pUri,
        IInternetProtocolSink *pOIProtSink,
        IInternetBindInfo *pOIBindInfo,
        DWORD grfPI,
        HANDLE *dwReserved);
   
} IInternetProtocolExVtbl;
struct IInternetProtocolEx {
    IInternetProtocolExVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IInternetProtocolEx_StartEx_Proxy(
    IInternetProtocolEx* This,
    IUri *pUri,
    IInternetProtocolSink *pOIProtSink,
    IInternetBindInfo *pOIBindInfo,
    DWORD grfPI,
    HANDLE *dwReserved);
void __attribute__((__stdcall__)) IInternetProtocolEx_StartEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
struct CONFIRMSAFETY {
    CLSID clsid;
    IUnknown *pUnk;
    DWORD dwFlags;
};
extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY;
extern const GUID CLSID_InternetSecurityManager ;
extern const GUID CLSID_InternetZoneManager ;
extern const GUID IID_IAsyncMoniker ;
extern const GUID IID_IAsyncBindCtx ;
extern const GUID CLSID_StdURLMoniker ;
extern const GUID CLSID_DeCompMimeFilter ;
extern const GUID CLSID_CdlProtocol ;
extern const GUID CLSID_FileProtocol ;
extern const GUID CLSID_FtpProtocol ;
extern const GUID CLSID_GopherProtocol ;
extern const GUID CLSID_HttpProtocol ;
extern const GUID CLSID_HttpSProtocol ;
extern const GUID CLSID_MkProtocol ;
HRESULT __attribute__((__stdcall__)) CoGetClassObjectFromURL(const CLSID* const, LPCWSTR, DWORD, DWORD, LPCWSTR, LPBINDCTX, DWORD, LPVOID, const IID* const, LPVOID*);
HRESULT __attribute__((__stdcall__)) CreateURLMoniker(IMoniker *pmkContext, LPCWSTR szURL, IMoniker **ppmk);
HRESULT __attribute__((__stdcall__)) CreateURLMonikerEx(IMoniker*,LPCWSTR,IMoniker**,DWORD);
HRESULT __attribute__((__stdcall__)) CreateURLMonikerEx2(IMoniker*,IUri*,IMoniker**,DWORD);
HRESULT __attribute__((__stdcall__)) RegisterBindStatusCallback(IBindCtx *pbc, IBindStatusCallback *pbsc, IBindStatusCallback **ppbsc, DWORD dwReserved);
HRESULT __attribute__((__stdcall__)) CompareSecurityIds(BYTE*,DWORD,BYTE*,DWORD,DWORD);
HRESULT __attribute__((__stdcall__)) URLDownloadToFileA(LPUNKNOWN,LPCSTR,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);
HRESULT __attribute__((__stdcall__)) URLDownloadToFileW(LPUNKNOWN,LPCWSTR,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);
HRESULT __attribute__((__stdcall__)) URLDownloadToCacheFileA(LPUNKNOWN,LPCSTR,LPSTR,DWORD,DWORD,LPBINDSTATUSCALLBACK);
HRESULT __attribute__((__stdcall__)) URLDownloadToCacheFileW(LPUNKNOWN,LPCWSTR,LPWSTR,DWORD,DWORD,LPBINDSTATUSCALLBACK);
HRESULT __attribute__((__stdcall__)) CoInternetGetSession(DWORD,IInternetSession**,DWORD);
HRESULT __attribute__((__stdcall__)) MkParseDisplayNameEx(IBindCtx*,LPCWSTR,ULONG*,IMoniker**);
HRESULT __attribute__((__stdcall__)) IsAsyncMoniker(IMoniker* pmk);
HRESULT __attribute__((__stdcall__)) CreateAsyncBindCtx(DWORD, IBindStatusCallback*, IEnumFORMATETC*, IBindCtx**);
HRESULT __attribute__((__stdcall__)) CreateAsyncBindCtxEx(IBindCtx*,DWORD,IBindStatusCallback*,IEnumFORMATETC*,IBindCtx**,DWORD);
HRESULT __attribute__((__stdcall__)) CoInternetCreateSecurityManager(IServiceProvider*,IInternetSecurityManager**,DWORD);
HRESULT __attribute__((__stdcall__)) CoInternetCombineUrl(LPCWSTR,LPCWSTR,DWORD,LPWSTR,DWORD,DWORD*,DWORD);
HRESULT __attribute__((__stdcall__)) CoInternetCombineUrlEx(IUri*,LPCWSTR,DWORD,IUri**,DWORD_PTR);
HRESULT __attribute__((__stdcall__)) CoInternetCompareUrl(LPCWSTR,LPCWSTR,DWORD);
HRESULT __attribute__((__stdcall__)) CoInternetCombineIUri(IUri*,IUri*,DWORD,IUri**,DWORD_PTR);
HRESULT __attribute__((__stdcall__)) CoInternetCreateZoneManager(IServiceProvider*, IInternetZoneManager**, DWORD);
HRESULT __attribute__((__stdcall__)) CoInternetParseUrl(LPCWSTR,PARSEACTION,DWORD,LPWSTR,DWORD,DWORD*,DWORD);
HRESULT __attribute__((__stdcall__)) CoInternetParseIUri(IUri*,PARSEACTION,DWORD,LPWSTR,DWORD,DWORD*,DWORD_PTR);
HRESULT __attribute__((__stdcall__)) CoInternetQueryInfo(LPCWSTR,QUERYOPTION,DWORD,LPVOID,DWORD,DWORD*,DWORD);
HRESULT __attribute__((__stdcall__)) CoInternetSetFeatureEnabled(INTERNETFEATURELIST,DWORD,BOOL);
HRESULT __attribute__((__stdcall__)) CoInternetGetSecurityUrl(LPCWSTR,LPWSTR*,PSUACTION,DWORD);
HRESULT __attribute__((__stdcall__)) CoInternetGetSecurityUrlEx(IUri*,IUri**,PSUACTION,DWORD_PTR);
HRESULT __attribute__((__stdcall__)) CreateFormatEnumerator(UINT,FORMATETC*,IEnumFORMATETC**);
HRESULT __attribute__((__stdcall__)) GetSoftwareUpdateInfo( LPCWSTR szDistUnit, LPSOFTDISTINFO psdi);
HRESULT __attribute__((__stdcall__)) FaultInIEFeature(HWND,uCLSSPEC*,QUERYCONTEXT*,DWORD);
HRESULT __attribute__((__stdcall__)) FindMimeFromData(LPBC,LPCWSTR,LPVOID,DWORD,LPCWSTR,DWORD,LPWSTR*,DWORD);
HRESULT __attribute__((__stdcall__)) GetClassFileOrMime(LPBC,LPCWSTR,LPVOID,DWORD,LPCWSTR,DWORD,CLSID*);
HRESULT __attribute__((__stdcall__)) HlinkGoBack(IUnknown*);
HRESULT __attribute__((__stdcall__)) HlinkGoForward(IUnknown*);
HRESULT __attribute__((__stdcall__)) HlinkNavigateMoniker(IUnknown*,IMoniker*);
HRESULT __attribute__((__stdcall__)) HlinkNavigateString(IUnknown*,LPCWSTR);
HRESULT __attribute__((__stdcall__)) HlinkSimpleNavigateToMoniker(IMoniker*,LPCWSTR,LPCWSTR,IUnknown*,IBindCtx*,IBindStatusCallback*,DWORD,DWORD);
HRESULT __attribute__((__stdcall__)) HlinkSimpleNavigateToString(LPCWSTR,LPCWSTR,LPCWSTR,IUnknown*,IBindCtx*,IBindStatusCallback*,DWORD,DWORD);
HRESULT __attribute__((__stdcall__)) IsValidURL(LPBC,LPCWSTR,DWORD);
HRESULT __attribute__((__stdcall__)) ObtainUserAgentString(DWORD,LPSTR,DWORD*);
HRESULT __attribute__((__stdcall__)) RegisterFormatEnumerator(LPBC,IEnumFORMATETC*,DWORD);
HRESULT __attribute__((__stdcall__)) RevokeFormatEnumerator(LPBC,IEnumFORMATETC*);
HRESULT __attribute__((__stdcall__)) RevokeBindStatusCallback(LPBC,IBindStatusCallback*);
HRESULT __attribute__((__stdcall__)) CopyStgMedium(const STGMEDIUM*,STGMEDIUM*);
void __attribute__((__stdcall__)) ReleaseBindInfo(BINDINFO*);
HRESULT __attribute__((__stdcall__)) UrlMkGetSessionOption(DWORD,LPVOID,DWORD,DWORD*,DWORD);
HRESULT __attribute__((__stdcall__)) UrlMkSetSessionOption(DWORD,LPVOID,DWORD,DWORD);
HRESULT __attribute__((__stdcall__)) URLOpenStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);
HRESULT __attribute__((__stdcall__)) URLOpenStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);
HRESULT __attribute__((__stdcall__)) URLOpenPullStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);
HRESULT __attribute__((__stdcall__)) URLOpenPullStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);
HRESULT __attribute__((__stdcall__)) URLOpenBlockingStreamA(LPUNKNOWN,LPCSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);
HRESULT __attribute__((__stdcall__)) URLOpenBlockingStreamW(LPUNKNOWN,LPCWSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);
BOOL __attribute__((__stdcall__)) IsLoggingEnabledA(LPCSTR);
BOOL __attribute__((__stdcall__)) IsLoggingEnabledW(LPCWSTR);
ULONG __attribute__((__stdcall__)) STGMEDIUM_UserSize (ULONG *, ULONG, STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) STGMEDIUM_UserMarshal (ULONG *, unsigned char *, STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, STGMEDIUM *);
void __attribute__((__stdcall__)) STGMEDIUM_UserFree (ULONG *, STGMEDIUM *);
ULONG __attribute__((__stdcall__)) CLIPFORMAT_UserSize (ULONG *, ULONG, CLIPFORMAT *);
unsigned char * __attribute__((__stdcall__)) CLIPFORMAT_UserMarshal (ULONG *, unsigned char *, CLIPFORMAT *);
unsigned char * __attribute__((__stdcall__)) CLIPFORMAT_UserUnmarshal(ULONG *, unsigned char *, CLIPFORMAT *);
void __attribute__((__stdcall__)) CLIPFORMAT_UserFree (ULONG *, CLIPFORMAT *);
typedef struct IPropertyStorage IPropertyStorage;
typedef struct IPropertySetStorage IPropertySetStorage;
typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;
typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;
typedef IPropertyStorage *LPPROPERTYSTORAGE;
typedef struct tagPROPVARIANT PROPVARIANT;
typedef struct tagCAUB {
    ULONG cElems;
    unsigned char *pElems;
} CAUB;
typedef struct tagCAI {
    ULONG cElems;
    short *pElems;
} CAI;
typedef struct tagCAUI {
    ULONG cElems;
    USHORT *pElems;
} CAUI;
typedef struct tagCAL {
    ULONG cElems;
    LONG *pElems;
} CAL;
typedef struct tagCAUL {
    ULONG cElems;
    ULONG *pElems;
} CAUL;
typedef struct tagCAFLT {
    ULONG cElems;
    float *pElems;
} CAFLT;
typedef struct tagCADBL {
    ULONG cElems;
    double *pElems;
} CADBL;
typedef struct tagCACY {
    ULONG cElems;
    CY *pElems;
} CACY;
typedef struct tagCADATE {
    ULONG cElems;
    DATE *pElems;
} CADATE;
typedef struct tagCABSTR {
    ULONG cElems;
    BSTR *pElems;
} CABSTR;
typedef struct tagCABSTRBLOB {
    ULONG cElems;
    BSTRBLOB *pElems;
} CABSTRBLOB;
typedef struct tagCABOOL {
    ULONG cElems;
    VARIANT_BOOL *pElems;
} CABOOL;
typedef struct tagCASCODE {
    ULONG cElems;
    SCODE *pElems;
} CASCODE;
typedef struct tagCAPROPVARIANT {
    ULONG cElems;
    PROPVARIANT *pElems;
} CAPROPVARIANT;
typedef struct tagCAH {
    ULONG cElems;
    LARGE_INTEGER *pElems;
} CAH;
typedef struct tagCAUH {
    ULONG cElems;
    ULARGE_INTEGER *pElems;
} CAUH;
typedef struct tagCALPSTR {
    ULONG cElems;
    LPSTR *pElems;
} CALPSTR;
typedef struct tagCALPWSTR {
    ULONG cElems;
    LPWSTR *pElems;
} CALPWSTR;
typedef struct tagCAFILETIME {
    ULONG cElems;
    FILETIME *pElems;
} CAFILETIME;
typedef struct tagCACLIPDATA {
    ULONG cElems;
    CLIPDATA *pElems;
} CACLIPDATA;
typedef struct tagCACLSID {
    ULONG cElems;
    CLSID *pElems;
} CACLSID;
struct tagPROPVARIANT {
    VARTYPE vt;
    WORD wReserved1;
    WORD wReserved2;
    WORD wReserved3;
    union {
        char cVal;
        UCHAR bVal;
        short iVal;
        USHORT uiVal;
        VARIANT_BOOL boolVal;
        LONG lVal;
        ULONG ulVal;
        float fltVal;
        SCODE scode;
        LARGE_INTEGER hVal;
        ULARGE_INTEGER uhVal;
        double dblVal;
        CY cyVal;
        DATE date;
        FILETIME filetime;
        CLSID *puuid;
        BLOB blob;
        CLIPDATA *pclipdata;
        IStream *pStream;
        IStorage *pStorage;
        BSTR bstrVal;
        BSTRBLOB bstrblobVal;
        LPSTR pszVal;
        LPWSTR pwszVal;
        CAUB caub;
        CAI cai;
        CAUI caui;
        CABOOL cabool;
        CAL cal;
        CAUL caul;
        CAFLT caflt;
        CASCODE cascode;
        CAH cah;
        CAUH cauh;
        CADBL cadbl;
        CACY cacy;
        CADATE cadate;
        CAFILETIME cafiletime;
        CACLSID cauuid;
        CACLIPDATA caclipdata;
        CABSTR cabstr;
        CABSTRBLOB cabstrblob;
        CALPSTR calpstr;
        CALPWSTR calpwstr;
        CAPROPVARIANT capropvar;
        LPSAFEARRAY parray;
        CHAR *pcVal;
        UCHAR *pbVal;
        SHORT *piVal;
        USHORT *puiVal;
        LONG *plVal;
        ULONG *pulVal;
        INT *pintVal;
        UINT *puintVal;
        FLOAT *pfltVal;
        DOUBLE *pdblVal;
        VARIANT_BOOL *pboolVal;
        DECIMAL *pdecVal;
        SCODE *pscode;
        CY *pcyVal;
        DATE *pdate;
        BSTR *pbstrVal;
        IUnknown **ppunkVal;
        IDispatch **ppdispVal;
        LPSAFEARRAY *pparray;
        PROPVARIANT *pvarVal;
    } ;
};
typedef struct tagPROPVARIANT *LPPROPVARIANT;
typedef struct tagPROPSPEC {
    ULONG ulKind;
    union {
        PROPID propid;
        LPOLESTR lpwstr;
    } ;
} PROPSPEC;
typedef struct tagSTATPROPSTG {
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
} STATPROPSTG;
typedef struct tagSTATPROPSETSTG {
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
} STATPROPSETSTG;
extern const GUID IID_IPropertyStorage ;
typedef struct IPropertyStorageVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IPropertyStorage* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IPropertyStorage* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IPropertyStorage* This);
    HRESULT (__attribute__((__stdcall__)) *ReadMultiple)(
        IPropertyStorage* This,
        ULONG cpspec,
        const PROPSPEC rgpspec[],
        PROPVARIANT rgpropvar[]);
    HRESULT (__attribute__((__stdcall__)) *WriteMultiple)(
        IPropertyStorage* This,
        ULONG cpspec,
        const PROPSPEC rgpspec[],
        const PROPVARIANT rgpropvar[],
        PROPID propidNameFirst);
    HRESULT (__attribute__((__stdcall__)) *DeleteMultiple)(
        IPropertyStorage* This,
        ULONG cpspec,
        const PROPSPEC rgpspec[]);
    HRESULT (__attribute__((__stdcall__)) *ReadPropertyNames)(
        IPropertyStorage* This,
        ULONG cpropid,
        const PROPID rgpropid[],
        LPOLESTR rglpwstrName[]);
    HRESULT (__attribute__((__stdcall__)) *WritePropertyNames)(
        IPropertyStorage* This,
        ULONG cpropid,
        const PROPID rgpropid[],
        const LPOLESTR rglpwstrName[]);
    HRESULT (__attribute__((__stdcall__)) *DeletePropertyNames)(
        IPropertyStorage* This,
        ULONG cpropid,
        const PROPID rgpropid[]);
    HRESULT (__attribute__((__stdcall__)) *Commit)(
        IPropertyStorage* This,
        DWORD grfCommitFlags);
    HRESULT (__attribute__((__stdcall__)) *Revert)(
        IPropertyStorage* This);
    HRESULT (__attribute__((__stdcall__)) *Enum)(
        IPropertyStorage* This,
        IEnumSTATPROPSTG **ppenum);
    HRESULT (__attribute__((__stdcall__)) *SetTimes)(
        IPropertyStorage* This,
        const FILETIME *pctime,
        const FILETIME *patime,
        const FILETIME *pmtime);
    HRESULT (__attribute__((__stdcall__)) *SetClass)(
        IPropertyStorage* This,
        const CLSID* const clsid);
    HRESULT (__attribute__((__stdcall__)) *Stat)(
        IPropertyStorage* This,
        STATPROPSETSTG *statpsstg);
   
} IPropertyStorageVtbl;
struct IPropertyStorage {
    IPropertyStorageVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IPropertyStorage_ReadMultiple_Proxy(
    IPropertyStorage* This,
    ULONG cpspec,
    const PROPSPEC rgpspec[],
    PROPVARIANT rgpropvar[]);
void __attribute__((__stdcall__)) IPropertyStorage_ReadMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_WriteMultiple_Proxy(
    IPropertyStorage* This,
    ULONG cpspec,
    const PROPSPEC rgpspec[],
    const PROPVARIANT rgpropvar[],
    PROPID propidNameFirst);
void __attribute__((__stdcall__)) IPropertyStorage_WriteMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_DeleteMultiple_Proxy(
    IPropertyStorage* This,
    ULONG cpspec,
    const PROPSPEC rgpspec[]);
void __attribute__((__stdcall__)) IPropertyStorage_DeleteMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_ReadPropertyNames_Proxy(
    IPropertyStorage* This,
    ULONG cpropid,
    const PROPID rgpropid[],
    LPOLESTR rglpwstrName[]);
void __attribute__((__stdcall__)) IPropertyStorage_ReadPropertyNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_WritePropertyNames_Proxy(
    IPropertyStorage* This,
    ULONG cpropid,
    const PROPID rgpropid[],
    const LPOLESTR rglpwstrName[]);
void __attribute__((__stdcall__)) IPropertyStorage_WritePropertyNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_DeletePropertyNames_Proxy(
    IPropertyStorage* This,
    ULONG cpropid,
    const PROPID rgpropid[]);
void __attribute__((__stdcall__)) IPropertyStorage_DeletePropertyNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_Commit_Proxy(
    IPropertyStorage* This,
    DWORD grfCommitFlags);
void __attribute__((__stdcall__)) IPropertyStorage_Commit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_Revert_Proxy(
    IPropertyStorage* This);
void __attribute__((__stdcall__)) IPropertyStorage_Revert_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_Enum_Proxy(
    IPropertyStorage* This,
    IEnumSTATPROPSTG **ppenum);
void __attribute__((__stdcall__)) IPropertyStorage_Enum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_SetTimes_Proxy(
    IPropertyStorage* This,
    const FILETIME *pctime,
    const FILETIME *patime,
    const FILETIME *pmtime);
void __attribute__((__stdcall__)) IPropertyStorage_SetTimes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_SetClass_Proxy(
    IPropertyStorage* This,
    const CLSID* const clsid);
void __attribute__((__stdcall__)) IPropertyStorage_SetClass_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_Stat_Proxy(
    IPropertyStorage* This,
    STATPROPSETSTG *statpsstg);
void __attribute__((__stdcall__)) IPropertyStorage_Stat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;
extern const GUID IID_IPropertySetStorage ;
typedef struct IPropertySetStorageVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IPropertySetStorage* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IPropertySetStorage* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IPropertySetStorage* This);
    HRESULT (__attribute__((__stdcall__)) *Create)(
        IPropertySetStorage* This,
        const FMTID* const rfmtid,
        const CLSID *pclsid,
        DWORD grfFlags,
        DWORD grfMode,
        IPropertyStorage **ppprstg);
    HRESULT (__attribute__((__stdcall__)) *Open)(
        IPropertySetStorage* This,
        const FMTID* const rfmtid,
        DWORD grfMode,
        IPropertyStorage **ppprstg);
    HRESULT (__attribute__((__stdcall__)) *Delete)(
        IPropertySetStorage* This,
        const FMTID* const rfmtid);
    HRESULT (__attribute__((__stdcall__)) *Enum)(
        IPropertySetStorage* This,
        IEnumSTATPROPSETSTG **ppenum);
   
} IPropertySetStorageVtbl;
struct IPropertySetStorage {
    IPropertySetStorageVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IPropertySetStorage_Create_Proxy(
    IPropertySetStorage* This,
    const FMTID* const rfmtid,
    const CLSID *pclsid,
    DWORD grfFlags,
    DWORD grfMode,
    IPropertyStorage **ppprstg);
void __attribute__((__stdcall__)) IPropertySetStorage_Create_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertySetStorage_Open_Proxy(
    IPropertySetStorage* This,
    const FMTID* const rfmtid,
    DWORD grfMode,
    IPropertyStorage **ppprstg);
void __attribute__((__stdcall__)) IPropertySetStorage_Open_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertySetStorage_Delete_Proxy(
    IPropertySetStorage* This,
    const FMTID* const rfmtid);
void __attribute__((__stdcall__)) IPropertySetStorage_Delete_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertySetStorage_Enum_Proxy(
    IPropertySetStorage* This,
    IEnumSTATPROPSETSTG **ppenum);
void __attribute__((__stdcall__)) IPropertySetStorage_Enum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;
extern const GUID IID_IEnumSTATPROPSTG ;
typedef struct IEnumSTATPROPSTGVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IEnumSTATPROPSTG* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IEnumSTATPROPSTG* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IEnumSTATPROPSTG* This);
    HRESULT (__attribute__((__stdcall__)) *Next)(
        IEnumSTATPROPSTG* This,
        ULONG celt,
        STATPROPSTG *rgelt,
        ULONG *pceltFetched);
    HRESULT (__attribute__((__stdcall__)) *Skip)(
        IEnumSTATPROPSTG* This,
        ULONG celt);
    HRESULT (__attribute__((__stdcall__)) *Reset)(
        IEnumSTATPROPSTG* This);
    HRESULT (__attribute__((__stdcall__)) *Clone)(
        IEnumSTATPROPSTG* This,
        IEnumSTATPROPSTG **ppenum);
   
} IEnumSTATPROPSTGVtbl;
struct IEnumSTATPROPSTG {
    IEnumSTATPROPSTGVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSTG_RemoteNext_Proxy(
    IEnumSTATPROPSTG* This,
    ULONG celt,
    STATPROPSTG *rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumSTATPROPSTG_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSTG_Skip_Proxy(
    IEnumSTATPROPSTG* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumSTATPROPSTG_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSTG_Reset_Proxy(
    IEnumSTATPROPSTG* This);
void __attribute__((__stdcall__)) IEnumSTATPROPSTG_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSTG_Clone_Proxy(
    IEnumSTATPROPSTG* This,
    IEnumSTATPROPSTG **ppenum);
void __attribute__((__stdcall__)) IEnumSTATPROPSTG_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSTG_Next_Proxy(
    IEnumSTATPROPSTG* This,
    ULONG celt,
    STATPROPSTG *rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSTG_Next_Stub(
    IEnumSTATPROPSTG* This,
    ULONG celt,
    STATPROPSTG *rgelt,
    ULONG *pceltFetched);
typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;
extern const GUID IID_IEnumSTATPROPSETSTG ;
typedef struct IEnumSTATPROPSETSTGVtbl {
   
    HRESULT (__attribute__((__stdcall__)) *QueryInterface)(
        IEnumSTATPROPSETSTG* This,
        const IID* const riid,
        void **ppvObject);
    ULONG (__attribute__((__stdcall__)) *AddRef)(
        IEnumSTATPROPSETSTG* This);
    ULONG (__attribute__((__stdcall__)) *Release)(
        IEnumSTATPROPSETSTG* This);
    HRESULT (__attribute__((__stdcall__)) *Next)(
        IEnumSTATPROPSETSTG* This,
        ULONG celt,
        STATPROPSETSTG *rgelt,
        ULONG *pceltFetched);
    HRESULT (__attribute__((__stdcall__)) *Skip)(
        IEnumSTATPROPSETSTG* This,
        ULONG celt);
    HRESULT (__attribute__((__stdcall__)) *Reset)(
        IEnumSTATPROPSETSTG* This);
    HRESULT (__attribute__((__stdcall__)) *Clone)(
        IEnumSTATPROPSETSTG* This,
        IEnumSTATPROPSETSTG **ppenum);
   
} IEnumSTATPROPSETSTGVtbl;
struct IEnumSTATPROPSETSTG {
    IEnumSTATPROPSETSTGVtbl* lpVtbl;
};
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_RemoteNext_Proxy(
    IEnumSTATPROPSETSTG* This,
    ULONG celt,
    STATPROPSETSTG *rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_Skip_Proxy(
    IEnumSTATPROPSETSTG* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_Reset_Proxy(
    IEnumSTATPROPSETSTG* This);
void __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_Clone_Proxy(
    IEnumSTATPROPSETSTG* This,
    IEnumSTATPROPSETSTG **ppenum);
void __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_Next_Proxy(
    IEnumSTATPROPSETSTG* This,
    ULONG celt,
    STATPROPSETSTG *rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_Next_Stub(
    IEnumSTATPROPSETSTG* This,
    ULONG celt,
    STATPROPSETSTG *rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) FreePropVariantArray(ULONG,PROPVARIANT*);
HRESULT __attribute__((__stdcall__)) PropVariantClear(PROPVARIANT*);
HRESULT __attribute__((__stdcall__)) PropVariantCopy(PROPVARIANT*,const PROPVARIANT*);
HRESULT __attribute__((__stdcall__)) StgCreatePropStg(IUnknown *, const FMTID* const, const CLSID *, DWORD, DWORD, IPropertyStorage **);
HRESULT __attribute__((__stdcall__)) StgOpenPropStg(IUnknown *, const FMTID* const, DWORD, DWORD, IPropertyStorage **);
HRESULT __attribute__((__stdcall__)) StgCreatePropSetStg(IStorage *, DWORD, IPropertySetStorage **);
HRESULT __attribute__((__stdcall__)) FmtIdToPropStgName(const FMTID *, LPOLESTR);
HRESULT __attribute__((__stdcall__)) PropStgNameToFmtId(const LPOLESTR, FMTID *);
ULONG __attribute__((__stdcall__)) BSTR_UserSize (ULONG *, ULONG, BSTR *);
unsigned char * __attribute__((__stdcall__)) BSTR_UserMarshal (ULONG *, unsigned char *, BSTR *);
unsigned char * __attribute__((__stdcall__)) BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void __attribute__((__stdcall__)) BSTR_UserFree (ULONG *, BSTR *);
ULONG __attribute__((__stdcall__)) LPSAFEARRAY_UserSize (ULONG *, ULONG, LPSAFEARRAY *);
unsigned char * __attribute__((__stdcall__)) LPSAFEARRAY_UserMarshal (ULONG *, unsigned char *, LPSAFEARRAY *);
unsigned char * __attribute__((__stdcall__)) LPSAFEARRAY_UserUnmarshal(ULONG *, unsigned char *, LPSAFEARRAY *);
void __attribute__((__stdcall__)) LPSAFEARRAY_UserFree (ULONG *, LPSAFEARRAY *);
extern const GUID IID_StdOle ;
ULONG __attribute__((__stdcall__)) OaBuildVersion(void);
BSTR __attribute__((__stdcall__)) SysAllocString(const OLECHAR*);
BSTR __attribute__((__stdcall__)) SysAllocStringByteLen(LPCSTR,UINT);
BSTR __attribute__((__stdcall__)) SysAllocStringLen(const OLECHAR*,UINT);
void __attribute__((__stdcall__)) SysFreeString(BSTR);
INT __attribute__((__stdcall__)) SysReAllocString(LPBSTR,const OLECHAR*);
int __attribute__((__stdcall__)) SysReAllocStringLen(BSTR*,const OLECHAR*,UINT);
UINT __attribute__((__stdcall__)) SysStringByteLen(BSTR);
UINT __attribute__((__stdcall__)) SysStringLen(BSTR);
HRESULT __attribute__((__stdcall__)) SetErrorInfo(ULONG,IErrorInfo*);
HRESULT __attribute__((__stdcall__)) GetErrorInfo(ULONG,IErrorInfo**);
HRESULT __attribute__((__stdcall__)) CreateErrorInfo(ICreateErrorInfo**);
SAFEARRAY* __attribute__((__stdcall__)) SafeArrayCreate(VARTYPE,UINT,SAFEARRAYBOUND*);
SAFEARRAY* __attribute__((__stdcall__)) SafeArrayCreateEx(VARTYPE,UINT,SAFEARRAYBOUND*,LPVOID);
SAFEARRAY* __attribute__((__stdcall__)) SafeArrayCreateVector(VARTYPE,LONG,ULONG);
SAFEARRAY* __attribute__((__stdcall__)) SafeArrayCreateVectorEx(VARTYPE,LONG,ULONG,LPVOID);
HRESULT __attribute__((__stdcall__)) SafeArrayAllocDescriptor(UINT,SAFEARRAY**);
HRESULT __attribute__((__stdcall__)) SafeArrayAllocDescriptorEx(VARTYPE,UINT,SAFEARRAY**);
HRESULT __attribute__((__stdcall__)) SafeArrayAllocData(SAFEARRAY*);
HRESULT __attribute__((__stdcall__)) SafeArrayDestroyDescriptor(SAFEARRAY*);
HRESULT __attribute__((__stdcall__)) SafeArrayPutElement(SAFEARRAY*,LONG*,void*);
HRESULT __attribute__((__stdcall__)) SafeArrayGetElement(SAFEARRAY*,LONG*,void*);
HRESULT __attribute__((__stdcall__)) SafeArrayLock(SAFEARRAY*);
HRESULT __attribute__((__stdcall__)) SafeArrayUnlock(SAFEARRAY*);
HRESULT __attribute__((__stdcall__)) SafeArrayGetUBound(SAFEARRAY*,UINT,LONG*);
HRESULT __attribute__((__stdcall__)) SafeArrayGetLBound(SAFEARRAY*,UINT,LONG*);
UINT __attribute__((__stdcall__)) SafeArrayGetDim(SAFEARRAY*);
UINT __attribute__((__stdcall__)) SafeArrayGetElemsize(SAFEARRAY*);
HRESULT __attribute__((__stdcall__)) SafeArrayGetVartype(SAFEARRAY*,VARTYPE*);
HRESULT __attribute__((__stdcall__)) SafeArrayAccessData(SAFEARRAY*,void**);
HRESULT __attribute__((__stdcall__)) SafeArrayUnaccessData(SAFEARRAY*);
HRESULT __attribute__((__stdcall__)) SafeArrayPtrOfIndex(SAFEARRAY*,LONG*,void **);
HRESULT __attribute__((__stdcall__)) SafeArrayCopyData(SAFEARRAY*,SAFEARRAY*);
HRESULT __attribute__((__stdcall__)) SafeArrayDestroyData(SAFEARRAY*);
HRESULT __attribute__((__stdcall__)) SafeArrayDestroy(SAFEARRAY*);
HRESULT __attribute__((__stdcall__)) SafeArrayCopy(SAFEARRAY*,SAFEARRAY**);
HRESULT __attribute__((__stdcall__)) SafeArrayRedim(SAFEARRAY*,SAFEARRAYBOUND*);
HRESULT __attribute__((__stdcall__)) SafeArraySetRecordInfo(SAFEARRAY*,IRecordInfo*);
HRESULT __attribute__((__stdcall__)) SafeArrayGetRecordInfo(SAFEARRAY*,IRecordInfo**);
HRESULT __attribute__((__stdcall__)) SafeArraySetIID(SAFEARRAY*,const GUID* const);
HRESULT __attribute__((__stdcall__)) SafeArrayGetIID(SAFEARRAY*,GUID*);
HRESULT __attribute__((__stdcall__)) VectorFromBstr(BSTR,SAFEARRAY**);
HRESULT __attribute__((__stdcall__)) BstrFromVector(SAFEARRAY*,BSTR*);
HRESULT __attribute__((__stdcall__)) RegisterActiveObject(LPUNKNOWN,const CLSID* const,DWORD,LPDWORD);
HRESULT __attribute__((__stdcall__)) RevokeActiveObject(DWORD,LPVOID);
HRESULT __attribute__((__stdcall__)) GetActiveObject(const CLSID* const,LPVOID,LPUNKNOWN*);
HRESULT __attribute__((__stdcall__)) GetRecordInfoFromTypeInfo(ITypeInfo*,IRecordInfo**);
HRESULT __attribute__((__stdcall__)) GetRecordInfoFromGuids(const GUID* const,ULONG,ULONG,LCID,const GUID* const,IRecordInfo**);
void __attribute__((__stdcall__)) VariantInit(VARIANT*);
HRESULT __attribute__((__stdcall__)) VariantClear(VARIANT*);
HRESULT __attribute__((__stdcall__)) VariantCopy(VARIANT*,VARIANT*);
HRESULT __attribute__((__stdcall__)) VariantCopyInd(VARIANT*,VARIANT*);
HRESULT __attribute__((__stdcall__)) VariantChangeType(VARIANT*,VARIANT*,USHORT,VARTYPE);
HRESULT __attribute__((__stdcall__)) VariantChangeTypeEx(VARIANT*,VARIANT*,LCID,USHORT,VARTYPE);
HRESULT __attribute__((__stdcall__)) VarUI1FromI2(SHORT,BYTE*);
HRESULT __attribute__((__stdcall__)) VarUI1FromI4(LONG,BYTE*);
HRESULT __attribute__((__stdcall__)) VarUI1FromI8(LONG64,BYTE*);
HRESULT __attribute__((__stdcall__)) VarUI1FromR4(FLOAT,BYTE*);
HRESULT __attribute__((__stdcall__)) VarUI1FromR8(DOUBLE,BYTE*);
HRESULT __attribute__((__stdcall__)) VarUI1FromDate(DATE,BYTE*);
HRESULT __attribute__((__stdcall__)) VarUI1FromBool(VARIANT_BOOL,BYTE*);
HRESULT __attribute__((__stdcall__)) VarUI1FromI1(signed char,BYTE*);
HRESULT __attribute__((__stdcall__)) VarUI1FromUI2(USHORT,BYTE*);
HRESULT __attribute__((__stdcall__)) VarUI1FromUI4(ULONG,BYTE*);
HRESULT __attribute__((__stdcall__)) VarUI1FromUI8(ULONG64,BYTE*);
HRESULT __attribute__((__stdcall__)) VarUI1FromStr(OLECHAR*,LCID,ULONG,BYTE*);
HRESULT __attribute__((__stdcall__)) VarUI1FromCy(CY,BYTE*);
HRESULT __attribute__((__stdcall__)) VarUI1FromDec(DECIMAL*,BYTE*);
HRESULT __attribute__((__stdcall__)) VarUI1FromDisp(IDispatch*,LCID,BYTE*);
HRESULT __attribute__((__stdcall__)) VarI2FromUI1(BYTE,SHORT*);
HRESULT __attribute__((__stdcall__)) VarI2FromI4(LONG,SHORT*);
HRESULT __attribute__((__stdcall__)) VarI2FromI8(LONG64,SHORT*);
HRESULT __attribute__((__stdcall__)) VarI2FromR4(FLOAT,SHORT*);
HRESULT __attribute__((__stdcall__)) VarI2FromR8(DOUBLE,SHORT*);
HRESULT __attribute__((__stdcall__)) VarI2FromDate(DATE,SHORT*);
HRESULT __attribute__((__stdcall__)) VarI2FromBool(VARIANT_BOOL,SHORT*);
HRESULT __attribute__((__stdcall__)) VarI2FromI1(signed char,SHORT*);
HRESULT __attribute__((__stdcall__)) VarI2FromUI2(USHORT,SHORT*);
HRESULT __attribute__((__stdcall__)) VarI2FromUI4(ULONG,SHORT*);
HRESULT __attribute__((__stdcall__)) VarI2FromUI8(ULONG64,SHORT*);
HRESULT __attribute__((__stdcall__)) VarI2FromStr(OLECHAR*,LCID,ULONG,SHORT*);
HRESULT __attribute__((__stdcall__)) VarI2FromCy(CY,SHORT*);
HRESULT __attribute__((__stdcall__)) VarI2FromDec(DECIMAL*,SHORT*);
HRESULT __attribute__((__stdcall__)) VarI2FromDisp(IDispatch*,LCID,SHORT*);
HRESULT __attribute__((__stdcall__)) VarI4FromUI1(BYTE,LONG*);
HRESULT __attribute__((__stdcall__)) VarI4FromI2(SHORT,LONG*);
HRESULT __attribute__((__stdcall__)) VarI4FromI8(LONG64,LONG*);
HRESULT __attribute__((__stdcall__)) VarI4FromR4(FLOAT,LONG*);
HRESULT __attribute__((__stdcall__)) VarI4FromR8(DOUBLE,LONG*);
HRESULT __attribute__((__stdcall__)) VarI4FromDate(DATE,LONG*);
HRESULT __attribute__((__stdcall__)) VarI4FromBool(VARIANT_BOOL,LONG*);
HRESULT __attribute__((__stdcall__)) VarI4FromI1(signed char,LONG*);
HRESULT __attribute__((__stdcall__)) VarI4FromUI2(USHORT,LONG*);
HRESULT __attribute__((__stdcall__)) VarI4FromUI4(ULONG,LONG*);
HRESULT __attribute__((__stdcall__)) VarI4FromUI8(ULONG64,LONG*);
HRESULT __attribute__((__stdcall__)) VarI4FromStr(OLECHAR*,LCID,ULONG,LONG*);
HRESULT __attribute__((__stdcall__)) VarI4FromCy(CY,LONG*);
HRESULT __attribute__((__stdcall__)) VarI4FromDec(DECIMAL*,LONG*);
HRESULT __attribute__((__stdcall__)) VarI4FromDisp(IDispatch*,LCID,LONG*);
HRESULT __attribute__((__stdcall__)) VarI8FromUI1(BYTE,LONG64*);
HRESULT __attribute__((__stdcall__)) VarI8FromI2(SHORT,LONG64*);
HRESULT __attribute__((__stdcall__)) VarI8FromI4(LONG,LONG64*);
HRESULT __attribute__((__stdcall__)) VarI8FromR4(FLOAT,LONG64*);
HRESULT __attribute__((__stdcall__)) VarI8FromR8(DOUBLE,LONG64*);
HRESULT __attribute__((__stdcall__)) VarI8FromDate(DATE,LONG64*);
HRESULT __attribute__((__stdcall__)) VarI8FromStr(OLECHAR*,LCID,ULONG,LONG64*);
HRESULT __attribute__((__stdcall__)) VarI8FromBool(VARIANT_BOOL,LONG64*);
HRESULT __attribute__((__stdcall__)) VarI8FromI1(signed char,LONG64*);
HRESULT __attribute__((__stdcall__)) VarI8FromUI2(USHORT,LONG64*);
HRESULT __attribute__((__stdcall__)) VarI8FromUI4(ULONG,LONG64*);
HRESULT __attribute__((__stdcall__)) VarI8FromUI8(ULONG64,LONG64*);
HRESULT __attribute__((__stdcall__)) VarI8FromDec(DECIMAL *pdecIn,LONG64*);
HRESULT __attribute__((__stdcall__)) VarI8FromInt(INT intIn,LONG64*);
HRESULT __attribute__((__stdcall__)) VarI8FromCy(CY,LONG64*);
HRESULT __attribute__((__stdcall__)) VarI8FromDisp(IDispatch*,LCID,LONG64*);
HRESULT __attribute__((__stdcall__)) VarR4FromUI1(BYTE,FLOAT*);
HRESULT __attribute__((__stdcall__)) VarR4FromI2(SHORT,FLOAT*);
HRESULT __attribute__((__stdcall__)) VarR4FromI4(LONG,FLOAT*);
HRESULT __attribute__((__stdcall__)) VarR4FromI8(LONG64,FLOAT*);
HRESULT __attribute__((__stdcall__)) VarR4FromR8(DOUBLE,FLOAT*);
HRESULT __attribute__((__stdcall__)) VarR4FromDate(DATE,FLOAT*);
HRESULT __attribute__((__stdcall__)) VarR4FromBool(VARIANT_BOOL,FLOAT*);
HRESULT __attribute__((__stdcall__)) VarR4FromI1(signed char,FLOAT*);
HRESULT __attribute__((__stdcall__)) VarR4FromUI2(USHORT,FLOAT*);
HRESULT __attribute__((__stdcall__)) VarR4FromUI4(ULONG,FLOAT*);
HRESULT __attribute__((__stdcall__)) VarR4FromUI8(ULONG64,FLOAT*);
HRESULT __attribute__((__stdcall__)) VarR4FromStr(OLECHAR*,LCID,ULONG,FLOAT*);
HRESULT __attribute__((__stdcall__)) VarR4FromCy(CY,FLOAT*);
HRESULT __attribute__((__stdcall__)) VarR4FromDec(DECIMAL*,FLOAT*);
HRESULT __attribute__((__stdcall__)) VarR4FromDisp(IDispatch*,LCID,FLOAT*);
HRESULT __attribute__((__stdcall__)) VarR8FromUI1(BYTE,double*);
HRESULT __attribute__((__stdcall__)) VarR8FromI2(SHORT,double*);
HRESULT __attribute__((__stdcall__)) VarR8FromI4(LONG,double*);
HRESULT __attribute__((__stdcall__)) VarR8FromI8(LONG64,double*);
HRESULT __attribute__((__stdcall__)) VarR8FromR4(FLOAT,double*);
HRESULT __attribute__((__stdcall__)) VarR8FromDate(DATE,double*);
HRESULT __attribute__((__stdcall__)) VarR8FromBool(VARIANT_BOOL,double*);
HRESULT __attribute__((__stdcall__)) VarR8FromI1(signed char,double*);
HRESULT __attribute__((__stdcall__)) VarR8FromUI2(USHORT,double*);
HRESULT __attribute__((__stdcall__)) VarR8FromUI4(ULONG,double*);
HRESULT __attribute__((__stdcall__)) VarR8FromUI8(ULONG64,double*);
HRESULT __attribute__((__stdcall__)) VarR8FromStr(OLECHAR*,LCID,ULONG,double*);
HRESULT __attribute__((__stdcall__)) VarR8FromCy(CY,double*);
HRESULT __attribute__((__stdcall__)) VarR8FromDec(const DECIMAL*,double*);
HRESULT __attribute__((__stdcall__)) VarR8FromDisp(IDispatch*,LCID,double*);
HRESULT __attribute__((__stdcall__)) VarDateFromUI1(BYTE,DATE*);
HRESULT __attribute__((__stdcall__)) VarDateFromI2(SHORT,DATE*);
HRESULT __attribute__((__stdcall__)) VarDateFromI4(LONG,DATE*);
HRESULT __attribute__((__stdcall__)) VarDateFromI8(LONG64,DATE*);
HRESULT __attribute__((__stdcall__)) VarDateFromR4(FLOAT,DATE*);
HRESULT __attribute__((__stdcall__)) VarDateFromR8(DOUBLE,DATE*);
HRESULT __attribute__((__stdcall__)) VarDateFromStr(OLECHAR*,LCID,ULONG,DATE*);
HRESULT __attribute__((__stdcall__)) VarDateFromI1(signed char,DATE*);
HRESULT __attribute__((__stdcall__)) VarDateFromUI2(USHORT,DATE*);
HRESULT __attribute__((__stdcall__)) VarDateFromUI4(ULONG,DATE*);
HRESULT __attribute__((__stdcall__)) VarDateFromUI8(ULONG64,DATE*);
HRESULT __attribute__((__stdcall__)) VarDateFromBool(VARIANT_BOOL,DATE*);
HRESULT __attribute__((__stdcall__)) VarDateFromCy(CY,DATE*);
HRESULT __attribute__((__stdcall__)) VarDateFromDec(DECIMAL*,DATE*);
HRESULT __attribute__((__stdcall__)) VarDateFromDisp(IDispatch*,LCID,DATE*);
HRESULT __attribute__((__stdcall__)) VarCyFromUI1(BYTE,CY*);
HRESULT __attribute__((__stdcall__)) VarCyFromI2(SHORT sIn,CY*);
HRESULT __attribute__((__stdcall__)) VarCyFromI4(LONG,CY*);
HRESULT __attribute__((__stdcall__)) VarCyFromI8(LONG64,CY*);
HRESULT __attribute__((__stdcall__)) VarCyFromR4(FLOAT,CY*);
HRESULT __attribute__((__stdcall__)) VarCyFromR8(DOUBLE,CY*);
HRESULT __attribute__((__stdcall__)) VarCyFromDate(DATE,CY*);
HRESULT __attribute__((__stdcall__)) VarCyFromStr(OLECHAR*,LCID,ULONG,CY*);
HRESULT __attribute__((__stdcall__)) VarCyFromBool(VARIANT_BOOL,CY*);
HRESULT __attribute__((__stdcall__)) VarCyFromI1(signed char,CY*);
HRESULT __attribute__((__stdcall__)) VarCyFromUI2(USHORT,CY*);
HRESULT __attribute__((__stdcall__)) VarCyFromUI4(ULONG,CY*);
HRESULT __attribute__((__stdcall__)) VarCyFromUI8(ULONG64,CY*);
HRESULT __attribute__((__stdcall__)) VarCyFromDec(DECIMAL*,CY*);
HRESULT __attribute__((__stdcall__)) VarCyFromDisp(IDispatch*,LCID,CY*);
HRESULT __attribute__((__stdcall__)) VarBstrFromUI1(BYTE,LCID,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarBstrFromI2(SHORT,LCID,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarBstrFromI4(LONG,LCID,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarBstrFromI8(LONG64,LCID,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarBstrFromR4(FLOAT,LCID,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarBstrFromR8(DOUBLE,LCID,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarBstrFromDate(DATE,LCID,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarBstrFromBool(VARIANT_BOOL,LCID,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarBstrFromI1(signed char,LCID,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarBstrFromUI2(USHORT,LCID,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarBstrFromUI8(ULONG64,LCID,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarBstrFromUI4(ULONG,LCID,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarBstrFromCy(CY,LCID,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarBstrFromDec(DECIMAL*,LCID,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarBstrFromDisp(IDispatch*,LCID,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarBoolFromUI1(BYTE,VARIANT_BOOL*);
HRESULT __attribute__((__stdcall__)) VarBoolFromI2(SHORT,VARIANT_BOOL*);
HRESULT __attribute__((__stdcall__)) VarBoolFromI4(LONG,VARIANT_BOOL*);
HRESULT __attribute__((__stdcall__)) VarBoolFromI8(LONG64,VARIANT_BOOL*);
HRESULT __attribute__((__stdcall__)) VarBoolFromR4(FLOAT,VARIANT_BOOL*);
HRESULT __attribute__((__stdcall__)) VarBoolFromR8(DOUBLE,VARIANT_BOOL*);
HRESULT __attribute__((__stdcall__)) VarBoolFromDate(DATE,VARIANT_BOOL*);
HRESULT __attribute__((__stdcall__)) VarBoolFromStr(OLECHAR*,LCID,ULONG,VARIANT_BOOL*);
HRESULT __attribute__((__stdcall__)) VarBoolFromI1(signed char,VARIANT_BOOL*);
HRESULT __attribute__((__stdcall__)) VarBoolFromUI2(USHORT,VARIANT_BOOL*);
HRESULT __attribute__((__stdcall__)) VarBoolFromUI4(ULONG,VARIANT_BOOL*);
HRESULT __attribute__((__stdcall__)) VarBoolFromUI8(ULONG64,VARIANT_BOOL*);
HRESULT __attribute__((__stdcall__)) VarBoolFromCy(CY,VARIANT_BOOL*);
HRESULT __attribute__((__stdcall__)) VarBoolFromDec(DECIMAL*,VARIANT_BOOL*);
HRESULT __attribute__((__stdcall__)) VarBoolFromDisp(IDispatch*,LCID,VARIANT_BOOL*);
HRESULT __attribute__((__stdcall__)) VarI1FromUI1(BYTE,signed char*);
HRESULT __attribute__((__stdcall__)) VarI1FromI2(SHORT,signed char*);
HRESULT __attribute__((__stdcall__)) VarI1FromI4(LONG,signed char*);
HRESULT __attribute__((__stdcall__)) VarI1FromI8(LONG64,signed char*);
HRESULT __attribute__((__stdcall__)) VarI1FromR4(FLOAT,signed char*);
HRESULT __attribute__((__stdcall__)) VarI1FromR8(DOUBLE,signed char*);
HRESULT __attribute__((__stdcall__)) VarI1FromDate(DATE,signed char*);
HRESULT __attribute__((__stdcall__)) VarI1FromStr(OLECHAR*,LCID,ULONG,signed char*);
HRESULT __attribute__((__stdcall__)) VarI1FromBool(VARIANT_BOOL,signed char*);
HRESULT __attribute__((__stdcall__)) VarI1FromUI2(USHORT,signed char*);
HRESULT __attribute__((__stdcall__)) VarI1FromUI4(ULONG,signed char*);
HRESULT __attribute__((__stdcall__)) VarI1FromUI8(ULONG64,signed char*);
HRESULT __attribute__((__stdcall__)) VarI1FromCy(CY,signed char*);
HRESULT __attribute__((__stdcall__)) VarI1FromDec(DECIMAL*,signed char*);
HRESULT __attribute__((__stdcall__)) VarI1FromDisp(IDispatch*,LCID,signed char*);
HRESULT __attribute__((__stdcall__)) VarUI2FromUI1(BYTE,USHORT*);
HRESULT __attribute__((__stdcall__)) VarUI2FromI2(SHORT,USHORT*);
HRESULT __attribute__((__stdcall__)) VarUI2FromI4(LONG,USHORT*);
HRESULT __attribute__((__stdcall__)) VarUI2FromI8(LONG64,USHORT*);
HRESULT __attribute__((__stdcall__)) VarUI2FromR4(FLOAT,USHORT*);
HRESULT __attribute__((__stdcall__)) VarUI2FromR8(DOUBLE,USHORT*);
HRESULT __attribute__((__stdcall__)) VarUI2FromDate(DATE,USHORT*);
HRESULT __attribute__((__stdcall__)) VarUI2FromStr(OLECHAR*,LCID,ULONG,USHORT*);
HRESULT __attribute__((__stdcall__)) VarUI2FromBool(VARIANT_BOOL,USHORT*);
HRESULT __attribute__((__stdcall__)) VarUI2FromI1(signed char,USHORT*);
HRESULT __attribute__((__stdcall__)) VarUI2FromUI4(ULONG,USHORT*);
HRESULT __attribute__((__stdcall__)) VarUI2FromUI8(ULONG64,USHORT*);
HRESULT __attribute__((__stdcall__)) VarUI2FromCy(CY,USHORT*);
HRESULT __attribute__((__stdcall__)) VarUI2FromDec(DECIMAL*,USHORT*);
HRESULT __attribute__((__stdcall__)) VarUI2FromDisp(IDispatch*,LCID,USHORT*);
HRESULT __attribute__((__stdcall__)) VarUI4FromStr(OLECHAR*,LCID,ULONG,ULONG*);
HRESULT __attribute__((__stdcall__)) VarUI4FromUI1(BYTE,ULONG*);
HRESULT __attribute__((__stdcall__)) VarUI4FromI2(SHORT,ULONG*);
HRESULT __attribute__((__stdcall__)) VarUI4FromI4(LONG,ULONG*);
HRESULT __attribute__((__stdcall__)) VarUI4FromI8(LONG64,ULONG*);
HRESULT __attribute__((__stdcall__)) VarUI4FromR4(FLOAT,ULONG*);
HRESULT __attribute__((__stdcall__)) VarUI4FromR8(DOUBLE,ULONG*);
HRESULT __attribute__((__stdcall__)) VarUI4FromDate(DATE,ULONG*);
HRESULT __attribute__((__stdcall__)) VarUI4FromBool(VARIANT_BOOL,ULONG*);
HRESULT __attribute__((__stdcall__)) VarUI4FromI1(signed char,ULONG*);
HRESULT __attribute__((__stdcall__)) VarUI4FromUI2(USHORT,ULONG*);
HRESULT __attribute__((__stdcall__)) VarUI4FromUI8(ULONG64,ULONG*);
HRESULT __attribute__((__stdcall__)) VarUI4FromCy(CY,ULONG*);
HRESULT __attribute__((__stdcall__)) VarUI4FromDec(DECIMAL*,ULONG*);
HRESULT __attribute__((__stdcall__)) VarUI4FromDisp(IDispatch*,LCID,ULONG*);
HRESULT __attribute__((__stdcall__)) VarUI8FromUI1(BYTE,ULONG64*);
HRESULT __attribute__((__stdcall__)) VarUI8FromI2(SHORT,ULONG64*);
HRESULT __attribute__((__stdcall__)) VarUI8FromI4(LONG,ULONG64*);
HRESULT __attribute__((__stdcall__)) VarUI8FromI8(LONG64,ULONG64*);
HRESULT __attribute__((__stdcall__)) VarUI8FromR4(FLOAT,ULONG64*);
HRESULT __attribute__((__stdcall__)) VarUI8FromR8(DOUBLE,ULONG64*);
HRESULT __attribute__((__stdcall__)) VarUI8FromDate(DATE,ULONG64*);
HRESULT __attribute__((__stdcall__)) VarUI8FromStr(OLECHAR*,LCID,ULONG,ULONG64*);
HRESULT __attribute__((__stdcall__)) VarUI8FromBool(VARIANT_BOOL,ULONG64*);
HRESULT __attribute__((__stdcall__)) VarUI8FromI1(signed char,ULONG64*);
HRESULT __attribute__((__stdcall__)) VarUI8FromUI2(USHORT,ULONG64*);
HRESULT __attribute__((__stdcall__)) VarUI8FromUI4(ULONG,ULONG64*);
HRESULT __attribute__((__stdcall__)) VarUI8FromDec(DECIMAL*,ULONG64*);
HRESULT __attribute__((__stdcall__)) VarUI8FromInt(INT,ULONG64*);
HRESULT __attribute__((__stdcall__)) VarUI8FromCy(CY,ULONG64*);
HRESULT __attribute__((__stdcall__)) VarUI8FromDisp(IDispatch*,LCID,ULONG64*);
HRESULT __attribute__((__stdcall__)) VarDecFromUI1(BYTE,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecFromI2(SHORT,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecFromI4(LONG,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecFromI8(LONG64,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecFromR4(FLOAT,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecFromR8(DOUBLE,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecFromDate(DATE,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecFromStr(OLECHAR*,LCID,ULONG,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecFromBool(VARIANT_BOOL,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecFromI1(signed char,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecFromUI2(USHORT,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecFromUI4(ULONG,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecFromUI8(ULONG64,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecFromCy(CY,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecFromDisp(IDispatch*,LCID,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarR4CmpR8(float,double);
HRESULT __attribute__((__stdcall__)) VarR8Pow(double,double,double*);
HRESULT __attribute__((__stdcall__)) VarR8Round(double,int,double*);
HRESULT __attribute__((__stdcall__)) VarDecAbs(const DECIMAL*,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecAdd(const DECIMAL*,const DECIMAL*,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecCmp(const DECIMAL*,const DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecCmpR8(const DECIMAL*,DOUBLE);
HRESULT __attribute__((__stdcall__)) VarDecDiv(const DECIMAL*,const DECIMAL*,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecFix(const DECIMAL*,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecInt(const DECIMAL*,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecMul(const DECIMAL*,const DECIMAL*,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecNeg(const DECIMAL*,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecRound(const DECIMAL*,int,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarDecSub(const DECIMAL*,const DECIMAL*,DECIMAL*);
HRESULT __attribute__((__stdcall__)) VarCyAbs(const CY,CY*);
HRESULT __attribute__((__stdcall__)) VarCyAdd(const CY,const CY,CY*);
HRESULT __attribute__((__stdcall__)) VarCyCmp(const CY,const CY);
HRESULT __attribute__((__stdcall__)) VarCyCmpR8(const CY,DOUBLE);
HRESULT __attribute__((__stdcall__)) VarCyFix(const CY,CY*);
HRESULT __attribute__((__stdcall__)) VarCyInt(const CY,CY*);
HRESULT __attribute__((__stdcall__)) VarCyMul(const CY,CY,CY*);
HRESULT __attribute__((__stdcall__)) VarCyMulI4(const CY,LONG,CY*);
HRESULT __attribute__((__stdcall__)) VarCyMulI8(const CY,LONG64,CY*);
HRESULT __attribute__((__stdcall__)) VarCyNeg(const CY,CY*);
HRESULT __attribute__((__stdcall__)) VarCyRound(const CY,INT,CY*);
HRESULT __attribute__((__stdcall__)) VarCySub(const CY,const CY,CY*);
HRESULT __attribute__((__stdcall__)) VarAdd(LPVARIANT,LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarAnd(LPVARIANT,LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarCat(LPVARIANT,LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarDiv(LPVARIANT,LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarEqv(LPVARIANT,LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarIdiv(LPVARIANT,LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarImp(LPVARIANT,LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarMod(LPVARIANT,LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarMul(LPVARIANT,LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarOr(LPVARIANT,LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarPow(LPVARIANT,LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarSub(LPVARIANT,LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarXor(LPVARIANT,LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarAbs(LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarFix(LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarInt(LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarNeg(LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarNot(LPVARIANT,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarRound(LPVARIANT,int,LPVARIANT);
HRESULT __attribute__((__stdcall__)) VarCmp(LPVARIANT,LPVARIANT,LCID,ULONG);
HRESULT __attribute__((__stdcall__)) VarBstrCmp(BSTR,BSTR,LCID,ULONG);
HRESULT __attribute__((__stdcall__)) VarBstrCat(BSTR,BSTR,BSTR*);
typedef struct {
    SYSTEMTIME st;
    USHORT wDayOfYear;
} UDATE;
typedef struct
{
    INT cDig;
    ULONG dwInFlags;
    ULONG dwOutFlags;
    INT cchUsed;
    INT nBaseShift;
    INT nPwr10;
} NUMPARSE;
HRESULT __attribute__((__stdcall__)) VarParseNumFromStr(OLECHAR*,LCID,ULONG,NUMPARSE*,BYTE*);
HRESULT __attribute__((__stdcall__)) VarNumFromParseNum(NUMPARSE*,BYTE*,ULONG,VARIANT*);
INT __attribute__((__stdcall__)) DosDateTimeToVariantTime(USHORT,USHORT,double*);
INT __attribute__((__stdcall__)) VariantTimeToDosDateTime(double,USHORT*,USHORT*);
INT __attribute__((__stdcall__)) VariantTimeToSystemTime(DOUBLE,LPSYSTEMTIME);
INT __attribute__((__stdcall__)) SystemTimeToVariantTime(LPSYSTEMTIME,double*);
HRESULT __attribute__((__stdcall__)) VarDateFromUdate(UDATE*,ULONG,DATE*);
HRESULT __attribute__((__stdcall__)) VarDateFromUdateEx(UDATE*,LCID,ULONG,DATE*);
HRESULT __attribute__((__stdcall__)) VarUdateFromDate(DATE,ULONG,UDATE*);
HRESULT __attribute__((__stdcall__)) VarWeekdayName(int,int,int,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarMonthName(int,int,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) GetAltMonthNames(LCID,LPOLESTR**);
HRESULT __attribute__((__stdcall__)) VarFormat(LPVARIANT,LPOLESTR,int,int,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarFormatCurrency(LPVARIANT,int,int,int,int,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarFormatDateTime(LPVARIANT,int,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarFormatNumber(LPVARIANT,int,int,int,int,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarFormatPercent(LPVARIANT,int,int,int,int,ULONG,BSTR*);
HRESULT __attribute__((__stdcall__)) VarFormatFromTokens(LPVARIANT,LPOLESTR,LPBYTE,ULONG,BSTR*,LCID);
HRESULT __attribute__((__stdcall__)) VarTokenizeFormatString(LPOLESTR,LPBYTE,int,int,int,LCID,int*);
typedef struct tagPARAMDATA
{
    OLECHAR *szName;
    VARTYPE vt;
} PARAMDATA, *LPPARAMDATA;
typedef struct tagMETHODDATA
{
    OLECHAR *szName;
    PARAMDATA *ppdata;
    DISPID dispid;
    UINT iMeth;
    CALLCONV cc;
    UINT cArgs;
    WORD wFlags;
    VARTYPE vtReturn;
} METHODDATA, *LPMETHODDATA;
typedef struct tagINTERFACEDATA
{
    METHODDATA *pmethdata;
    UINT cMembers;
} INTERFACEDATA, *LPINTERFACEDATA;
typedef enum tagREGKIND
{
    REGKIND_DEFAULT,
    REGKIND_REGISTER,
    REGKIND_NONE
} REGKIND;
HRESULT __attribute__((__stdcall__)) DispGetParam(DISPPARAMS*,UINT,VARTYPE,VARIANT*,UINT*);
HRESULT __attribute__((__stdcall__)) DispGetIDsOfNames(ITypeInfo*,OLECHAR**,UINT,DISPID*);
HRESULT __attribute__((__stdcall__)) DispInvoke(void*,ITypeInfo*,DISPID,WORD,DISPPARAMS*,VARIANT*,
                          EXCEPINFO*,UINT*);
HRESULT __attribute__((__stdcall__)) CreateDispTypeInfo(INTERFACEDATA*,LCID,ITypeInfo**);
HRESULT __attribute__((__stdcall__)) CreateStdDispatch(IUnknown*,void*,ITypeInfo*,IUnknown**);
HRESULT __attribute__((__stdcall__)) DispCallFunc(void*,ULONG_PTR,CALLCONV,VARTYPE,UINT,VARTYPE*,
                            VARIANTARG**,VARIANT*);
ULONG __attribute__((__stdcall__)) LHashValOfNameSysA(SYSKIND,LCID,LPCSTR);
ULONG __attribute__((__stdcall__)) LHashValOfNameSys(SYSKIND,LCID,LPCOLESTR);
HRESULT __attribute__((__stdcall__)) CreateTypeLib(SYSKIND,const OLECHAR*,ICreateTypeLib**);
HRESULT __attribute__((__stdcall__)) CreateTypeLib2(SYSKIND,LPCOLESTR,ICreateTypeLib2**);
HRESULT __attribute__((__stdcall__)) LoadRegTypeLib(const GUID* const,WORD,WORD,LCID,ITypeLib**);
HRESULT __attribute__((__stdcall__)) LoadTypeLib(const OLECHAR*,ITypeLib**);
HRESULT __attribute__((__stdcall__)) LoadTypeLibEx(LPCOLESTR,REGKIND,ITypeLib**);
HRESULT __attribute__((__stdcall__)) QueryPathOfRegTypeLib(const GUID* const,WORD,WORD,LCID,LPBSTR);
HRESULT __attribute__((__stdcall__)) RegisterTypeLib(ITypeLib*,OLECHAR*,OLECHAR*);
HRESULT __attribute__((__stdcall__)) UnRegisterTypeLib(const GUID* const,WORD,WORD,LCID,SYSKIND);
HRESULT __attribute__((__stdcall__)) RegisterTypeLibForUser(ITypeLib*,OLECHAR*,OLECHAR*);
HRESULT __attribute__((__stdcall__)) UnRegisterTypeLibForUser(const GUID* const,WORD,WORD,LCID,SYSKIND);
void __attribute__((__stdcall__)) ClearCustData(LPCUSTDATA);
struct tagMSG;
HRESULT __attribute__((__stdcall__)) RegisterDragDrop(HWND,LPDROPTARGET);
HRESULT __attribute__((__stdcall__)) RevokeDragDrop(HWND);
HRESULT __attribute__((__stdcall__)) DoDragDrop(LPDATAOBJECT,LPDROPSOURCE,DWORD,DWORD*);
HRESULT __attribute__((__stdcall__)) OleLoadFromStream(IStream *pStm,const IID* const iidInterface,void** ppvObj);
HRESULT __attribute__((__stdcall__)) OleSaveToStream(IPersistStream *pPStm,IStream *pStm);
HOLEMENU __attribute__((__stdcall__)) OleCreateMenuDescriptor(HMENU hmenuCombined,LPOLEMENUGROUPWIDTHS lpMenuWidths);
HRESULT __attribute__((__stdcall__)) OleDestroyMenuDescriptor(HOLEMENU hmenuDescriptor);
HRESULT __attribute__((__stdcall__)) OleSetMenuDescriptor(HOLEMENU hmenuDescriptor,HWND hwndFrame,HWND hwndActiveObject,LPOLEINPLACEFRAME lpFrame,LPOLEINPLACEACTIVEOBJECT lpActiveObject);
HRESULT __attribute__((__stdcall__)) WriteClassStg(IStorage *pstg, const CLSID* const rclsid);
HRESULT __attribute__((__stdcall__)) ReadClassStg(IStorage *pstg,CLSID *pclsid);
HRESULT __attribute__((__stdcall__)) WriteClassStm(IStream *pStm,const CLSID* const rclsid);
HRESULT __attribute__((__stdcall__)) ReadClassStm(IStream *pStm,CLSID *pclsid);
HRESULT __attribute__((__stdcall__)) OleSave(LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad);
HRESULT __attribute__((__stdcall__)) OleRegGetUserType(const CLSID* const clsid,
         DWORD dwFormOfType,
         LPOLESTR* pszUserType);
HRESULT __attribute__((__stdcall__)) OleRegGetMiscStatus (const CLSID* const clsid, DWORD dwAspect, DWORD* pdwStatus);
HRESULT __attribute__((__stdcall__)) OleRegEnumFormatEtc (const CLSID* const clsid,
     DWORD dwDirection,
     LPENUMFORMATETC* ppenumFormatetc);
HRESULT __attribute__((__stdcall__)) CreateStreamOnHGlobal (HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM* ppstm);
HRESULT __attribute__((__stdcall__)) GetHGlobalFromStream(LPSTREAM pstm, HGLOBAL* phglobal);
HRESULT __attribute__((__stdcall__)) OleRegEnumVerbs (const CLSID* const clsid, LPENUMOLEVERB* ppenum);
BOOL __attribute__((__stdcall__)) OleIsRunning(LPOLEOBJECT pObject);
HRESULT __attribute__((__stdcall__)) OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID* const riid,
                DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                LPVOID* ppvObj);
HRESULT __attribute__((__stdcall__)) OleSetContainedObject(LPUNKNOWN pUnknown, BOOL fContained);
HRESULT __attribute__((__stdcall__)) OleNoteObjectVisible(LPUNKNOWN pUnknown, BOOL fVisible);
HRESULT __attribute__((__stdcall__)) OleQueryLinkFromData(IDataObject* pSrcDataObject);
HRESULT __attribute__((__stdcall__)) OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject);
HRESULT __attribute__((__stdcall__)) OleRun(LPUNKNOWN pUnknown);
HRESULT __attribute__((__stdcall__)) OleDraw(LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds);
void __attribute__((__stdcall__)) ReleaseStgMedium(LPSTGMEDIUM);
HRESULT __attribute__((__stdcall__)) OleGetClipboard(IDataObject** ppDataObj);
HRESULT __attribute__((__stdcall__)) OleIsCurrentClipboard(LPDATAOBJECT);
HRESULT __attribute__((__stdcall__)) OleSetClipboard(LPDATAOBJECT);
HRESULT __attribute__((__stdcall__)) OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID* const iid,
                DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT __attribute__((__stdcall__)) ReadFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT* pcf, LPOLESTR* lplpszUserType);
HRESULT __attribute__((__stdcall__)) OleLoad(LPSTORAGE pStg, const IID* const riid, LPOLECLIENTSITE pClientSite, LPVOID* ppvObj);
HRESULT __attribute__((__stdcall__)) GetHGlobalFromILockBytes(LPLOCKBYTES plkbyt, HGLOBAL* phglobal);
HRESULT __attribute__((__stdcall__)) CreateILockBytesOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPLOCKBYTES* pplkbyt);
HRESULT __attribute__((__stdcall__)) CreateDataAdviseHolder(LPDATAADVISEHOLDER* ppDAHolder);
HGLOBAL __attribute__((__stdcall__)) OleGetIconOfClass(const CLSID* const rclsid, LPOLESTR lpszLabel, BOOL fUseTypeAsLabel);
HGLOBAL __attribute__((__stdcall__)) OleGetIconOfFile(LPOLESTR lpszPath, BOOL fUseFileAsLabel);
HGLOBAL __attribute__((__stdcall__)) OleMetafilePictFromIconAndLabel(HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex);
HRESULT __attribute__((__stdcall__)) OleLockRunning(LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses);
HRESULT __attribute__((__stdcall__)) OleCreateFromFile(const CLSID* const rclsid, LPCOLESTR lpszFileName, const IID* const riid,
                DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT __attribute__((__stdcall__)) OleCreateLink(LPMONIKER pmkLinkSrc, const IID* const riid, DWORD renderopt, LPFORMATETC lpFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT __attribute__((__stdcall__)) OleCreate(const CLSID* const rclsid, const IID* const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT __attribute__((__stdcall__)) OleFlushClipboard(void);
HRESULT __attribute__((__stdcall__)) GetConvertStg(LPSTORAGE pStg);
HRESULT __attribute__((__stdcall__)) SetConvertStg(LPSTORAGE pStg, BOOL fConvert);
BOOL __attribute__((__stdcall__)) IsAccelerator(HACCEL hAccel, int cAccelEntries, struct tagMSG* lpMsg, WORD* lpwCmd);
HRESULT __attribute__((__stdcall__)) OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID* const riid, DWORD renderopt, LPFORMATETC lpFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HANDLE __attribute__((__stdcall__)) OleDuplicateData(HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags);
HRESULT __attribute__((__stdcall__)) WriteFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType);
HRESULT __attribute__((__stdcall__)) OleTranslateAccelerator (LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, struct tagMSG* lpmsg);
HRESULT __attribute__((__stdcall__)) OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID* const riid, DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT __attribute__((__stdcall__)) OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID* const riid, DWORD dwFlags, DWORD renderopt, ULONG num_formats,
                                       DWORD *adv_flags, LPFORMATETC fmts, IAdviseSink *sink, DWORD *conns,
                                       LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT __attribute__((__stdcall__)) OleCreateDefaultHandler(const CLSID* const clsid,
        LPUNKNOWN pUnkOuter,
        const IID* const riid,
        LPVOID* ppvObj);
HRESULT __attribute__((__stdcall__)) OleCreateEmbeddingHelper(const CLSID* const clsid,
        LPUNKNOWN pUnkOuter,
        DWORD flags,
        IClassFactory *pCF,
        const IID* const riid,
        LPVOID* ppvObj);
HRESULT __attribute__((__stdcall__)) CreateOleAdviseHolder (LPOLEADVISEHOLDER *ppOAHolder);
HRESULT __attribute__((__stdcall__)) OleInitialize(LPVOID pvReserved);
void __attribute__((__stdcall__)) OleUninitialize(void);
BOOL __attribute__((__stdcall__)) IsValidInterface(LPUNKNOWN punk);
DWORD __attribute__((__stdcall__)) OleBuildVersion(void);
typedef struct _OLESTREAM* LPOLESTREAM;
typedef struct _OLESTREAMVTBL {
 DWORD (__attribute__((__stdcall__)) *Get)(LPOLESTREAM,LPSTR,DWORD);
 DWORD (__attribute__((__stdcall__)) *Put)(LPOLESTREAM,LPSTR,DWORD);
} OLESTREAMVTBL;
typedef OLESTREAMVTBL* LPOLESTREAMVTBL;
typedef struct _OLESTREAM {
 LPOLESTREAMVTBL lpstbl;
} OLESTREAM;
HRESULT __attribute__((__stdcall__)) OleConvertOLESTREAMToIStorage( LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE* ptd);
HRESULT __attribute__((__stdcall__)) OleConvertIStorageToOLESTREAM( LPSTORAGE pstg, LPOLESTREAM lpolestream);
HRESULT __attribute__((__stdcall__)) OleDoAutoConvert( LPSTORAGE pStg, LPCLSID pClsidNew );
HRESULT __attribute__((__stdcall__)) OleGetAutoConvert( const CLSID* const clsidOld, LPCLSID pClsidNew );
HRESULT __attribute__((__stdcall__)) OleSetAutoConvert( const CLSID* const clsidOld, const CLSID* const clsidNew );
struct _PROPSHEETPAGEA;
struct _PROPSHEETPAGEW;
struct _PSP;
typedef struct _PSP *HPROPSHEETPAGE;
typedef UINT (__attribute__((__stdcall__)) *LPFNPSPCALLBACKA)(HWND, UINT, struct _PROPSHEETPAGEA*);
typedef UINT (__attribute__((__stdcall__)) *LPFNPSPCALLBACKW)(HWND, UINT, struct _PROPSHEETPAGEW*);
typedef INT (__attribute__((__stdcall__)) *PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);
typedef BOOL (__attribute__((__stdcall__)) *LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM);
typedef BOOL (__attribute__((__stdcall__)) *LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);
typedef struct _PROPSHEETPAGEA
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    union
    {
        LPCSTR pszTemplate;
        LPCDLGTEMPLATEA pResource;
    };
    union
    {
        HICON hIcon;
        LPCSTR pszIcon;
    };
    LPCSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKA pfnCallback;
    UINT* pcRefParent;
    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;
} PROPSHEETPAGEA, *LPPROPSHEETPAGEA;
typedef const PROPSHEETPAGEA *LPCPROPSHEETPAGEA;
typedef struct _PROPSHEETPAGEW
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    union
    {
        LPCWSTR pszTemplate;
        LPCDLGTEMPLATEW pResource;
    };
    union
    {
        HICON hIcon;
        LPCWSTR pszIcon;
    };
    LPCWSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKW pfnCallback;
    UINT* pcRefParent;
    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;
} PROPSHEETPAGEW, *LPPROPSHEETPAGEW;
typedef const PROPSHEETPAGEW *LPCPROPSHEETPAGEW;
typedef struct _PROPSHEETHEADERA
{
    DWORD dwSize;
    DWORD dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    union
    {
      HICON hIcon;
      LPCSTR pszIcon;
    };
    LPCSTR pszCaption;
    UINT nPages;
    union
    {
        UINT nStartPage;
        LPCSTR pStartPage;
    };
    union
    {
        LPCPROPSHEETPAGEA ppsp;
        HPROPSHEETPAGE* phpage;
    };
    PFNPROPSHEETCALLBACK pfnCallback;
    union
    {
        HBITMAP hbmWatermark;
        LPCSTR pszbmWatermark;
    };
    HPALETTE hplWatermark;
    union
    {
        HBITMAP hbmHeader;
        LPCSTR pszbmHeader;
    };
} PROPSHEETHEADERA, *LPPROPSHEETHEADERA;
typedef const PROPSHEETHEADERA *LPCPROPSHEETHEADERA;
typedef struct _PROPSHEETHEADERW
{
    DWORD dwSize;
    DWORD dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    union
    {
      HICON hIcon;
      LPCWSTR pszIcon;
    };
    LPCWSTR pszCaption;
    UINT nPages;
    union
    {
        UINT nStartPage;
        LPCWSTR pStartPage;
    };
    union
    {
        LPCPROPSHEETPAGEW ppsp;
        HPROPSHEETPAGE* phpage;
    };
    PFNPROPSHEETCALLBACK pfnCallback;
    union
    {
        HBITMAP hbmWatermark;
        LPCWSTR pszbmWatermark;
    };
    HPALETTE hplWatermark;
    union
    {
        HBITMAP hbmHeader;
        LPCWSTR pszbmHeader;
    };
} PROPSHEETHEADERW, *LPPROPSHEETHEADERW;
typedef const PROPSHEETHEADERW *LPCPROPSHEETHEADERW;
INT_PTR __attribute__((__stdcall__)) PropertySheetA(LPCPROPSHEETHEADERA);
INT_PTR __attribute__((__stdcall__)) PropertySheetW(LPCPROPSHEETHEADERW);
HPROPSHEETPAGE __attribute__((__stdcall__)) CreatePropertySheetPageA(LPCPROPSHEETPAGEA);
HPROPSHEETPAGE __attribute__((__stdcall__)) CreatePropertySheetPageW(LPCPROPSHEETPAGEW);
BOOL __attribute__((__stdcall__)) DestroyPropertySheetPage(HPROPSHEETPAGE hPropPage);
typedef PROPSHEETPAGEA PROPSHEETPAGE;
typedef LPPROPSHEETPAGEA LPPROPSHEETPAGE;
typedef LPCPROPSHEETPAGEA LPCPROPSHEETPAGE;
typedef PROPSHEETHEADERA PROPSHEETHEADER;
typedef LPPROPSHEETHEADERA LPPROPSHEETHEADER;
typedef LPCPROPSHEETHEADERA LPCPROPSHEETHEADER;
typedef LPFNPSPCALLBACKA LPFNPSPCALLBACK;
typedef struct _PSHNOTIFY
{
   NMHDR hdr;
   LPARAM lParam;
} PSHNOTIFY, *LPPSHNOTIFY;

typedef UINT_PTR (__attribute__((__stdcall__)) *LPOFNHOOKPROC)(HWND,UINT,WPARAM,LPARAM);
typedef struct tagOFNA {
 DWORD lStructSize;
 HWND hwndOwner;
 HINSTANCE hInstance;
 LPCSTR lpstrFilter;
 LPSTR lpstrCustomFilter;
 DWORD nMaxCustFilter;
 DWORD nFilterIndex;
 LPSTR lpstrFile;
 DWORD nMaxFile;
 LPSTR lpstrFileTitle;
 DWORD nMaxFileTitle;
 LPCSTR lpstrInitialDir;
 LPCSTR lpstrTitle;
 DWORD Flags;
 WORD nFileOffset;
 WORD nFileExtension;
 LPCSTR lpstrDefExt;
 LPARAM lCustData;
 LPOFNHOOKPROC lpfnHook;
 LPCSTR lpTemplateName;
} OPENFILENAMEA,*LPOPENFILENAMEA;
typedef struct tagOFNW {
 DWORD lStructSize;
 HWND hwndOwner;
 HINSTANCE hInstance;
 LPCWSTR lpstrFilter;
 LPWSTR lpstrCustomFilter;
 DWORD nMaxCustFilter;
 DWORD nFilterIndex;
 LPWSTR lpstrFile;
 DWORD nMaxFile;
 LPWSTR lpstrFileTitle;
 DWORD nMaxFileTitle;
 LPCWSTR lpstrInitialDir;
 LPCWSTR lpstrTitle;
 DWORD Flags;
 WORD nFileOffset;
 WORD nFileExtension;
 LPCWSTR lpstrDefExt;
 LPARAM lCustData;
 LPOFNHOOKPROC lpfnHook;
 LPCWSTR lpTemplateName;
} OPENFILENAMEW,*LPOPENFILENAMEW;
typedef OPENFILENAMEA OPENFILENAME;
typedef LPOPENFILENAMEA LPOPENFILENAME;
typedef struct
{
 NMHDR hdr;
 LPOPENFILENAMEA lpOFN;
 LPSTR pszFile;
} OFNOTIFYA, *LPOFNOTIFYA;
typedef struct
{
 NMHDR hdr;
 LPOPENFILENAMEW lpOFN;
 LPWSTR pszFile;
} OFNOTIFYW, *LPOFNOTIFYW;
typedef OFNOTIFYA OFNOTIFY;
typedef LPOFNOTIFYA LPOFNOTIFY;
typedef struct _OFNOTIFYEXA
{
        NMHDR hdr;
        LPOPENFILENAMEA lpOFN;
        LPVOID psf;
        LPVOID pidl;
} OFNOTIFYEXA, *LPOFNOTIFYEXA;
typedef struct _OFNOTIFYEXW
{
        NMHDR hdr;
        LPOPENFILENAMEW lpOFN;
        LPVOID psf;
        LPVOID pidl;
} OFNOTIFYEXW, *LPOFNOTIFYEXW;
typedef OFNOTIFYEXA OFNOTIFYEX;
typedef LPOFNOTIFYEXA LPOFNOTIFYEX;
typedef UINT_PTR (__attribute__((__stdcall__)) *LPCCHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef struct {
 DWORD lStructSize;
 HWND hwndOwner;
 HWND hInstance;
 DWORD rgbResult;
 LPDWORD lpCustColors;
 DWORD Flags;
 DWORD lCustData;
        LPCCHOOKPROC lpfnHook;
 LPCSTR lpTemplateName;
} CHOOSECOLORA;
typedef CHOOSECOLORA *LPCHOOSECOLORA;
typedef struct {
 DWORD lStructSize;
 HWND hwndOwner;
 HWND hInstance;
 DWORD rgbResult;
 LPDWORD lpCustColors;
 DWORD Flags;
 DWORD lCustData;
        LPCCHOOKPROC lpfnHook;
 LPCWSTR lpTemplateName;
} CHOOSECOLORW;
typedef CHOOSECOLORW *LPCHOOSECOLORW;
typedef CHOOSECOLORA CHOOSECOLOR;
typedef LPCHOOSECOLORA LPCHOOSECOLOR;
typedef UINT_PTR (__attribute__((__stdcall__)) *LPFRHOOKPROC)(HWND,UINT,WPARAM,LPARAM);
typedef struct {
 DWORD lStructSize;
 HWND hwndOwner;
 HINSTANCE hInstance;
 DWORD Flags;
 LPSTR lpstrFindWhat;
 LPSTR lpstrReplaceWith;
 WORD wFindWhatLen;
 WORD wReplaceWithLen;
 LPARAM lCustData;
        LPFRHOOKPROC lpfnHook;
 LPCSTR lpTemplateName;
} FINDREPLACEA, *LPFINDREPLACEA;
typedef struct {
 DWORD lStructSize;
 HWND hwndOwner;
 HINSTANCE hInstance;
 DWORD Flags;
 LPWSTR lpstrFindWhat;
 LPWSTR lpstrReplaceWith;
 WORD wFindWhatLen;
 WORD wReplaceWithLen;
 LPARAM lCustData;
        LPFRHOOKPROC lpfnHook;
 LPCWSTR lpTemplateName;
} FINDREPLACEW, *LPFINDREPLACEW;
typedef FINDREPLACEA FINDREPLACE;
typedef LPFINDREPLACEA LPFINDREPLACE;
typedef UINT_PTR (__attribute__((__stdcall__)) *LPCFHOOKPROC)(HWND,UINT,WPARAM,LPARAM);
typedef struct tagCHOOSEFONTA
{
 UINT lStructSize;
 HWND hwndOwner;
 HDC hDC;
 LPLOGFONTA lpLogFont;
 INT iPointSize;
 DWORD Flags;
 COLORREF rgbColors;
 LPARAM lCustData;
 LPCFHOOKPROC lpfnHook;
 LPCSTR lpTemplateName;
 HINSTANCE hInstance;
 LPSTR lpszStyle;
 WORD nFontType;
 WORD ___MISSING_ALIGNMENT__;
 INT nSizeMin;
 INT nSizeMax;
} CHOOSEFONTA, *LPCHOOSEFONTA;
typedef struct tagCHOOSEFONTW
{
 UINT lStructSize;
 HWND hwndOwner;
 HDC hDC;
 LPLOGFONTW lpLogFont;
 INT iPointSize;
 DWORD Flags;
 COLORREF rgbColors;
 LPARAM lCustData;
 LPCFHOOKPROC lpfnHook;
 LPCWSTR lpTemplateName;
 HINSTANCE hInstance;
 LPWSTR lpszStyle;
 WORD nFontType;
 WORD ___MISSING_ALIGNMENT__;
 INT nSizeMin;
 INT nSizeMax;
} CHOOSEFONTW, *LPCHOOSEFONTW;
typedef CHOOSEFONTA CHOOSEFONT;
typedef LPCHOOSEFONTA LPCHOOSEFONT;
typedef UINT (__attribute__((__stdcall__)) *LPPRINTHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef UINT (__attribute__((__stdcall__)) *LPSETUPHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef struct tagPDA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    WORD nFromPage;
    WORD nToPage;
    WORD nMinPage;
    WORD nMaxPage;
    WORD nCopies;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPRINTHOOKPROC lpfnPrintHook;
    LPSETUPHOOKPROC lpfnSetupHook;
    LPCSTR lpPrintTemplateName;
    LPCSTR lpSetupTemplateName;
    HGLOBAL hPrintTemplate;
    HGLOBAL hSetupTemplate;
} PRINTDLGA, *LPPRINTDLGA;
typedef struct tagPDW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    WORD nFromPage;
    WORD nToPage;
    WORD nMinPage;
    WORD nMaxPage;
    WORD nCopies;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPRINTHOOKPROC lpfnPrintHook;
    LPSETUPHOOKPROC lpfnSetupHook;
    LPCWSTR lpPrintTemplateName;
    LPCWSTR lpSetupTemplateName;
    HGLOBAL hPrintTemplate;
    HGLOBAL hSetupTemplate;
} PRINTDLGW, *LPPRINTDLGW;
typedef PRINTDLGA PRINTDLG;
typedef LPPRINTDLGA LPPRINTDLG;
typedef struct
{
    WORD wDriverOffset;
    WORD wDeviceOffset;
    WORD wOutputOffset;
    WORD wDefault;
} DEVNAMES;
typedef DEVNAMES * LPDEVNAMES;
typedef UINT (__attribute__((__stdcall__)) *LPPAGEPAINTHOOK)( HWND, UINT, WPARAM, LPARAM );
typedef UINT (__attribute__((__stdcall__)) *LPPAGESETUPHOOK)( HWND, UINT, WPARAM, LPARAM );
typedef struct tagPSDA
{
 DWORD lStructSize;
 HWND hwndOwner;
 HGLOBAL hDevMode;
 HGLOBAL hDevNames;
 DWORD Flags;
 POINT ptPaperSize;
 RECT rtMinMargin;
 RECT rtMargin;
 HINSTANCE hInstance;
 LPARAM lCustData;
 LPPAGESETUPHOOK lpfnPageSetupHook;
 LPPAGEPAINTHOOK lpfnPagePaintHook;
 LPCSTR lpPageSetupTemplateName;
 HGLOBAL hPageSetupTemplate;
} PAGESETUPDLGA,*LPPAGESETUPDLGA;
typedef struct tagPSDW
{
 DWORD lStructSize;
 HWND hwndOwner;
 HGLOBAL hDevMode;
 HGLOBAL hDevNames;
 DWORD Flags;
 POINT ptPaperSize;
 RECT rtMinMargin;
 RECT rtMargin;
 HINSTANCE hInstance;
 LPARAM lCustData;
 LPPAGESETUPHOOK lpfnPageSetupHook;
 LPPAGEPAINTHOOK lpfnPagePaintHook;
 LPCWSTR lpPageSetupTemplateName;
 HGLOBAL hPageSetupTemplate;
} PAGESETUPDLGW,*LPPAGESETUPDLGW;
typedef PAGESETUPDLGA PAGESETUPDLG;
typedef LPPAGESETUPDLGA LPPAGESETUPDLG;
typedef struct tagPRINTPAGERANGE
{
    DWORD nFromPage;
    DWORD nToPage;
} PRINTPAGERANGE, *LPPRINTPAGERANGE;
typedef struct tagPDEXA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    DWORD Flags2;
    DWORD ExclusionFlags;
    DWORD nPageRanges;
    DWORD nMaxPageRanges;
    LPPRINTPAGERANGE lpPageRanges;
    DWORD nMinPage;
    DWORD nMaxPage;
    DWORD nCopies;
    HINSTANCE hInstance;
    LPCSTR lpPrintTemplateName;
    void* lpCallback;
    DWORD nPropertyPages;
    HPROPSHEETPAGE* lphPropertyPages;
    DWORD nStartPage;
    DWORD dwResultAction;
} PRINTDLGEXA, *LPPRINTDLGEXA;
typedef struct tagPDEXW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    DWORD Flags2;
    DWORD ExclusionFlags;
    DWORD nPageRanges;
    DWORD nMaxPageRanges;
    LPPRINTPAGERANGE lpPageRanges;
    DWORD nMinPage;
    DWORD nMaxPage;
    DWORD nCopies;
    HINSTANCE hInstance;
    LPCWSTR lpPrintTemplateName;
    void* lpCallback;
    DWORD nPropertyPages;
    HPROPSHEETPAGE* lphPropertyPages;
    DWORD nStartPage;
    DWORD dwResultAction;
} PRINTDLGEXW, *LPPRINTDLGEXW;
typedef PRINTDLGEXA PRINTDLGEX;
typedef LPPRINTDLGEXA LPPRINTDLGEX;
BOOL __attribute__((__stdcall__)) ChooseColorA(LPCHOOSECOLORA lpChCol);
BOOL __attribute__((__stdcall__)) ChooseColorW(LPCHOOSECOLORW lpChCol);
DWORD __attribute__((__stdcall__)) CommDlgExtendedError(void);
HWND __attribute__((__stdcall__)) FindTextA(LPFINDREPLACEA lpFind);
HWND __attribute__((__stdcall__)) FindTextW(LPFINDREPLACEW lpFind);
short __attribute__((__stdcall__)) GetFileTitleA(LPCSTR lpFile, LPSTR lpTitle, WORD cbBuf);
short __attribute__((__stdcall__)) GetFileTitleW(LPCWSTR lpFile, LPWSTR lpTitle, WORD cbBuf);
BOOL __attribute__((__stdcall__)) GetOpenFileNameA(LPOPENFILENAMEA ofn);
BOOL __attribute__((__stdcall__)) GetOpenFileNameW(LPOPENFILENAMEW ofn);
BOOL __attribute__((__stdcall__)) GetSaveFileNameA(LPOPENFILENAMEA ofn);
BOOL __attribute__((__stdcall__)) GetSaveFileNameW(LPOPENFILENAMEW ofn);
BOOL __attribute__((__stdcall__)) PageSetupDlgA( LPPAGESETUPDLGA );
BOOL __attribute__((__stdcall__)) PageSetupDlgW( LPPAGESETUPDLGW );
BOOL __attribute__((__stdcall__)) PrintDlgA( LPPRINTDLGA printdlg);
BOOL __attribute__((__stdcall__)) PrintDlgW( LPPRINTDLGW printdlg);
HRESULT __attribute__((__stdcall__)) PrintDlgExA(LPPRINTDLGEXA);
HRESULT __attribute__((__stdcall__)) PrintDlgExW(LPPRINTDLGEXW);
HWND __attribute__((__stdcall__)) ReplaceTextA( LPFINDREPLACEA lpFind);
HWND __attribute__((__stdcall__)) ReplaceTextW( LPFINDREPLACEW lpFind);
BOOL __attribute__((__stdcall__)) ChooseFontA(LPCHOOSEFONTA);
BOOL __attribute__((__stdcall__)) ChooseFontW(LPCHOOSEFONTW);
void COMDLG32_SetCommDlgExtendedError(DWORD err);

typedef struct SC_HANDLE__ { int unused; } *SC_HANDLE;
typedef SC_HANDLE *LPSC_HANDLE;
typedef struct SERVICE_STATUS_HANDLE__ { int unused; } *SERVICE_STATUS_HANDLE;
typedef LPVOID SC_LOCK;
typedef struct _SERVICE_STATUS {
  DWORD dwServiceType;
  DWORD dwCurrentState;
  DWORD dwControlsAccepted;
  DWORD dwWin32ExitCode;
  DWORD dwServiceSpecificExitCode;
  DWORD dwCheckPoint;
  DWORD dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;
typedef struct _SERVICE_STATUS_PROCESS
{
  DWORD dwServiceType;
  DWORD dwCurrentState;
  DWORD dwControlsAccepted;
  DWORD dwWin32ExitCode;
  DWORD dwServiceSpecificExitCode;
  DWORD dwCheckPoint;
  DWORD dwWaitHint;
  DWORD dwProcessId;
  DWORD dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;
typedef enum _SC_STATUS_TYPE {
  SC_STATUS_PROCESS_INFO = 0
} SC_STATUS_TYPE;
typedef void (__attribute__((__stdcall__)) *LPSERVICE_MAIN_FUNCTIONA)(DWORD,LPSTR*);
typedef void (__attribute__((__stdcall__)) *LPSERVICE_MAIN_FUNCTIONW)(DWORD,LPWSTR*);
typedef LPSERVICE_MAIN_FUNCTIONA LPSERVICE_MAIN_FUNCTION;
typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
} SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
  LPWSTR lpServiceName;
  LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
} SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;
typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;
typedef struct _ENUM_SERVICE_STATUSA {
  LPSTR lpServiceName;
  LPSTR lpDisplayName;
  SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;
typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
  LPSTR lpServiceName;
  LPSTR lpDisplayName;
  SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW;
typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;
typedef enum _SC_ENUM_TYPE {
    SC_ENUM_PROCESS_INFO = 0
} SC_ENUM_TYPE;
typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPSTR lpBinaryPathName;
    LPSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPSTR lpDependencies;
    LPSTR lpServiceStartName;
    LPSTR lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPWSTR lpBinaryPathName;
    LPWSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPWSTR lpDependencies;
    LPWSTR lpServiceStartName;
    LPWSTR lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;
typedef struct _SERVICE_DESCRIPTIONA {
   LPSTR lpDescription;
} SERVICE_DESCRIPTIONA,*LPSERVICE_DESCRIPTIONA;
typedef struct _SERVICE_DESCRIPTIONW {
   LPWSTR lpDescription;
} SERVICE_DESCRIPTIONW,*LPSERVICE_DESCRIPTIONW;
typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
typedef enum _SC_ACTION_TYPE {
    SC_ACTION_NONE = 0,
    SC_ACTION_RESTART = 1,
    SC_ACTION_REBOOT = 2,
    SC_ACTION_RUN_COMMAND = 3
} SC_ACTION_TYPE;
typedef struct _SC_ACTION {
   SC_ACTION_TYPE Type;
   DWORD Delay;
} SC_ACTION,*LPSC_ACTION;
typedef struct _SERVICE_FAILURE_ACTIONSA {
   DWORD dwResetPeriod;
   LPSTR lpRebootMsg;
   LPSTR lpCommand;
   DWORD cActions;
   SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSA,*LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
   DWORD dwResetPeriod;
   LPWSTR lpRebootMsg;
   LPWSTR lpCommand;
   DWORD cActions;
   SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW,*LPSERVICE_FAILURE_ACTIONSW;
typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
typedef struct _QUERY_SERVICE_LOCK_STATUSA
{
  DWORD fIsLocked;
  LPSTR lpLockOwner;
  DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW
{
  DWORD fIsLocked;
  LPWSTR lpLockOwner;
  DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;
typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef void (__attribute__((__stdcall__)) *LPHANDLER_FUNCTION)(DWORD);
typedef DWORD (__attribute__((__stdcall__)) *LPHANDLER_FUNCTION_EX)(DWORD,DWORD,LPVOID,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ChangeServiceConfigA(SC_HANDLE,DWORD,DWORD,DWORD,LPCSTR,LPCSTR,LPDWORD,LPCSTR,LPCSTR,LPCSTR,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ChangeServiceConfigW(SC_HANDLE,DWORD,DWORD,DWORD,LPCWSTR,LPCWSTR,LPDWORD,LPCWSTR,LPCWSTR,LPCWSTR,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ChangeServiceConfig2A(SC_HANDLE,DWORD,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ChangeServiceConfig2W(SC_HANDLE,DWORD,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) CloseServiceHandle(SC_HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) ControlService(SC_HANDLE,DWORD,LPSERVICE_STATUS);
__attribute__((dllimport)) SC_HANDLE __attribute__((__stdcall__)) CreateServiceA(SC_HANDLE,LPCSTR,LPCSTR,DWORD,DWORD,DWORD,DWORD,LPCSTR,LPCSTR,LPDWORD,LPCSTR,LPCSTR,LPCSTR);
__attribute__((dllimport)) SC_HANDLE __attribute__((__stdcall__)) CreateServiceW(SC_HANDLE,LPCWSTR,LPCWSTR,DWORD,DWORD,DWORD,DWORD,LPCWSTR,LPCWSTR,LPDWORD,LPCWSTR,LPCWSTR,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) DeleteService(SC_HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumDependentServicesA(SC_HANDLE,DWORD,LPENUM_SERVICE_STATUSA,DWORD,LPDWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumDependentServicesW(SC_HANDLE,DWORD,LPENUM_SERVICE_STATUSW,DWORD,LPDWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumServicesStatusA(SC_HANDLE,DWORD,DWORD,LPENUM_SERVICE_STATUSA,DWORD,LPDWORD,LPDWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumServicesStatusW(SC_HANDLE,DWORD,DWORD,LPENUM_SERVICE_STATUSW,DWORD,LPDWORD,LPDWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumServicesStatusExA(SC_HANDLE,SC_ENUM_TYPE,DWORD,DWORD,LPBYTE,DWORD,LPDWORD,LPDWORD,LPDWORD,LPCSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) EnumServicesStatusExW(SC_HANDLE,SC_ENUM_TYPE,DWORD,DWORD,LPBYTE,DWORD,LPDWORD,LPDWORD,LPDWORD,LPCWSTR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetServiceDisplayNameA(SC_HANDLE,LPCSTR,LPSTR,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetServiceDisplayNameW(SC_HANDLE,LPCWSTR,LPWSTR,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetServiceKeyNameA(SC_HANDLE,LPCSTR,LPSTR,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) GetServiceKeyNameW(SC_HANDLE,LPCWSTR,LPWSTR,LPDWORD);
__attribute__((dllimport)) SC_LOCK __attribute__((__stdcall__)) LockServiceDatabase(SC_HANDLE);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) NotifyBootConfigStatus(BOOL);
__attribute__((dllimport)) SC_HANDLE __attribute__((__stdcall__)) OpenSCManagerA(LPCSTR,LPCSTR,DWORD);
__attribute__((dllimport)) SC_HANDLE __attribute__((__stdcall__)) OpenSCManagerW(LPCWSTR,LPCWSTR,DWORD);
__attribute__((dllimport)) SC_HANDLE __attribute__((__stdcall__)) OpenServiceA(SC_HANDLE,LPCSTR,DWORD);
__attribute__((dllimport)) SC_HANDLE __attribute__((__stdcall__)) OpenServiceW(SC_HANDLE,LPCWSTR,DWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) QueryServiceStatus(SC_HANDLE,LPSERVICE_STATUS);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) QueryServiceStatusEx(SC_HANDLE,SC_STATUS_TYPE,LPBYTE,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) QueryServiceConfigA(SC_HANDLE,LPQUERY_SERVICE_CONFIGA,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) QueryServiceConfigW(SC_HANDLE,LPQUERY_SERVICE_CONFIGW,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) QueryServiceConfig2A(SC_HANDLE,DWORD,LPBYTE,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) QueryServiceConfig2W(SC_HANDLE,DWORD,LPBYTE,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) QueryServiceLockStatusA(SC_HANDLE,LPQUERY_SERVICE_LOCK_STATUSA,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) QueryServiceLockStatusW(SC_HANDLE,LPQUERY_SERVICE_LOCK_STATUSW,DWORD,LPDWORD);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) QueryServiceObjectSecurity(SC_HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,LPDWORD);
__attribute__((dllimport)) SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerA(LPCSTR,LPHANDLER_FUNCTION);
__attribute__((dllimport)) SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerW(LPCWSTR,LPHANDLER_FUNCTION);
__attribute__((dllimport)) SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerExA(LPCSTR,LPHANDLER_FUNCTION_EX,LPVOID);
__attribute__((dllimport)) SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerExW(LPCWSTR,LPHANDLER_FUNCTION_EX,LPVOID);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetServiceObjectSecurity(SC_HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) SetServiceStatus(SERVICE_STATUS_HANDLE,LPSERVICE_STATUS);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) StartServiceA(SC_HANDLE,DWORD,LPCSTR*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) StartServiceW(SC_HANDLE,DWORD,LPCWSTR*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) StartServiceCtrlDispatcherW(const SERVICE_TABLE_ENTRYW*);
__attribute__((dllimport)) BOOL __attribute__((__stdcall__)) UnlockServiceDatabase(SC_LOCK);
typedef struct tagMODEMDEVCAPS {
       DWORD dwActualSize;
       DWORD dwRequiredSize;
       DWORD dwDevSpecificOffset;
       DWORD dwDevSpecificSize;
       DWORD dwModemProviderVersion;
       DWORD dwModemManufacturerOffset;
       DWORD dwModemManufacturerSize;
       DWORD dwModemModelOffset;
       DWORD dwModemModelSize;
       DWORD dwModemVersionOffset;
       DWORD dwModemVersionSize;
       DWORD dwDialOptions;
       DWORD dwCallSetupFailTimer;
       DWORD dwInactivityTimeout;
       DWORD dwSpeakerVolume;
       DWORD dwSpeakerMode;
       DWORD dwModemoptions;
       DWORD dwMaxDTERate;
       DWORD dwMaxDCERate;
       BYTE abVariablePortion[1];
} MODEMDEVCAPS, *LPMODEMDEVCAPS;
typedef struct tagMODEMSETTINGS {
       DWORD dwActualSize;
       DWORD dwRequiredSize;
       DWORD dwDevSpecificOffset;
       DWORD dwDevSpecificSize;
       DWORD dwCallSetupFailTimer;
       DWORD dwInactivityTimeout;
       DWORD dwSpeakerVolume;
       DWORD dwSpeakerMode;
       DWORD dwPreferredModemOptions;
       DWORD dwNegotiatedModemOptions;
       DWORD dwNegotiatedDCERate;
       BYTE abVariablePortion[1];
} MODEMSETTINGS, *LPMODEMSETTINGS;
typedef HANDLE HIMC;
typedef HANDLE HIMCC;
typedef struct tagREGISTERWORDA {
    LPSTR lpReading;
    LPSTR lpWord;
} REGISTERWORDA, *PREGISTERWORDA, *NPREGISTERWORDA, *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
    LPWSTR lpReading;
    LPWSTR lpWord;
} REGISTERWORDW, *PREGISTERWORDW, *NPREGISTERWORDW, *LPREGISTERWORDW;
typedef int (__attribute__((__stdcall__)) *REGISTERWORDENUMPROCA)(LPCSTR, DWORD, LPCSTR, LPVOID);
typedef int (__attribute__((__stdcall__)) *REGISTERWORDENUMPROCW)(LPCWSTR, DWORD, LPCWSTR, LPVOID);
typedef struct tagCANDIDATEFORM
{
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
} CANDIDATEFORM, *LPCANDIDATEFORM;
typedef struct tagCANDIDATELIST
{
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *LPCANDIDATELIST;
typedef struct tagSTYLEBUFA
{
    DWORD dwStyle;
    CHAR szDescription[32];
} STYLEBUFA, *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW
{
    DWORD dwStyle;
    WCHAR szDescription[32];
} STYLEBUFW, *LPSTYLEBUFW;
typedef STYLEBUFA STYLEBUF;
typedef LPSTYLEBUFA LPSTYLEBUF;
typedef struct tagRECONVERTSTRING
{
 DWORD dwSize;
 DWORD dwVersion;
 DWORD dwStrLen;
 DWORD dwStrOffset;
 DWORD dwCompStrLen;
 DWORD dwCompStrOffset;
 DWORD dwTargetStrLen;
 DWORD dwTargetStrOffset;
} RECONVERTSTRING, *LPRECONVERTSTRING;
typedef struct tagIMEMENUITEMINFOA
{
 UINT cbSize;
 UINT fType;
 UINT fState;
 UINT wID;
 HBITMAP hbmpChecked;
 HBITMAP hbmpUnchecked;
 DWORD dwItemData;
 CHAR szString[80];
 HBITMAP hbmpItem;
} IMEMENUITEMINFOA, *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW
{
 UINT cbSize;
 UINT fType;
 UINT fState;
 UINT wID;
 HBITMAP hbmpChecked;
 HBITMAP hbmpUnchecked;
 DWORD dwItemData;
 WCHAR szString[80];
 HBITMAP hbmpItem;
} IMEMENUITEMINFOW, *LPIMEMENUITEMINFOW;
typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;
typedef struct _tagCOMPOSITIONFORM
{
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
} COMPOSITIONFORM, *LPCOMPOSITIONFORM;
HIMC __attribute__((__stdcall__)) ImmAssociateContext(HWND, HIMC);
BOOL __attribute__((__stdcall__)) ImmAssociateContextEx(HWND, HIMC, DWORD);
BOOL __attribute__((__stdcall__)) ImmConfigureIMEA(HKL, HWND, DWORD, LPVOID);
BOOL __attribute__((__stdcall__)) ImmConfigureIMEW(HKL, HWND, DWORD, LPVOID);
HIMC __attribute__((__stdcall__)) ImmCreateContext(void);
BOOL __attribute__((__stdcall__)) ImmDestroyContext(HIMC hIMC);
BOOL __attribute__((__stdcall__)) ImmDisableIME(DWORD idThread);
UINT __attribute__((__stdcall__)) ImmEnumRegisterWordA(HKL, REGISTERWORDENUMPROCA, LPCSTR, DWORD, LPCSTR, LPVOID);
UINT __attribute__((__stdcall__)) ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, LPCWSTR, DWORD, LPCWSTR, LPVOID);
LRESULT __attribute__((__stdcall__)) ImmEscapeA(HKL, HIMC, UINT, LPVOID);
LRESULT __attribute__((__stdcall__)) ImmEscapeW(HKL, HIMC, UINT, LPVOID);
DWORD __attribute__((__stdcall__)) ImmGetCandidateListA(HIMC, DWORD, LPCANDIDATELIST, DWORD);
DWORD __attribute__((__stdcall__)) ImmGetCandidateListW(HIMC, DWORD, LPCANDIDATELIST, DWORD);
DWORD __attribute__((__stdcall__)) ImmGetCandidateListCountA(HIMC, LPDWORD);
DWORD __attribute__((__stdcall__)) ImmGetCandidateListCountW(HIMC, LPDWORD);
BOOL __attribute__((__stdcall__)) ImmGetCandidateWindow(HIMC, DWORD, LPCANDIDATEFORM);
BOOL __attribute__((__stdcall__)) ImmGetCompositionFontA(HIMC, LPLOGFONTA);
BOOL __attribute__((__stdcall__)) ImmGetCompositionFontW(HIMC, LPLOGFONTW);
BOOL __attribute__((__stdcall__)) ImmSetCompositionFontA(HIMC, LPLOGFONTA);
BOOL __attribute__((__stdcall__)) ImmSetCompositionFontW(HIMC, LPLOGFONTW);
LONG __attribute__((__stdcall__)) ImmGetCompositionStringA(HIMC, DWORD, LPVOID, DWORD);
LONG __attribute__((__stdcall__)) ImmGetCompositionStringW(HIMC, DWORD, LPVOID, DWORD);
BOOL __attribute__((__stdcall__)) ImmGetCompositionWindow(HIMC, LPCOMPOSITIONFORM);
HIMC __attribute__((__stdcall__)) ImmGetContext(HWND);
DWORD __attribute__((__stdcall__)) ImmGetConversionListA(HKL, HIMC, LPCSTR, LPCANDIDATELIST, DWORD, UINT);
DWORD __attribute__((__stdcall__)) ImmGetConversionListW(HKL, HIMC, LPCWSTR, LPCANDIDATELIST, DWORD, UINT);
BOOL __attribute__((__stdcall__)) ImmGetConversionStatus(HIMC, LPDWORD, LPDWORD);
HWND __attribute__((__stdcall__)) ImmGetDefaultIMEWnd(HWND);
UINT __attribute__((__stdcall__)) ImmGetDescriptionA(HKL, LPSTR, UINT);
UINT __attribute__((__stdcall__)) ImmGetDescriptionW(HKL, LPWSTR, UINT);
DWORD __attribute__((__stdcall__)) ImmGetGuideLineA(HIMC, DWORD, LPSTR, DWORD);
DWORD __attribute__((__stdcall__)) ImmGetGuideLineW(HIMC, DWORD, LPWSTR, DWORD);
UINT __attribute__((__stdcall__)) ImmGetIMEFileNameA(HKL, LPSTR, UINT);
UINT __attribute__((__stdcall__)) ImmGetIMEFileNameW(HKL, LPWSTR, UINT);
DWORD __attribute__((__stdcall__)) ImmGetImeMenuItemsA(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA, LPIMEMENUITEMINFOA, DWORD);
DWORD __attribute__((__stdcall__)) ImmGetImeMenuItemsW(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW, LPIMEMENUITEMINFOW, DWORD);
BOOL __attribute__((__stdcall__)) ImmGetOpenStatus(HIMC);
DWORD __attribute__((__stdcall__)) ImmGetProperty(HKL, DWORD);
UINT __attribute__((__stdcall__)) ImmGetRegisterWordStyleA(HKL, UINT, LPSTYLEBUFA);
UINT __attribute__((__stdcall__)) ImmGetRegisterWordStyleW(HKL, UINT, LPSTYLEBUFW);
BOOL __attribute__((__stdcall__)) ImmGetStatusWindowPos(HIMC, LPPOINT);
UINT __attribute__((__stdcall__)) ImmGetVirtualKey(HWND);
HKL __attribute__((__stdcall__)) ImmInstallIMEA(LPCSTR, LPCSTR);
HKL __attribute__((__stdcall__)) ImmInstallIMEW(LPCWSTR, LPCWSTR);
BOOL __attribute__((__stdcall__)) ImmIsIME(HKL);
BOOL __attribute__((__stdcall__)) ImmIsUIMessageA(HWND, UINT, WPARAM, LPARAM);
BOOL __attribute__((__stdcall__)) ImmIsUIMessageW(HWND, UINT, WPARAM, LPARAM);
BOOL __attribute__((__stdcall__)) ImmNotifyIME(HIMC, DWORD, DWORD, DWORD);
BOOL __attribute__((__stdcall__)) ImmProcessKey(HWND, HKL, UINT, LPARAM, DWORD);
BOOL __attribute__((__stdcall__)) ImmRegisterWordA(HKL, LPCSTR, DWORD, LPCSTR);
BOOL __attribute__((__stdcall__)) ImmRegisterWordW(HKL, LPCWSTR, DWORD, LPCWSTR);
BOOL __attribute__((__stdcall__)) ImmReleaseContext(HWND, HIMC);
BOOL __attribute__((__stdcall__)) ImmSetCandidateWindow(HIMC, LPCANDIDATEFORM);
BOOL __attribute__((__stdcall__)) ImmSetCompositionStringA(HIMC, DWORD, LPCVOID, DWORD, LPCVOID, DWORD);
BOOL __attribute__((__stdcall__)) ImmSetCompositionStringW(HIMC, DWORD, LPCVOID, DWORD, LPCVOID, DWORD);
BOOL __attribute__((__stdcall__)) ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM);
BOOL __attribute__((__stdcall__)) ImmSetConversionStatus(HIMC, DWORD, DWORD);
BOOL __attribute__((__stdcall__)) ImmSetOpenStatus(HIMC, BOOL);
BOOL __attribute__((__stdcall__)) ImmSetStatusWindowPos(HIMC, LPPOINT);
BOOL __attribute__((__stdcall__)) ImmSimulateHotKey(HWND, DWORD);
BOOL __attribute__((__stdcall__)) ImmUnregisterWordA(HKL, LPCSTR, DWORD, LPCSTR);
BOOL __attribute__((__stdcall__)) ImmUnregisterWordW(HKL, LPCWSTR, DWORD, LPCWSTR);

  typedef void (__attribute__((__cdecl__)) *_PVFV)(void);
  typedef int (__attribute__((__cdecl__)) *_PIFV)(void);
  typedef void (__attribute__((__cdecl__)) *_PVFI)(int);
  __attribute__ ((__dllimport__)) extern int _commode;
  typedef struct {
    intptr_t osfhnd;
    char osfile;
    char pipech;
    int lockinitflag;
    CRITICAL_SECTION lock;
    char textmode : 7;
    char unicode : 1;
    char pipech2[2];
  } ioinfo;
  extern ioinfo ** _imp____badioinfo[];
  extern ioinfo ** _imp____pioinfo[];
  struct _iobuf {
    char *_ptr;
    int _cnt;
    char *_base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char *_tmpfname;
  };
  typedef struct _iobuf FILE;
  extern int _dowildcard;
  extern int _newmode;
extern wchar_t *** _imp____winitenv;
extern char *** _imp____initenv;
extern char ** _imp___acmdln;
extern char ** _imp___wcmdln;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _amsg_exit(int);
  int __attribute__((__cdecl__)) _setargv(void);
  int __attribute__((__cdecl__)) __setargv(void);
  int __attribute__((__cdecl__)) _wsetargv(void);
  int __attribute__((__cdecl__)) __wsetargv(void);
  int __attribute__((__cdecl__)) main(int _Argc, char **_Argv, char **_Env);
  int __attribute__((__cdecl__)) wmain(int _Argc, wchar_t **_Argv, wchar_t **_Env);
  typedef struct {
    int newmode;
  } _startupinfo;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __getmainargs(int * _Argc, char *** _Argv, char ***_Env, int _DoWildCard, _startupinfo *_StartInfo);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __wgetmainargs(int * _Argc, wchar_t ***_Argv, wchar_t ***_Env, int _DoWildCard, _startupinfo *_StartInfo);
  typedef enum __enative_startup_state {
    __uninitialized = 0, __initializing, __initialized
  } __enative_startup_state;
  extern volatile __enative_startup_state __native_startup_state;
  extern volatile void *__native_startup_lock;
  extern volatile unsigned int __native_dllmain_reason;
  extern volatile unsigned int __native_vcclrit_reason;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) __set_app_type (int);
  typedef LONG NTSTATUS;

  typedef void *_HFILE;
  typedef int (__attribute__((__cdecl__)) *_CRT_REPORT_HOOK)(int,char *,int *);
  typedef int (__attribute__((__cdecl__)) *_CRT_REPORT_HOOKW)(int,wchar_t *,int *);
  typedef int (__attribute__((__cdecl__)) *_CRT_ALLOC_HOOK)(int,void *,size_t,int,long,const unsigned char *,int);
  typedef void (__attribute__((__cdecl__)) *_CRT_DUMP_CLIENT)(void *,size_t);
  struct _CrtMemBlockHeader;
  typedef struct _CrtMemState {
    struct _CrtMemBlockHeader *pBlockHeader;
    size_t lCounts[5];
    size_t lSizes[5];
    size_t lHighWaterCount;
    size_t lTotalCount;
  } _CrtMemState;

  void * __attribute__((__cdecl__)) _encode_pointer(void *);
  void * __attribute__((__cdecl__)) _encoded_null();
  void * __attribute__((__cdecl__)) _decode_pointer(void *);
  BOOL __attribute__((__cdecl__)) _ValidateImageBase (PBYTE pImageBase);
  PIMAGE_SECTION_HEADER __attribute__((__cdecl__)) _FindPESection (PBYTE pImageBase, DWORD_PTR rva);
  BOOL __attribute__((__cdecl__)) _IsNonwritableInCurrentImage (PBYTE pTarget);

  __attribute__ ((__dllimport__)) char *_cgets(char *_Buffer) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cprintf(const char * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cputs(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cscanf(const char * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cscanf_l(const char * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _getch(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _getche(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcprintf(const char * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cprintf_p(const char * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcprintf_p(const char * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cprintf_l(const char * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcprintf_l(const char * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cprintf_p_l(const char * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcprintf_p_l(const char * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _kbhit(void);
  int __attribute__((__cdecl__)) _inp(unsigned short);
  unsigned short __attribute__((__cdecl__)) _inpw(unsigned short);
  unsigned long __attribute__((__cdecl__)) _inpd(unsigned short);
  int __attribute__((__cdecl__)) _outp(unsigned short,int);
  unsigned short __attribute__((__cdecl__)) _outpw(unsigned short,unsigned short);
  unsigned long __attribute__((__cdecl__)) _outpd(unsigned short,unsigned long);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putch(int _Ch);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _ungetch(int _Ch);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _getch_nolock(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _getche_nolock(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putch_nolock(int _Ch);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _ungetch_nolock(int _Ch);
  __attribute__ ((__dllimport__)) wchar_t *_cgetws(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _getwch(void);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _getwche(void);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _putwch(wchar_t _WCh);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _ungetwch(wint_t _WCh);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cputws(const wchar_t *_String);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwscanf(const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwscanf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _putwch_nolock(wchar_t _WCh);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _getwch_nolock(void);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _getwche_nolock(void);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _ungetwch_nolock(wint_t _WCh);
  char *__attribute__((__cdecl__)) cgets(char *_Buffer) ;
  int __attribute__((__cdecl__)) cprintf(const char * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) cputs(const char *_Str) ;
  int __attribute__((__cdecl__)) cscanf(const char * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) getch(void) ;
  int __attribute__((__cdecl__)) getche(void) ;
  int __attribute__((__cdecl__)) kbhit(void) ;
  int __attribute__((__cdecl__)) putch(int _Ch) ;
  int __attribute__((__cdecl__)) ungetch(int _Ch) ;
  int __attribute__((__cdecl__)) inp(unsigned short) ;
  unsigned short __attribute__((__cdecl__)) inpw(unsigned short) ;
  int __attribute__((__cdecl__)) outp(unsigned short,int) ;
  unsigned short __attribute__((__cdecl__)) outpw(unsigned short,unsigned short) ;
__attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _controlfp (unsigned int unNew, unsigned int unMask) ;
__attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _controlfp_s(unsigned int *_CurrentState, unsigned int _NewValue, unsigned int _Mask);
__attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _control87 (unsigned int unNew, unsigned int unMask);
__attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _clearfp (void);
__attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _statusfp (void);
void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _fpreset (void);
void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fpreset (void);
__attribute__ ((__dllimport__)) int * __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __fpecode(void);
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _chgsign (double _X);
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _copysign (double _Number,double _Sign);
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _logb (double);
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _nextafter (double, double);
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _scalb (double, long);
__attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _finite (double);
__attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _fpclass (double);
__attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _isnan (double);
extern long double __attribute__((__cdecl__)) _chgsignl (long double);
       
struct _exception;

  extern double * _imp___HUGE;
  struct _exception {
    int type;
    const char *name;
    double arg1;
    double arg2;
    double retval;
  };
  void __mingw_raise_matherr (int typ, const char *name, double a1, double a2,
         double rslt);
  void __mingw_setusermatherr (int (__attribute__((__cdecl__)) *)(struct _exception *));
  __attribute__ ((__dllimport__)) void __setusermatherr(int (__attribute__((__cdecl__)) *)(struct _exception *));
  double __attribute__((__cdecl__)) sin(double _X);
  double __attribute__((__cdecl__)) cos(double _X);
  double __attribute__((__cdecl__)) tan(double _X);
  double __attribute__((__cdecl__)) sinh(double _X);
  double __attribute__((__cdecl__)) cosh(double _X);
  double __attribute__((__cdecl__)) tanh(double _X);
  double __attribute__((__cdecl__)) asin(double _X);
  double __attribute__((__cdecl__)) acos(double _X);
  double __attribute__((__cdecl__)) atan(double _X);
  double __attribute__((__cdecl__)) atan2(double _Y,double _X);
  double __attribute__((__cdecl__)) exp(double _X);
  double __attribute__((__cdecl__)) log(double _X);
  double __attribute__((__cdecl__)) log10(double _X);
  double __attribute__((__cdecl__)) pow(double _X,double _Y);
  double __attribute__((__cdecl__)) sqrt(double _X);
  double __attribute__((__cdecl__)) ceil(double _X);
  double __attribute__((__cdecl__)) floor(double _X);
  double __attribute__((__cdecl__)) fabs(double _X);
  double __attribute__((__cdecl__)) ldexp(double _X,int _Y);
  double __attribute__((__cdecl__)) frexp(double _X,int *_Y);
  double __attribute__((__cdecl__)) modf(double _X,double *_Y);
  double __attribute__((__cdecl__)) fmod(double _X,double _Y);
  void __attribute__((__cdecl__)) sincos (double __x, double *p_sin, double *p_cos);
  void __attribute__((__cdecl__)) sincosl (long double __x, long double *p_sin, long double *p_cos);
  void __attribute__((__cdecl__)) sincosf (float __x, float *p_sin, float *p_cos);
  struct _complex {
    double x;
    double y;
  };
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _cabs(struct _complex _ComplexA);
  double __attribute__((__cdecl__)) _hypot(double _X,double _Y);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _j0(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _j1(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _jn(int _X,double _Y);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _y0(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _y1(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _yn(int _X,double _Y);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _matherr (struct _exception *);
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) j0 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) j1 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) jn (int, double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) y0 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) y1 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) yn (int, double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) chgsign (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) finite (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) fpclass (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_SSE2_enable(int _Flag);
typedef long double float_t;
typedef long double double_t;
  extern int __attribute__((__cdecl__)) __fpclassifyl (long double);
  extern int __attribute__((__cdecl__)) __fpclassifyf (float);
  extern int __attribute__((__cdecl__)) __fpclassify (double);
  extern int __attribute__((__cdecl__)) __isnan (double);
  extern int __attribute__((__cdecl__)) __isnanf (float);
  extern int __attribute__((__cdecl__)) __isnanl (long double);
  extern int __attribute__((__cdecl__)) __signbit (double);
  extern int __attribute__((__cdecl__)) __signbitf (float);
  extern int __attribute__((__cdecl__)) __signbitl (long double);
  extern float __attribute__((__cdecl__)) sinf(float _X);
  extern long double __attribute__((__cdecl__)) sinl(long double);
  extern float __attribute__((__cdecl__)) cosf(float _X);
  extern long double __attribute__((__cdecl__)) cosl(long double);
  extern float __attribute__((__cdecl__)) tanf(float _X);
  extern long double __attribute__((__cdecl__)) tanl(long double);
  extern float __attribute__((__cdecl__)) asinf(float _X);
  extern long double __attribute__((__cdecl__)) asinl(long double);
  extern float __attribute__((__cdecl__)) acosf (float);
  extern long double __attribute__((__cdecl__)) acosl (long double);
  extern float __attribute__((__cdecl__)) atanf (float);
  extern long double __attribute__((__cdecl__)) atanl (long double);
  extern float __attribute__((__cdecl__)) atan2f (float, float);
  extern long double __attribute__((__cdecl__)) atan2l (long double, long double);
  extern float __attribute__((__cdecl__)) sinhf(float _X);
  extern long double __attribute__((__cdecl__)) sinhl(long double);
  extern float __attribute__((__cdecl__)) coshf(float _X);
  extern long double __attribute__((__cdecl__)) coshl(long double);
  extern float __attribute__((__cdecl__)) tanhf(float _X);
  extern long double __attribute__((__cdecl__)) tanhl(long double);
  extern double __attribute__((__cdecl__)) acosh (double);
  extern float __attribute__((__cdecl__)) acoshf (float);
  extern long double __attribute__((__cdecl__)) acoshl (long double);
  extern double __attribute__((__cdecl__)) asinh (double);
  extern float __attribute__((__cdecl__)) asinhf (float);
  extern long double __attribute__((__cdecl__)) asinhl (long double);
  extern double __attribute__((__cdecl__)) atanh (double);
  extern float __attribute__((__cdecl__)) atanhf (float);
  extern long double __attribute__((__cdecl__)) atanhl (long double);
  extern float __attribute__((__cdecl__)) expf(float _X);
  extern long double __attribute__((__cdecl__)) expl(long double);
  extern double __attribute__((__cdecl__)) exp2(double);
  extern float __attribute__((__cdecl__)) exp2f(float);
  extern long double __attribute__((__cdecl__)) exp2l(long double);
  extern double __attribute__((__cdecl__)) expm1(double);
  extern float __attribute__((__cdecl__)) expm1f(float);
  extern long double __attribute__((__cdecl__)) expm1l(long double);
  extern float frexpf(float _X,int *_Y);
  extern long double __attribute__((__cdecl__)) frexpl(long double,int *);
  extern int __attribute__((__cdecl__)) ilogb (double);
  extern int __attribute__((__cdecl__)) ilogbf (float);
  extern int __attribute__((__cdecl__)) ilogbl (long double);
  extern float __attribute__((__cdecl__)) ldexpf(float _X,int _Y);
  extern long double __attribute__((__cdecl__)) ldexpl (long double, int);
  extern float __attribute__((__cdecl__)) logf (float);
  extern long double __attribute__((__cdecl__)) logl(long double);
  extern float __attribute__((__cdecl__)) log10f (float);
  extern long double __attribute__((__cdecl__)) log10l(long double);
  extern double __attribute__((__cdecl__)) log1p(double);
  extern float __attribute__((__cdecl__)) log1pf(float);
  extern long double __attribute__((__cdecl__)) log1pl(long double);
  extern double __attribute__((__cdecl__)) log2 (double);
  extern float __attribute__((__cdecl__)) log2f (float);
  extern long double __attribute__((__cdecl__)) log2l (long double);
  extern double __attribute__((__cdecl__)) logb (double);
  extern float __attribute__((__cdecl__)) logbf (float);
  extern long double __attribute__((__cdecl__)) logbl (long double);
  extern float __attribute__((__cdecl__)) modff (float, float*);
  extern long double __attribute__((__cdecl__)) modfl (long double, long double*);
  extern double __attribute__((__cdecl__)) scalbn (double, int);
  extern float __attribute__((__cdecl__)) scalbnf (float, int);
  extern long double __attribute__((__cdecl__)) scalbnl (long double, int);
  extern double __attribute__((__cdecl__)) scalbln (double, long);
  extern float __attribute__((__cdecl__)) scalblnf (float, long);
  extern long double __attribute__((__cdecl__)) scalblnl (long double, long);
  extern double __attribute__((__cdecl__)) cbrt (double);
  extern float __attribute__((__cdecl__)) cbrtf (float);
  extern long double __attribute__((__cdecl__)) cbrtl (long double);
  extern float __attribute__((__cdecl__)) fabsf (float x);
  extern long double __attribute__((__cdecl__)) fabsl (long double);
  extern double __attribute__((__cdecl__)) hypot (double, double) ;
  extern float __attribute__((__cdecl__)) hypotf (float x, float y);
  extern long double __attribute__((__cdecl__)) hypotl (long double, long double);
  extern float __attribute__((__cdecl__)) powf(float _X,float _Y);
  extern long double __attribute__((__cdecl__)) powl (long double, long double);
  extern float __attribute__((__cdecl__)) sqrtf (float);
  extern long double sqrtl(long double);
  extern double __attribute__((__cdecl__)) erf (double);
  extern float __attribute__((__cdecl__)) erff (float);
  extern long double __attribute__((__cdecl__)) erfl (long double);
  extern double __attribute__((__cdecl__)) erfc (double);
  extern float __attribute__((__cdecl__)) erfcf (float);
  extern long double __attribute__((__cdecl__)) erfcl (long double);
  extern double __attribute__((__cdecl__)) lgamma (double);
  extern float __attribute__((__cdecl__)) lgammaf (float);
  extern long double __attribute__((__cdecl__)) lgammal (long double);
  extern double __attribute__((__cdecl__)) tgamma (double);
  extern float __attribute__((__cdecl__)) tgammaf (float);
  extern long double __attribute__((__cdecl__)) tgammal (long double);
  extern float __attribute__((__cdecl__)) ceilf (float);
  extern long double __attribute__((__cdecl__)) ceill (long double);
  extern float __attribute__((__cdecl__)) floorf (float);
  extern long double __attribute__((__cdecl__)) floorl (long double);
  extern double __attribute__((__cdecl__)) nearbyint ( double);
  extern float __attribute__((__cdecl__)) nearbyintf (float);
  extern long double __attribute__((__cdecl__)) nearbyintl (long double);
extern double __attribute__((__cdecl__)) rint (double);
extern float __attribute__((__cdecl__)) rintf (float);
extern long double __attribute__((__cdecl__)) rintl (long double);
extern long __attribute__((__cdecl__)) lrint (double);
extern long __attribute__((__cdecl__)) lrintf (float);
extern long __attribute__((__cdecl__)) lrintl (long double);
 long long __attribute__((__cdecl__)) llrint (double);
 long long __attribute__((__cdecl__)) llrintf (float);
 long long __attribute__((__cdecl__)) llrintl (long double);
  extern double __attribute__((__cdecl__)) round (double);
  extern float __attribute__((__cdecl__)) roundf (float);
  extern long double __attribute__((__cdecl__)) roundl (long double);
  extern long __attribute__((__cdecl__)) lround (double);
  extern long __attribute__((__cdecl__)) lroundf (float);
  extern long __attribute__((__cdecl__)) lroundl (long double);
  long long __attribute__((__cdecl__)) llround (double);
  long long __attribute__((__cdecl__)) llroundf (float);
  long long __attribute__((__cdecl__)) llroundl (long double);
  extern double __attribute__((__cdecl__)) trunc (double);
  extern float __attribute__((__cdecl__)) truncf (float);
  extern long double __attribute__((__cdecl__)) truncl (long double);
  extern float __attribute__((__cdecl__)) fmodf (float, float);
  extern long double __attribute__((__cdecl__)) fmodl (long double, long double);
  extern double __attribute__((__cdecl__)) remainder (double, double);
  extern float __attribute__((__cdecl__)) remainderf (float, float);
  extern long double __attribute__((__cdecl__)) remainderl (long double, long double);
  extern double __attribute__((__cdecl__)) remquo(double, double, int *);
  extern float __attribute__((__cdecl__)) remquof(float, float, int *);
  extern long double __attribute__((__cdecl__)) remquol(long double, long double, int *);
  extern double __attribute__((__cdecl__)) copysign (double, double);
  extern float __attribute__((__cdecl__)) copysignf (float, float);
  extern long double __attribute__((__cdecl__)) copysignl (long double, long double);
  extern double __attribute__((__cdecl__)) nan(const char *tagp);
  extern float __attribute__((__cdecl__)) nanf(const char *tagp);
  extern long double __attribute__((__cdecl__)) nanl(const char *tagp);
  extern double __attribute__((__cdecl__)) nextafter (double, double);
  extern float __attribute__((__cdecl__)) nextafterf (float, float);
  extern long double __attribute__((__cdecl__)) nextafterl (long double, long double);
  extern double __attribute__((__cdecl__)) nexttoward (double, long double);
  extern float __attribute__((__cdecl__)) nexttowardf (float, long double);
  extern long double __attribute__((__cdecl__)) nexttowardl (long double, long double);
  extern double __attribute__((__cdecl__)) fdim (double x, double y);
  extern float __attribute__((__cdecl__)) fdimf (float x, float y);
  extern long double __attribute__((__cdecl__)) fdiml (long double x, long double y);
  extern double __attribute__((__cdecl__)) fmax (double, double);
  extern float __attribute__((__cdecl__)) fmaxf (float, float);
  extern long double __attribute__((__cdecl__)) fmaxl (long double, long double);
  extern double __attribute__((__cdecl__)) fmin (double, double);
  extern float __attribute__((__cdecl__)) fminf (float, float);
  extern long double __attribute__((__cdecl__)) fminl (long double, long double);
  extern double __attribute__((__cdecl__)) fma (double, double, double);
  extern float __attribute__((__cdecl__)) fmaf (float, float, float);
  extern long double __attribute__((__cdecl__)) fmal (long double, long double, long double);
  __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _hypotf(float _X,float _Y);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _copysignf (float _Number,float _Sign);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _chgsignf (float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _logbf(float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _nextafterf(float _X,float _Y);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _finitef(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isnanf(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fpclassf(float _X);
   extern long double __attribute__((__cdecl__)) _chgsignl (long double);


extern FILE (* _imp___iob)[];
  typedef long long fpos_t;
extern
  __attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vsscanf (const char * __restrict__ _Str,const char * __restrict__ Format,va_list argp);
extern
  __attribute__((__format__ (gnu_scanf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_scanf(const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vscanf(const char * __restrict__ Format, va_list argp);
extern
  __attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fscanf(FILE * __restrict__ _File,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfscanf (FILE * __restrict__ fp, const char * __restrict__ Format,va_list argp);
extern
  __attribute__((__format__ (gnu_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_vsnprintf(char * __restrict__ _DstBuf,size_t _MaxCount,const char * __restrict__ _Format,
                               va_list _ArgList);
extern
  __attribute__((__format__ (gnu_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);
extern
  __attribute__((__format__ (gnu_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_printf(const char * __restrict__ , ... ) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vprintf (const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fprintf (FILE * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfprintf (FILE * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_sprintf (char * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vsprintf (char * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__((nonnull (1,2)))
  int __attribute__((__cdecl__)) __mingw_asprintf(char ** __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__((nonnull (1,2)))
  int __attribute__((__cdecl__)) __mingw_vasprintf(char ** __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
  int __attribute__((__cdecl__)) fprintf(FILE * __restrict__ _File,const char * __restrict__ _Format,...);
  int __attribute__((__cdecl__)) printf(const char * __restrict__ _Format,...);
  int __attribute__((__cdecl__)) sprintf(char * __restrict__ _Dest,const char * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) vfprintf(FILE * __restrict__ _File,const char * __restrict__ _Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vprintf(const char * __restrict__ _Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vsprintf(char * __restrict__ _Dest,const char * __restrict__ _Format,va_list _Args) ;
  int __attribute__((__cdecl__)) fscanf(FILE * __restrict__ _File,const char * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) scanf(const char * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) vscanf(const char * __restrict__ Format, va_list argp);
  int __attribute__((__cdecl__)) vfscanf (FILE * __restrict__ fp, const char * __restrict__ Format,va_list argp);
  int __attribute__((__cdecl__)) vsscanf (const char * __restrict__ _Str,const char * __restrict__ Format,va_list argp);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _filbuf(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _flsbuf(int _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _fsopen(const char *_Filename,const char *_Mode,int _ShFlag);
  void __attribute__((__cdecl__)) clearerr(FILE *_File);
  int __attribute__((__cdecl__)) fclose(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fcloseall(void);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _fdopen(int _FileHandle,const char *_Mode);
  int __attribute__((__cdecl__)) feof(FILE *_File);
  int __attribute__((__cdecl__)) ferror(FILE *_File);
  int __attribute__((__cdecl__)) fflush(FILE *_File);
  int __attribute__((__cdecl__)) fgetc(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fgetchar(void);
  int __attribute__((__cdecl__)) fgetpos(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  int __attribute__((__cdecl__)) fgetpos64(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  char *__attribute__((__cdecl__)) fgets(char * __restrict__ _Buf,int _MaxCount,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fileno(FILE *_File);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _tempnam(const char *_DirName,const char *_FilePrefix);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _flushall(void);
  FILE *__attribute__((__cdecl__)) fopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode) ;
  FILE *fopen64(const char * __restrict__ filename,const char * __restrict__ mode);
  int __attribute__((__cdecl__)) fputc(int _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fputchar(int _Ch);
  int __attribute__((__cdecl__)) fputs(const char * __restrict__ _Str,FILE * __restrict__ _File);
  size_t __attribute__((__cdecl__)) fread(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  FILE *__attribute__((__cdecl__)) freopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode,FILE * __restrict__ _File) ;
  int __attribute__((__cdecl__)) _fscanf_l(FILE * __restrict__ _File,const char * __restrict__ _Format,_locale_t locale,...) ;
  int __attribute__((__cdecl__)) fsetpos(FILE *_File,const fpos_t *_Pos);
  int __attribute__((__cdecl__)) fsetpos64(FILE *_File,const fpos_t *_Pos);
  int __attribute__((__cdecl__)) fseek(FILE *_File,long _Offset,int _Origin);
  int fseeko64(FILE* stream, _off64_t offset, int whence);
  int fseeko(FILE* stream, _off_t offset, int whence);
  long __attribute__((__cdecl__)) ftell(FILE *_File);
  _off_t ftello(FILE * stream);
  _off64_t ftello64(FILE * stream);
  int __attribute__((__cdecl__)) _fseeki64(FILE *_File,long long _Offset,int _Origin);
  long long __attribute__((__cdecl__)) _ftelli64(FILE *_File);
  size_t __attribute__((__cdecl__)) fwrite(const void * __restrict__ _Str,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  int __attribute__((__cdecl__)) getc(FILE *_File);
  int __attribute__((__cdecl__)) getchar(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _getmaxstdio(void);
  char *__attribute__((__cdecl__)) gets(char *_Buffer) ;
  int __attribute__((__cdecl__)) _getw(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _pclose(FILE *_File);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _popen(const char *_Command,const char *_Mode);
  int __attribute__((__cdecl__)) putc(int _Ch,FILE *_File);
  int __attribute__((__cdecl__)) putchar(int _Ch);
  int __attribute__((__cdecl__)) puts(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putw(int _Word,FILE *_File);
  int __attribute__((__cdecl__)) remove(const char *_Filename);
  int __attribute__((__cdecl__)) rename(const char *_OldFilename,const char *_NewFilename);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _unlink(const char *_Filename);
  int __attribute__((__cdecl__)) unlink(const char *_Filename) ;
  void __attribute__((__cdecl__)) rewind(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _rmtmp(void);
  int __attribute__((__cdecl__)) _scanf_l(const char * __restrict__ format,_locale_t locale,... ) ;
  void __attribute__((__cdecl__)) setbuf(FILE * __restrict__ _File,char * __restrict__ _Buffer) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _setmaxstdio(int _Max);
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_output_format(unsigned int _Format);
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _get_output_format(void);
  unsigned int __attribute__((__cdecl__)) __mingw_set_output_format(unsigned int _Format);
  unsigned int __attribute__((__cdecl__)) __mingw_get_output_format(void);
  int __attribute__((__cdecl__)) setvbuf(FILE * __restrict__ _File,char * __restrict__ _Buf,int _Mode,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf(const char * __restrict__ _Format,...);
  int __attribute__((__cdecl__)) _sscanf_l(const char * __restrict__ buffer,const char * __restrict__ format,_locale_t locale,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf(const char * __restrict__ _Src,size_t _MaxCount,const char * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf_l(const char * __restrict__ input,size_t length,const char * __restrict__ format,_locale_t locale,...) ;
  FILE *__attribute__((__cdecl__)) tmpfile(void) ;
  char *__attribute__((__cdecl__)) tmpnam(char *_Buffer);
  int __attribute__((__cdecl__)) ungetc(int _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_l(char * __restrict__ buffer,size_t count,const char * __restrict__ format,_locale_t locale,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,va_list _Args) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_l(char * __restrict__ buffer,size_t count,const char * __restrict__ format,_locale_t locale,va_list argptr) ;
  int __attribute__((__cdecl__)) _sprintf_l(char * __restrict__ buffer,const char * __restrict__ format,_locale_t locale,...) ;
       
       
  int __attribute__((__cdecl__)) vsnprintf(char * __restrict__ d,size_t n,const char * __restrict__ format,va_list arg)
    ;
  int __attribute__((__cdecl__)) snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);
       
       
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf(const char * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_printf_count_output(int _Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _get_printf_count_output(void);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vswscanf (const wchar_t * __restrict__ _Str,const wchar_t * __restrict__ Format,va_list argp);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_wscanf(const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vwscanf(const wchar_t * __restrict__ Format, va_list argp);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfwscanf (FILE * __restrict__ fp, const wchar_t * __restrict__ Format,va_list argp);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                      __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_wprintf(const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_swprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ , ...) ;
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vswprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ ,va_list) ;
                                                      __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...);
                                                      __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_vsnwprintf (wchar_t * __restrict__ , size_t, const wchar_t * __restrict__ , va_list);
  int __attribute__((__cdecl__)) fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) wscanf(const wchar_t * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) vwscanf (const wchar_t * __restrict__ , va_list);
  int __attribute__((__cdecl__)) vfwscanf (FILE * __restrict__ ,const wchar_t * __restrict__ ,va_list);
  int __attribute__((__cdecl__)) vswscanf (const wchar_t * __restrict__ ,const wchar_t * __restrict__ ,va_list);
  int __attribute__((__cdecl__)) fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
  int __attribute__((__cdecl__)) wprintf(const wchar_t * __restrict__ _Format,...);
  int __attribute__((__cdecl__)) vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) swprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ , ...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) vswprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ ,va_list) ;
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfsopen(const wchar_t *_Filename,const wchar_t *_Mode,int _ShFlag);
  wint_t __attribute__((__cdecl__)) fgetwc(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fgetwchar(void);
  wint_t __attribute__((__cdecl__)) fputwc(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fputwchar(wchar_t _Ch);
  wint_t __attribute__((__cdecl__)) getwc(FILE *_File);
  wint_t __attribute__((__cdecl__)) getwchar(void);
  wint_t __attribute__((__cdecl__)) putwc(wchar_t _Ch,FILE *_File);
  wint_t __attribute__((__cdecl__)) putwchar(wchar_t _Ch);
  wint_t __attribute__((__cdecl__)) ungetwc(wint_t _Ch,FILE *_File);
  wchar_t *__attribute__((__cdecl__)) fgetws(wchar_t * __restrict__ _Dst,int _SizeInWords,FILE * __restrict__ _File);
  int __attribute__((__cdecl__)) fputws(const wchar_t * __restrict__ _Str,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _getws(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putws(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_l(wchar_t * __restrict__ buffer,size_t count,const wchar_t * __restrict__ format,_locale_t locale,... ) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,va_list _Args) ;
       
       
  int __attribute__((__cdecl__)) snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...);
  int __attribute__((__cdecl__)) vsnwprintf (wchar_t * __restrict__ , size_t, const wchar_t * __restrict__ , va_list);
       
       
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_p(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_p(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_p(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_p(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_p_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_p_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_c_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_p_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_c_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_p_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,va_list _Args);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __swprintf_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,_locale_t _Plocinfo,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_l(wchar_t * __restrict__ buffer,size_t count,const wchar_t * __restrict__ format,_locale_t locale,va_list argptr) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __vswprintf_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,_locale_t _Plocinfo,va_list _Args) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wtempnam(const wchar_t *_Directory,const wchar_t *_FilePrefix);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwscanf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swscanf_l(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf_l(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wscanf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfdopen(int _FileHandle ,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfopen(const wchar_t * __restrict__ _Filename,const wchar_t *__restrict__ _Mode) ;
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfreopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode,FILE * __restrict__ _OldFile) ;
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wpopen(const wchar_t *_Command,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wremove(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wtmpnam(wchar_t *_Buffer);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fgetwc_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fputwc_nolock(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _ungetwc_nolock(wint_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _lock_file(FILE *_File);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _unlock_file(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fclose_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fflush_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _fread_nolock(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fseek_nolock(FILE *_File,long _Offset,int _Origin);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _ftell_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fseeki64_nolock(FILE *_File,long long _Offset,int _Origin);
  __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _ftelli64_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _fwrite_nolock(const void * __restrict__ _DstBuf,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _ungetc_nolock(int _Ch,FILE *_File);
  char *__attribute__((__cdecl__)) tempnam(const char *_Directory,const char *_FilePrefix) ;
  int __attribute__((__cdecl__)) fcloseall(void) ;
  FILE *__attribute__((__cdecl__)) fdopen(int _FileHandle,const char *_Format) ;
  int __attribute__((__cdecl__)) fgetchar(void) ;
  int __attribute__((__cdecl__)) fileno(FILE *_File) ;
  int __attribute__((__cdecl__)) flushall(void) ;
  int __attribute__((__cdecl__)) fputchar(int _Ch) ;
  int __attribute__((__cdecl__)) getw(FILE *_File) ;
  int __attribute__((__cdecl__)) putw(int _Ch,FILE *_File) ;
  int __attribute__((__cdecl__)) rmtmp(void) ;
int __attribute__((__cdecl__)) __mingw_str_wide_utf8 (const wchar_t * const wptr, char **mbptr, size_t * buflen);
int __attribute__((__cdecl__)) __mingw_str_utf8_wide (const char *const mbptr, wchar_t ** wptr, size_t * buflen);
void __attribute__((__cdecl__)) __mingw_str_free(void *ptr);


__attribute__ ((__dllimport__)) char* __attribute__((__cdecl__)) _getcwd (char*, int);
  typedef unsigned long _fsize_t;
  struct _finddata32_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    char name[260];
  };
  struct _finddata32i64_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    long long size;
    char name[260];
  };
  struct _finddata64i32_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    char name[260];
  };
  struct __finddata64_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    long long size;
    char name[260];
  };
  struct _wfinddata32_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };
  struct _wfinddata32i64_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    long long size;
    wchar_t name[260];
  };
  struct _wfinddata64i32_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };
  struct _wfinddata64_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    long long size;
    wchar_t name[260];
  };
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _access(const char *_Filename,int _AccessMode);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _chmod(const char *_Filename,int _Mode);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _chsize(int _FileHandle,long _Size) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _close(int _FileHandle);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _commit(int _FileHandle);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _creat(const char *_Filename,int _PermissionMode) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _dup(int _FileHandle);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _dup2(int _FileHandleSrc,int _FileHandleDst);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _eof(int _FileHandle);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _filelength(int _FileHandle);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _findfirst(const char *_Filename,struct _finddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _findnext(intptr_t _FindHandle,struct _finddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _findclose(intptr_t _FindHandle);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isatty(int _FileHandle);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _locking(int _FileHandle,int _LockMode,long _NumOfBytes);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _lseek(int _FileHandle,long _Offset,int _Origin);
  _off64_t lseek64(int fd,_off64_t offset, int whence);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _mktemp(char *_TemplateName) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _pipe(int *_PtHandles,unsigned int _PipeSize,int _TextMode);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _read(int _FileHandle,void *_DstBuf,unsigned int _MaxCharCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _setmode(int _FileHandle,int _Mode);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _tell(int _FileHandle);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _umask(int _Mode) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _write(int _FileHandle,const void *_Buf,unsigned int _MaxCharCount);
  __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _filelengthi64(int _FileHandle);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _findfirst32i64(const char *_Filename,struct _finddata32i64_t *_FindData);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _findfirst64(const char *_Filename,struct __finddata64_t *_FindData);
  intptr_t __attribute__((__cdecl__)) _findfirst64i32(const char *_Filename,struct _finddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _findnext32i64(intptr_t _FindHandle,struct _finddata32i64_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _findnext64(intptr_t _FindHandle,struct __finddata64_t *_FindData);
  int __attribute__((__cdecl__)) _findnext64i32(intptr_t _FindHandle,struct _finddata64i32_t *_FindData);
  long long __attribute__((__cdecl__)) _lseeki64(int _FileHandle,long long _Offset,int _Origin);
  long long __attribute__((__cdecl__)) _telli64(int _FileHandle);
  int __attribute__((__cdecl__)) chdir (const char *) ;
  char *__attribute__((__cdecl__)) getcwd (char *, int) ;
  int __attribute__((__cdecl__)) mkdir (const char *) ;
  char *__attribute__((__cdecl__)) mktemp(char *) ;
  int __attribute__((__cdecl__)) rmdir (const char*) ;
  int __attribute__((__cdecl__)) chmod (const char *, int) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _sopen_s(int *_FileHandle,const char *_Filename,int _OpenFlag,int _ShareFlag,int _PermissionMode);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _open(const char *_Filename,int _OpenFlag,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sopen(const char *_Filename,int _OpenFlag,int _ShareFlag,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _waccess(const wchar_t *_Filename,int _AccessMode);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wchmod(const wchar_t *_Filename,int _Mode);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcreat(const wchar_t *_Filename,int _PermissionMode) ;
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wfindfirst(const wchar_t *_Filename,struct _wfinddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wfindnext(intptr_t _FindHandle,struct _wfinddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wunlink(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wrename(const wchar_t *_OldFilename,const wchar_t *_NewFilename);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wmktemp(wchar_t *_TemplateName) ;
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wfindfirsti64(const wchar_t *_Filename,struct _wfinddata32i64_t *_FindData);
  intptr_t __attribute__((__cdecl__)) _wfindfirst64i32(const wchar_t *_Filename,struct _wfinddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wfindfirst64(const wchar_t *_Filename,struct _wfinddata64_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wfindnexti64(intptr_t _FindHandle,struct _wfinddata32i64_t *_FindData);
  int __attribute__((__cdecl__)) _wfindnext64i32(intptr_t _FindHandle,struct _wfinddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wfindnext64(intptr_t _FindHandle,struct _wfinddata64_t *_FindData);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsopen_s(int *_FileHandle,const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,int _PermissionFlag);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wopen(const wchar_t *_Filename,int _OpenFlag,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wsopen(const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,...) ;
  int __attribute__((__cdecl__)) __lock_fhandle(int _Filehandle);
  void __attribute__((__cdecl__)) _unlock_fhandle(int _Filehandle);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _get_osfhandle(int _FileHandle);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _open_osfhandle(intptr_t _OSFileHandle,int _Flags);
  int __attribute__((__cdecl__)) access(const char *_Filename,int _AccessMode) ;
  int __attribute__((__cdecl__)) chmod(const char *_Filename,int _AccessMode) ;
  int __attribute__((__cdecl__)) chsize(int _FileHandle,long _Size) ;
  int __attribute__((__cdecl__)) close(int _FileHandle) ;
  int __attribute__((__cdecl__)) creat(const char *_Filename,int _PermissionMode) ;
  int __attribute__((__cdecl__)) dup(int _FileHandle) ;
  int __attribute__((__cdecl__)) dup2(int _FileHandleSrc,int _FileHandleDst) ;
  int __attribute__((__cdecl__)) eof(int _FileHandle) ;
  long __attribute__((__cdecl__)) filelength(int _FileHandle) ;
  int __attribute__((__cdecl__)) isatty(int _FileHandle) ;
  int __attribute__((__cdecl__)) locking(int _FileHandle,int _LockMode,long _NumOfBytes) ;
  long __attribute__((__cdecl__)) lseek(int _FileHandle,long _Offset,int _Origin) ;
  char *__attribute__((__cdecl__)) mktemp(char *_TemplateName) ;
  int __attribute__((__cdecl__)) open(const char *_Filename,int _OpenFlag,...) ;
  int __attribute__((__cdecl__)) read(int _FileHandle,void *_DstBuf,unsigned int _MaxCharCount) ;
  int __attribute__((__cdecl__)) setmode(int _FileHandle,int _Mode) ;
  int __attribute__((__cdecl__)) sopen(const char *_Filename,int _OpenFlag,int _ShareFlag,...) ;
  long __attribute__((__cdecl__)) tell(int _FileHandle) ;
  int __attribute__((__cdecl__)) umask(int _Mode) ;
  int __attribute__((__cdecl__)) write(int _Filehandle,const void *_Buf,unsigned int _MaxCharCount) ;

  __attribute__ ((__dllimport__)) uintptr_t __attribute__((__cdecl__)) _beginthread(void (__attribute__((__cdecl__)) *_StartAddress) (void *),unsigned _StackSize,void *_ArgList);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _endthread(void) __attribute__ ((__noreturn__));
  __attribute__ ((__dllimport__)) uintptr_t __attribute__((__cdecl__)) _beginthreadex(void *_Security,unsigned _StackSize,unsigned (__attribute__((__stdcall__)) *_StartAddress) (void *),void *_ArgList,unsigned _InitFlag,unsigned *_ThrdAddr);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _endthreadex(unsigned _Retval) __attribute__ ((__noreturn__));
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _cexit(void);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _c_exit(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _getpid(void);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _cwait(int *_TermStat,intptr_t _ProcHandle,int _Action);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _execl(const char *_Filename,const char *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _execle(const char *_Filename,const char *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _execlp(const char *_Filename,const char *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _execlpe(const char *_Filename,const char *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _execv(const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _execve(const char *_Filename,const char *const *_ArgList,const char *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _execvp(const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _execvpe(const char *_Filename,const char *const *_ArgList,const char *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnl(int _Mode,const char *_Filename,const char *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnle(int _Mode,const char *_Filename,const char *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnlp(int _Mode,const char *_Filename,const char *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnlpe(int _Mode,const char *_Filename,const char *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnv(int _Mode,const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnve(int _Mode,const char *_Filename,const char *const *_ArgList,const char *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnvp(int _Mode,const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnvpe(int _Mode,const char *_Filename,const char *const *_ArgList,const char *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecl(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecle(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexeclp(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexeclpe(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecv(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecve(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecvp(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecvpe(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnl(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnle(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnlp(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnlpe(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnv(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnve(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnvp(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnvpe(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  void __attribute__((__cdecl__)) __security_init_cookie(void);
  void __attribute__((__stdcall__)) __security_check_cookie(uintptr_t _StackCookie);
  __attribute__((noreturn)) void __attribute__((__cdecl__)) __report_gsfailure(void);
  extern uintptr_t __security_cookie;
  intptr_t __attribute__((__cdecl__)) _loaddll(char *_Filename);
  int __attribute__((__cdecl__)) _unloaddll(intptr_t _Handle);
  int (__attribute__((__cdecl__)) *__attribute__((__cdecl__)) _getdllprocaddr(intptr_t _Handle,char *_ProcedureName,intptr_t _Ordinal))(void);
  intptr_t __attribute__((__cdecl__)) cwait(int *_TermStat,intptr_t _ProcHandle,int _Action) ;
  int __attribute__((__cdecl__)) execl(const char *_Filename,const char *_ArgList,...) ;
  int __attribute__((__cdecl__)) execle(const char *_Filename,const char *_ArgList,...) ;
  int __attribute__((__cdecl__)) execlp(const char *_Filename,const char *_ArgList,...) ;
  int __attribute__((__cdecl__)) execlpe(const char *_Filename,const char *_ArgList,...) ;
  intptr_t __attribute__((__cdecl__)) spawnl(int,const char *_Filename,const char *_ArgList,...) ;
  intptr_t __attribute__((__cdecl__)) spawnle(int,const char *_Filename,const char *_ArgList,...) ;
  intptr_t __attribute__((__cdecl__)) spawnlp(int,const char *_Filename,const char *_ArgList,...) ;
  intptr_t __attribute__((__cdecl__)) spawnlpe(int,const char *_Filename,const char *_ArgList,...) ;
  int __attribute__((__cdecl__)) getpid(void) ;
  int __attribute__((__cdecl__)) execv(const char *_Filename,char *const _ArgList[]) ;
  int __attribute__((__cdecl__)) execve(const char *_Filename,char *const _ArgList[],char *const _Env[]) ;
  int __attribute__((__cdecl__)) execvp(const char *_Filename,char *const _ArgList[]) ;
  int __attribute__((__cdecl__)) execvpe(const char *_Filename,char *const _ArgList[],char *const _Env[]) ;
  intptr_t __attribute__((__cdecl__)) spawnv(int,const char *_Filename,char *const _ArgList[]) ;
  intptr_t __attribute__((__cdecl__)) spawnve(int,const char *_Filename,char *const _ArgList[],char *const _Env[]) ;
  intptr_t __attribute__((__cdecl__)) spawnvp(int,const char *_Filename,char *const _ArgList[]) ;
  intptr_t __attribute__((__cdecl__)) spawnvpe(int,const char *_Filename,char *const _ArgList[],char *const _Env[]) ;
extern int optind;
extern int optopt;
extern int opterr;
extern char *optarg;
extern int getopt(int nargc, char * const *nargv, const char *options);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) usleep(useconds_t useconds);
int ftruncate(int, off32_t);
int ftruncate64(int, off64_t);
int truncate(const char *, off32_t);
int truncate64(const char *, off64_t);
BOOL __attribute__((__stdcall__)) ShowHideMenuCtl (HWND, UINT_PTR, LPINT);
void __attribute__((__stdcall__)) GetEffectiveClientRect (HWND, LPRECT, const INT*);
void __attribute__((__stdcall__)) InitCommonControls (void);
typedef struct tagINITCOMMONCONTROLSEX {
    DWORD dwSize;
    DWORD dwICC;
} INITCOMMONCONTROLSEX, *LPINITCOMMONCONTROLSEX;
BOOL __attribute__((__stdcall__)) InitCommonControlsEx (const INITCOMMONCONTROLSEX*);
LANGID __attribute__((__stdcall__)) GetMUILanguage (void);
void __attribute__((__stdcall__)) InitMUILanguage (LANGID uiLang);
typedef struct tagNMTOOLTIPSCREATED
{
    NMHDR hdr;
    HWND hwndToolTips;
} NMTOOLTIPSCREATED, *LPNMTOOLTIPSCREATED;
typedef struct tagNMMOUSE
{
    NMHDR hdr;
    DWORD_PTR dwItemSpec;
    DWORD_PTR dwItemData;
    POINT pt;
    DWORD dwHitInfo;
} NMMOUSE, *LPNMMOUSE;
typedef struct tagNMOBJECTNOTIFY
{
    NMHDR hdr;
    int iItem;
    const IID *piid;
    void *pObject;
    HRESULT hResult;
    DWORD dwFlags;
} NMOBJECTNOTIFY, *LPNMOBJECTNOTIFY;
typedef struct tagNMKEY
{
    NMHDR hdr;
    UINT nVKey;
    UINT uFlags;
} NMKEY, *LPNMKEY;
typedef struct tagNMCHAR
{
    NMHDR hdr;
    UINT ch;
    DWORD dwItemPrev;
    DWORD dwItemNext;
} NMCHAR, *LPNMCHAR;
typedef struct tagNMCUSTOMDRAWINFO
{
 NMHDR hdr;
 DWORD dwDrawStage;
 HDC hdc;
 RECT rc;
 DWORD_PTR dwItemSpec;
 UINT uItemState;
 LPARAM lItemlParam;
} NMCUSTOMDRAW, *LPNMCUSTOMDRAW;
typedef struct tagNMTTCUSTOMDRAW
{
    NMCUSTOMDRAW nmcd;
    UINT uDrawFlags;
} NMTTCUSTOMDRAW, *LPNMTTCUSTOMDRAW;
HWND __attribute__((__stdcall__)) CreateStatusWindowA (LONG, LPCSTR, HWND, UINT);
HWND __attribute__((__stdcall__)) CreateStatusWindowW (LONG, LPCWSTR, HWND, UINT);
void __attribute__((__stdcall__)) DrawStatusTextA (HDC, LPCRECT, LPCSTR, UINT);
void __attribute__((__stdcall__)) DrawStatusTextW (HDC, LPCRECT, LPCWSTR, UINT);
void __attribute__((__stdcall__)) MenuHelp (UINT, WPARAM, LPARAM, HMENU,
                      HINSTANCE, HWND, UINT*);
typedef struct tagCOLORSCHEME
{
   DWORD dwSize;
   COLORREF clrBtnHighlight;
   COLORREF clrBtnShadow;
} COLORSCHEME, *LPCOLORSCHEME;
typedef struct tagDRAGLISTINFO
{
    UINT uNotification;
    HWND hWnd;
    POINT ptCursor;
} DRAGLISTINFO, *LPDRAGLISTINFO;
BOOL __attribute__((__stdcall__)) MakeDragList (HWND);
void __attribute__((__stdcall__)) DrawInsert (HWND, HWND, INT);
INT __attribute__((__stdcall__)) LBItemFromPt (HWND, POINT, BOOL);
typedef struct _UDACCEL
{
    UINT nSec;
    UINT nInc;
} UDACCEL, *LPUDACCEL;
typedef struct tagNM_UPDOWN
{
  NMHDR hdr;
  int iPos;
  int iDelta;
} NM_UPDOWN, *LPNM_UPDOWN;
HWND __attribute__((__stdcall__)) CreateUpDownControl (DWORD, INT, INT, INT, INT,
                                   HWND, INT, HINSTANCE, HWND,
                                   INT, INT, INT);
typedef struct
{
    INT iLow;
    INT iHigh;
} PBRANGE, *PPBRANGE;
struct _IMAGELIST;
typedef struct _IMAGELIST *HIMAGELIST;
typedef struct _IMAGEINFO
{
    HBITMAP hbmImage;
    HBITMAP hbmMask;
    INT Unused1;
    INT Unused2;
    RECT rcImage;
} IMAGEINFO, *LPIMAGEINFO;
typedef struct _IMAGELISTDRAWPARAMS
{
    DWORD cbSize;
    HIMAGELIST himl;
    INT i;
    HDC hdcDst;
    INT x;
    INT y;
    INT cx;
    INT cy;
    INT xBitmap;
    INT yBitmap;
    COLORREF rgbBk;
    COLORREF rgbFg;
    UINT fStyle;
    DWORD dwRop;
    DWORD fState;
    DWORD Frame;
    COLORREF crEffect;
} IMAGELISTDRAWPARAMS, *LPIMAGELISTDRAWPARAMS;
HRESULT __attribute__((__stdcall__)) HIMAGELIST_QueryInterface(HIMAGELIST,const IID* const,void **);
INT __attribute__((__stdcall__)) ImageList_Add(HIMAGELIST,HBITMAP,HBITMAP);
INT __attribute__((__stdcall__)) ImageList_AddMasked(HIMAGELIST,HBITMAP,COLORREF);
BOOL __attribute__((__stdcall__)) ImageList_BeginDrag(HIMAGELIST,INT,INT,INT);
BOOL __attribute__((__stdcall__)) ImageList_Copy(HIMAGELIST,INT,HIMAGELIST,INT,UINT);
HIMAGELIST __attribute__((__stdcall__)) ImageList_Create(INT,INT,UINT,INT,INT);
BOOL __attribute__((__stdcall__)) ImageList_Destroy(HIMAGELIST);
BOOL __attribute__((__stdcall__)) ImageList_DragEnter(HWND,INT,INT);
BOOL __attribute__((__stdcall__)) ImageList_DragLeave(HWND);
BOOL __attribute__((__stdcall__)) ImageList_DragMove(INT,INT);
BOOL __attribute__((__stdcall__)) ImageList_DragShowNolock (BOOL);
BOOL __attribute__((__stdcall__)) ImageList_Draw(HIMAGELIST,INT,HDC,INT,INT,UINT);
BOOL __attribute__((__stdcall__)) ImageList_DrawEx(HIMAGELIST,INT,HDC,INT,INT,INT,
                                   INT,COLORREF,COLORREF,UINT);
BOOL __attribute__((__stdcall__)) ImageList_DrawIndirect(IMAGELISTDRAWPARAMS*);
HIMAGELIST __attribute__((__stdcall__)) ImageList_Duplicate(HIMAGELIST);
void __attribute__((__stdcall__)) ImageList_EndDrag(void);
COLORREF __attribute__((__stdcall__)) ImageList_GetBkColor(HIMAGELIST);
HIMAGELIST __attribute__((__stdcall__)) ImageList_GetDragImage(POINT*,POINT*);
HICON __attribute__((__stdcall__)) ImageList_GetIcon(HIMAGELIST,INT,UINT);
BOOL __attribute__((__stdcall__)) ImageList_GetIconSize(HIMAGELIST,INT*,INT*);
INT __attribute__((__stdcall__)) ImageList_GetImageCount(HIMAGELIST);
BOOL __attribute__((__stdcall__)) ImageList_GetImageInfo(HIMAGELIST,INT,IMAGEINFO*);
BOOL __attribute__((__stdcall__)) ImageList_GetImageRect(HIMAGELIST,INT,LPRECT);
HIMAGELIST __attribute__((__stdcall__)) ImageList_LoadImageA(HINSTANCE,LPCSTR,INT,INT,
                                         COLORREF,UINT,UINT);
HIMAGELIST __attribute__((__stdcall__)) ImageList_LoadImageW(HINSTANCE,LPCWSTR,INT,INT,
                                         COLORREF,UINT,UINT);
HIMAGELIST __attribute__((__stdcall__)) ImageList_Merge(HIMAGELIST,INT,HIMAGELIST,INT,INT,INT);
BOOL __attribute__((__stdcall__)) ImageList_Remove(HIMAGELIST,INT);
BOOL __attribute__((__stdcall__)) ImageList_Replace(HIMAGELIST,INT,HBITMAP,HBITMAP);
INT __attribute__((__stdcall__)) ImageList_ReplaceIcon(HIMAGELIST,INT,HICON);
COLORREF __attribute__((__stdcall__)) ImageList_SetBkColor(HIMAGELIST,COLORREF);
BOOL __attribute__((__stdcall__)) ImageList_SetDragCursorImage(HIMAGELIST,INT,INT,INT);
BOOL __attribute__((__stdcall__)) ImageList_SetIconSize(HIMAGELIST,INT,INT);
BOOL __attribute__((__stdcall__)) ImageList_SetImageCount(HIMAGELIST,UINT);
BOOL __attribute__((__stdcall__)) ImageList_SetOverlayImage(HIMAGELIST,INT,INT);
HIMAGELIST __attribute__((__stdcall__)) ImageList_Read(LPSTREAM);
BOOL __attribute__((__stdcall__)) ImageList_Write(HIMAGELIST, LPSTREAM);
BOOL __attribute__((__stdcall__)) _TrackMouseEvent(LPTRACKMOUSEEVENT lpEventTrack);
BOOL __attribute__((__stdcall__)) FlatSB_EnableScrollBar(HWND, INT, UINT);
BOOL __attribute__((__stdcall__)) FlatSB_ShowScrollBar(HWND, INT, BOOL);
BOOL __attribute__((__stdcall__)) FlatSB_GetScrollRange(HWND, INT, LPINT, LPINT);
BOOL __attribute__((__stdcall__)) FlatSB_GetScrollInfo(HWND, INT, LPSCROLLINFO);
INT __attribute__((__stdcall__)) FlatSB_GetScrollPos(HWND, INT);
BOOL __attribute__((__stdcall__)) FlatSB_GetScrollProp(HWND, INT, LPINT);
INT __attribute__((__stdcall__)) FlatSB_SetScrollPos(HWND, INT, INT, BOOL);
INT __attribute__((__stdcall__)) FlatSB_SetScrollInfo(HWND, INT, LPSCROLLINFO, BOOL);
INT __attribute__((__stdcall__)) FlatSB_SetScrollRange(HWND, INT, INT, INT, BOOL);
BOOL __attribute__((__stdcall__)) FlatSB_SetScrollProp(HWND, UINT, INT, BOOL);
BOOL __attribute__((__stdcall__)) InitializeFlatSB(HWND);
HRESULT __attribute__((__stdcall__)) UninitializeFlatSB(HWND);
typedef LRESULT (__attribute__((__stdcall__)) *SUBCLASSPROC)(HWND, UINT, WPARAM, LPARAM, UINT_PTR, DWORD_PTR);
BOOL __attribute__((__stdcall__)) SetWindowSubclass(HWND, SUBCLASSPROC, UINT_PTR, DWORD_PTR);
BOOL __attribute__((__stdcall__)) GetWindowSubclass(HWND, SUBCLASSPROC, UINT_PTR, DWORD_PTR*);
BOOL __attribute__((__stdcall__)) RemoveWindowSubclass(HWND, SUBCLASSPROC, UINT_PTR);
LRESULT __attribute__((__stdcall__)) DefSubclassProc(HWND, UINT, WPARAM, LPARAM);
int __attribute__((__stdcall__)) DrawShadowText(HDC, LPCWSTR, UINT, RECT*, DWORD, COLORREF, COLORREF, int, int);
typedef struct _HD_LAYOUT
{
    RECT *prc;
    WINDOWPOS *pwpos;
} HDLAYOUT, *LPHDLAYOUT;
typedef struct _HD_ITEMA
{
    UINT mask;
    INT cxy;
    LPSTR pszText;
    HBITMAP hbm;
    INT cchTextMax;
    INT fmt;
    LPARAM lParam;
    INT iImage;
    INT iOrder;
    UINT type;
    LPVOID pvFilter;
    UINT state;
} HDITEMA, *LPHDITEMA;
typedef struct _HD_ITEMW
{
    UINT mask;
    INT cxy;
    LPWSTR pszText;
    HBITMAP hbm;
    INT cchTextMax;
    INT fmt;
    LPARAM lParam;
    INT iImage;
    INT iOrder;
    UINT type;
    LPVOID pvFilter;
    UINT state;
} HDITEMW, *LPHDITEMW;
typedef struct _HD_TEXTFILTERA
{
    LPSTR pszText;
    INT cchTextMax;
} HD_TEXTFILTERA, *LPHD_TEXTFILTERA;
typedef struct _HD_TEXTFILTERW
{
    LPWSTR pszText;
    INT cchTextMax;
} HD_TEXTFILTERW, *LPHD_TEXTFILTERW;
typedef struct _HD_HITTESTINFO
{
    POINT pt;
    UINT flags;
    INT iItem;
} HDHITTESTINFO, *LPHDHITTESTINFO;
typedef struct tagNMHEADERA
{
    NMHDR hdr;
    INT iItem;
    INT iButton;
    HDITEMA *pitem;
} NMHEADERA, *LPNMHEADERA;
typedef struct tagNMHEADERW
{
    NMHDR hdr;
    INT iItem;
    INT iButton;
    HDITEMW *pitem;
} NMHEADERW, *LPNMHEADERW;
typedef struct tagNMHDDISPINFOA
{
    NMHDR hdr;
    INT iItem;
    UINT mask;
    LPSTR pszText;
    INT cchTextMax;
    INT iImage;
    LPARAM lParam;
} NMHDDISPINFOA, *LPNMHDDISPINFOA;
typedef struct tagNMHDDISPINFOW
{
    NMHDR hdr;
    INT iItem;
    UINT mask;
    LPWSTR pszText;
    INT cchTextMax;
    INT iImage;
    LPARAM lParam;
} NMHDDISPINFOW, *LPNMHDDISPINFOW;
typedef struct tagNMHDFILTERBTNCLICK
{
    NMHDR hdr;
    INT iItem;
    RECT rc;
} NMHDFILTERBTNCLICK, *LPNMHDFILTERBTNCLICK;
typedef struct tagNMBCHOTITEM
{
  NMHDR hdr;
  DWORD dwFlags;
} NMBCHOTITEM, *LPNMBCHOTITEM;
typedef struct _NMTBCUSTOMDRAW
{
    NMCUSTOMDRAW nmcd;
    HBRUSH hbrMonoDither;
    HBRUSH hbrLines;
    HPEN hpenLines;
    COLORREF clrText;
    COLORREF clrMark;
    COLORREF clrTextHighlight;
    COLORREF clrBtnFace;
    COLORREF clrBtnHighlight;
    COLORREF clrHighlightHotTrack;
    RECT rcText;
    int nStringBkMode;
    int nHLStringBkMode;
    int iListGap;
} NMTBCUSTOMDRAW, *LPNMTBCUSTOMDRAW;
typedef struct _OLDTBBUTTON {
    INT iBitmap;
    INT idCommand;
    BYTE fsState;
    BYTE fsStyle;
    BYTE bReserved[2];
    DWORD dwData;
} OLDTBBUTTON, *POLDTBBUTTON, *LPOLDTBBUTTON;
typedef const OLDTBBUTTON *LPCOLDTBBUTTON;
typedef struct _TBBUTTON {
    INT iBitmap;
    INT idCommand;
    BYTE fsState;
    BYTE fsStyle;
    BYTE bReserved[2];
    DWORD_PTR dwData;
    INT_PTR iString;
} TBBUTTON, *PTBBUTTON, *LPTBBUTTON;
typedef const TBBUTTON *LPCTBBUTTON;
typedef struct _COLORMAP {
    COLORREF from;
    COLORREF to;
} COLORMAP, *LPCOLORMAP;
typedef struct tagTBADDBITMAP {
    HINSTANCE hInst;
    UINT_PTR nID;
} TBADDBITMAP, *LPTBADDBITMAP;
typedef struct tagTBSAVEPARAMSA {
    HKEY hkr;
    LPCSTR pszSubKey;
    LPCSTR pszValueName;
} TBSAVEPARAMSA, *LPTBSAVEPARAMSA;
typedef struct tagTBSAVEPARAMSW {
    HKEY hkr;
    LPCWSTR pszSubKey;
    LPCWSTR pszValueName;
} TBSAVEPARAMSW, *LPTBSAVEPARAMSW;
typedef struct
{
    UINT cbSize;
    DWORD dwMask;
    INT idCommand;
    INT iImage;
    BYTE fsState;
    BYTE fsStyle;
    WORD cx;
    DWORD_PTR lParam;
    LPSTR pszText;
    INT cchText;
} TBBUTTONINFOA, *LPTBBUTTONINFOA;
typedef struct
{
    UINT cbSize;
    DWORD dwMask;
    INT idCommand;
    INT iImage;
    BYTE fsState;
    BYTE fsStyle;
    WORD cx;
    DWORD_PTR lParam;
    LPWSTR pszText;
    INT cchText;
} TBBUTTONINFOW, *LPTBBUTTONINFOW;
typedef struct tagNMTBHOTITEM
{
    NMHDR hdr;
    int idOld;
    int idNew;
    DWORD dwFlags;
} NMTBHOTITEM, *LPNMTBHOTITEM;
typedef struct tagNMTBGETINFOTIPA
{
    NMHDR hdr;
    LPSTR pszText;
    INT cchTextMax;
    INT iItem;
    LPARAM lParam;
} NMTBGETINFOTIPA, *LPNMTBGETINFOTIPA;
typedef struct tagNMTBGETINFOTIPW
{
    NMHDR hdr;
    LPWSTR pszText;
    INT cchTextMax;
    INT iItem;
    LPARAM lParam;
} NMTBGETINFOTIPW, *LPNMTBGETINFOTIPW;
typedef struct
{
    NMHDR hdr;
    DWORD dwMask;
    int idCommand;
    DWORD_PTR lParam;
    int iImage;
    LPSTR pszText;
    int cchText;
} NMTBDISPINFOA, *LPNMTBDISPINFOA;
typedef struct
{
    NMHDR hdr;
    DWORD dwMask;
    int idCommand;
    DWORD_PTR lParam;
    int iImage;
    LPWSTR pszText;
    int cchText;
} NMTBDISPINFOW, *LPNMTBDISPINFOW;
typedef struct tagNMTOOLBARA
{
    NMHDR hdr;
    INT iItem;
    TBBUTTON tbButton;
    INT cchText;
    LPSTR pszText;
    RECT rcButton;
} NMTOOLBARA, *LPNMTOOLBARA, TBNOTIFYA, *LPTBNOTIFYA;
typedef struct tagNMTOOLBARW
{
    NMHDR hdr;
    INT iItem;
    TBBUTTON tbButton;
    INT cchText;
    LPWSTR pszText;
    RECT rcButton;
} NMTOOLBARW, *LPNMTOOLBARW, TBNOTIFYW, *LPTBNOTIFYW;
typedef struct
{
 HINSTANCE hInstOld;
 UINT_PTR nIDOld;
 HINSTANCE hInstNew;
 UINT_PTR nIDNew;
 INT nButtons;
} TBREPLACEBITMAP, *LPTBREPLACEBITMAP;
typedef struct
{
    int iButton;
    DWORD dwFlags;
} TBINSERTMARK, *LPTBINSERTMARK;
typedef struct tagNMTBSAVE
{
    NMHDR hdr;
    DWORD* pData;
    DWORD* pCurrent;
    UINT cbData;
    int iItem;
    int cButtons;
    TBBUTTON tbButton;
} NMTBSAVE, *LPNMTBSAVE;
typedef struct tagNMTBRESTORE
{
    NMHDR hdr;
    DWORD* pData;
    DWORD* pCurrent;
    UINT cbData;
    int iItem;
    int cButtons;
    int cbBytesPerRecord;
    TBBUTTON tbButton;
} NMTBRESTORE, *LPNMTBRESTORE;
typedef struct
{
    UINT cbSize;
    DWORD dwMask;
    INT cxPad;
    INT cyPad;
    INT cxBarPad;
    INT cyBarPad;
    INT cxButtonSpacing;
    INT cyButtonSpacing;
} TBMETRICS, *LPTBMETRICS;
typedef struct
{
    NMHDR hdr;
    HWND hwndDialog;
} NMTBINITCUSTOMIZE;
typedef struct
{
    NMHDR hdr;
    INT idNew;
    INT iDirection;
    DWORD dwReason;
} NMTBWRAPHOTITEM;
HWND __attribute__((__stdcall__))
CreateToolbar(HWND, DWORD, UINT, INT, HINSTANCE,
              UINT, LPCTBBUTTON, INT);
HWND __attribute__((__stdcall__))
CreateToolbarEx(HWND, DWORD, UINT, INT,
                HINSTANCE, UINT_PTR, LPCTBBUTTON,
                INT, INT, INT, INT, INT, UINT);
HBITMAP __attribute__((__stdcall__))
CreateMappedBitmap (HINSTANCE, INT_PTR, UINT, LPCOLORMAP, INT);
typedef struct tagTOOLINFOA {
    UINT cbSize;
    UINT uFlags;
    HWND hwnd;
    UINT_PTR uId;
    RECT rect;
    HINSTANCE hinst;
    LPSTR lpszText;
    LPARAM lParam;
    void *lpReserved;
} TTTOOLINFOA, *LPTOOLINFOA, *PTOOLINFOA, *LPTTTOOLINFOA;
typedef struct tagTOOLINFOW {
    UINT cbSize;
    UINT uFlags;
    HWND hwnd;
    UINT_PTR uId;
    RECT rect;
    HINSTANCE hinst;
    LPWSTR lpszText;
    LPARAM lParam;
    void *lpReserved;
} TTTOOLINFOW, *LPTOOLINFOW, *PTOOLINFOW, *LPTTTOOLINFOW;
typedef struct _TT_HITTESTINFOA
{
    HWND hwnd;
    POINT pt;
    TTTOOLINFOA ti;
} TTHITTESTINFOA, *LPTTHITTESTINFOA;
typedef struct _TT_HITTESTINFOW
{
    HWND hwnd;
    POINT pt;
    TTTOOLINFOW ti;
} TTHITTESTINFOW, *LPTTHITTESTINFOW;
typedef struct tagNMTTDISPINFOA
{
    NMHDR hdr;
    LPSTR lpszText;
    CHAR szText[80];
    HINSTANCE hinst;
    UINT uFlags;
    LPARAM lParam;
} NMTTDISPINFOA, *LPNMTTDISPINFOA;
typedef struct tagNMTTDISPINFOW
{
    NMHDR hdr;
    LPWSTR lpszText;
    WCHAR szText[80];
    HINSTANCE hinst;
    UINT uFlags;
    LPARAM lParam;
} NMTTDISPINFOW, *LPNMTTDISPINFOW;
typedef struct _TTGETTITLE
{
    DWORD dwSize;
    UINT uTitleBitmap;
    UINT cch;
    WCHAR* pszTitle;
} TTGETTITLE, *PTTGETTITLE;
typedef struct tagREBARINFO
{
    UINT cbSize;
    UINT fMask;
    HIMAGELIST himl;
} REBARINFO, *LPREBARINFO;
typedef struct tagREBARBANDINFOA
{
    UINT cbSize;
    UINT fMask;
    UINT fStyle;
    COLORREF clrFore;
    COLORREF clrBack;
    LPSTR lpText;
    UINT cch;
    INT iImage;
    HWND hwndChild;
    UINT cxMinChild;
    UINT cyMinChild;
    UINT cx;
    HBITMAP hbmBack;
    UINT wID;
    UINT cyChild;
    UINT cyMaxChild;
    UINT cyIntegral;
    UINT cxIdeal;
    LPARAM lParam;
    UINT cxHeader;
    RECT rcChevronLocation;
    UINT uChevronState;
} REBARBANDINFOA, *LPREBARBANDINFOA;
typedef REBARBANDINFOA const *LPCREBARBANDINFOA;
typedef struct tagREBARBANDINFOW
{
    UINT cbSize;
    UINT fMask;
    UINT fStyle;
    COLORREF clrFore;
    COLORREF clrBack;
    LPWSTR lpText;
    UINT cch;
    INT iImage;
    HWND hwndChild;
    UINT cxMinChild;
    UINT cyMinChild;
    UINT cx;
    HBITMAP hbmBack;
    UINT wID;
    UINT cyChild;
    UINT cyMaxChild;
    UINT cyIntegral;
    UINT cxIdeal;
    LPARAM lParam;
    UINT cxHeader;
    RECT rcChevronLocation;
    UINT uChevronState;
} REBARBANDINFOW, *LPREBARBANDINFOW;
typedef REBARBANDINFOW const *LPCREBARBANDINFOW;
typedef struct tagNMREBARCHILDSIZE
{
    NMHDR hdr;
    UINT uBand;
    UINT wID;
    RECT rcChild;
    RECT rcBand;
} NMREBARCHILDSIZE, *LPNMREBARCHILDSIZE;
typedef struct tagNMREBAR
{
    NMHDR hdr;
    DWORD dwMask;
    UINT uBand;
    UINT fStyle;
    UINT wID;
    LPARAM lParam;
} NMREBAR, *LPNMREBAR;
typedef struct tagNMRBAUTOSIZE
{
    NMHDR hdr;
    BOOL fChanged;
    RECT rcTarget;
    RECT rcActual;
} NMRBAUTOSIZE, *LPNMRBAUTOSIZE;
typedef struct tagNMREBARCHEVRON
{
    NMHDR hdr;
    UINT uBand;
    UINT wID;
    LPARAM lParam;
    RECT rc;
    LPARAM lParamNM;
} NMREBARCHEVRON, *LPNMREBARCHEVRON;
typedef struct _RB_HITTESTINFO
{
    POINT pt;
    UINT flags;
    INT iBand;
} RBHITTESTINFO, *LPRBHITTESTINFO;
typedef struct tagNMREBARAUTOBREAK
{
    NMHDR hdr;
    UINT uBand;
    UINT wID;
    LPARAM lParam;
    UINT uMsg;
    UINT fStyleCurrent;
    BOOL fAutoBreak;
} NMREBARAUTOBREAK, *LPNMREBARAUTOBREAK;

typedef struct
{
    NMHDR hdr;
    WORD fwKeys;
    RECT rcParent;
    INT iDir;
    INT iXpos;
    INT iYpos;
    INT iScroll;
} NMPGSCROLL, *LPNMPGSCROLL;

typedef struct
{
    NMHDR hdr;
    DWORD dwFlag;
    INT iWidth;
    INT iHeight;
} NMPGCALCSIZE, *LPNMPGCALCSIZE;
typedef struct _TREEITEM *HTREEITEM;
typedef struct {
      UINT mask;
      HTREEITEM hItem;
      UINT state;
      UINT stateMask;
      LPSTR pszText;
      INT cchTextMax;
      INT iImage;
      INT iSelectedImage;
      INT cChildren;
      LPARAM lParam;
} TVITEMA, *LPTVITEMA;
typedef struct {
      UINT mask;
      HTREEITEM hItem;
      UINT state;
      UINT stateMask;
      LPWSTR pszText;
      INT cchTextMax;
      INT iImage;
      INT iSelectedImage;
      INT cChildren;
      LPARAM lParam;
} TVITEMW, *LPTVITEMW;
typedef struct {
      UINT mask;
      HTREEITEM hItem;
      UINT state;
      UINT stateMask;
      LPSTR pszText;
      INT cchTextMax;
      INT iImage;
      INT iSelectedImage;
      INT cChildren;
      LPARAM lParam;
      INT iIntegral;
      UINT uStateEx;
      HWND hwnd;
      INT iExpandedImage;
} TVITEMEXA, *LPTVITEMEXA;
typedef struct {
      UINT mask;
      HTREEITEM hItem;
      UINT state;
      UINT stateMask;
      LPWSTR pszText;
      INT cchTextMax;
      INT iImage;
      INT iSelectedImage;
      INT cChildren;
      LPARAM lParam;
      INT iIntegral;
      UINT uStateEx;
      HWND hwnd;
      INT iExpandedImage;
} TVITEMEXW, *LPTVITEMEXW;
typedef struct tagTVINSERTSTRUCTA {
        HTREEITEM hParent;
        HTREEITEM hInsertAfter;
        union {
           TVITEMEXA itemex;
           TVITEMA item;
        } ;
} TVINSERTSTRUCTA, *LPTVINSERTSTRUCTA;
typedef struct tagTVINSERTSTRUCTW {
        HTREEITEM hParent;
        HTREEITEM hInsertAfter;
        union {
           TVITEMEXW itemex;
           TVITEMW item;
        } ;
} TVINSERTSTRUCTW, *LPTVINSERTSTRUCTW;
typedef struct tagNMTREEVIEWA {
 NMHDR hdr;
 UINT action;
 TVITEMA itemOld;
 TVITEMA itemNew;
 POINT ptDrag;
} NMTREEVIEWA, *LPNMTREEVIEWA;
typedef struct tagNMTREEVIEWW {
 NMHDR hdr;
 UINT action;
 TVITEMW itemOld;
 TVITEMW itemNew;
 POINT ptDrag;
} NMTREEVIEWW, *LPNMTREEVIEWW;
typedef struct tagTVDISPINFOA {
 NMHDR hdr;
 TVITEMA item;
} NMTVDISPINFOA, *LPNMTVDISPINFOA;
typedef struct tagTVDISPINFOW {
 NMHDR hdr;
 TVITEMW item;
} NMTVDISPINFOW, *LPNMTVDISPINFOW;
typedef struct tagTVDISPINFOEXA {
 NMHDR hdr;
 TVITEMEXA item;
} NMTVDISPINFOEXA, *LPNMTVDISPINFOEXA;
typedef struct tagTVDISPINFOEXW {
 NMHDR hdr;
 TVITEMEXW item;
} NMTVDISPINFOEXW, *LPNMTVDISPINFOEXW;
typedef INT (__attribute__((__stdcall__)) *PFNTVCOMPARE)(LPARAM, LPARAM, LPARAM);
typedef struct tagTVSORTCB
{
 HTREEITEM hParent;
 PFNTVCOMPARE lpfnCompare;
 LPARAM lParam;
} TVSORTCB, *LPTVSORTCB;
typedef struct tagTVHITTESTINFO {
        POINT pt;
        UINT flags;
        HTREEITEM hItem;
} TVHITTESTINFO, *LPTVHITTESTINFO;
typedef struct tagNMTVCUSTOMDRAW
{
    NMCUSTOMDRAW nmcd;
    COLORREF clrText;
    COLORREF clrTextBk;
    INT iLevel;
} NMTVCUSTOMDRAW, *LPNMTVCUSTOMDRAW;
typedef struct tagNMTVGETINFOTIPA
{
    NMHDR hdr;
    LPSTR pszText;
    INT cchTextMax;
    HTREEITEM hItem;
    LPARAM lParam;
} NMTVGETINFOTIPA, *LPNMTVGETINFOTIPA;
typedef struct tagNMTVGETINFOTIPW
{
    NMHDR hdr;
    LPWSTR pszText;
    INT cchTextMax;
    HTREEITEM hItem;
    LPARAM lParam;
} NMTVGETINFOTIPW, *LPNMTVGETINFOTIPW;

typedef struct tagTVKEYDOWN
{
    NMHDR hdr;
    WORD wVKey;
    UINT flags;
} NMTVKEYDOWN, *LPNMTVKEYDOWN;

typedef struct tagLVITEMA
{
    UINT mask;
    INT iItem;
    INT iSubItem;
    UINT state;
    UINT stateMask;
    LPSTR pszText;
    INT cchTextMax;
    INT iImage;
    LPARAM lParam;
    INT iIndent;
    INT iGroupId;
    UINT cColumns;
    PUINT puColumns;
    PINT piColFmt;
    INT iGroup;
} LVITEMA, *LPLVITEMA;
typedef struct tagLVITEMW
{
    UINT mask;
    INT iItem;
    INT iSubItem;
    UINT state;
    UINT stateMask;
    LPWSTR pszText;
    INT cchTextMax;
    INT iImage;
    LPARAM lParam;
    INT iIndent;
    INT iGroupId;
    UINT cColumns;
    PUINT puColumns;
    PINT piColFmt;
    INT iGroup;
} LVITEMW, *LPLVITEMW;
typedef struct LVSETINFOTIP
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR pszText;
    int iItem;
    int iSubItem;
} LVSETINFOTIP, *PLVSETINFOTIP;
typedef struct tagLVBKIMAGEA
{
    ULONG ulFlags;
    HBITMAP hbm;
    LPSTR pszImage;
    UINT cchImageMax;
    int xOffsetPercent;
    int yOffsetPercent;
} LVBKIMAGEA, *LPLVBKIMAGEA;
typedef struct tagLVBKIMAGEW
{
    ULONG ulFlags;
    HBITMAP hbm;
    LPWSTR pszImage;
    UINT cchImageMax;
    int xOffsetPercent;
    int yOffsetPercent;
} LVBKIMAGEW, *LPLVBKIMAGEW;
typedef struct tagLVCOLUMNA
{
    UINT mask;
    INT fmt;
    INT cx;
    LPSTR pszText;
    INT cchTextMax;
    INT iSubItem;
    INT iImage;
    INT iOrder;
    INT cxMin;
    INT cxDefault;
    INT cxIdeal;
} LVCOLUMNA, *LPLVCOLUMNA;
typedef struct tagLVCOLUMNW
{
    UINT mask;
    INT fmt;
    INT cx;
    LPWSTR pszText;
    INT cchTextMax;
    INT iSubItem;
    INT iImage;
    INT iOrder;
    INT cxMin;
    INT cxDefault;
    INT cxIdeal;
} LVCOLUMNW, *LPLVCOLUMNW;
typedef struct tagNMLISTVIEW
{
    NMHDR hdr;
    INT iItem;
    INT iSubItem;
    UINT uNewState;
    UINT uOldState;
    UINT uChanged;
    POINT ptAction;
    LPARAM lParam;
} NMLISTVIEW, *LPNMLISTVIEW;
typedef struct tagNMITEMACTIVATE
{
    NMHDR hdr;
    int iItem;
    int iSubItem;
    UINT uNewState;
    UINT uOldState;
    UINT uChanged;
    POINT ptAction;
    LPARAM lParam;
    UINT uKeyFlags;
} NMITEMACTIVATE, *LPNMITEMACTIVATE;
typedef struct tagLVDISPINFO
{
    NMHDR hdr;
    LVITEMA item;
} NMLVDISPINFOA, *LPNMLVDISPINFOA;
typedef struct tagLVDISPINFOW
{
    NMHDR hdr;
    LVITEMW item;
} NMLVDISPINFOW, *LPNMLVDISPINFOW;

typedef struct tagLVKEYDOWN
{
  NMHDR hdr;
  WORD wVKey;
  UINT flags;
} NMLVKEYDOWN, *LPNMLVKEYDOWN;

typedef struct tagNMLVGETINFOTIPA
{
    NMHDR hdr;
    DWORD dwFlags;
    LPSTR pszText;
    int cchTextMax;
    int iItem;
    int iSubItem;
    LPARAM lParam;
} NMLVGETINFOTIPA, *LPNMLVGETINFOTIPA;
typedef struct tagNMLVGETINFOTIPW
{
    NMHDR hdr;
    DWORD dwFlags;
    LPWSTR pszText;
    int cchTextMax;
    int iItem;
    int iSubItem;
    LPARAM lParam;
} NMLVGETINFOTIPW, *LPNMLVGETINFOTIPW;
typedef struct tagLVHITTESTINFO
{
    POINT pt;
    UINT flags;
    INT iItem;
    INT iSubItem;
    INT iGroup;
} LVHITTESTINFO, *LPLVHITTESTINFO;
typedef struct tagLVFINDINFOA
{
 UINT flags;
 LPCSTR psz;
 LPARAM lParam;
 POINT pt;
 UINT vkDirection;
} LVFINDINFOA, *LPLVFINDINFOA;
typedef struct tagLVFINDINFOW
{
 UINT flags;
 LPCWSTR psz;
 LPARAM lParam;
 POINT pt;
 UINT vkDirection;
} LVFINDINFOW, *LPLVFINDINFOW;
typedef struct LVGROUP
{
 UINT cbSize;
 UINT mask;
 LPWSTR pszHeader;
 INT cchHeader;
 LPWSTR pszFooter;
 INT cchFooter;
 INT iGroupId;
 UINT stateMask;
 UINT state;
 UINT uAlign;
 LPWSTR pszSubtitle;
 UINT cchSubtitle;
 LPWSTR pszTask;
 UINT cchTask;
 LPWSTR pszDescriptionTop;
 UINT cchDescriptionTop;
 LPWSTR pszDescriptionBottom;
 UINT cchDescriptionBottom;
 INT iTitleImage;
 INT iExtendedImage;
 INT iFirstItem;
 UINT cItems;
 LPWSTR pszSubsetTitle;
 UINT cchSubsetTitle;
} LVGROUP, *PLVGROUP;
typedef struct LVGROUPMETRICS
{
 UINT cbSize;
 UINT mask;
 UINT Left;
 UINT Top;
 UINT Right;
 UINT Bottom;
 COLORREF crLeft;
 COLORREF crTop;
 COLORREF crRight;
 COLORREF crBottom;
 COLORREF crRightHeader;
 COLORREF crFooter;
} LVGROUPMETRICS, *PLVGROUPMETRICS;
typedef INT (*PFNLVGROUPCOMPARE)(INT, INT, void*);
typedef struct LVINSERTGROUPSORTED
{
 PFNLVGROUPCOMPARE pfnGroupCompare;
 LPVOID *pvData;
 LVGROUP lvGroup;
} LVINSERTGROUPSORTED, *PLVINSERTGROUPSORTED;
typedef struct LVTILEINFO
{
 UINT cbSize;
 int iItem;
 UINT cColumns;
 PUINT puColumns;
 int* piColFmt;
} LVTILEINFO, *PLVTILEINFO;
typedef struct LVTILEVIEWINFO
{
 UINT cbSize;
 DWORD dwMask;
 DWORD dwFlags;
 SIZE sizeTile;
 int cLines;
 RECT rcLabelMargin;
} LVTILEVIEWINFO, *PLVTILEVIEWINFO;
typedef struct LVINSERTMARK
{
 UINT cbSize;
 DWORD dwFlags;
 int iItem;
 DWORD dwReserved;
} LVINSERTMARK, *PLVINSERTMARK;
typedef struct tagTCHITTESTINFO
{
 POINT pt;
 UINT flags;
} TCHITTESTINFO, *LPTCHITTESTINFO;
typedef INT (__attribute__((__stdcall__)) *PFNLVCOMPARE)(LPARAM, LPARAM, LPARAM);
typedef struct tagNMLVCUSTOMDRAW
{
    NMCUSTOMDRAW nmcd;
    COLORREF clrText;
    COLORREF clrTextBk;
    int iSubItem;
    DWORD dwItemType;
    COLORREF clrFace;
    int iIconEffect;
    int iIconPhase;
    int iPartId;
    int iStateId;
    RECT rcText;
    UINT uAlign;
} NMLVCUSTOMDRAW, *LPNMLVCUSTOMDRAW;
typedef struct tagNMLVCACHEHINT
{
 NMHDR hdr;
 INT iFrom;
 INT iTo;
} NMLVCACHEHINT, *LPNMLVCACHEHINT;
typedef struct tagNMLVFINDITEMA
{
    NMHDR hdr;
    int iStart;
    LVFINDINFOA lvfi;
} NMLVFINDITEMA, *LPNMLVFINDITEMA;
typedef struct tagNMLVFINDITEMW
{
    NMHDR hdr;
    int iStart;
    LVFINDINFOW lvfi;
} NMLVFINDITEMW, *LPNMLVFINDITEMW;
typedef struct tagNMLVODSTATECHANGE
{
    NMHDR hdr;
    int iFrom;
    int iTo;
    UINT uNewState;
    UINT uOldState;
} NMLVODSTATECHANGE, *LPNMLVODSTATECHANGE;
typedef struct NMLVSCROLL
{
    NMHDR hdr;
    int dx;
    int dy;
} NMLVSCROLL, *LPNMLVSCROLL;
typedef struct tagTCITEMHEADERA
{
    UINT mask;
    UINT lpReserved1;
    UINT lpReserved2;
    LPSTR pszText;
    int cchTextMax;
    int iImage;
} TCITEMHEADERA, *LPTCITEMHEADERA;
typedef struct tagTCITEMHEADERW
{
    UINT mask;
    UINT lpReserved1;
    UINT lpReserved2;
    LPWSTR pszText;
    int cchTextMax;
    int iImage;
} TCITEMHEADERW, *LPTCITEMHEADERW;
typedef struct tagTCITEMA
{
    UINT mask;
    UINT dwState;
    UINT dwStateMask;
    LPSTR pszText;
    INT cchTextMax;
    INT iImage;
    LPARAM lParam;
} TCITEMA, *LPTCITEMA;
typedef struct tagTCITEMW
{
    UINT mask;
    DWORD dwState;
    DWORD dwStateMask;
    LPWSTR pszText;
    INT cchTextMax;
    INT iImage;
    LPARAM lParam;
} TCITEMW, *LPTCITEMW;

typedef struct tagTCKEYDOWN
{
    NMHDR hdr;
    WORD wVKey;
    UINT flags;
} NMTCKEYDOWN;

typedef struct tagCOMBOBOXEXITEMA
{
    UINT mask;
    INT_PTR iItem;
    LPSTR pszText;
    int cchTextMax;
    int iImage;
    int iSelectedImage;
    int iOverlay;
    int iIndent;
    LPARAM lParam;
} COMBOBOXEXITEMA, *PCOMBOBOXEXITEMA;
typedef COMBOBOXEXITEMA const *PCCOMBOEXITEMA;
typedef struct tagCOMBOBOXEXITEMW
{
    UINT mask;
    INT_PTR iItem;
    LPWSTR pszText;
    int cchTextMax;
    int iImage;
    int iSelectedImage;
    int iOverlay;
    int iIndent;
    LPARAM lParam;
} COMBOBOXEXITEMW, *PCOMBOBOXEXITEMW;
typedef COMBOBOXEXITEMW const *PCCOMBOEXITEMW;
typedef struct tagNMCBEENDEDITW
{
    NMHDR hdr;
    BOOL fChanged;
    int iNewSelection;
    WCHAR szText[260];
    int iWhy;
} NMCBEENDEDITW, *LPNMCBEENDEDITW, *PNMCBEENDEDITW;
typedef struct tagNMCBEENDEDITA
{
    NMHDR hdr;
    BOOL fChanged;
    int iNewSelection;
    char szText[260];
    int iWhy;
} NMCBEENDEDITA, *LPNMCBEENDEDITA, *PNMCBEENDEDITA;
typedef struct
{
    NMHDR hdr;
    COMBOBOXEXITEMA ceItem;
} NMCOMBOBOXEXA, *PNMCOMBOBOXEXA;
typedef struct
{
    NMHDR hdr;
    COMBOBOXEXITEMW ceItem;
} NMCOMBOBOXEXW, *PNMCOMBOBOXEXW;
typedef struct
{
    NMHDR hdr;
    int iItemid;
    char szText[260];
} NMCBEDRAGBEGINA, *PNMCBEDRAGBEGINA, *LPNMCBEDRAGBEGINA;
typedef struct
{
    NMHDR hdr;
    int iItemid;
    WCHAR szText[260];
} NMCBEDRAGBEGINW, *PNMCBEDRAGBEGINW, *LPNMCBEDRAGBEGINW;
typedef struct tagNMIPADDRESS
{
    NMHDR hdr;
    INT iField;
    INT iValue;
} NMIPADDRESS, *LPNMIPADDRESS;
typedef struct {
        UINT cbSize;
        POINT pt;
        UINT uHit;
        SYSTEMTIME st;
        RECT rc;
        INT iOffset;
        INT iRow;
        INT iCol;
} MCHITTESTINFO, *PMCHITTESTINFO;
typedef struct tagNMSELCHANGE
{
    NMHDR nmhdr;
    SYSTEMTIME stSelStart;
    SYSTEMTIME stSelEnd;
} NMSELCHANGE, *LPNMSELCHANGE;
typedef NMSELCHANGE NMSELECT, *LPNMSELECT;
typedef DWORD MONTHDAYSTATE, *LPMONTHDAYSTATE;
typedef struct tagNMDAYSTATE
{
    NMHDR nmhdr;
    SYSTEMTIME stStart;
    int cDayState;
    LPMONTHDAYSTATE prgDayState;
} NMDAYSTATE, *LPNMDAYSTATE;
typedef struct tagNMDATETIMECHANGE
{
    NMHDR nmhdr;
    DWORD dwFlags;
    SYSTEMTIME st;
} NMDATETIMECHANGE, *LPNMDATETIMECHANGE;
typedef struct tagNMDATETIMESTRINGA
{
    NMHDR nmhdr;
    LPCSTR pszUserString;
    SYSTEMTIME st;
    DWORD dwFlags;
} NMDATETIMESTRINGA, *LPNMDATETIMESTRINGA;
typedef struct tagNMDATETIMESTRINGW
{
    NMHDR nmhdr;
    LPCWSTR pszUserString;
    SYSTEMTIME st;
    DWORD dwFlags;
} NMDATETIMESTRINGW, *LPNMDATETIMESTRINGW;
typedef NMDATETIMESTRINGA NMDATETIMESTRING;
typedef LPNMDATETIMESTRINGA LPNMDATETIMESTRING;
typedef struct tagNMDATETIMEWMKEYDOWNA
{
    NMHDR nmhdr;
    int nVirtKey;
    LPCSTR pszFormat;
    SYSTEMTIME st;
} NMDATETIMEWMKEYDOWNA, *LPNMDATETIMEWMKEYDOWNA;
typedef struct tagNMDATETIMEWMKEYDOWNW
{
    NMHDR nmhdr;
    int nVirtKey;
    LPCWSTR pszFormat;
    SYSTEMTIME st;
} NMDATETIMEWMKEYDOWNW, *LPNMDATETIMEWMKEYDOWNW;
typedef NMDATETIMEWMKEYDOWNA NMDATETIMEWMKEYDOWN;
typedef LPNMDATETIMEWMKEYDOWNA LPNMDATETIMEWMKEYDOWN;
typedef struct tagNMDATETIMEFORMATA
{
    NMHDR nmhdr;
    LPCSTR pszFormat;
    SYSTEMTIME st;
    LPCSTR pszDisplay;
    CHAR szDisplay[64];
} NMDATETIMEFORMATA, *LPNMDATETIMEFORMATA;
typedef struct tagNMDATETIMEFORMATW
{
    NMHDR nmhdr;
    LPCWSTR pszFormat;
    SYSTEMTIME st;
    LPCWSTR pszDisplay;
    WCHAR szDisplay[64];
} NMDATETIMEFORMATW, *LPNMDATETIMEFORMATW;
typedef NMDATETIMEFORMATA NMDATETIMEFORMAT;
typedef LPNMDATETIMEFORMATA LPNMDATETIMEFORMAT;
typedef struct tagNMDATETIMEFORMATQUERYA
{
    NMHDR nmhdr;
    LPCSTR pszFormat;
    SIZE szMax;
} NMDATETIMEFORMATQUERYA, *LPNMDATETIMEFORMATQUERYA;
typedef struct tagNMDATETIMEFORMATQUERYW
{
    NMHDR nmhdr;
    LPCWSTR pszFormat;
    SIZE szMax;
} NMDATETIMEFORMATQUERYW, *LPNMDATETIMEFORMATQUERYW;
typedef NMDATETIMEFORMATQUERYA NMDATETIMEFORMATQUERY;
typedef LPNMDATETIMEFORMATQUERYA LPNMDATETIMEFORMATQUERY;
struct _DSA;
typedef struct _DSA *HDSA;
typedef INT (__attribute__((__stdcall__)) *PFNDSAENUMCALLBACK)(LPVOID, LPVOID);
HDSA __attribute__((__stdcall__)) DSA_Create(INT, INT);
BOOL __attribute__((__stdcall__)) DSA_Destroy(HDSA);
void __attribute__((__stdcall__)) DSA_DestroyCallback(HDSA, PFNDSAENUMCALLBACK, LPVOID);
LPVOID __attribute__((__stdcall__)) DSA_GetItemPtr(HDSA, INT);
INT __attribute__((__stdcall__)) DSA_InsertItem(HDSA, INT, LPVOID);
struct _DPA;
typedef struct _DPA *HDPA;
typedef INT (__attribute__((__stdcall__)) *PFNDPAENUMCALLBACK)(LPVOID, LPVOID);
typedef INT (__attribute__((__stdcall__)) *PFNDPACOMPARE)(LPVOID, LPVOID, LPARAM);
typedef PVOID (__attribute__((__stdcall__)) *PFNDPAMERGE)(UINT,PVOID,PVOID,LPARAM);
HDPA __attribute__((__stdcall__)) DPA_Create(INT);
BOOL __attribute__((__stdcall__)) DPA_Destroy(HDPA);
LPVOID __attribute__((__stdcall__)) DPA_DeletePtr(HDPA, INT);
BOOL __attribute__((__stdcall__)) DPA_DeleteAllPtrs(HDPA);
BOOL __attribute__((__stdcall__)) DPA_SetPtr(HDPA, INT, LPVOID);
LPVOID __attribute__((__stdcall__)) DPA_GetPtr(HDPA, INT);
INT __attribute__((__stdcall__)) DPA_GetPtrIndex(HDPA, LPCVOID);
ULONGLONG __attribute__((__stdcall__)) DPA_GetSize(HDPA);
BOOL __attribute__((__stdcall__)) DPA_Grow(HDPA, INT);
INT __attribute__((__stdcall__)) DPA_InsertPtr(HDPA, INT, LPVOID);
BOOL __attribute__((__stdcall__)) DPA_Sort(HDPA, PFNDPACOMPARE, LPARAM);
void __attribute__((__stdcall__)) DPA_EnumCallback(HDPA, PFNDPAENUMCALLBACK, LPVOID);
void __attribute__((__stdcall__)) DPA_DestroyCallback(HDPA, PFNDPAENUMCALLBACK, LPVOID);
INT __attribute__((__stdcall__)) DPA_Search(HDPA, LPVOID, INT, PFNDPACOMPARE, LPARAM, UINT);
BOOL __attribute__((__stdcall__)) DPA_Merge(HDPA, HDPA, DWORD, PFNDPACOMPARE, PFNDPAMERGE, LPARAM);
typedef struct _DPASTREAMINFO
{
    INT iPos;
    LPVOID pvItem;
} DPASTREAMINFO;
struct IStream;
typedef HRESULT (__attribute__((__stdcall__)) *PFNDPASTREAM)(DPASTREAMINFO*, struct IStream*, LPVOID);
HRESULT __attribute__((__stdcall__)) DPA_LoadStream(HDPA*, PFNDPASTREAM, struct IStream*, LPVOID);
HRESULT __attribute__((__stdcall__)) DPA_SaveStream(HDPA, PFNDPASTREAM, struct IStream*, LPVOID);
BOOL __attribute__((__stdcall__)) Str_SetPtrW (LPWSTR *, LPCWSTR);
typedef struct tagLITEM
{
  UINT mask;
  int iLink;
  UINT state;
  UINT stateMask;
  WCHAR szID[48];
  WCHAR szUrl[2084];
} LITEM, *PLITEM;
typedef struct tagLHITTESTINFO
{
  POINT pt;
  LITEM item;
} LHITTESTINFO, *PLHITTESTINFO;
typedef struct tagNMLINK
{
  NMHDR hdr;
  LITEM item;
} NMLINK, *PNMLINK;
typedef struct tagNMLVLINK
{
    NMHDR hdr;
    LITEM link;
    int iItem;
    int iSubItem;
} NMLVLINK, *PNMLVLINK;

enum _TASKDIALOG_FLAGS
{
    TDF_ENABLE_HYPERLINKS = 0x0001,
    TDF_USE_HICON_MAIN = 0x0002,
    TDF_USE_HICON_FOOTER = 0x0004,
    TDF_ALLOW_DIALOG_CANCELLATION = 0x0008,
    TDF_USE_COMMAND_LINKS = 0x0010,
    TDF_USE_COMMAND_LINKS_NO_ICON = 0x0020,
    TDF_EXPAND_FOOTER_AREA = 0x0040,
    TDF_EXPANDED_BY_DEFAULT = 0x0080,
    TDF_VERIFICATION_FLAG_CHECKED = 0x0100,
    TDF_SHOW_PROGRESS_BAR = 0x0200,
    TDF_SHOW_MARQUEE_PROGRESS_BAR = 0x0400,
    TDF_CALLBACK_TIMER = 0x0800,
    TDF_POSITION_RELATIVE_TO_WINDOW = 0x1000,
    TDF_RTL_LAYOUT = 0x2000,
    TDF_NO_DEFAULT_RADIO_BUTTON = 0x4000,
    TDF_CAN_BE_MINIMIZED = 0x8000
};
typedef int TASKDIALOG_FLAGS;
enum _TASKDIALOG_COMMON_BUTTON_FLAGS
{
    TDCBF_OK_BUTTON = 0x0001,
    TDCBF_YES_BUTTON = 0x0002,
    TDCBF_NO_BUTTON = 0x0004,
    TDCBF_CANCEL_BUTTON = 0x0008,
    TDCBF_RETRY_BUTTON = 0x0010,
    TDCBF_CLOSE_BUTTON = 0x0020
};
typedef int TASKDIALOG_COMMON_BUTTON_FLAGS;
typedef struct _TASKDIALOG_BUTTON
{
    int nButtonID;
    PCWSTR pszButtonText;
} TASKDIALOG_BUTTON;
typedef HRESULT (__attribute__((__stdcall__)) *PFTASKDIALOGCALLBACK)(HWND, UINT, WPARAM, LPARAM, LONG_PTR);
typedef struct _TASKDIALOGCONFIG
{
    UINT cbSize;
    HWND hwndParent;
    HINSTANCE hInstance;
    TASKDIALOG_FLAGS dwFlags;
    TASKDIALOG_COMMON_BUTTON_FLAGS dwCommonButtons;
    PCWSTR pszWindowTitle;
    union
    {
        HICON hMainIcon;
        PCWSTR pszMainIcon;
    } ;
    PCWSTR pszMainInstruction;
    PCWSTR pszContent;
    UINT cButtons;
    const TASKDIALOG_BUTTON *pButtons;
    int nDefaultButton;
    UINT cRadioButtons;
    const TASKDIALOG_BUTTON *pRadioButtons;
    int nDefaultRadioButton;
    PCWSTR pszVerificationText;
    PCWSTR pszExpandedInformation;
    PCWSTR pszExpandedControlText;
    PCWSTR pszCollapsedControlText;
    union
    {
        HICON hFooterIcon;
        PCWSTR pszFooterIcon;
    } ;
    PCWSTR pszFooter;
    PFTASKDIALOGCALLBACK pfCallback;
    LONG_PTR lpCallbackData;
    UINT cxWidth;
} TASKDIALOGCONFIG;
HRESULT __attribute__((__stdcall__)) TaskDialogIndirect(const TASKDIALOGCONFIG *, int *, int *, BOOL *);

int* __p___argc(void);
unsigned int* __p__commode(void);
char** __p__pgmptr(void);
unsigned int* __p__fmode(void);
unsigned int* __p__osver(void);
unsigned int* __p__winmajor(void);
unsigned int* __p__winminor(void);
unsigned int* __p__winver(void);
char** __p__acmdln(void);
wchar_t** __p__wcmdln(void);
char*** __p___argv(void);
wchar_t*** __p___wargv(void);
char*** __p__environ(void);
wchar_t*** __p__wenviron(void);
char*** __p___initenv(void);
wchar_t*** __p___winitenv(void);
int* __p__timezone(void);
int __attribute__((__cdecl__)) _initterm(_PVFV *,_PVFV *);
int __attribute__((__cdecl__)) _initterm_e(_PVFV *,_PVFV *);
