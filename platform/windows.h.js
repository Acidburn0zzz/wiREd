T.__builtin_va_list = function() {return Pointer(null);};
T.__gnuc_va_list = function() {return T.__builtin_va_list;};
T.va_list = function() {return T.__gnuc_va_list;};
T.size_t = function() {return T.u32;};
T.ssize_t = function() {return T.i32;};
T.intptr_t = function() {return T.i32;};
T.uintptr_t = function() {return T.u32;};
T.ptrdiff_t = function() {return T.i32;};
T.wchar_t = function() {return T.u16;};
T.wint_t = function() {return T.u16;};
T.wctype_t = function() {return T.u16;};
T.errno_t = function() {return T.i32;};
T.__time32_t = function() {return T.i32;};
T.__time64_t = function() {return T.i64;};
T.time_t = function() {return T.__time32_t;};
T.errcode = function() {return T.i32;};
T.pthreadlocinfo = function() {return Pointer(Struct('threadlocaleinfostruct', null));};
T.pthreadmbcinfo = function() {return Pointer(Struct('threadmbcinfostruct', null));};
T._locale_tstruct = function() {return Struct('localeinfo_struct', {
    locinfo: T.pthreadlocinfo,
    mbcinfo: T.pthreadmbcinfo
});};
T._locale_t = function() {return Pointer(Struct('localeinfo_struct', {
    locinfo: T.pthreadlocinfo,
    mbcinfo: T.pthreadmbcinfo
}));};
T.LC_ID = function() {return Struct('tagLC_ID', {
    wLanguage: T.u16,
    wCountry: T.u16,
    wCodePage: T.u16
});};
T.LPLC_ID = function() {return Pointer(Struct('tagLC_ID', {
    wLanguage: T.u16,
    wCountry: T.u16,
    wCodePage: T.u16
}));};
T.threadlocinfo = function() {return Struct('threadlocaleinfostruct', {
    refcount: T.i32,
    lc_codepage: T.u32,
    lc_collate_cp: T.u32,
    lc_handle: ArrayType(T.u32, 6),
    lc_id: ArrayType(T.LC_ID, 6),
    lc_category: ArrayType(Struct('', {
        locale: Pointer(T.char),
        wlocale: Pointer(T.wchar_t),
        refcount: Pointer(T.i32),
        wrefcount: Pointer(T.i32)
    }), 6),
    lc_clike: T.i32,
    mb_cur_max: T.i32,
    lconv_intl_refcount: Pointer(T.i32),
    lconv_num_refcount: Pointer(T.i32),
    lconv_mon_refcount: Pointer(T.i32),
    lconv: Pointer(Struct('lconv', null)),
    ctype1_refcount: Pointer(T.i32),
    ctype1: Pointer(T.u16),
    pctype: Pointer(T.u16),
    pclmap: Pointer(T.u8),
    pcumap: Pointer(T.u8),
    lc_time_curr: Pointer(Struct('__lc_time_data', null))
});};
T.EXCEPTION_DISPOSITION = function() {return Enum('ExceptionCollidedUnwind', {
    ExceptionContinueExecution: 0,
    ExceptionContinueSearch: 1,
    ExceptionNestedException: 2,
    ExceptionCollidedUnwind: 3
});};
T.LPVOID = function() {return Pointer(null);};
T.LPCVOID = function() {return Pointer(null, [['const']]);};
T.BOOL = function() {return T.i32;};
T.PBOOL = function() {return Pointer(T.i32);};
T.LPBOOL = function() {return Pointer(T.i32);};
T.BYTE = function() {return T.u8;};
T.PBYTE = function() {return Pointer(T.u8);};
T.LPBYTE = function() {return Pointer(T.u8);};
T.UCHAR = function() {return T.u8;};
T.PUCHAR = function() {return Pointer(T.u8);};
T.WORD = function() {return T.u16;};
T.PWORD = function() {return Pointer(T.u16);};
T.LPWORD = function() {return Pointer(T.u16);};
T.USHORT = function() {return T.u16;};
T.PUSHORT = function() {return Pointer(T.u16);};
T.INT = function() {return T.i32;};
T.PINT = function() {return Pointer(T.i32);};
T.LPINT = function() {return Pointer(T.i32);};
T.UINT = function() {return T.u32;};
T.PUINT = function() {return Pointer(T.u32);};
T.FLOAT = function() {return T.f32;};
T.PFLOAT = function() {return Pointer(T.f32);};
T.PSZ = function() {return Pointer(T.char);};
T.LPLONG = function() {return Pointer(T.i32);};
T.DWORD = function() {return T.u32;};
T.PDWORD = function() {return Pointer(T.u32);};
T.LPDWORD = function() {return Pointer(T.u32);};
T.ULONG = function() {return T.u32;};
T.PULONG = function() {return Pointer(T.u32);};
T.INT8 = function() {return T.i8;};
T.PINT8 = function() {return Pointer(T.i8);};
T.INT16 = function() {return T.i16;};
T.PINT16 = function() {return Pointer(T.i16);};
T.INT32 = function() {return T.i32;};
T.PINT32 = function() {return Pointer(T.i32);};
T.UINT8 = function() {return T.u8;};
T.PUINT8 = function() {return Pointer(T.u8);};
T.UINT16 = function() {return T.u16;};
T.PUINT16 = function() {return Pointer(T.u16);};
T.UINT32 = function() {return T.u32;};
T.PUINT32 = function() {return Pointer(T.u32);};
T.LONG32 = function() {return T.i32;};
T.PLONG32 = function() {return Pointer(T.i32);};
T.ULONG32 = function() {return T.u32;};
T.PULONG32 = function() {return Pointer(T.u32);};
T.DWORD32 = function() {return T.u32;};
T.PDWORD32 = function() {return Pointer(T.u32);};
T.INT64 = function() {return T.i64;};
T.PINT64 = function() {return Pointer(T.i64, [['aligned', {"__rule":"constant","_0":"8"}]]);};
T.UINT64 = function() {return T.u64;};
T.PUINT64 = function() {return Pointer(T.u64, [['aligned', {"__rule":"constant","_0":"8"}]]);};
T.LONG64 = function() {return T.i64;};
T.PLONG64 = function() {return Pointer(T.i64, [['aligned', {"__rule":"constant","_0":"8"}]]);};
T.ULONG64 = function() {return T.u64;};
T.PULONG64 = function() {return Pointer(T.u64, [['aligned', {"__rule":"constant","_0":"8"}]]);};
T.DWORD64 = function() {return T.u64;};
T.PDWORD64 = function() {return Pointer(T.u64, [['aligned', {"__rule":"constant","_0":"8"}]]);};
T.INT_PTR = function() {return T.i32;};
T.PINT_PTR = function() {return Pointer(T.i32);};
T.UINT_PTR = function() {return T.u32;};
T.PUINT_PTR = function() {return Pointer(T.u32);};
T.LONG_PTR = function() {return T.i32;};
T.PLONG_PTR = function() {return Pointer(T.i32);};
T.ULONG_PTR = function() {return T.u32;};
T.PULONG_PTR = function() {return Pointer(T.u32);};
T.DWORD_PTR = function() {return T.ULONG_PTR;};
T.PDWORD_PTR = function() {return Pointer(T.ULONG_PTR);};
T.SHANDLE_PTR = function() {return T.i32;};
T.HANDLE_PTR = function() {return T.u32;};
T.HALF_PTR = function() {return T.i16;};
T.PHALF_PTR = function() {return Pointer(T.i16);};
T.UHALF_PTR = function() {return T.u16;};
T.PUHALF_PTR = function() {return Pointer(T.u16);};
T.SSIZE_T = function() {return T.LONG_PTR;};
T.PSSIZE_T = function() {return Pointer(T.LONG_PTR);};
T.SIZE_T = function() {return T.ULONG_PTR;};
T.PSIZE_T = function() {return Pointer(T.ULONG_PTR);};
T.KAFFINITY = function() {return T.ULONG_PTR;};
T.PKAFFINITY = function() {return Pointer(T.ULONG_PTR);};
T.GUID = function() {return Struct('_GUID', {
    Data1: T.u32,
    Data2: T.u16,
    Data3: T.u16,
    Data4: ArrayType(T.u8, 8)
});};
T.LPGUID = function() {return Pointer(T.GUID);};
T.LPCGUID = function() {return Pointer(T.GUID, [['const']]);};
T.IID = function() {return T.GUID;};
T.LPIID = function() {return Pointer(T.GUID);};
T.CLSID = function() {return T.GUID;};
T.LPCLSID = function() {return Pointer(T.GUID);};
T.FMTID = function() {return T.GUID;};
T.LPFMTID = function() {return Pointer(T.GUID);};
T.PVOID = function() {return Pointer(null);};
T.PVOID64 = function() {return Pointer(null);};
T.BOOLEAN = function() {return T.BYTE;};
T.PBOOLEAN = function() {return Pointer(T.BYTE);};
T.CHAR = function() {return T.char;};
T.PCHAR = function() {return Pointer(T.char);};
T.SHORT = function() {return T.i16;};
T.PSHORT = function() {return Pointer(T.i16);};
T.LONG = function() {return T.i32;};
T.PLONG = function() {return Pointer(T.i32);};
T.WCHAR = function() {return T.u16;};
T.PWCHAR = function() {return Pointer(T.u16);};
T.LONGLONG = function() {return T.i64;};
T.PLONGLONG = function() {return Pointer(T.i64, [['aligned', {"__rule":"constant","_0":"8"}]]);};
T.ULONGLONG = function() {return T.u64;};
T.PULONGLONG = function() {return Pointer(T.u64, [['aligned', {"__rule":"constant","_0":"8"}]]);};
T.DWORDLONG = function() {return T.ULONGLONG;};
T.PDWORDLONG = function() {return Pointer(T.ULONGLONG, [['aligned', {"__rule":"constant","_0":"8"}]]);};
T.PCH = function() {return Pointer(T.CHAR);};
T.LPCH = function() {return Pointer(T.CHAR);};
T.PCCH = function() {return Pointer(T.CHAR, [['const']]);};
T.LPCCH = function() {return Pointer(T.CHAR, [['const']]);};
T.PSTR = function() {return Pointer(T.CHAR);};
T.LPSTR = function() {return Pointer(T.CHAR);};
T.NPSTR = function() {return Pointer(T.CHAR);};
T.PCSTR = function() {return Pointer(T.CHAR, [['const']]);};
T.LPCSTR = function() {return Pointer(T.CHAR, [['const']]);};
T.PWCH = function() {return Pointer(T.WCHAR);};
T.LPWCH = function() {return Pointer(T.WCHAR);};
T.PCWCH = function() {return Pointer(T.WCHAR, [['const']]);};
T.LPCWCH = function() {return Pointer(T.WCHAR, [['const']]);};
T.PWSTR = function() {return Pointer(T.WCHAR);};
T.LPWSTR = function() {return Pointer(T.WCHAR);};
T.NWPSTR = function() {return Pointer(T.WCHAR);};
T.PCWSTR = function() {return Pointer(T.WCHAR, [['const']]);};
T.LPCWSTR = function() {return Pointer(T.WCHAR, [['const']]);};
T.TCHAR = function() {return T.CHAR;};
T.PTCHAR = function() {return Pointer(T.CHAR);};
T.PTSTR = function() {return T.LPSTR;};
T.LPTSTR = function() {return T.LPSTR;};
T.PCTSTR = function() {return T.LPCSTR;};
T.LPCTSTR = function() {return T.LPCSTR;};
T.CCHAR = function() {return T.char;};
T.LCID = function() {return T.DWORD;};
T.PLCID = function() {return Pointer(T.DWORD);};
T.LANGID = function() {return T.WORD;};
T.EXECUTION_STATE = function() {return T.DWORD;};
T.HRESULT = function() {return T.LONG;};
T.HANDLE = function() {return Pointer(null);};
T.PHANDLE = function() {return Pointer(T.HANDLE);};
T.LPHANDLE = function() {return Pointer(T.HANDLE);};
T.FCHAR = function() {return T.BYTE;};
T.FSHORT = function() {return T.WORD;};
T.FLONG = function() {return T.DWORD;};
T.MEMORY_BASIC_INFORMATION = function() {return Struct('_MEMORY_BASIC_INFORMATION', {
    BaseAddress: T.LPVOID,
    AllocationBase: T.LPVOID,
    AllocationProtect: T.DWORD,
    RegionSize: T.SIZE_T,
    State: T.DWORD,
    Protect: T.DWORD,
    Type: T.DWORD
});};
T.PMEMORY_BASIC_INFORMATION = function() {return Pointer(Struct('_MEMORY_BASIC_INFORMATION', {
    BaseAddress: T.LPVOID,
    AllocationBase: T.LPVOID,
    AllocationProtect: T.DWORD,
    RegionSize: T.SIZE_T,
    State: T.DWORD,
    Protect: T.DWORD,
    Type: T.DWORD
}));};
T.LIST_ENTRY = function() {return Struct('_LIST_ENTRY', {
    Flink: Pointer(Struct('_LIST_ENTRY', null)),
    Blink: Pointer(Struct('_LIST_ENTRY', null))
});};
T.PLIST_ENTRY = function() {return Pointer(Struct('_LIST_ENTRY', {
    Flink: Pointer(Struct('_LIST_ENTRY', null)),
    Blink: Pointer(Struct('_LIST_ENTRY', null))
}));};
T.PRLIST_ENTRY = function() {return Pointer(Struct('_LIST_ENTRY', {
    Flink: Pointer(Struct('_LIST_ENTRY', null)),
    Blink: Pointer(Struct('_LIST_ENTRY', null))
}));};
T.SINGLE_LIST_ENTRY = function() {return Struct('_SINGLE_LIST_ENTRY', {
    Next: Pointer(Struct('_SINGLE_LIST_ENTRY', null))
});};
T.PSINGLE_LIST_ENTRY = function() {return Pointer(Struct('_SINGLE_LIST_ENTRY', {
    Next: Pointer(Struct('_SINGLE_LIST_ENTRY', null))
}));};
T.SLIST_HEADER = function() {return Union('_SLIST_HEADER', {
    Alignment: T.ULONGLONG,
    __unnamed0: Struct('', {
        Next: T.SINGLE_LIST_ENTRY,
        Depth: T.WORD,
        Sequence: T.WORD
    })
});};
T.PSLIST_HEADER = function() {return Pointer(Union('_SLIST_HEADER', {
    Alignment: T.ULONGLONG,
    __unnamed0: Struct('', {
        Next: T.SINGLE_LIST_ENTRY,
        Depth: T.WORD,
        Sequence: T.WORD
    })
}));};
T.HEAP_INFORMATION_CLASS = function() {return Enum('HeapCompatibilityInformation', {
    HeapCompatibilityInformation: 0
});};
T.FLOATING_SAVE_AREA = function() {return Struct('_FLOATING_SAVE_AREA', {
    ControlWord: T.DWORD,
    StatusWord: T.DWORD,
    TagWord: T.DWORD,
    ErrorOffset: T.DWORD,
    ErrorSelector: T.DWORD,
    DataOffset: T.DWORD,
    DataSelector: T.DWORD,
    RegisterArea: ArrayType(T.BYTE, 80),
    Cr0NpxState: T.DWORD
});};
T.PFLOATING_SAVE_AREA = function() {return Pointer(Struct('_FLOATING_SAVE_AREA', {
    ControlWord: T.DWORD,
    StatusWord: T.DWORD,
    TagWord: T.DWORD,
    ErrorOffset: T.DWORD,
    ErrorSelector: T.DWORD,
    DataOffset: T.DWORD,
    DataSelector: T.DWORD,
    RegisterArea: ArrayType(T.BYTE, 80),
    Cr0NpxState: T.DWORD
}));};
T.CONTEXT = function() {return Struct('_CONTEXT', {
    ContextFlags: T.DWORD,
    Dr0: T.DWORD,
    Dr1: T.DWORD,
    Dr2: T.DWORD,
    Dr3: T.DWORD,
    Dr6: T.DWORD,
    Dr7: T.DWORD,
    FloatSave: T.FLOATING_SAVE_AREA,
    SegGs: T.DWORD,
    SegFs: T.DWORD,
    SegEs: T.DWORD,
    SegDs: T.DWORD,
    Edi: T.DWORD,
    Esi: T.DWORD,
    Ebx: T.DWORD,
    Edx: T.DWORD,
    Ecx: T.DWORD,
    Eax: T.DWORD,
    Ebp: T.DWORD,
    Eip: T.DWORD,
    SegCs: T.DWORD,
    EFlags: T.DWORD,
    Esp: T.DWORD,
    SegSs: T.DWORD,
    ExtendedRegisters: ArrayType(T.BYTE, 512)
});};
T.LDT_ENTRY = function() {return Struct('_LDT_ENTRY', {
    LimitLow: T.WORD,
    BaseLow: T.WORD,
    HighWord: Union('', {
        Bytes: Struct('', {
            BaseMid: T.BYTE,
            Flags1: T.BYTE,
            Flags2: T.BYTE,
            BaseHi: T.BYTE
        }),
        Bits: Struct('', {
            BaseMid: [T.u32, 8],
            Type: [T.u32, 5],
            Dpl: [T.u32, 2],
            Pres: [T.u32, 1],
            LimitHi: [T.u32, 4],
            Sys: [T.u32, 1],
            Reserved_0: [T.u32, 1],
            Default_Big: [T.u32, 1],
            Granularity: [T.u32, 1],
            BaseHi: [T.u32, 8]
        })
    })
});};
T.PLDT_ENTRY = function() {return Pointer(Struct('_LDT_ENTRY', {
    LimitLow: T.WORD,
    BaseLow: T.WORD,
    HighWord: Union('', {
        Bytes: Struct('', {
            BaseMid: T.BYTE,
            Flags1: T.BYTE,
            Flags2: T.BYTE,
            BaseHi: T.BYTE
        }),
        Bits: Struct('', {
            BaseMid: [T.u32, 8],
            Type: [T.u32, 5],
            Dpl: [T.u32, 2],
            Pres: [T.u32, 1],
            LimitHi: [T.u32, 4],
            Sys: [T.u32, 1],
            Reserved_0: [T.u32, 1],
            Default_Big: [T.u32, 1],
            Granularity: [T.u32, 1],
            BaseHi: [T.u32, 8]
        })
    })
}));};
T.PCONTEXT = function() {return Pointer(T.CONTEXT);};
T.EXCEPTION_RECORD = function() {return Struct('_EXCEPTION_RECORD', {
    ExceptionCode: T.DWORD,
    ExceptionFlags: T.DWORD,
    ExceptionRecord: Pointer(Struct('_EXCEPTION_RECORD', null)),
    ExceptionAddress: T.PVOID,
    NumberParameters: T.DWORD,
    ExceptionInformation: ArrayType(T.ULONG_PTR, 15)
});};
T.PEXCEPTION_RECORD = function() {return Pointer(Struct('_EXCEPTION_RECORD', {
    ExceptionCode: T.DWORD,
    ExceptionFlags: T.DWORD,
    ExceptionRecord: Pointer(Struct('_EXCEPTION_RECORD', null)),
    ExceptionAddress: T.PVOID,
    NumberParameters: T.DWORD,
    ExceptionInformation: ArrayType(T.ULONG_PTR, 15)
}));};
T.EXCEPTION_POINTERS = function() {return Struct('_EXCEPTION_POINTERS', {
    ExceptionRecord: T.PEXCEPTION_RECORD,
    ContextRecord: T.PCONTEXT
});};
T.PEXCEPTION_POINTERS = function() {return Pointer(Struct('_EXCEPTION_POINTERS', {
    ExceptionRecord: T.PEXCEPTION_RECORD,
    ContextRecord: T.PCONTEXT
}));};
T.PEXCEPTION_HANDLER = function() {return Pointer(Fn(T.DWORD, [[T.PEXCEPTION_RECORD], [Pointer(Struct('_EXCEPTION_REGISTRATION_RECORD', null))], [T.PCONTEXT], [Pointer(Pointer(Struct('_EXCEPTION_REGISTRATION_RECORD', null)))]]));};
T.EXCEPTION_REGISTRATION_RECORD = function() {return Struct('_EXCEPTION_REGISTRATION_RECORD', {
    Prev: Pointer(Struct('_EXCEPTION_REGISTRATION_RECORD', null)),
    Handler: T.PEXCEPTION_HANDLER
});};
T.PVECTORED_EXCEPTION_HANDLER = function() {return Pointer(Fn(T.LONG, [[T.PEXCEPTION_POINTERS, 'ExceptionInfo']]), [['stdcall']]);};
T.NT_TIB = function() {return Struct('_NT_TIB', {
    ExceptionList: Pointer(Struct('_EXCEPTION_REGISTRATION_RECORD', null)),
    StackBase: T.PVOID,
    StackLimit: T.PVOID,
    SubSystemTib: T.PVOID,
    __unnamed0: Union('', {
        FiberData: T.PVOID,
        Version: T.DWORD
    }),
    ArbitraryUserPointer: T.PVOID,
    Self: Pointer(Struct('_NT_TIB', null))
});};
T.PNT_TIB = function() {return Pointer(Struct('_NT_TIB', {
    ExceptionList: Pointer(Struct('_EXCEPTION_REGISTRATION_RECORD', null)),
    StackBase: T.PVOID,
    StackLimit: T.PVOID,
    SubSystemTib: T.PVOID,
    __unnamed0: Union('', {
        FiberData: T.PVOID,
        Version: T.DWORD
    }),
    ArbitraryUserPointer: T.PVOID,
    Self: Pointer(Struct('_NT_TIB', null))
}));};
T.IMAGE_DOS_HEADER = function() {return Struct('_IMAGE_DOS_HEADER', {
    e_magic: T.WORD,
    e_cblp: T.WORD,
    e_cp: T.WORD,
    e_crlc: T.WORD,
    e_cparhdr: T.WORD,
    e_minalloc: T.WORD,
    e_maxalloc: T.WORD,
    e_ss: T.WORD,
    e_sp: T.WORD,
    e_csum: T.WORD,
    e_ip: T.WORD,
    e_cs: T.WORD,
    e_lfarlc: T.WORD,
    e_ovno: T.WORD,
    e_res: ArrayType(T.WORD, 4),
    e_oemid: T.WORD,
    e_oeminfo: T.WORD,
    e_res2: ArrayType(T.WORD, 10),
    e_lfanew: T.DWORD
});};
T.PIMAGE_DOS_HEADER = function() {return Pointer(Struct('_IMAGE_DOS_HEADER', {
    e_magic: T.WORD,
    e_cblp: T.WORD,
    e_cp: T.WORD,
    e_crlc: T.WORD,
    e_cparhdr: T.WORD,
    e_minalloc: T.WORD,
    e_maxalloc: T.WORD,
    e_ss: T.WORD,
    e_sp: T.WORD,
    e_csum: T.WORD,
    e_ip: T.WORD,
    e_cs: T.WORD,
    e_lfarlc: T.WORD,
    e_ovno: T.WORD,
    e_res: ArrayType(T.WORD, 4),
    e_oemid: T.WORD,
    e_oeminfo: T.WORD,
    e_res2: ArrayType(T.WORD, 10),
    e_lfanew: T.DWORD
}));};
T.IMAGE_OS2_HEADER = function() {return Struct('', {
    ne_magic: T.WORD,
    ne_ver: T.BYTE,
    ne_rev: T.BYTE,
    ne_enttab: T.WORD,
    ne_cbenttab: T.WORD,
    ne_crc: T.LONG,
    ne_flags: T.WORD,
    ne_autodata: T.WORD,
    ne_heap: T.WORD,
    ne_stack: T.WORD,
    ne_csip: T.DWORD,
    ne_sssp: T.DWORD,
    ne_cseg: T.WORD,
    ne_cmod: T.WORD,
    ne_cbnrestab: T.WORD,
    ne_segtab: T.WORD,
    ne_rsrctab: T.WORD,
    ne_restab: T.WORD,
    ne_modtab: T.WORD,
    ne_imptab: T.WORD,
    ne_nrestab: T.DWORD,
    ne_cmovent: T.WORD,
    ne_align: T.WORD,
    ne_cres: T.WORD,
    ne_exetyp: T.BYTE,
    ne_flagsothers: T.BYTE,
    ne_pretthunks: T.WORD,
    ne_psegrefbytes: T.WORD,
    ne_swaparea: T.WORD,
    ne_expver: T.WORD
});};
T.PIMAGE_OS2_HEADER = function() {return Pointer(Struct('', {
    ne_magic: T.WORD,
    ne_ver: T.BYTE,
    ne_rev: T.BYTE,
    ne_enttab: T.WORD,
    ne_cbenttab: T.WORD,
    ne_crc: T.LONG,
    ne_flags: T.WORD,
    ne_autodata: T.WORD,
    ne_heap: T.WORD,
    ne_stack: T.WORD,
    ne_csip: T.DWORD,
    ne_sssp: T.DWORD,
    ne_cseg: T.WORD,
    ne_cmod: T.WORD,
    ne_cbnrestab: T.WORD,
    ne_segtab: T.WORD,
    ne_rsrctab: T.WORD,
    ne_restab: T.WORD,
    ne_modtab: T.WORD,
    ne_imptab: T.WORD,
    ne_nrestab: T.DWORD,
    ne_cmovent: T.WORD,
    ne_align: T.WORD,
    ne_cres: T.WORD,
    ne_exetyp: T.BYTE,
    ne_flagsothers: T.BYTE,
    ne_pretthunks: T.WORD,
    ne_psegrefbytes: T.WORD,
    ne_swaparea: T.WORD,
    ne_expver: T.WORD
}));};
T.IMAGE_VXD_HEADER = function() {return Struct('_IMAGE_VXD_HEADER', {
    e32_magic: T.WORD,
    e32_border: T.BYTE,
    e32_worder: T.BYTE,
    e32_level: T.DWORD,
    e32_cpu: T.WORD,
    e32_os: T.WORD,
    e32_ver: T.DWORD,
    e32_mflags: T.DWORD,
    e32_mpages: T.DWORD,
    e32_startobj: T.DWORD,
    e32_eip: T.DWORD,
    e32_stackobj: T.DWORD,
    e32_esp: T.DWORD,
    e32_pagesize: T.DWORD,
    e32_lastpagesize: T.DWORD,
    e32_fixupsize: T.DWORD,
    e32_fixupsum: T.DWORD,
    e32_ldrsize: T.DWORD,
    e32_ldrsum: T.DWORD,
    e32_objtab: T.DWORD,
    e32_objcnt: T.DWORD,
    e32_objmap: T.DWORD,
    e32_itermap: T.DWORD,
    e32_rsrctab: T.DWORD,
    e32_rsrccnt: T.DWORD,
    e32_restab: T.DWORD,
    e32_enttab: T.DWORD,
    e32_dirtab: T.DWORD,
    e32_dircnt: T.DWORD,
    e32_fpagetab: T.DWORD,
    e32_frectab: T.DWORD,
    e32_impmod: T.DWORD,
    e32_impmodcnt: T.DWORD,
    e32_impproc: T.DWORD,
    e32_pagesum: T.DWORD,
    e32_datapage: T.DWORD,
    e32_preload: T.DWORD,
    e32_nrestab: T.DWORD,
    e32_cbnrestab: T.DWORD,
    e32_nressum: T.DWORD,
    e32_autodata: T.DWORD,
    e32_debuginfo: T.DWORD,
    e32_debuglen: T.DWORD,
    e32_instpreload: T.DWORD,
    e32_instdemand: T.DWORD,
    e32_heapsize: T.DWORD,
    e32_res3: ArrayType(T.BYTE, 12),
    e32_winresoff: T.DWORD,
    e32_winreslen: T.DWORD,
    e32_devid: T.WORD,
    e32_ddkver: T.WORD
});};
T.PIMAGE_VXD_HEADER = function() {return Pointer(Struct('_IMAGE_VXD_HEADER', {
    e32_magic: T.WORD,
    e32_border: T.BYTE,
    e32_worder: T.BYTE,
    e32_level: T.DWORD,
    e32_cpu: T.WORD,
    e32_os: T.WORD,
    e32_ver: T.DWORD,
    e32_mflags: T.DWORD,
    e32_mpages: T.DWORD,
    e32_startobj: T.DWORD,
    e32_eip: T.DWORD,
    e32_stackobj: T.DWORD,
    e32_esp: T.DWORD,
    e32_pagesize: T.DWORD,
    e32_lastpagesize: T.DWORD,
    e32_fixupsize: T.DWORD,
    e32_fixupsum: T.DWORD,
    e32_ldrsize: T.DWORD,
    e32_ldrsum: T.DWORD,
    e32_objtab: T.DWORD,
    e32_objcnt: T.DWORD,
    e32_objmap: T.DWORD,
    e32_itermap: T.DWORD,
    e32_rsrctab: T.DWORD,
    e32_rsrccnt: T.DWORD,
    e32_restab: T.DWORD,
    e32_enttab: T.DWORD,
    e32_dirtab: T.DWORD,
    e32_dircnt: T.DWORD,
    e32_fpagetab: T.DWORD,
    e32_frectab: T.DWORD,
    e32_impmod: T.DWORD,
    e32_impmodcnt: T.DWORD,
    e32_impproc: T.DWORD,
    e32_pagesum: T.DWORD,
    e32_datapage: T.DWORD,
    e32_preload: T.DWORD,
    e32_nrestab: T.DWORD,
    e32_cbnrestab: T.DWORD,
    e32_nressum: T.DWORD,
    e32_autodata: T.DWORD,
    e32_debuginfo: T.DWORD,
    e32_debuglen: T.DWORD,
    e32_instpreload: T.DWORD,
    e32_instdemand: T.DWORD,
    e32_heapsize: T.DWORD,
    e32_res3: ArrayType(T.BYTE, 12),
    e32_winresoff: T.DWORD,
    e32_winreslen: T.DWORD,
    e32_devid: T.WORD,
    e32_ddkver: T.WORD
}));};
T.IMAGE_FILE_HEADER = function() {return Struct('_IMAGE_FILE_HEADER', {
    Machine: T.WORD,
    NumberOfSections: T.WORD,
    TimeDateStamp: T.DWORD,
    PointerToSymbolTable: T.DWORD,
    NumberOfSymbols: T.DWORD,
    SizeOfOptionalHeader: T.WORD,
    Characteristics: T.WORD
});};
T.PIMAGE_FILE_HEADER = function() {return Pointer(Struct('_IMAGE_FILE_HEADER', {
    Machine: T.WORD,
    NumberOfSections: T.WORD,
    TimeDateStamp: T.DWORD,
    PointerToSymbolTable: T.DWORD,
    NumberOfSymbols: T.DWORD,
    SizeOfOptionalHeader: T.WORD,
    Characteristics: T.WORD
}));};
T.IMAGE_DATA_DIRECTORY = function() {return Struct('_IMAGE_DATA_DIRECTORY', {
    VirtualAddress: T.DWORD,
    Size: T.DWORD
});};
T.PIMAGE_DATA_DIRECTORY = function() {return Pointer(Struct('_IMAGE_DATA_DIRECTORY', {
    VirtualAddress: T.DWORD,
    Size: T.DWORD
}));};
T.IMAGE_OPTIONAL_HEADER64 = function() {return Struct('_IMAGE_OPTIONAL_HEADER64', {
    Magic: T.WORD,
    MajorLinkerVersion: T.BYTE,
    MinorLinkerVersion: T.BYTE,
    SizeOfCode: T.DWORD,
    SizeOfInitializedData: T.DWORD,
    SizeOfUninitializedData: T.DWORD,
    AddressOfEntryPoint: T.DWORD,
    BaseOfCode: T.DWORD,
    ImageBase: T.ULONGLONG,
    SectionAlignment: T.DWORD,
    FileAlignment: T.DWORD,
    MajorOperatingSystemVersion: T.WORD,
    MinorOperatingSystemVersion: T.WORD,
    MajorImageVersion: T.WORD,
    MinorImageVersion: T.WORD,
    MajorSubsystemVersion: T.WORD,
    MinorSubsystemVersion: T.WORD,
    Win32VersionValue: T.DWORD,
    SizeOfImage: T.DWORD,
    SizeOfHeaders: T.DWORD,
    CheckSum: T.DWORD,
    Subsystem: T.WORD,
    DllCharacteristics: T.WORD,
    SizeOfStackReserve: T.ULONGLONG,
    SizeOfStackCommit: T.ULONGLONG,
    SizeOfHeapReserve: T.ULONGLONG,
    SizeOfHeapCommit: T.ULONGLONG,
    LoaderFlags: T.DWORD,
    NumberOfRvaAndSizes: T.DWORD,
    DataDirectory: ArrayType(T.IMAGE_DATA_DIRECTORY, 16)
});};
T.PIMAGE_OPTIONAL_HEADER64 = function() {return Pointer(Struct('_IMAGE_OPTIONAL_HEADER64', {
    Magic: T.WORD,
    MajorLinkerVersion: T.BYTE,
    MinorLinkerVersion: T.BYTE,
    SizeOfCode: T.DWORD,
    SizeOfInitializedData: T.DWORD,
    SizeOfUninitializedData: T.DWORD,
    AddressOfEntryPoint: T.DWORD,
    BaseOfCode: T.DWORD,
    ImageBase: T.ULONGLONG,
    SectionAlignment: T.DWORD,
    FileAlignment: T.DWORD,
    MajorOperatingSystemVersion: T.WORD,
    MinorOperatingSystemVersion: T.WORD,
    MajorImageVersion: T.WORD,
    MinorImageVersion: T.WORD,
    MajorSubsystemVersion: T.WORD,
    MinorSubsystemVersion: T.WORD,
    Win32VersionValue: T.DWORD,
    SizeOfImage: T.DWORD,
    SizeOfHeaders: T.DWORD,
    CheckSum: T.DWORD,
    Subsystem: T.WORD,
    DllCharacteristics: T.WORD,
    SizeOfStackReserve: T.ULONGLONG,
    SizeOfStackCommit: T.ULONGLONG,
    SizeOfHeapReserve: T.ULONGLONG,
    SizeOfHeapCommit: T.ULONGLONG,
    LoaderFlags: T.DWORD,
    NumberOfRvaAndSizes: T.DWORD,
    DataDirectory: ArrayType(T.IMAGE_DATA_DIRECTORY, 16)
}));};
T.IMAGE_NT_HEADERS64 = function() {return Struct('_IMAGE_NT_HEADERS64', {
    Signature: T.DWORD,
    FileHeader: T.IMAGE_FILE_HEADER,
    OptionalHeader: T.IMAGE_OPTIONAL_HEADER64
});};
T.PIMAGE_NT_HEADERS64 = function() {return Pointer(Struct('_IMAGE_NT_HEADERS64', {
    Signature: T.DWORD,
    FileHeader: T.IMAGE_FILE_HEADER,
    OptionalHeader: T.IMAGE_OPTIONAL_HEADER64
}));};
T.IMAGE_OPTIONAL_HEADER32 = function() {return Struct('_IMAGE_OPTIONAL_HEADER', {
    Magic: T.WORD,
    MajorLinkerVersion: T.BYTE,
    MinorLinkerVersion: T.BYTE,
    SizeOfCode: T.DWORD,
    SizeOfInitializedData: T.DWORD,
    SizeOfUninitializedData: T.DWORD,
    AddressOfEntryPoint: T.DWORD,
    BaseOfCode: T.DWORD,
    BaseOfData: T.DWORD,
    ImageBase: T.DWORD,
    SectionAlignment: T.DWORD,
    FileAlignment: T.DWORD,
    MajorOperatingSystemVersion: T.WORD,
    MinorOperatingSystemVersion: T.WORD,
    MajorImageVersion: T.WORD,
    MinorImageVersion: T.WORD,
    MajorSubsystemVersion: T.WORD,
    MinorSubsystemVersion: T.WORD,
    Win32VersionValue: T.DWORD,
    SizeOfImage: T.DWORD,
    SizeOfHeaders: T.DWORD,
    CheckSum: T.DWORD,
    Subsystem: T.WORD,
    DllCharacteristics: T.WORD,
    SizeOfStackReserve: T.DWORD,
    SizeOfStackCommit: T.DWORD,
    SizeOfHeapReserve: T.DWORD,
    SizeOfHeapCommit: T.DWORD,
    LoaderFlags: T.DWORD,
    NumberOfRvaAndSizes: T.DWORD,
    DataDirectory: ArrayType(T.IMAGE_DATA_DIRECTORY, 16)
});};
T.PIMAGE_OPTIONAL_HEADER32 = function() {return Pointer(Struct('_IMAGE_OPTIONAL_HEADER', {
    Magic: T.WORD,
    MajorLinkerVersion: T.BYTE,
    MinorLinkerVersion: T.BYTE,
    SizeOfCode: T.DWORD,
    SizeOfInitializedData: T.DWORD,
    SizeOfUninitializedData: T.DWORD,
    AddressOfEntryPoint: T.DWORD,
    BaseOfCode: T.DWORD,
    BaseOfData: T.DWORD,
    ImageBase: T.DWORD,
    SectionAlignment: T.DWORD,
    FileAlignment: T.DWORD,
    MajorOperatingSystemVersion: T.WORD,
    MinorOperatingSystemVersion: T.WORD,
    MajorImageVersion: T.WORD,
    MinorImageVersion: T.WORD,
    MajorSubsystemVersion: T.WORD,
    MinorSubsystemVersion: T.WORD,
    Win32VersionValue: T.DWORD,
    SizeOfImage: T.DWORD,
    SizeOfHeaders: T.DWORD,
    CheckSum: T.DWORD,
    Subsystem: T.WORD,
    DllCharacteristics: T.WORD,
    SizeOfStackReserve: T.DWORD,
    SizeOfStackCommit: T.DWORD,
    SizeOfHeapReserve: T.DWORD,
    SizeOfHeapCommit: T.DWORD,
    LoaderFlags: T.DWORD,
    NumberOfRvaAndSizes: T.DWORD,
    DataDirectory: ArrayType(T.IMAGE_DATA_DIRECTORY, 16)
}));};
T.IMAGE_NT_HEADERS32 = function() {return Struct('_IMAGE_NT_HEADERS', {
    Signature: T.DWORD,
    FileHeader: T.IMAGE_FILE_HEADER,
    OptionalHeader: T.IMAGE_OPTIONAL_HEADER32
});};
T.PIMAGE_NT_HEADERS32 = function() {return Pointer(Struct('_IMAGE_NT_HEADERS', {
    Signature: T.DWORD,
    FileHeader: T.IMAGE_FILE_HEADER,
    OptionalHeader: T.IMAGE_OPTIONAL_HEADER32
}));};
T.IMAGE_NT_HEADERS = function() {return T.IMAGE_NT_HEADERS32;};
T.PIMAGE_NT_HEADERS = function() {return T.PIMAGE_NT_HEADERS32;};
T.IMAGE_OPTIONAL_HEADER = function() {return T.IMAGE_OPTIONAL_HEADER32;};
T.PIMAGE_OPTIONAL_HEADER = function() {return T.PIMAGE_OPTIONAL_HEADER32;};
T.IMAGE_SECTION_HEADER = function() {return Struct('_IMAGE_SECTION_HEADER', {
    Name: ArrayType(T.BYTE, 8),
    Misc: Union('', {
        PhysicalAddress: T.DWORD,
        VirtualSize: T.DWORD
    }),
    VirtualAddress: T.DWORD,
    SizeOfRawData: T.DWORD,
    PointerToRawData: T.DWORD,
    PointerToRelocations: T.DWORD,
    PointerToLinenumbers: T.DWORD,
    NumberOfRelocations: T.WORD,
    NumberOfLinenumbers: T.WORD,
    Characteristics: T.DWORD
});};
T.PIMAGE_SECTION_HEADER = function() {return Pointer(Struct('_IMAGE_SECTION_HEADER', {
    Name: ArrayType(T.BYTE, 8),
    Misc: Union('', {
        PhysicalAddress: T.DWORD,
        VirtualSize: T.DWORD
    }),
    VirtualAddress: T.DWORD,
    SizeOfRawData: T.DWORD,
    PointerToRawData: T.DWORD,
    PointerToRelocations: T.DWORD,
    PointerToLinenumbers: T.DWORD,
    NumberOfRelocations: T.WORD,
    NumberOfLinenumbers: T.WORD,
    Characteristics: T.DWORD
}));};
T.IMAGE_SYMBOL = function() {return Struct('_IMAGE_SYMBOL', {
    N: Union('', {
        ShortName: ArrayType(T.BYTE, 8),
        Name: Struct('', {
            Short: T.DWORD,
            Long: T.DWORD
        }),
        LongName: ArrayType(T.DWORD, 2)
    }),
    Value: T.DWORD,
    SectionNumber: T.SHORT,
    Type: T.WORD,
    StorageClass: T.BYTE,
    NumberOfAuxSymbols: T.BYTE
});};
T.PIMAGE_SYMBOL = function() {return Pointer(T.IMAGE_SYMBOL);};
T.IMAGE_LINENUMBER = function() {return Struct('_IMAGE_LINENUMBER', {
    Type: Union('', {
        SymbolTableIndex: T.DWORD,
        VirtualAddress: T.DWORD
    }),
    Linenumber: T.WORD
});};
T.PIMAGE_LINENUMBER = function() {return Pointer(T.IMAGE_LINENUMBER);};
T.IMAGE_AUX_SYMBOL = function() {return Union('_IMAGE_AUX_SYMBOL', {
    Sym: Struct('', {
        TagIndex: T.DWORD,
        Misc: Union('', {
            LnSz: Struct('', {
                Linenumber: T.WORD,
                Size: T.WORD
            }),
            TotalSize: T.DWORD
        }),
        FcnAry: Union('', {
            Function: Struct('', {
                PointerToLinenumber: T.DWORD,
                PointerToNextFunction: T.DWORD
            }),
            Array: Struct('', {
                Dimension: ArrayType(T.WORD, 4)
            })
        }),
        TvIndex: T.WORD
    }),
    File: Struct('', {
        Name: ArrayType(T.BYTE, 18)
    }),
    Section: Struct('', {
        Length: T.DWORD,
        NumberOfRelocations: T.WORD,
        NumberOfLinenumbers: T.WORD,
        CheckSum: T.DWORD,
        Number: T.SHORT,
        Selection: T.BYTE
    })
});};
T.PIMAGE_AUX_SYMBOL = function() {return Pointer(T.IMAGE_AUX_SYMBOL);};
T.IMAGE_EXPORT_DIRECTORY = function() {return Struct('_IMAGE_EXPORT_DIRECTORY', {
    Characteristics: T.DWORD,
    TimeDateStamp: T.DWORD,
    MajorVersion: T.WORD,
    MinorVersion: T.WORD,
    Name: T.DWORD,
    Base: T.DWORD,
    NumberOfFunctions: T.DWORD,
    NumberOfNames: T.DWORD,
    AddressOfFunctions: T.DWORD,
    AddressOfNames: T.DWORD,
    AddressOfNameOrdinals: T.DWORD
});};
T.PIMAGE_EXPORT_DIRECTORY = function() {return Pointer(Struct('_IMAGE_EXPORT_DIRECTORY', {
    Characteristics: T.DWORD,
    TimeDateStamp: T.DWORD,
    MajorVersion: T.WORD,
    MinorVersion: T.WORD,
    Name: T.DWORD,
    Base: T.DWORD,
    NumberOfFunctions: T.DWORD,
    NumberOfNames: T.DWORD,
    AddressOfFunctions: T.DWORD,
    AddressOfNames: T.DWORD,
    AddressOfNameOrdinals: T.DWORD
}));};
T.IMAGE_IMPORT_BY_NAME = function() {return Struct('_IMAGE_IMPORT_BY_NAME', {
    Hint: T.WORD,
    Name: ArrayType(T.BYTE, 1)
});};
T.PIMAGE_IMPORT_BY_NAME = function() {return Pointer(Struct('_IMAGE_IMPORT_BY_NAME', {
    Hint: T.WORD,
    Name: ArrayType(T.BYTE, 1)
}));};
T.IMAGE_THUNK_DATA64 = function() {return Struct('_IMAGE_THUNK_DATA64', {
    u1: Union('', {
        ForwarderString: T.ULONGLONG,
        Function: T.ULONGLONG,
        Ordinal: T.ULONGLONG,
        AddressOfData: T.ULONGLONG
    })
});};
T.PIMAGE_THUNK_DATA64 = function() {return Pointer(Struct('_IMAGE_THUNK_DATA64', {
    u1: Union('', {
        ForwarderString: T.ULONGLONG,
        Function: T.ULONGLONG,
        Ordinal: T.ULONGLONG,
        AddressOfData: T.ULONGLONG
    })
}));};
T.IMAGE_THUNK_DATA32 = function() {return Struct('_IMAGE_THUNK_DATA32', {
    u1: Union('', {
        ForwarderString: T.DWORD,
        Function: T.DWORD,
        Ordinal: T.DWORD,
        AddressOfData: T.DWORD
    })
});};
T.PIMAGE_THUNK_DATA32 = function() {return Pointer(Struct('_IMAGE_THUNK_DATA32', {
    u1: Union('', {
        ForwarderString: T.DWORD,
        Function: T.DWORD,
        Ordinal: T.DWORD,
        AddressOfData: T.DWORD
    })
}));};
T.IMAGE_IMPORT_DESCRIPTOR = function() {return Struct('_IMAGE_IMPORT_DESCRIPTOR', {
    __unnamed0: Union('', {
        Characteristics: T.DWORD,
        OriginalFirstThunk: T.DWORD
    }),
    TimeDateStamp: T.DWORD,
    ForwarderChain: T.DWORD,
    Name: T.DWORD,
    FirstThunk: T.DWORD
});};
T.PIMAGE_IMPORT_DESCRIPTOR = function() {return Pointer(Struct('_IMAGE_IMPORT_DESCRIPTOR', {
    __unnamed0: Union('', {
        Characteristics: T.DWORD,
        OriginalFirstThunk: T.DWORD
    }),
    TimeDateStamp: T.DWORD,
    ForwarderChain: T.DWORD,
    Name: T.DWORD,
    FirstThunk: T.DWORD
}));};
T.IMAGE_THUNK_DATA = function() {return T.IMAGE_THUNK_DATA32;};
T.PIMAGE_THUNK_DATA = function() {return T.PIMAGE_THUNK_DATA32;};
T.IMAGE_BOUND_IMPORT_DESCRIPTOR = function() {return Struct('_IMAGE_BOUND_IMPORT_DESCRIPTOR', {
    TimeDateStamp: T.DWORD,
    OffsetModuleName: T.WORD,
    NumberOfModuleForwarderRefs: T.WORD
});};
T.PIMAGE_BOUND_IMPORT_DESCRIPTOR = function() {return Pointer(Struct('_IMAGE_BOUND_IMPORT_DESCRIPTOR', {
    TimeDateStamp: T.DWORD,
    OffsetModuleName: T.WORD,
    NumberOfModuleForwarderRefs: T.WORD
}));};
T.IMAGE_BOUND_FORWARDER_REF = function() {return Struct('_IMAGE_BOUND_FORWARDER_REF', {
    TimeDateStamp: T.DWORD,
    OffsetModuleName: T.WORD,
    Reserved: T.WORD
});};
T.PIMAGE_BOUND_FORWARDER_REF = function() {return Pointer(Struct('_IMAGE_BOUND_FORWARDER_REF', {
    TimeDateStamp: T.DWORD,
    OffsetModuleName: T.WORD,
    Reserved: T.WORD
}));};
T.IMAGE_BASE_RELOCATION = function() {return Struct('_IMAGE_BASE_RELOCATION', {
    VirtualAddress: T.DWORD,
    SizeOfBlock: T.DWORD
});};
T.PIMAGE_BASE_RELOCATION = function() {return Pointer(Struct('_IMAGE_BASE_RELOCATION', {
    VirtualAddress: T.DWORD,
    SizeOfBlock: T.DWORD
}));};
T.IMAGE_RELOCATION = function() {return Struct('_IMAGE_RELOCATION', {
    __unnamed0: Union('', {
        VirtualAddress: T.DWORD,
        RelocCount: T.DWORD
    }),
    SymbolTableIndex: T.DWORD,
    Type: T.WORD
});};
T.PIMAGE_RELOCATION = function() {return Pointer(Struct('_IMAGE_RELOCATION', {
    __unnamed0: Union('', {
        VirtualAddress: T.DWORD,
        RelocCount: T.DWORD
    }),
    SymbolTableIndex: T.DWORD,
    Type: T.WORD
}));};
T.IMAGE_ARCHIVE_MEMBER_HEADER = function() {return Struct('_IMAGE_ARCHIVE_MEMBER_HEADER', {
    Name: ArrayType(T.BYTE, 16),
    Date: ArrayType(T.BYTE, 12),
    UserID: ArrayType(T.BYTE, 6),
    GroupID: ArrayType(T.BYTE, 6),
    Mode: ArrayType(T.BYTE, 8),
    Size: ArrayType(T.BYTE, 10),
    EndHeader: ArrayType(T.BYTE, 2)
});};
T.PIMAGE_ARCHIVE_MEMBER_HEADER = function() {return Pointer(Struct('_IMAGE_ARCHIVE_MEMBER_HEADER', {
    Name: ArrayType(T.BYTE, 16),
    Date: ArrayType(T.BYTE, 12),
    UserID: ArrayType(T.BYTE, 6),
    GroupID: ArrayType(T.BYTE, 6),
    Mode: ArrayType(T.BYTE, 8),
    Size: ArrayType(T.BYTE, 10),
    EndHeader: ArrayType(T.BYTE, 2)
}));};
T.IMPORT_OBJECT_HEADER = function() {return Struct('_IMPORT_OBJECT_HEADER', {
    Sig1: T.WORD,
    Sig2: T.WORD,
    Version: T.WORD,
    Machine: T.WORD,
    TimeDateStamp: T.DWORD,
    SizeOfData: T.DWORD,
    __unnamed0: Union('', {
        Ordinal: T.WORD,
        Hint: T.WORD
    }),
    Type: [T.WORD, 2],
    NameType: [T.WORD, 3],
    Reserved: [T.WORD, 11]
});};
T.IMPORT_OBJECT_TYPE = function() {return Enum('IMPORT_OBJECT_CONST', {
    IMPORT_OBJECT_CODE: 0,
    IMPORT_OBJECT_DATA: 1,
    IMPORT_OBJECT_CONST: 2
});};
T.IMPORT_OBJECT_NAME_TYPE = function() {return Enum('IMPORT_OBJECT_NAME_UNDECORATE', {
    IMPORT_OBJECT_ORDINAL: 0,
    IMPORT_OBJECT_NAME: 1,
    IMPORT_OBJECT_NAME_NO_PREFIX: 2,
    IMPORT_OBJECT_NAME_UNDECORATE: 3
});};
T.ANON_OBJECT_HEADER = function() {return Struct('_ANON_OBJECT_HEADER', {
    Sig1: T.WORD,
    Sig2: T.WORD,
    Version: T.WORD,
    Machine: T.WORD,
    TimeDateStamp: T.DWORD,
    ClassID: T.CLSID,
    SizeOfData: T.DWORD
});};
T.IMAGE_RESOURCE_DIRECTORY = function() {return Struct('_IMAGE_RESOURCE_DIRECTORY', {
    Characteristics: T.DWORD,
    TimeDateStamp: T.DWORD,
    MajorVersion: T.WORD,
    MinorVersion: T.WORD,
    NumberOfNamedEntries: T.WORD,
    NumberOfIdEntries: T.WORD
});};
T.PIMAGE_RESOURCE_DIRECTORY = function() {return Pointer(Struct('_IMAGE_RESOURCE_DIRECTORY', {
    Characteristics: T.DWORD,
    TimeDateStamp: T.DWORD,
    MajorVersion: T.WORD,
    MinorVersion: T.WORD,
    NumberOfNamedEntries: T.WORD,
    NumberOfIdEntries: T.WORD
}));};
T.IMAGE_RESOURCE_DIRECTORY_ENTRY = function() {return Struct('_IMAGE_RESOURCE_DIRECTORY_ENTRY', {
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            NameOffset: [T.u32, 31],
            NameIsString: [T.u32, 1]
        }),
        Name: T.DWORD,
        __unnamed1: Struct('', {
            Id: T.WORD,
            __pad: T.WORD
        })
    }),
    __unnamed1: Union('', {
        OffsetToData: T.DWORD,
        __unnamed0: Struct('', {
            OffsetToDirectory: [T.u32, 31],
            DataIsDirectory: [T.u32, 1]
        })
    })
});};
T.PIMAGE_RESOURCE_DIRECTORY_ENTRY = function() {return Pointer(Struct('_IMAGE_RESOURCE_DIRECTORY_ENTRY', {
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            NameOffset: [T.u32, 31],
            NameIsString: [T.u32, 1]
        }),
        Name: T.DWORD,
        __unnamed1: Struct('', {
            Id: T.WORD,
            __pad: T.WORD
        })
    }),
    __unnamed1: Union('', {
        OffsetToData: T.DWORD,
        __unnamed0: Struct('', {
            OffsetToDirectory: [T.u32, 31],
            DataIsDirectory: [T.u32, 1]
        })
    })
}));};
T.IMAGE_RESOURCE_DIRECTORY_STRING = function() {return Struct('_IMAGE_RESOURCE_DIRECTORY_STRING', {
    Length: T.WORD,
    NameString: ArrayType(T.CHAR, 1)
});};
T.PIMAGE_RESOURCE_DIRECTORY_STRING = function() {return Pointer(Struct('_IMAGE_RESOURCE_DIRECTORY_STRING', {
    Length: T.WORD,
    NameString: ArrayType(T.CHAR, 1)
}));};
T.IMAGE_RESOURCE_DIR_STRING_U = function() {return Struct('_IMAGE_RESOURCE_DIR_STRING_U', {
    Length: T.WORD,
    NameString: ArrayType(T.WCHAR, 1)
});};
T.PIMAGE_RESOURCE_DIR_STRING_U = function() {return Pointer(Struct('_IMAGE_RESOURCE_DIR_STRING_U', {
    Length: T.WORD,
    NameString: ArrayType(T.WCHAR, 1)
}));};
T.IMAGE_RESOURCE_DATA_ENTRY = function() {return Struct('_IMAGE_RESOURCE_DATA_ENTRY', {
    OffsetToData: T.DWORD,
    Size: T.DWORD,
    CodePage: T.DWORD,
    Reserved: T.DWORD
});};
T.PIMAGE_RESOURCE_DATA_ENTRY = function() {return Pointer(Struct('_IMAGE_RESOURCE_DATA_ENTRY', {
    OffsetToData: T.DWORD,
    Size: T.DWORD,
    CodePage: T.DWORD,
    Reserved: T.DWORD
}));};
T.PIMAGE_TLS_CALLBACK = function() {return Pointer(Fn(null, [[T.LPVOID, 'DllHandle'], [T.DWORD, 'Reason'], [T.LPVOID, 'Reserved']]), [['stdcall']]);};
T.IMAGE_TLS_DIRECTORY64 = function() {return Struct('_IMAGE_TLS_DIRECTORY64', {
    StartAddressOfRawData: T.ULONGLONG,
    EndAddressOfRawData: T.ULONGLONG,
    AddressOfIndex: T.ULONGLONG,
    AddressOfCallBacks: T.ULONGLONG,
    SizeOfZeroFill: T.DWORD,
    Characteristics: T.DWORD
});};
T.PIMAGE_TLS_DIRECTORY64 = function() {return Pointer(Struct('_IMAGE_TLS_DIRECTORY64', {
    StartAddressOfRawData: T.ULONGLONG,
    EndAddressOfRawData: T.ULONGLONG,
    AddressOfIndex: T.ULONGLONG,
    AddressOfCallBacks: T.ULONGLONG,
    SizeOfZeroFill: T.DWORD,
    Characteristics: T.DWORD
}));};
T.IMAGE_TLS_DIRECTORY32 = function() {return Struct('_IMAGE_TLS_DIRECTORY32', {
    StartAddressOfRawData: T.DWORD,
    EndAddressOfRawData: T.DWORD,
    AddressOfIndex: T.DWORD,
    AddressOfCallBacks: T.DWORD,
    SizeOfZeroFill: T.DWORD,
    Characteristics: T.DWORD
});};
T.PIMAGE_TLS_DIRECTORY32 = function() {return Pointer(Struct('_IMAGE_TLS_DIRECTORY32', {
    StartAddressOfRawData: T.DWORD,
    EndAddressOfRawData: T.DWORD,
    AddressOfIndex: T.DWORD,
    AddressOfCallBacks: T.DWORD,
    SizeOfZeroFill: T.DWORD,
    Characteristics: T.DWORD
}));};
T.IMAGE_TLS_DIRECTORY = function() {return T.IMAGE_TLS_DIRECTORY32;};
T.PIMAGE_TLS_DIRECTORY = function() {return T.PIMAGE_TLS_DIRECTORY32;};
T.IMAGE_DEBUG_DIRECTORY = function() {return Struct('_IMAGE_DEBUG_DIRECTORY', {
    Characteristics: T.DWORD,
    TimeDateStamp: T.DWORD,
    MajorVersion: T.WORD,
    MinorVersion: T.WORD,
    Type: T.DWORD,
    SizeOfData: T.DWORD,
    AddressOfRawData: T.DWORD,
    PointerToRawData: T.DWORD
});};
T.PIMAGE_DEBUG_DIRECTORY = function() {return Pointer(Struct('_IMAGE_DEBUG_DIRECTORY', {
    Characteristics: T.DWORD,
    TimeDateStamp: T.DWORD,
    MajorVersion: T.WORD,
    MinorVersion: T.WORD,
    Type: T.DWORD,
    SizeOfData: T.DWORD,
    AddressOfRawData: T.DWORD,
    PointerToRawData: T.DWORD
}));};
T.ReplacesCorHdrNumericDefines = function() {return Enum('MAX_PACKAGE_NAME', {
    COMIMAGE_FLAGS_ILONLY: 1,
    COMIMAGE_FLAGS_32BITREQUIRED: 2,
    COMIMAGE_FLAGS_IL_LIBRARY: 4,
    COMIMAGE_FLAGS_STRONGNAMESIGNED: 8,
    COMIMAGE_FLAGS_TRACKDEBUGDATA: 65536,
    COR_VERSION_MAJOR_V2: 2,
    COR_VERSION_MAJOR: 3,
    COR_VERSION_MINOR: 0,
    COR_DELETED_NAME_LENGTH: 8,
    COR_VTABLEGAP_NAME_LENGTH: 8,
    NATIVE_TYPE_MAX_CB: 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE: 255,
    IMAGE_COR_MIH_METHODRVA: 1,
    IMAGE_COR_MIH_EHRVA: 2,
    IMAGE_COR_MIH_BASICBLOCK: 8,
    COR_VTABLE_32BIT: 1,
    COR_VTABLE_64BIT: 2,
    COR_VTABLE_FROM_UNMANAGED: 4,
    COR_VTABLE_CALL_MOST_DERIVED: 16,
    IMAGE_COR_EATJ_THUNK_SIZE: 32,
    MAX_CLASS_NAME: 1024,
    MAX_PACKAGE_NAME: 1024
});};
T.IMAGE_COR20_HEADER = function() {return Struct('IMAGE_COR20_HEADER', {
    cb: T.DWORD,
    MajorRuntimeVersion: T.WORD,
    MinorRuntimeVersion: T.WORD,
    MetaData: T.IMAGE_DATA_DIRECTORY,
    Flags: T.DWORD,
    EntryPointToken: T.DWORD,
    Resources: T.IMAGE_DATA_DIRECTORY,
    StrongNameSignature: T.IMAGE_DATA_DIRECTORY,
    CodeManagerTable: T.IMAGE_DATA_DIRECTORY,
    VTableFixups: T.IMAGE_DATA_DIRECTORY,
    ExportAddressTableJumps: T.IMAGE_DATA_DIRECTORY,
    ManagedNativeHeader: T.IMAGE_DATA_DIRECTORY
});};
T.PIMAGE_COR20_HEADER = function() {return Pointer(Struct('IMAGE_COR20_HEADER', {
    cb: T.DWORD,
    MajorRuntimeVersion: T.WORD,
    MinorRuntimeVersion: T.WORD,
    MetaData: T.IMAGE_DATA_DIRECTORY,
    Flags: T.DWORD,
    EntryPointToken: T.DWORD,
    Resources: T.IMAGE_DATA_DIRECTORY,
    StrongNameSignature: T.IMAGE_DATA_DIRECTORY,
    CodeManagerTable: T.IMAGE_DATA_DIRECTORY,
    VTableFixups: T.IMAGE_DATA_DIRECTORY,
    ExportAddressTableJumps: T.IMAGE_DATA_DIRECTORY,
    ManagedNativeHeader: T.IMAGE_DATA_DIRECTORY
}));};
T.IMAGE_COFF_SYMBOLS_HEADER = function() {return Struct('_IMAGE_COFF_SYMBOLS_HEADER', {
    NumberOfSymbols: T.DWORD,
    LvaToFirstSymbol: T.DWORD,
    NumberOfLinenumbers: T.DWORD,
    LvaToFirstLinenumber: T.DWORD,
    RvaToFirstByteOfCode: T.DWORD,
    RvaToLastByteOfCode: T.DWORD,
    RvaToFirstByteOfData: T.DWORD,
    RvaToLastByteOfData: T.DWORD
});};
T.PIMAGE_COFF_SYMBOLS_HEADER = function() {return Pointer(Struct('_IMAGE_COFF_SYMBOLS_HEADER', {
    NumberOfSymbols: T.DWORD,
    LvaToFirstSymbol: T.DWORD,
    NumberOfLinenumbers: T.DWORD,
    LvaToFirstLinenumber: T.DWORD,
    RvaToFirstByteOfCode: T.DWORD,
    RvaToLastByteOfCode: T.DWORD,
    RvaToFirstByteOfData: T.DWORD,
    RvaToLastByteOfData: T.DWORD
}));};
T.FPO_DATA = function() {return Struct('_FPO_DATA', {
    ulOffStart: T.DWORD,
    cbProcSize: T.DWORD,
    cdwLocals: T.DWORD,
    cdwParams: T.WORD,
    cbProlog: [T.WORD, 8],
    cbRegs: [T.WORD, 3],
    fHasSEH: [T.WORD, 1],
    fUseBP: [T.WORD, 1],
    reserved: [T.WORD, 1],
    cbFrame: [T.WORD, 2]
});};
T.PFPO_DATA = function() {return Pointer(Struct('_FPO_DATA', {
    ulOffStart: T.DWORD,
    cbProcSize: T.DWORD,
    cdwLocals: T.DWORD,
    cdwParams: T.WORD,
    cbProlog: [T.WORD, 8],
    cbRegs: [T.WORD, 3],
    fHasSEH: [T.WORD, 1],
    fUseBP: [T.WORD, 1],
    reserved: [T.WORD, 1],
    cbFrame: [T.WORD, 2]
}));};
T.IMAGE_LOAD_CONFIG_DIRECTORY = function() {return Struct('_IMAGE_LOAD_CONFIG_DIRECTORY', {
    Size: T.DWORD,
    TimeDateStamp: T.DWORD,
    MajorVersion: T.WORD,
    MinorVersion: T.WORD,
    GlobalFlagsClear: T.DWORD,
    GlobalFlagsSet: T.DWORD,
    CriticalSectionDefaultTimeout: T.DWORD,
    DeCommitFreeBlockThreshold: T.DWORD,
    DeCommitTotalFreeThreshold: T.DWORD,
    LockPrefixTable: T.PVOID,
    MaximumAllocationSize: T.DWORD,
    VirtualMemoryThreshold: T.DWORD,
    ProcessHeapFlags: T.DWORD,
    ProcessAffinityMask: T.DWORD,
    CSDVersion: T.WORD,
    Reserved1: T.WORD,
    EditList: T.PVOID,
    SecurityCookie: T.DWORD,
    SEHandlerTable: T.DWORD,
    SEHandlerCount: T.DWORD
});};
T.PIMAGE_LOAD_CONFIG_DIRECTORY = function() {return Pointer(Struct('_IMAGE_LOAD_CONFIG_DIRECTORY', {
    Size: T.DWORD,
    TimeDateStamp: T.DWORD,
    MajorVersion: T.WORD,
    MinorVersion: T.WORD,
    GlobalFlagsClear: T.DWORD,
    GlobalFlagsSet: T.DWORD,
    CriticalSectionDefaultTimeout: T.DWORD,
    DeCommitFreeBlockThreshold: T.DWORD,
    DeCommitTotalFreeThreshold: T.DWORD,
    LockPrefixTable: T.PVOID,
    MaximumAllocationSize: T.DWORD,
    VirtualMemoryThreshold: T.DWORD,
    ProcessHeapFlags: T.DWORD,
    ProcessAffinityMask: T.DWORD,
    CSDVersion: T.WORD,
    Reserved1: T.WORD,
    EditList: T.PVOID,
    SecurityCookie: T.DWORD,
    SEHandlerTable: T.DWORD,
    SEHandlerCount: T.DWORD
}));};
T.IMAGE_FUNCTION_ENTRY = function() {return Struct('_IMAGE_FUNCTION_ENTRY', {
    StartingAddress: T.DWORD,
    EndingAddress: T.DWORD,
    EndOfPrologue: T.DWORD
});};
T.PIMAGE_FUNCTION_ENTRY = function() {return Pointer(Struct('_IMAGE_FUNCTION_ENTRY', {
    StartingAddress: T.DWORD,
    EndingAddress: T.DWORD,
    EndOfPrologue: T.DWORD
}));};
T.IMAGE_DEBUG_MISC = function() {return Struct('_IMAGE_DEBUG_MISC', {
    DataType: T.DWORD,
    Length: T.DWORD,
    Unicode: T.BYTE,
    Reserved: ArrayType(T.BYTE, 3),
    Data: ArrayType(T.BYTE, 1)
});};
T.PIMAGE_DEBUG_MISC = function() {return Pointer(Struct('_IMAGE_DEBUG_MISC', {
    DataType: T.DWORD,
    Length: T.DWORD,
    Unicode: T.BYTE,
    Reserved: ArrayType(T.BYTE, 3),
    Data: ArrayType(T.BYTE, 1)
}));};
T.IMAGE_SEPARATE_DEBUG_HEADER = function() {return Struct('_IMAGE_SEPARATE_DEBUG_HEADER', {
    Signature: T.WORD,
    Flags: T.WORD,
    Machine: T.WORD,
    Characteristics: T.WORD,
    TimeDateStamp: T.DWORD,
    CheckSum: T.DWORD,
    ImageBase: T.DWORD,
    SizeOfImage: T.DWORD,
    NumberOfSections: T.DWORD,
    ExportedNamesSize: T.DWORD,
    DebugDirectorySize: T.DWORD,
    SectionAlignment: T.DWORD,
    Reserved: ArrayType(T.DWORD, 2)
});};
T.PIMAGE_SEPARATE_DEBUG_HEADER = function() {return Pointer(Struct('_IMAGE_SEPARATE_DEBUG_HEADER', {
    Signature: T.WORD,
    Flags: T.WORD,
    Machine: T.WORD,
    Characteristics: T.WORD,
    TimeDateStamp: T.DWORD,
    CheckSum: T.DWORD,
    ImageBase: T.DWORD,
    SizeOfImage: T.DWORD,
    NumberOfSections: T.DWORD,
    ExportedNamesSize: T.DWORD,
    DebugDirectorySize: T.DWORD,
    SectionAlignment: T.DWORD,
    Reserved: ArrayType(T.DWORD, 2)
}));};
T.MESSAGE_RESOURCE_ENTRY = function() {return Struct('tagMESSAGE_RESOURCE_ENTRY', {
    Length: T.WORD,
    Flags: T.WORD,
    Text: ArrayType(T.BYTE, 1)
});};
T.PMESSAGE_RESOURCE_ENTRY = function() {return Pointer(Struct('tagMESSAGE_RESOURCE_ENTRY', {
    Length: T.WORD,
    Flags: T.WORD,
    Text: ArrayType(T.BYTE, 1)
}));};
T.MESSAGE_RESOURCE_BLOCK = function() {return Struct('tagMESSAGE_RESOURCE_BLOCK', {
    LowId: T.DWORD,
    HighId: T.DWORD,
    OffsetToEntries: T.DWORD
});};
T.PMESSAGE_RESOURCE_BLOCK = function() {return Pointer(Struct('tagMESSAGE_RESOURCE_BLOCK', {
    LowId: T.DWORD,
    HighId: T.DWORD,
    OffsetToEntries: T.DWORD
}));};
T.MESSAGE_RESOURCE_DATA = function() {return Struct('tagMESSAGE_RESOURCE_DATA', {
    NumberOfBlocks: T.DWORD,
    Blocks: ArrayType(T.MESSAGE_RESOURCE_BLOCK, 1)
});};
T.PMESSAGE_RESOURCE_DATA = function() {return Pointer(Struct('tagMESSAGE_RESOURCE_DATA', {
    NumberOfBlocks: T.DWORD,
    Blocks: ArrayType(T.MESSAGE_RESOURCE_BLOCK, 1)
}));};
T.PACCESS_TOKEN = function() {return T.PVOID;};
T.PSECURITY_DESCRIPTOR = function() {return T.PVOID;};
T.PSID = function() {return T.PVOID;};
T.TOKEN_ELEVATION_TYPE = function() {return Enum('TokenElevationTypeLimited', {
    TokenElevationTypeDefault: 1,
    TokenElevationTypeFull: 2,
    TokenElevationTypeLimited: 3
});};
T.PTOKEN_ELEVATION_TYPE = function() {return Pointer(Enum('TokenElevationTypeLimited', {
    TokenElevationTypeDefault: 1,
    TokenElevationTypeFull: 2,
    TokenElevationTypeLimited: 3
}));};
T.TOKEN_INFORMATION_CLASS = function() {return Enum('MaxTokenInfoClass', {
    TokenUser: 1,
    TokenGroups: 2,
    TokenPrivileges: 3,
    TokenOwner: 4,
    TokenPrimaryGroup: 5,
    TokenDefaultDacl: 6,
    TokenSource: 7,
    TokenType: 8,
    TokenImpersonationLevel: 9,
    TokenStatistics: 10,
    TokenRestrictedSids: 11,
    TokenSessionId: 12,
    TokenGroupsAndPrivileges: 13,
    TokenSessionReference: 14,
    TokenSandBoxInert: 15,
    TokenAuditPolicy: 16,
    TokenOrigin: 17,
    TokenElevationType: 18,
    TokenLinkedToken: 19,
    TokenElevation: 20,
    TokenHasRestrictions: 21,
    TokenAccessInformation: 22,
    TokenVirtualizationAllowed: 23,
    TokenVirtualizationEnabled: 24,
    TokenIntegrityLevel: 25,
    TokenUIAccess: 26,
    TokenMandatoryPolicy: 27,
    TokenLogonSid: 28,
    MaxTokenInfoClass: 29
});};
T.ACCESS_MASK = function() {return T.DWORD;};
T.PACCESS_MASK = function() {return Pointer(T.DWORD);};
T.GENERIC_MAPPING = function() {return Struct('_GENERIC_MAPPING', {
    GenericRead: T.ACCESS_MASK,
    GenericWrite: T.ACCESS_MASK,
    GenericExecute: T.ACCESS_MASK,
    GenericAll: T.ACCESS_MASK
});};
T.PGENERIC_MAPPING = function() {return Pointer(Struct('_GENERIC_MAPPING', {
    GenericRead: T.ACCESS_MASK,
    GenericWrite: T.ACCESS_MASK,
    GenericExecute: T.ACCESS_MASK,
    GenericAll: T.ACCESS_MASK
}));};
T.SID_IDENTIFIER_AUTHORITY = function() {return Struct('', {
    Value: ArrayType(T.BYTE, 6)
});};
T.PSID_IDENTIFIER_AUTHORITY = function() {return Pointer(Struct('', {
    Value: ArrayType(T.BYTE, 6)
}));};
T.SID = function() {return Struct('_SID', {
    Revision: T.BYTE,
    SubAuthorityCount: T.BYTE,
    IdentifierAuthority: T.SID_IDENTIFIER_AUTHORITY,
    SubAuthority: ArrayType(T.DWORD, 1)
});};
T.PISID = function() {return Pointer(Struct('_SID', {
    Revision: T.BYTE,
    SubAuthorityCount: T.BYTE,
    IdentifierAuthority: T.SID_IDENTIFIER_AUTHORITY,
    SubAuthority: ArrayType(T.DWORD, 1)
}));};
T.ACL = function() {return Struct('_ACL', {
    AclRevision: T.BYTE,
    Sbz1: T.BYTE,
    AclSize: T.WORD,
    AceCount: T.WORD,
    Sbz2: T.WORD
});};
T.PACL = function() {return Pointer(Struct('_ACL', {
    AclRevision: T.BYTE,
    Sbz1: T.BYTE,
    AclSize: T.WORD,
    AceCount: T.WORD,
    Sbz2: T.WORD
}));};
T.ACL_INFORMATION_CLASS = function() {return Enum('AclSizeInformation', {
    AclRevisionInformation: 1,
    AclSizeInformation: 2
});};
T.ACL_REVISION_INFORMATION = function() {return Struct('_ACL_REVISION_INFORMATION', {
    AclRevision: T.DWORD
});};
T.PACL_REVISION_INFORMATION = function() {return Pointer(Struct('_ACL_REVISION_INFORMATION', {
    AclRevision: T.DWORD
}));};
T.ACL_SIZE_INFORMATION = function() {return Struct('_ACL_SIZE_INFORMATION', {
    AceCount: T.DWORD,
    AclBytesInUse: T.DWORD,
    AclBytesFree: T.DWORD
});};
T.PACL_SIZE_INFORMATION = function() {return Pointer(Struct('_ACL_SIZE_INFORMATION', {
    AceCount: T.DWORD,
    AclBytesInUse: T.DWORD,
    AclBytesFree: T.DWORD
}));};
T.SECURITY_INFORMATION = function() {return T.DWORD;};
T.PSECURITY_INFORMATION = function() {return Pointer(T.DWORD);};
T.SECURITY_DESCRIPTOR_CONTROL = function() {return T.WORD;};
T.PSECURITY_DESCRIPTOR_CONTROL = function() {return Pointer(T.WORD);};
T.SECURITY_DESCRIPTOR_RELATIVE = function() {return Struct('', {
    Revision: T.BYTE,
    Sbz1: T.BYTE,
    Control: T.SECURITY_DESCRIPTOR_CONTROL,
    Owner: T.DWORD,
    Group: T.DWORD,
    Sacl: T.DWORD,
    Dacl: T.DWORD
});};
T.PISECURITY_DESCRIPTOR_RELATIVE = function() {return Pointer(Struct('', {
    Revision: T.BYTE,
    Sbz1: T.BYTE,
    Control: T.SECURITY_DESCRIPTOR_CONTROL,
    Owner: T.DWORD,
    Group: T.DWORD,
    Sacl: T.DWORD,
    Dacl: T.DWORD
}));};
T.SECURITY_DESCRIPTOR = function() {return Struct('', {
    Revision: T.BYTE,
    Sbz1: T.BYTE,
    Control: T.SECURITY_DESCRIPTOR_CONTROL,
    Owner: T.PSID,
    Group: T.PSID,
    Sacl: T.PACL,
    Dacl: T.PACL
});};
T.PISECURITY_DESCRIPTOR = function() {return Pointer(Struct('', {
    Revision: T.BYTE,
    Sbz1: T.BYTE,
    Control: T.SECURITY_DESCRIPTOR_CONTROL,
    Owner: T.PSID,
    Group: T.PSID,
    Sacl: T.PACL,
    Dacl: T.PACL
}));};
T.SID_AND_ATTRIBUTES = function() {return Struct('_SID_AND_ATTRIBUTES', {
    Sid: T.PSID,
    Attributes: T.DWORD
});};
T.PSID_AND_ATTRIBUTES = function() {return Pointer(Struct('_SID_AND_ATTRIBUTES', {
    Sid: T.PSID,
    Attributes: T.DWORD
}));};
T.WELL_KNOWN_SID_TYPE = function() {return Enum('WinThisOrganizationCertificateSid', {
    WinNullSid: 0,
    WinWorldSid: 1,
    WinLocalSid: 2,
    WinCreatorOwnerSid: 3,
    WinCreatorGroupSid: 4,
    WinCreatorOwnerServerSid: 5,
    WinCreatorGroupServerSid: 6,
    WinNtAuthoritySid: 7,
    WinDialupSid: 8,
    WinNetworkSid: 9,
    WinBatchSid: 10,
    WinInteractiveSid: 11,
    WinServiceSid: 12,
    WinAnonymousSid: 13,
    WinProxySid: 14,
    WinEnterpriseControllersSid: 15,
    WinSelfSid: 16,
    WinAuthenticatedUserSid: 17,
    WinRestrictedCodeSid: 18,
    WinTerminalServerSid: 19,
    WinRemoteLogonIdSid: 20,
    WinLogonIdsSid: 21,
    WinLocalSystemSid: 22,
    WinLocalServiceSid: 23,
    WinNetworkServiceSid: 24,
    WinBuiltinDomainSid: 25,
    WinBuiltinAdministratorsSid: 26,
    WinBuiltinUsersSid: 27,
    WinBuiltinGuestsSid: 28,
    WinBuiltinPowerUsersSid: 29,
    WinBuiltinAccountOperatorsSid: 30,
    WinBuiltinSystemOperatorsSid: 31,
    WinBuiltinPrintOperatorsSid: 32,
    WinBuiltinBackupOperatorsSid: 33,
    WinBuiltinReplicatorSid: 34,
    WinBuiltinPreWindows2000CompatibleAccessSid: 35,
    WinBuiltinRemoteDesktopUsersSid: 36,
    WinBuiltinNetworkConfigurationOperatorsSid: 37,
    WinAccountAdministratorSid: 38,
    WinAccountGuestSid: 39,
    WinAccountKrbtgtSid: 40,
    WinAccountDomainAdminsSid: 41,
    WinAccountDomainUsersSid: 42,
    WinAccountDomainGuestsSid: 43,
    WinAccountComputersSid: 44,
    WinAccountControllersSid: 45,
    WinAccountCertAdminsSid: 46,
    WinAccountSchemaAdminsSid: 47,
    WinAccountEnterpriseAdminsSid: 48,
    WinAccountPolicyAdminsSid: 49,
    WinAccountRasAndIasServersSid: 50,
    WinNTLMAuthenticationSid: 51,
    WinDigestAuthenticationSid: 52,
    WinSChannelAuthenticationSid: 53,
    WinThisOrganizationSid: 54,
    WinOtherOrganizationSid: 55,
    WinBuiltinIncomingForestTrustBuildersSid: 56,
    WinBuiltinPerfMonitoringUsersSid: 57,
    WinBuiltinPerfLoggingUsersSid: 58,
    WinBuiltinAuthorizationAccessSid: 59,
    WinBuiltinTerminalServerLicenseServersSid: 60,
    WinBuiltinDCOMUsersSid: 61,
    WinBuiltinIUsersSid: 62,
    WinIUserSid: 63,
    WinBuiltinCryptoOperatorsSid: 64,
    WinUntrustedLabelSid: 65,
    WinLowLabelSid: 66,
    WinMediumLabelSid: 67,
    WinHighLabelSid: 68,
    WinSystemLabelSid: 69,
    WinWriteRestrictedCodeSid: 70,
    WinCreatorOwnerRightsSid: 71,
    WinCacheablePrincipalsGroupSid: 72,
    WinNonCacheablePrincipalsGroupSid: 73,
    WinEnterpriseReadonlyControllersSid: 74,
    WinAccountReadonlyControllersSid: 75,
    WinBuiltinEventLogReadersGroup: 76,
    WinNewEnterpriseReadonlyControllersSid: 77,
    WinBuiltinCertSvcDComAccessGroup: 78,
    WinMediumPlusLabelSid: 79,
    WinLocalLogonSid: 80,
    WinConsoleLogonSid: 81,
    WinThisOrganizationCertificateSid: 82
});};
T.TOKEN_USER = function() {return Struct('_TOKEN_USER', {
    User: T.SID_AND_ATTRIBUTES
});};
T.PTOKEN_USER = function() {return Pointer(Struct('_TOKEN_USER', {
    User: T.SID_AND_ATTRIBUTES
}));};
T.TOKEN_GROUPS = function() {return Struct('_TOKEN_GROUPS', {
    GroupCount: T.DWORD,
    Groups: ArrayType(T.SID_AND_ATTRIBUTES, 1)
});};
T.PTOKEN_GROUPS = function() {return Pointer(Struct('_TOKEN_GROUPS', {
    GroupCount: T.DWORD,
    Groups: ArrayType(T.SID_AND_ATTRIBUTES, 1)
}));};
T.LARGE_INTEGER = function() {return Union('_LARGE_INTEGER', {
    u: Struct('', {
        LowPart: T.DWORD,
        HighPart: T.LONG
    }),
    __unnamed0: Struct('', {
        LowPart: T.DWORD,
        HighPart: T.LONG
    }),
    QuadPart: T.LONGLONG
});};
T.PLARGE_INTEGER = function() {return Pointer(Union('_LARGE_INTEGER', {
    u: Struct('', {
        LowPart: T.DWORD,
        HighPart: T.LONG
    }),
    __unnamed0: Struct('', {
        LowPart: T.DWORD,
        HighPart: T.LONG
    }),
    QuadPart: T.LONGLONG
}));};
T.ULARGE_INTEGER = function() {return Union('_ULARGE_INTEGER', {
    u: Struct('', {
        LowPart: T.DWORD,
        HighPart: T.DWORD
    }),
    __unnamed0: Struct('', {
        LowPart: T.DWORD,
        HighPart: T.DWORD
    }),
    QuadPart: T.ULONGLONG
});};
T.PULARGE_INTEGER = function() {return Pointer(Union('_ULARGE_INTEGER', {
    u: Struct('', {
        LowPart: T.DWORD,
        HighPart: T.DWORD
    }),
    __unnamed0: Struct('', {
        LowPart: T.DWORD,
        HighPart: T.DWORD
    }),
    QuadPart: T.ULONGLONG
}));};
T.LUID = function() {return Struct('_LUID', {
    LowPart: T.DWORD,
    HighPart: T.LONG
});};
T.PLUID = function() {return Pointer(Struct('_LUID', {
    LowPart: T.DWORD,
    HighPart: T.LONG
}));};
T.LUID_AND_ATTRIBUTES = function() {return Struct('_LUID_AND_ATTRIBUTES', {
    Luid: T.LUID,
    Attributes: T.DWORD
});};
T.PLUID_AND_ATTRIBUTES = function() {return Pointer(Struct('_LUID_AND_ATTRIBUTES', {
    Luid: T.LUID,
    Attributes: T.DWORD
}));};
T.PRIVILEGE_SET = function() {return Struct('_PRIVILEGE_SET', {
    PrivilegeCount: T.DWORD,
    Control: T.DWORD,
    Privilege: ArrayType(T.LUID_AND_ATTRIBUTES, 1)
});};
T.PPRIVILEGE_SET = function() {return Pointer(Struct('_PRIVILEGE_SET', {
    PrivilegeCount: T.DWORD,
    Control: T.DWORD,
    Privilege: ArrayType(T.LUID_AND_ATTRIBUTES, 1)
}));};
T.TOKEN_PRIVILEGES = function() {return Struct('_TOKEN_PRIVILEGES', {
    PrivilegeCount: T.DWORD,
    Privileges: ArrayType(T.LUID_AND_ATTRIBUTES, 1)
});};
T.PTOKEN_PRIVILEGES = function() {return Pointer(Struct('_TOKEN_PRIVILEGES', {
    PrivilegeCount: T.DWORD,
    Privileges: ArrayType(T.LUID_AND_ATTRIBUTES, 1)
}));};
T.TOKEN_OWNER = function() {return Struct('_TOKEN_OWNER', {
    Owner: T.PSID
});};
T.PTOKEN_OWNER = function() {return Pointer(Struct('_TOKEN_OWNER', {
    Owner: T.PSID
}));};
T.TOKEN_PRIMARY_GROUP = function() {return Struct('_TOKEN_PRIMARY_GROUP', {
    PrimaryGroup: T.PSID
});};
T.PTOKEN_PRIMARY_GROUP = function() {return Pointer(Struct('_TOKEN_PRIMARY_GROUP', {
    PrimaryGroup: T.PSID
}));};
T.TOKEN_DEFAULT_DACL = function() {return Struct('_TOKEN_DEFAULT_DACL', {
    DefaultDacl: T.PACL
});};
T.PTOKEN_DEFAULT_DACL = function() {return Pointer(Struct('_TOKEN_DEFAULT_DACL', {
    DefaultDacl: T.PACL
}));};
T.TOKEN_SOURCE = function() {return Struct('_TOKEN_SOURCE', {
    SourceName: ArrayType(T.char, 8),
    SourceIdentifier: T.LUID
});};
T.PTOKEN_SOURCE = function() {return Pointer(Struct('_TOKEN_SOURCE', {
    SourceName: ArrayType(T.char, 8),
    SourceIdentifier: T.LUID
}));};
T.TOKEN_TYPE = function() {return Enum('TokenImpersonation', {
    TokenPrimary: 1,
    TokenImpersonation: 2
});};
T.SECURITY_IMPERSONATION_LEVEL = function() {return Enum('SecurityDelegation', {
    SecurityAnonymous: 0,
    SecurityIdentification: 1,
    SecurityImpersonation: 2,
    SecurityDelegation: 3
});};
T.PSECURITY_IMPERSONATION_LEVEL = function() {return Pointer(Enum('SecurityDelegation', {
    SecurityAnonymous: 0,
    SecurityIdentification: 1,
    SecurityImpersonation: 2,
    SecurityDelegation: 3
}));};
T.SECURITY_CONTEXT_TRACKING_MODE = function() {return T.BOOLEAN;};
T.PSECURITY_CONTEXT_TRACKING_MODE = function() {return Pointer(T.BOOLEAN);};
T.SECURITY_QUALITY_OF_SERVICE = function() {return Struct('_SECURITY_QUALITY_OF_SERVICE', {
    Length: T.DWORD,
    ImpersonationLevel: T.SECURITY_IMPERSONATION_LEVEL,
    ContextTrackingMode: T.SECURITY_CONTEXT_TRACKING_MODE,
    EffectiveOnly: T.BOOLEAN
});};
T.PSECURITY_QUALITY_OF_SERVICE = function() {return Pointer(Struct('_SECURITY_QUALITY_OF_SERVICE', {
    Length: T.DWORD,
    ImpersonationLevel: T.SECURITY_IMPERSONATION_LEVEL,
    ContextTrackingMode: T.SECURITY_CONTEXT_TRACKING_MODE,
    EffectiveOnly: T.BOOLEAN
}));};
T.TOKEN_STATISTICS = function() {return Struct('_TOKEN_STATISTICS', {
    TokenId: T.LUID,
    AuthenticationId: T.LUID,
    ExpirationTime: T.LARGE_INTEGER,
    TokenType: T.TOKEN_TYPE,
    ImpersonationLevel: T.SECURITY_IMPERSONATION_LEVEL,
    DynamicCharged: T.DWORD,
    DynamicAvailable: T.DWORD,
    GroupCount: T.DWORD,
    PrivilegeCount: T.DWORD,
    ModifiedId: T.LUID
});};
T.TOKEN_GROUPS_AND_PRIVILEGES = function() {return Struct('_TOKEN_GROUPS_AND_PRIVILEGES', {
    SidCount: T.DWORD,
    SidLength: T.DWORD,
    Sids: T.PSID_AND_ATTRIBUTES,
    RestrictedSidCount: T.DWORD,
    RestrictedSidLength: T.DWORD,
    RestrictedSids: T.PSID_AND_ATTRIBUTES,
    PrivilegeCount: T.DWORD,
    PrivilegeLength: T.DWORD,
    Privileges: T.PLUID_AND_ATTRIBUTES,
    AuthenticationId: T.LUID
});};
T.PTOKEN_GROUPS_AND_PRIVILEGES = function() {return Pointer(Struct('_TOKEN_GROUPS_AND_PRIVILEGES', {
    SidCount: T.DWORD,
    SidLength: T.DWORD,
    Sids: T.PSID_AND_ATTRIBUTES,
    RestrictedSidCount: T.DWORD,
    RestrictedSidLength: T.DWORD,
    RestrictedSids: T.PSID_AND_ATTRIBUTES,
    PrivilegeCount: T.DWORD,
    PrivilegeLength: T.DWORD,
    Privileges: T.PLUID_AND_ATTRIBUTES,
    AuthenticationId: T.LUID
}));};
T.TOKEN_ORIGIN = function() {return Struct('_TOKEN_ORIGIN', {
    OriginatingLogonSession: T.LUID
});};
T.PTOKEN_ORIGIN = function() {return Pointer(Struct('_TOKEN_ORIGIN', {
    OriginatingLogonSession: T.LUID
}));};
T.TOKEN_LINKED_TOKEN = function() {return Struct('_TOKEN_LINKED_TOKEN', {
    LinkedToken: T.HANDLE
});};
T.PTOKEN_LINKED_TOKEN = function() {return Pointer(Struct('_TOKEN_LINKED_TOKEN', {
    LinkedToken: T.HANDLE
}));};
T.TOKEN_ELEVATION = function() {return Struct('_TOKEN_ELEVATION', {
    TokenIsElevated: T.DWORD
});};
T.PTOKEN_ELEVATION = function() {return Pointer(Struct('_TOKEN_ELEVATION', {
    TokenIsElevated: T.DWORD
}));};
T.ACE_HEADER = function() {return Struct('_ACE_HEADER', {
    AceType: T.BYTE,
    AceFlags: T.BYTE,
    AceSize: T.WORD
});};
T.PACE_HEADER = function() {return Pointer(Struct('_ACE_HEADER', {
    AceType: T.BYTE,
    AceFlags: T.BYTE,
    AceSize: T.WORD
}));};
T.ACCESS_ALLOWED_ACE = function() {return Struct('_ACCESS_ALLOWED_ACE', {
    Header: T.ACE_HEADER,
    Mask: T.DWORD,
    SidStart: T.DWORD
});};
T.PACCESS_ALLOWED_ACE = function() {return Pointer(Struct('_ACCESS_ALLOWED_ACE', {
    Header: T.ACE_HEADER,
    Mask: T.DWORD,
    SidStart: T.DWORD
}));};
T.ACCESS_DENIED_ACE = function() {return Struct('_ACCESS_DENIED_ACE', {
    Header: T.ACE_HEADER,
    Mask: T.DWORD,
    SidStart: T.DWORD
});};
T.PACCESS_DENIED_ACE = function() {return Pointer(Struct('_ACCESS_DENIED_ACE', {
    Header: T.ACE_HEADER,
    Mask: T.DWORD,
    SidStart: T.DWORD
}));};
T.SYSTEM_AUDIT_ACE = function() {return Struct('_SYSTEM_AUDIT_ACE', {
    Header: T.ACE_HEADER,
    Mask: T.DWORD,
    SidStart: T.DWORD
});};
T.PSYSTEM_AUDIT_ACE = function() {return Pointer(Struct('_SYSTEM_AUDIT_ACE', {
    Header: T.ACE_HEADER,
    Mask: T.DWORD,
    SidStart: T.DWORD
}));};
T.SYSTEM_ALARM_ACE = function() {return Struct('_SYSTEM_ALARM_ACE', {
    Header: T.ACE_HEADER,
    Mask: T.DWORD,
    SidStart: T.DWORD
});};
T.PSYSTEM_ALARM_ACE = function() {return Pointer(Struct('_SYSTEM_ALARM_ACE', {
    Header: T.ACE_HEADER,
    Mask: T.DWORD,
    SidStart: T.DWORD
}));};
T.SID_NAME_USE = function() {return Enum('SidTypeUnknown', {
    SidTypeUser: 1,
    SidTypeGroup: 2,
    SidTypeDomain: 3,
    SidTypeAlias: 4,
    SidTypeWellKnownGroup: 5,
    SidTypeDeletedAccount: 6,
    SidTypeInvalid: 7,
    SidTypeUnknown: 8
});};
T.PSID_NAME_USE = function() {return Pointer(Enum('SidTypeUnknown', {
    SidTypeUser: 1,
    SidTypeGroup: 2,
    SidTypeDomain: 3,
    SidTypeAlias: 4,
    SidTypeWellKnownGroup: 5,
    SidTypeDeletedAccount: 6,
    SidTypeInvalid: 7,
    SidTypeUnknown: 8
}));};
T.QUOTA_LIMITS = function() {return Struct('_QUOTA_LIMITS', {
    PagedPoolLimit: T.SIZE_T,
    NonPagedPoolLimit: T.SIZE_T,
    MinimumWorkingSetSize: T.SIZE_T,
    MaximumWorkingSetSize: T.SIZE_T,
    PagefileLimit: T.SIZE_T,
    TimeLimit: T.LARGE_INTEGER
});};
T.PQUOTA_LIMITS = function() {return Pointer(Struct('_QUOTA_LIMITS', {
    PagedPoolLimit: T.SIZE_T,
    NonPagedPoolLimit: T.SIZE_T,
    MinimumWorkingSetSize: T.SIZE_T,
    MaximumWorkingSetSize: T.SIZE_T,
    PagefileLimit: T.SIZE_T,
    TimeLimit: T.LARGE_INTEGER
}));};
T.QUOTA_LIMITS_EX = function() {return Struct('_QUOTA_LIMITS_EX', {
    PagedPoolLimit: T.SIZE_T,
    NonPagedPoolLimit: T.SIZE_T,
    MinimumWorkingSetSize: T.SIZE_T,
    MaximumWorkingSetSize: T.SIZE_T,
    PagefileLimit: T.SIZE_T,
    TimeLimit: T.LARGE_INTEGER,
    Reserved1: T.SIZE_T,
    Reserved2: T.SIZE_T,
    Reserved3: T.SIZE_T,
    Reserved4: T.SIZE_T,
    Flags: T.DWORD,
    Reserved5: T.DWORD
});};
T.PQUOTA_LIMITS_EX = function() {return Pointer(Struct('_QUOTA_LIMITS_EX', {
    PagedPoolLimit: T.SIZE_T,
    NonPagedPoolLimit: T.SIZE_T,
    MinimumWorkingSetSize: T.SIZE_T,
    MaximumWorkingSetSize: T.SIZE_T,
    PagefileLimit: T.SIZE_T,
    TimeLimit: T.LARGE_INTEGER,
    Reserved1: T.SIZE_T,
    Reserved2: T.SIZE_T,
    Reserved3: T.SIZE_T,
    Reserved4: T.SIZE_T,
    Flags: T.DWORD,
    Reserved5: T.DWORD
}));};
T.LATENCY_TIME = function() {return Enum('LT_LOWEST_LATENCY', {
    LT_DONT_CARE: 0,
    LT_LOWEST_LATENCY: 1
});};
T.PLATENCY_TIME = function() {return Pointer(Enum('LT_LOWEST_LATENCY', {
    LT_DONT_CARE: 0,
    LT_LOWEST_LATENCY: 1
}));};
T.POWER_ACTION = function() {return Enum('PowerActionWarmEject', {
    PowerActionNone: 0,
    PowerActionReserved: 1,
    PowerActionSleep: 2,
    PowerActionHibernate: 3,
    PowerActionShutdown: 4,
    PowerActionShutdownReset: 5,
    PowerActionShutdownOff: 6,
    PowerActionWarmEject: 7
});};
T.PPOWER_ACTION = function() {return Pointer(Enum('PowerActionWarmEject', {
    PowerActionNone: 0,
    PowerActionReserved: 1,
    PowerActionSleep: 2,
    PowerActionHibernate: 3,
    PowerActionShutdown: 4,
    PowerActionShutdownReset: 5,
    PowerActionShutdownOff: 6,
    PowerActionWarmEject: 7
}));};
T.SYSTEM_POWER_STATE = function() {return Enum('PowerSystemMaximum', {
    PowerSystemUnspecified: 0,
    PowerSystemWorking: 1,
    PowerSystemSleeping1: 2,
    PowerSystemSleeping2: 3,
    PowerSystemSleeping3: 4,
    PowerSystemHibernate: 5,
    PowerSystemShutdown: 6,
    PowerSystemMaximum: 7
});};
T.PSYSTEM_POWER_STATE = function() {return Pointer(Enum('PowerSystemMaximum', {
    PowerSystemUnspecified: 0,
    PowerSystemWorking: 1,
    PowerSystemSleeping1: 2,
    PowerSystemSleeping2: 3,
    PowerSystemSleeping3: 4,
    PowerSystemHibernate: 5,
    PowerSystemShutdown: 6,
    PowerSystemMaximum: 7
}));};
T.DEVICE_POWER_STATE = function() {return Enum('PowerDeviceMaximum', {
    PowerDeviceUnspecified: 0,
    PowerDeviceD0: 1,
    PowerDeviceD1: 2,
    PowerDeviceD2: 3,
    PowerDeviceD3: 4,
    PowerDeviceMaximum: 5
});};
T.PDEVICE_POWER_STATE = function() {return Pointer(Enum('PowerDeviceMaximum', {
    PowerDeviceUnspecified: 0,
    PowerDeviceD0: 1,
    PowerDeviceD1: 2,
    PowerDeviceD2: 3,
    PowerDeviceD3: 4,
    PowerDeviceMaximum: 5
}));};
T.POWER_INFORMATION_LEVEL = function() {return Enum('ProcessorPowerPolicyCurrent', {
    SystemPowerPolicyAc: 0,
    SystemPowerPolicyDc: 1,
    VerifySystemPolicyAc: 2,
    VerifySystemPolicyDc: 3,
    SystemPowerCapabilities: 4,
    SystemBatteryState: 5,
    SystemPowerStateHandler: 6,
    ProcessorStateHandler: 7,
    SystemPowerPolicyCurrent: 8,
    AdministratorPowerPolicy: 9,
    SystemReserveHiberFile: 10,
    ProcessorInformation: 11,
    SystemPowerInformation: 12,
    ProcessorStateHandler2: 13,
    LastWakeTime: 14,
    LastSleepTime: 15,
    SystemExecutionState: 16,
    SystemPowerStateNotifyHandler: 17,
    ProcessorPowerPolicyAc: 18,
    ProcessorPowerPolicyDc: 19,
    VerifyProcessorPowerPolicyAc: 20,
    VerifyProcessorPowerPolicyDc: 21,
    ProcessorPowerPolicyCurrent: 22
});};
T.ADMINISTRATOR_POWER_POLICY = function() {return Struct('_ADMINISTRATOR_POWER_POLICY', {
    MinSleep: T.SYSTEM_POWER_STATE,
    MaxSleep: T.SYSTEM_POWER_STATE,
    MinVideoTimeout: T.ULONG,
    MaxVideoTimeout: T.ULONG,
    MinSpindownTimeout: T.ULONG,
    MaxSpindownTimeout: T.ULONG
});};
T.PADMINISTRATOR_POWER_POLICY = function() {return Pointer(Struct('_ADMINISTRATOR_POWER_POLICY', {
    MinSleep: T.SYSTEM_POWER_STATE,
    MaxSleep: T.SYSTEM_POWER_STATE,
    MinVideoTimeout: T.ULONG,
    MaxVideoTimeout: T.ULONG,
    MinSpindownTimeout: T.ULONG,
    MaxSpindownTimeout: T.ULONG
}));};
T.BATTERY_REPORTING_SCALE = function() {return Struct('', {
    Granularity: T.ULONG,
    Capacity: T.ULONG
});};
T.PBATTERY_REPORTING_SCALE = function() {return Pointer(Struct('', {
    Granularity: T.ULONG,
    Capacity: T.ULONG
}));};
T.POWER_ACTION_POLICY = function() {return Struct('', {
    Action: T.POWER_ACTION,
    Flags: T.ULONG,
    EventCode: T.ULONG
});};
T.PPOWER_ACTION_POLICY = function() {return Pointer(Struct('', {
    Action: T.POWER_ACTION,
    Flags: T.ULONG,
    EventCode: T.ULONG
}));};
T.PROCESSOR_POWER_INFORMATION = function() {return Struct('_PROCESSOR_POWER_INFORMATION', {
    Number: T.ULONG,
    MaxMhz: T.ULONG,
    CurrentMhz: T.ULONG,
    MhzLimit: T.ULONG,
    MaxIdleState: T.ULONG,
    CurrentIdleState: T.ULONG
});};
T.PPROCESSOR_POWER_INFORMATION = function() {return Pointer(Struct('_PROCESSOR_POWER_INFORMATION', {
    Number: T.ULONG,
    MaxMhz: T.ULONG,
    CurrentMhz: T.ULONG,
    MhzLimit: T.ULONG,
    MaxIdleState: T.ULONG,
    CurrentIdleState: T.ULONG
}));};
T.PROCESSOR_POWER_POLICY_INFO = function() {return Struct('_PROCESSOR_POWER_POLICY_INFO', {
    TimeCheck: T.ULONG,
    DemoteLimit: T.ULONG,
    PromoteLimit: T.ULONG,
    DemotePercent: T.UCHAR,
    PromotePercent: T.UCHAR,
    Spare: ArrayType(T.UCHAR, 2),
    AllowDemotion: [T.ULONG, 1],
    AllowPromotion: [T.ULONG, 1],
    Reserved: [T.ULONG, 30]
});};
T.PPROCESSOR_POWER_POLICY_INFO = function() {return Pointer(Struct('_PROCESSOR_POWER_POLICY_INFO', {
    TimeCheck: T.ULONG,
    DemoteLimit: T.ULONG,
    PromoteLimit: T.ULONG,
    DemotePercent: T.UCHAR,
    PromotePercent: T.UCHAR,
    Spare: ArrayType(T.UCHAR, 2),
    AllowDemotion: [T.ULONG, 1],
    AllowPromotion: [T.ULONG, 1],
    Reserved: [T.ULONG, 30]
}));};
T.PROCESSOR_POWER_POLICY = function() {return Struct('_PROCESSOR_POWER_POLICY', {
    Revision: T.DWORD,
    DynamicThrottle: T.BYTE,
    Spare: ArrayType(T.BYTE, 3),
    DisableCStates: [T.DWORD, 1],
    Reserved: [T.DWORD, 31],
    PolicyCount: T.DWORD,
    Policy: ArrayType(T.PROCESSOR_POWER_POLICY_INFO, 3)
});};
T.PPROCESSOR_POWER_POLICY = function() {return Pointer(Struct('_PROCESSOR_POWER_POLICY', {
    Revision: T.DWORD,
    DynamicThrottle: T.BYTE,
    Spare: ArrayType(T.BYTE, 3),
    DisableCStates: [T.DWORD, 1],
    Reserved: [T.DWORD, 31],
    PolicyCount: T.DWORD,
    Policy: ArrayType(T.PROCESSOR_POWER_POLICY_INFO, 3)
}));};
T.SYSTEM_BATTERY_STATE = function() {return Struct('', {
    AcOnLine: T.BOOLEAN,
    BatteryPresent: T.BOOLEAN,
    Charging: T.BOOLEAN,
    Discharging: T.BOOLEAN,
    Spare1: ArrayType(T.BOOLEAN, 4),
    MaxCapacity: T.ULONG,
    RemainingCapacity: T.ULONG,
    Rate: T.ULONG,
    EstimatedTime: T.ULONG,
    DefaultAlert1: T.ULONG,
    DefaultAlert2: T.ULONG
});};
T.PSYSTEM_BATTERY_STATE = function() {return Pointer(Struct('', {
    AcOnLine: T.BOOLEAN,
    BatteryPresent: T.BOOLEAN,
    Charging: T.BOOLEAN,
    Discharging: T.BOOLEAN,
    Spare1: ArrayType(T.BOOLEAN, 4),
    MaxCapacity: T.ULONG,
    RemainingCapacity: T.ULONG,
    Rate: T.ULONG,
    EstimatedTime: T.ULONG,
    DefaultAlert1: T.ULONG,
    DefaultAlert2: T.ULONG
}));};
T.SYSTEM_POWER_CAPABILITIES = function() {return Struct('', {
    PowerButtonPresent: T.BOOLEAN,
    SleepButtonPresent: T.BOOLEAN,
    LidPresent: T.BOOLEAN,
    SystemS1: T.BOOLEAN,
    SystemS2: T.BOOLEAN,
    SystemS3: T.BOOLEAN,
    SystemS4: T.BOOLEAN,
    SystemS5: T.BOOLEAN,
    HiberFilePresent: T.BOOLEAN,
    FullWake: T.BOOLEAN,
    VideoDimPresent: T.BOOLEAN,
    ApmPresent: T.BOOLEAN,
    UpsPresent: T.BOOLEAN,
    ThermalControl: T.BOOLEAN,
    ProcessorThrottle: T.BOOLEAN,
    ProcessorMinThrottle: T.UCHAR,
    ProcessorMaxThrottle: T.UCHAR,
    spare2: ArrayType(T.UCHAR, 4),
    DiskSpinDown: T.BOOLEAN,
    spare3: ArrayType(T.UCHAR, 8),
    SystemBatteriesPresent: T.BOOLEAN,
    BatteriesAreShortTerm: T.BOOLEAN,
    BatteryScale: ArrayType(T.BATTERY_REPORTING_SCALE, 3),
    AcOnLineWake: T.SYSTEM_POWER_STATE,
    SoftLidWake: T.SYSTEM_POWER_STATE,
    RtcWake: T.SYSTEM_POWER_STATE,
    MinDeviceWakeState: T.SYSTEM_POWER_STATE,
    DefaultLowLatencyWake: T.SYSTEM_POWER_STATE
});};
T.PSYSTEM_POWER_CAPABILITIES = function() {return Pointer(Struct('', {
    PowerButtonPresent: T.BOOLEAN,
    SleepButtonPresent: T.BOOLEAN,
    LidPresent: T.BOOLEAN,
    SystemS1: T.BOOLEAN,
    SystemS2: T.BOOLEAN,
    SystemS3: T.BOOLEAN,
    SystemS4: T.BOOLEAN,
    SystemS5: T.BOOLEAN,
    HiberFilePresent: T.BOOLEAN,
    FullWake: T.BOOLEAN,
    VideoDimPresent: T.BOOLEAN,
    ApmPresent: T.BOOLEAN,
    UpsPresent: T.BOOLEAN,
    ThermalControl: T.BOOLEAN,
    ProcessorThrottle: T.BOOLEAN,
    ProcessorMinThrottle: T.UCHAR,
    ProcessorMaxThrottle: T.UCHAR,
    spare2: ArrayType(T.UCHAR, 4),
    DiskSpinDown: T.BOOLEAN,
    spare3: ArrayType(T.UCHAR, 8),
    SystemBatteriesPresent: T.BOOLEAN,
    BatteriesAreShortTerm: T.BOOLEAN,
    BatteryScale: ArrayType(T.BATTERY_REPORTING_SCALE, 3),
    AcOnLineWake: T.SYSTEM_POWER_STATE,
    SoftLidWake: T.SYSTEM_POWER_STATE,
    RtcWake: T.SYSTEM_POWER_STATE,
    MinDeviceWakeState: T.SYSTEM_POWER_STATE,
    DefaultLowLatencyWake: T.SYSTEM_POWER_STATE
}));};
T.SYSTEM_POWER_INFORMATION = function() {return Struct('_SYSTEM_POWER_INFORMATION', {
    MaxIdlenessAllowed: T.ULONG,
    Idleness: T.ULONG,
    TimeRemaining: T.ULONG,
    CoolingMode: T.UCHAR
});};
T.PSYSTEM_POWER_INFORMATION = function() {return Pointer(Struct('_SYSTEM_POWER_INFORMATION', {
    MaxIdlenessAllowed: T.ULONG,
    Idleness: T.ULONG,
    TimeRemaining: T.ULONG,
    CoolingMode: T.UCHAR
}));};
T.SYSTEM_POWER_LEVEL = function() {return Struct('_SYSTEM_POWER_LEVEL', {
    Enable: T.BOOLEAN,
    Spare: ArrayType(T.UCHAR, 3),
    BatteryLevel: T.ULONG,
    PowerPolicy: T.POWER_ACTION_POLICY,
    MinSystemState: T.SYSTEM_POWER_STATE
});};
T.PSYSTEM_POWER_LEVEL = function() {return Pointer(Struct('_SYSTEM_POWER_LEVEL', {
    Enable: T.BOOLEAN,
    Spare: ArrayType(T.UCHAR, 3),
    BatteryLevel: T.ULONG,
    PowerPolicy: T.POWER_ACTION_POLICY,
    MinSystemState: T.SYSTEM_POWER_STATE
}));};
T.SYSTEM_POWER_POLICY = function() {return Struct('_SYSTEM_POWER_POLICY', {
    Revision: T.ULONG,
    PowerButton: T.POWER_ACTION_POLICY,
    SleepButton: T.POWER_ACTION_POLICY,
    LidClose: T.POWER_ACTION_POLICY,
    LidOpenWake: T.SYSTEM_POWER_STATE,
    Reserved: T.ULONG,
    Idle: T.POWER_ACTION_POLICY,
    IdleTimeout: T.ULONG,
    IdleSensitivity: T.UCHAR,
    DynamicThrottle: T.UCHAR,
    Spare2: ArrayType(T.UCHAR, 2),
    MinSleep: T.SYSTEM_POWER_STATE,
    MaxSleep: T.SYSTEM_POWER_STATE,
    ReducedLatencySleep: T.SYSTEM_POWER_STATE,
    WinLogonFlags: T.ULONG,
    Spare3: T.ULONG,
    DozeS4Timeout: T.ULONG,
    BroadcastCapacityResolution: T.ULONG,
    DischargePolicy: ArrayType(T.SYSTEM_POWER_LEVEL, 4),
    VideoTimeout: T.ULONG,
    VideoDimDisplay: T.BOOLEAN,
    VideoReserved: ArrayType(T.ULONG, 3),
    SpindownTimeout: T.ULONG,
    OptimizeForPower: T.BOOLEAN,
    FanThrottleTolerance: T.UCHAR,
    ForcedThrottle: T.UCHAR,
    MinThrottle: T.UCHAR,
    OverThrottled: T.POWER_ACTION_POLICY
});};
T.PSYSTEM_POWER_POLICY = function() {return Pointer(Struct('_SYSTEM_POWER_POLICY', {
    Revision: T.ULONG,
    PowerButton: T.POWER_ACTION_POLICY,
    SleepButton: T.POWER_ACTION_POLICY,
    LidClose: T.POWER_ACTION_POLICY,
    LidOpenWake: T.SYSTEM_POWER_STATE,
    Reserved: T.ULONG,
    Idle: T.POWER_ACTION_POLICY,
    IdleTimeout: T.ULONG,
    IdleSensitivity: T.UCHAR,
    DynamicThrottle: T.UCHAR,
    Spare2: ArrayType(T.UCHAR, 2),
    MinSleep: T.SYSTEM_POWER_STATE,
    MaxSleep: T.SYSTEM_POWER_STATE,
    ReducedLatencySleep: T.SYSTEM_POWER_STATE,
    WinLogonFlags: T.ULONG,
    Spare3: T.ULONG,
    DozeS4Timeout: T.ULONG,
    BroadcastCapacityResolution: T.ULONG,
    DischargePolicy: ArrayType(T.SYSTEM_POWER_LEVEL, 4),
    VideoTimeout: T.ULONG,
    VideoDimDisplay: T.BOOLEAN,
    VideoReserved: ArrayType(T.ULONG, 3),
    SpindownTimeout: T.ULONG,
    OptimizeForPower: T.BOOLEAN,
    FanThrottleTolerance: T.UCHAR,
    ForcedThrottle: T.UCHAR,
    MinThrottle: T.UCHAR,
    OverThrottled: T.POWER_ACTION_POLICY
}));};
T.FILE_SEGMENT_ELEMENT = function() {return Union('_FILE_SEGMENT_ELEMENT', {
    Buffer: T.PVOID64,
    Alignment: T.ULONGLONG
});};
T.PFILE_SEGMENT_ELEMENT = function() {return Pointer(Union('_FILE_SEGMENT_ELEMENT', {
    Buffer: T.PVOID64,
    Alignment: T.ULONGLONG
}));};
T.FILE_NOTIFY_INFORMATION = function() {return Struct('_FILE_NOTIFY_INFORMATION', {
    NextEntryOffset: T.DWORD,
    Action: T.DWORD,
    FileNameLength: T.DWORD,
    FileName: ArrayType(T.WCHAR, 1)
});};
T.PFILE_NOTIFY_INFORMATION = function() {return Pointer(Struct('_FILE_NOTIFY_INFORMATION', {
    NextEntryOffset: T.DWORD,
    Action: T.DWORD,
    FileNameLength: T.DWORD,
    FileName: ArrayType(T.WCHAR, 1)
}));};
T.TAPE_CREATE_PARTITION = function() {return Struct('_TAPE_CREATE_PARTITION', {
    Method: T.DWORD,
    Count: T.DWORD,
    Size: T.DWORD
});};
T.PTAPE_CREATE_PARTITION = function() {return Pointer(Struct('_TAPE_CREATE_PARTITION', {
    Method: T.DWORD,
    Count: T.DWORD,
    Size: T.DWORD
}));};
T.TAPE_ERASE = function() {return Struct('_TAPE_ERASE', {
    Type: T.DWORD,
    Immediate: T.BOOLEAN
});};
T.PTAPE_ERASE = function() {return Pointer(Struct('_TAPE_ERASE', {
    Type: T.DWORD,
    Immediate: T.BOOLEAN
}));};
T.TAPE_PREPARE = function() {return Struct('_TAPE_PREPARE', {
    Operation: T.DWORD,
    Immediate: T.BOOLEAN
});};
T.PTAPE_PREPARE = function() {return Pointer(Struct('_TAPE_PREPARE', {
    Operation: T.DWORD,
    Immediate: T.BOOLEAN
}));};
T.TAPE_SET_DRIVE_PARAMETERS = function() {return Struct('_TAPE_SET_DRIVE_PARAMETERS', {
    ECC: T.BOOLEAN,
    Compression: T.BOOLEAN,
    DataPadding: T.BOOLEAN,
    ReportSetmarks: T.BOOLEAN,
    EOTWarningZoneSize: T.ULONG
});};
T.PTAPE_SET_DRIVE_PARAMETERS = function() {return Pointer(Struct('_TAPE_SET_DRIVE_PARAMETERS', {
    ECC: T.BOOLEAN,
    Compression: T.BOOLEAN,
    DataPadding: T.BOOLEAN,
    ReportSetmarks: T.BOOLEAN,
    EOTWarningZoneSize: T.ULONG
}));};
T.TAPE_SET_MEDIA_PARAMETERS = function() {return Struct('_TAPE_SET_MEDIA_PARAMETERS', {
    BlockSize: T.ULONG
});};
T.PTAPE_SET_MEDIA_PARAMETERS = function() {return Pointer(Struct('_TAPE_SET_MEDIA_PARAMETERS', {
    BlockSize: T.ULONG
}));};
T.TAPE_WRITE_MARKS = function() {return Struct('_TAPE_WRITE_MARKS', {
    Type: T.DWORD,
    Count: T.DWORD,
    Immediate: T.BOOLEAN
});};
T.PTAPE_WRITE_MARKS = function() {return Pointer(Struct('_TAPE_WRITE_MARKS', {
    Type: T.DWORD,
    Count: T.DWORD,
    Immediate: T.BOOLEAN
}));};
T.TAPE_GET_POSITION = function() {return Struct('_TAPE_GET_POSITION', {
    Type: T.ULONG,
    Partition: T.ULONG,
    OffsetLow: T.ULONG,
    OffsetHigh: T.ULONG
});};
T.PTAPE_GET_POSITION = function() {return Pointer(Struct('_TAPE_GET_POSITION', {
    Type: T.ULONG,
    Partition: T.ULONG,
    OffsetLow: T.ULONG,
    OffsetHigh: T.ULONG
}));};
T.TAPE_SET_POSITION = function() {return Struct('_TAPE_SET_POSITION', {
    Method: T.ULONG,
    Partition: T.ULONG,
    Offset: T.LARGE_INTEGER,
    Immediate: T.BOOLEAN
});};
T.PTAPE_SET_POSITION = function() {return Pointer(Struct('_TAPE_SET_POSITION', {
    Method: T.ULONG,
    Partition: T.ULONG,
    Offset: T.LARGE_INTEGER,
    Immediate: T.BOOLEAN
}));};
T.TAPE_GET_DRIVE_PARAMETERS = function() {return Struct('_TAPE_GET_DRIVE_PARAMETERS', {
    ECC: T.BOOLEAN,
    Compression: T.BOOLEAN,
    DataPadding: T.BOOLEAN,
    ReportSetmarks: T.BOOLEAN,
    DefaultBlockSize: T.DWORD,
    MaximumBlockSize: T.DWORD,
    MinimumBlockSize: T.DWORD,
    MaximumPartitionCount: T.DWORD,
    FeaturesLow: T.DWORD,
    FeaturesHigh: T.DWORD,
    EOTWarningZoneSize: T.DWORD
});};
T.PTAPE_GET_DRIVE_PARAMETERS = function() {return Pointer(Struct('_TAPE_GET_DRIVE_PARAMETERS', {
    ECC: T.BOOLEAN,
    Compression: T.BOOLEAN,
    DataPadding: T.BOOLEAN,
    ReportSetmarks: T.BOOLEAN,
    DefaultBlockSize: T.DWORD,
    MaximumBlockSize: T.DWORD,
    MinimumBlockSize: T.DWORD,
    MaximumPartitionCount: T.DWORD,
    FeaturesLow: T.DWORD,
    FeaturesHigh: T.DWORD,
    EOTWarningZoneSize: T.DWORD
}));};
T.TAPE_GET_MEDIA_PARAMETERS = function() {return Struct('_TAPE_GET_MEDIA_PARAMETERS', {
    Capacity: T.LARGE_INTEGER,
    Remaining: T.LARGE_INTEGER,
    BlockSize: T.DWORD,
    PartitionCount: T.DWORD,
    WriteProtected: T.BOOLEAN
});};
T.PTAPE_GET_MEDIA_PARAMETERS = function() {return Pointer(Struct('_TAPE_GET_MEDIA_PARAMETERS', {
    Capacity: T.LARGE_INTEGER,
    Remaining: T.LARGE_INTEGER,
    BlockSize: T.DWORD,
    PartitionCount: T.DWORD,
    WriteProtected: T.BOOLEAN
}));};
T.EVENTLOGRECORD = function() {return Struct('_EVENTLOGRECORD', {
    Length: T.DWORD,
    Reserved: T.DWORD,
    RecordNumber: T.DWORD,
    TimeGenerated: T.DWORD,
    TimeWritten: T.DWORD,
    EventID: T.DWORD,
    EventType: T.WORD,
    NumStrings: T.WORD,
    EventCategory: T.WORD,
    ReservedFlags: T.WORD,
    ClosingRecordNumber: T.DWORD,
    StringOffset: T.DWORD,
    UserSidLength: T.DWORD,
    UserSidOffset: T.DWORD,
    DataLength: T.DWORD,
    DataOffset: T.DWORD
});};
T.PEVENTLOGRECORD = function() {return Pointer(Struct('_EVENTLOGRECORD', {
    Length: T.DWORD,
    Reserved: T.DWORD,
    RecordNumber: T.DWORD,
    TimeGenerated: T.DWORD,
    TimeWritten: T.DWORD,
    EventID: T.DWORD,
    EventType: T.WORD,
    NumStrings: T.WORD,
    EventCategory: T.WORD,
    ReservedFlags: T.WORD,
    ClosingRecordNumber: T.DWORD,
    StringOffset: T.DWORD,
    UserSidLength: T.DWORD,
    UserSidOffset: T.DWORD,
    DataLength: T.DWORD,
    DataOffset: T.DWORD
}));};
T.SERVICE_NODE_TYPE = function() {return Enum('RecognizerType', {
    DriverType: 1,
    FileSystemType: 2,
    Win32ServiceOwnProcess: 16,
    Win32ServiceShareProcess: 32,
    AdapterType: 4,
    RecognizerType: 8
});};
T.SERVICE_LOAD_TYPE = function() {return Enum('DisableLoad', {
    BootLoad: 0,
    SystemLoad: 1,
    AutoLoad: 2,
    DemandLoad: 3,
    DisableLoad: 4
});};
T.SERVICE_ERROR_TYPE = function() {return Enum('CriticalError', {
    IgnoreError: 0,
    NormalError: 1,
    SevereError: 2,
    CriticalError: 3
});};
T.OBJECT_TYPE_LIST = function() {return Struct('_OBJECT_TYPE_LIST', {
    Level: T.WORD,
    Sbz: T.WORD,
    ObjectType: Pointer(T.GUID)
});};
T.POBJECT_TYPE_LIST = function() {return Pointer(Struct('_OBJECT_TYPE_LIST', {
    Level: T.WORD,
    Sbz: T.WORD,
    ObjectType: Pointer(T.GUID)
}));};
T.RTL_CRITICAL_SECTION_DEBUG = function() {return Struct('_RTL_CRITICAL_SECTION_DEBUG', {
    Type: T.WORD,
    CreatorBackTraceIndex: T.WORD,
    CriticalSection: Pointer(Struct('_RTL_CRITICAL_SECTION', null)),
    ProcessLocksList: T.LIST_ENTRY,
    EntryCount: T.DWORD,
    ContentionCount: T.DWORD,
    Spare: ArrayType(T.DWORD, 2)
});};
T.PRTL_CRITICAL_SECTION_DEBUG = function() {return Pointer(Struct('_RTL_CRITICAL_SECTION_DEBUG', {
    Type: T.WORD,
    CreatorBackTraceIndex: T.WORD,
    CriticalSection: Pointer(Struct('_RTL_CRITICAL_SECTION', null)),
    ProcessLocksList: T.LIST_ENTRY,
    EntryCount: T.DWORD,
    ContentionCount: T.DWORD,
    Spare: ArrayType(T.DWORD, 2)
}));};
T.RTL_RESOURCE_DEBUG = function() {return Struct('_RTL_CRITICAL_SECTION_DEBUG', {
    Type: T.WORD,
    CreatorBackTraceIndex: T.WORD,
    CriticalSection: Pointer(Struct('_RTL_CRITICAL_SECTION', null)),
    ProcessLocksList: T.LIST_ENTRY,
    EntryCount: T.DWORD,
    ContentionCount: T.DWORD,
    Spare: ArrayType(T.DWORD, 2)
});};
T.PRTL_RESOURCE_DEBUG = function() {return Pointer(Struct('_RTL_CRITICAL_SECTION_DEBUG', {
    Type: T.WORD,
    CreatorBackTraceIndex: T.WORD,
    CriticalSection: Pointer(Struct('_RTL_CRITICAL_SECTION', null)),
    ProcessLocksList: T.LIST_ENTRY,
    EntryCount: T.DWORD,
    ContentionCount: T.DWORD,
    Spare: ArrayType(T.DWORD, 2)
}));};
T.RTL_CRITICAL_SECTION = function() {return Struct('_RTL_CRITICAL_SECTION', {
    DebugInfo: T.PRTL_CRITICAL_SECTION_DEBUG,
    LockCount: T.LONG,
    RecursionCount: T.LONG,
    OwningThread: T.HANDLE,
    LockSemaphore: T.HANDLE,
    SpinCount: T.ULONG_PTR
});};
T.PRTL_CRITICAL_SECTION = function() {return Pointer(Struct('_RTL_CRITICAL_SECTION', {
    DebugInfo: T.PRTL_CRITICAL_SECTION_DEBUG,
    LockCount: T.LONG,
    RecursionCount: T.LONG,
    OwningThread: T.HANDLE,
    LockSemaphore: T.HANDLE,
    SpinCount: T.ULONG_PTR
}));};
T.WAITORTIMERCALLBACKFUNC = function() {return Pointer(Fn(null, [[T.PVOID], [T.BOOLEAN]]), [['stdcall']]);};
T.PFLS_CALLBACK_FUNCTION = function() {return Pointer(Fn(null, [[T.PVOID]]), [['stdcall']]);};
T.IO_COUNTERS = function() {return Struct('_IO_COUNTERS', {
    ReadOperationCount: T.ULONGLONG,
    WriteOperationCount: T.ULONGLONG,
    OtherOperationCount: T.ULONGLONG,
    ReadTransferCount: T.ULONGLONG,
    WriteTransferCount: T.ULONGLONG,
    OtherTransferCount: T.ULONGLONG
});};
T.PIO_COUNTERS = function() {return Pointer(Struct('_IO_COUNTERS', {
    ReadOperationCount: T.ULONGLONG,
    WriteOperationCount: T.ULONGLONG,
    OtherOperationCount: T.ULONGLONG,
    ReadTransferCount: T.ULONGLONG,
    WriteTransferCount: T.ULONGLONG,
    OtherTransferCount: T.ULONGLONG
}));};
T.OSVERSIONINFOA = function() {return Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.CHAR, 128)
});};
T.POSVERSIONINFOA = function() {return Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.CHAR, 128)
}));};
T.LPOSVERSIONINFOA = function() {return Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.CHAR, 128)
}));};
T.OSVERSIONINFOW = function() {return Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128)
});};
T.POSVERSIONINFOW = function() {return Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128)
}));};
T.LPOSVERSIONINFOW = function() {return Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128)
}));};
T.RTL_OSVERSIONINFOW = function() {return Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128)
});};
T.PRTL_OSVERSIONINFOW = function() {return Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128)
}));};
T.OSVERSIONINFO = function() {return T.OSVERSIONINFOA;};
T.POSVERSIONINFO = function() {return T.POSVERSIONINFOA;};
T.LPOSVERSIONINFO = function() {return T.LPOSVERSIONINFOA;};
T.OSVERSIONINFOEXA = function() {return Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.CHAR, 128),
    wServicePackMajor: T.WORD,
    wServicePackMinor: T.WORD,
    wSuiteMask: T.WORD,
    wProductType: T.BYTE,
    wReserved: T.BYTE
});};
T.POSVERSIONINFOEXA = function() {return Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.CHAR, 128),
    wServicePackMajor: T.WORD,
    wServicePackMinor: T.WORD,
    wSuiteMask: T.WORD,
    wProductType: T.BYTE,
    wReserved: T.BYTE
}));};
T.LPOSVERSIONINFOEXA = function() {return Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.CHAR, 128),
    wServicePackMajor: T.WORD,
    wServicePackMinor: T.WORD,
    wSuiteMask: T.WORD,
    wProductType: T.BYTE,
    wReserved: T.BYTE
}));};
T.OSVERSIONINFOEXW = function() {return Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128),
    wServicePackMajor: T.WORD,
    wServicePackMinor: T.WORD,
    wSuiteMask: T.WORD,
    wProductType: T.BYTE,
    wReserved: T.BYTE
});};
T.POSVERSIONINFOEXW = function() {return Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128),
    wServicePackMajor: T.WORD,
    wServicePackMinor: T.WORD,
    wSuiteMask: T.WORD,
    wProductType: T.BYTE,
    wReserved: T.BYTE
}));};
T.LPOSVERSIONINFOEXW = function() {return Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128),
    wServicePackMajor: T.WORD,
    wServicePackMinor: T.WORD,
    wSuiteMask: T.WORD,
    wProductType: T.BYTE,
    wReserved: T.BYTE
}));};
T.RTL_OSVERSIONINFOEXW = function() {return Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128),
    wServicePackMajor: T.WORD,
    wServicePackMinor: T.WORD,
    wSuiteMask: T.WORD,
    wProductType: T.BYTE,
    wReserved: T.BYTE
});};
T.PRTL_OSVERSIONINFOEXW = function() {return Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128),
    wServicePackMajor: T.WORD,
    wServicePackMinor: T.WORD,
    wSuiteMask: T.WORD,
    wProductType: T.BYTE,
    wReserved: T.BYTE
}));};
T.OSVERSIONINFOEX = function() {return T.OSVERSIONINFOEXA;};
T.POSVERSIONINFOEX = function() {return T.POSVERSIONINFOEXA;};
T.LPOSVERSIONINFOEX = function() {return T.LPOSVERSIONINFOEXA;};
T.ACTIVATION_CONTEXT_DETAILED_INFORMATION = function() {return Struct('_ACTIVATION_CONTEXT_DETAILED_INFORMATION', {
    dwFlags: T.DWORD,
    ulFormatVersion: T.DWORD,
    ulAssemblyCount: T.DWORD,
    ulRootManifestPathType: T.DWORD,
    ulRootManifestPathChars: T.DWORD,
    ulRootConfigurationPathType: T.DWORD,
    ulRootConfigurationPathChars: T.DWORD,
    ulAppDirPathType: T.DWORD,
    ulAppDirPathChars: T.DWORD,
    lpRootManifestPath: T.PCWSTR,
    lpRootConfigurationPath: T.PCWSTR,
    lpAppDirPath: T.PCWSTR
});};
T.PACTIVATION_CONTEXT_DETAILED_INFORMATION = function() {return Pointer(Struct('_ACTIVATION_CONTEXT_DETAILED_INFORMATION', {
    dwFlags: T.DWORD,
    ulFormatVersion: T.DWORD,
    ulAssemblyCount: T.DWORD,
    ulRootManifestPathType: T.DWORD,
    ulRootManifestPathChars: T.DWORD,
    ulRootConfigurationPathType: T.DWORD,
    ulRootConfigurationPathChars: T.DWORD,
    ulAppDirPathType: T.DWORD,
    ulAppDirPathChars: T.DWORD,
    lpRootManifestPath: T.PCWSTR,
    lpRootConfigurationPath: T.PCWSTR,
    lpAppDirPath: T.PCWSTR
}));};
T.ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = function() {return Struct('_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION', {
    ulFlags: T.DWORD,
    ulEncodedAssemblyIdentityLength: T.DWORD,
    ulManifestPathType: T.DWORD,
    ulManifestPathLength: T.DWORD,
    liManifestLastWriteTime: T.LARGE_INTEGER,
    ulPolicyPathType: T.DWORD,
    ulPolicyPathLength: T.DWORD,
    liPolicyLastWriteTime: T.LARGE_INTEGER,
    ulMetadataSatelliteRosterIndex: T.DWORD,
    ulManifestVersionMajor: T.DWORD,
    ulManifestVersionMinor: T.DWORD,
    ulPolicyVersionMajor: T.DWORD,
    ulPolicyVersionMinor: T.DWORD,
    ulAssemblyDirectoryNameLength: T.DWORD,
    lpAssemblyEncodedAssemblyIdentity: T.PCWSTR,
    lpAssemblyManifestPath: T.PCWSTR,
    lpAssemblyPolicyPath: T.PCWSTR,
    lpAssemblyDirectoryName: T.PCWSTR,
    ulFileCount: T.DWORD
});};
T.PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = function() {return Pointer(Struct('_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION', {
    ulFlags: T.DWORD,
    ulEncodedAssemblyIdentityLength: T.DWORD,
    ulManifestPathType: T.DWORD,
    ulManifestPathLength: T.DWORD,
    liManifestLastWriteTime: T.LARGE_INTEGER,
    ulPolicyPathType: T.DWORD,
    ulPolicyPathLength: T.DWORD,
    liPolicyLastWriteTime: T.LARGE_INTEGER,
    ulMetadataSatelliteRosterIndex: T.DWORD,
    ulManifestVersionMajor: T.DWORD,
    ulManifestVersionMinor: T.DWORD,
    ulPolicyVersionMajor: T.DWORD,
    ulPolicyVersionMinor: T.DWORD,
    ulAssemblyDirectoryNameLength: T.DWORD,
    lpAssemblyEncodedAssemblyIdentity: T.PCWSTR,
    lpAssemblyManifestPath: T.PCWSTR,
    lpAssemblyPolicyPath: T.PCWSTR,
    lpAssemblyDirectoryName: T.PCWSTR,
    ulFileCount: T.DWORD
}));};
T.ACTIVATION_CONTEXT_QUERY_INDEX = function() {return Struct('_ACTIVATION_CONTEXT_QUERY_INDEX', {
    ulAssemblyIndex: T.DWORD,
    ulFileIndexInAssembly: T.DWORD
});};
T.PACTIVATION_CONTEXT_QUERY_INDEX = function() {return Pointer(Struct('_ACTIVATION_CONTEXT_QUERY_INDEX', {
    ulAssemblyIndex: T.DWORD,
    ulFileIndexInAssembly: T.DWORD
}));};
T.PCACTIVATION_CONTEXT_QUERY_INDEX = function() {return Pointer(Struct('_ACTIVATION_CONTEXT_QUERY_INDEX', null), [['const']]);};
T.ASSEMBLY_FILE_DETAILED_INFORMATION = function() {return Struct('_ASSEMBLY_FILE_DETAILED_INFORMATION', {
    ulFlags: T.DWORD,
    ulFilenameLength: T.DWORD,
    ulPathLength: T.DWORD,
    lpFileName: T.PCWSTR,
    lpFilePath: T.PCWSTR
});};
T.PASSEMBLY_FILE_DETAILED_INFORMATION = function() {return Pointer(Struct('_ASSEMBLY_FILE_DETAILED_INFORMATION', {
    ulFlags: T.DWORD,
    ulFilenameLength: T.DWORD,
    ulPathLength: T.DWORD,
    lpFileName: T.PCWSTR,
    lpFilePath: T.PCWSTR
}));};
T.PCASSEMBLY_FILE_DETAILED_INFORMATION = function() {return Pointer(T.ASSEMBLY_FILE_DETAILED_INFORMATION, [['const']]);};
T.ACTIVATION_CONTEXT_INFO_CLASS = function() {return Enum('FileInformationInAssemblyOfAssemblyInActivationContxt', {
    ActivationContextBasicInformation: 1,
    ActivationContextDetailedInformation: 2,
    AssemblyDetailedInformationInActivationContext: 3,
    FileInformationInAssemblyOfAssemblyInActivationContext: 4,
    MaxActivationContextInfoClass: 5,
    AssemblyDetailedInformationInActivationContxt: 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt: 4
});};
T.JOBOBJECTINFOCLASS = function() {return Enum('MaxJobObjectInfoClass', {
    JobObjectBasicAccountingInformation: 1,
    JobObjectBasicLimitInformation: 2,
    JobObjectBasicProcessIdList: 3,
    JobObjectBasicUIRestrictions: 4,
    JobObjectSecurityLimitInformation: 5,
    JobObjectEndOfJobTimeInformation: 6,
    JobObjectAssociateCompletionPortInformation: 7,
    JobObjectBasicAndIoAccountingInformation: 8,
    JobObjectExtendedLimitInformation: 9,
    JobObjectJobSetInformation: 10,
    MaxJobObjectInfoClass: 11
});};
T.LOGICAL_PROCESSOR_RELATIONSHIP = function() {return Enum('RelationAll', {
    RelationProcessorCore: 0,
    RelationNumaNode: 1,
    RelationCache: 2,
    RelationProcessorPackage: 3,
    RelationGroup: 4,
    RelationAll: 65535
});};
T.PROCESSOR_CACHE_TYPE = function() {return Enum('CacheTrace', {
    CacheUnified: 0,
    CacheInstruction: 1,
    CacheData: 2,
    CacheTrace: 3
});};
T.PROCESSOR_GROUP_INFO = function() {return Struct('_PROCESSOR_GROUP_INFO', {
    MaximumProcessorCount: T.BYTE,
    ActiveProcessorCount: T.BYTE,
    Reserved: ArrayType(T.BYTE, 38),
    ActiveProcessorMask: T.KAFFINITY
});};
T.PPROCESSOR_GROUP_INFO = function() {return Pointer(Struct('_PROCESSOR_GROUP_INFO', {
    MaximumProcessorCount: T.BYTE,
    ActiveProcessorCount: T.BYTE,
    Reserved: ArrayType(T.BYTE, 38),
    ActiveProcessorMask: T.KAFFINITY
}));};
T.CACHE_DESCRIPTOR = function() {return Struct('_CACHE_DESCRIPTOR', {
    Level: T.BYTE,
    Associativity: T.BYTE,
    LineSize: T.WORD,
    Size: T.DWORD,
    Type: T.PROCESSOR_CACHE_TYPE
});};
T.PCACHE_DESCRIPTOR = function() {return Pointer(Struct('_CACHE_DESCRIPTOR', {
    Level: T.BYTE,
    Associativity: T.BYTE,
    LineSize: T.WORD,
    Size: T.DWORD,
    Type: T.PROCESSOR_CACHE_TYPE
}));};
T.GROUP_AFFINITY = function() {return Struct('_GROUP_AFFINITY', {
    Mask: T.KAFFINITY,
    Group: T.WORD,
    Reserved: ArrayType(T.WORD, 3)
});};
T.PGROUP_AFFINITY = function() {return Pointer(Struct('_GROUP_AFFINITY', {
    Mask: T.KAFFINITY,
    Group: T.WORD,
    Reserved: ArrayType(T.WORD, 3)
}));};
T.PROCESSOR_RELATIONSHIP = function() {return Struct('_PROCESSOR_RELATIONSHIP', {
    Flags: T.BYTE,
    Reserved: ArrayType(T.BYTE, 21),
    GroupCount: T.WORD,
    GroupMask: ArrayType(T.GROUP_AFFINITY, 1)
});};
T.PPROCESSOR_RELATIONSHIP = function() {return Pointer(Struct('_PROCESSOR_RELATIONSHIP', {
    Flags: T.BYTE,
    Reserved: ArrayType(T.BYTE, 21),
    GroupCount: T.WORD,
    GroupMask: ArrayType(T.GROUP_AFFINITY, 1)
}));};
T.NUMA_NODE_RELATIONSHIP = function() {return Struct('_NUMA_NODE_RELATIONSHIP', {
    NodeNumber: T.DWORD,
    Reserved: ArrayType(T.BYTE, 20),
    GroupMask: T.GROUP_AFFINITY
});};
T.PNUMA_NODE_RELATIONSHIP = function() {return Pointer(Struct('_NUMA_NODE_RELATIONSHIP', {
    NodeNumber: T.DWORD,
    Reserved: ArrayType(T.BYTE, 20),
    GroupMask: T.GROUP_AFFINITY
}));};
T.CACHE_RELATIONSHIP = function() {return Struct('_CACHE_RELATIONSHIP', {
    Level: T.BYTE,
    Associativity: T.BYTE,
    LineSize: T.WORD,
    Type: T.PROCESSOR_CACHE_TYPE,
    Reserved: ArrayType(T.BYTE, 20),
    GroupMask: T.GROUP_AFFINITY
});};
T.PCACHE_RELATIONSHIP = function() {return Pointer(Struct('_CACHE_RELATIONSHIP', {
    Level: T.BYTE,
    Associativity: T.BYTE,
    LineSize: T.WORD,
    Type: T.PROCESSOR_CACHE_TYPE,
    Reserved: ArrayType(T.BYTE, 20),
    GroupMask: T.GROUP_AFFINITY
}));};
T.GROUP_RELATIONSHIP = function() {return Struct('_GROUP_RELATIONSHIP', {
    MaximumGroupCount: T.WORD,
    ActiveGroupCount: T.WORD,
    Reserved: ArrayType(T.BYTE, 20),
    GroupInfo: ArrayType(T.PROCESSOR_GROUP_INFO, 1)
});};
T.PGROUP_RELATIONSHIP = function() {return Pointer(Struct('_GROUP_RELATIONSHIP', {
    MaximumGroupCount: T.WORD,
    ActiveGroupCount: T.WORD,
    Reserved: ArrayType(T.BYTE, 20),
    GroupInfo: ArrayType(T.PROCESSOR_GROUP_INFO, 1)
}));};
T.SYSTEM_LOGICAL_PROCESSOR_INFORMATION = function() {return Struct('_SYSTEM_LOGICAL_PROCESSOR_INFORMATION', {
    ProcessorMask: T.ULONG_PTR,
    Relationship: T.LOGICAL_PROCESSOR_RELATIONSHIP,
    __unnamed0: Union('', {
        ProcessorCore: Struct('', {
            Flags: T.BYTE
        }),
        NumaNode: Struct('', {
            NodeNumber: T.DWORD
        }),
        Cache: T.CACHE_DESCRIPTOR,
        Reserved: ArrayType(T.ULONGLONG, 2)
    })
});};
T.PSYSTEM_LOGICAL_PROCESSOR_INFORMATION = function() {return Pointer(Struct('_SYSTEM_LOGICAL_PROCESSOR_INFORMATION', {
    ProcessorMask: T.ULONG_PTR,
    Relationship: T.LOGICAL_PROCESSOR_RELATIONSHIP,
    __unnamed0: Union('', {
        ProcessorCore: Struct('', {
            Flags: T.BYTE
        }),
        NumaNode: Struct('', {
            NodeNumber: T.DWORD
        }),
        Cache: T.CACHE_DESCRIPTOR,
        Reserved: ArrayType(T.ULONGLONG, 2)
    })
}));};
T.SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = function() {return Struct('_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX', {
    Relationship: T.LOGICAL_PROCESSOR_RELATIONSHIP,
    Size: T.DWORD,
    __unnamed0: Union('', {
        Processor: T.PROCESSOR_RELATIONSHIP,
        NumaNode: T.NUMA_NODE_RELATIONSHIP,
        Cache: T.CACHE_RELATIONSHIP,
        Group: T.GROUP_RELATIONSHIP
    })
});};
T.PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = function() {return Pointer(Struct('_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX', {
    Relationship: T.LOGICAL_PROCESSOR_RELATIONSHIP,
    Size: T.DWORD,
    __unnamed0: Union('', {
        Processor: T.PROCESSOR_RELATIONSHIP,
        NumaNode: T.NUMA_NODE_RELATIONSHIP,
        Cache: T.CACHE_RELATIONSHIP,
        Group: T.GROUP_RELATIONSHIP
    })
}));};
T.WPARAM = function() {return T.UINT_PTR;};
T.LPARAM = function() {return T.LONG_PTR;};
T.LRESULT = function() {return T.LONG_PTR;};
T.ATOM = function() {return T.WORD;};
T.COLORREF = function() {return T.DWORD;};
T.LPCOLORREF = function() {return Pointer(T.DWORD);};
T.HFILE = function() {return T.i32;};
T.HACCEL = function() {return Pointer(Struct('HACCEL__', {
    unused: T.i32
}));};
T.HBITMAP = function() {return Pointer(Struct('HBITMAP__', {
    unused: T.i32
}));};
T.HBRUSH = function() {return Pointer(Struct('HBRUSH__', {
    unused: T.i32
}));};
T.HCOLORSPACE = function() {return Pointer(Struct('HCOLORSPACE__', {
    unused: T.i32
}));};
T.HDC = function() {return Pointer(Struct('HDC__', {
    unused: T.i32
}));};
T.HDESK = function() {return Pointer(Struct('HDESK__', {
    unused: T.i32
}));};
T.HENHMETAFILE = function() {return Pointer(Struct('HENHMETAFILE__', {
    unused: T.i32
}));};
T.HFONT = function() {return Pointer(Struct('HFONT__', {
    unused: T.i32
}));};
T.HGLRC = function() {return Pointer(Struct('HGLRC__', {
    unused: T.i32
}));};
T.HHOOK = function() {return Pointer(Struct('HHOOK__', {
    unused: T.i32
}));};
T.HICON = function() {return Pointer(Struct('HICON__', {
    unused: T.i32
}));};
T.HINSTANCE = function() {return Pointer(Struct('HINSTANCE__', {
    unused: T.i32
}));};
T.HKEY = function() {return Pointer(Struct('HKEY__', {
    unused: T.i32
}));};
T.PHKEY = function() {return Pointer(T.HKEY);};
T.HKL = function() {return Pointer(Struct('HKL__', {
    unused: T.i32
}));};
T.HMENU = function() {return Pointer(Struct('HMENU__', {
    unused: T.i32
}));};
T.HMETAFILE = function() {return Pointer(Struct('HMETAFILE__', {
    unused: T.i32
}));};
T.HMONITOR = function() {return Pointer(Struct('HMONITOR__', {
    unused: T.i32
}));};
T.HPALETTE = function() {return Pointer(Struct('HPALETTE__', {
    unused: T.i32
}));};
T.HPEN = function() {return Pointer(Struct('HPEN__', {
    unused: T.i32
}));};
T.HRGN = function() {return Pointer(Struct('HRGN__', {
    unused: T.i32
}));};
T.HRSRC = function() {return Pointer(Struct('HRSRC__', {
    unused: T.i32
}));};
T.HTASK = function() {return Pointer(Struct('HTASK__', {
    unused: T.i32
}));};
T.HWINEVENTHOOK = function() {return Pointer(Struct('HWINEVENTHOOK__', {
    unused: T.i32
}));};
T.HWINSTA = function() {return Pointer(Struct('HWINSTA__', {
    unused: T.i32
}));};
T.HWND = function() {return Pointer(Struct('HWND__', {
    unused: T.i32
}));};
T.HMODULE = function() {return T.HINSTANCE;};
T.HGDIOBJ = function() {return T.HANDLE;};
T.HGLOBAL = function() {return T.HANDLE;};
T.HLOCAL = function() {return T.HANDLE;};
T.GLOBALHANDLE = function() {return T.HANDLE;};
T.LOCALHANDLE = function() {return T.HANDLE;};
T.HCURSOR = function() {return T.HICON;};
T.FARPROC = function() {return Pointer(Fn(T.INT_PTR, []), [['stdcall']]);};
T.NEARPROC = function() {return Pointer(Fn(T.INT_PTR, []), [['stdcall']]);};
T.PROC = function() {return Pointer(Fn(T.INT_PTR, []), [['stdcall']]);};
T.SIZE = function() {return Struct('tagSIZE', {
    cx: T.LONG,
    cy: T.LONG
});};
T.PSIZE = function() {return Pointer(Struct('tagSIZE', {
    cx: T.LONG,
    cy: T.LONG
}));};
T.LPSIZE = function() {return Pointer(Struct('tagSIZE', {
    cx: T.LONG,
    cy: T.LONG
}));};
T.SIZEL = function() {return T.SIZE;};
T.PSIZEL = function() {return Pointer(T.SIZE);};
T.LPSIZEL = function() {return Pointer(T.SIZE);};
T.POINT = function() {return Struct('tagPOINT', {
    x: T.LONG,
    y: T.LONG
});};
T.PPOINT = function() {return Pointer(Struct('tagPOINT', {
    x: T.LONG,
    y: T.LONG
}));};
T.LPPOINT = function() {return Pointer(Struct('tagPOINT', {
    x: T.LONG,
    y: T.LONG
}));};
T.POINTL = function() {return Struct('_POINTL', {
    x: T.LONG,
    y: T.LONG
});};
T.PPOINTL = function() {return Pointer(Struct('_POINTL', {
    x: T.LONG,
    y: T.LONG
}));};
T.POINTS = function() {return Struct('tagPOINTS', {
    x: T.SHORT,
    y: T.SHORT
});};
T.PPOINTS = function() {return Pointer(Struct('tagPOINTS', {
    x: T.SHORT,
    y: T.SHORT
}));};
T.LPPOINTS = function() {return Pointer(Struct('tagPOINTS', {
    x: T.SHORT,
    y: T.SHORT
}));};
T.FILETIME = function() {return Struct('_FILETIME', {
    dwLowDateTime: T.DWORD,
    dwHighDateTime: T.DWORD
});};
T.PFILETIME = function() {return Pointer(Struct('_FILETIME', {
    dwLowDateTime: T.DWORD,
    dwHighDateTime: T.DWORD
}));};
T.LPFILETIME = function() {return Pointer(Struct('_FILETIME', {
    dwLowDateTime: T.DWORD,
    dwHighDateTime: T.DWORD
}));};
T.RECT = function() {return Struct('tagRECT', {
    left: T.LONG,
    top: T.LONG,
    right: T.LONG,
    bottom: T.LONG
});};
T.PRECT = function() {return Pointer(Struct('tagRECT', {
    left: T.LONG,
    top: T.LONG,
    right: T.LONG,
    bottom: T.LONG
}));};
T.LPRECT = function() {return Pointer(Struct('tagRECT', {
    left: T.LONG,
    top: T.LONG,
    right: T.LONG,
    bottom: T.LONG
}));};
T.LPCRECT = function() {return Pointer(T.RECT, [['const']]);};
T.RECTL = function() {return Struct('_RECTL', {
    left: T.LONG,
    top: T.LONG,
    right: T.LONG,
    bottom: T.LONG
});};
T.PRECTL = function() {return Pointer(Struct('_RECTL', {
    left: T.LONG,
    top: T.LONG,
    right: T.LONG,
    bottom: T.LONG
}));};
T.LPRECTL = function() {return Pointer(Struct('_RECTL', {
    left: T.LONG,
    top: T.LONG,
    right: T.LONG,
    bottom: T.LONG
}));};
T.LPCRECTL = function() {return Pointer(T.RECTL, [['const']]);};
T.LPTHREAD_START_ROUTINE = function() {return Pointer(Fn(T.DWORD, [[T.LPVOID]]), [['stdcall']]);};
T.PFIBER_START_ROUTINE = function() {return Pointer(Fn(null, [[T.LPVOID, 'lpFiberParameter']]), [['stdcall']]);};
T.LPFIBER_START_ROUTINE = function() {return T.PFIBER_START_ROUTINE;};
T.CRITICAL_SECTION = function() {return T.RTL_CRITICAL_SECTION;};
T.PCRITICAL_SECTION = function() {return T.PRTL_CRITICAL_SECTION;};
T.LPCRITICAL_SECTION = function() {return T.PRTL_CRITICAL_SECTION;};
T.CRITICAL_SECTION_DEBUG = function() {return T.RTL_CRITICAL_SECTION_DEBUG;};
T.PCRITICAL_SECTION_DEBUG = function() {return T.PRTL_CRITICAL_SECTION_DEBUG;};
T.LPCRITICAL_SECTION_DEBUG = function() {return T.PRTL_CRITICAL_SECTION_DEBUG;};
T.WAITORTIMERCALLBACK = function() {return T.WAITORTIMERCALLBACKFUNC;};
T.EXCEPTION_DEBUG_INFO = function() {return Struct('_EXCEPTION_DEBUG_INFO', {
    ExceptionRecord: T.EXCEPTION_RECORD,
    dwFirstChance: T.DWORD
});};
T.CREATE_THREAD_DEBUG_INFO = function() {return Struct('_CREATE_THREAD_DEBUG_INFO', {
    hThread: T.HANDLE,
    lpThreadLocalBase: T.LPVOID,
    lpStartAddress: T.LPTHREAD_START_ROUTINE
});};
T.CREATE_PROCESS_DEBUG_INFO = function() {return Struct('_CREATE_PROCESS_DEBUG_INFO', {
    hFile: T.HANDLE,
    hProcess: T.HANDLE,
    hThread: T.HANDLE,
    lpBaseOfImage: T.LPVOID,
    dwDebugInfoFileOffset: T.DWORD,
    nDebugInfoSize: T.DWORD,
    lpThreadLocalBase: T.LPVOID,
    lpStartAddress: T.LPTHREAD_START_ROUTINE,
    lpImageName: T.LPVOID,
    fUnicode: T.WORD
});};
T.EXIT_THREAD_DEBUG_INFO = function() {return Struct('_EXIT_THREAD_DEBUG_INFO', {
    dwExitCode: T.DWORD
});};
T.EXIT_PROCESS_DEBUG_INFO = function() {return Struct('_EXIT_PROCESS_DEBUG_INFO', {
    dwExitCode: T.DWORD
});};
T.LOAD_DLL_DEBUG_INFO = function() {return Struct('_LOAD_DLL_DEBUG_INFO', {
    hFile: T.HANDLE,
    lpBaseOfDll: T.LPVOID,
    dwDebugInfoFileOffset: T.DWORD,
    nDebugInfoSize: T.DWORD,
    lpImageName: T.LPVOID,
    fUnicode: T.WORD
});};
T.UNLOAD_DLL_DEBUG_INFO = function() {return Struct('_UNLOAD_DLL_DEBUG_INFO', {
    lpBaseOfDll: T.LPVOID
});};
T.OUTPUT_DEBUG_STRING_INFO = function() {return Struct('_OUTPUT_DEBUG_STRING_INFO', {
    lpDebugStringData: T.LPSTR,
    fUnicode: T.WORD,
    nDebugStringLength: T.WORD
});};
T.RIP_INFO = function() {return Struct('_RIP_INFO', {
    dwError: T.DWORD,
    dwType: T.DWORD
});};
T.DEBUG_EVENT = function() {return Struct('_DEBUG_EVENT', {
    dwDebugEventCode: T.DWORD,
    dwProcessId: T.DWORD,
    dwThreadId: T.DWORD,
    u: Union('', {
        Exception: T.EXCEPTION_DEBUG_INFO,
        CreateThread: T.CREATE_THREAD_DEBUG_INFO,
        CreateProcessInfo: T.CREATE_PROCESS_DEBUG_INFO,
        ExitThread: T.EXIT_THREAD_DEBUG_INFO,
        ExitProcess: T.EXIT_PROCESS_DEBUG_INFO,
        LoadDll: T.LOAD_DLL_DEBUG_INFO,
        UnloadDll: T.UNLOAD_DLL_DEBUG_INFO,
        DebugString: T.OUTPUT_DEBUG_STRING_INFO,
        RipInfo: T.RIP_INFO
    })
});};
T.LPDEBUG_EVENT = function() {return Pointer(Struct('_DEBUG_EVENT', {
    dwDebugEventCode: T.DWORD,
    dwProcessId: T.DWORD,
    dwThreadId: T.DWORD,
    u: Union('', {
        Exception: T.EXCEPTION_DEBUG_INFO,
        CreateThread: T.CREATE_THREAD_DEBUG_INFO,
        CreateProcessInfo: T.CREATE_PROCESS_DEBUG_INFO,
        ExitThread: T.EXIT_THREAD_DEBUG_INFO,
        ExitProcess: T.EXIT_PROCESS_DEBUG_INFO,
        LoadDll: T.LOAD_DLL_DEBUG_INFO,
        UnloadDll: T.UNLOAD_DLL_DEBUG_INFO,
        DebugString: T.OUTPUT_DEBUG_STRING_INFO,
        RipInfo: T.RIP_INFO
    })
}));};
T.LPCONTEXT = function() {return T.PCONTEXT;};
T.LPEXCEPTION_RECORD = function() {return T.PEXCEPTION_RECORD;};
T.LPEXCEPTION_POINTERS = function() {return T.PEXCEPTION_POINTERS;};
T.PTOP_LEVEL_EXCEPTION_FILTER = function() {return Pointer(Fn(T.LONG, [[T.PEXCEPTION_POINTERS]]), [['stdcall']]);};
T.LPTOP_LEVEL_EXCEPTION_FILTER = function() {return T.PTOP_LEVEL_EXCEPTION_FILTER;};
T.OFSTRUCT = function() {return Struct('_OFSTRUCT', {
    cBytes: T.BYTE,
    fFixedDisk: T.BYTE,
    nErrCode: T.WORD,
    Reserved1: T.WORD,
    Reserved2: T.WORD,
    szPathName: ArrayType(T.CHAR, 128)
});};
T.POFSTRUCT = function() {return Pointer(Struct('_OFSTRUCT', {
    cBytes: T.BYTE,
    fFixedDisk: T.BYTE,
    nErrCode: T.WORD,
    Reserved1: T.WORD,
    Reserved2: T.WORD,
    szPathName: ArrayType(T.CHAR, 128)
}));};
T.LPOFSTRUCT = function() {return Pointer(Struct('_OFSTRUCT', {
    cBytes: T.BYTE,
    fFixedDisk: T.BYTE,
    nErrCode: T.WORD,
    Reserved1: T.WORD,
    Reserved2: T.WORD,
    szPathName: ArrayType(T.CHAR, 128)
}));};
T.SECURITY_ATTRIBUTES = function() {return Struct('_SECURITY_ATTRIBUTES', {
    nLength: T.DWORD,
    lpSecurityDescriptor: T.LPVOID,
    bInheritHandle: T.BOOL
});};
T.PSECURITY_ATTRIBUTES = function() {return Pointer(Struct('_SECURITY_ATTRIBUTES', {
    nLength: T.DWORD,
    lpSecurityDescriptor: T.LPVOID,
    bInheritHandle: T.BOOL
}));};
T.LPSECURITY_ATTRIBUTES = function() {return Pointer(Struct('_SECURITY_ATTRIBUTES', {
    nLength: T.DWORD,
    lpSecurityDescriptor: T.LPVOID,
    bInheritHandle: T.BOOL
}));};
T.WIN32_FIND_DATAA = function() {return Struct('_WIN32_FIND_DATAA', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    dwReserved0: T.DWORD,
    dwReserved1: T.DWORD,
    cFileName: ArrayType(T.CHAR, 260),
    cAlternateFileName: ArrayType(T.CHAR, 14)
});};
T.PWIN32_FIND_DATAA = function() {return Pointer(Struct('_WIN32_FIND_DATAA', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    dwReserved0: T.DWORD,
    dwReserved1: T.DWORD,
    cFileName: ArrayType(T.CHAR, 260),
    cAlternateFileName: ArrayType(T.CHAR, 14)
}));};
T.LPWIN32_FIND_DATAA = function() {return Pointer(Struct('_WIN32_FIND_DATAA', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    dwReserved0: T.DWORD,
    dwReserved1: T.DWORD,
    cFileName: ArrayType(T.CHAR, 260),
    cAlternateFileName: ArrayType(T.CHAR, 14)
}));};
T.WIN32_FIND_DATAW = function() {return Struct('_WIN32_FIND_DATAW', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    dwReserved0: T.DWORD,
    dwReserved1: T.DWORD,
    cFileName: ArrayType(T.WCHAR, 260),
    cAlternateFileName: ArrayType(T.WCHAR, 14)
});};
T.PWIN32_FIND_DATAW = function() {return Pointer(Struct('_WIN32_FIND_DATAW', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    dwReserved0: T.DWORD,
    dwReserved1: T.DWORD,
    cFileName: ArrayType(T.WCHAR, 260),
    cAlternateFileName: ArrayType(T.WCHAR, 14)
}));};
T.LPWIN32_FIND_DATAW = function() {return Pointer(Struct('_WIN32_FIND_DATAW', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    dwReserved0: T.DWORD,
    dwReserved1: T.DWORD,
    cFileName: ArrayType(T.WCHAR, 260),
    cAlternateFileName: ArrayType(T.WCHAR, 14)
}));};
T.WIN32_FIND_DATA = function() {return T.WIN32_FIND_DATAA;};
T.PWIN32_FIND_DATA = function() {return T.PWIN32_FIND_DATAA;};
T.LPWIN32_FIND_DATA = function() {return T.LPWIN32_FIND_DATAA;};
T.FINDEX_INFO_LEVELS = function() {return Enum('FindExInfoMaxInfoLevel', {
    FindExInfoStandard: 0,
    FindExInfoMaxInfoLevel: 1
});};
T.FINDEX_SEARCH_OPS = function() {return Enum('FindExSearchMaxSearchOp', {
    FindExSearchNameMatch: 0,
    FindExSearchLimitToDirectories: 1,
    FindExSearchLimitToDevices: 2,
    FindExSearchMaxSearchOp: 3
});};
T.PROCESS_HEAP_ENTRY = function() {return Struct('_PROCESS_HEAP_ENTRY', {
    lpData: T.LPVOID,
    cbData: T.DWORD,
    cbOverhead: T.BYTE,
    iRegionIndex: T.BYTE,
    wFlags: T.WORD,
    __unnamed0: Union('', {
        Block: Struct('', {
            hMem: T.HANDLE,
            dwReserved: ArrayType(T.DWORD, 3)
        }),
        Region: Struct('', {
            dwCommittedSize: T.DWORD,
            dwUnCommittedSize: T.DWORD,
            lpFirstBlock: T.LPVOID,
            lpLastBlock: T.LPVOID
        })
    })
});};
T.PPROCESS_HEAP_ENTRY = function() {return Pointer(Struct('_PROCESS_HEAP_ENTRY', {
    lpData: T.LPVOID,
    cbData: T.DWORD,
    cbOverhead: T.BYTE,
    iRegionIndex: T.BYTE,
    wFlags: T.WORD,
    __unnamed0: Union('', {
        Block: Struct('', {
            hMem: T.HANDLE,
            dwReserved: ArrayType(T.DWORD, 3)
        }),
        Region: Struct('', {
            dwCommittedSize: T.DWORD,
            dwUnCommittedSize: T.DWORD,
            lpFirstBlock: T.LPVOID,
            lpLastBlock: T.LPVOID
        })
    })
}));};
T.LPPROCESS_HEAP_ENTRY = function() {return Pointer(Struct('_PROCESS_HEAP_ENTRY', {
    lpData: T.LPVOID,
    cbData: T.DWORD,
    cbOverhead: T.BYTE,
    iRegionIndex: T.BYTE,
    wFlags: T.WORD,
    __unnamed0: Union('', {
        Block: Struct('', {
            hMem: T.HANDLE,
            dwReserved: ArrayType(T.DWORD, 3)
        }),
        Region: Struct('', {
            dwCommittedSize: T.DWORD,
            dwUnCommittedSize: T.DWORD,
            lpFirstBlock: T.LPVOID,
            lpLastBlock: T.LPVOID
        })
    })
}));};
T.MEMORYSTATUS = function() {return Struct('tagMEMORYSTATUS', {
    dwLength: T.DWORD,
    dwMemoryLoad: T.DWORD,
    dwTotalPhys: T.SIZE_T,
    dwAvailPhys: T.SIZE_T,
    dwTotalPageFile: T.SIZE_T,
    dwAvailPageFile: T.SIZE_T,
    dwTotalVirtual: T.SIZE_T,
    dwAvailVirtual: T.SIZE_T
});};
T.LPMEMORYSTATUS = function() {return Pointer(Struct('tagMEMORYSTATUS', {
    dwLength: T.DWORD,
    dwMemoryLoad: T.DWORD,
    dwTotalPhys: T.SIZE_T,
    dwAvailPhys: T.SIZE_T,
    dwTotalPageFile: T.SIZE_T,
    dwAvailPageFile: T.SIZE_T,
    dwTotalVirtual: T.SIZE_T,
    dwAvailVirtual: T.SIZE_T
}));};
T.MEMORYSTATUSEX = function() {return Struct('tagMEMORYSTATUSEX', {
    dwLength: T.DWORD,
    dwMemoryLoad: T.DWORD,
    ullTotalPhys: T.DWORDLONG,
    ullAvailPhys: T.DWORDLONG,
    ullTotalPageFile: T.DWORDLONG,
    ullAvailPageFile: T.DWORDLONG,
    ullTotalVirtual: T.DWORDLONG,
    ullAvailVirtual: T.DWORDLONG,
    ullAvailExtendedVirtual: T.DWORDLONG
});};
T.LPMEMORYSTATUSEX = function() {return Pointer(Struct('tagMEMORYSTATUSEX', {
    dwLength: T.DWORD,
    dwMemoryLoad: T.DWORD,
    ullTotalPhys: T.DWORDLONG,
    ullAvailPhys: T.DWORDLONG,
    ullTotalPageFile: T.DWORDLONG,
    ullAvailPageFile: T.DWORDLONG,
    ullTotalVirtual: T.DWORDLONG,
    ullAvailVirtual: T.DWORDLONG,
    ullAvailExtendedVirtual: T.DWORDLONG
}));};
T.MEMORY_RESOURCE_NOTIFICATION_TYPE = function() {return Enum('HighMemoryResourceNotification', {
    LowMemoryResourceNotification: 0,
    HighMemoryResourceNotification: 1
});};
T.SYSTEMTIME = function() {return Struct('_SYSTEMTIME', {
    wYear: T.WORD,
    wMonth: T.WORD,
    wDayOfWeek: T.WORD,
    wDay: T.WORD,
    wHour: T.WORD,
    wMinute: T.WORD,
    wSecond: T.WORD,
    wMilliseconds: T.WORD
});};
T.PSYSTEMTIME = function() {return Pointer(Struct('_SYSTEMTIME', {
    wYear: T.WORD,
    wMonth: T.WORD,
    wDayOfWeek: T.WORD,
    wDay: T.WORD,
    wHour: T.WORD,
    wMinute: T.WORD,
    wSecond: T.WORD,
    wMilliseconds: T.WORD
}));};
T.LPSYSTEMTIME = function() {return Pointer(Struct('_SYSTEMTIME', {
    wYear: T.WORD,
    wMonth: T.WORD,
    wDayOfWeek: T.WORD,
    wDay: T.WORD,
    wHour: T.WORD,
    wMinute: T.WORD,
    wSecond: T.WORD,
    wMilliseconds: T.WORD
}));};
T.OVERLAPPED = function() {return Struct('_OVERLAPPED', {
    Internal: T.ULONG_PTR,
    InternalHigh: T.ULONG_PTR,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            Offset: T.DWORD,
            OffsetHigh: T.DWORD
        }),
        Pointer: T.PVOID
    }),
    hEvent: T.HANDLE
});};
T.LPOVERLAPPED = function() {return Pointer(Struct('_OVERLAPPED', {
    Internal: T.ULONG_PTR,
    InternalHigh: T.ULONG_PTR,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            Offset: T.DWORD,
            OffsetHigh: T.DWORD
        }),
        Pointer: T.PVOID
    }),
    hEvent: T.HANDLE
}));};
T.LPOVERLAPPED_COMPLETION_ROUTINE = function() {return Pointer(Fn(null, [[T.DWORD], [T.DWORD], [T.LPOVERLAPPED]]), [['stdcall']]);};
T.STARTUPINFOA = function() {return Struct('_STARTUPINFOA', {
    cb: T.DWORD,
    lpReserved: T.LPSTR,
    lpDesktop: T.LPSTR,
    lpTitle: T.LPSTR,
    dwX: T.DWORD,
    dwY: T.DWORD,
    dwXSize: T.DWORD,
    dwYSize: T.DWORD,
    dwXCountChars: T.DWORD,
    dwYCountChars: T.DWORD,
    dwFillAttribute: T.DWORD,
    dwFlags: T.DWORD,
    wShowWindow: T.WORD,
    cbReserved2: T.WORD,
    lpReserved2: Pointer(T.BYTE),
    hStdInput: T.HANDLE,
    hStdOutput: T.HANDLE,
    hStdError: T.HANDLE
});};
T.LPSTARTUPINFOA = function() {return Pointer(Struct('_STARTUPINFOA', {
    cb: T.DWORD,
    lpReserved: T.LPSTR,
    lpDesktop: T.LPSTR,
    lpTitle: T.LPSTR,
    dwX: T.DWORD,
    dwY: T.DWORD,
    dwXSize: T.DWORD,
    dwYSize: T.DWORD,
    dwXCountChars: T.DWORD,
    dwYCountChars: T.DWORD,
    dwFillAttribute: T.DWORD,
    dwFlags: T.DWORD,
    wShowWindow: T.WORD,
    cbReserved2: T.WORD,
    lpReserved2: Pointer(T.BYTE),
    hStdInput: T.HANDLE,
    hStdOutput: T.HANDLE,
    hStdError: T.HANDLE
}));};
T.STARTUPINFOW = function() {return Struct('_STARTUPINFOW', {
    cb: T.DWORD,
    lpReserved: T.LPWSTR,
    lpDesktop: T.LPWSTR,
    lpTitle: T.LPWSTR,
    dwX: T.DWORD,
    dwY: T.DWORD,
    dwXSize: T.DWORD,
    dwYSize: T.DWORD,
    dwXCountChars: T.DWORD,
    dwYCountChars: T.DWORD,
    dwFillAttribute: T.DWORD,
    dwFlags: T.DWORD,
    wShowWindow: T.WORD,
    cbReserved2: T.WORD,
    lpReserved2: Pointer(T.BYTE),
    hStdInput: T.HANDLE,
    hStdOutput: T.HANDLE,
    hStdError: T.HANDLE
});};
T.LPSTARTUPINFOW = function() {return Pointer(Struct('_STARTUPINFOW', {
    cb: T.DWORD,
    lpReserved: T.LPWSTR,
    lpDesktop: T.LPWSTR,
    lpTitle: T.LPWSTR,
    dwX: T.DWORD,
    dwY: T.DWORD,
    dwXSize: T.DWORD,
    dwYSize: T.DWORD,
    dwXCountChars: T.DWORD,
    dwYCountChars: T.DWORD,
    dwFillAttribute: T.DWORD,
    dwFlags: T.DWORD,
    wShowWindow: T.WORD,
    cbReserved2: T.WORD,
    lpReserved2: Pointer(T.BYTE),
    hStdInput: T.HANDLE,
    hStdOutput: T.HANDLE,
    hStdError: T.HANDLE
}));};
T.STARTUPINFO = function() {return T.STARTUPINFOA;};
T.LPSTARTUPINFO = function() {return T.LPSTARTUPINFOA;};
T.PROCESS_INFORMATION = function() {return Struct('_PROCESS_INFORMATION', {
    hProcess: T.HANDLE,
    hThread: T.HANDLE,
    dwProcessId: T.DWORD,
    dwThreadId: T.DWORD
});};
T.PPROCESS_INFORMATION = function() {return Pointer(Struct('_PROCESS_INFORMATION', {
    hProcess: T.HANDLE,
    hThread: T.HANDLE,
    dwProcessId: T.DWORD,
    dwThreadId: T.DWORD
}));};
T.LPPROCESS_INFORMATION = function() {return Pointer(Struct('_PROCESS_INFORMATION', {
    hProcess: T.HANDLE,
    hThread: T.HANDLE,
    dwProcessId: T.DWORD,
    dwThreadId: T.DWORD
}));};
T.DYNAMIC_TIME_ZONE_INFORMATION = function() {return Struct('_TIME_DYNAMIC_ZONE_INFORMATION', {
    Bias: T.LONG,
    StandardName: ArrayType(T.WCHAR, 32),
    StandardDate: T.SYSTEMTIME,
    StandardBias: T.LONG,
    DaylightName: ArrayType(T.WCHAR, 32),
    DaylightDate: T.SYSTEMTIME,
    DaylightBias: T.LONG,
    TimeZoneKeyName: ArrayType(T.WCHAR, 128),
    DynamicDaylightTimeDisabled: T.BOOLEAN
});};
T.PDYNAMIC_TIME_ZONE_INFORMATION = function() {return Pointer(Struct('_TIME_DYNAMIC_ZONE_INFORMATION', {
    Bias: T.LONG,
    StandardName: ArrayType(T.WCHAR, 32),
    StandardDate: T.SYSTEMTIME,
    StandardBias: T.LONG,
    DaylightName: ArrayType(T.WCHAR, 32),
    DaylightDate: T.SYSTEMTIME,
    DaylightBias: T.LONG,
    TimeZoneKeyName: ArrayType(T.WCHAR, 128),
    DynamicDaylightTimeDisabled: T.BOOLEAN
}));};
T.TIME_ZONE_INFORMATION = function() {return Struct('_TIME_ZONE_INFORMATION', {
    Bias: T.LONG,
    StandardName: ArrayType(T.WCHAR, 32),
    StandardDate: T.SYSTEMTIME,
    StandardBias: T.LONG,
    DaylightName: ArrayType(T.WCHAR, 32),
    DaylightDate: T.SYSTEMTIME,
    DaylightBias: T.LONG
});};
T.PTIME_ZONE_INFORMATION = function() {return Pointer(Struct('_TIME_ZONE_INFORMATION', {
    Bias: T.LONG,
    StandardName: ArrayType(T.WCHAR, 32),
    StandardDate: T.SYSTEMTIME,
    StandardBias: T.LONG,
    DaylightName: ArrayType(T.WCHAR, 32),
    DaylightDate: T.SYSTEMTIME,
    DaylightBias: T.LONG
}));};
T.LPTIME_ZONE_INFORMATION = function() {return Pointer(Struct('_TIME_ZONE_INFORMATION', {
    Bias: T.LONG,
    StandardName: ArrayType(T.WCHAR, 32),
    StandardDate: T.SYSTEMTIME,
    StandardBias: T.LONG,
    DaylightName: ArrayType(T.WCHAR, 32),
    DaylightDate: T.SYSTEMTIME,
    DaylightBias: T.LONG
}));};
T.BY_HANDLE_FILE_INFORMATION = function() {return Struct('_BY_HANDLE_FILE_INFORMATION', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    dwVolumeSerialNumber: T.DWORD,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    nNumberOfLinks: T.DWORD,
    nFileIndexHigh: T.DWORD,
    nFileIndexLow: T.DWORD
});};
T.PBY_HANDLE_FILE_INFORMATION = function() {return Pointer(Struct('_BY_HANDLE_FILE_INFORMATION', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    dwVolumeSerialNumber: T.DWORD,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    nNumberOfLinks: T.DWORD,
    nFileIndexHigh: T.DWORD,
    nFileIndexLow: T.DWORD
}));};
T.LPBY_HANDLE_FILE_INFORMATION = function() {return Pointer(Struct('_BY_HANDLE_FILE_INFORMATION', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    dwVolumeSerialNumber: T.DWORD,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    nNumberOfLinks: T.DWORD,
    nFileIndexHigh: T.DWORD,
    nFileIndexLow: T.DWORD
}));};
T.SYSTEM_POWER_STATUS = function() {return Struct('_SYSTEM_POWER_STATUS', {
    ACLineStatus: T.BYTE,
    BatteryFlag: T.BYTE,
    BatteryLifePercent: T.BYTE,
    Reserved1: T.BYTE,
    BatteryLifeTime: T.DWORD,
    BatteryFullLifeTime: T.DWORD
});};
T.LPSYSTEM_POWER_STATUS = function() {return Pointer(Struct('_SYSTEM_POWER_STATUS', {
    ACLineStatus: T.BYTE,
    BatteryFlag: T.BYTE,
    BatteryLifePercent: T.BYTE,
    Reserved1: T.BYTE,
    BatteryLifeTime: T.DWORD,
    BatteryFullLifeTime: T.DWORD
}));};
T.SYSTEM_INFO = function() {return Struct('_SYSTEM_INFO', {
    __unnamed0: Union('', {
        dwOemId: T.DWORD,
        __unnamed0: Struct('', {
            wProcessorArchitecture: T.WORD,
            wReserved: T.WORD
        })
    }),
    dwPageSize: T.DWORD,
    lpMinimumApplicationAddress: T.LPVOID,
    lpMaximumApplicationAddress: T.LPVOID,
    dwActiveProcessorMask: T.DWORD_PTR,
    dwNumberOfProcessors: T.DWORD,
    dwProcessorType: T.DWORD,
    dwAllocationGranularity: T.DWORD,
    wProcessorLevel: T.WORD,
    wProcessorRevision: T.WORD
});};
T.LPSYSTEM_INFO = function() {return Pointer(Struct('_SYSTEM_INFO', {
    __unnamed0: Union('', {
        dwOemId: T.DWORD,
        __unnamed0: Struct('', {
            wProcessorArchitecture: T.WORD,
            wReserved: T.WORD
        })
    }),
    dwPageSize: T.DWORD,
    lpMinimumApplicationAddress: T.LPVOID,
    lpMaximumApplicationAddress: T.LPVOID,
    dwActiveProcessorMask: T.DWORD_PTR,
    dwNumberOfProcessors: T.DWORD,
    dwProcessorType: T.DWORD,
    dwAllocationGranularity: T.DWORD,
    wProcessorLevel: T.WORD,
    wProcessorRevision: T.WORD
}));};
T.ENUMRESTYPEPROCA = function() {return Pointer(Fn(T.BOOL, [[T.HMODULE], [T.LPSTR], [T.LONG_PTR]]), [['stdcall']]);};
T.ENUMRESTYPEPROCW = function() {return Pointer(Fn(T.BOOL, [[T.HMODULE], [T.LPWSTR], [T.LONG_PTR]]), [['stdcall']]);};
T.ENUMRESNAMEPROCA = function() {return Pointer(Fn(T.BOOL, [[T.HMODULE], [T.LPCSTR], [T.LPSTR], [T.LONG_PTR]]), [['stdcall']]);};
T.ENUMRESNAMEPROCW = function() {return Pointer(Fn(T.BOOL, [[T.HMODULE], [T.LPCWSTR], [T.LPWSTR], [T.LONG_PTR]]), [['stdcall']]);};
T.ENUMRESLANGPROCA = function() {return Pointer(Fn(T.BOOL, [[T.HMODULE], [T.LPCSTR], [T.LPCSTR], [T.WORD], [T.LONG_PTR]]), [['stdcall']]);};
T.ENUMRESLANGPROCW = function() {return Pointer(Fn(T.BOOL, [[T.HMODULE], [T.LPCWSTR], [T.LPCWSTR], [T.WORD], [T.LONG_PTR]]), [['stdcall']]);};
T.ENUMRESTYPEPROC = function() {return T.ENUMRESTYPEPROCA;};
T.ENUMRESNAMEPROC = function() {return T.ENUMRESNAMEPROCA;};
T.ENUMRESLANGPROC = function() {return T.ENUMRESLANGPROCA;};
T.LPLDT_ENTRY = function() {return T.PLDT_ENTRY;};
T.GET_FILEEX_INFO_LEVELS = function() {return Enum('GetFileExInfoStandard', {
    GetFileExInfoStandard: 0
});};
T.WIN32_FILE_ATTRIBUTE_DATA = function() {return Struct('_WIN32_FILE_ATTRIBUTES_DATA', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD
});};
T.LPWIN32_FILE_ATTRIBUTE_DATA = function() {return Pointer(Struct('_WIN32_FILE_ATTRIBUTES_DATA', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD
}));};
T.LPPROGRESS_ROUTINE = function() {return Pointer(Fn(T.DWORD, [[T.LARGE_INTEGER], [T.LARGE_INTEGER], [T.LARGE_INTEGER], [T.LARGE_INTEGER], [T.DWORD], [T.DWORD], [T.HANDLE], [T.HANDLE], [T.LPVOID]]), [['stdcall']]);};
T.ACTCTXA = function() {return Struct('tagACTCTXA', {
    cbSize: T.ULONG,
    dwFlags: T.DWORD,
    lpSource: T.LPCSTR,
    wProcessorArchitecture: T.USHORT,
    wLangId: T.LANGID,
    lpAssemblyDirectory: T.LPCSTR,
    lpResourceName: T.LPCSTR,
    lpApplicationName: T.LPCSTR,
    hModule: T.HMODULE
});};
T.PACTCTXA = function() {return Pointer(Struct('tagACTCTXA', {
    cbSize: T.ULONG,
    dwFlags: T.DWORD,
    lpSource: T.LPCSTR,
    wProcessorArchitecture: T.USHORT,
    wLangId: T.LANGID,
    lpAssemblyDirectory: T.LPCSTR,
    lpResourceName: T.LPCSTR,
    lpApplicationName: T.LPCSTR,
    hModule: T.HMODULE
}));};
T.ACTCTXW = function() {return Struct('tagACTCTXW', {
    cbSize: T.ULONG,
    dwFlags: T.DWORD,
    lpSource: T.LPCWSTR,
    wProcessorArchitecture: T.USHORT,
    wLangId: T.LANGID,
    lpAssemblyDirectory: T.LPCWSTR,
    lpResourceName: T.LPCWSTR,
    lpApplicationName: T.LPCWSTR,
    hModule: T.HMODULE
});};
T.PACTCTXW = function() {return Pointer(Struct('tagACTCTXW', {
    cbSize: T.ULONG,
    dwFlags: T.DWORD,
    lpSource: T.LPCWSTR,
    wProcessorArchitecture: T.USHORT,
    wLangId: T.LANGID,
    lpAssemblyDirectory: T.LPCWSTR,
    lpResourceName: T.LPCWSTR,
    lpApplicationName: T.LPCWSTR,
    hModule: T.HMODULE
}));};
T.ACTCTX = function() {return T.ACTCTXA;};
T.PACTCTX = function() {return T.PACTCTXA;};
T.PCACTCTXA = function() {return Pointer(T.ACTCTXA, [['const']]);};
T.PCACTCTXW = function() {return Pointer(T.ACTCTXW, [['const']]);};
T.PCACTCTX = function() {return T.PCACTCTXA;};
T.ACTCTX_SECTION_KEYED_DATA_2600 = function() {return Struct('tagACTCTX_SECTION_KEYED_DATA_2600', {
    cbSize: T.ULONG,
    ulDataFormatVersion: T.ULONG,
    lpData: T.PVOID,
    ulLength: T.ULONG,
    lpSectionGlobalData: T.PVOID,
    ulSectionGlobalDataLength: T.ULONG,
    lpSectionBase: T.PVOID,
    ulSectionTotalLength: T.ULONG,
    hActCtx: T.HANDLE,
    ulAssemblyRosterIndex: T.ULONG
});};
T.PACTCTX_SECTION_KEYED_DATA_2600 = function() {return Pointer(Struct('tagACTCTX_SECTION_KEYED_DATA_2600', {
    cbSize: T.ULONG,
    ulDataFormatVersion: T.ULONG,
    lpData: T.PVOID,
    ulLength: T.ULONG,
    lpSectionGlobalData: T.PVOID,
    ulSectionGlobalDataLength: T.ULONG,
    lpSectionBase: T.PVOID,
    ulSectionTotalLength: T.ULONG,
    hActCtx: T.HANDLE,
    ulAssemblyRosterIndex: T.ULONG
}));};
T.PCACTCTX_SECTION_KEYED_DATA_2600 = function() {return Pointer(T.ACTCTX_SECTION_KEYED_DATA_2600, [['const']]);};
T.ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = function() {return Struct('tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA', {
    lpInformation: T.PVOID,
    lpSectionBase: T.PVOID,
    ulSectionLength: T.ULONG,
    lpSectionGlobalDataBase: T.PVOID,
    ulSectionGlobalDataLength: T.ULONG
});};
T.PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = function() {return Pointer(Struct('tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA', {
    lpInformation: T.PVOID,
    lpSectionBase: T.PVOID,
    ulSectionLength: T.ULONG,
    lpSectionGlobalDataBase: T.PVOID,
    ulSectionGlobalDataLength: T.ULONG
}));};
T.PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = function() {return Pointer(T.ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, [['const']]);};
T.ACTCTX_SECTION_KEYED_DATA = function() {return Struct('tagACTCTX_SECTION_KEYED_DATA', {
    cbSize: T.ULONG,
    ulDataFormatVersion: T.ULONG,
    lpData: T.PVOID,
    ulLength: T.ULONG,
    lpSectionGlobalData: T.PVOID,
    ulSectionGlobalDataLength: T.ULONG,
    lpSectionBase: T.PVOID,
    ulSectionTotalLength: T.ULONG,
    hActCtx: T.HANDLE,
    ulAssemblyRosterIndex: T.ULONG,
    ulFlags: T.ULONG,
    AssemblyMetadata: T.ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
});};
T.PACTCTX_SECTION_KEYED_DATA = function() {return Pointer(Struct('tagACTCTX_SECTION_KEYED_DATA', {
    cbSize: T.ULONG,
    ulDataFormatVersion: T.ULONG,
    lpData: T.PVOID,
    ulLength: T.ULONG,
    lpSectionGlobalData: T.PVOID,
    ulSectionGlobalDataLength: T.ULONG,
    lpSectionBase: T.PVOID,
    ulSectionTotalLength: T.ULONG,
    hActCtx: T.HANDLE,
    ulAssemblyRosterIndex: T.ULONG,
    ulFlags: T.ULONG,
    AssemblyMetadata: T.ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
}));};
T.PCACTCTX_SECTION_KEYED_DATA = function() {return Pointer(T.ACTCTX_SECTION_KEYED_DATA, [['const']]);};
T.ACTIVATION_CONTEXT_BASIC_INFORMATION = function() {return Struct('_ACTIVATION_CONTEXT_BASIC_INFORMATION', {
    hActCtx: T.HANDLE,
    dwFlags: T.DWORD
});};
T.PACTIVATION_CONTEXT_BASIC_INFORMATION = function() {return Pointer(Struct('_ACTIVATION_CONTEXT_BASIC_INFORMATION', {
    hActCtx: T.HANDLE,
    dwFlags: T.DWORD
}));};
T.PQUERYACTCTXW_FUNC = function() {return Pointer(Fn(T.BOOL, [[T.DWORD], [T.HANDLE], [T.PVOID], [T.ULONG], [T.PVOID], [T.SIZE_T], [Pointer(T.SIZE_T)]]), [['stdcall']]);};
T.COMSTAT = function() {return Struct('tagCOMSTAT', {
    fCtsHold: [T.DWORD, 1],
    fDsrHold: [T.DWORD, 1],
    fRlsdHold: [T.DWORD, 1],
    fXoffHold: [T.DWORD, 1],
    fXoffSent: [T.DWORD, 1],
    fEof: [T.DWORD, 1],
    fTxim: [T.DWORD, 1],
    fReserved: [T.DWORD, 25],
    cbInQue: T.DWORD,
    cbOutQue: T.DWORD
});};
T.LPCOMSTAT = function() {return Pointer(Struct('tagCOMSTAT', {
    fCtsHold: [T.DWORD, 1],
    fDsrHold: [T.DWORD, 1],
    fRlsdHold: [T.DWORD, 1],
    fXoffHold: [T.DWORD, 1],
    fXoffSent: [T.DWORD, 1],
    fEof: [T.DWORD, 1],
    fTxim: [T.DWORD, 1],
    fReserved: [T.DWORD, 25],
    cbInQue: T.DWORD,
    cbOutQue: T.DWORD
}));};
T.DCB = function() {return Struct('tagDCB', {
    DCBlength: T.DWORD,
    BaudRate: T.DWORD,
    fBinary: [T.u32, 1],
    fParity: [T.u32, 1],
    fOutxCtsFlow: [T.u32, 1],
    fOutxDsrFlow: [T.u32, 1],
    fDtrControl: [T.u32, 2],
    fDsrSensitivity: [T.u32, 1],
    fTXContinueOnXoff: [T.u32, 1],
    fOutX: [T.u32, 1],
    fInX: [T.u32, 1],
    fErrorChar: [T.u32, 1],
    fNull: [T.u32, 1],
    fRtsControl: [T.u32, 2],
    fAbortOnError: [T.u32, 1],
    fDummy2: [T.u32, 17],
    wReserved: T.WORD,
    XonLim: T.WORD,
    XoffLim: T.WORD,
    ByteSize: T.BYTE,
    Parity: T.BYTE,
    StopBits: T.BYTE,
    XonChar: T.char,
    XoffChar: T.char,
    ErrorChar: T.char,
    EofChar: T.char,
    EvtChar: T.char,
    wReserved1: T.WORD
});};
T.LPDCB = function() {return Pointer(Struct('tagDCB', {
    DCBlength: T.DWORD,
    BaudRate: T.DWORD,
    fBinary: [T.u32, 1],
    fParity: [T.u32, 1],
    fOutxCtsFlow: [T.u32, 1],
    fOutxDsrFlow: [T.u32, 1],
    fDtrControl: [T.u32, 2],
    fDsrSensitivity: [T.u32, 1],
    fTXContinueOnXoff: [T.u32, 1],
    fOutX: [T.u32, 1],
    fInX: [T.u32, 1],
    fErrorChar: [T.u32, 1],
    fNull: [T.u32, 1],
    fRtsControl: [T.u32, 2],
    fAbortOnError: [T.u32, 1],
    fDummy2: [T.u32, 17],
    wReserved: T.WORD,
    XonLim: T.WORD,
    XoffLim: T.WORD,
    ByteSize: T.BYTE,
    Parity: T.BYTE,
    StopBits: T.BYTE,
    XonChar: T.char,
    XoffChar: T.char,
    ErrorChar: T.char,
    EofChar: T.char,
    EvtChar: T.char,
    wReserved1: T.WORD
}));};
T.COMMCONFIG = function() {return Struct('tagCOMMCONFIG', {
    dwSize: T.DWORD,
    wVersion: T.WORD,
    wReserved: T.WORD,
    dcb: T.DCB,
    dwProviderSubType: T.DWORD,
    dwProviderOffset: T.DWORD,
    dwProviderSize: T.DWORD,
    wcProviderData: ArrayType(T.DWORD, 1)
});};
T.LPCOMMCONFIG = function() {return Pointer(Struct('tagCOMMCONFIG', {
    dwSize: T.DWORD,
    wVersion: T.WORD,
    wReserved: T.WORD,
    dcb: T.DCB,
    dwProviderSubType: T.DWORD,
    dwProviderOffset: T.DWORD,
    dwProviderSize: T.DWORD,
    wcProviderData: ArrayType(T.DWORD, 1)
}));};
T.COMMPROP = function() {return Struct('tagCOMMPROP', {
    wPacketLength: T.WORD,
    wPacketVersion: T.WORD,
    dwServiceMask: T.DWORD,
    dwReserved1: T.DWORD,
    dwMaxTxQueue: T.DWORD,
    dwMaxRxQueue: T.DWORD,
    dwMaxBaud: T.DWORD,
    dwProvSubType: T.DWORD,
    dwProvCapabilities: T.DWORD,
    dwSettableParams: T.DWORD,
    dwSettableBaud: T.DWORD,
    wSettableData: T.WORD,
    wSettableStopParity: T.WORD,
    dwCurrentTxQueue: T.DWORD,
    dwCurrentRxQueue: T.DWORD,
    dwProvSpec1: T.DWORD,
    dwProvSpec2: T.DWORD,
    wcProvChar: ArrayType(T.WCHAR, 1)
});};
T.LPCOMMPROP = function() {return Pointer(Struct('tagCOMMPROP', {
    wPacketLength: T.WORD,
    wPacketVersion: T.WORD,
    dwServiceMask: T.DWORD,
    dwReserved1: T.DWORD,
    dwMaxTxQueue: T.DWORD,
    dwMaxRxQueue: T.DWORD,
    dwMaxBaud: T.DWORD,
    dwProvSubType: T.DWORD,
    dwProvCapabilities: T.DWORD,
    dwSettableParams: T.DWORD,
    dwSettableBaud: T.DWORD,
    wSettableData: T.WORD,
    wSettableStopParity: T.WORD,
    dwCurrentTxQueue: T.DWORD,
    dwCurrentRxQueue: T.DWORD,
    dwProvSpec1: T.DWORD,
    dwProvSpec2: T.DWORD,
    wcProvChar: ArrayType(T.WCHAR, 1)
}));};
T.COMMTIMEOUTS = function() {return Struct('tagCOMMTIMEOUTS', {
    ReadIntervalTimeout: T.DWORD,
    ReadTotalTimeoutMultiplier: T.DWORD,
    ReadTotalTimeoutConstant: T.DWORD,
    WriteTotalTimeoutMultiplier: T.DWORD,
    WriteTotalTimeoutConstant: T.DWORD
});};
T.LPCOMMTIMEOUTS = function() {return Pointer(Struct('tagCOMMTIMEOUTS', {
    ReadIntervalTimeout: T.DWORD,
    ReadTotalTimeoutMultiplier: T.DWORD,
    ReadTotalTimeoutConstant: T.DWORD,
    WriteTotalTimeoutMultiplier: T.DWORD,
    WriteTotalTimeoutConstant: T.DWORD
}));};
T.PAPCFUNC = function() {return Pointer(Fn(null, [[T.ULONG_PTR]]), [['stdcall']]);};
T.PTIMERAPCROUTINE = function() {return Pointer(Fn(null, [[T.LPVOID], [T.DWORD], [T.DWORD]]), [['stdcall']]);};
T.COMPUTER_NAME_FORMAT = function() {return Enum('ComputerNameMax', {
    ComputerNameNetBIOS: 0,
    ComputerNameDnsHostname: 1,
    ComputerNameDnsDomain: 2,
    ComputerNameDnsFullyQualified: 3,
    ComputerNamePhysicalNetBIOS: 4,
    ComputerNamePhysicalDnsHostname: 5,
    ComputerNamePhysicalDnsDomain: 6,
    ComputerNamePhysicalDnsFullyQualified: 7,
    ComputerNameMax: 8
});};
T.HW_PROFILE_INFOA = function() {return Struct('tagHW_PROFILE_INFOA', {
    dwDockInfo: T.DWORD,
    szHwProfileGuid: ArrayType(T.CHAR, 39),
    szHwProfileName: ArrayType(T.CHAR, 80)
});};
T.LPHW_PROFILE_INFOA = function() {return Pointer(Struct('tagHW_PROFILE_INFOA', {
    dwDockInfo: T.DWORD,
    szHwProfileGuid: ArrayType(T.CHAR, 39),
    szHwProfileName: ArrayType(T.CHAR, 80)
}));};
T.HW_PROFILE_INFOW = function() {return Struct('tagHW_PROFILE_INFOW', {
    dwDockInfo: T.DWORD,
    szHwProfileGuid: ArrayType(T.WCHAR, 39),
    szHwProfileName: ArrayType(T.WCHAR, 80)
});};
T.LPHW_PROFILE_INFOW = function() {return Pointer(Struct('tagHW_PROFILE_INFOW', {
    dwDockInfo: T.DWORD,
    szHwProfileGuid: ArrayType(T.WCHAR, 39),
    szHwProfileName: ArrayType(T.WCHAR, 80)
}));};
T.HW_PROFILE_INFO = function() {return T.HW_PROFILE_INFOA;};
T.LPHW_PROFILE_INFO = function() {return T.LPHW_PROFILE_INFOA;};
T.DEP_SYSTEM_POLICY_TYPE = function() {return Enum('OptOut', {
    AlwaysOff: 0,
    AlwaysOn: 1,
    OptIn: 2,
    OptOut: 3
});};
T.EVENTLOG_FULL_INFORMATION = function() {return Struct('_EVENTLOG_FULL_INFORMATION', {
    dwFull: T.DWORD
});};
T.LPEVENTLOG_FULL_INFORMATION = function() {return Pointer(Struct('_EVENTLOG_FULL_INFORMATION', {
    dwFull: T.DWORD
}));};
T.WIN32_STREAM_ID = function() {return Struct('_WIN32_STREAM_ID', {
    dwStreamId: T.DWORD,
    dwStreamAttributes: T.DWORD,
    Size: T.LARGE_INTEGER,
    dwStreamNameSize: T.DWORD,
    cStreamName: ArrayType(T.WCHAR, 1)
});};
T.LPWIN32_STREAM_ID = function() {return Pointer(Struct('_WIN32_STREAM_ID', {
    dwStreamId: T.DWORD,
    dwStreamAttributes: T.DWORD,
    Size: T.LARGE_INTEGER,
    dwStreamNameSize: T.DWORD,
    cStreamName: ArrayType(T.WCHAR, 1)
}));};
T.ABCFLOAT = function() {return Struct('_ABCFLOAT', {
    abcfA: T.FLOAT,
    abcfB: T.FLOAT,
    abcfC: T.FLOAT
});};
T.PABCFLOAT = function() {return Pointer(Struct('_ABCFLOAT', {
    abcfA: T.FLOAT,
    abcfB: T.FLOAT,
    abcfC: T.FLOAT
}));};
T.LPABCFLOAT = function() {return Pointer(Struct('_ABCFLOAT', {
    abcfA: T.FLOAT,
    abcfB: T.FLOAT,
    abcfC: T.FLOAT
}));};
T.KERNINGPAIR = function() {return Struct('', {
    wFirst: T.WORD,
    wSecond: T.WORD,
    iKernAmount: T.INT
});};
T.LPKERNINGPAIR = function() {return Pointer(Struct('', {
    wFirst: T.WORD,
    wSecond: T.WORD,
    iKernAmount: T.INT
}));};
T.PIXELFORMATDESCRIPTOR = function() {return Struct('tagPIXELFORMATDESCRIPTOR', {
    nSize: T.WORD,
    nVersion: T.WORD,
    dwFlags: T.DWORD,
    iPixelType: T.BYTE,
    cColorBits: T.BYTE,
    cRedBits: T.BYTE,
    cRedShift: T.BYTE,
    cGreenBits: T.BYTE,
    cGreenShift: T.BYTE,
    cBlueBits: T.BYTE,
    cBlueShift: T.BYTE,
    cAlphaBits: T.BYTE,
    cAlphaShift: T.BYTE,
    cAccumBits: T.BYTE,
    cAccumRedBits: T.BYTE,
    cAccumGreenBits: T.BYTE,
    cAccumBlueBits: T.BYTE,
    cAccumAlphaBits: T.BYTE,
    cDepthBits: T.BYTE,
    cStencilBits: T.BYTE,
    cAuxBuffers: T.BYTE,
    iLayerType: T.BYTE,
    bReserved: T.BYTE,
    dwLayerMask: T.DWORD,
    dwVisibleMask: T.DWORD,
    dwDamageMask: T.DWORD
});};
T.PPIXELFORMATDESCRIPTOR = function() {return Pointer(Struct('tagPIXELFORMATDESCRIPTOR', {
    nSize: T.WORD,
    nVersion: T.WORD,
    dwFlags: T.DWORD,
    iPixelType: T.BYTE,
    cColorBits: T.BYTE,
    cRedBits: T.BYTE,
    cRedShift: T.BYTE,
    cGreenBits: T.BYTE,
    cGreenShift: T.BYTE,
    cBlueBits: T.BYTE,
    cBlueShift: T.BYTE,
    cAlphaBits: T.BYTE,
    cAlphaShift: T.BYTE,
    cAccumBits: T.BYTE,
    cAccumRedBits: T.BYTE,
    cAccumGreenBits: T.BYTE,
    cAccumBlueBits: T.BYTE,
    cAccumAlphaBits: T.BYTE,
    cDepthBits: T.BYTE,
    cStencilBits: T.BYTE,
    cAuxBuffers: T.BYTE,
    iLayerType: T.BYTE,
    bReserved: T.BYTE,
    dwLayerMask: T.DWORD,
    dwVisibleMask: T.DWORD,
    dwDamageMask: T.DWORD
}));};
T.LPPIXELFORMATDESCRIPTOR = function() {return Pointer(Struct('tagPIXELFORMATDESCRIPTOR', {
    nSize: T.WORD,
    nVersion: T.WORD,
    dwFlags: T.DWORD,
    iPixelType: T.BYTE,
    cColorBits: T.BYTE,
    cRedBits: T.BYTE,
    cRedShift: T.BYTE,
    cGreenBits: T.BYTE,
    cGreenShift: T.BYTE,
    cBlueBits: T.BYTE,
    cBlueShift: T.BYTE,
    cAlphaBits: T.BYTE,
    cAlphaShift: T.BYTE,
    cAccumBits: T.BYTE,
    cAccumRedBits: T.BYTE,
    cAccumGreenBits: T.BYTE,
    cAccumBlueBits: T.BYTE,
    cAccumAlphaBits: T.BYTE,
    cDepthBits: T.BYTE,
    cStencilBits: T.BYTE,
    cAuxBuffers: T.BYTE,
    iLayerType: T.BYTE,
    bReserved: T.BYTE,
    dwLayerMask: T.DWORD,
    dwVisibleMask: T.DWORD,
    dwDamageMask: T.DWORD
}));};
T.COLORADJUSTMENT = function() {return Struct('tagCOLORADJUSTMENT', {
    caSize: T.WORD,
    caFlags: T.WORD,
    caIlluminantIndex: T.WORD,
    caRedGamma: T.WORD,
    caGreenGamma: T.WORD,
    caBlueGamma: T.WORD,
    caReferenceBlack: T.WORD,
    caReferenceWhite: T.WORD,
    caContrast: T.SHORT,
    caBrightness: T.SHORT,
    caColorfulness: T.SHORT,
    caRedGreenTint: T.SHORT
});};
T.PCOLORADJUSTMENT = function() {return Pointer(Struct('tagCOLORADJUSTMENT', {
    caSize: T.WORD,
    caFlags: T.WORD,
    caIlluminantIndex: T.WORD,
    caRedGamma: T.WORD,
    caGreenGamma: T.WORD,
    caBlueGamma: T.WORD,
    caReferenceBlack: T.WORD,
    caReferenceWhite: T.WORD,
    caContrast: T.SHORT,
    caBrightness: T.SHORT,
    caColorfulness: T.SHORT,
    caRedGreenTint: T.SHORT
}));};
T.LPCOLORADJUSTMENT = function() {return Pointer(Struct('tagCOLORADJUSTMENT', {
    caSize: T.WORD,
    caFlags: T.WORD,
    caIlluminantIndex: T.WORD,
    caRedGamma: T.WORD,
    caGreenGamma: T.WORD,
    caBlueGamma: T.WORD,
    caReferenceBlack: T.WORD,
    caReferenceWhite: T.WORD,
    caContrast: T.SHORT,
    caBrightness: T.SHORT,
    caColorfulness: T.SHORT,
    caRedGreenTint: T.SHORT
}));};
T.FXPT16DOT16 = function() {return T.LONG;};
T.LPFXPT16DOT16 = function() {return Pointer(T.LONG);};
T.FXPT2DOT30 = function() {return T.LONG;};
T.LPFXPT2DOT30 = function() {return Pointer(T.LONG);};
T.LCSCSTYPE = function() {return T.LONG;};
T.LCSGAMUTMATCH = function() {return T.LONG;};
T.CIEXYZ = function() {return Struct('tagCIEXYZ', {
    ciexyzX: T.FXPT2DOT30,
    ciexyzY: T.FXPT2DOT30,
    ciexyzZ: T.FXPT2DOT30
});};
T.LPCIEXYZ = function() {return Pointer(Struct('tagCIEXYZ', {
    ciexyzX: T.FXPT2DOT30,
    ciexyzY: T.FXPT2DOT30,
    ciexyzZ: T.FXPT2DOT30
}));};
T.CIEXYZTRIPLE = function() {return Struct('tagCIEXYZTRIPLE', {
    ciexyzRed: T.CIEXYZ,
    ciexyzGreen: T.CIEXYZ,
    ciexyzBlue: T.CIEXYZ
});};
T.LPCIEXYZTRIPLE = function() {return Pointer(Struct('tagCIEXYZTRIPLE', {
    ciexyzRed: T.CIEXYZ,
    ciexyzGreen: T.CIEXYZ,
    ciexyzBlue: T.CIEXYZ
}));};
T.LOGCOLORSPACEA = function() {return Struct('tagLOGCOLORSPACEA', {
    lcsSignature: T.DWORD,
    lcsVersion: T.DWORD,
    lcsSize: T.DWORD,
    lcsCSType: T.LCSCSTYPE,
    lcsIntent: T.LCSGAMUTMATCH,
    lcsEndpoints: T.CIEXYZTRIPLE,
    lcsGammaRed: T.DWORD,
    lcsGammaGreen: T.DWORD,
    lcsGammaBlue: T.DWORD,
    lcsFilename: ArrayType(T.CHAR, 260)
});};
T.LPLOGCOLORSPACEA = function() {return Pointer(Struct('tagLOGCOLORSPACEA', {
    lcsSignature: T.DWORD,
    lcsVersion: T.DWORD,
    lcsSize: T.DWORD,
    lcsCSType: T.LCSCSTYPE,
    lcsIntent: T.LCSGAMUTMATCH,
    lcsEndpoints: T.CIEXYZTRIPLE,
    lcsGammaRed: T.DWORD,
    lcsGammaGreen: T.DWORD,
    lcsGammaBlue: T.DWORD,
    lcsFilename: ArrayType(T.CHAR, 260)
}));};
T.LOGCOLORSPACEW = function() {return Struct('tagLOGCOLORSPACEW', {
    lcsSignature: T.DWORD,
    lcsVersion: T.DWORD,
    lcsSize: T.DWORD,
    lcsCSType: T.LCSCSTYPE,
    lcsIntent: T.LCSGAMUTMATCH,
    lcsEndpoints: T.CIEXYZTRIPLE,
    lcsGammaRed: T.DWORD,
    lcsGammaGreen: T.DWORD,
    lcsGammaBlue: T.DWORD,
    lcsFilename: ArrayType(T.WCHAR, 260)
});};
T.LPLOGCOLORSPACEW = function() {return Pointer(Struct('tagLOGCOLORSPACEW', {
    lcsSignature: T.DWORD,
    lcsVersion: T.DWORD,
    lcsSize: T.DWORD,
    lcsCSType: T.LCSCSTYPE,
    lcsIntent: T.LCSGAMUTMATCH,
    lcsEndpoints: T.CIEXYZTRIPLE,
    lcsGammaRed: T.DWORD,
    lcsGammaGreen: T.DWORD,
    lcsGammaBlue: T.DWORD,
    lcsFilename: ArrayType(T.WCHAR, 260)
}));};
T.LPLOGCOLORSPACE = function() {return T.LPLOGCOLORSPACEA;};
T.LOGCOLORSPACE = function() {return T.LOGCOLORSPACEA;};
T.ICMENUMPROCA = function() {return Pointer(Fn(T.INT, [[T.LPSTR, 'lpszFilename'], [T.LPARAM, 'lParam']]), [['stdcall']]);};
T.ICMENUMPROCW = function() {return Pointer(Fn(T.INT, [[T.LPWSTR, 'lpszFilename'], [T.LPARAM, 'lParam']]), [['stdcall']]);};
T.ICMENUMPROC = function() {return T.ICMENUMPROCA;};
T.PELARRAY = function() {return Struct('', {
    paXCount: T.LONG,
    paYCount: T.LONG,
    paXExt: T.LONG,
    paYExt: T.LONG,
    paRGBs: T.BYTE
});};
T.PPELARRAY = function() {return Pointer(Struct('', {
    paXCount: T.LONG,
    paYCount: T.LONG,
    paXExt: T.LONG,
    paYExt: T.LONG,
    paRGBs: T.BYTE
}));};
T.LPPELARRAY = function() {return Pointer(Struct('', {
    paXCount: T.LONG,
    paYCount: T.LONG,
    paXExt: T.LONG,
    paYExt: T.LONG,
    paRGBs: T.BYTE
}));};
T.BITMAP = function() {return Struct('', {
    bmType: T.INT,
    bmWidth: T.INT,
    bmHeight: T.INT,
    bmWidthBytes: T.INT,
    bmPlanes: T.WORD,
    bmBitsPixel: T.WORD,
    bmBits: T.LPVOID
});};
T.PBITMAP = function() {return Pointer(Struct('', {
    bmType: T.INT,
    bmWidth: T.INT,
    bmHeight: T.INT,
    bmWidthBytes: T.INT,
    bmPlanes: T.WORD,
    bmBitsPixel: T.WORD,
    bmBits: T.LPVOID
}));};
T.LPBITMAP = function() {return Pointer(Struct('', {
    bmType: T.INT,
    bmWidth: T.INT,
    bmHeight: T.INT,
    bmWidthBytes: T.INT,
    bmPlanes: T.WORD,
    bmBitsPixel: T.WORD,
    bmBits: T.LPVOID
}));};
T.LOGBRUSH = function() {return Struct('', {
    lbStyle: T.UINT,
    lbColor: T.COLORREF,
    lbHatch: T.ULONG_PTR
});};
T.PLOGBRUSH = function() {return Pointer(Struct('', {
    lbStyle: T.UINT,
    lbColor: T.COLORREF,
    lbHatch: T.ULONG_PTR
}));};
T.LPLOGBRUSH = function() {return Pointer(Struct('', {
    lbStyle: T.UINT,
    lbColor: T.COLORREF,
    lbHatch: T.ULONG_PTR
}));};
T.LOGBRUSH32 = function() {return Struct('', {
    lbStyle: T.UINT,
    lbColor: T.COLORREF,
    lbHatch: T.ULONG
});};
T.PLOGBRUSH32 = function() {return Pointer(Struct('', {
    lbStyle: T.UINT,
    lbColor: T.COLORREF,
    lbHatch: T.ULONG
}));};
T.LPLOGBRUSH32 = function() {return Pointer(Struct('', {
    lbStyle: T.UINT,
    lbColor: T.COLORREF,
    lbHatch: T.ULONG
}));};
T.PATTERN = function() {return T.LOGBRUSH;};
T.PPATTERN = function() {return Pointer(T.LOGBRUSH);};
T.LPPATTERN = function() {return Pointer(T.LOGBRUSH);};
T.LOGFONTA = function() {return Struct('tagLOGFONTA', {
    lfHeight: T.LONG,
    lfWidth: T.LONG,
    lfEscapement: T.LONG,
    lfOrientation: T.LONG,
    lfWeight: T.LONG,
    lfItalic: T.BYTE,
    lfUnderline: T.BYTE,
    lfStrikeOut: T.BYTE,
    lfCharSet: T.BYTE,
    lfOutPrecision: T.BYTE,
    lfClipPrecision: T.BYTE,
    lfQuality: T.BYTE,
    lfPitchAndFamily: T.BYTE,
    lfFaceName: ArrayType(T.CHAR, 32)
});};
T.PLOGFONTA = function() {return Pointer(Struct('tagLOGFONTA', {
    lfHeight: T.LONG,
    lfWidth: T.LONG,
    lfEscapement: T.LONG,
    lfOrientation: T.LONG,
    lfWeight: T.LONG,
    lfItalic: T.BYTE,
    lfUnderline: T.BYTE,
    lfStrikeOut: T.BYTE,
    lfCharSet: T.BYTE,
    lfOutPrecision: T.BYTE,
    lfClipPrecision: T.BYTE,
    lfQuality: T.BYTE,
    lfPitchAndFamily: T.BYTE,
    lfFaceName: ArrayType(T.CHAR, 32)
}));};
T.LPLOGFONTA = function() {return Pointer(Struct('tagLOGFONTA', {
    lfHeight: T.LONG,
    lfWidth: T.LONG,
    lfEscapement: T.LONG,
    lfOrientation: T.LONG,
    lfWeight: T.LONG,
    lfItalic: T.BYTE,
    lfUnderline: T.BYTE,
    lfStrikeOut: T.BYTE,
    lfCharSet: T.BYTE,
    lfOutPrecision: T.BYTE,
    lfClipPrecision: T.BYTE,
    lfQuality: T.BYTE,
    lfPitchAndFamily: T.BYTE,
    lfFaceName: ArrayType(T.CHAR, 32)
}));};
T.LOGFONTW = function() {return Struct('tagLOGFONTW', {
    lfHeight: T.LONG,
    lfWidth: T.LONG,
    lfEscapement: T.LONG,
    lfOrientation: T.LONG,
    lfWeight: T.LONG,
    lfItalic: T.BYTE,
    lfUnderline: T.BYTE,
    lfStrikeOut: T.BYTE,
    lfCharSet: T.BYTE,
    lfOutPrecision: T.BYTE,
    lfClipPrecision: T.BYTE,
    lfQuality: T.BYTE,
    lfPitchAndFamily: T.BYTE,
    lfFaceName: ArrayType(T.WCHAR, 32)
});};
T.PLOGFONTW = function() {return Pointer(Struct('tagLOGFONTW', {
    lfHeight: T.LONG,
    lfWidth: T.LONG,
    lfEscapement: T.LONG,
    lfOrientation: T.LONG,
    lfWeight: T.LONG,
    lfItalic: T.BYTE,
    lfUnderline: T.BYTE,
    lfStrikeOut: T.BYTE,
    lfCharSet: T.BYTE,
    lfOutPrecision: T.BYTE,
    lfClipPrecision: T.BYTE,
    lfQuality: T.BYTE,
    lfPitchAndFamily: T.BYTE,
    lfFaceName: ArrayType(T.WCHAR, 32)
}));};
T.LPLOGFONTW = function() {return Pointer(Struct('tagLOGFONTW', {
    lfHeight: T.LONG,
    lfWidth: T.LONG,
    lfEscapement: T.LONG,
    lfOrientation: T.LONG,
    lfWeight: T.LONG,
    lfItalic: T.BYTE,
    lfUnderline: T.BYTE,
    lfStrikeOut: T.BYTE,
    lfCharSet: T.BYTE,
    lfOutPrecision: T.BYTE,
    lfClipPrecision: T.BYTE,
    lfQuality: T.BYTE,
    lfPitchAndFamily: T.BYTE,
    lfFaceName: ArrayType(T.WCHAR, 32)
}));};
T.LOGFONT = function() {return T.LOGFONTA;};
T.PLOGFONT = function() {return T.PLOGFONTA;};
T.LPLOGFONT = function() {return T.LPLOGFONTA;};
T.ENUMLOGFONTA = function() {return Struct('', {
    elfLogFont: T.LOGFONTA,
    elfFullName: ArrayType(T.BYTE, 64),
    elfStyle: ArrayType(T.BYTE, 32)
});};
T.LPENUMLOGFONTA = function() {return Pointer(Struct('', {
    elfLogFont: T.LOGFONTA,
    elfFullName: ArrayType(T.BYTE, 64),
    elfStyle: ArrayType(T.BYTE, 32)
}));};
T.ENUMLOGFONTW = function() {return Struct('', {
    elfLogFont: T.LOGFONTW,
    elfFullName: ArrayType(T.WCHAR, 64),
    elfStyle: ArrayType(T.WCHAR, 32)
});};
T.LPENUMLOGFONTW = function() {return Pointer(Struct('', {
    elfLogFont: T.LOGFONTW,
    elfFullName: ArrayType(T.WCHAR, 64),
    elfStyle: ArrayType(T.WCHAR, 32)
}));};
T.ENUMLOGFONT = function() {return T.ENUMLOGFONTA;};
T.LPENUMLOGFONT = function() {return T.LPENUMLOGFONTA;};
T.ENUMLOGFONTEXA = function() {return Struct('', {
    elfLogFont: T.LOGFONTA,
    elfFullName: ArrayType(T.BYTE, 64),
    elfStyle: ArrayType(T.BYTE, 32),
    elfScript: ArrayType(T.BYTE, 32)
});};
T.LPENUMLOGFONTEXA = function() {return Pointer(Struct('', {
    elfLogFont: T.LOGFONTA,
    elfFullName: ArrayType(T.BYTE, 64),
    elfStyle: ArrayType(T.BYTE, 32),
    elfScript: ArrayType(T.BYTE, 32)
}));};
T.ENUMLOGFONTEXW = function() {return Struct('', {
    elfLogFont: T.LOGFONTW,
    elfFullName: ArrayType(T.WCHAR, 64),
    elfStyle: ArrayType(T.WCHAR, 32),
    elfScript: ArrayType(T.WCHAR, 32)
});};
T.LPENUMLOGFONTEXW = function() {return Pointer(Struct('', {
    elfLogFont: T.LOGFONTW,
    elfFullName: ArrayType(T.WCHAR, 64),
    elfStyle: ArrayType(T.WCHAR, 32),
    elfScript: ArrayType(T.WCHAR, 32)
}));};
T.ENUMLOGFONTEX = function() {return T.ENUMLOGFONTEXA;};
T.LPENUMLOGFONTEX = function() {return T.LPENUMLOGFONTEXA;};
T.DESIGNVECTOR = function() {return Struct('', {
    dvReserved: T.DWORD,
    dvNumAxes: T.DWORD,
    dvValues: ArrayType(T.LONG, 16)
});};
T.PDESIGNVECTOR = function() {return Pointer(Struct('', {
    dvReserved: T.DWORD,
    dvNumAxes: T.DWORD,
    dvValues: ArrayType(T.LONG, 16)
}));};
T.ENUMLOGFONTEXDVA = function() {return Struct('', {
    elfEnumLogfontEx: T.ENUMLOGFONTEXA,
    elfDesignVector: T.DESIGNVECTOR
});};
T.PENUMLOGFONTEXDVA = function() {return Pointer(Struct('', {
    elfEnumLogfontEx: T.ENUMLOGFONTEXA,
    elfDesignVector: T.DESIGNVECTOR
}));};
T.ENUMLOGFONTEXDVW = function() {return Struct('', {
    elfEnumLogfontEx: T.ENUMLOGFONTEXW,
    elfDesignVector: T.DESIGNVECTOR
});};
T.PENUMLOGFONTEXDVW = function() {return Pointer(Struct('', {
    elfEnumLogfontEx: T.ENUMLOGFONTEXW,
    elfDesignVector: T.DESIGNVECTOR
}));};
T.ENUMLOGFONTEXDV = function() {return T.ENUMLOGFONTEXDVA;};
T.PENUMLOGFONTEXDV = function() {return T.PENUMLOGFONTEXDVA;};
T.FONTSIGNATURE = function() {return Struct('', {
    fsUsb: ArrayType(T.DWORD, 4),
    fsCsb: ArrayType(T.DWORD, 2)
});};
T.PFONTSIGNATURE = function() {return Pointer(Struct('', {
    fsUsb: ArrayType(T.DWORD, 4),
    fsCsb: ArrayType(T.DWORD, 2)
}));};
T.LPFONTSIGNATURE = function() {return Pointer(Struct('', {
    fsUsb: ArrayType(T.DWORD, 4),
    fsCsb: ArrayType(T.DWORD, 2)
}));};
T.CHARSETINFO = function() {return Struct('', {
    ciCharset: T.UINT,
    ciACP: T.UINT,
    fs: T.FONTSIGNATURE
});};
T.PCHARSETINFO = function() {return Pointer(Struct('', {
    ciCharset: T.UINT,
    ciACP: T.UINT,
    fs: T.FONTSIGNATURE
}));};
T.LPCHARSETINFO = function() {return Pointer(Struct('', {
    ciCharset: T.UINT,
    ciACP: T.UINT,
    fs: T.FONTSIGNATURE
}));};
T.LOCALESIGNATURE = function() {return Struct('', {
    lsUsb: ArrayType(T.DWORD, 4),
    lsCsbDefault: ArrayType(T.DWORD, 2),
    lsCsbSupported: ArrayType(T.DWORD, 2)
});};
T.PLOCALESIGNATURE = function() {return Pointer(Struct('', {
    lsUsb: ArrayType(T.DWORD, 4),
    lsCsbDefault: ArrayType(T.DWORD, 2),
    lsCsbSupported: ArrayType(T.DWORD, 2)
}));};
T.LPLOCALESIGNATURE = function() {return Pointer(Struct('', {
    lsUsb: ArrayType(T.DWORD, 4),
    lsCsbDefault: ArrayType(T.DWORD, 2),
    lsCsbSupported: ArrayType(T.DWORD, 2)
}));};
T.XFORM = function() {return Struct('tagXFORM', {
    eM11: T.FLOAT,
    eM12: T.FLOAT,
    eM21: T.FLOAT,
    eM22: T.FLOAT,
    eDx: T.FLOAT,
    eDy: T.FLOAT
});};
T.PXFORM = function() {return Pointer(Struct('tagXFORM', {
    eM11: T.FLOAT,
    eM12: T.FLOAT,
    eM21: T.FLOAT,
    eM22: T.FLOAT,
    eDx: T.FLOAT,
    eDy: T.FLOAT
}));};
T.LPXFORM = function() {return Pointer(Struct('tagXFORM', {
    eM11: T.FLOAT,
    eM12: T.FLOAT,
    eM21: T.FLOAT,
    eM22: T.FLOAT,
    eDx: T.FLOAT,
    eDy: T.FLOAT
}));};
T.TEXTMETRICA = function() {return Struct('tagTEXTMETRICA', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.BYTE,
    tmLastChar: T.BYTE,
    tmDefaultChar: T.BYTE,
    tmBreakChar: T.BYTE,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE
});};
T.LPTEXTMETRICA = function() {return Pointer(Struct('tagTEXTMETRICA', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.BYTE,
    tmLastChar: T.BYTE,
    tmDefaultChar: T.BYTE,
    tmBreakChar: T.BYTE,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE
}));};
T.PTEXTMETRICA = function() {return Pointer(Struct('tagTEXTMETRICA', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.BYTE,
    tmLastChar: T.BYTE,
    tmDefaultChar: T.BYTE,
    tmBreakChar: T.BYTE,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE
}));};
T.TEXTMETRICW = function() {return Struct('tagTEXTMETRICW', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.WCHAR,
    tmLastChar: T.WCHAR,
    tmDefaultChar: T.WCHAR,
    tmBreakChar: T.WCHAR,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE
});};
T.LPTEXTMETRICW = function() {return Pointer(Struct('tagTEXTMETRICW', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.WCHAR,
    tmLastChar: T.WCHAR,
    tmDefaultChar: T.WCHAR,
    tmBreakChar: T.WCHAR,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE
}));};
T.PTEXTMETRICW = function() {return Pointer(Struct('tagTEXTMETRICW', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.WCHAR,
    tmLastChar: T.WCHAR,
    tmDefaultChar: T.WCHAR,
    tmBreakChar: T.WCHAR,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE
}));};
T.TEXTMETRIC = function() {return T.TEXTMETRICA;};
T.PTEXTMETRIC = function() {return T.PTEXTMETRICA;};
T.LPTEXTMETRIC = function() {return T.LPTEXTMETRICA;};
T.PANOSE = function() {return Struct('tagPANOSE', {
    bFamilyType: T.BYTE,
    bSerifStyle: T.BYTE,
    bWeight: T.BYTE,
    bProportion: T.BYTE,
    bContrast: T.BYTE,
    bStrokeVariation: T.BYTE,
    bArmStyle: T.BYTE,
    bLetterform: T.BYTE,
    bMidline: T.BYTE,
    bXHeight: T.BYTE
});};
T.LPPANOSE = function() {return Pointer(Struct('tagPANOSE', {
    bFamilyType: T.BYTE,
    bSerifStyle: T.BYTE,
    bWeight: T.BYTE,
    bProportion: T.BYTE,
    bContrast: T.BYTE,
    bStrokeVariation: T.BYTE,
    bArmStyle: T.BYTE,
    bLetterform: T.BYTE,
    bMidline: T.BYTE,
    bXHeight: T.BYTE
}));};
T.EXTLOGFONTA = function() {return Struct('', {
    elfLogFont: T.LOGFONTA,
    elfFullName: ArrayType(T.BYTE, 64),
    elfStyle: ArrayType(T.BYTE, 32),
    elfVersion: T.DWORD,
    elfStyleSize: T.DWORD,
    elfMatch: T.DWORD,
    elfReserved: T.DWORD,
    elfVendorId: ArrayType(T.BYTE, 4),
    elfCulture: T.DWORD,
    elfPanose: T.PANOSE
});};
T.PEXTLOGFONTA = function() {return Pointer(Struct('', {
    elfLogFont: T.LOGFONTA,
    elfFullName: ArrayType(T.BYTE, 64),
    elfStyle: ArrayType(T.BYTE, 32),
    elfVersion: T.DWORD,
    elfStyleSize: T.DWORD,
    elfMatch: T.DWORD,
    elfReserved: T.DWORD,
    elfVendorId: ArrayType(T.BYTE, 4),
    elfCulture: T.DWORD,
    elfPanose: T.PANOSE
}));};
T.LPEXTLOGFONTA = function() {return Pointer(Struct('', {
    elfLogFont: T.LOGFONTA,
    elfFullName: ArrayType(T.BYTE, 64),
    elfStyle: ArrayType(T.BYTE, 32),
    elfVersion: T.DWORD,
    elfStyleSize: T.DWORD,
    elfMatch: T.DWORD,
    elfReserved: T.DWORD,
    elfVendorId: ArrayType(T.BYTE, 4),
    elfCulture: T.DWORD,
    elfPanose: T.PANOSE
}));};
T.EXTLOGFONTW = function() {return Struct('', {
    elfLogFont: T.LOGFONTW,
    elfFullName: ArrayType(T.WCHAR, 64),
    elfStyle: ArrayType(T.WCHAR, 32),
    elfVersion: T.DWORD,
    elfStyleSize: T.DWORD,
    elfMatch: T.DWORD,
    elfReserved: T.DWORD,
    elfVendorId: ArrayType(T.BYTE, 4),
    elfCulture: T.DWORD,
    elfPanose: T.PANOSE
});};
T.PEXTLOGFONTW = function() {return Pointer(Struct('', {
    elfLogFont: T.LOGFONTW,
    elfFullName: ArrayType(T.WCHAR, 64),
    elfStyle: ArrayType(T.WCHAR, 32),
    elfVersion: T.DWORD,
    elfStyleSize: T.DWORD,
    elfMatch: T.DWORD,
    elfReserved: T.DWORD,
    elfVendorId: ArrayType(T.BYTE, 4),
    elfCulture: T.DWORD,
    elfPanose: T.PANOSE
}));};
T.LPEXTLOGFONTW = function() {return Pointer(Struct('', {
    elfLogFont: T.LOGFONTW,
    elfFullName: ArrayType(T.WCHAR, 64),
    elfStyle: ArrayType(T.WCHAR, 32),
    elfVersion: T.DWORD,
    elfStyleSize: T.DWORD,
    elfMatch: T.DWORD,
    elfReserved: T.DWORD,
    elfVendorId: ArrayType(T.BYTE, 4),
    elfCulture: T.DWORD,
    elfPanose: T.PANOSE
}));};
T.EXTLOGFONT = function() {return T.EXTLOGFONTA;};
T.PEXTLOGFONT = function() {return T.PEXTLOGFONTA;};
T.LPEXTLOGFONT = function() {return T.LPEXTLOGFONTA;};
T.OUTLINETEXTMETRICA = function() {return Struct('_OUTLINETEXTMETRICA', {
    otmSize: T.UINT,
    otmTextMetrics: T.TEXTMETRICA,
    otmFiller: T.BYTE,
    otmPanoseNumber: T.PANOSE,
    otmfsSelection: T.UINT,
    otmfsType: T.UINT,
    otmsCharSlopeRise: T.INT,
    otmsCharSlopeRun: T.INT,
    otmItalicAngle: T.INT,
    otmEMSquare: T.UINT,
    otmAscent: T.INT,
    otmDescent: T.INT,
    otmLineGap: T.UINT,
    otmsCapEmHeight: T.UINT,
    otmsXHeight: T.UINT,
    otmrcFontBox: T.RECT,
    otmMacAscent: T.INT,
    otmMacDescent: T.INT,
    otmMacLineGap: T.UINT,
    otmusMinimumPPEM: T.UINT,
    otmptSubscriptSize: T.POINT,
    otmptSubscriptOffset: T.POINT,
    otmptSuperscriptSize: T.POINT,
    otmptSuperscriptOffset: T.POINT,
    otmsStrikeoutSize: T.UINT,
    otmsStrikeoutPosition: T.INT,
    otmsUnderscoreSize: T.INT,
    otmsUnderscorePosition: T.INT,
    otmpFamilyName: T.LPSTR,
    otmpFaceName: T.LPSTR,
    otmpStyleName: T.LPSTR,
    otmpFullName: T.LPSTR
});};
T.POUTLINETEXTMETRICA = function() {return Pointer(Struct('_OUTLINETEXTMETRICA', {
    otmSize: T.UINT,
    otmTextMetrics: T.TEXTMETRICA,
    otmFiller: T.BYTE,
    otmPanoseNumber: T.PANOSE,
    otmfsSelection: T.UINT,
    otmfsType: T.UINT,
    otmsCharSlopeRise: T.INT,
    otmsCharSlopeRun: T.INT,
    otmItalicAngle: T.INT,
    otmEMSquare: T.UINT,
    otmAscent: T.INT,
    otmDescent: T.INT,
    otmLineGap: T.UINT,
    otmsCapEmHeight: T.UINT,
    otmsXHeight: T.UINT,
    otmrcFontBox: T.RECT,
    otmMacAscent: T.INT,
    otmMacDescent: T.INT,
    otmMacLineGap: T.UINT,
    otmusMinimumPPEM: T.UINT,
    otmptSubscriptSize: T.POINT,
    otmptSubscriptOffset: T.POINT,
    otmptSuperscriptSize: T.POINT,
    otmptSuperscriptOffset: T.POINT,
    otmsStrikeoutSize: T.UINT,
    otmsStrikeoutPosition: T.INT,
    otmsUnderscoreSize: T.INT,
    otmsUnderscorePosition: T.INT,
    otmpFamilyName: T.LPSTR,
    otmpFaceName: T.LPSTR,
    otmpStyleName: T.LPSTR,
    otmpFullName: T.LPSTR
}));};
T.LPOUTLINETEXTMETRICA = function() {return Pointer(Struct('_OUTLINETEXTMETRICA', {
    otmSize: T.UINT,
    otmTextMetrics: T.TEXTMETRICA,
    otmFiller: T.BYTE,
    otmPanoseNumber: T.PANOSE,
    otmfsSelection: T.UINT,
    otmfsType: T.UINT,
    otmsCharSlopeRise: T.INT,
    otmsCharSlopeRun: T.INT,
    otmItalicAngle: T.INT,
    otmEMSquare: T.UINT,
    otmAscent: T.INT,
    otmDescent: T.INT,
    otmLineGap: T.UINT,
    otmsCapEmHeight: T.UINT,
    otmsXHeight: T.UINT,
    otmrcFontBox: T.RECT,
    otmMacAscent: T.INT,
    otmMacDescent: T.INT,
    otmMacLineGap: T.UINT,
    otmusMinimumPPEM: T.UINT,
    otmptSubscriptSize: T.POINT,
    otmptSubscriptOffset: T.POINT,
    otmptSuperscriptSize: T.POINT,
    otmptSuperscriptOffset: T.POINT,
    otmsStrikeoutSize: T.UINT,
    otmsStrikeoutPosition: T.INT,
    otmsUnderscoreSize: T.INT,
    otmsUnderscorePosition: T.INT,
    otmpFamilyName: T.LPSTR,
    otmpFaceName: T.LPSTR,
    otmpStyleName: T.LPSTR,
    otmpFullName: T.LPSTR
}));};
T.OUTLINETEXTMETRICW = function() {return Struct('_OUTLINETEXTMETRICW', {
    otmSize: T.UINT,
    otmTextMetrics: T.TEXTMETRICW,
    otmFiller: T.BYTE,
    otmPanoseNumber: T.PANOSE,
    otmfsSelection: T.UINT,
    otmfsType: T.UINT,
    otmsCharSlopeRise: T.INT,
    otmsCharSlopeRun: T.INT,
    otmItalicAngle: T.INT,
    otmEMSquare: T.UINT,
    otmAscent: T.INT,
    otmDescent: T.INT,
    otmLineGap: T.UINT,
    otmsCapEmHeight: T.UINT,
    otmsXHeight: T.UINT,
    otmrcFontBox: T.RECT,
    otmMacAscent: T.INT,
    otmMacDescent: T.INT,
    otmMacLineGap: T.UINT,
    otmusMinimumPPEM: T.UINT,
    otmptSubscriptSize: T.POINT,
    otmptSubscriptOffset: T.POINT,
    otmptSuperscriptSize: T.POINT,
    otmptSuperscriptOffset: T.POINT,
    otmsStrikeoutSize: T.UINT,
    otmsStrikeoutPosition: T.INT,
    otmsUnderscoreSize: T.INT,
    otmsUnderscorePosition: T.INT,
    otmpFamilyName: T.LPSTR,
    otmpFaceName: T.LPSTR,
    otmpStyleName: T.LPSTR,
    otmpFullName: T.LPSTR
});};
T.POUTLINETEXTMETRICW = function() {return Pointer(Struct('_OUTLINETEXTMETRICW', {
    otmSize: T.UINT,
    otmTextMetrics: T.TEXTMETRICW,
    otmFiller: T.BYTE,
    otmPanoseNumber: T.PANOSE,
    otmfsSelection: T.UINT,
    otmfsType: T.UINT,
    otmsCharSlopeRise: T.INT,
    otmsCharSlopeRun: T.INT,
    otmItalicAngle: T.INT,
    otmEMSquare: T.UINT,
    otmAscent: T.INT,
    otmDescent: T.INT,
    otmLineGap: T.UINT,
    otmsCapEmHeight: T.UINT,
    otmsXHeight: T.UINT,
    otmrcFontBox: T.RECT,
    otmMacAscent: T.INT,
    otmMacDescent: T.INT,
    otmMacLineGap: T.UINT,
    otmusMinimumPPEM: T.UINT,
    otmptSubscriptSize: T.POINT,
    otmptSubscriptOffset: T.POINT,
    otmptSuperscriptSize: T.POINT,
    otmptSuperscriptOffset: T.POINT,
    otmsStrikeoutSize: T.UINT,
    otmsStrikeoutPosition: T.INT,
    otmsUnderscoreSize: T.INT,
    otmsUnderscorePosition: T.INT,
    otmpFamilyName: T.LPSTR,
    otmpFaceName: T.LPSTR,
    otmpStyleName: T.LPSTR,
    otmpFullName: T.LPSTR
}));};
T.LPOUTLINETEXTMETRICW = function() {return Pointer(Struct('_OUTLINETEXTMETRICW', {
    otmSize: T.UINT,
    otmTextMetrics: T.TEXTMETRICW,
    otmFiller: T.BYTE,
    otmPanoseNumber: T.PANOSE,
    otmfsSelection: T.UINT,
    otmfsType: T.UINT,
    otmsCharSlopeRise: T.INT,
    otmsCharSlopeRun: T.INT,
    otmItalicAngle: T.INT,
    otmEMSquare: T.UINT,
    otmAscent: T.INT,
    otmDescent: T.INT,
    otmLineGap: T.UINT,
    otmsCapEmHeight: T.UINT,
    otmsXHeight: T.UINT,
    otmrcFontBox: T.RECT,
    otmMacAscent: T.INT,
    otmMacDescent: T.INT,
    otmMacLineGap: T.UINT,
    otmusMinimumPPEM: T.UINT,
    otmptSubscriptSize: T.POINT,
    otmptSubscriptOffset: T.POINT,
    otmptSuperscriptSize: T.POINT,
    otmptSuperscriptOffset: T.POINT,
    otmsStrikeoutSize: T.UINT,
    otmsStrikeoutPosition: T.INT,
    otmsUnderscoreSize: T.INT,
    otmsUnderscorePosition: T.INT,
    otmpFamilyName: T.LPSTR,
    otmpFaceName: T.LPSTR,
    otmpStyleName: T.LPSTR,
    otmpFullName: T.LPSTR
}));};
T.OUTLINETEXTMETRIC = function() {return T.OUTLINETEXTMETRICA;};
T.POUTLINETEXTMETRIC = function() {return T.POUTLINETEXTMETRICA;};
T.LPOUTLINETEXTMETRIC = function() {return T.LPOUTLINETEXTMETRICA;};
T.POLYTEXTA = function() {return Struct('', {
    x: T.INT,
    y: T.INT,
    n: T.UINT,
    lpstr: T.LPCSTR,
    uiFlags: T.UINT,
    rcl: T.RECT,
    pdx: Pointer(T.INT)
});};
T.PPOLYTEXTA = function() {return Pointer(Struct('', {
    x: T.INT,
    y: T.INT,
    n: T.UINT,
    lpstr: T.LPCSTR,
    uiFlags: T.UINT,
    rcl: T.RECT,
    pdx: Pointer(T.INT)
}));};
T.LPPOLYTEXTA = function() {return Pointer(Struct('', {
    x: T.INT,
    y: T.INT,
    n: T.UINT,
    lpstr: T.LPCSTR,
    uiFlags: T.UINT,
    rcl: T.RECT,
    pdx: Pointer(T.INT)
}));};
T.POLYTEXTW = function() {return Struct('', {
    x: T.INT,
    y: T.INT,
    n: T.UINT,
    lpstr: T.LPCWSTR,
    uiFlags: T.UINT,
    rcl: T.RECT,
    pdx: Pointer(T.INT)
});};
T.PPOLYTEXTW = function() {return Pointer(Struct('', {
    x: T.INT,
    y: T.INT,
    n: T.UINT,
    lpstr: T.LPCWSTR,
    uiFlags: T.UINT,
    rcl: T.RECT,
    pdx: Pointer(T.INT)
}));};
T.LPPOLYTEXTW = function() {return Pointer(Struct('', {
    x: T.INT,
    y: T.INT,
    n: T.UINT,
    lpstr: T.LPCWSTR,
    uiFlags: T.UINT,
    rcl: T.RECT,
    pdx: Pointer(T.INT)
}));};
T.POLYTEXT = function() {return T.POLYTEXTA;};
T.PPOLYTEXT = function() {return T.PPOLYTEXTA;};
T.LPPOLYTEXT = function() {return T.LPPOLYTEXTA;};
T.NEWTEXTMETRICA = function() {return Struct('', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.BYTE,
    tmLastChar: T.BYTE,
    tmDefaultChar: T.BYTE,
    tmBreakChar: T.BYTE,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE,
    ntmFlags: T.DWORD,
    ntmSizeEM: T.UINT,
    ntmCellHeight: T.UINT,
    ntmAvgWidth: T.UINT
});};
T.PNEWTEXTMETRICA = function() {return Pointer(Struct('', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.BYTE,
    tmLastChar: T.BYTE,
    tmDefaultChar: T.BYTE,
    tmBreakChar: T.BYTE,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE,
    ntmFlags: T.DWORD,
    ntmSizeEM: T.UINT,
    ntmCellHeight: T.UINT,
    ntmAvgWidth: T.UINT
}));};
T.LPNEWTEXTMETRICA = function() {return Pointer(Struct('', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.BYTE,
    tmLastChar: T.BYTE,
    tmDefaultChar: T.BYTE,
    tmBreakChar: T.BYTE,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE,
    ntmFlags: T.DWORD,
    ntmSizeEM: T.UINT,
    ntmCellHeight: T.UINT,
    ntmAvgWidth: T.UINT
}));};
T.NEWTEXTMETRICW = function() {return Struct('', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.WCHAR,
    tmLastChar: T.WCHAR,
    tmDefaultChar: T.WCHAR,
    tmBreakChar: T.WCHAR,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE,
    ntmFlags: T.DWORD,
    ntmSizeEM: T.UINT,
    ntmCellHeight: T.UINT,
    ntmAvgWidth: T.UINT
});};
T.PNEWTEXTMETRICW = function() {return Pointer(Struct('', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.WCHAR,
    tmLastChar: T.WCHAR,
    tmDefaultChar: T.WCHAR,
    tmBreakChar: T.WCHAR,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE,
    ntmFlags: T.DWORD,
    ntmSizeEM: T.UINT,
    ntmCellHeight: T.UINT,
    ntmAvgWidth: T.UINT
}));};
T.LPNEWTEXTMETRICW = function() {return Pointer(Struct('', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.WCHAR,
    tmLastChar: T.WCHAR,
    tmDefaultChar: T.WCHAR,
    tmBreakChar: T.WCHAR,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE,
    ntmFlags: T.DWORD,
    ntmSizeEM: T.UINT,
    ntmCellHeight: T.UINT,
    ntmAvgWidth: T.UINT
}));};
T.NEWTEXTMETRIC = function() {return T.NEWTEXTMETRICA;};
T.PNEWTEXTMETRIC = function() {return T.PNEWTEXTMETRICA;};
T.LPNEWTEXTMETRIC = function() {return T.LPNEWTEXTMETRICA;};
T.NEWTEXTMETRICEXA = function() {return Struct('', {
    ntmTm: T.NEWTEXTMETRICA,
    ntmFontSig: T.FONTSIGNATURE
});};
T.NEWTEXTMETRICEXW = function() {return Struct('', {
    ntmTm: T.NEWTEXTMETRICW,
    ntmFontSig: T.FONTSIGNATURE
});};
T.NEWTEXTMETRICEX = function() {return T.NEWTEXTMETRICEXA;};
T.OLDFONTENUMPROCA = function() {return Pointer(Fn(T.i32, [[Pointer(T.LOGFONTA)], [Pointer(T.TEXTMETRICA)], [T.DWORD], [T.LPARAM]]), [['stdcall']]);};
T.OLDFONTENUMPROCW = function() {return Pointer(Fn(T.i32, [[Pointer(T.LOGFONTW)], [Pointer(T.TEXTMETRICW)], [T.DWORD], [T.LPARAM]]), [['stdcall']]);};
T.OLDFONTENUMPROC = function() {return T.OLDFONTENUMPROCA;};
T.FONTENUMPROCA = function() {return T.OLDFONTENUMPROCA;};
T.FONTENUMPROCW = function() {return T.OLDFONTENUMPROCW;};
T.FONTENUMPROC = function() {return T.FONTENUMPROCA;};
T.GOBJENUMPROC = function() {return Pointer(Fn(T.INT, [[T.LPVOID], [T.LPARAM]]), [['stdcall']]);};
T.LINEDDAPROC = function() {return Pointer(Fn(null, [[T.INT], [T.INT], [T.LPARAM]]), [['stdcall']]);};
T.GLYPHMETRICS = function() {return Struct('', {
    gmBlackBoxX: T.UINT,
    gmBlackBoxY: T.UINT,
    gmptGlyphOrigin: T.POINT,
    gmCellIncX: T.SHORT,
    gmCellIncY: T.SHORT
});};
T.LPGLYPHMETRICS = function() {return Pointer(Struct('', {
    gmBlackBoxX: T.UINT,
    gmBlackBoxY: T.UINT,
    gmptGlyphOrigin: T.POINT,
    gmCellIncX: T.SHORT,
    gmCellIncY: T.SHORT
}));};
T.FIXED = function() {return Struct('', {
    fract: T.WORD,
    value: T.SHORT
});};
T.POINTFX = function() {return Struct('tagPOINTFX', {
    x: T.FIXED,
    y: T.FIXED
});};
T.LPPOINTFX = function() {return Pointer(Struct('tagPOINTFX', {
    x: T.FIXED,
    y: T.FIXED
}));};
T.TTPOLYCURVE = function() {return Struct('tagTTPOLYCURVE', {
    wType: T.WORD,
    cpfx: T.WORD,
    apfx: ArrayType(T.POINTFX, 1)
});};
T.LPTTPOLYCURVE = function() {return Pointer(Struct('tagTTPOLYCURVE', {
    wType: T.WORD,
    cpfx: T.WORD,
    apfx: ArrayType(T.POINTFX, 1)
}));};
T.TTPOLYGONHEADER = function() {return Struct('tagTTPOLYGONHEADER', {
    cb: T.DWORD,
    dwType: T.DWORD,
    pfxStart: T.POINTFX
});};
T.LPTTPOLYGONHEADER = function() {return Pointer(Struct('tagTTPOLYGONHEADER', {
    cb: T.DWORD,
    dwType: T.DWORD,
    pfxStart: T.POINTFX
}));};
T.MAT2 = function() {return Struct('', {
    eM11: T.FIXED,
    eM12: T.FIXED,
    eM21: T.FIXED,
    eM22: T.FIXED
});};
T.LPMAT2 = function() {return Pointer(Struct('', {
    eM11: T.FIXED,
    eM12: T.FIXED,
    eM21: T.FIXED,
    eM22: T.FIXED
}));};
T.ABC = function() {return Struct('', {
    abcA: T.INT,
    abcB: T.UINT,
    abcC: T.INT
});};
T.PABC = function() {return Pointer(Struct('', {
    abcA: T.INT,
    abcB: T.UINT,
    abcC: T.INT
}));};
T.LPABC = function() {return Pointer(Struct('', {
    abcA: T.INT,
    abcB: T.UINT,
    abcC: T.INT
}));};
T.GCP_RESULTSA = function() {return Struct('tagGCP_RESULTSA', {
    lStructSize: T.DWORD,
    lpOutString: T.LPSTR,
    lpOrder: Pointer(T.UINT),
    lpDx: Pointer(T.INT),
    lpCaretPos: Pointer(T.INT),
    lpClass: T.LPSTR,
    lpGlyphs: T.LPWSTR,
    nGlyphs: T.UINT,
    nMaxFit: T.UINT
});};
T.LPGCP_RESULTSA = function() {return Pointer(Struct('tagGCP_RESULTSA', {
    lStructSize: T.DWORD,
    lpOutString: T.LPSTR,
    lpOrder: Pointer(T.UINT),
    lpDx: Pointer(T.INT),
    lpCaretPos: Pointer(T.INT),
    lpClass: T.LPSTR,
    lpGlyphs: T.LPWSTR,
    nGlyphs: T.UINT,
    nMaxFit: T.UINT
}));};
T.GCP_RESULTSW = function() {return Struct('tagGCP_RESULTSW', {
    lStructSize: T.DWORD,
    lpOutString: T.LPWSTR,
    lpOrder: Pointer(T.UINT),
    lpDx: Pointer(T.INT),
    lpCaretPos: Pointer(T.INT),
    lpClass: T.LPSTR,
    lpGlyphs: T.LPWSTR,
    nGlyphs: T.UINT,
    nMaxFit: T.UINT
});};
T.LPGCP_RESULTSW = function() {return Pointer(Struct('tagGCP_RESULTSW', {
    lStructSize: T.DWORD,
    lpOutString: T.LPWSTR,
    lpOrder: Pointer(T.UINT),
    lpDx: Pointer(T.INT),
    lpCaretPos: Pointer(T.INT),
    lpClass: T.LPSTR,
    lpGlyphs: T.LPWSTR,
    nGlyphs: T.UINT,
    nMaxFit: T.UINT
}));};
T.GCP_RESULTS = function() {return T.GCP_RESULTSA;};
T.LPGCP_RESULTS = function() {return T.LPGCP_RESULTSA;};
T.RASTERIZER_STATUS = function() {return Struct('', {
    nSize: T.SHORT,
    wFlags: T.SHORT,
    nLanguageID: T.SHORT
});};
T.LPRASTERIZER_STATUS = function() {return Pointer(Struct('', {
    nSize: T.SHORT,
    wFlags: T.SHORT,
    nLanguageID: T.SHORT
}));};
T.POINTFLOAT = function() {return Struct('', {
    x: T.FLOAT,
    y: T.FLOAT
});};
T.PPOINTFLOAT = function() {return Pointer(Struct('', {
    x: T.FLOAT,
    y: T.FLOAT
}));};
T.GLYPHMETRICSFLOAT = function() {return Struct('', {
    gmfBlackBoxX: T.FLOAT,
    gmfBlackBoxY: T.FLOAT,
    gmfptGlyphOrigin: T.POINTFLOAT,
    gmfCellIncX: T.FLOAT,
    gmfCellIncY: T.FLOAT
});};
T.PGLYPHMETRICSFLOAT = function() {return Pointer(Struct('', {
    gmfBlackBoxX: T.FLOAT,
    gmfBlackBoxY: T.FLOAT,
    gmfptGlyphOrigin: T.POINTFLOAT,
    gmfCellIncX: T.FLOAT,
    gmfCellIncY: T.FLOAT
}));};
T.LPGLYPHMETRICSFLOAT = function() {return Pointer(Struct('', {
    gmfBlackBoxX: T.FLOAT,
    gmfBlackBoxY: T.FLOAT,
    gmfptGlyphOrigin: T.POINTFLOAT,
    gmfCellIncX: T.FLOAT,
    gmfCellIncY: T.FLOAT
}));};
T.LAYERPLANEDESCRIPTOR = function() {return Struct('', {
    nSize: T.WORD,
    nVersion: T.WORD,
    dwFlags: T.DWORD,
    iPixelType: T.BYTE,
    cColorBits: T.BYTE,
    cRedBits: T.BYTE,
    cRedShift: T.BYTE,
    cGreenBits: T.BYTE,
    cGreenShift: T.BYTE,
    cBlueBits: T.BYTE,
    cBlueShift: T.BYTE,
    cAlphaBits: T.BYTE,
    cAlphaShift: T.BYTE,
    cAccumBits: T.BYTE,
    cAccumRedBits: T.BYTE,
    cAccumGreenBits: T.BYTE,
    cAccumBlueBits: T.BYTE,
    cAccumAlphaBits: T.BYTE,
    cDepthBits: T.BYTE,
    cStencilBits: T.BYTE,
    cAuxBuffers: T.BYTE,
    iLayerPlane: T.BYTE,
    bReserved: T.BYTE,
    crTransparent: T.COLORREF
});};
T.PLAYERPLANEDESCRIPTOR = function() {return Pointer(Struct('', {
    nSize: T.WORD,
    nVersion: T.WORD,
    dwFlags: T.DWORD,
    iPixelType: T.BYTE,
    cColorBits: T.BYTE,
    cRedBits: T.BYTE,
    cRedShift: T.BYTE,
    cGreenBits: T.BYTE,
    cGreenShift: T.BYTE,
    cBlueBits: T.BYTE,
    cBlueShift: T.BYTE,
    cAlphaBits: T.BYTE,
    cAlphaShift: T.BYTE,
    cAccumBits: T.BYTE,
    cAccumRedBits: T.BYTE,
    cAccumGreenBits: T.BYTE,
    cAccumBlueBits: T.BYTE,
    cAccumAlphaBits: T.BYTE,
    cDepthBits: T.BYTE,
    cStencilBits: T.BYTE,
    cAuxBuffers: T.BYTE,
    iLayerPlane: T.BYTE,
    bReserved: T.BYTE,
    crTransparent: T.COLORREF
}));};
T.LPLAYERPLANEDESCRIPTOR = function() {return Pointer(Struct('', {
    nSize: T.WORD,
    nVersion: T.WORD,
    dwFlags: T.DWORD,
    iPixelType: T.BYTE,
    cColorBits: T.BYTE,
    cRedBits: T.BYTE,
    cRedShift: T.BYTE,
    cGreenBits: T.BYTE,
    cGreenShift: T.BYTE,
    cBlueBits: T.BYTE,
    cBlueShift: T.BYTE,
    cAlphaBits: T.BYTE,
    cAlphaShift: T.BYTE,
    cAccumBits: T.BYTE,
    cAccumRedBits: T.BYTE,
    cAccumGreenBits: T.BYTE,
    cAccumBlueBits: T.BYTE,
    cAccumAlphaBits: T.BYTE,
    cDepthBits: T.BYTE,
    cStencilBits: T.BYTE,
    cAuxBuffers: T.BYTE,
    iLayerPlane: T.BYTE,
    bReserved: T.BYTE,
    crTransparent: T.COLORREF
}));};
T.PALETTEENTRY = function() {return Struct('tagPALETTEENTRY', {
    peRed: T.BYTE,
    peGreen: T.BYTE,
    peBlue: T.BYTE,
    peFlags: T.BYTE
});};
T.PPALETTEENTRY = function() {return Pointer(Struct('tagPALETTEENTRY', {
    peRed: T.BYTE,
    peGreen: T.BYTE,
    peBlue: T.BYTE,
    peFlags: T.BYTE
}));};
T.LPPALETTEENTRY = function() {return Pointer(Struct('tagPALETTEENTRY', {
    peRed: T.BYTE,
    peGreen: T.BYTE,
    peBlue: T.BYTE,
    peFlags: T.BYTE
}));};
T.LOGPALETTE = function() {return Struct('tagLOGPALETTE', {
    palVersion: T.WORD,
    palNumEntries: T.WORD,
    palPalEntry: ArrayType(T.PALETTEENTRY, 1)
});};
T.PLOGPALETTE = function() {return Pointer(Struct('tagLOGPALETTE', {
    palVersion: T.WORD,
    palNumEntries: T.WORD,
    palPalEntry: ArrayType(T.PALETTEENTRY, 1)
}));};
T.LPLOGPALETTE = function() {return Pointer(Struct('tagLOGPALETTE', {
    palVersion: T.WORD,
    palNumEntries: T.WORD,
    palPalEntry: ArrayType(T.PALETTEENTRY, 1)
}));};
T.NPLOGPALETTE = function() {return Pointer(Struct('tagLOGPALETTE', {
    palVersion: T.WORD,
    palNumEntries: T.WORD,
    palPalEntry: ArrayType(T.PALETTEENTRY, 1)
}));};
T.LOGPEN = function() {return Struct('', {
    lopnStyle: T.UINT,
    lopnWidth: T.POINT,
    lopnColor: T.COLORREF
});};
T.LPLOGPEN = function() {return Pointer(Struct('', {
    lopnStyle: T.UINT,
    lopnWidth: T.POINT,
    lopnColor: T.COLORREF
}));};
T.EXTLOGPEN = function() {return Struct('tagEXTLOGPEN', {
    elpPenStyle: T.DWORD,
    elpWidth: T.DWORD,
    elpBrushStyle: T.UINT,
    elpColor: T.COLORREF,
    elpHatch: T.ULONG_PTR,
    elpNumEntries: T.DWORD,
    elpStyleEntry: ArrayType(T.DWORD, 1)
});};
T.PEXTLOGPEN = function() {return Pointer(Struct('tagEXTLOGPEN', {
    elpPenStyle: T.DWORD,
    elpWidth: T.DWORD,
    elpBrushStyle: T.UINT,
    elpColor: T.COLORREF,
    elpHatch: T.ULONG_PTR,
    elpNumEntries: T.DWORD,
    elpStyleEntry: ArrayType(T.DWORD, 1)
}));};
T.NPEXTLOGPEN = function() {return Pointer(Struct('tagEXTLOGPEN', {
    elpPenStyle: T.DWORD,
    elpWidth: T.DWORD,
    elpBrushStyle: T.UINT,
    elpColor: T.COLORREF,
    elpHatch: T.ULONG_PTR,
    elpNumEntries: T.DWORD,
    elpStyleEntry: ArrayType(T.DWORD, 1)
}));};
T.LPEXTLOGPEN = function() {return Pointer(Struct('tagEXTLOGPEN', {
    elpPenStyle: T.DWORD,
    elpWidth: T.DWORD,
    elpBrushStyle: T.UINT,
    elpColor: T.COLORREF,
    elpHatch: T.ULONG_PTR,
    elpNumEntries: T.DWORD,
    elpStyleEntry: ArrayType(T.DWORD, 1)
}));};
T.RGBQUAD = function() {return Struct('tagRGBQUAD', {
    rgbBlue: T.BYTE,
    rgbGreen: T.BYTE,
    rgbRed: T.BYTE,
    rgbReserved: T.BYTE
});};
T.LPRGBQUAD = function() {return Pointer(Struct('tagRGBQUAD', {
    rgbBlue: T.BYTE,
    rgbGreen: T.BYTE,
    rgbRed: T.BYTE,
    rgbReserved: T.BYTE
}));};
T.RGBTRIPLE = function() {return Struct('tagRGBTRIPLE', {
    rgbtBlue: T.BYTE,
    rgbtGreen: T.BYTE,
    rgbtRed: T.BYTE
});};
T.BITMAPFILEHEADER = function() {return Struct('', {
    bfType: T.WORD,
    bfSize: T.DWORD,
    bfReserved1: T.WORD,
    bfReserved2: T.WORD,
    bfOffBits: T.DWORD
});};
T.PBITMAPFILEHEADER = function() {return Pointer(Struct('', {
    bfType: T.WORD,
    bfSize: T.DWORD,
    bfReserved1: T.WORD,
    bfReserved2: T.WORD,
    bfOffBits: T.DWORD
}));};
T.LPBITMAPFILEHEADER = function() {return Pointer(Struct('', {
    bfType: T.WORD,
    bfSize: T.DWORD,
    bfReserved1: T.WORD,
    bfReserved2: T.WORD,
    bfOffBits: T.DWORD
}));};
T.BITMAPINFOHEADER = function() {return Struct('', {
    biSize: T.DWORD,
    biWidth: T.LONG,
    biHeight: T.LONG,
    biPlanes: T.WORD,
    biBitCount: T.WORD,
    biCompression: T.DWORD,
    biSizeImage: T.DWORD,
    biXPelsPerMeter: T.LONG,
    biYPelsPerMeter: T.LONG,
    biClrUsed: T.DWORD,
    biClrImportant: T.DWORD
});};
T.PBITMAPINFOHEADER = function() {return Pointer(Struct('', {
    biSize: T.DWORD,
    biWidth: T.LONG,
    biHeight: T.LONG,
    biPlanes: T.WORD,
    biBitCount: T.WORD,
    biCompression: T.DWORD,
    biSizeImage: T.DWORD,
    biXPelsPerMeter: T.LONG,
    biYPelsPerMeter: T.LONG,
    biClrUsed: T.DWORD,
    biClrImportant: T.DWORD
}));};
T.LPBITMAPINFOHEADER = function() {return Pointer(Struct('', {
    biSize: T.DWORD,
    biWidth: T.LONG,
    biHeight: T.LONG,
    biPlanes: T.WORD,
    biBitCount: T.WORD,
    biCompression: T.DWORD,
    biSizeImage: T.DWORD,
    biXPelsPerMeter: T.LONG,
    biYPelsPerMeter: T.LONG,
    biClrUsed: T.DWORD,
    biClrImportant: T.DWORD
}));};
T.BITMAPV4HEADER = function() {return Struct('', {
    bV4Size: T.DWORD,
    bV4Width: T.LONG,
    bV4Height: T.LONG,
    bV4Planes: T.WORD,
    bV4BitCount: T.WORD,
    bV4V4Compression: T.DWORD,
    bV4SizeImage: T.DWORD,
    bV4XPelsPerMeter: T.LONG,
    bV4YPelsPerMeter: T.LONG,
    bV4ClrUsed: T.DWORD,
    bV4ClrImportant: T.DWORD,
    bV4RedMask: T.DWORD,
    bV4GreenMask: T.DWORD,
    bV4BlueMask: T.DWORD,
    bV4AlphaMask: T.DWORD,
    bV4CSType: T.DWORD,
    bV4Endpoints: T.CIEXYZTRIPLE,
    bV4GammaRed: T.DWORD,
    bV4GammaGreen: T.DWORD,
    bV4GammaBlue: T.DWORD
});};
T.PBITMAPV4HEADER = function() {return Pointer(Struct('', {
    bV4Size: T.DWORD,
    bV4Width: T.LONG,
    bV4Height: T.LONG,
    bV4Planes: T.WORD,
    bV4BitCount: T.WORD,
    bV4V4Compression: T.DWORD,
    bV4SizeImage: T.DWORD,
    bV4XPelsPerMeter: T.LONG,
    bV4YPelsPerMeter: T.LONG,
    bV4ClrUsed: T.DWORD,
    bV4ClrImportant: T.DWORD,
    bV4RedMask: T.DWORD,
    bV4GreenMask: T.DWORD,
    bV4BlueMask: T.DWORD,
    bV4AlphaMask: T.DWORD,
    bV4CSType: T.DWORD,
    bV4Endpoints: T.CIEXYZTRIPLE,
    bV4GammaRed: T.DWORD,
    bV4GammaGreen: T.DWORD,
    bV4GammaBlue: T.DWORD
}));};
T.BITMAPV5HEADER = function() {return Struct('', {
    bV5Size: T.DWORD,
    bV5Width: T.LONG,
    bV5Height: T.LONG,
    bV5Planes: T.WORD,
    bV5BitCount: T.WORD,
    bV5Compression: T.DWORD,
    bV5SizeImage: T.DWORD,
    bV5XPelsPerMeter: T.LONG,
    bV5YPelsPerMeter: T.LONG,
    bV5ClrUsed: T.DWORD,
    bV5ClrImportant: T.DWORD,
    bV5RedMask: T.DWORD,
    bV5GreenMask: T.DWORD,
    bV5BlueMask: T.DWORD,
    bV5AlphaMask: T.DWORD,
    bV5CSType: T.DWORD,
    bV5Endpoints: T.CIEXYZTRIPLE,
    bV5GammaRed: T.DWORD,
    bV5GammaGreen: T.DWORD,
    bV5GammaBlue: T.DWORD,
    bV5Intent: T.DWORD,
    bV5ProfileData: T.DWORD,
    bV5ProfileSize: T.DWORD,
    bV5Reserved: T.DWORD
});};
T.LPBITMAPV5HEADER = function() {return Pointer(Struct('', {
    bV5Size: T.DWORD,
    bV5Width: T.LONG,
    bV5Height: T.LONG,
    bV5Planes: T.WORD,
    bV5BitCount: T.WORD,
    bV5Compression: T.DWORD,
    bV5SizeImage: T.DWORD,
    bV5XPelsPerMeter: T.LONG,
    bV5YPelsPerMeter: T.LONG,
    bV5ClrUsed: T.DWORD,
    bV5ClrImportant: T.DWORD,
    bV5RedMask: T.DWORD,
    bV5GreenMask: T.DWORD,
    bV5BlueMask: T.DWORD,
    bV5AlphaMask: T.DWORD,
    bV5CSType: T.DWORD,
    bV5Endpoints: T.CIEXYZTRIPLE,
    bV5GammaRed: T.DWORD,
    bV5GammaGreen: T.DWORD,
    bV5GammaBlue: T.DWORD,
    bV5Intent: T.DWORD,
    bV5ProfileData: T.DWORD,
    bV5ProfileSize: T.DWORD,
    bV5Reserved: T.DWORD
}));};
T.PBITMAPV5HEADER = function() {return Pointer(Struct('', {
    bV5Size: T.DWORD,
    bV5Width: T.LONG,
    bV5Height: T.LONG,
    bV5Planes: T.WORD,
    bV5BitCount: T.WORD,
    bV5Compression: T.DWORD,
    bV5SizeImage: T.DWORD,
    bV5XPelsPerMeter: T.LONG,
    bV5YPelsPerMeter: T.LONG,
    bV5ClrUsed: T.DWORD,
    bV5ClrImportant: T.DWORD,
    bV5RedMask: T.DWORD,
    bV5GreenMask: T.DWORD,
    bV5BlueMask: T.DWORD,
    bV5AlphaMask: T.DWORD,
    bV5CSType: T.DWORD,
    bV5Endpoints: T.CIEXYZTRIPLE,
    bV5GammaRed: T.DWORD,
    bV5GammaGreen: T.DWORD,
    bV5GammaBlue: T.DWORD,
    bV5Intent: T.DWORD,
    bV5ProfileData: T.DWORD,
    bV5ProfileSize: T.DWORD,
    bV5Reserved: T.DWORD
}));};
T.BITMAPINFO = function() {return Struct('tagBITMAPINFO', {
    bmiHeader: T.BITMAPINFOHEADER,
    bmiColors: ArrayType(T.RGBQUAD, 1)
});};
T.PBITMAPINFO = function() {return Pointer(Struct('tagBITMAPINFO', {
    bmiHeader: T.BITMAPINFOHEADER,
    bmiColors: ArrayType(T.RGBQUAD, 1)
}));};
T.LPBITMAPINFO = function() {return Pointer(Struct('tagBITMAPINFO', {
    bmiHeader: T.BITMAPINFOHEADER,
    bmiColors: ArrayType(T.RGBQUAD, 1)
}));};
T.BITMAPCOREHEADER = function() {return Struct('', {
    bcSize: T.DWORD,
    bcWidth: T.WORD,
    bcHeight: T.WORD,
    bcPlanes: T.WORD,
    bcBitCount: T.WORD
});};
T.PBITMAPCOREHEADER = function() {return Pointer(Struct('', {
    bcSize: T.DWORD,
    bcWidth: T.WORD,
    bcHeight: T.WORD,
    bcPlanes: T.WORD,
    bcBitCount: T.WORD
}));};
T.LPBITMAPCOREHEADER = function() {return Pointer(Struct('', {
    bcSize: T.DWORD,
    bcWidth: T.WORD,
    bcHeight: T.WORD,
    bcPlanes: T.WORD,
    bcBitCount: T.WORD
}));};
T.BITMAPCOREINFO = function() {return Struct('', {
    bmciHeader: T.BITMAPCOREHEADER,
    bmciColors: ArrayType(T.RGBTRIPLE, 1)
});};
T.PBITMAPCOREINFO = function() {return Pointer(Struct('', {
    bmciHeader: T.BITMAPCOREHEADER,
    bmciColors: ArrayType(T.RGBTRIPLE, 1)
}));};
T.LPBITMAPCOREINFO = function() {return Pointer(Struct('', {
    bmciHeader: T.BITMAPCOREHEADER,
    bmciColors: ArrayType(T.RGBTRIPLE, 1)
}));};
T.DIBSECTION = function() {return Struct('', {
    dsBm: T.BITMAP,
    dsBmih: T.BITMAPINFOHEADER,
    dsBitfields: ArrayType(T.DWORD, 3),
    dshSection: T.HANDLE,
    dsOffset: T.DWORD
});};
T.PDIBSECTION = function() {return Pointer(Struct('', {
    dsBm: T.BITMAP,
    dsBmih: T.BITMAPINFOHEADER,
    dsBitfields: ArrayType(T.DWORD, 3),
    dshSection: T.HANDLE,
    dsOffset: T.DWORD
}));};
T.LPDIBSECTION = function() {return Pointer(Struct('', {
    dsBm: T.BITMAP,
    dsBmih: T.BITMAPINFOHEADER,
    dsBitfields: ArrayType(T.DWORD, 3),
    dshSection: T.HANDLE,
    dsOffset: T.DWORD
}));};
T.METAHEADER = function() {return Struct('', {
    mtType: T.WORD,
    mtHeaderSize: T.WORD,
    mtVersion: T.WORD,
    mtSize: T.DWORD,
    mtNoObjects: T.WORD,
    mtMaxRecord: T.DWORD,
    mtNoParameters: T.WORD
});};
T.PMETAHEADER = function() {return Pointer(Struct('', {
    mtType: T.WORD,
    mtHeaderSize: T.WORD,
    mtVersion: T.WORD,
    mtSize: T.DWORD,
    mtNoObjects: T.WORD,
    mtMaxRecord: T.DWORD,
    mtNoParameters: T.WORD
}));};
T.LPMETAHEADER = function() {return Pointer(Struct('', {
    mtType: T.WORD,
    mtHeaderSize: T.WORD,
    mtVersion: T.WORD,
    mtSize: T.DWORD,
    mtNoObjects: T.WORD,
    mtMaxRecord: T.DWORD,
    mtNoParameters: T.WORD
}));};
T.METARECORD = function() {return Struct('', {
    rdSize: T.DWORD,
    rdFunction: T.WORD,
    rdParm: ArrayType(T.WORD, 1)
});};
T.PMETARECORD = function() {return Pointer(Struct('', {
    rdSize: T.DWORD,
    rdFunction: T.WORD,
    rdParm: ArrayType(T.WORD, 1)
}));};
T.LPMETARECORD = function() {return Pointer(Struct('', {
    rdSize: T.DWORD,
    rdFunction: T.WORD,
    rdParm: ArrayType(T.WORD, 1)
}));};
T.HANDLETABLE = function() {return Struct('', {
    objectHandle: ArrayType(T.HGDIOBJ, 1)
});};
T.PHANDLETABLE = function() {return Pointer(Struct('', {
    objectHandle: ArrayType(T.HGDIOBJ, 1)
}));};
T.LPHANDLETABLE = function() {return Pointer(Struct('', {
    objectHandle: ArrayType(T.HGDIOBJ, 1)
}));};
T.METAFILEPICT = function() {return Struct('', {
    mm: T.LONG,
    xExt: T.LONG,
    yExt: T.LONG,
    hMF: T.HMETAFILE
});};
T.LPMETAFILEPICT = function() {return Pointer(Struct('', {
    mm: T.LONG,
    xExt: T.LONG,
    yExt: T.LONG,
    hMF: T.HMETAFILE
}));};
T.MFENUMPROC = function() {return Pointer(Fn(T.INT, [[T.HDC], [Pointer(T.HANDLETABLE)], [Pointer(T.METARECORD)], [T.INT], [T.LPARAM]]), [['stdcall']]);};
T.ENHMETAHEADER = function() {return Struct('', {
    iType: T.DWORD,
    nSize: T.DWORD,
    rclBounds: T.RECTL,
    rclFrame: T.RECTL,
    dSignature: T.DWORD,
    nVersion: T.DWORD,
    nBytes: T.DWORD,
    nRecords: T.DWORD,
    nHandles: T.WORD,
    sReserved: T.WORD,
    nDescription: T.DWORD,
    offDescription: T.DWORD,
    nPalEntries: T.DWORD,
    szlDevice: T.SIZEL,
    szlMillimeters: T.SIZEL,
    cbPixelFormat: T.DWORD,
    offPixelFormat: T.DWORD,
    bOpenGL: T.DWORD,
    szlMicrometers: T.SIZEL
});};
T.PENHMETAHEADER = function() {return Pointer(Struct('', {
    iType: T.DWORD,
    nSize: T.DWORD,
    rclBounds: T.RECTL,
    rclFrame: T.RECTL,
    dSignature: T.DWORD,
    nVersion: T.DWORD,
    nBytes: T.DWORD,
    nRecords: T.DWORD,
    nHandles: T.WORD,
    sReserved: T.WORD,
    nDescription: T.DWORD,
    offDescription: T.DWORD,
    nPalEntries: T.DWORD,
    szlDevice: T.SIZEL,
    szlMillimeters: T.SIZEL,
    cbPixelFormat: T.DWORD,
    offPixelFormat: T.DWORD,
    bOpenGL: T.DWORD,
    szlMicrometers: T.SIZEL
}));};
T.LPENHMETAHEADER = function() {return Pointer(Struct('', {
    iType: T.DWORD,
    nSize: T.DWORD,
    rclBounds: T.RECTL,
    rclFrame: T.RECTL,
    dSignature: T.DWORD,
    nVersion: T.DWORD,
    nBytes: T.DWORD,
    nRecords: T.DWORD,
    nHandles: T.WORD,
    sReserved: T.WORD,
    nDescription: T.DWORD,
    offDescription: T.DWORD,
    nPalEntries: T.DWORD,
    szlDevice: T.SIZEL,
    szlMillimeters: T.SIZEL,
    cbPixelFormat: T.DWORD,
    offPixelFormat: T.DWORD,
    bOpenGL: T.DWORD,
    szlMicrometers: T.SIZEL
}));};
T.ENHMETARECORD = function() {return Struct('', {
    iType: T.DWORD,
    nSize: T.DWORD,
    dParm: ArrayType(T.DWORD, 1)
});};
T.LPENHMETARECORD = function() {return Pointer(Struct('', {
    iType: T.DWORD,
    nSize: T.DWORD,
    dParm: ArrayType(T.DWORD, 1)
}));};
T.EMR = function() {return Struct('', {
    iType: T.DWORD,
    nSize: T.DWORD
});};
T.PEMR = function() {return Pointer(Struct('', {
    iType: T.DWORD,
    nSize: T.DWORD
}));};
T.EMRTEXT = function() {return Struct('', {
    ptlReference: T.POINTL,
    nChars: T.DWORD,
    offString: T.DWORD,
    fOptions: T.DWORD,
    rcl: T.RECTL,
    offDx: T.DWORD
});};
T.PEMRTEXT = function() {return Pointer(Struct('', {
    ptlReference: T.POINTL,
    nChars: T.DWORD,
    offString: T.DWORD,
    fOptions: T.DWORD,
    rcl: T.RECTL,
    offDx: T.DWORD
}));};
T.EMRABORTPATH = function() {return Struct('', {
    emr: T.EMR
});};
T.PEMRABORTPATH = function() {return Pointer(Struct('', {
    emr: T.EMR
}));};
T.EMRBEGINPATH = function() {return Struct('', {
    emr: T.EMR
});};
T.PEMRBEGINPATH = function() {return Pointer(Struct('', {
    emr: T.EMR
}));};
T.EMRENDPATH = function() {return Struct('', {
    emr: T.EMR
});};
T.PEMRENDPATH = function() {return Pointer(Struct('', {
    emr: T.EMR
}));};
T.EMRCLOSEFIGURE = function() {return Struct('', {
    emr: T.EMR
});};
T.PEMRCLOSEFIGURE = function() {return Pointer(Struct('', {
    emr: T.EMR
}));};
T.EMRFLATTENPATH = function() {return Struct('', {
    emr: T.EMR
});};
T.PEMRFLATTENPATH = function() {return Pointer(Struct('', {
    emr: T.EMR
}));};
T.EMRWIDENPATH = function() {return Struct('', {
    emr: T.EMR
});};
T.PEMRWIDENPATH = function() {return Pointer(Struct('', {
    emr: T.EMR
}));};
T.EMRSETMETARGN = function() {return Struct('', {
    emr: T.EMR
});};
T.PEMRSETMETARGN = function() {return Pointer(Struct('', {
    emr: T.EMR
}));};
T.EMRSAVEDC = function() {return Struct('', {
    emr: T.EMR
});};
T.PEMRSAVEDC = function() {return Pointer(Struct('', {
    emr: T.EMR
}));};
T.EMRREALIZEPALETTE = function() {return Struct('', {
    emr: T.EMR
});};
T.PEMRREALIZEPALETTE = function() {return Pointer(Struct('', {
    emr: T.EMR
}));};
T.EMRANGLEARC = function() {return Struct('', {
    emr: T.EMR,
    ptlCenter: T.POINTL,
    nRadius: T.DWORD,
    eStartAngle: T.FLOAT,
    eSweepAngle: T.FLOAT
});};
T.PEMRANGLEARC = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ptlCenter: T.POINTL,
    nRadius: T.DWORD,
    eStartAngle: T.FLOAT,
    eSweepAngle: T.FLOAT
}));};
T.EMRARC = function() {return Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    ptlStart: T.POINTL,
    ptlEnd: T.POINTL
});};
T.PEMRARC = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    ptlStart: T.POINTL,
    ptlEnd: T.POINTL
}));};
T.EMRARCTO = function() {return Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    ptlStart: T.POINTL,
    ptlEnd: T.POINTL
});};
T.PEMRARCTO = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    ptlStart: T.POINTL,
    ptlEnd: T.POINTL
}));};
T.EMRCHORD = function() {return Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    ptlStart: T.POINTL,
    ptlEnd: T.POINTL
});};
T.PEMRCHORD = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    ptlStart: T.POINTL,
    ptlEnd: T.POINTL
}));};
T.EMRPIE = function() {return Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    ptlStart: T.POINTL,
    ptlEnd: T.POINTL
});};
T.PEMRPIE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    ptlStart: T.POINTL,
    ptlEnd: T.POINTL
}));};
T.EMRBITBLT = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    cxDest: T.LONG,
    cyDest: T.LONG,
    dwRop: T.DWORD,
    xSrc: T.LONG,
    ySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD
});};
T.PEMRBITBLT = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    cxDest: T.LONG,
    cyDest: T.LONG,
    dwRop: T.DWORD,
    xSrc: T.LONG,
    ySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD
}));};
T.EMRCREATEBRUSHINDIRECT = function() {return Struct('', {
    emr: T.EMR,
    ihBrush: T.DWORD,
    lb: T.LOGBRUSH32
});};
T.PEMRCREATEBRUSHINDIRECT = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihBrush: T.DWORD,
    lb: T.LOGBRUSH32
}));};
T.EMRCREATECOLORSPACE = function() {return Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD,
    lcs: T.LOGCOLORSPACEA
});};
T.PEMRCREATECOLORSPACE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD,
    lcs: T.LOGCOLORSPACEA
}));};
T.EMRCREATECOLORSPACEW = function() {return Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD,
    lcs: T.LOGCOLORSPACEW,
    dwFlags: T.DWORD,
    cbData: T.DWORD,
    Data: ArrayType(T.BYTE, 1)
});};
T.PEMRCREATECOLORSPACEW = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD,
    lcs: T.LOGCOLORSPACEW,
    dwFlags: T.DWORD,
    cbData: T.DWORD,
    Data: ArrayType(T.BYTE, 1)
}));};
T.EMRCREATEDIBPATTERNBRUSHPT = function() {return Struct('', {
    emr: T.EMR,
    ihBrush: T.DWORD,
    iUsage: T.DWORD,
    offBmi: T.DWORD,
    cbBmi: T.DWORD,
    offBits: T.DWORD,
    cbBits: T.DWORD
});};
T.PEMRCREATEDIBPATTERNBRUSHPT = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihBrush: T.DWORD,
    iUsage: T.DWORD,
    offBmi: T.DWORD,
    cbBmi: T.DWORD,
    offBits: T.DWORD,
    cbBits: T.DWORD
}));};
T.EMRCREATEMONOBRUSH = function() {return Struct('', {
    emr: T.EMR,
    ihBrush: T.DWORD,
    iUsage: T.DWORD,
    offBmi: T.DWORD,
    cbBmi: T.DWORD,
    offBits: T.DWORD,
    cbBits: T.DWORD
});};
T.PEMRCREATEMONOBRUSH = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihBrush: T.DWORD,
    iUsage: T.DWORD,
    offBmi: T.DWORD,
    cbBmi: T.DWORD,
    offBits: T.DWORD,
    cbBits: T.DWORD
}));};
T.EMRCREATEPALETTE = function() {return Struct('', {
    emr: T.EMR,
    ihPal: T.DWORD,
    lgpl: T.LOGPALETTE
});};
T.PEMRCREATEPALETTE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihPal: T.DWORD,
    lgpl: T.LOGPALETTE
}));};
T.EMRCREATEPEN = function() {return Struct('', {
    emr: T.EMR,
    ihPen: T.DWORD,
    lopn: T.LOGPEN
});};
T.PEMRCREATEPEN = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihPen: T.DWORD,
    lopn: T.LOGPEN
}));};
T.EMRDELETECOLORSPACE = function() {return Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD
});};
T.PEMRDELETECOLORSPACE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD
}));};
T.EMRSELECTCOLORSPACE = function() {return Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD
});};
T.PEMRSELECTCOLORSPACE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD
}));};
T.EMRSETCOLORSPACE = function() {return Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD
});};
T.PEMRSETCOLORSPACE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD
}));};
T.EMRDELETEOBJECT = function() {return Struct('', {
    emr: T.EMR,
    ihObject: T.DWORD
});};
T.PEMRDELETEOBJECT = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihObject: T.DWORD
}));};
T.EMRSELECTOBJECT = function() {return Struct('', {
    emr: T.EMR,
    ihObject: T.DWORD
});};
T.PEMRSELECTOBJECT = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihObject: T.DWORD
}));};
T.EMRELLIPSE = function() {return Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL
});};
T.PEMRELLIPSE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL
}));};
T.EMRRECTANGLE = function() {return Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL
});};
T.PEMRRECTANGLE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL
}));};
T.EMREOF = function() {return Struct('', {
    emr: T.EMR,
    nPalEntries: T.DWORD,
    offPalEntries: T.DWORD,
    nSizeLast: T.DWORD
});};
T.PEMREOF = function() {return Pointer(Struct('', {
    emr: T.EMR,
    nPalEntries: T.DWORD,
    offPalEntries: T.DWORD,
    nSizeLast: T.DWORD
}));};
T.EMREXCLUDECLIPRECT = function() {return Struct('', {
    emr: T.EMR,
    rclClip: T.RECTL
});};
T.PEMREXCLUDECLIPRECT = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclClip: T.RECTL
}));};
T.EMRINTERSECTCLIPRECT = function() {return Struct('', {
    emr: T.EMR,
    rclClip: T.RECTL
});};
T.PEMRINTERSECTCLIPRECT = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclClip: T.RECTL
}));};
T.EMREXTCREATEFONTINDIRECTW = function() {return Struct('', {
    emr: T.EMR,
    ihFont: T.DWORD,
    elfw: T.EXTLOGFONTW
});};
T.PEMREXTCREATEFONTINDIRECTW = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihFont: T.DWORD,
    elfw: T.EXTLOGFONTW
}));};
T.EMREXTCREATEPEN = function() {return Struct('', {
    emr: T.EMR,
    ihPen: T.DWORD,
    offBmi: T.DWORD,
    cbBmi: T.DWORD,
    offBits: T.DWORD,
    cbBits: T.DWORD,
    elp: T.EXTLOGPEN
});};
T.PEMREXTCREATEPEN = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihPen: T.DWORD,
    offBmi: T.DWORD,
    cbBmi: T.DWORD,
    offBits: T.DWORD,
    cbBits: T.DWORD,
    elp: T.EXTLOGPEN
}));};
T.EMREXTFLOODFILL = function() {return Struct('', {
    emr: T.EMR,
    ptlStart: T.POINTL,
    crColor: T.COLORREF,
    iMode: T.DWORD
});};
T.PEMREXTFLOODFILL = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ptlStart: T.POINTL,
    crColor: T.COLORREF,
    iMode: T.DWORD
}));};
T.EMREXTSELECTCLIPRGN = function() {return Struct('', {
    emr: T.EMR,
    cbRgnData: T.DWORD,
    iMode: T.DWORD,
    RgnData: ArrayType(T.BYTE, 1)
});};
T.PEMREXTSELECTCLIPRGN = function() {return Pointer(Struct('', {
    emr: T.EMR,
    cbRgnData: T.DWORD,
    iMode: T.DWORD,
    RgnData: ArrayType(T.BYTE, 1)
}));};
T.EMREXTTEXTOUTA = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    iGraphicsMode: T.DWORD,
    exScale: T.FLOAT,
    eyScale: T.FLOAT,
    emrtext: T.EMRTEXT
});};
T.PEMREXTTEXTOUTA = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    iGraphicsMode: T.DWORD,
    exScale: T.FLOAT,
    eyScale: T.FLOAT,
    emrtext: T.EMRTEXT
}));};
T.EMREXTTEXTOUTW = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    iGraphicsMode: T.DWORD,
    exScale: T.FLOAT,
    eyScale: T.FLOAT,
    emrtext: T.EMRTEXT
});};
T.PEMREXTTEXTOUTW = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    iGraphicsMode: T.DWORD,
    exScale: T.FLOAT,
    eyScale: T.FLOAT,
    emrtext: T.EMRTEXT
}));};
T.EMRFILLPATH = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL
});};
T.PEMRFILLPATH = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL
}));};
T.EMRSTROKEANDFILLPATH = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL
});};
T.PEMRSTROKEANDFILLPATH = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL
}));};
T.EMRSTROKEPATH = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL
});};
T.PEMRSTROKEPATH = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL
}));};
T.EMRFILLRGN = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbRgnData: T.DWORD,
    ihBrush: T.DWORD,
    RgnData: ArrayType(T.BYTE, 1)
});};
T.PEMRFILLRGN = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbRgnData: T.DWORD,
    ihBrush: T.DWORD,
    RgnData: ArrayType(T.BYTE, 1)
}));};
T.EMRFORMAT = function() {return Struct('', {
    dSignature: T.DWORD,
    nVersion: T.DWORD,
    cbData: T.DWORD,
    offData: T.DWORD
});};
T.PEMRFORMAT = function() {return Pointer(Struct('', {
    dSignature: T.DWORD,
    nVersion: T.DWORD,
    cbData: T.DWORD,
    offData: T.DWORD
}));};
T.EMRFRAMERGN = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbRgnData: T.DWORD,
    ihBrush: T.DWORD,
    szlStroke: T.SIZEL,
    RgnData: ArrayType(T.BYTE, 1)
});};
T.PEMRFRAMERGN = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbRgnData: T.DWORD,
    ihBrush: T.DWORD,
    szlStroke: T.SIZEL,
    RgnData: ArrayType(T.BYTE, 1)
}));};
T.EMRGDICOMMENT = function() {return Struct('', {
    emr: T.EMR,
    cbData: T.DWORD,
    Data: ArrayType(T.BYTE, 1)
});};
T.PEMRGDICOMMENT = function() {return Pointer(Struct('', {
    emr: T.EMR,
    cbData: T.DWORD,
    Data: ArrayType(T.BYTE, 1)
}));};
T.EMRINVERTRGN = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbRgnData: T.DWORD,
    RgnData: ArrayType(T.BYTE, 1)
});};
T.PEMRINVERTRGN = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbRgnData: T.DWORD,
    RgnData: ArrayType(T.BYTE, 1)
}));};
T.EMRPAINTRGN = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbRgnData: T.DWORD,
    RgnData: ArrayType(T.BYTE, 1)
});};
T.PEMRPAINTRGN = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbRgnData: T.DWORD,
    RgnData: ArrayType(T.BYTE, 1)
}));};
T.EMRLINETO = function() {return Struct('', {
    emr: T.EMR,
    ptl: T.POINTL
});};
T.PEMRLINETO = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ptl: T.POINTL
}));};
T.EMRMOVETOEX = function() {return Struct('', {
    emr: T.EMR,
    ptl: T.POINTL
});};
T.PEMRMOVETOEX = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ptl: T.POINTL
}));};
T.EMRMASKBLT = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    cxDest: T.LONG,
    cyDest: T.LONG,
    dwRop: T.DWORD,
    xSrc: T.LONG,
    ySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    xMask: T.LONG,
    yMask: T.LONG,
    iUsageMask: T.DWORD,
    offBmiMask: T.DWORD,
    cbBmiMask: T.DWORD,
    offBitsMask: T.DWORD,
    cbBitsMask: T.DWORD
});};
T.PEMRMASKBLT = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    cxDest: T.LONG,
    cyDest: T.LONG,
    dwRop: T.DWORD,
    xSrc: T.LONG,
    ySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    xMask: T.LONG,
    yMask: T.LONG,
    iUsageMask: T.DWORD,
    offBmiMask: T.DWORD,
    cbBmiMask: T.DWORD,
    offBitsMask: T.DWORD,
    cbBitsMask: T.DWORD
}));};
T.EMRMODIFYWORLDTRANSFORM = function() {return Struct('', {
    emr: T.EMR,
    xform: T.XFORM,
    iMode: T.DWORD
});};
T.PEMRMODIFYWORLDTRANSFORM = function() {return Pointer(Struct('', {
    emr: T.EMR,
    xform: T.XFORM,
    iMode: T.DWORD
}));};
T.EMROFFSETCLIPRGN = function() {return Struct('', {
    emr: T.EMR,
    ptlOffset: T.POINTL
});};
T.PEMROFFSETCLIPRGN = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ptlOffset: T.POINTL
}));};
T.EMRPLGBLT = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    aptlDest: ArrayType(T.POINTL, 3),
    xSrc: T.LONG,
    ySrc: T.LONG,
    cxSrc: T.LONG,
    cySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    xMask: T.LONG,
    yMask: T.LONG,
    iUsageMask: T.DWORD,
    offBmiMask: T.DWORD,
    cbBmiMask: T.DWORD,
    offBitsMask: T.DWORD,
    cbBitsMask: T.DWORD
});};
T.PEMRPLGBLT = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    aptlDest: ArrayType(T.POINTL, 3),
    xSrc: T.LONG,
    ySrc: T.LONG,
    cxSrc: T.LONG,
    cySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    xMask: T.LONG,
    yMask: T.LONG,
    iUsageMask: T.DWORD,
    offBmiMask: T.DWORD,
    cbBmiMask: T.DWORD,
    offBitsMask: T.DWORD,
    cbBitsMask: T.DWORD
}));};
T.EMRPOLYLINE = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
});};
T.PEMRPOLYLINE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
}));};
T.EMRPOLYBEZIER = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
});};
T.PEMRPOLYBEZIER = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
}));};
T.EMRPOLYGON = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
});};
T.PEMRPOLYGON = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
}));};
T.EMRPOLYBEZIERTO = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
});};
T.PEMRPOLYBEZIERTO = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
}));};
T.EMRPOLYLINETO = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
});};
T.PEMRPOLYLINETO = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
}));};
T.EMRPOLYLINE16 = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
});};
T.PEMRPOLYLINE16 = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
}));};
T.EMRPOLYBEZIER16 = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
});};
T.PEMRPOLYBEZIER16 = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
}));};
T.EMRPOLYGON16 = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
});};
T.PEMRPOLYGON16 = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
}));};
T.EMRPOLYBEZIERTO16 = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
});};
T.PEMRPOLYBEZIERTO16 = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
}));};
T.EMRPOLYLINETO16 = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
});};
T.PEMRPOLYLINETO16 = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
}));};
T.EMRPOLYDRAW16 = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1),
    abTypes: ArrayType(T.BYTE, 1)
});};
T.PEMRPOLYDRAW16 = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1),
    abTypes: ArrayType(T.BYTE, 1)
}));};
T.EMRPOLYPOLYLINE16 = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    nPolys: T.DWORD,
    cpts: T.DWORD,
    aPolyCounts: ArrayType(T.DWORD, 1),
    apts: ArrayType(T.POINTS, 1)
});};
T.PEMRPOLYPOLYLINE16 = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    nPolys: T.DWORD,
    cpts: T.DWORD,
    aPolyCounts: ArrayType(T.DWORD, 1),
    apts: ArrayType(T.POINTS, 1)
}));};
T.EMRPOLYPOLYGON16 = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    nPolys: T.DWORD,
    cpts: T.DWORD,
    aPolyCounts: ArrayType(T.DWORD, 1),
    apts: ArrayType(T.POINTS, 1)
});};
T.PEMRPOLYPOLYGON16 = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    nPolys: T.DWORD,
    cpts: T.DWORD,
    aPolyCounts: ArrayType(T.DWORD, 1),
    apts: ArrayType(T.POINTS, 1)
}));};
T.EMRPOLYDRAW = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1),
    abTypes: ArrayType(T.BYTE, 1)
});};
T.PEMRPOLYDRAW = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1),
    abTypes: ArrayType(T.BYTE, 1)
}));};
T.EMRPOLYPOLYLINE = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    nPolys: T.DWORD,
    cptl: T.DWORD,
    aPolyCounts: ArrayType(T.DWORD, 1),
    aptl: ArrayType(T.POINTL, 1)
});};
T.PEMRPOLYPOLYLINE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    nPolys: T.DWORD,
    cptl: T.DWORD,
    aPolyCounts: ArrayType(T.DWORD, 1),
    aptl: ArrayType(T.POINTL, 1)
}));};
T.EMRPOLYPOLYGON = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    nPolys: T.DWORD,
    cptl: T.DWORD,
    aPolyCounts: ArrayType(T.DWORD, 1),
    aptl: ArrayType(T.POINTL, 1)
});};
T.PEMRPOLYPOLYGON = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    nPolys: T.DWORD,
    cptl: T.DWORD,
    aPolyCounts: ArrayType(T.DWORD, 1),
    aptl: ArrayType(T.POINTL, 1)
}));};
T.EMRPOLYTEXTOUTA = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    iGraphicsMode: T.DWORD,
    exScale: T.FLOAT,
    eyScale: T.FLOAT,
    cStrings: T.LONG,
    aemrtext: ArrayType(T.EMRTEXT, 1)
});};
T.PEMRPOLYTEXTOUTA = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    iGraphicsMode: T.DWORD,
    exScale: T.FLOAT,
    eyScale: T.FLOAT,
    cStrings: T.LONG,
    aemrtext: ArrayType(T.EMRTEXT, 1)
}));};
T.EMRPOLYTEXTOUTW = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    iGraphicsMode: T.DWORD,
    exScale: T.FLOAT,
    eyScale: T.FLOAT,
    cStrings: T.LONG,
    aemrtext: ArrayType(T.EMRTEXT, 1)
});};
T.PEMRPOLYTEXTOUTW = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    iGraphicsMode: T.DWORD,
    exScale: T.FLOAT,
    eyScale: T.FLOAT,
    cStrings: T.LONG,
    aemrtext: ArrayType(T.EMRTEXT, 1)
}));};
T.EMRRESIZEPALETTE = function() {return Struct('', {
    emr: T.EMR,
    ihPal: T.DWORD,
    cEntries: T.DWORD
});};
T.PEMRRESIZEPALETTE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihPal: T.DWORD,
    cEntries: T.DWORD
}));};
T.EMRRESTOREDC = function() {return Struct('', {
    emr: T.EMR,
    iRelative: T.LONG
});};
T.PEMRRESTOREDC = function() {return Pointer(Struct('', {
    emr: T.EMR,
    iRelative: T.LONG
}));};
T.EMRROUNDRECT = function() {return Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    szlCorner: T.SIZEL
});};
T.PEMRROUNDRECT = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    szlCorner: T.SIZEL
}));};
T.EMRSCALEVIEWPORTEXTEX = function() {return Struct('', {
    emr: T.EMR,
    xNum: T.LONG,
    xDenom: T.LONG,
    yNum: T.LONG,
    yDenom: T.LONG
});};
T.PEMRSCALEVIEWPORTEXTEX = function() {return Pointer(Struct('', {
    emr: T.EMR,
    xNum: T.LONG,
    xDenom: T.LONG,
    yNum: T.LONG,
    yDenom: T.LONG
}));};
T.EMRSCALEWINDOWEXTEX = function() {return Struct('', {
    emr: T.EMR,
    xNum: T.LONG,
    xDenom: T.LONG,
    yNum: T.LONG,
    yDenom: T.LONG
});};
T.PEMRSCALEWINDOWEXTEX = function() {return Pointer(Struct('', {
    emr: T.EMR,
    xNum: T.LONG,
    xDenom: T.LONG,
    yNum: T.LONG,
    yDenom: T.LONG
}));};
T.EMRSELECTCLIPPATH = function() {return Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});};
T.PEMRSELECTCLIPPATH = function() {return Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));};
T.EMRSETBKMODE = function() {return Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});};
T.PEMRSETBKMODE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));};
T.EMRSETMAPMODE = function() {return Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});};
T.PEMRSETMAPMODE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));};
T.EMRSETPOLYFILLMODE = function() {return Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});};
T.PEMRSETPOLYFILLMODE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));};
T.EMRSETROP2 = function() {return Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});};
T.PEMRSETROP2 = function() {return Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));};
T.EMRSETSTRETCHBLTMODE = function() {return Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});};
T.PEMRSETSTRETCHBLTMODE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));};
T.EMRSETTEXTALIGN = function() {return Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});};
T.PEMRSETTEXTALIGN = function() {return Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));};
T.EMRSETICMMODE = function() {return Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});};
T.PEMRSETICMMODE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));};
T.EMRSETLAYOUT = function() {return Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});};
T.PEMRSETLAYOUT = function() {return Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));};
T.EMRSELECTPALETTE = function() {return Struct('', {
    emr: T.EMR,
    ihPal: T.DWORD
});};
T.PEMRSELECTPALETTE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihPal: T.DWORD
}));};
T.EMRSETARCDIRECTION = function() {return Struct('', {
    emr: T.EMR,
    iArcDirection: T.DWORD
});};
T.PEMRSETARCDIRECTION = function() {return Pointer(Struct('', {
    emr: T.EMR,
    iArcDirection: T.DWORD
}));};
T.EMRSETBKCOLOR = function() {return Struct('', {
    emr: T.EMR,
    crColor: T.COLORREF
});};
T.PEMRSETBKCOLOR = function() {return Pointer(Struct('', {
    emr: T.EMR,
    crColor: T.COLORREF
}));};
T.EMRSETTEXTCOLOR = function() {return Struct('', {
    emr: T.EMR,
    crColor: T.COLORREF
});};
T.PEMRSETTEXTCOLOR = function() {return Pointer(Struct('', {
    emr: T.EMR,
    crColor: T.COLORREF
}));};
T.EMRSETBRUSHORGEX = function() {return Struct('', {
    emr: T.EMR,
    ptlOrigin: T.POINTL
});};
T.PEMRSETBRUSHORGEX = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ptlOrigin: T.POINTL
}));};
T.EMRSETVIEWPORTORGEX = function() {return Struct('', {
    emr: T.EMR,
    ptlOrigin: T.POINTL
});};
T.PEMRSETVIEWPORTORGEX = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ptlOrigin: T.POINTL
}));};
T.EMRSETWINDOWORGEX = function() {return Struct('', {
    emr: T.EMR,
    ptlOrigin: T.POINTL
});};
T.PEMRSETWINDOWORGEX = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ptlOrigin: T.POINTL
}));};
T.EMRSETCOLORADJUSTMENT = function() {return Struct('', {
    emr: T.EMR,
    ColorAdjustment: T.COLORADJUSTMENT
});};
T.PEMRSETCOLORADJUSTMENT = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ColorAdjustment: T.COLORADJUSTMENT
}));};
T.EMRSETDIBITSTODEVICE = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    xSrc: T.LONG,
    ySrc: T.LONG,
    cxSrc: T.LONG,
    cySrc: T.LONG,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    iUsageSrc: T.DWORD,
    iStartScan: T.DWORD,
    cScans: T.DWORD
});};
T.PEMRSETDIBITSTODEVICE = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    xSrc: T.LONG,
    ySrc: T.LONG,
    cxSrc: T.LONG,
    cySrc: T.LONG,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    iUsageSrc: T.DWORD,
    iStartScan: T.DWORD,
    cScans: T.DWORD
}));};
T.EMRSETMAPPERFLAGS = function() {return Struct('', {
    emr: T.EMR,
    dwFlags: T.DWORD
});};
T.PEMRSETMAPPERFLAGS = function() {return Pointer(Struct('', {
    emr: T.EMR,
    dwFlags: T.DWORD
}));};
T.EMRSETMITERLIMIT = function() {return Struct('', {
    emr: T.EMR,
    eMiterLimit: T.FLOAT
});};
T.PEMRSETMITERLIMIT = function() {return Pointer(Struct('', {
    emr: T.EMR,
    eMiterLimit: T.FLOAT
}));};
T.EMRSETPALETTEENTRIES = function() {return Struct('', {
    emr: T.EMR,
    ihPal: T.DWORD,
    iStart: T.DWORD,
    cEntries: T.DWORD,
    aPalEntries: ArrayType(T.PALETTEENTRY, 1)
});};
T.PEMRSETPALETTEENTRIES = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ihPal: T.DWORD,
    iStart: T.DWORD,
    cEntries: T.DWORD,
    aPalEntries: ArrayType(T.PALETTEENTRY, 1)
}));};
T.EMRSETPIXELV = function() {return Struct('', {
    emr: T.EMR,
    ptlPixel: T.POINTL,
    crColor: T.COLORREF
});};
T.PEMRSETPIXELV = function() {return Pointer(Struct('', {
    emr: T.EMR,
    ptlPixel: T.POINTL,
    crColor: T.COLORREF
}));};
T.EMRSETVIEWPORTEXTEX = function() {return Struct('', {
    emr: T.EMR,
    szlExtent: T.SIZEL
});};
T.PEMRSETVIEWPORTEXTEX = function() {return Pointer(Struct('', {
    emr: T.EMR,
    szlExtent: T.SIZEL
}));};
T.EMRSETWINDOWEXTEX = function() {return Struct('', {
    emr: T.EMR,
    szlExtent: T.SIZEL
});};
T.PEMRSETWINDOWEXTEX = function() {return Pointer(Struct('', {
    emr: T.EMR,
    szlExtent: T.SIZEL
}));};
T.EMRSETWORLDTRANSFORM = function() {return Struct('', {
    emr: T.EMR,
    xform: T.XFORM
});};
T.PEMRSETWORLDTRANSFORM = function() {return Pointer(Struct('', {
    emr: T.EMR,
    xform: T.XFORM
}));};
T.EMRSTRETCHBLT = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    cxDest: T.LONG,
    cyDest: T.LONG,
    dwRop: T.DWORD,
    xSrc: T.LONG,
    ySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    cxSrc: T.LONG,
    cySrc: T.LONG
});};
T.PEMRSTRETCHBLT = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    cxDest: T.LONG,
    cyDest: T.LONG,
    dwRop: T.DWORD,
    xSrc: T.LONG,
    ySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    cxSrc: T.LONG,
    cySrc: T.LONG
}));};
T.EMRALPHABLEND = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    cxDest: T.LONG,
    cyDest: T.LONG,
    dwRop: T.DWORD,
    xSrc: T.LONG,
    ySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    cxSrc: T.LONG,
    cySrc: T.LONG
});};
T.PEMRALPHABLEND = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    cxDest: T.LONG,
    cyDest: T.LONG,
    dwRop: T.DWORD,
    xSrc: T.LONG,
    ySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    cxSrc: T.LONG,
    cySrc: T.LONG
}));};
T.EMRSTRETCHDIBITS = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    xSrc: T.LONG,
    ySrc: T.LONG,
    cxSrc: T.LONG,
    cySrc: T.LONG,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    iUsageSrc: T.DWORD,
    dwRop: T.DWORD,
    cxDest: T.LONG,
    cyDest: T.LONG
});};
T.PEMRSTRETCHDIBITS = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    xSrc: T.LONG,
    ySrc: T.LONG,
    cxSrc: T.LONG,
    cySrc: T.LONG,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    iUsageSrc: T.DWORD,
    dwRop: T.DWORD,
    cxDest: T.LONG,
    cyDest: T.LONG
}));};
T.EMRPIXELFORMAT = function() {return Struct('', {
    emr: T.EMR,
    pfd: T.PIXELFORMATDESCRIPTOR
});};
T.PEMRPIXELFORMAT = function() {return Pointer(Struct('', {
    emr: T.EMR,
    pfd: T.PIXELFORMATDESCRIPTOR
}));};
T.EMRGLSRECORD = function() {return Struct('tagEMRGLSRECORD', {
    emr: T.EMR,
    cbData: T.DWORD,
    Data: ArrayType(T.BYTE, 1)
});};
T.PEMRGLSRECORD = function() {return Pointer(Struct('tagEMRGLSRECORD', {
    emr: T.EMR,
    cbData: T.DWORD,
    Data: ArrayType(T.BYTE, 1)
}));};
T.EMRGLSBOUNDEDRECORD = function() {return Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbData: T.DWORD,
    Data: ArrayType(T.BYTE, 1)
});};
T.PEMRGLSBOUNDEDRECORD = function() {return Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbData: T.DWORD,
    Data: ArrayType(T.BYTE, 1)
}));};
T.ENHMFENUMPROC = function() {return Pointer(Fn(T.INT, [[T.HDC], [Pointer(T.HANDLETABLE)], [Pointer(T.ENHMETARECORD)], [T.INT], [T.LPARAM]]), [['stdcall']]);};
T.DEVMODEA = function() {return Struct('', {
    dmDeviceName: ArrayType(T.BYTE, 32),
    dmSpecVersion: T.WORD,
    dmDriverVersion: T.WORD,
    dmSize: T.WORD,
    dmDriverExtra: T.WORD,
    dmFields: T.DWORD,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            dmOrientation: T.i16,
            dmPaperSize: T.i16,
            dmPaperLength: T.i16,
            dmPaperWidth: T.i16,
            dmScale: T.i16,
            dmCopies: T.i16,
            dmDefaultSource: T.i16,
            dmPrintQuality: T.i16
        }),
        __unnamed1: Struct('', {
            dmPosition: T.POINTL,
            dmDisplayOrientation: T.DWORD,
            dmDisplayFixedOutput: T.DWORD
        })
    }),
    dmColor: T.i16,
    dmDuplex: T.i16,
    dmYResolution: T.i16,
    dmTTOption: T.i16,
    dmCollate: T.i16,
    dmFormName: ArrayType(T.BYTE, 32),
    dmLogPixels: T.WORD,
    dmBitsPerPel: T.DWORD,
    dmPelsWidth: T.DWORD,
    dmPelsHeight: T.DWORD,
    __unnamed1: Union('', {
        dmDisplayFlags: T.DWORD,
        dmNup: T.DWORD
    }),
    dmDisplayFrequency: T.DWORD,
    dmICMMethod: T.DWORD,
    dmICMIntent: T.DWORD,
    dmMediaType: T.DWORD,
    dmDitherType: T.DWORD,
    dmReserved1: T.DWORD,
    dmReserved2: T.DWORD,
    dmPanningWidth: T.DWORD,
    dmPanningHeight: T.DWORD
});};
T.PDEVMODEA = function() {return Pointer(Struct('', {
    dmDeviceName: ArrayType(T.BYTE, 32),
    dmSpecVersion: T.WORD,
    dmDriverVersion: T.WORD,
    dmSize: T.WORD,
    dmDriverExtra: T.WORD,
    dmFields: T.DWORD,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            dmOrientation: T.i16,
            dmPaperSize: T.i16,
            dmPaperLength: T.i16,
            dmPaperWidth: T.i16,
            dmScale: T.i16,
            dmCopies: T.i16,
            dmDefaultSource: T.i16,
            dmPrintQuality: T.i16
        }),
        __unnamed1: Struct('', {
            dmPosition: T.POINTL,
            dmDisplayOrientation: T.DWORD,
            dmDisplayFixedOutput: T.DWORD
        })
    }),
    dmColor: T.i16,
    dmDuplex: T.i16,
    dmYResolution: T.i16,
    dmTTOption: T.i16,
    dmCollate: T.i16,
    dmFormName: ArrayType(T.BYTE, 32),
    dmLogPixels: T.WORD,
    dmBitsPerPel: T.DWORD,
    dmPelsWidth: T.DWORD,
    dmPelsHeight: T.DWORD,
    __unnamed1: Union('', {
        dmDisplayFlags: T.DWORD,
        dmNup: T.DWORD
    }),
    dmDisplayFrequency: T.DWORD,
    dmICMMethod: T.DWORD,
    dmICMIntent: T.DWORD,
    dmMediaType: T.DWORD,
    dmDitherType: T.DWORD,
    dmReserved1: T.DWORD,
    dmReserved2: T.DWORD,
    dmPanningWidth: T.DWORD,
    dmPanningHeight: T.DWORD
}));};
T.LPDEVMODEA = function() {return Pointer(Struct('', {
    dmDeviceName: ArrayType(T.BYTE, 32),
    dmSpecVersion: T.WORD,
    dmDriverVersion: T.WORD,
    dmSize: T.WORD,
    dmDriverExtra: T.WORD,
    dmFields: T.DWORD,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            dmOrientation: T.i16,
            dmPaperSize: T.i16,
            dmPaperLength: T.i16,
            dmPaperWidth: T.i16,
            dmScale: T.i16,
            dmCopies: T.i16,
            dmDefaultSource: T.i16,
            dmPrintQuality: T.i16
        }),
        __unnamed1: Struct('', {
            dmPosition: T.POINTL,
            dmDisplayOrientation: T.DWORD,
            dmDisplayFixedOutput: T.DWORD
        })
    }),
    dmColor: T.i16,
    dmDuplex: T.i16,
    dmYResolution: T.i16,
    dmTTOption: T.i16,
    dmCollate: T.i16,
    dmFormName: ArrayType(T.BYTE, 32),
    dmLogPixels: T.WORD,
    dmBitsPerPel: T.DWORD,
    dmPelsWidth: T.DWORD,
    dmPelsHeight: T.DWORD,
    __unnamed1: Union('', {
        dmDisplayFlags: T.DWORD,
        dmNup: T.DWORD
    }),
    dmDisplayFrequency: T.DWORD,
    dmICMMethod: T.DWORD,
    dmICMIntent: T.DWORD,
    dmMediaType: T.DWORD,
    dmDitherType: T.DWORD,
    dmReserved1: T.DWORD,
    dmReserved2: T.DWORD,
    dmPanningWidth: T.DWORD,
    dmPanningHeight: T.DWORD
}));};
T.DEVMODEW = function() {return Struct('', {
    dmDeviceName: ArrayType(T.WCHAR, 32),
    dmSpecVersion: T.WORD,
    dmDriverVersion: T.WORD,
    dmSize: T.WORD,
    dmDriverExtra: T.WORD,
    dmFields: T.DWORD,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            dmOrientation: T.i16,
            dmPaperSize: T.i16,
            dmPaperLength: T.i16,
            dmPaperWidth: T.i16,
            dmScale: T.i16,
            dmCopies: T.i16,
            dmDefaultSource: T.i16,
            dmPrintQuality: T.i16
        }),
        __unnamed1: Struct('', {
            dmPosition: T.POINTL,
            dmDisplayOrientation: T.DWORD,
            dmDisplayFixedOutput: T.DWORD
        })
    }),
    dmColor: T.i16,
    dmDuplex: T.i16,
    dmYResolution: T.i16,
    dmTTOption: T.i16,
    dmCollate: T.i16,
    dmFormName: ArrayType(T.WCHAR, 32),
    dmLogPixels: T.WORD,
    dmBitsPerPel: T.DWORD,
    dmPelsWidth: T.DWORD,
    dmPelsHeight: T.DWORD,
    __unnamed1: Union('', {
        dmDisplayFlags: T.DWORD,
        dmNup: T.DWORD
    }),
    dmDisplayFrequency: T.DWORD,
    dmICMMethod: T.DWORD,
    dmICMIntent: T.DWORD,
    dmMediaType: T.DWORD,
    dmDitherType: T.DWORD,
    dmReserved1: T.DWORD,
    dmReserved2: T.DWORD,
    dmPanningWidth: T.DWORD,
    dmPanningHeight: T.DWORD
});};
T.PDEVMODEW = function() {return Pointer(Struct('', {
    dmDeviceName: ArrayType(T.WCHAR, 32),
    dmSpecVersion: T.WORD,
    dmDriverVersion: T.WORD,
    dmSize: T.WORD,
    dmDriverExtra: T.WORD,
    dmFields: T.DWORD,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            dmOrientation: T.i16,
            dmPaperSize: T.i16,
            dmPaperLength: T.i16,
            dmPaperWidth: T.i16,
            dmScale: T.i16,
            dmCopies: T.i16,
            dmDefaultSource: T.i16,
            dmPrintQuality: T.i16
        }),
        __unnamed1: Struct('', {
            dmPosition: T.POINTL,
            dmDisplayOrientation: T.DWORD,
            dmDisplayFixedOutput: T.DWORD
        })
    }),
    dmColor: T.i16,
    dmDuplex: T.i16,
    dmYResolution: T.i16,
    dmTTOption: T.i16,
    dmCollate: T.i16,
    dmFormName: ArrayType(T.WCHAR, 32),
    dmLogPixels: T.WORD,
    dmBitsPerPel: T.DWORD,
    dmPelsWidth: T.DWORD,
    dmPelsHeight: T.DWORD,
    __unnamed1: Union('', {
        dmDisplayFlags: T.DWORD,
        dmNup: T.DWORD
    }),
    dmDisplayFrequency: T.DWORD,
    dmICMMethod: T.DWORD,
    dmICMIntent: T.DWORD,
    dmMediaType: T.DWORD,
    dmDitherType: T.DWORD,
    dmReserved1: T.DWORD,
    dmReserved2: T.DWORD,
    dmPanningWidth: T.DWORD,
    dmPanningHeight: T.DWORD
}));};
T.LPDEVMODEW = function() {return Pointer(Struct('', {
    dmDeviceName: ArrayType(T.WCHAR, 32),
    dmSpecVersion: T.WORD,
    dmDriverVersion: T.WORD,
    dmSize: T.WORD,
    dmDriverExtra: T.WORD,
    dmFields: T.DWORD,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            dmOrientation: T.i16,
            dmPaperSize: T.i16,
            dmPaperLength: T.i16,
            dmPaperWidth: T.i16,
            dmScale: T.i16,
            dmCopies: T.i16,
            dmDefaultSource: T.i16,
            dmPrintQuality: T.i16
        }),
        __unnamed1: Struct('', {
            dmPosition: T.POINTL,
            dmDisplayOrientation: T.DWORD,
            dmDisplayFixedOutput: T.DWORD
        })
    }),
    dmColor: T.i16,
    dmDuplex: T.i16,
    dmYResolution: T.i16,
    dmTTOption: T.i16,
    dmCollate: T.i16,
    dmFormName: ArrayType(T.WCHAR, 32),
    dmLogPixels: T.WORD,
    dmBitsPerPel: T.DWORD,
    dmPelsWidth: T.DWORD,
    dmPelsHeight: T.DWORD,
    __unnamed1: Union('', {
        dmDisplayFlags: T.DWORD,
        dmNup: T.DWORD
    }),
    dmDisplayFrequency: T.DWORD,
    dmICMMethod: T.DWORD,
    dmICMIntent: T.DWORD,
    dmMediaType: T.DWORD,
    dmDitherType: T.DWORD,
    dmReserved1: T.DWORD,
    dmReserved2: T.DWORD,
    dmPanningWidth: T.DWORD,
    dmPanningHeight: T.DWORD
}));};
T.DEVMODE = function() {return T.DEVMODEA;};
T.PDEVMODE = function() {return T.PDEVMODEA;};
T.LPDEVMODE = function() {return T.LPDEVMODEA;};
T.DOCINFOA = function() {return Struct('', {
    cbSize: T.INT,
    lpszDocName: T.LPCSTR,
    lpszOutput: T.LPCSTR,
    lpszDatatype: T.LPCSTR,
    fwType: T.DWORD
});};
T.LPDOCINFOA = function() {return Pointer(Struct('', {
    cbSize: T.INT,
    lpszDocName: T.LPCSTR,
    lpszOutput: T.LPCSTR,
    lpszDatatype: T.LPCSTR,
    fwType: T.DWORD
}));};
T.DOCINFOW = function() {return Struct('', {
    cbSize: T.INT,
    lpszDocName: T.LPCWSTR,
    lpszOutput: T.LPCWSTR,
    lpszDatatype: T.LPCWSTR,
    fwType: T.DWORD
});};
T.LPDOCINFOW = function() {return Pointer(Struct('', {
    cbSize: T.INT,
    lpszDocName: T.LPCWSTR,
    lpszOutput: T.LPCWSTR,
    lpszDatatype: T.LPCWSTR,
    fwType: T.DWORD
}));};
T.DOCINFO = function() {return T.DOCINFOA;};
T.LPDOCINFO = function() {return T.LPDOCINFOA;};
T.RGNDATAHEADER = function() {return Struct('_RGNDATAHEADER', {
    dwSize: T.DWORD,
    iType: T.DWORD,
    nCount: T.DWORD,
    nRgnSize: T.DWORD,
    rcBound: T.RECT
});};
T.PRGNDATAHEADER = function() {return Pointer(Struct('_RGNDATAHEADER', {
    dwSize: T.DWORD,
    iType: T.DWORD,
    nCount: T.DWORD,
    nRgnSize: T.DWORD,
    rcBound: T.RECT
}));};
T.RGNDATA = function() {return Struct('_RGNDATA', {
    rdh: T.RGNDATAHEADER,
    Buffer: ArrayType(T.char, 1)
});};
T.PRGNDATA = function() {return Pointer(Struct('_RGNDATA', {
    rdh: T.RGNDATAHEADER,
    Buffer: ArrayType(T.char, 1)
}));};
T.LPRGNDATA = function() {return Pointer(Struct('_RGNDATA', {
    rdh: T.RGNDATAHEADER,
    Buffer: ArrayType(T.char, 1)
}));};
T.ABORTPROC = function() {return Pointer(Fn(T.BOOL, [[T.HDC], [T.INT]]), [['stdcall']]);};
T.DISPLAY_DEVICEA = function() {return Struct('', {
    cb: T.DWORD,
    DeviceName: ArrayType(T.CHAR, 32),
    DeviceString: ArrayType(T.CHAR, 128),
    StateFlags: T.DWORD,
    DeviceID: ArrayType(T.CHAR, 128),
    DeviceKey: ArrayType(T.CHAR, 128)
});};
T.PDISPLAY_DEVICEA = function() {return Pointer(Struct('', {
    cb: T.DWORD,
    DeviceName: ArrayType(T.CHAR, 32),
    DeviceString: ArrayType(T.CHAR, 128),
    StateFlags: T.DWORD,
    DeviceID: ArrayType(T.CHAR, 128),
    DeviceKey: ArrayType(T.CHAR, 128)
}));};
T.LPDISPLAY_DEVICEA = function() {return Pointer(Struct('', {
    cb: T.DWORD,
    DeviceName: ArrayType(T.CHAR, 32),
    DeviceString: ArrayType(T.CHAR, 128),
    StateFlags: T.DWORD,
    DeviceID: ArrayType(T.CHAR, 128),
    DeviceKey: ArrayType(T.CHAR, 128)
}));};
T.DISPLAY_DEVICEW = function() {return Struct('', {
    cb: T.DWORD,
    DeviceName: ArrayType(T.WCHAR, 32),
    DeviceString: ArrayType(T.WCHAR, 128),
    StateFlags: T.DWORD,
    DeviceID: ArrayType(T.WCHAR, 128),
    DeviceKey: ArrayType(T.WCHAR, 128)
});};
T.PDISPLAY_DEVICEW = function() {return Pointer(Struct('', {
    cb: T.DWORD,
    DeviceName: ArrayType(T.WCHAR, 32),
    DeviceString: ArrayType(T.WCHAR, 128),
    StateFlags: T.DWORD,
    DeviceID: ArrayType(T.WCHAR, 128),
    DeviceKey: ArrayType(T.WCHAR, 128)
}));};
T.LPDISPLAY_DEVICEW = function() {return Pointer(Struct('', {
    cb: T.DWORD,
    DeviceName: ArrayType(T.WCHAR, 32),
    DeviceString: ArrayType(T.WCHAR, 128),
    StateFlags: T.DWORD,
    DeviceID: ArrayType(T.WCHAR, 128),
    DeviceKey: ArrayType(T.WCHAR, 128)
}));};
T.DISPLAY_DEVICE = function() {return T.DISPLAY_DEVICEA;};
T.PDISPLAY_DEVICE = function() {return T.PDISPLAY_DEVICEA;};
T.LPDISPLAY_DEVICE = function() {return T.LPDISPLAY_DEVICEA;};
T.COLOR16 = function() {return T.USHORT;};
T.TRIVERTEX = function() {return Struct('_TRIVERTEX', {
    x: T.LONG,
    y: T.LONG,
    Red: T.COLOR16,
    Green: T.COLOR16,
    Blue: T.COLOR16,
    Alpha: T.COLOR16
});};
T.PTRIVERTEX = function() {return Pointer(Struct('_TRIVERTEX', {
    x: T.LONG,
    y: T.LONG,
    Red: T.COLOR16,
    Green: T.COLOR16,
    Blue: T.COLOR16,
    Alpha: T.COLOR16
}));};
T.LPTRIVERTEX = function() {return Pointer(Struct('_TRIVERTEX', {
    x: T.LONG,
    y: T.LONG,
    Red: T.COLOR16,
    Green: T.COLOR16,
    Blue: T.COLOR16,
    Alpha: T.COLOR16
}));};
T.GRADIENT_TRIANGLE = function() {return Struct('_GRADIENT_TRIANGLE', {
    Vertex1: T.ULONG,
    Vertex2: T.ULONG,
    Vertex3: T.ULONG
});};
T.PGRADIENT_TRIANGLE = function() {return Pointer(Struct('_GRADIENT_TRIANGLE', {
    Vertex1: T.ULONG,
    Vertex2: T.ULONG,
    Vertex3: T.ULONG
}));};
T.LPGRADIENT_TRIANGLE = function() {return Pointer(Struct('_GRADIENT_TRIANGLE', {
    Vertex1: T.ULONG,
    Vertex2: T.ULONG,
    Vertex3: T.ULONG
}));};
T.GRADIENT_RECT = function() {return Struct('_GRADIENT_RECT', {
    UpperLeft: T.ULONG,
    LowerRight: T.ULONG
});};
T.PGRADIENT_RECT = function() {return Pointer(Struct('_GRADIENT_RECT', {
    UpperLeft: T.ULONG,
    LowerRight: T.ULONG
}));};
T.LPGRADIENT_RECT = function() {return Pointer(Struct('_GRADIENT_RECT', {
    UpperLeft: T.ULONG,
    LowerRight: T.ULONG
}));};
T.BLENDFUNCTION = function() {return Struct('_BLENDFUNCTION', {
    BlendOp: T.BYTE,
    BlendFlags: T.BYTE,
    SourceConstantAlpha: T.BYTE,
    AlphaFormat: T.BYTE
});};
T.PBLENDFUNCTION = function() {return Pointer(Struct('_BLENDFUNCTION', {
    BlendOp: T.BYTE,
    BlendFlags: T.BYTE,
    SourceConstantAlpha: T.BYTE,
    AlphaFormat: T.BYTE
}));};
T.DRAWPATRECT = function() {return Struct('_DRAWPATRECT', {
    ptPosition: T.POINT,
    ptSize: T.POINT,
    wStyle: T.WORD,
    wPattern: T.WORD
});};
T.PDRAWPATRECT = function() {return Pointer(Struct('_DRAWPATRECT', {
    ptPosition: T.POINT,
    ptSize: T.POINT,
    wStyle: T.WORD,
    wPattern: T.WORD
}));};
T.WCRANGE = function() {return Struct('tagWCRANGE', {
    wcLow: T.WCHAR,
    cGlyphs: T.USHORT
});};
T.PWCRANGE = function() {return Pointer(Struct('tagWCRANGE', {
    wcLow: T.WCHAR,
    cGlyphs: T.USHORT
}));};
T.LPWCRANGE = function() {return Pointer(Struct('tagWCRANGE', {
    wcLow: T.WCHAR,
    cGlyphs: T.USHORT
}));};
T.GLYPHSET = function() {return Struct('tagGLYPHSET', {
    cbThis: T.DWORD,
    flAccel: T.DWORD,
    cGlyphsSupported: T.DWORD,
    cRanges: T.DWORD,
    ranges: ArrayType(T.WCRANGE, 1)
});};
T.PGLYPHSET = function() {return Pointer(Struct('tagGLYPHSET', {
    cbThis: T.DWORD,
    flAccel: T.DWORD,
    cGlyphsSupported: T.DWORD,
    cRanges: T.DWORD,
    ranges: ArrayType(T.WCRANGE, 1)
}));};
T.LPGLYPHSET = function() {return Pointer(Struct('tagGLYPHSET', {
    cbThis: T.DWORD,
    flAccel: T.DWORD,
    cGlyphsSupported: T.DWORD,
    cRanges: T.DWORD,
    ranges: ArrayType(T.WCRANGE, 1)
}));};
T.DLGPROC = function() {return Pointer(Fn(T.INT_PTR, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]), [['stdcall']]);};
T.DRAWSTATEPROC = function() {return Pointer(Fn(T.BOOL, [[T.HDC], [T.LPARAM], [T.WPARAM], [T.i32], [T.i32]]), [['stdcall']]);};
T.EDITWORDBREAKPROCA = function() {return Pointer(Fn(T.INT, [[T.LPSTR], [T.INT], [T.INT], [T.INT]]), [['stdcall']]);};
T.EDITWORDBREAKPROCW = function() {return Pointer(Fn(T.INT, [[T.LPWSTR], [T.INT], [T.INT], [T.INT]]), [['stdcall']]);};
T.GRAYSTRINGPROC = function() {return Pointer(Fn(T.BOOL, [[T.HDC], [T.LPARAM], [T.INT]]), [['stdcall']]);};
T.HOOKPROC = function() {return Pointer(Fn(T.LRESULT, [[T.INT], [T.WPARAM], [T.LPARAM]]), [['stdcall']]);};
T.NAMEENUMPROCA = function() {return Pointer(Fn(T.BOOL, [[T.LPSTR], [T.LPARAM]]), [['stdcall']]);};
T.NAMEENUMPROCW = function() {return Pointer(Fn(T.BOOL, [[T.LPWSTR], [T.LPARAM]]), [['stdcall']]);};
T.PROPENUMPROCA = function() {return Pointer(Fn(T.BOOL, [[T.HWND], [T.LPCSTR], [T.HANDLE]]), [['stdcall']]);};
T.PROPENUMPROCW = function() {return Pointer(Fn(T.BOOL, [[T.HWND], [T.LPCWSTR], [T.HANDLE]]), [['stdcall']]);};
T.PROPENUMPROCEXA = function() {return Pointer(Fn(T.BOOL, [[T.HWND], [T.LPSTR], [T.HANDLE], [T.ULONG_PTR]]), [['stdcall']]);};
T.PROPENUMPROCEXW = function() {return Pointer(Fn(T.BOOL, [[T.HWND], [T.LPWSTR], [T.HANDLE], [T.ULONG_PTR]]), [['stdcall']]);};
T.SENDASYNCPROC = function() {return Pointer(Fn(null, [[T.HWND], [T.UINT], [T.ULONG_PTR], [T.LRESULT]]), [['stdcall']]);};
T.TIMERPROC = function() {return Pointer(Fn(null, [[T.HWND], [T.UINT], [T.UINT_PTR], [T.DWORD]]), [['stdcall']]);};
T.WINEVENTPROC = function() {return Pointer(Fn(null, [[T.HWINEVENTHOOK], [T.DWORD], [T.HWND], [T.LONG], [T.LONG], [T.DWORD], [T.DWORD]]), [['stdcall']]);};
T.WNDENUMPROC = function() {return Pointer(Fn(T.BOOL, [[T.HWND], [T.LPARAM]]), [['stdcall']]);};
T.WINSTAENUMPROCA = function() {return T.NAMEENUMPROCA;};
T.DESKTOPENUMPROCA = function() {return T.NAMEENUMPROCA;};
T.WINSTAENUMPROCW = function() {return T.NAMEENUMPROCW;};
T.DESKTOPENUMPROCW = function() {return T.NAMEENUMPROCW;};
T.WNDPROC = function() {return Pointer(Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]), [['stdcall']]);};
T.DESKTOPENUMPROC = function() {return T.DESKTOPENUMPROCA;};
T.EDITWORDBREAKPROC = function() {return T.EDITWORDBREAKPROCA;};
T.NAMEENUMPROC = function() {return T.NAMEENUMPROCA;};
T.PROPENUMPROC = function() {return T.PROPENUMPROCA;};
T.PROPENUMPROCEX = function() {return T.PROPENUMPROCEXA;};
T.WINSTAENUMPROC = function() {return T.WINSTAENUMPROCA;};
T.HDWP = function() {return T.HANDLE;};
T.USEROBJECTFLAGS = function() {return Struct('tagUSEROBJECTFLAGS', {
    fInherit: T.BOOL,
    fReserved: T.BOOL,
    dwFlags: T.DWORD
});};
T.PUSEROBJECTFLAGS = function() {return Pointer(Struct('tagUSEROBJECTFLAGS', {
    fInherit: T.BOOL,
    fReserved: T.BOOL,
    dwFlags: T.DWORD
}));};
T.BSMINFO = function() {return Struct('tagBSMINFO', {
    cbSize: T.UINT,
    hdesk: T.HDESK,
    hwnd: T.HWND,
    luid: T.LUID
});};
T.PBSMINFO = function() {return Pointer(Struct('tagBSMINFO', {
    cbSize: T.UINT,
    hdesk: T.HDESK,
    hwnd: T.HWND,
    luid: T.LUID
}));};
T.FILTERKEYS = function() {return Struct('tagFILTERKEYS', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iWaitMSec: T.DWORD,
    iDelayMSec: T.DWORD,
    iRepeatMSec: T.DWORD,
    iBounceMSec: T.DWORD
});};
T.LPFILTERKEYS = function() {return Pointer(Struct('tagFILTERKEYS', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iWaitMSec: T.DWORD,
    iDelayMSec: T.DWORD,
    iRepeatMSec: T.DWORD,
    iBounceMSec: T.DWORD
}));};
T.TOGGLEKEYS = function() {return Struct('tagTOGGLEKEYS', {
    cbSize: T.DWORD,
    dwFlags: T.DWORD
});};
T.LPTOGGLEKEYS = function() {return Pointer(Struct('tagTOGGLEKEYS', {
    cbSize: T.DWORD,
    dwFlags: T.DWORD
}));};
T.MOUSEKEYS = function() {return Struct('tagMOUSEKEYS', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iMaxSpeed: T.DWORD,
    iTimeToMaxSpeed: T.DWORD,
    iCtrlSpeed: T.DWORD,
    dwReserved1: T.DWORD,
    dwReserved2: T.DWORD
});};
T.LPMOUSEKEYS = function() {return Pointer(Struct('tagMOUSEKEYS', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iMaxSpeed: T.DWORD,
    iTimeToMaxSpeed: T.DWORD,
    iCtrlSpeed: T.DWORD,
    dwReserved1: T.DWORD,
    dwReserved2: T.DWORD
}));};
T.MOUSEMOVEPOINT = function() {return Struct('tagMOUSEMOVEPOINT', {
    x: T.i32,
    y: T.i32,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
});};
T.PMOUSEMOVEPOINT = function() {return Pointer(Struct('tagMOUSEMOVEPOINT', {
    x: T.i32,
    y: T.i32,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));};
T.LPMOUSEMOVEPOINT = function() {return Pointer(Struct('tagMOUSEMOVEPOINT', {
    x: T.i32,
    y: T.i32,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));};
T.STICKYKEYS = function() {return Struct('tagSTICKYKEYS', {
    cbSize: T.DWORD,
    dwFlags: T.DWORD
});};
T.LPSTICKYKEYS = function() {return Pointer(Struct('tagSTICKYKEYS', {
    cbSize: T.DWORD,
    dwFlags: T.DWORD
}));};
T.ACCESSTIMEOUT = function() {return Struct('tagACCESSTIMEOUT', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iTimeOutMSec: T.DWORD
});};
T.LPACCESSTIMEOUT = function() {return Pointer(Struct('tagACCESSTIMEOUT', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iTimeOutMSec: T.DWORD
}));};
T.SERIALKEYSA = function() {return Struct('tagSERIALKEYSA', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    lpszActivePort: T.LPSTR,
    lpszPort: T.LPSTR,
    iBaudRate: T.UINT,
    iPortState: T.UINT,
    iActive: T.UINT
});};
T.LPSERIALKEYSA = function() {return Pointer(Struct('tagSERIALKEYSA', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    lpszActivePort: T.LPSTR,
    lpszPort: T.LPSTR,
    iBaudRate: T.UINT,
    iPortState: T.UINT,
    iActive: T.UINT
}));};
T.SERIALKEYSW = function() {return Struct('tagSERIALKEYSW', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    lpszActivePort: T.LPWSTR,
    lpszPort: T.LPWSTR,
    iBaudRate: T.UINT,
    iPortState: T.UINT,
    iActive: T.UINT
});};
T.LPSERIALKEYSW = function() {return Pointer(Struct('tagSERIALKEYSW', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    lpszActivePort: T.LPWSTR,
    lpszPort: T.LPWSTR,
    iBaudRate: T.UINT,
    iPortState: T.UINT,
    iActive: T.UINT
}));};
T.SERIALKEYS = function() {return T.SERIALKEYSA;};
T.LPSERIALKEYS = function() {return T.LPSERIALKEYSA;};
T.SOUNDSENTRYA = function() {return Struct('tagSOUNDSENTRYA', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iFSTextEffect: T.DWORD,
    iFSTextEffectMSec: T.DWORD,
    iFSTextEffectColorBits: T.DWORD,
    iFSGrafEffect: T.DWORD,
    iFSGrafEffectMSec: T.DWORD,
    iFSGrafEffectColor: T.DWORD,
    iWindowsEffect: T.DWORD,
    iWindowsEffectMSec: T.DWORD,
    lpszWindowsEffectDLL: T.LPSTR,
    iWindowsEffectOrdinal: T.DWORD
});};
T.LPSOUNDSENTRYA = function() {return Pointer(Struct('tagSOUNDSENTRYA', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iFSTextEffect: T.DWORD,
    iFSTextEffectMSec: T.DWORD,
    iFSTextEffectColorBits: T.DWORD,
    iFSGrafEffect: T.DWORD,
    iFSGrafEffectMSec: T.DWORD,
    iFSGrafEffectColor: T.DWORD,
    iWindowsEffect: T.DWORD,
    iWindowsEffectMSec: T.DWORD,
    lpszWindowsEffectDLL: T.LPSTR,
    iWindowsEffectOrdinal: T.DWORD
}));};
T.SOUNDSENTRYW = function() {return Struct('tagSOUNDSENTRYW', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iFSTextEffect: T.DWORD,
    iFSTextEffectMSec: T.DWORD,
    iFSTextEffectColorBits: T.DWORD,
    iFSGrafEffect: T.DWORD,
    iFSGrafEffectMSec: T.DWORD,
    iFSGrafEffectColor: T.DWORD,
    iWindowsEffect: T.DWORD,
    iWindowsEffectMSec: T.DWORD,
    lpszWindowsEffectDLL: T.LPWSTR,
    iWindowsEffectOrdinal: T.DWORD
});};
T.LPSOUNDSENTRYW = function() {return Pointer(Struct('tagSOUNDSENTRYW', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iFSTextEffect: T.DWORD,
    iFSTextEffectMSec: T.DWORD,
    iFSTextEffectColorBits: T.DWORD,
    iFSGrafEffect: T.DWORD,
    iFSGrafEffectMSec: T.DWORD,
    iFSGrafEffectColor: T.DWORD,
    iWindowsEffect: T.DWORD,
    iWindowsEffectMSec: T.DWORD,
    lpszWindowsEffectDLL: T.LPWSTR,
    iWindowsEffectOrdinal: T.DWORD
}));};
T.SOUNDSENTRY = function() {return T.SOUNDSENTRYA;};
T.LPSOUNDSENTRY = function() {return T.LPSOUNDSENTRYA;};
T.HIGHCONTRASTA = function() {return Struct('tagHIGHCONTRASTA', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    lpszDefaultScheme: T.LPSTR
});};
T.LPHIGHCONTRASTA = function() {return Pointer(Struct('tagHIGHCONTRASTA', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    lpszDefaultScheme: T.LPSTR
}));};
T.HIGHCONTRASTW = function() {return Struct('tagHIGHCONTRASTW', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    lpszDefaultScheme: T.LPWSTR
});};
T.LPHIGHCONTRASTW = function() {return Pointer(Struct('tagHIGHCONTRASTW', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    lpszDefaultScheme: T.LPWSTR
}));};
T.HIGHCONTRAST = function() {return T.HIGHCONTRASTA;};
T.LPHIGHCONTRAST = function() {return T.LPHIGHCONTRASTA;};
T.EVENTMSG = function() {return Struct('tagEVENTMSG', {
    message: T.UINT,
    paramL: T.UINT,
    paramH: T.UINT,
    time: T.DWORD,
    hwnd: T.HWND
});};
T.PEVENTMSG = function() {return Pointer(Struct('tagEVENTMSG', {
    message: T.UINT,
    paramL: T.UINT,
    paramH: T.UINT,
    time: T.DWORD,
    hwnd: T.HWND
}));};
T.LPEVENTMSG = function() {return Pointer(Struct('tagEVENTMSG', {
    message: T.UINT,
    paramL: T.UINT,
    paramH: T.UINT,
    time: T.DWORD,
    hwnd: T.HWND
}));};
T.KBDLLHOOKSTRUCT = function() {return Struct('tagKBDLLHOOKSTRUCT', {
    vkCode: T.DWORD,
    scanCode: T.DWORD,
    flags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
});};
T.LPKBDLLHOOKSTRUCT = function() {return Pointer(Struct('tagKBDLLHOOKSTRUCT', {
    vkCode: T.DWORD,
    scanCode: T.DWORD,
    flags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));};
T.PKBDLLHOOKSTRUCT = function() {return Pointer(Struct('tagKBDLLHOOKSTRUCT', {
    vkCode: T.DWORD,
    scanCode: T.DWORD,
    flags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));};
T.MSLLHOOKSTRUCT = function() {return Struct('tagMSLLHOOKSTRUCT', {
    pt: T.POINT,
    mouseData: T.DWORD,
    flags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
});};
T.LPMSLLHOOKSTRUCT = function() {return Pointer(Struct('tagMSLLHOOKSTRUCT', {
    pt: T.POINT,
    mouseData: T.DWORD,
    flags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));};
T.PMSLLHOOKSTRUCT = function() {return Pointer(Struct('tagMSLLHOOKSTRUCT', {
    pt: T.POINT,
    mouseData: T.DWORD,
    flags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));};
T.MOUSEHOOKSTRUCT = function() {return Struct('', {
    pt: T.POINT,
    hwnd: T.HWND,
    wHitTestCode: T.UINT,
    dwExtraInfo: T.ULONG_PTR
});};
T.PMOUSEHOOKSTRUCT = function() {return Pointer(Struct('', {
    pt: T.POINT,
    hwnd: T.HWND,
    wHitTestCode: T.UINT,
    dwExtraInfo: T.ULONG_PTR
}));};
T.LPMOUSEHOOKSTRUCT = function() {return Pointer(Struct('', {
    pt: T.POINT,
    hwnd: T.HWND,
    wHitTestCode: T.UINT,
    dwExtraInfo: T.ULONG_PTR
}));};
T.HARDWAREHOOKSTRUCT = function() {return Struct('', {
    hwnd: T.HWND,
    message: T.UINT,
    wParam: T.WPARAM,
    lParam: T.LPARAM
});};
T.PHARDWAREHOOKSTRUCT = function() {return Pointer(Struct('', {
    hwnd: T.HWND,
    message: T.UINT,
    wParam: T.WPARAM,
    lParam: T.LPARAM
}));};
T.LPHARDWAREHOOKSTRUCT = function() {return Pointer(Struct('', {
    hwnd: T.HWND,
    message: T.UINT,
    wParam: T.WPARAM,
    lParam: T.LPARAM
}));};
T.DEBUGHOOKINFO = function() {return Struct('tagDEBUGHOOKINFO', {
    idThread: T.DWORD,
    idThreadInstaller: T.DWORD,
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    code: T.INT
});};
T.PDEBUGHOOKINFO = function() {return Pointer(Struct('tagDEBUGHOOKINFO', {
    idThread: T.DWORD,
    idThreadInstaller: T.DWORD,
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    code: T.INT
}));};
T.LPDEBUGHOOKINFO = function() {return Pointer(Struct('tagDEBUGHOOKINFO', {
    idThread: T.DWORD,
    idThreadInstaller: T.DWORD,
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    code: T.INT
}));};
T.MOUSEINPUT = function() {return Struct('tagMOUSEINPUT', {
    dx: T.LONG,
    dy: T.LONG,
    mouseData: T.DWORD,
    dwFlags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
});};
T.PMOUSEINPUT = function() {return Pointer(Struct('tagMOUSEINPUT', {
    dx: T.LONG,
    dy: T.LONG,
    mouseData: T.DWORD,
    dwFlags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));};
T.LPMOUSEINPUT = function() {return Pointer(Struct('tagMOUSEINPUT', {
    dx: T.LONG,
    dy: T.LONG,
    mouseData: T.DWORD,
    dwFlags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));};
T.KEYBDINPUT = function() {return Struct('tagKEYBDINPUT', {
    wVk: T.WORD,
    wScan: T.WORD,
    dwFlags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
});};
T.PKEYBDINPUT = function() {return Pointer(Struct('tagKEYBDINPUT', {
    wVk: T.WORD,
    wScan: T.WORD,
    dwFlags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));};
T.LPKEYBDINPUT = function() {return Pointer(Struct('tagKEYBDINPUT', {
    wVk: T.WORD,
    wScan: T.WORD,
    dwFlags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));};
T.HARDWAREINPUT = function() {return Struct('tagHARDWAREINPUT', {
    uMsg: T.DWORD,
    wParamL: T.WORD,
    wParamH: T.WORD
});};
T.PHARDWAREINPUT = function() {return Pointer(Struct('tagHARDWAREINPUT', {
    uMsg: T.DWORD,
    wParamL: T.WORD,
    wParamH: T.WORD
}));};
T.LPHARDWAREINPUT = function() {return Pointer(Struct('tagHARDWAREINPUT', {
    uMsg: T.DWORD,
    wParamL: T.WORD,
    wParamH: T.WORD
}));};
T.INPUT = function() {return Struct('tagINPUT', {
    type: T.DWORD,
    __unnamed0: Union('', {
        mi: T.MOUSEINPUT,
        ki: T.KEYBDINPUT,
        hi: T.HARDWAREINPUT
    })
});};
T.PINPUT = function() {return Pointer(Struct('tagINPUT', {
    type: T.DWORD,
    __unnamed0: Union('', {
        mi: T.MOUSEINPUT,
        ki: T.KEYBDINPUT,
        hi: T.HARDWAREINPUT
    })
}));};
T.LPINPUT = function() {return Pointer(Struct('tagINPUT', {
    type: T.DWORD,
    __unnamed0: Union('', {
        mi: T.MOUSEINPUT,
        ki: T.KEYBDINPUT,
        hi: T.HARDWAREINPUT
    })
}));};
T.HRAWINPUT = function() {return Pointer(Struct('HRAWINPUT__', {
    unused: T.i32
}));};
T.RAWINPUTDEVICELIST = function() {return Struct('tagRAWINPUTDEVICELIST', {
    hDevice: T.HANDLE,
    dwType: T.DWORD
});};
T.PRAWINPUTDEVICELIST = function() {return Pointer(Struct('tagRAWINPUTDEVICELIST', {
    hDevice: T.HANDLE,
    dwType: T.DWORD
}));};
T.RAWHID = function() {return Struct('tagRAWHID', {
    dwSizeHid: T.DWORD,
    dwCount: T.DWORD,
    bRawData: T.BYTE
});};
T.LPRAWHID = function() {return Pointer(Struct('tagRAWHID', {
    dwSizeHid: T.DWORD,
    dwCount: T.DWORD,
    bRawData: T.BYTE
}));};
T.RAWKEYBOARD = function() {return Struct('tagRAWKEYBOARD', {
    MakeCode: T.USHORT,
    Flags: T.USHORT,
    Reserved: T.USHORT,
    VKey: T.USHORT,
    Message: T.UINT,
    ExtraInformation: T.ULONG
});};
T.PRAWKEYBOARD = function() {return Pointer(Struct('tagRAWKEYBOARD', {
    MakeCode: T.USHORT,
    Flags: T.USHORT,
    Reserved: T.USHORT,
    VKey: T.USHORT,
    Message: T.UINT,
    ExtraInformation: T.ULONG
}));};
T.LPRAWKEYBOARD = function() {return Pointer(Struct('tagRAWKEYBOARD', {
    MakeCode: T.USHORT,
    Flags: T.USHORT,
    Reserved: T.USHORT,
    VKey: T.USHORT,
    Message: T.UINT,
    ExtraInformation: T.ULONG
}));};
T.RAWMOUSE = function() {return Struct('tagRAWMOUSE', {
    usFlags: T.USHORT,
    __unnamed0: Union('', {
        ulButtons: T.ULONG,
        __unnamed0: Struct('', {
            usButtonFlags: T.USHORT,
            usButtonData: T.USHORT
        })
    }),
    ulRawButtons: T.ULONG,
    lLastX: T.LONG,
    lLastY: T.LONG,
    ulExtraInformation: T.ULONG
});};
T.PRAWMOUSE = function() {return Pointer(Struct('tagRAWMOUSE', {
    usFlags: T.USHORT,
    __unnamed0: Union('', {
        ulButtons: T.ULONG,
        __unnamed0: Struct('', {
            usButtonFlags: T.USHORT,
            usButtonData: T.USHORT
        })
    }),
    ulRawButtons: T.ULONG,
    lLastX: T.LONG,
    lLastY: T.LONG,
    ulExtraInformation: T.ULONG
}));};
T.LPRAWMOUSE = function() {return Pointer(Struct('tagRAWMOUSE', {
    usFlags: T.USHORT,
    __unnamed0: Union('', {
        ulButtons: T.ULONG,
        __unnamed0: Struct('', {
            usButtonFlags: T.USHORT,
            usButtonData: T.USHORT
        })
    }),
    ulRawButtons: T.ULONG,
    lLastX: T.LONG,
    lLastY: T.LONG,
    ulExtraInformation: T.ULONG
}));};
T.RAWINPUTHEADER = function() {return Struct('tagRAWINPUTHEADER', {
    dwType: T.DWORD,
    dwSize: T.DWORD,
    hDevice: T.HANDLE,
    wParam: T.WPARAM
});};
T.PRAWINPUTHEADER = function() {return Pointer(Struct('tagRAWINPUTHEADER', {
    dwType: T.DWORD,
    dwSize: T.DWORD,
    hDevice: T.HANDLE,
    wParam: T.WPARAM
}));};
T.RAWINPUT = function() {return Struct('tagRAWINPUT', {
    header: T.RAWINPUTHEADER,
    data: Union('', {
        mouse: T.RAWMOUSE,
        keyboard: T.RAWKEYBOARD,
        hid: T.RAWHID
    })
});};
T.PRAWINPUT = function() {return Pointer(Struct('tagRAWINPUT', {
    header: T.RAWINPUTHEADER,
    data: Union('', {
        mouse: T.RAWMOUSE,
        keyboard: T.RAWKEYBOARD,
        hid: T.RAWHID
    })
}));};
T.LPRAWINPUT = function() {return Pointer(Struct('tagRAWINPUT', {
    header: T.RAWINPUTHEADER,
    data: Union('', {
        mouse: T.RAWMOUSE,
        keyboard: T.RAWKEYBOARD,
        hid: T.RAWHID
    })
}));};
T.RAWINPUTDEVICE = function() {return Struct('tagRAWINPUTDEVICE', {
    usUsagePage: T.USHORT,
    usUsage: T.USHORT,
    dwFlags: T.DWORD,
    hwndTarget: T.HWND
});};
T.PRAWINPUTDEVICE = function() {return Pointer(Struct('tagRAWINPUTDEVICE', {
    usUsagePage: T.USHORT,
    usUsage: T.USHORT,
    dwFlags: T.DWORD,
    hwndTarget: T.HWND
}));};
T.LPRAWINPUTDEVICE = function() {return Pointer(Struct('tagRAWINPUTDEVICE', {
    usUsagePage: T.USHORT,
    usUsage: T.USHORT,
    dwFlags: T.DWORD,
    hwndTarget: T.HWND
}));};
T.RID_DEVICE_INFO_MOUSE = function() {return Struct('tagRID_DEVICE_INFO_MOUSE', {
    dwId: T.DWORD,
    dwNumberOfButtons: T.DWORD,
    dwSampleRate: T.DWORD,
    fHasHorizontalWheel: T.BOOL
});};
T.PRID_DEVICE_INFO_MOUSE = function() {return Pointer(Struct('tagRID_DEVICE_INFO_MOUSE', {
    dwId: T.DWORD,
    dwNumberOfButtons: T.DWORD,
    dwSampleRate: T.DWORD,
    fHasHorizontalWheel: T.BOOL
}));};
T.RID_DEVICE_INFO_KEYBOARD = function() {return Struct('tagRID_DEVICE_INFO_KEYBOARD', {
    dwType: T.DWORD,
    dwSubType: T.DWORD,
    dwKeyboardMode: T.DWORD,
    dwNumberOfFunctionKeys: T.DWORD,
    dwNumberOfIndicators: T.DWORD,
    dwNumberOfKeysTotal: T.DWORD
});};
T.PRID_DEVICE_INFO_KEYBOARD = function() {return Pointer(Struct('tagRID_DEVICE_INFO_KEYBOARD', {
    dwType: T.DWORD,
    dwSubType: T.DWORD,
    dwKeyboardMode: T.DWORD,
    dwNumberOfFunctionKeys: T.DWORD,
    dwNumberOfIndicators: T.DWORD,
    dwNumberOfKeysTotal: T.DWORD
}));};
T.RID_DEVICE_INFO_HID = function() {return Struct('tagRID_DEVICE_INFO_HID', {
    dwVendorId: T.DWORD,
    dwProductId: T.DWORD,
    dwVersionNumber: T.DWORD,
    usUsagePage: T.USHORT,
    usUsage: T.USHORT
});};
T.PRID_DEVICE_INFO_HID = function() {return Pointer(Struct('tagRID_DEVICE_INFO_HID', {
    dwVendorId: T.DWORD,
    dwProductId: T.DWORD,
    dwVersionNumber: T.DWORD,
    usUsagePage: T.USHORT,
    usUsage: T.USHORT
}));};
T.RID_DEVICE_INFO = function() {return Struct('tagRID_DEVICE_INFO', {
    cbSize: T.DWORD,
    dwType: T.DWORD,
    __unnamed0: Union('', {
        mouse: T.RID_DEVICE_INFO_MOUSE,
        keyboard: T.RID_DEVICE_INFO_KEYBOARD,
        hid: T.RID_DEVICE_INFO_HID
    })
});};
T.PRID_DEVICE_INFO = function() {return Pointer(Struct('tagRID_DEVICE_INFO', {
    cbSize: T.DWORD,
    dwType: T.DWORD,
    __unnamed0: Union('', {
        mouse: T.RID_DEVICE_INFO_MOUSE,
        keyboard: T.RID_DEVICE_INFO_KEYBOARD,
        hid: T.RID_DEVICE_INFO_HID
    })
}));};
T.LPRID_DEVICE_INFO = function() {return Pointer(Struct('tagRID_DEVICE_INFO', {
    cbSize: T.DWORD,
    dwType: T.DWORD,
    __unnamed0: Union('', {
        mouse: T.RID_DEVICE_INFO_MOUSE,
        keyboard: T.RID_DEVICE_INFO_KEYBOARD,
        hid: T.RID_DEVICE_INFO_HID
    })
}));};
T.GUITHREADINFO = function() {return Struct('tagGUITHREADINFO', {
    cbSize: T.DWORD,
    flags: T.DWORD,
    hwndActive: T.HWND,
    hwndFocus: T.HWND,
    hwndCapture: T.HWND,
    hwndMenuOwner: T.HWND,
    hwndMoveSize: T.HWND,
    hwndCaret: T.HWND,
    rcCaret: T.RECT
});};
T.PGUITHREADINFO = function() {return Pointer(Struct('tagGUITHREADINFO', {
    cbSize: T.DWORD,
    flags: T.DWORD,
    hwndActive: T.HWND,
    hwndFocus: T.HWND,
    hwndCapture: T.HWND,
    hwndMenuOwner: T.HWND,
    hwndMoveSize: T.HWND,
    hwndCaret: T.HWND,
    rcCaret: T.RECT
}));};
T.LPGUITHREADINFO = function() {return Pointer(Struct('tagGUITHREADINFO', {
    cbSize: T.DWORD,
    flags: T.DWORD,
    hwndActive: T.HWND,
    hwndFocus: T.HWND,
    hwndCapture: T.HWND,
    hwndMenuOwner: T.HWND,
    hwndMoveSize: T.HWND,
    hwndCaret: T.HWND,
    rcCaret: T.RECT
}));};
T.ANIMATIONINFO = function() {return Struct('tagANIMATIONINFO', {
    cbSize: T.UINT,
    iMinAnimate: T.INT
});};
T.LPANIMATIONINFO = function() {return Pointer(Struct('tagANIMATIONINFO', {
    cbSize: T.UINT,
    iMinAnimate: T.INT
}));};
T.NMHDR = function() {return Struct('tagNMHDR', {
    hwndFrom: T.HWND,
    idFrom: T.UINT_PTR,
    code: T.UINT
});};
T.LPNMHDR = function() {return Pointer(Struct('tagNMHDR', {
    hwndFrom: T.HWND,
    idFrom: T.UINT_PTR,
    code: T.UINT
}));};
T.DRAWTEXTPARAMS = function() {return Struct('tagDRAWTEXTPARAMS', {
    cbSize: T.UINT,
    iTabLength: T.INT,
    iLeftMargin: T.INT,
    iRightMargin: T.INT,
    uiLengthDrawn: T.UINT
});};
T.LPDRAWTEXTPARAMS = function() {return Pointer(Struct('tagDRAWTEXTPARAMS', {
    cbSize: T.UINT,
    iTabLength: T.INT,
    iLeftMargin: T.INT,
    iRightMargin: T.INT,
    uiLengthDrawn: T.UINT
}));};
T.CWPSTRUCT = function() {return Struct('', {
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    message: T.UINT,
    hwnd: T.HWND
});};
T.PCWPSTRUCT = function() {return Pointer(Struct('', {
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    message: T.UINT,
    hwnd: T.HWND
}));};
T.LPCWPSTRUCT = function() {return Pointer(Struct('', {
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    message: T.UINT,
    hwnd: T.HWND
}));};
T.CWPRETSTRUCT = function() {return Struct('', {
    lResult: T.LRESULT,
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    message: T.DWORD,
    hwnd: T.HWND
});};
T.PCWPRETSTRUCT = function() {return Pointer(Struct('', {
    lResult: T.LRESULT,
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    message: T.DWORD,
    hwnd: T.HWND
}));};
T.LPCWPRETSTRUCT = function() {return Pointer(Struct('', {
    lResult: T.LRESULT,
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    message: T.DWORD,
    hwnd: T.HWND
}));};
T.WINDOWPLACEMENT = function() {return Struct('tagWINDOWPLACEMENT', {
    length: T.UINT,
    flags: T.UINT,
    showCmd: T.UINT,
    ptMinPosition: T.POINT,
    ptMaxPosition: T.POINT,
    rcNormalPosition: T.RECT
});};
T.PWINDOWPLACEMENT = function() {return Pointer(Struct('tagWINDOWPLACEMENT', {
    length: T.UINT,
    flags: T.UINT,
    showCmd: T.UINT,
    ptMinPosition: T.POINT,
    ptMaxPosition: T.POINT,
    rcNormalPosition: T.RECT
}));};
T.LPWINDOWPLACEMENT = function() {return Pointer(Struct('tagWINDOWPLACEMENT', {
    length: T.UINT,
    flags: T.UINT,
    showCmd: T.UINT,
    ptMinPosition: T.POINT,
    ptMaxPosition: T.POINT,
    rcNormalPosition: T.RECT
}));};
T.CREATESTRUCTA = function() {return Struct('tagCREATESTRUCTA', {
    lpCreateParams: T.LPVOID,
    hInstance: T.HINSTANCE,
    hMenu: T.HMENU,
    hwndParent: T.HWND,
    cy: T.INT,
    cx: T.INT,
    y: T.INT,
    x: T.INT,
    style: T.LONG,
    lpszName: T.LPCSTR,
    lpszClass: T.LPCSTR,
    dwExStyle: T.DWORD
});};
T.LPCREATESTRUCTA = function() {return Pointer(Struct('tagCREATESTRUCTA', {
    lpCreateParams: T.LPVOID,
    hInstance: T.HINSTANCE,
    hMenu: T.HMENU,
    hwndParent: T.HWND,
    cy: T.INT,
    cx: T.INT,
    y: T.INT,
    x: T.INT,
    style: T.LONG,
    lpszName: T.LPCSTR,
    lpszClass: T.LPCSTR,
    dwExStyle: T.DWORD
}));};
T.CREATESTRUCTW = function() {return Struct('tagCREATESTRUCTW', {
    lpCreateParams: T.LPVOID,
    hInstance: T.HINSTANCE,
    hMenu: T.HMENU,
    hwndParent: T.HWND,
    cy: T.INT,
    cx: T.INT,
    y: T.INT,
    x: T.INT,
    style: T.LONG,
    lpszName: T.LPCWSTR,
    lpszClass: T.LPCWSTR,
    dwExStyle: T.DWORD
});};
T.LPCREATESTRUCTW = function() {return Pointer(Struct('tagCREATESTRUCTW', {
    lpCreateParams: T.LPVOID,
    hInstance: T.HINSTANCE,
    hMenu: T.HMENU,
    hwndParent: T.HWND,
    cy: T.INT,
    cx: T.INT,
    y: T.INT,
    x: T.INT,
    style: T.LONG,
    lpszName: T.LPCWSTR,
    lpszClass: T.LPCWSTR,
    dwExStyle: T.DWORD
}));};
T.CREATESTRUCT = function() {return T.CREATESTRUCTA;};
T.LPCREATESTRUCT = function() {return T.LPCREATESTRUCTA;};
T.PAINTSTRUCT = function() {return Struct('tagPAINTSTRUCT', {
    hdc: T.HDC,
    fErase: T.BOOL,
    rcPaint: T.RECT,
    fRestore: T.BOOL,
    fIncUpdate: T.BOOL,
    rgbReserved: ArrayType(T.BYTE, 32)
});};
T.PPAINTSTRUCT = function() {return Pointer(Struct('tagPAINTSTRUCT', {
    hdc: T.HDC,
    fErase: T.BOOL,
    rcPaint: T.RECT,
    fRestore: T.BOOL,
    fIncUpdate: T.BOOL,
    rgbReserved: ArrayType(T.BYTE, 32)
}));};
T.LPPAINTSTRUCT = function() {return Pointer(Struct('tagPAINTSTRUCT', {
    hdc: T.HDC,
    fErase: T.BOOL,
    rcPaint: T.RECT,
    fRestore: T.BOOL,
    fIncUpdate: T.BOOL,
    rgbReserved: ArrayType(T.BYTE, 32)
}));};
T.CLIENTCREATESTRUCT = function() {return Struct('tagCLIENTCREATESTRUCT', {
    hWindowMenu: T.HMENU,
    idFirstChild: T.UINT
});};
T.LPCLIENTCREATESTRUCT = function() {return Pointer(Struct('tagCLIENTCREATESTRUCT', {
    hWindowMenu: T.HMENU,
    idFirstChild: T.UINT
}));};
T.MDICREATESTRUCTA = function() {return Struct('tagMDICREATESTRUCTA', {
    szClass: T.LPCSTR,
    szTitle: T.LPCSTR,
    hOwner: T.HINSTANCE,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    style: T.DWORD,
    lParam: T.LPARAM
});};
T.LPMDICREATESTRUCTA = function() {return Pointer(Struct('tagMDICREATESTRUCTA', {
    szClass: T.LPCSTR,
    szTitle: T.LPCSTR,
    hOwner: T.HINSTANCE,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    style: T.DWORD,
    lParam: T.LPARAM
}));};
T.MDICREATESTRUCTW = function() {return Struct('tagMDICREATESTRUCTW', {
    szClass: T.LPCWSTR,
    szTitle: T.LPCWSTR,
    hOwner: T.HINSTANCE,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    style: T.DWORD,
    lParam: T.LPARAM
});};
T.LPMDICREATESTRUCTW = function() {return Pointer(Struct('tagMDICREATESTRUCTW', {
    szClass: T.LPCWSTR,
    szTitle: T.LPCWSTR,
    hOwner: T.HINSTANCE,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    style: T.DWORD,
    lParam: T.LPARAM
}));};
T.MDICREATESTRUCT = function() {return T.MDICREATESTRUCTA;};
T.LPMDICREATESTRUCT = function() {return T.LPMDICREATESTRUCTA;};
T.STYLESTRUCT = function() {return Struct('tagSTYLESTRUCT', {
    styleOld: T.DWORD,
    styleNew: T.DWORD
});};
T.LPSTYLESTRUCT = function() {return Pointer(Struct('tagSTYLESTRUCT', {
    styleOld: T.DWORD,
    styleNew: T.DWORD
}));};
T.MINMAXINFO = function() {return Struct('tagMINMAXINFO', {
    ptReserved: T.POINT,
    ptMaxSize: T.POINT,
    ptMaxPosition: T.POINT,
    ptMinTrackSize: T.POINT,
    ptMaxTrackSize: T.POINT
});};
T.PMINMAXINFO = function() {return Pointer(Struct('tagMINMAXINFO', {
    ptReserved: T.POINT,
    ptMaxSize: T.POINT,
    ptMaxPosition: T.POINT,
    ptMinTrackSize: T.POINT,
    ptMaxTrackSize: T.POINT
}));};
T.LPMINMAXINFO = function() {return Pointer(Struct('tagMINMAXINFO', {
    ptReserved: T.POINT,
    ptMaxSize: T.POINT,
    ptMaxPosition: T.POINT,
    ptMinTrackSize: T.POINT,
    ptMaxTrackSize: T.POINT
}));};
T.WINDOWPOS = function() {return Struct('tagWINDOWPOS', {
    hwnd: T.HWND,
    hwndInsertAfter: T.HWND,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    flags: T.UINT
});};
T.PWINDOWPOS = function() {return Pointer(Struct('tagWINDOWPOS', {
    hwnd: T.HWND,
    hwndInsertAfter: T.HWND,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    flags: T.UINT
}));};
T.LPWINDOWPOS = function() {return Pointer(Struct('tagWINDOWPOS', {
    hwnd: T.HWND,
    hwndInsertAfter: T.HWND,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    flags: T.UINT
}));};
T.NCCALCSIZE_PARAMS = function() {return Struct('', {
    rgrc: ArrayType(T.RECT, 3),
    lppos: Pointer(T.WINDOWPOS)
});};
T.LPNCCALCSIZE_PARAMS = function() {return Pointer(Struct('', {
    rgrc: ArrayType(T.RECT, 3),
    lppos: Pointer(T.WINDOWPOS)
}));};
T.WNDCLASSA = function() {return Struct('tagWNDCLASSA', {
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCSTR,
    lpszClassName: T.LPCSTR
});};
T.PWNDCLASSA = function() {return Pointer(Struct('tagWNDCLASSA', {
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCSTR,
    lpszClassName: T.LPCSTR
}));};
T.LPWNDCLASSA = function() {return Pointer(Struct('tagWNDCLASSA', {
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCSTR,
    lpszClassName: T.LPCSTR
}));};
T.WNDCLASSW = function() {return Struct('tagWNDCLASSW', {
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCWSTR,
    lpszClassName: T.LPCWSTR
});};
T.PWNDCLASSW = function() {return Pointer(Struct('tagWNDCLASSW', {
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCWSTR,
    lpszClassName: T.LPCWSTR
}));};
T.LPWNDCLASSW = function() {return Pointer(Struct('tagWNDCLASSW', {
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCWSTR,
    lpszClassName: T.LPCWSTR
}));};
T.WNDCLASS = function() {return T.WNDCLASSA;};
T.PWNDCLASS = function() {return T.PWNDCLASSA;};
T.LPWNDCLASS = function() {return T.LPWNDCLASSA;};
T.COPYDATASTRUCT = function() {return Struct('tagCOPYDATASTRUCT', {
    dwData: T.ULONG_PTR,
    cbData: T.DWORD,
    lpData: T.PVOID
});};
T.PCOPYDATASTRUCT = function() {return Pointer(Struct('tagCOPYDATASTRUCT', {
    dwData: T.ULONG_PTR,
    cbData: T.DWORD,
    lpData: T.PVOID
}));};
T.MDINEXTMENU = function() {return Struct('tagMDINEXTMENU', {
    hmenuIn: T.HMENU,
    hmenuNext: T.HMENU,
    hwndNext: T.HWND
});};
T.PMDINEXTMENU = function() {return Pointer(Struct('tagMDINEXTMENU', {
    hmenuIn: T.HMENU,
    hmenuNext: T.HMENU,
    hwndNext: T.HWND
}));};
T.LPMDINEXTMENU = function() {return Pointer(Struct('tagMDINEXTMENU', {
    hmenuIn: T.HMENU,
    hmenuNext: T.HMENU,
    hwndNext: T.HWND
}));};
T.MULTIKEYHELPA = function() {return Struct('tagMULTIKEYHELPA', {
    mkSize: T.DWORD,
    mkKeylist: T.CHAR,
    szKeyphrase: ArrayType(T.CHAR, 1)
});};
T.PMULTIKEYHELPA = function() {return Pointer(Struct('tagMULTIKEYHELPA', {
    mkSize: T.DWORD,
    mkKeylist: T.CHAR,
    szKeyphrase: ArrayType(T.CHAR, 1)
}));};
T.LPMULTIKEYHELPA = function() {return Pointer(Struct('tagMULTIKEYHELPA', {
    mkSize: T.DWORD,
    mkKeylist: T.CHAR,
    szKeyphrase: ArrayType(T.CHAR, 1)
}));};
T.MULTIKEYHELPW = function() {return Struct('tagMULTIKEYHELPW', {
    mkSize: T.DWORD,
    mkKeylist: T.WCHAR,
    szKeyphrase: ArrayType(T.WCHAR, 1)
});};
T.PMULTIKEYHELPW = function() {return Pointer(Struct('tagMULTIKEYHELPW', {
    mkSize: T.DWORD,
    mkKeylist: T.WCHAR,
    szKeyphrase: ArrayType(T.WCHAR, 1)
}));};
T.LPMULTIKEYHELPW = function() {return Pointer(Struct('tagMULTIKEYHELPW', {
    mkSize: T.DWORD,
    mkKeylist: T.WCHAR,
    szKeyphrase: ArrayType(T.WCHAR, 1)
}));};
T.MULTIKEYHELP = function() {return T.MULTIKEYHELPA;};
T.PMULTIKEYHELP = function() {return T.PMULTIKEYHELPA;};
T.LPMULTIKEYHELP = function() {return T.LPMULTIKEYHELPA;};
T.HELPWININFOA = function() {return Struct('tagHELPWININFOA', {
    wStructSize: T.i32,
    x: T.i32,
    y: T.i32,
    dx: T.i32,
    dy: T.i32,
    wMax: T.i32,
    rgchMember: ArrayType(T.CHAR, 2)
});};
T.PHELPWININFOA = function() {return Pointer(Struct('tagHELPWININFOA', {
    wStructSize: T.i32,
    x: T.i32,
    y: T.i32,
    dx: T.i32,
    dy: T.i32,
    wMax: T.i32,
    rgchMember: ArrayType(T.CHAR, 2)
}));};
T.LPHELPWININFOA = function() {return Pointer(Struct('tagHELPWININFOA', {
    wStructSize: T.i32,
    x: T.i32,
    y: T.i32,
    dx: T.i32,
    dy: T.i32,
    wMax: T.i32,
    rgchMember: ArrayType(T.CHAR, 2)
}));};
T.HELPWININFOW = function() {return Struct('tagHELPWININFOW', {
    wStructSize: T.i32,
    x: T.i32,
    y: T.i32,
    dx: T.i32,
    dy: T.i32,
    wMax: T.i32,
    rgchMember: ArrayType(T.WCHAR, 2)
});};
T.PHELPWININFOW = function() {return Pointer(Struct('tagHELPWININFOW', {
    wStructSize: T.i32,
    x: T.i32,
    y: T.i32,
    dx: T.i32,
    dy: T.i32,
    wMax: T.i32,
    rgchMember: ArrayType(T.WCHAR, 2)
}));};
T.LPHELPWININFOW = function() {return Pointer(Struct('tagHELPWININFOW', {
    wStructSize: T.i32,
    x: T.i32,
    y: T.i32,
    dx: T.i32,
    dy: T.i32,
    wMax: T.i32,
    rgchMember: ArrayType(T.WCHAR, 2)
}));};
T.HELPWININFO = function() {return T.HELPWININFOA;};
T.PHELPWININFO = function() {return T.PHELPWININFOA;};
T.LPHELPWININFO = function() {return T.LPHELPWININFOA;};
T.WNDCLASSEXA = function() {return Struct('tagWNDCLASSEXA', {
    cbSize: T.UINT,
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCSTR,
    lpszClassName: T.LPCSTR,
    hIconSm: T.HICON
});};
T.PWNDCLASSEXA = function() {return Pointer(Struct('tagWNDCLASSEXA', {
    cbSize: T.UINT,
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCSTR,
    lpszClassName: T.LPCSTR,
    hIconSm: T.HICON
}));};
T.LPWNDCLASSEXA = function() {return Pointer(Struct('tagWNDCLASSEXA', {
    cbSize: T.UINT,
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCSTR,
    lpszClassName: T.LPCSTR,
    hIconSm: T.HICON
}));};
T.WNDCLASSEXW = function() {return Struct('tagWNDCLASSEXW', {
    cbSize: T.UINT,
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCWSTR,
    lpszClassName: T.LPCWSTR,
    hIconSm: T.HICON
});};
T.PWNDCLASSEXW = function() {return Pointer(Struct('tagWNDCLASSEXW', {
    cbSize: T.UINT,
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCWSTR,
    lpszClassName: T.LPCWSTR,
    hIconSm: T.HICON
}));};
T.LPWNDCLASSEXW = function() {return Pointer(Struct('tagWNDCLASSEXW', {
    cbSize: T.UINT,
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCWSTR,
    lpszClassName: T.LPCWSTR,
    hIconSm: T.HICON
}));};
T.WNDCLASSEX = function() {return T.WNDCLASSEXA;};
T.PWNDCLASSEX = function() {return T.PWNDCLASSEXA;};
T.LPWNDCLASSEX = function() {return T.LPWNDCLASSEXA;};
T.MSG = function() {return Struct('tagMSG', {
    hwnd: T.HWND,
    message: T.UINT,
    wParam: T.WPARAM,
    lParam: T.LPARAM,
    time: T.DWORD,
    pt: T.POINT
});};
T.PMSG = function() {return Pointer(Struct('tagMSG', {
    hwnd: T.HWND,
    message: T.UINT,
    wParam: T.WPARAM,
    lParam: T.LPARAM,
    time: T.DWORD,
    pt: T.POINT
}));};
T.LPMSG = function() {return Pointer(Struct('tagMSG', {
    hwnd: T.HWND,
    message: T.UINT,
    wParam: T.WPARAM,
    lParam: T.LPARAM,
    time: T.DWORD,
    pt: T.POINT
}));};
T.ICONINFO = function() {return Struct('_ICONINFO', {
    fIcon: T.BOOL,
    xHotspot: T.DWORD,
    yHotspot: T.DWORD,
    hbmMask: T.HBITMAP,
    hbmColor: T.HBITMAP
});};
T.PICONINFO = function() {return Pointer(Struct('_ICONINFO', {
    fIcon: T.BOOL,
    xHotspot: T.DWORD,
    yHotspot: T.DWORD,
    hbmMask: T.HBITMAP,
    hbmColor: T.HBITMAP
}));};
T.ICONINFOEXA = function() {return Struct('_ICONINFOEXA', {
    cbSize: T.DWORD,
    fIcon: T.BOOL,
    xHotspot: T.DWORD,
    yHotspot: T.DWORD,
    hbmMask: T.HBITMAP,
    hbmColor: T.HBITMAP,
    wResID: T.WORD,
    szModName: ArrayType(T.CHAR, 260),
    szResName: ArrayType(T.CHAR, 260)
});};
T.PICONINFOEXA = function() {return Pointer(Struct('_ICONINFOEXA', {
    cbSize: T.DWORD,
    fIcon: T.BOOL,
    xHotspot: T.DWORD,
    yHotspot: T.DWORD,
    hbmMask: T.HBITMAP,
    hbmColor: T.HBITMAP,
    wResID: T.WORD,
    szModName: ArrayType(T.CHAR, 260),
    szResName: ArrayType(T.CHAR, 260)
}));};
T.ICONINFOEXW = function() {return Struct('_ICONINFOEXW', {
    cbSize: T.DWORD,
    fIcon: T.BOOL,
    xHotspot: T.DWORD,
    yHotspot: T.DWORD,
    hbmMask: T.HBITMAP,
    hbmColor: T.HBITMAP,
    wResID: T.WORD,
    szModName: ArrayType(T.WCHAR, 260),
    szResName: ArrayType(T.WCHAR, 260)
});};
T.PICONINFOEXW = function() {return Pointer(Struct('_ICONINFOEXW', {
    cbSize: T.DWORD,
    fIcon: T.BOOL,
    xHotspot: T.DWORD,
    yHotspot: T.DWORD,
    hbmMask: T.HBITMAP,
    hbmColor: T.HBITMAP,
    wResID: T.WORD,
    szModName: ArrayType(T.WCHAR, 260),
    szResName: ArrayType(T.WCHAR, 260)
}));};
T.ICONINFOEX = function() {return T.ICONINFOEXA;};
T.PICONINFOEX = function() {return T.PICONINFOEXA;};
T.CURSORINFO = function() {return Struct('tagCURSORINFO', {
    cbSize: T.DWORD,
    flags: T.DWORD,
    hCursor: T.HCURSOR,
    ptScreenPos: T.POINT
});};
T.PCURSORINFO = function() {return Pointer(Struct('tagCURSORINFO', {
    cbSize: T.DWORD,
    flags: T.DWORD,
    hCursor: T.HCURSOR,
    ptScreenPos: T.POINT
}));};
T.LPCURSORINFO = function() {return Pointer(Struct('tagCURSORINFO', {
    cbSize: T.DWORD,
    flags: T.DWORD,
    hCursor: T.HCURSOR,
    ptScreenPos: T.POINT
}));};
T.ACCEL = function() {return Struct('tagACCEL', {
    fVirt: T.BYTE,
    key: T.WORD,
    cmd: T.WORD
});};
T.LPACCEL = function() {return Pointer(Struct('tagACCEL', {
    fVirt: T.BYTE,
    key: T.WORD,
    cmd: T.WORD
}));};
T.TPMPARAMS = function() {return Struct('tagTPMPARAMS', {
    cbSize: T.UINT,
    rcExclude: T.RECT
});};
T.LPTPMPARAMS = function() {return Pointer(Struct('tagTPMPARAMS', {
    cbSize: T.UINT,
    rcExclude: T.RECT
}));};
T.COMBOBOXINFO = function() {return Struct('tagCOMBOBOXINFO', {
    cbSize: T.DWORD,
    rcItem: T.RECT,
    rcButton: T.RECT,
    stateButton: T.DWORD,
    hwndCombo: T.HWND,
    hwndItem: T.HWND,
    hwndList: T.HWND
});};
T.PCOMBOBOXINFO = function() {return Pointer(Struct('tagCOMBOBOXINFO', {
    cbSize: T.DWORD,
    rcItem: T.RECT,
    rcButton: T.RECT,
    stateButton: T.DWORD,
    hwndCombo: T.HWND,
    hwndItem: T.HWND,
    hwndList: T.HWND
}));};
T.LPCOMBOBOXINFO = function() {return Pointer(Struct('tagCOMBOBOXINFO', {
    cbSize: T.DWORD,
    rcItem: T.RECT,
    rcButton: T.RECT,
    stateButton: T.DWORD,
    hwndCombo: T.HWND,
    hwndItem: T.HWND,
    hwndList: T.HWND
}));};
T.MENUITEMINFOA = function() {return Struct('tagMENUITEMINFOA', {
    cbSize: T.UINT,
    fMask: T.UINT,
    fType: T.UINT,
    fState: T.UINT,
    wID: T.UINT,
    hSubMenu: T.HMENU,
    hbmpChecked: T.HBITMAP,
    hbmpUnchecked: T.HBITMAP,
    dwItemData: T.ULONG_PTR,
    dwTypeData: T.LPSTR,
    cch: T.UINT,
    hbmpItem: T.HBITMAP
});};
T.LPMENUITEMINFOA = function() {return Pointer(Struct('tagMENUITEMINFOA', {
    cbSize: T.UINT,
    fMask: T.UINT,
    fType: T.UINT,
    fState: T.UINT,
    wID: T.UINT,
    hSubMenu: T.HMENU,
    hbmpChecked: T.HBITMAP,
    hbmpUnchecked: T.HBITMAP,
    dwItemData: T.ULONG_PTR,
    dwTypeData: T.LPSTR,
    cch: T.UINT,
    hbmpItem: T.HBITMAP
}));};
T.MENUITEMINFOW = function() {return Struct('tagMENUITEMINFOW', {
    cbSize: T.UINT,
    fMask: T.UINT,
    fType: T.UINT,
    fState: T.UINT,
    wID: T.UINT,
    hSubMenu: T.HMENU,
    hbmpChecked: T.HBITMAP,
    hbmpUnchecked: T.HBITMAP,
    dwItemData: T.ULONG_PTR,
    dwTypeData: T.LPWSTR,
    cch: T.UINT,
    hbmpItem: T.HBITMAP
});};
T.LPMENUITEMINFOW = function() {return Pointer(Struct('tagMENUITEMINFOW', {
    cbSize: T.UINT,
    fMask: T.UINT,
    fType: T.UINT,
    fState: T.UINT,
    wID: T.UINT,
    hSubMenu: T.HMENU,
    hbmpChecked: T.HBITMAP,
    hbmpUnchecked: T.HBITMAP,
    dwItemData: T.ULONG_PTR,
    dwTypeData: T.LPWSTR,
    cch: T.UINT,
    hbmpItem: T.HBITMAP
}));};
T.MENUITEMINFO = function() {return T.MENUITEMINFOA;};
T.LPMENUITEMINFO = function() {return T.LPMENUITEMINFOA;};
T.LPCMENUITEMINFOA = function() {return Pointer(T.MENUITEMINFOA, [['const']]);};
T.LPCMENUITEMINFOW = function() {return Pointer(T.MENUITEMINFOW, [['const']]);};
T.LPCMENUITEMINFO = function() {return T.LPCMENUITEMINFOA;};
T.MENUBARINFO = function() {return Struct('tagMENUBARINFO', {
    cbSize: T.DWORD,
    rcBar: T.RECT,
    hMenu: T.HMENU,
    hwndMenu: T.HWND,
    fBarFocused: [T.BOOL, 1],
    fFocused: [T.BOOL, 1]
});};
T.PMENUBARINFO = function() {return Pointer(Struct('tagMENUBARINFO', {
    cbSize: T.DWORD,
    rcBar: T.RECT,
    hMenu: T.HMENU,
    hwndMenu: T.HWND,
    fBarFocused: [T.BOOL, 1],
    fFocused: [T.BOOL, 1]
}));};
T.LPMENUBARINFO = function() {return Pointer(Struct('tagMENUBARINFO', {
    cbSize: T.DWORD,
    rcBar: T.RECT,
    hMenu: T.HMENU,
    hwndMenu: T.HWND,
    fBarFocused: [T.BOOL, 1],
    fFocused: [T.BOOL, 1]
}));};
T.MENUINFO = function() {return Struct('tagMENUINFO', {
    cbSize: T.DWORD,
    fMask: T.DWORD,
    dwStyle: T.DWORD,
    cyMax: T.UINT,
    hbrBack: T.HBRUSH,
    dwContextHelpID: T.DWORD,
    dwMenuData: T.ULONG_PTR
});};
T.LPMENUINFO = function() {return Pointer(Struct('tagMENUINFO', {
    cbSize: T.DWORD,
    fMask: T.DWORD,
    dwStyle: T.DWORD,
    cyMax: T.UINT,
    hbrBack: T.HBRUSH,
    dwContextHelpID: T.DWORD,
    dwMenuData: T.ULONG_PTR
}));};
T.LPCMENUINFO = function() {return Pointer(T.MENUINFO, [['const']]);};
T.MENUITEMTEMPLATEHEADER = function() {return Struct('', {
    versionNumber: T.WORD,
    offset: T.WORD
});};
T.PMENUITEMTEMPLATEHEADER = function() {return Pointer(Struct('', {
    versionNumber: T.WORD,
    offset: T.WORD
}));};
T.MENUITEMTEMPLATE = function() {return Struct('', {
    mtOption: T.WORD,
    mtID: T.WORD,
    mtString: ArrayType(T.WCHAR, 1)
});};
T.PMENUITEMTEMPLATE = function() {return Pointer(Struct('', {
    mtOption: T.WORD,
    mtID: T.WORD,
    mtString: ArrayType(T.WCHAR, 1)
}));};
T.MENUTEMPLATE = function() {return null;};
T.LPMENUTEMPLATE = function() {return Pointer(T.PVOID);};
T.SCROLLINFO = function() {return Struct('tagSCROLLINFO', {
    cbSize: T.UINT,
    fMask: T.UINT,
    nMin: T.INT,
    nMax: T.INT,
    nPage: T.UINT,
    nPos: T.INT,
    nTrackPos: T.INT
});};
T.LPSCROLLINFO = function() {return Pointer(Struct('tagSCROLLINFO', {
    cbSize: T.UINT,
    fMask: T.UINT,
    nMin: T.INT,
    nMax: T.INT,
    nPage: T.UINT,
    nPos: T.INT,
    nTrackPos: T.INT
}));};
T.LPCSCROLLINFO = function() {return Pointer(T.SCROLLINFO, [['const']]);};
T.SCROLLBARINFO = function() {return Struct('tagSCROLLBARINFO', {
    cbSize: T.DWORD,
    rcScrollBar: T.RECT,
    dxyLineButton: T.INT,
    xyThumbTop: T.INT,
    xyThumbBottom: T.INT,
    reserved: T.INT,
    rgstate: ArrayType(T.DWORD, NaN /* additive_expression {
     _0: constant {
      _0: '5'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
});};
T.PSCROLLBARINFO = function() {return Pointer(Struct('tagSCROLLBARINFO', {
    cbSize: T.DWORD,
    rcScrollBar: T.RECT,
    dxyLineButton: T.INT,
    xyThumbTop: T.INT,
    xyThumbBottom: T.INT,
    reserved: T.INT,
    rgstate: ArrayType(T.DWORD, NaN /* additive_expression {
     _0: constant {
      _0: '5'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
}));};
T.LPSCROLLBARINFO = function() {return Pointer(Struct('tagSCROLLBARINFO', {
    cbSize: T.DWORD,
    rcScrollBar: T.RECT,
    dxyLineButton: T.INT,
    xyThumbTop: T.INT,
    xyThumbBottom: T.INT,
    reserved: T.INT,
    rgstate: ArrayType(T.DWORD, NaN /* additive_expression {
     _0: constant {
      _0: '5'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
}));};
T.HELPINFO = function() {return Struct('tagHELPINFO', {
    cbSize: T.UINT,
    iContextType: T.INT,
    iCtrlId: T.INT,
    hItemHandle: T.HANDLE,
    dwContextId: T.DWORD_PTR,
    MousePos: T.POINT
});};
T.LPHELPINFO = function() {return Pointer(Struct('tagHELPINFO', {
    cbSize: T.UINT,
    iContextType: T.INT,
    iCtrlId: T.INT,
    hItemHandle: T.HANDLE,
    dwContextId: T.DWORD_PTR,
    MousePos: T.POINT
}));};
T.MSGBOXCALLBACK = function() {return Pointer(Fn(null, [[T.LPHELPINFO, 'lpHelpInfo']]), [['stdcall']]);};
T.MSGBOXPARAMSA = function() {return Struct('tagMSGBOXPARAMSA', {
    cbSize: T.UINT,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpszText: T.LPCSTR,
    lpszCaption: T.LPCSTR,
    dwStyle: T.DWORD,
    lpszIcon: T.LPCSTR,
    dwContextHelpId: T.DWORD_PTR,
    lpfnMsgBoxCallback: T.MSGBOXCALLBACK,
    dwLanguageId: T.DWORD
});};
T.PMSGBOXPARAMSA = function() {return Pointer(Struct('tagMSGBOXPARAMSA', {
    cbSize: T.UINT,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpszText: T.LPCSTR,
    lpszCaption: T.LPCSTR,
    dwStyle: T.DWORD,
    lpszIcon: T.LPCSTR,
    dwContextHelpId: T.DWORD_PTR,
    lpfnMsgBoxCallback: T.MSGBOXCALLBACK,
    dwLanguageId: T.DWORD
}));};
T.LPMSGBOXPARAMSA = function() {return Pointer(Struct('tagMSGBOXPARAMSA', {
    cbSize: T.UINT,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpszText: T.LPCSTR,
    lpszCaption: T.LPCSTR,
    dwStyle: T.DWORD,
    lpszIcon: T.LPCSTR,
    dwContextHelpId: T.DWORD_PTR,
    lpfnMsgBoxCallback: T.MSGBOXCALLBACK,
    dwLanguageId: T.DWORD
}));};
T.MSGBOXPARAMSW = function() {return Struct('tagMSGBOXPARAMSW', {
    cbSize: T.UINT,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpszText: T.LPCWSTR,
    lpszCaption: T.LPCWSTR,
    dwStyle: T.DWORD,
    lpszIcon: T.LPCWSTR,
    dwContextHelpId: T.DWORD_PTR,
    lpfnMsgBoxCallback: T.MSGBOXCALLBACK,
    dwLanguageId: T.DWORD
});};
T.PMSGBOXPARAMSW = function() {return Pointer(Struct('tagMSGBOXPARAMSW', {
    cbSize: T.UINT,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpszText: T.LPCWSTR,
    lpszCaption: T.LPCWSTR,
    dwStyle: T.DWORD,
    lpszIcon: T.LPCWSTR,
    dwContextHelpId: T.DWORD_PTR,
    lpfnMsgBoxCallback: T.MSGBOXCALLBACK,
    dwLanguageId: T.DWORD
}));};
T.LPMSGBOXPARAMSW = function() {return Pointer(Struct('tagMSGBOXPARAMSW', {
    cbSize: T.UINT,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpszText: T.LPCWSTR,
    lpszCaption: T.LPCWSTR,
    dwStyle: T.DWORD,
    lpszIcon: T.LPCWSTR,
    dwContextHelpId: T.DWORD_PTR,
    lpfnMsgBoxCallback: T.MSGBOXCALLBACK,
    dwLanguageId: T.DWORD
}));};
T.MSGBOXPARAMS = function() {return T.MSGBOXPARAMSA;};
T.PMSGBOXPARAMS = function() {return T.PMSGBOXPARAMSA;};
T.LPMSGBOXPARAMS = function() {return T.LPMSGBOXPARAMSA;};
T.MONITORINFO = function() {return Struct('tagMONITORINFO', {
    cbSize: T.DWORD,
    rcMonitor: T.RECT,
    rcWork: T.RECT,
    dwFlags: T.DWORD
});};
T.LPMONITORINFO = function() {return Pointer(Struct('tagMONITORINFO', {
    cbSize: T.DWORD,
    rcMonitor: T.RECT,
    rcWork: T.RECT,
    dwFlags: T.DWORD
}));};
T.MONITORINFOEXA = function() {return Struct('tagMONITORINFOEXA', {
    cbSize: T.DWORD,
    rcMonitor: T.RECT,
    rcWork: T.RECT,
    dwFlags: T.DWORD,
    szDevice: ArrayType(T.CHAR, 32)
});};
T.LPMONITORINFOEXA = function() {return Pointer(Struct('tagMONITORINFOEXA', {
    cbSize: T.DWORD,
    rcMonitor: T.RECT,
    rcWork: T.RECT,
    dwFlags: T.DWORD,
    szDevice: ArrayType(T.CHAR, 32)
}));};
T.MONITORINFOEXW = function() {return Struct('tagMONITORINFOEXW', {
    cbSize: T.DWORD,
    rcMonitor: T.RECT,
    rcWork: T.RECT,
    dwFlags: T.DWORD,
    szDevice: ArrayType(T.WCHAR, 32)
});};
T.LPMONITORINFOEXW = function() {return Pointer(Struct('tagMONITORINFOEXW', {
    cbSize: T.DWORD,
    rcMonitor: T.RECT,
    rcWork: T.RECT,
    dwFlags: T.DWORD,
    szDevice: ArrayType(T.WCHAR, 32)
}));};
T.MONITORINFOEX = function() {return T.MONITORINFOEXA;};
T.LPMONITORINFOEX = function() {return T.LPMONITORINFOEXA;};
T.MONITORENUMPROC = function() {return Pointer(Fn(T.BOOL, [[T.HMONITOR], [T.HDC], [T.LPRECT], [T.LPARAM]]), [['stdcall']]);};
T.DLGTEMPLATE = function() {return Struct('tagDLGTEMPLATE', {
    style: T.DWORD,
    dwExtendedStyle: T.DWORD,
    cdit: T.WORD,
    x: T.i16,
    y: T.i16,
    cx: T.i16,
    cy: T.i16
});};
T.LPDLGTEMPLATEA = function() {return Pointer(T.DLGTEMPLATE);};
T.LPDLGTEMPLATEW = function() {return Pointer(T.DLGTEMPLATE);};
T.LPDLGTEMPLATE = function() {return T.LPDLGTEMPLATEA;};
T.LPCDLGTEMPLATEA = function() {return Pointer(T.DLGTEMPLATE, [['const']]);};
T.LPCDLGTEMPLATEW = function() {return Pointer(T.DLGTEMPLATE, [['const']]);};
T.LPCDLGTEMPLATE = function() {return T.LPCDLGTEMPLATEA;};
T.DLGITEMTEMPLATE = function() {return Struct('tagDLGITEMTEMPLATE', {
    style: T.DWORD,
    dwExtendedStyle: T.DWORD,
    x: T.i16,
    y: T.i16,
    cx: T.i16,
    cy: T.i16,
    id: T.WORD
});};
T.PDLGITEMTEMPLATEA = function() {return Pointer(T.DLGITEMTEMPLATE);};
T.PDLGITEMTEMPLATEW = function() {return Pointer(T.DLGITEMTEMPLATE);};
T.PDLGITEMTEMPLATE = function() {return T.PDLGITEMTEMPLATEA;};
T.LPDLGITEMTEMPLATEA = function() {return Pointer(T.DLGITEMTEMPLATE);};
T.LPDLGITEMTEMPLATEW = function() {return Pointer(T.DLGITEMTEMPLATE);};
T.LPDLGITEMTEMPLATE = function() {return T.LPDLGITEMTEMPLATEA;};
T.CBT_CREATEWNDA = function() {return Struct('tagCBT_CREATEWNDA', {
    lpcs: Pointer(T.CREATESTRUCTA),
    hwndInsertAfter: T.HWND
});};
T.LPCBT_CREATEWNDA = function() {return Pointer(Struct('tagCBT_CREATEWNDA', {
    lpcs: Pointer(T.CREATESTRUCTA),
    hwndInsertAfter: T.HWND
}));};
T.CBT_CREATEWNDW = function() {return Struct('tagCBT_CREATEWNDW', {
    lpcs: Pointer(T.CREATESTRUCTW),
    hwndInsertAfter: T.HWND
});};
T.LPCBT_CREATEWNDW = function() {return Pointer(Struct('tagCBT_CREATEWNDW', {
    lpcs: Pointer(T.CREATESTRUCTW),
    hwndInsertAfter: T.HWND
}));};
T.CBT_CREATEWND = function() {return T.CBT_CREATEWNDA;};
T.LPCBT_CREATEWND = function() {return T.LPCBT_CREATEWNDA;};
T.CBTACTIVATESTRUCT = function() {return Struct('tagCBTACTIVATESTRUCT', {
    fMouse: T.BOOL,
    hWndActive: T.HWND
});};
T.LPCBTACTIVATESTRUCT = function() {return Pointer(Struct('tagCBTACTIVATESTRUCT', {
    fMouse: T.BOOL,
    hWndActive: T.HWND
}));};
T.NONCLIENTMETRICSA = function() {return Struct('tagNONCLIENTMETRICSA', {
    cbSize: T.UINT,
    iBorderWidth: T.INT,
    iScrollWidth: T.INT,
    iScrollHeight: T.INT,
    iCaptionWidth: T.INT,
    iCaptionHeight: T.INT,
    lfCaptionFont: T.LOGFONTA,
    iSmCaptionWidth: T.INT,
    iSmCaptionHeight: T.INT,
    lfSmCaptionFont: T.LOGFONTA,
    iMenuWidth: T.INT,
    iMenuHeight: T.INT,
    lfMenuFont: T.LOGFONTA,
    lfStatusFont: T.LOGFONTA,
    lfMessageFont: T.LOGFONTA
});};
T.PNONCLIENTMETRICSA = function() {return Pointer(Struct('tagNONCLIENTMETRICSA', {
    cbSize: T.UINT,
    iBorderWidth: T.INT,
    iScrollWidth: T.INT,
    iScrollHeight: T.INT,
    iCaptionWidth: T.INT,
    iCaptionHeight: T.INT,
    lfCaptionFont: T.LOGFONTA,
    iSmCaptionWidth: T.INT,
    iSmCaptionHeight: T.INT,
    lfSmCaptionFont: T.LOGFONTA,
    iMenuWidth: T.INT,
    iMenuHeight: T.INT,
    lfMenuFont: T.LOGFONTA,
    lfStatusFont: T.LOGFONTA,
    lfMessageFont: T.LOGFONTA
}));};
T.LPNONCLIENTMETRICSA = function() {return Pointer(Struct('tagNONCLIENTMETRICSA', {
    cbSize: T.UINT,
    iBorderWidth: T.INT,
    iScrollWidth: T.INT,
    iScrollHeight: T.INT,
    iCaptionWidth: T.INT,
    iCaptionHeight: T.INT,
    lfCaptionFont: T.LOGFONTA,
    iSmCaptionWidth: T.INT,
    iSmCaptionHeight: T.INT,
    lfSmCaptionFont: T.LOGFONTA,
    iMenuWidth: T.INT,
    iMenuHeight: T.INT,
    lfMenuFont: T.LOGFONTA,
    lfStatusFont: T.LOGFONTA,
    lfMessageFont: T.LOGFONTA
}));};
T.NONCLIENTMETRICSW = function() {return Struct('tagNONCLIENTMETRICSW', {
    cbSize: T.UINT,
    iBorderWidth: T.INT,
    iScrollWidth: T.INT,
    iScrollHeight: T.INT,
    iCaptionWidth: T.INT,
    iCaptionHeight: T.INT,
    lfCaptionFont: T.LOGFONTW,
    iSmCaptionWidth: T.INT,
    iSmCaptionHeight: T.INT,
    lfSmCaptionFont: T.LOGFONTW,
    iMenuWidth: T.INT,
    iMenuHeight: T.INT,
    lfMenuFont: T.LOGFONTW,
    lfStatusFont: T.LOGFONTW,
    lfMessageFont: T.LOGFONTW
});};
T.PNONCLIENTMETRICSW = function() {return Pointer(Struct('tagNONCLIENTMETRICSW', {
    cbSize: T.UINT,
    iBorderWidth: T.INT,
    iScrollWidth: T.INT,
    iScrollHeight: T.INT,
    iCaptionWidth: T.INT,
    iCaptionHeight: T.INT,
    lfCaptionFont: T.LOGFONTW,
    iSmCaptionWidth: T.INT,
    iSmCaptionHeight: T.INT,
    lfSmCaptionFont: T.LOGFONTW,
    iMenuWidth: T.INT,
    iMenuHeight: T.INT,
    lfMenuFont: T.LOGFONTW,
    lfStatusFont: T.LOGFONTW,
    lfMessageFont: T.LOGFONTW
}));};
T.LPNONCLIENTMETRICSW = function() {return Pointer(Struct('tagNONCLIENTMETRICSW', {
    cbSize: T.UINT,
    iBorderWidth: T.INT,
    iScrollWidth: T.INT,
    iScrollHeight: T.INT,
    iCaptionWidth: T.INT,
    iCaptionHeight: T.INT,
    lfCaptionFont: T.LOGFONTW,
    iSmCaptionWidth: T.INT,
    iSmCaptionHeight: T.INT,
    lfSmCaptionFont: T.LOGFONTW,
    iMenuWidth: T.INT,
    iMenuHeight: T.INT,
    lfMenuFont: T.LOGFONTW,
    lfStatusFont: T.LOGFONTW,
    lfMessageFont: T.LOGFONTW
}));};
T.NONCLIENTMETRICS = function() {return T.NONCLIENTMETRICSA;};
T.PNONCLIENTMETRICS = function() {return T.PNONCLIENTMETRICSA;};
T.LPNONCLIENTMETRICS = function() {return T.LPNONCLIENTMETRICSA;};
T.ICONMETRICSA = function() {return Struct('tagICONMETRICSA', {
    cbSize: T.UINT,
    iHorzSpacing: T.i32,
    iVertSpacing: T.i32,
    iTitleWrap: T.i32,
    lfFont: T.LOGFONTA
});};
T.PICONMETRICSA = function() {return Pointer(Struct('tagICONMETRICSA', {
    cbSize: T.UINT,
    iHorzSpacing: T.i32,
    iVertSpacing: T.i32,
    iTitleWrap: T.i32,
    lfFont: T.LOGFONTA
}));};
T.LPICONMETRICSA = function() {return Pointer(Struct('tagICONMETRICSA', {
    cbSize: T.UINT,
    iHorzSpacing: T.i32,
    iVertSpacing: T.i32,
    iTitleWrap: T.i32,
    lfFont: T.LOGFONTA
}));};
T.ICONMETRICSW = function() {return Struct('tagICONMETRICSW', {
    cbSize: T.UINT,
    iHorzSpacing: T.i32,
    iVertSpacing: T.i32,
    iTitleWrap: T.i32,
    lfFont: T.LOGFONTW
});};
T.PICONMETRICSW = function() {return Pointer(Struct('tagICONMETRICSW', {
    cbSize: T.UINT,
    iHorzSpacing: T.i32,
    iVertSpacing: T.i32,
    iTitleWrap: T.i32,
    lfFont: T.LOGFONTW
}));};
T.LPICONMETRICSW = function() {return Pointer(Struct('tagICONMETRICSW', {
    cbSize: T.UINT,
    iHorzSpacing: T.i32,
    iVertSpacing: T.i32,
    iTitleWrap: T.i32,
    lfFont: T.LOGFONTW
}));};
T.ICONMETRICS = function() {return T.ICONMETRICSA;};
T.PICONMETRICS = function() {return T.PICONMETRICSA;};
T.LPICONMETRICS = function() {return T.LPICONMETRICSA;};
T.UPDATELAYEREDWINDOWINFO = function() {return Struct('tagUPDATELAYEREDWINDOWINFO', {
    cbSize: T.DWORD,
    hdcDst: T.HDC,
    pptDst: Pointer(T.POINT),
    psize: Pointer(T.SIZE),
    hdcSrc: T.HDC,
    pptSrc: Pointer(T.POINT),
    crKey: T.COLORREF,
    pblend: Pointer(T.BLENDFUNCTION),
    dwFlags: T.DWORD,
    prcDirty: Pointer(T.RECT)
});};
T.PUPDATELAYEREDWINDOWINFO = function() {return Pointer(Struct('tagUPDATELAYEREDWINDOWINFO', {
    cbSize: T.DWORD,
    hdcDst: T.HDC,
    pptDst: Pointer(T.POINT),
    psize: Pointer(T.SIZE),
    hdcSrc: T.HDC,
    pptSrc: Pointer(T.POINT),
    crKey: T.COLORREF,
    pblend: Pointer(T.BLENDFUNCTION),
    dwFlags: T.DWORD,
    prcDirty: Pointer(T.RECT)
}));};
T.MINIMIZEDMETRICS = function() {return Struct('tagMINIMIZEDMETRICS', {
    cbSize: T.UINT,
    iWidth: T.i32,
    iHorzGap: T.i32,
    iVertGap: T.i32,
    iArrange: T.i32
});};
T.PMINIMIZEDMETRICS = function() {return Pointer(Struct('tagMINIMIZEDMETRICS', {
    cbSize: T.UINT,
    iWidth: T.i32,
    iHorzGap: T.i32,
    iVertGap: T.i32,
    iArrange: T.i32
}));};
T.LPMINIMIZEDMETRICS = function() {return Pointer(Struct('tagMINIMIZEDMETRICS', {
    cbSize: T.UINT,
    iWidth: T.i32,
    iHorzGap: T.i32,
    iVertGap: T.i32,
    iArrange: T.i32
}));};
T.FLASHWINFO = function() {return Struct('', {
    cbSize: T.UINT,
    hwnd: T.HWND,
    dwFlags: T.DWORD,
    uCount: T.UINT,
    dwTimeout: T.DWORD
});};
T.PFLASHWINFO = function() {return Pointer(Struct('', {
    cbSize: T.UINT,
    hwnd: T.HWND,
    dwFlags: T.DWORD,
    uCount: T.UINT,
    dwTimeout: T.DWORD
}));};
T.DRAWITEMSTRUCT = function() {return Struct('tagDRAWITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    itemAction: T.UINT,
    itemState: T.UINT,
    hwndItem: T.HWND,
    hDC: T.HDC,
    rcItem: T.RECT,
    itemData: T.ULONG_PTR
});};
T.PDRAWITEMSTRUCT = function() {return Pointer(Struct('tagDRAWITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    itemAction: T.UINT,
    itemState: T.UINT,
    hwndItem: T.HWND,
    hDC: T.HDC,
    rcItem: T.RECT,
    itemData: T.ULONG_PTR
}));};
T.LPDRAWITEMSTRUCT = function() {return Pointer(Struct('tagDRAWITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    itemAction: T.UINT,
    itemState: T.UINT,
    hwndItem: T.HWND,
    hDC: T.HDC,
    rcItem: T.RECT,
    itemData: T.ULONG_PTR
}));};
T.MEASUREITEMSTRUCT = function() {return Struct('tagMEASUREITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    itemWidth: T.UINT,
    itemHeight: T.UINT,
    itemData: T.ULONG_PTR
});};
T.PMEASUREITEMSTRUCT = function() {return Pointer(Struct('tagMEASUREITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    itemWidth: T.UINT,
    itemHeight: T.UINT,
    itemData: T.ULONG_PTR
}));};
T.LPMEASUREITEMSTRUCT = function() {return Pointer(Struct('tagMEASUREITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    itemWidth: T.UINT,
    itemHeight: T.UINT,
    itemData: T.ULONG_PTR
}));};
T.DELETEITEMSTRUCT = function() {return Struct('tagDELETEITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    hwndItem: T.HWND,
    itemData: T.ULONG_PTR
});};
T.PDELETEITEMSTRUCT = function() {return Pointer(Struct('tagDELETEITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    hwndItem: T.HWND,
    itemData: T.ULONG_PTR
}));};
T.LPDELETEITEMSTRUCT = function() {return Pointer(Struct('tagDELETEITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    hwndItem: T.HWND,
    itemData: T.ULONG_PTR
}));};
T.COMPAREITEMSTRUCT = function() {return Struct('tagCOMPAREITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    hwndItem: T.HWND,
    itemID1: T.UINT,
    itemData1: T.ULONG_PTR,
    itemID2: T.UINT,
    itemData2: T.ULONG_PTR,
    dwLocaleId: T.DWORD
});};
T.PCOMPAREITEMSTRUCT = function() {return Pointer(Struct('tagCOMPAREITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    hwndItem: T.HWND,
    itemID1: T.UINT,
    itemData1: T.ULONG_PTR,
    itemID2: T.UINT,
    itemData2: T.ULONG_PTR,
    dwLocaleId: T.DWORD
}));};
T.LPCOMPAREITEMSTRUCT = function() {return Pointer(Struct('tagCOMPAREITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    hwndItem: T.HWND,
    itemID1: T.UINT,
    itemData1: T.ULONG_PTR,
    itemID2: T.UINT,
    itemData2: T.ULONG_PTR,
    dwLocaleId: T.DWORD
}));};
T.TRACKMOUSEEVENT = function() {return Struct('tagTRACKMOUSEEVENT', {
    cbSize: T.DWORD,
    dwFlags: T.DWORD,
    hwndTrack: T.HWND,
    dwHoverTime: T.DWORD
});};
T.LPTRACKMOUSEEVENT = function() {return Pointer(Struct('tagTRACKMOUSEEVENT', {
    cbSize: T.DWORD,
    dwFlags: T.DWORD,
    hwndTrack: T.HWND,
    dwHoverTime: T.DWORD
}));};
T.HDEVNOTIFY = function() {return T.PVOID;};
T.PHDEVNOTIFY = function() {return Pointer(T.HDEVNOTIFY);};
T.WINDOWINFO = function() {return Struct('tagWINDOWINFO', {
    cbSize: T.DWORD,
    rcWindow: T.RECT,
    rcClient: T.RECT,
    dwStyle: T.DWORD,
    dwExStyle: T.DWORD,
    dwWindowStatus: T.DWORD,
    cxWindowBorders: T.UINT,
    cyWindowBorders: T.UINT,
    atomWindowType: T.ATOM,
    wCreatorVersion: T.WORD
});};
T.PWINDOWINFO = function() {return Pointer(Struct('tagWINDOWINFO', {
    cbSize: T.DWORD,
    rcWindow: T.RECT,
    rcClient: T.RECT,
    dwStyle: T.DWORD,
    dwExStyle: T.DWORD,
    dwWindowStatus: T.DWORD,
    cxWindowBorders: T.UINT,
    cyWindowBorders: T.UINT,
    atomWindowType: T.ATOM,
    wCreatorVersion: T.WORD
}));};
T.LPWINDOWINFO = function() {return Pointer(Struct('tagWINDOWINFO', {
    cbSize: T.DWORD,
    rcWindow: T.RECT,
    rcClient: T.RECT,
    dwStyle: T.DWORD,
    dwExStyle: T.DWORD,
    dwWindowStatus: T.DWORD,
    cxWindowBorders: T.UINT,
    cyWindowBorders: T.UINT,
    atomWindowType: T.ATOM,
    wCreatorVersion: T.WORD
}));};
T.TITLEBARINFO = function() {return Struct('tagTITLEBARINFO', {
    cbSize: T.DWORD,
    rcTitleBar: T.RECT,
    rgstate: ArrayType(T.DWORD, NaN /* additive_expression {
     _0: constant {
      _0: '5'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
});};
T.PTITLEBARINFO = function() {return Pointer(Struct('tagTITLEBARINFO', {
    cbSize: T.DWORD,
    rcTitleBar: T.RECT,
    rgstate: ArrayType(T.DWORD, NaN /* additive_expression {
     _0: constant {
      _0: '5'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
}));};
T.LPTITLEBARINFO = function() {return Pointer(Struct('tagTITLEBARINFO', {
    cbSize: T.DWORD,
    rcTitleBar: T.RECT,
    rgstate: ArrayType(T.DWORD, NaN /* additive_expression {
     _0: constant {
      _0: '5'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
}));};
T.LASTINPUTINFO = function() {return Struct('tagLASTINPUTINFO', {
    cbSize: T.UINT,
    dwTime: T.DWORD
});};
T.PLASTINPUTINFO = function() {return Pointer(Struct('tagLASTINPUTINFO', {
    cbSize: T.UINT,
    dwTime: T.DWORD
}));};
T.ALTTABINFO = function() {return Struct('', {
    cbSize: T.DWORD,
    cItems: T.INT,
    cColumns: T.INT,
    cRows: T.INT,
    iColFocus: T.INT,
    iRowFocus: T.INT,
    cxItem: T.INT,
    cyItem: T.INT,
    ptStart: T.POINT
});};
T.PALTTABINFO = function() {return Pointer(Struct('', {
    cbSize: T.DWORD,
    cItems: T.INT,
    cColumns: T.INT,
    cRows: T.INT,
    iColFocus: T.INT,
    iRowFocus: T.INT,
    cxItem: T.INT,
    cyItem: T.INT,
    ptStart: T.POINT
}));};
T.LPALTTABINFO = function() {return Pointer(Struct('', {
    cbSize: T.DWORD,
    cItems: T.INT,
    cColumns: T.INT,
    cRows: T.INT,
    iColFocus: T.INT,
    iRowFocus: T.INT,
    cxItem: T.INT,
    cyItem: T.INT,
    ptStart: T.POINT
}));};
T.NORM_FORM = function() {return Enum('NormalizationKD', {
    NormalizationOther: 0,
    NormalizationC: 1,
    NormalizationD: 2,
    NormalizationKC: 5,
    NormalizationKD: 6
});};
T.CALID = function() {return T.DWORD;};
T.CALTYPE = function() {return T.DWORD;};
T.GEOID = function() {return T.LONG;};
T.GEOCLASS = function() {return T.DWORD;};
T.GEOTYPE = function() {return T.DWORD;};
T.LCTYPE = function() {return T.DWORD;};
T.LGRPID = function() {return T.DWORD;};
T.CPINFO = function() {return Struct('', {
    MaxCharSize: T.UINT,
    DefaultChar: ArrayType(T.BYTE, 2),
    LeadByte: ArrayType(T.BYTE, 12)
});};
T.LPCPINFO = function() {return Pointer(Struct('', {
    MaxCharSize: T.UINT,
    DefaultChar: ArrayType(T.BYTE, 2),
    LeadByte: ArrayType(T.BYTE, 12)
}));};
T.CPINFOEXA = function() {return Struct('', {
    MaxCharSize: T.UINT,
    DefaultChar: ArrayType(T.BYTE, 2),
    LeadByte: ArrayType(T.BYTE, 12),
    UnicodeDefaultChar: T.WCHAR,
    CodePage: T.UINT,
    CodePageName: ArrayType(T.CHAR, 260)
});};
T.LPCPINFOEXA = function() {return Pointer(Struct('', {
    MaxCharSize: T.UINT,
    DefaultChar: ArrayType(T.BYTE, 2),
    LeadByte: ArrayType(T.BYTE, 12),
    UnicodeDefaultChar: T.WCHAR,
    CodePage: T.UINT,
    CodePageName: ArrayType(T.CHAR, 260)
}));};
T.CPINFOEXW = function() {return Struct('', {
    MaxCharSize: T.UINT,
    DefaultChar: ArrayType(T.BYTE, 2),
    LeadByte: ArrayType(T.BYTE, 12),
    UnicodeDefaultChar: T.WCHAR,
    CodePage: T.UINT,
    CodePageName: ArrayType(T.WCHAR, 260)
});};
T.LPCPINFOEXW = function() {return Pointer(Struct('', {
    MaxCharSize: T.UINT,
    DefaultChar: ArrayType(T.BYTE, 2),
    LeadByte: ArrayType(T.BYTE, 12),
    UnicodeDefaultChar: T.WCHAR,
    CodePage: T.UINT,
    CodePageName: ArrayType(T.WCHAR, 260)
}));};
T.CPINFOEX = function() {return T.CPINFOEXA;};
T.LPCPINFOEX = function() {return T.LPCPINFOEXA;};
T.NUMBERFMTA = function() {return Struct('_numberfmtA', {
    NumDigits: T.UINT,
    LeadingZero: T.UINT,
    Grouping: T.UINT,
    lpDecimalSep: T.LPSTR,
    lpThousandSep: T.LPSTR,
    NegativeOrder: T.UINT
});};
T.LPNUMBERFMTA = function() {return Pointer(Struct('_numberfmtA', {
    NumDigits: T.UINT,
    LeadingZero: T.UINT,
    Grouping: T.UINT,
    lpDecimalSep: T.LPSTR,
    lpThousandSep: T.LPSTR,
    NegativeOrder: T.UINT
}));};
T.NUMBERFMTW = function() {return Struct('_numberfmtW', {
    NumDigits: T.UINT,
    LeadingZero: T.UINT,
    Grouping: T.UINT,
    lpDecimalSep: T.LPWSTR,
    lpThousandSep: T.LPWSTR,
    NegativeOrder: T.UINT
});};
T.LPNUMBERFMTW = function() {return Pointer(Struct('_numberfmtW', {
    NumDigits: T.UINT,
    LeadingZero: T.UINT,
    Grouping: T.UINT,
    lpDecimalSep: T.LPWSTR,
    lpThousandSep: T.LPWSTR,
    NegativeOrder: T.UINT
}));};
T.NUMBERFMT = function() {return T.NUMBERFMTA;};
T.LPNUMBERFMT = function() {return T.LPNUMBERFMTA;};
T.CURRENCYFMTA = function() {return Struct('_currencyfmtA', {
    NumDigits: T.UINT,
    LeadingZero: T.UINT,
    Grouping: T.UINT,
    lpDecimalSep: T.LPSTR,
    lpThousandSep: T.LPSTR,
    NegativeOrder: T.UINT,
    PositiveOrder: T.UINT,
    lpCurrencySymbol: T.LPSTR
});};
T.LPCURRENCYFMTA = function() {return Pointer(Struct('_currencyfmtA', {
    NumDigits: T.UINT,
    LeadingZero: T.UINT,
    Grouping: T.UINT,
    lpDecimalSep: T.LPSTR,
    lpThousandSep: T.LPSTR,
    NegativeOrder: T.UINT,
    PositiveOrder: T.UINT,
    lpCurrencySymbol: T.LPSTR
}));};
T.CURRENCYFMTW = function() {return Struct('_currencyfmtW', {
    NumDigits: T.UINT,
    LeadingZero: T.UINT,
    Grouping: T.UINT,
    lpDecimalSep: T.LPWSTR,
    lpThousandSep: T.LPWSTR,
    NegativeOrder: T.UINT,
    PositiveOrder: T.UINT,
    lpCurrencySymbol: T.LPWSTR
});};
T.LPCURRENCYFMTW = function() {return Pointer(Struct('_currencyfmtW', {
    NumDigits: T.UINT,
    LeadingZero: T.UINT,
    Grouping: T.UINT,
    lpDecimalSep: T.LPWSTR,
    lpThousandSep: T.LPWSTR,
    NegativeOrder: T.UINT,
    PositiveOrder: T.UINT,
    lpCurrencySymbol: T.LPWSTR
}));};
T.CURRENCYFMT = function() {return T.CURRENCYFMTA;};
T.LPCURRENCYFMT = function() {return T.LPCURRENCYFMTA;};
T.CALINFO_ENUMPROCA = function() {return Pointer(Fn(T.BOOL, [[T.LPSTR]]), [['stdcall']]);};
T.CALINFO_ENUMPROCW = function() {return Pointer(Fn(T.BOOL, [[T.LPWSTR]]), [['stdcall']]);};
T.CALINFO_ENUMPROCEXA = function() {return Pointer(Fn(T.BOOL, [[T.LPSTR], [T.CALID]]), [['stdcall']]);};
T.CALINFO_ENUMPROCEXW = function() {return Pointer(Fn(T.BOOL, [[T.LPWSTR], [T.CALID]]), [['stdcall']]);};
T.CODEPAGE_ENUMPROCA = function() {return Pointer(Fn(T.BOOL, [[T.LPSTR]]), [['stdcall']]);};
T.CODEPAGE_ENUMPROCW = function() {return Pointer(Fn(T.BOOL, [[T.LPWSTR]]), [['stdcall']]);};
T.DATEFMT_ENUMPROCA = function() {return Pointer(Fn(T.BOOL, [[T.LPSTR]]), [['stdcall']]);};
T.DATEFMT_ENUMPROCW = function() {return Pointer(Fn(T.BOOL, [[T.LPWSTR]]), [['stdcall']]);};
T.DATEFMT_ENUMPROCEXA = function() {return Pointer(Fn(T.BOOL, [[T.LPSTR], [T.CALID]]), [['stdcall']]);};
T.DATEFMT_ENUMPROCEXW = function() {return Pointer(Fn(T.BOOL, [[T.LPWSTR], [T.CALID]]), [['stdcall']]);};
T.GEO_ENUMPROC = function() {return Pointer(Fn(T.BOOL, [[T.GEOID]]), [['stdcall']]);};
T.LANGGROUPLOCALE_ENUMPROCA = function() {return Pointer(Fn(T.BOOL, [[T.LGRPID], [T.LCID], [T.LPSTR], [T.LONG_PTR]]), [['stdcall']]);};
T.LANGGROUPLOCALE_ENUMPROCW = function() {return Pointer(Fn(T.BOOL, [[T.LGRPID], [T.LCID], [T.LPWSTR], [T.LONG_PTR]]), [['stdcall']]);};
T.LANGUAGEGROUP_ENUMPROCA = function() {return Pointer(Fn(T.BOOL, [[T.LGRPID], [T.LPSTR], [T.LPSTR], [T.DWORD], [T.LONG_PTR]]), [['stdcall']]);};
T.LANGUAGEGROUP_ENUMPROCW = function() {return Pointer(Fn(T.BOOL, [[T.LGRPID], [T.LPWSTR], [T.LPWSTR], [T.DWORD], [T.LONG_PTR]]), [['stdcall']]);};
T.LOCALE_ENUMPROCA = function() {return Pointer(Fn(T.BOOL, [[T.LPSTR]]), [['stdcall']]);};
T.LOCALE_ENUMPROCW = function() {return Pointer(Fn(T.BOOL, [[T.LPWSTR]]), [['stdcall']]);};
T.LOCALE_ENUMPROCEX = function() {return Pointer(Fn(T.BOOL, [[T.LPWSTR], [T.DWORD], [T.LPARAM]]), [['stdcall']]);};
T.TIMEFMT_ENUMPROCA = function() {return Pointer(Fn(T.BOOL, [[T.LPSTR]]), [['stdcall']]);};
T.TIMEFMT_ENUMPROCW = function() {return Pointer(Fn(T.BOOL, [[T.LPWSTR]]), [['stdcall']]);};
T.UILANGUAGE_ENUMPROCA = function() {return Pointer(Fn(T.BOOL, [[T.LPSTR], [T.LONG_PTR]]), [['stdcall']]);};
T.UILANGUAGE_ENUMPROCW = function() {return Pointer(Fn(T.BOOL, [[T.LPWSTR], [T.LONG_PTR]]), [['stdcall']]);};
T.CALINFO_ENUMPROC = function() {return T.CALINFO_ENUMPROCA;};
T.CALINFO_ENUMPROCEX = function() {return T.CALINFO_ENUMPROCEXA;};
T.CODEPAGE_ENUMPROC = function() {return T.CODEPAGE_ENUMPROCA;};
T.DATEFMT_ENUMPROC = function() {return T.DATEFMT_ENUMPROCA;};
T.DATEFMT_ENUMPROCEX = function() {return T.DATEFMT_ENUMPROCEXA;};
T.LANGGROUPLOCALE_ENUMPROC = function() {return T.LANGGROUPLOCALE_ENUMPROCA;};
T.LANGUAGEGROUP_ENUMPROC = function() {return T.LANGUAGEGROUP_ENUMPROCA;};
T.LOCALE_ENUMPROC = function() {return T.LOCALE_ENUMPROCA;};
T.TIMEFMT_ENUMPROC = function() {return T.TIMEFMT_ENUMPROCA;};
T.UILANGUAGE_ENUMPROC = function() {return T.UILANGUAGE_ENUMPROCA;};
T.PHANDLER_ROUTINE = function() {return Pointer(Fn(T.BOOL, [[T.DWORD, 'dwCtrlType']]), [['stdcall']]);};
T.CONSOLE_CURSOR_INFO = function() {return Struct('_CONSOLE_CURSOR_INFO', {
    dwSize: T.DWORD,
    bVisible: T.BOOL
});};
T.LPCONSOLE_CURSOR_INFO = function() {return Pointer(Struct('_CONSOLE_CURSOR_INFO', {
    dwSize: T.DWORD,
    bVisible: T.BOOL
}));};
T.COORD = function() {return Struct('tagCOORD', {
    X: T.SHORT,
    Y: T.SHORT
});};
T.LPCOORD = function() {return Pointer(Struct('tagCOORD', {
    X: T.SHORT,
    Y: T.SHORT
}));};
T.SMALL_RECT = function() {return Struct('tagSMALL_RECT', {
    Left: T.SHORT,
    Top: T.SHORT,
    Right: T.SHORT,
    Bottom: T.SHORT
});};
T.LPSMALL_RECT = function() {return Pointer(Struct('tagSMALL_RECT', {
    Left: T.SHORT,
    Top: T.SHORT,
    Right: T.SHORT,
    Bottom: T.SHORT
}));};
T.CONSOLE_FONT_INFO = function() {return Struct('_CONSOLE_FONT_INFO', {
    nFont: T.DWORD,
    dwFontSize: T.COORD
});};
T.LPCONSOLE_FONT_INFO = function() {return Pointer(Struct('_CONSOLE_FONT_INFO', {
    nFont: T.DWORD,
    dwFontSize: T.COORD
}));};
T.CONSOLE_FONT_INFOEX = function() {return Struct('_CONSOLE_FONT_INFOEX', {
    cbSize: T.ULONG,
    nFont: T.DWORD,
    dwFontSize: T.COORD,
    FontFamily: T.UINT,
    FontWeight: T.UINT,
    FaceName: ArrayType(T.WCHAR, 32)
});};
T.LPCONSOLE_FONT_INFOEX = function() {return Pointer(Struct('_CONSOLE_FONT_INFOEX', {
    cbSize: T.ULONG,
    nFont: T.DWORD,
    dwFontSize: T.COORD,
    FontFamily: T.UINT,
    FontWeight: T.UINT,
    FaceName: ArrayType(T.WCHAR, 32)
}));};
T.CONSOLE_HISTORY_INFO = function() {return Struct('tagCONSOLE_HISTORY_INFO', {
    cbSize: T.UINT,
    HistoryBufferSize: T.UINT,
    NumberOfHistoryBuffers: T.UINT,
    dwFlags: T.DWORD
});};
T.LPCONSOLE_HISTORY_INFO = function() {return Pointer(Struct('tagCONSOLE_HISTORY_INFO', {
    cbSize: T.UINT,
    HistoryBufferSize: T.UINT,
    NumberOfHistoryBuffers: T.UINT,
    dwFlags: T.DWORD
}));};
T.CONSOLE_READCONSOLE_CONTROL = function() {return Struct('_CONSOLE_READCONSOLE_CONTROL', {
    nLength: T.ULONG,
    nInitialChars: T.ULONG,
    dwCtrlWakeupMask: T.ULONG,
    dwConsoleKeyState: T.ULONG
});};
T.LPCONSOLE_READCONSOLE_CONTROL = function() {return Pointer(Struct('_CONSOLE_READCONSOLE_CONTROL', {
    nLength: T.ULONG,
    nInitialChars: T.ULONG,
    dwCtrlWakeupMask: T.ULONG,
    dwConsoleKeyState: T.ULONG
}));};
T.CONSOLE_SCREEN_BUFFER_INFO = function() {return Struct('tagCONSOLE_SCREEN_BUFFER_INFO', {
    dwSize: T.COORD,
    dwCursorPosition: T.COORD,
    wAttributes: T.WORD,
    srWindow: T.SMALL_RECT,
    dwMaximumWindowSize: T.COORD
});};
T.LPCONSOLE_SCREEN_BUFFER_INFO = function() {return Pointer(Struct('tagCONSOLE_SCREEN_BUFFER_INFO', {
    dwSize: T.COORD,
    dwCursorPosition: T.COORD,
    wAttributes: T.WORD,
    srWindow: T.SMALL_RECT,
    dwMaximumWindowSize: T.COORD
}));};
T.CONSOLE_SCREEN_BUFFER_INFOEX = function() {return Struct('_CONSOLE_SCREEN_BUFFER_INFOEX', {
    cbSize: T.ULONG,
    dwSize: T.COORD,
    dwCursorPosition: T.COORD,
    wAttributes: T.WORD,
    srWindow: T.SMALL_RECT,
    dwMaximumWindowSize: T.COORD,
    wPopupAttributes: T.WORD,
    bFullscreenSupported: T.BOOL,
    ColorTable: ArrayType(T.COLORREF, 16)
});};
T.LPCONSOLE_SCREEN_BUFFER_INFOEX = function() {return Pointer(Struct('_CONSOLE_SCREEN_BUFFER_INFOEX', {
    cbSize: T.ULONG,
    dwSize: T.COORD,
    dwCursorPosition: T.COORD,
    wAttributes: T.WORD,
    srWindow: T.SMALL_RECT,
    dwMaximumWindowSize: T.COORD,
    wPopupAttributes: T.WORD,
    bFullscreenSupported: T.BOOL,
    ColorTable: ArrayType(T.COLORREF, 16)
}));};
T.CONSOLE_SELECTION_INFO = function() {return Struct('_CONSOLE_SELECTION_INFO', {
    dwFlags: T.DWORD,
    dwSelectionAnchor: T.COORD,
    srSelection: T.SMALL_RECT
});};
T.LPCONSOLE_SELECTION_INFO = function() {return Pointer(Struct('_CONSOLE_SELECTION_INFO', {
    dwFlags: T.DWORD,
    dwSelectionAnchor: T.COORD,
    srSelection: T.SMALL_RECT
}));};
T.CHAR_INFO = function() {return Struct('tagCHAR_INFO', {
    Char: Union('', {
        UnicodeChar: T.WCHAR,
        AsciiChar: T.CHAR
    }),
    Attributes: T.WORD
});};
T.LPCHAR_INFO = function() {return Pointer(Struct('tagCHAR_INFO', {
    Char: Union('', {
        UnicodeChar: T.WCHAR,
        AsciiChar: T.CHAR
    }),
    Attributes: T.WORD
}));};
T.KEY_EVENT_RECORD = function() {return Struct('tagKEY_EVENT_RECORD', {
    bKeyDown: T.BOOL,
    wRepeatCount: T.WORD,
    wVirtualKeyCode: T.WORD,
    wVirtualScanCode: T.WORD,
    uChar: Union('', {
        UnicodeChar: T.WCHAR,
        AsciiChar: T.CHAR
    }),
    dwControlKeyState: T.DWORD
});};
T.LPKEY_EVENT_RECORD = function() {return Pointer(Struct('tagKEY_EVENT_RECORD', {
    bKeyDown: T.BOOL,
    wRepeatCount: T.WORD,
    wVirtualKeyCode: T.WORD,
    wVirtualScanCode: T.WORD,
    uChar: Union('', {
        UnicodeChar: T.WCHAR,
        AsciiChar: T.CHAR
    }),
    dwControlKeyState: T.DWORD
}));};
T.MOUSE_EVENT_RECORD = function() {return Struct('tagMOUSE_EVENT_RECORD', {
    dwMousePosition: T.COORD,
    dwButtonState: T.DWORD,
    dwControlKeyState: T.DWORD,
    dwEventFlags: T.DWORD
});};
T.LPMOUSE_EVENT_RECORD = function() {return Pointer(Struct('tagMOUSE_EVENT_RECORD', {
    dwMousePosition: T.COORD,
    dwButtonState: T.DWORD,
    dwControlKeyState: T.DWORD,
    dwEventFlags: T.DWORD
}));};
T.WINDOW_BUFFER_SIZE_RECORD = function() {return Struct('tagWINDOW_BUFFER_SIZE_RECORD', {
    dwSize: T.COORD
});};
T.LPWINDOW_BUFFER_SIZE_RECORD = function() {return Pointer(Struct('tagWINDOW_BUFFER_SIZE_RECORD', {
    dwSize: T.COORD
}));};
T.MENU_EVENT_RECORD = function() {return Struct('tagMENU_EVENT_RECORD', {
    dwCommandId: T.UINT
});};
T.LPMENU_EVENT_RECORD = function() {return Pointer(Struct('tagMENU_EVENT_RECORD', {
    dwCommandId: T.UINT
}));};
T.FOCUS_EVENT_RECORD = function() {return Struct('tagFOCUS_EVENT_RECORD', {
    bSetFocus: T.BOOL
});};
T.LPFOCUS_EVENT_RECORD = function() {return Pointer(Struct('tagFOCUS_EVENT_RECORD', {
    bSetFocus: T.BOOL
}));};
T.INPUT_RECORD = function() {return Struct('tagINPUT_RECORD', {
    EventType: T.WORD,
    Event: Union('', {
        KeyEvent: T.KEY_EVENT_RECORD,
        MouseEvent: T.MOUSE_EVENT_RECORD,
        WindowBufferSizeEvent: T.WINDOW_BUFFER_SIZE_RECORD,
        MenuEvent: T.MENU_EVENT_RECORD,
        FocusEvent: T.FOCUS_EVENT_RECORD
    })
});};
T.PINPUT_RECORD = function() {return Pointer(Struct('tagINPUT_RECORD', {
    EventType: T.WORD,
    Event: Union('', {
        KeyEvent: T.KEY_EVENT_RECORD,
        MouseEvent: T.MOUSE_EVENT_RECORD,
        WindowBufferSizeEvent: T.WINDOW_BUFFER_SIZE_RECORD,
        MenuEvent: T.MENU_EVENT_RECORD,
        FocusEvent: T.FOCUS_EVENT_RECORD
    })
}));};
T.VS_FIXEDFILEINFO = function() {return Struct('tagVS_FIXEDFILEINFO', {
    dwSignature: T.DWORD,
    dwStrucVersion: T.DWORD,
    dwFileVersionMS: T.DWORD,
    dwFileVersionLS: T.DWORD,
    dwProductVersionMS: T.DWORD,
    dwProductVersionLS: T.DWORD,
    dwFileFlagsMask: T.DWORD,
    dwFileFlags: T.DWORD,
    dwFileOS: T.DWORD,
    dwFileType: T.DWORD,
    dwFileSubtype: T.DWORD,
    dwFileDateMS: T.DWORD,
    dwFileDateLS: T.DWORD
});};
T.VALENTA = function() {return Struct('value_entA', {
    ve_valuename: T.LPSTR,
    ve_valuelen: T.DWORD,
    ve_valueptr: T.DWORD_PTR,
    ve_type: T.DWORD
});};
T.PVALENTA = function() {return Pointer(Struct('value_entA', {
    ve_valuename: T.LPSTR,
    ve_valuelen: T.DWORD,
    ve_valueptr: T.DWORD_PTR,
    ve_type: T.DWORD
}));};
T.VALENTW = function() {return Struct('value_entW', {
    ve_valuename: T.LPWSTR,
    ve_valuelen: T.DWORD,
    ve_valueptr: T.DWORD_PTR,
    ve_type: T.DWORD
});};
T.PVALENTW = function() {return Pointer(Struct('value_entW', {
    ve_valuename: T.LPWSTR,
    ve_valuelen: T.DWORD,
    ve_valueptr: T.DWORD_PTR,
    ve_type: T.DWORD
}));};
T.REGSAM = function() {return T.ACCESS_MASK;};
T.LSTATUS = function() {return T.LONG;};
T.NETRESOURCEA = function() {return Struct('', {
    dwScope: T.DWORD,
    dwType: T.DWORD,
    dwDisplayType: T.DWORD,
    dwUsage: T.DWORD,
    lpLocalName: T.LPSTR,
    lpRemoteName: T.LPSTR,
    lpComment: T.LPSTR,
    lpProvider: T.LPSTR
});};
T.LPNETRESOURCEA = function() {return Pointer(Struct('', {
    dwScope: T.DWORD,
    dwType: T.DWORD,
    dwDisplayType: T.DWORD,
    dwUsage: T.DWORD,
    lpLocalName: T.LPSTR,
    lpRemoteName: T.LPSTR,
    lpComment: T.LPSTR,
    lpProvider: T.LPSTR
}));};
T.NETRESOURCEW = function() {return Struct('', {
    dwScope: T.DWORD,
    dwType: T.DWORD,
    dwDisplayType: T.DWORD,
    dwUsage: T.DWORD,
    lpLocalName: T.LPWSTR,
    lpRemoteName: T.LPWSTR,
    lpComment: T.LPWSTR,
    lpProvider: T.LPWSTR
});};
T.LPNETRESOURCEW = function() {return Pointer(Struct('', {
    dwScope: T.DWORD,
    dwType: T.DWORD,
    dwDisplayType: T.DWORD,
    dwUsage: T.DWORD,
    lpLocalName: T.LPWSTR,
    lpRemoteName: T.LPWSTR,
    lpComment: T.LPWSTR,
    lpProvider: T.LPWSTR
}));};
T.NETRESOURCE = function() {return T.NETRESOURCEA;};
T.LPNETRESOURCE = function() {return T.LPNETRESOURCEA;};
T.CONNECTDLGSTRUCTA = function() {return Struct('', {
    cbStructure: T.DWORD,
    hwndOwner: T.HWND,
    lpConnRes: T.LPNETRESOURCEA,
    dwFlags: T.DWORD,
    dwDevNum: T.DWORD
});};
T.LPCONNECTDLGSTRUCTA = function() {return Pointer(Struct('', {
    cbStructure: T.DWORD,
    hwndOwner: T.HWND,
    lpConnRes: T.LPNETRESOURCEA,
    dwFlags: T.DWORD,
    dwDevNum: T.DWORD
}));};
T.CONNECTDLGSTRUCTW = function() {return Struct('', {
    cbStructure: T.DWORD,
    hwndOwner: T.HWND,
    lpConnRes: T.LPNETRESOURCEW,
    dwFlags: T.DWORD,
    dwDevNum: T.DWORD
});};
T.LPCONNECTDLGSTRUCTW = function() {return Pointer(Struct('', {
    cbStructure: T.DWORD,
    hwndOwner: T.HWND,
    lpConnRes: T.LPNETRESOURCEW,
    dwFlags: T.DWORD,
    dwDevNum: T.DWORD
}));};
T.CONNECTDLGSTRUCT = function() {return T.CONNECTDLGSTRUCTA;};
T.LPCONNECTDLGSTRUCT = function() {return T.LPCONNECTDLGSTRUCTA;};
T.DISCDLGSTRUCTA = function() {return Struct('', {
    cbStructure: T.DWORD,
    hwndOwner: T.HWND,
    lpLocalName: T.LPSTR,
    lpRemoteName: T.LPSTR,
    dwFlags: T.DWORD
});};
T.LPDISCDLGSTRUCTA = function() {return Pointer(Struct('', {
    cbStructure: T.DWORD,
    hwndOwner: T.HWND,
    lpLocalName: T.LPSTR,
    lpRemoteName: T.LPSTR,
    dwFlags: T.DWORD
}));};
T.DISCDLGSTRUCTW = function() {return Struct('', {
    cbStructure: T.DWORD,
    hwndOwner: T.HWND,
    lpLocalName: T.LPWSTR,
    lpRemoteName: T.LPWSTR,
    dwFlags: T.DWORD
});};
T.LPDISCDLGSTRUCTW = function() {return Pointer(Struct('', {
    cbStructure: T.DWORD,
    hwndOwner: T.HWND,
    lpLocalName: T.LPWSTR,
    lpRemoteName: T.LPWSTR,
    dwFlags: T.DWORD
}));};
T.DISCDLGSTRUCT = function() {return T.DISCDLGSTRUCTA;};
T.LPDISCDLGSTRUCT = function() {return T.LPDISCDLGSTRUCTA;};
T.UNIVERSAL_NAME_INFOA = function() {return Struct('', {
    lpUniversalName: T.LPSTR
});};
T.LPUNIVERSAL_NAME_INFOA = function() {return Pointer(Struct('', {
    lpUniversalName: T.LPSTR
}));};
T.UNIVERSAL_NAME_INFOW = function() {return Struct('', {
    lpUniversalName: T.LPWSTR
});};
T.LPUNIVERSAL_NAME_INFOW = function() {return Pointer(Struct('', {
    lpUniversalName: T.LPWSTR
}));};
T.UNIVERSAL_NAME_INFO = function() {return T.UNIVERSAL_NAME_INFOA;};
T.LPUNIVERSAL_NAME_INFO = function() {return T.LPUNIVERSAL_NAME_INFOA;};
T.REMOTE_NAME_INFOA = function() {return Struct('', {
    lpUniversalName: T.LPSTR,
    lpConnectionName: T.LPSTR,
    lpRemainingPath: T.LPSTR
});};
T.LPREMOTE_NAME_INFOA = function() {return Pointer(Struct('', {
    lpUniversalName: T.LPSTR,
    lpConnectionName: T.LPSTR,
    lpRemainingPath: T.LPSTR
}));};
T.REMOTE_NAME_INFOW = function() {return Struct('', {
    lpUniversalName: T.LPWSTR,
    lpConnectionName: T.LPWSTR,
    lpRemainingPath: T.LPWSTR
});};
T.LPREMOTE_NAME_INFOW = function() {return Pointer(Struct('', {
    lpUniversalName: T.LPWSTR,
    lpConnectionName: T.LPWSTR,
    lpRemainingPath: T.LPWSTR
}));};
T.REMOTE_NAME_INFO = function() {return T.REMOTE_NAME_INFOA;};
T.LPREMOTE_NAME_INFO = function() {return T.LPREMOTE_NAME_INFOA;};
T.NETINFOSTRUCT = function() {return Struct('', {
    cbStructure: T.DWORD,
    dwProviderVersion: T.DWORD,
    dwStatus: T.DWORD,
    dwCharacteristics: T.DWORD,
    dwHandle: T.DWORD,
    wNetType: T.WORD,
    dwPrinters: T.DWORD,
    dwDrives: T.DWORD
});};
T.LPNETINFOSTRUCT = function() {return Pointer(Struct('', {
    cbStructure: T.DWORD,
    dwProviderVersion: T.DWORD,
    dwStatus: T.DWORD,
    dwCharacteristics: T.DWORD,
    dwHandle: T.DWORD,
    wNetType: T.WORD,
    dwPrinters: T.DWORD,
    dwDrives: T.DWORD
}));};
T.NETCONNECTINFOSTRUCT = function() {return Struct('', {
    cbStructure: T.DWORD,
    dwFlags: T.DWORD,
    dwSpeed: T.DWORD,
    dwDelay: T.DWORD,
    dwOptDataSize: T.DWORD
});};
T.LPNETCONNECTINFOSTRUCT = function() {return Pointer(Struct('', {
    cbStructure: T.DWORD,
    dwFlags: T.DWORD,
    dwSpeed: T.DWORD,
    dwDelay: T.DWORD,
    dwOptDataSize: T.DWORD
}));};
T.PASSWORD_CACHE_ENTRY = function() {return Struct('tagPASSWORD_CACHE_ENTRY', {
    cbEntry: T.WORD,
    cbResource: T.WORD,
    cbPassword: T.WORD,
    iEntry: T.BYTE,
    nType: T.BYTE,
    abResource: ArrayType(T.BYTE, 1)
});};
T.ENUMPASSWORDPROC = function() {return Pointer(Fn(T.BOOL, [[Pointer(T.PASSWORD_CACHE_ENTRY)], [T.DWORD]]), [['stdcall']]);};
T.DDEACK = function() {return Struct('', {
    bAppReturnCode: [T.u16, 8],
    reserved: [T.u16, 6],
    fBusy: [T.u16, 1],
    fAck: [T.u16, 1]
});};
T.DDEDATA = function() {return Struct('', {
    unused: [T.u16, 12],
    fResponse: [T.u16, 1],
    fRelease: [T.u16, 1],
    reserved: [T.u16, 1],
    fAckReq: [T.u16, 1],
    cfFormat: T.i16,
    Value: ArrayType(T.BYTE, 1)
});};
T.DDEADVISE = function() {return Struct('', {
    reserved: [T.u16, 14],
    fDeferUpd: [T.u16, 1],
    fAckReq: [T.u16, 1],
    cfFormat: T.i16
});};
T.DDEPOKE = function() {return Struct('', {
    unused: [T.u16, 13],
    fRelease: [T.u16, 1],
    fReserved: [T.u16, 2],
    cfFormat: T.i16,
    Value: ArrayType(T.BYTE, 1)
});};
T.HCONVLIST = function() {return Pointer(Struct('HCONVLIST__', {
    unused: T.i32
}));};
T.HCONV = function() {return Pointer(Struct('HCONV__', {
    unused: T.i32
}));};
T.HSZ = function() {return Pointer(Struct('HSZ__', {
    unused: T.i32
}));};
T.HDDEDATA = function() {return Pointer(Struct('HDDEDATA__', {
    unused: T.i32
}));};
T.PFNCALLBACK = function() {return Pointer(Fn(T.HDDEDATA, [[T.UINT], [T.UINT], [T.HCONV], [T.HSZ], [T.HSZ], [T.HDDEDATA], [T.ULONG_PTR], [T.ULONG_PTR]]), [['stdcall']]);};
T.HSZPAIR = function() {return Struct('tagHSZPAIR', {
    hszSvc: T.HSZ,
    hszTopic: T.HSZ
});};
T.PHSZPAIR = function() {return Pointer(Struct('tagHSZPAIR', {
    hszSvc: T.HSZ,
    hszTopic: T.HSZ
}));};
T.CONVCONTEXT = function() {return Struct('tagCONVCONTEXT', {
    cb: T.UINT,
    wFlags: T.UINT,
    wCountryID: T.UINT,
    iCodePage: T.INT,
    dwLangID: T.DWORD,
    dwSecurity: T.DWORD,
    qos: T.SECURITY_QUALITY_OF_SERVICE
});};
T.PCONVCONTEXT = function() {return Pointer(Struct('tagCONVCONTEXT', {
    cb: T.UINT,
    wFlags: T.UINT,
    wCountryID: T.UINT,
    iCodePage: T.INT,
    dwLangID: T.DWORD,
    dwSecurity: T.DWORD,
    qos: T.SECURITY_QUALITY_OF_SERVICE
}));};
T.CONVINFO = function() {return Struct('tagCONVINFO', {
    cb: T.DWORD,
    hUser: T.DWORD_PTR,
    hConvPartner: T.HCONV,
    hszSvcPartner: T.HSZ,
    hszServiceReq: T.HSZ,
    hszTopic: T.HSZ,
    hszItem: T.HSZ,
    wFmt: T.UINT,
    wType: T.UINT,
    wStatus: T.UINT,
    wConvst: T.UINT,
    wLastError: T.UINT,
    hConvList: T.HCONVLIST,
    ConvCtxt: T.CONVCONTEXT,
    hwnd: T.HWND,
    hwndPartner: T.HWND
});};
T.PCONVINFO = function() {return Pointer(Struct('tagCONVINFO', {
    cb: T.DWORD,
    hUser: T.DWORD_PTR,
    hConvPartner: T.HCONV,
    hszSvcPartner: T.HSZ,
    hszServiceReq: T.HSZ,
    hszTopic: T.HSZ,
    hszItem: T.HSZ,
    wFmt: T.UINT,
    wType: T.UINT,
    wStatus: T.UINT,
    wConvst: T.UINT,
    wLastError: T.UINT,
    hConvList: T.HCONVLIST,
    ConvCtxt: T.CONVCONTEXT,
    hwnd: T.HWND,
    hwndPartner: T.HWND
}));};
T.HPSTR = function() {return T.LPSTR;};
T.HPCSTR = function() {return T.LPCSTR;};
T.LPUINT = function() {return Pointer(T.UINT);};
T.HDRVR = function() {return Pointer(Struct('HDRVR__', {
    unused: T.i32
}));};
T.HWAVE = function() {return Pointer(Struct('HWAVE__', {
    unused: T.i32
}));};
T.HWAVEIN = function() {return Pointer(Struct('HWAVEIN__', {
    unused: T.i32
}));};
T.HWAVEOUT = function() {return Pointer(Struct('HWAVEOUT__', {
    unused: T.i32
}));};
T.HMIDI = function() {return Pointer(Struct('HMIDI__', {
    unused: T.i32
}));};
T.HMIDIIN = function() {return Pointer(Struct('HMIDIIN__', {
    unused: T.i32
}));};
T.HMIDIOUT = function() {return Pointer(Struct('HMIDIOUT__', {
    unused: T.i32
}));};
T.HMIDISTRM = function() {return Pointer(Struct('HMIDISTRM__', {
    unused: T.i32
}));};
T.HMIXER = function() {return Pointer(Struct('HMIXER__', {
    unused: T.i32
}));};
T.HMIXEROBJ = function() {return Pointer(Struct('HMIXEROBJ__', {
    unused: T.i32
}));};
T.HMMIO = function() {return Pointer(Struct('HMMIO__', {
    unused: T.i32
}));};
T.LPHMIDI = function() {return Pointer(T.HMIDI);};
T.LPHMIDIIN = function() {return Pointer(T.HMIDIIN);};
T.LPHMIDIOUT = function() {return Pointer(T.HMIDIOUT);};
T.LPHMIDISTRM = function() {return Pointer(T.HMIDISTRM);};
T.LPHMIXER = function() {return Pointer(T.HMIXER);};
T.LPHMIXEROBJ = function() {return Pointer(T.HMIXEROBJ);};
T.LPHWAVEIN = function() {return Pointer(T.HWAVEIN);};
T.LPHWAVEOUT = function() {return Pointer(T.HWAVEOUT);};
T.DRIVERPROC = function() {return Pointer(Fn(T.LRESULT, [[T.DWORD_PTR], [T.HDRVR], [T.UINT], [T.LPARAM], [T.LPARAM]]), [['stdcall']]);};
T.MCIERROR = function() {return T.DWORD;};
T.MMVERSION = function() {return T.UINT;};
T.MCIDEVICEID = function() {return T.UINT;};
T.MMRESULT = function() {return T.UINT;};
T.MMTIME = function() {return Struct('mmtime_tag', {
    wType: T.UINT,
    u: Union('', {
        ms: T.DWORD,
        sample: T.DWORD,
        cb: T.DWORD,
        ticks: T.DWORD,
        smpte: Struct('', {
            hour: T.BYTE,
            min: T.BYTE,
            sec: T.BYTE,
            frame: T.BYTE,
            fps: T.BYTE,
            dummy: T.BYTE,
            pad: ArrayType(T.BYTE, 2)
        }),
        midi: Struct('', {
            songptrpos: T.DWORD
        })
    })
});};
T.PMMTIME = function() {return Pointer(Struct('mmtime_tag', {
    wType: T.UINT,
    u: Union('', {
        ms: T.DWORD,
        sample: T.DWORD,
        cb: T.DWORD,
        ticks: T.DWORD,
        smpte: Struct('', {
            hour: T.BYTE,
            min: T.BYTE,
            sec: T.BYTE,
            frame: T.BYTE,
            fps: T.BYTE,
            dummy: T.BYTE,
            pad: ArrayType(T.BYTE, 2)
        }),
        midi: Struct('', {
            songptrpos: T.DWORD
        })
    })
}));};
T.LPMMTIME = function() {return Pointer(Struct('mmtime_tag', {
    wType: T.UINT,
    u: Union('', {
        ms: T.DWORD,
        sample: T.DWORD,
        cb: T.DWORD,
        ticks: T.DWORD,
        smpte: Struct('', {
            hour: T.BYTE,
            min: T.BYTE,
            sec: T.BYTE,
            frame: T.BYTE,
            fps: T.BYTE,
            dummy: T.BYTE,
            pad: ArrayType(T.BYTE, 2)
        }),
        midi: Struct('', {
            songptrpos: T.DWORD
        })
    })
}));};
T.DRVCONFIGINFO = function() {return Struct('tagDRVCONFIGINFO', {
    dwDCISize: T.DWORD,
    lpszDCISectionName: T.LPCWSTR,
    lpszDCIAliasName: T.LPCWSTR
});};
T.LPDRVCONFIGINFO = function() {return Pointer(Struct('tagDRVCONFIGINFO', {
    dwDCISize: T.DWORD,
    lpszDCISectionName: T.LPCWSTR,
    lpszDCIAliasName: T.LPCWSTR
}));};
T.LPDRVCALLBACK = function() {return Pointer(Fn(null, [[T.HDRVR], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR], [T.DWORD_PTR]]), [['stdcall']]);};
T.LPWAVECALLBACK = function() {return T.LPDRVCALLBACK;};
T.WAVEHDR = function() {return Struct('wavehdr_tag', {
    lpData: T.LPSTR,
    dwBufferLength: T.DWORD,
    dwBytesRecorded: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwFlags: T.DWORD,
    dwLoops: T.DWORD,
    lpNext: Pointer(Struct('wavehdr_tag', null)),
    reserved: T.DWORD_PTR
});};
T.PWAVEHDR = function() {return Pointer(Struct('wavehdr_tag', {
    lpData: T.LPSTR,
    dwBufferLength: T.DWORD,
    dwBytesRecorded: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwFlags: T.DWORD,
    dwLoops: T.DWORD,
    lpNext: Pointer(Struct('wavehdr_tag', null)),
    reserved: T.DWORD_PTR
}));};
T.NPWAVEHDR = function() {return Pointer(Struct('wavehdr_tag', {
    lpData: T.LPSTR,
    dwBufferLength: T.DWORD,
    dwBytesRecorded: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwFlags: T.DWORD,
    dwLoops: T.DWORD,
    lpNext: Pointer(Struct('wavehdr_tag', null)),
    reserved: T.DWORD_PTR
}));};
T.LPWAVEHDR = function() {return Pointer(Struct('wavehdr_tag', {
    lpData: T.LPSTR,
    dwBufferLength: T.DWORD,
    dwBytesRecorded: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwFlags: T.DWORD,
    dwLoops: T.DWORD,
    lpNext: Pointer(Struct('wavehdr_tag', null)),
    reserved: T.DWORD_PTR
}));};
T.WAVEOUTCAPSA = function() {return Struct('tagWAVEOUTCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD
});};
T.LPWAVEOUTCAPSA = function() {return Pointer(Struct('tagWAVEOUTCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD
}));};
T.WAVEOUTCAPSW = function() {return Struct('tagWAVEOUTCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD
});};
T.LPWAVEOUTCAPSW = function() {return Pointer(Struct('tagWAVEOUTCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD
}));};
T.WAVEOUTCAPS = function() {return T.WAVEOUTCAPSA;};
T.LPWAVEOUTCAPS = function() {return T.LPWAVEOUTCAPSA;};
T.WAVEOUTCAPS2A = function() {return Struct('tagWAVEOUTCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});};
T.LPWAVEOUTCAPS2A = function() {return Pointer(Struct('tagWAVEOUTCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));};
T.WAVEOUTCAPS2W = function() {return Struct('tagWAVEOUTCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});};
T.LPWAVEOUTCAPS2W = function() {return Pointer(Struct('tagWAVEOUTCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));};
T.WAVEOUTCAPS2 = function() {return T.WAVEOUTCAPS2A;};
T.LPWAVEOUTCAPS2 = function() {return T.LPWAVEOUTCAPS2A;};
T.WAVEINCAPSA = function() {return Struct('tagWAVEINCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD
});};
T.LPWAVEINCAPSA = function() {return Pointer(Struct('tagWAVEINCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD
}));};
T.WAVEINCAPSW = function() {return Struct('tagWAVEINCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD
});};
T.LPWAVEINCAPSW = function() {return Pointer(Struct('tagWAVEINCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD
}));};
T.WAVEINCAPS = function() {return T.WAVEINCAPSA;};
T.LPWAVEINCAPS = function() {return T.LPWAVEINCAPSA;};
T.WAVEINCAPS2A = function() {return Struct('tagWAVEINCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});};
T.LPWAVEINCAPS2A = function() {return Pointer(Struct('tagWAVEINCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));};
T.WAVEINCAPS2W = function() {return Struct('tagWAVEINCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});};
T.LPWAVEINCAPS2W = function() {return Pointer(Struct('tagWAVEINCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));};
T.WAVEINCAPS2 = function() {return T.WAVEINCAPS2A;};
T.LPWAVEINCAPS2 = function() {return T.LPWAVEINCAPS2A;};
T.WAVEFORMAT = function() {return Struct('waveformat_tag', {
    wFormatTag: T.WORD,
    nChannels: T.WORD,
    nSamplesPerSec: T.DWORD,
    nAvgBytesPerSec: T.DWORD,
    nBlockAlign: T.WORD
});};
T.LPWAVEFORMAT = function() {return Pointer(Struct('waveformat_tag', {
    wFormatTag: T.WORD,
    nChannels: T.WORD,
    nSamplesPerSec: T.DWORD,
    nAvgBytesPerSec: T.DWORD,
    nBlockAlign: T.WORD
}));};
T.PCMWAVEFORMAT = function() {return Struct('pcmwaveformat_tag', {
    wf: T.WAVEFORMAT,
    wBitsPerSample: T.WORD
});};
T.LPPCMWAVEFORMAT = function() {return Pointer(Struct('pcmwaveformat_tag', {
    wf: T.WAVEFORMAT,
    wBitsPerSample: T.WORD
}));};
T.WAVEFORMATEX = function() {return Struct('tWAVEFORMATEX', {
    wFormatTag: T.WORD,
    nChannels: T.WORD,
    nSamplesPerSec: T.DWORD,
    nAvgBytesPerSec: T.DWORD,
    nBlockAlign: T.WORD,
    wBitsPerSample: T.WORD,
    cbSize: T.WORD
});};
T.LPWAVEFORMATEX = function() {return Pointer(Struct('tWAVEFORMATEX', {
    wFormatTag: T.WORD,
    nChannels: T.WORD,
    nSamplesPerSec: T.DWORD,
    nAvgBytesPerSec: T.DWORD,
    nBlockAlign: T.WORD,
    wBitsPerSample: T.WORD,
    cbSize: T.WORD
}));};
T.NPWAVEFORMATEX = function() {return Pointer(Struct('tWAVEFORMATEX', {
    wFormatTag: T.WORD,
    nChannels: T.WORD,
    nSamplesPerSec: T.DWORD,
    nAvgBytesPerSec: T.DWORD,
    nBlockAlign: T.WORD,
    wBitsPerSample: T.WORD,
    cbSize: T.WORD
}));};
T.PWAVEFORMATEX = function() {return Pointer(Struct('tWAVEFORMATEX', {
    wFormatTag: T.WORD,
    nChannels: T.WORD,
    nSamplesPerSec: T.DWORD,
    nAvgBytesPerSec: T.DWORD,
    nBlockAlign: T.WORD,
    wBitsPerSample: T.WORD,
    cbSize: T.WORD
}));};
T.LPCWAVEFORMATEX = function() {return Pointer(T.WAVEFORMATEX, [['const']]);};
T.LPMIDICALLBACK = function() {return T.LPDRVCALLBACK;};
T.PATCHARRAY = function() {return ArrayType(T.WORD, 128);};
T.LPPATCHARRAY = function() {return Pointer(T.WORD);};
T.KEYARRAY = function() {return ArrayType(T.WORD, 128);};
T.LPKEYARRAY = function() {return Pointer(T.WORD);};
T.MIDIOUTCAPSA = function() {return Struct('tagMIDIOUTCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    wTechnology: T.WORD,
    wVoices: T.WORD,
    wNotes: T.WORD,
    wChannelMask: T.WORD,
    dwSupport: T.DWORD
});};
T.LPMIDIOUTCAPSA = function() {return Pointer(Struct('tagMIDIOUTCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    wTechnology: T.WORD,
    wVoices: T.WORD,
    wNotes: T.WORD,
    wChannelMask: T.WORD,
    dwSupport: T.DWORD
}));};
T.MIDIOUTCAPSW = function() {return Struct('tagMIDIOUTCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    wTechnology: T.WORD,
    wVoices: T.WORD,
    wNotes: T.WORD,
    wChannelMask: T.WORD,
    dwSupport: T.DWORD
});};
T.LPMIDIOUTCAPSW = function() {return Pointer(Struct('tagMIDIOUTCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    wTechnology: T.WORD,
    wVoices: T.WORD,
    wNotes: T.WORD,
    wChannelMask: T.WORD,
    dwSupport: T.DWORD
}));};
T.MIDIOUTCAPS = function() {return T.MIDIOUTCAPSA;};
T.LPMIDIOUTCAPS = function() {return T.LPMIDIOUTCAPSA;};
T.MIDIOUTCAPS2A = function() {return Struct('tagMIDIOUTCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    wTechnology: T.WORD,
    wVoices: T.WORD,
    wNotes: T.WORD,
    wChannelMask: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});};
T.LPMIDIOUTCAPS2A = function() {return Pointer(Struct('tagMIDIOUTCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    wTechnology: T.WORD,
    wVoices: T.WORD,
    wNotes: T.WORD,
    wChannelMask: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));};
T.MIDIOUTCAPS2W = function() {return Struct('tagMIDIOUTCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    wTechnology: T.WORD,
    wVoices: T.WORD,
    wNotes: T.WORD,
    wChannelMask: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});};
T.LPMIDIOUTCAPS2W = function() {return Pointer(Struct('tagMIDIOUTCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    wTechnology: T.WORD,
    wVoices: T.WORD,
    wNotes: T.WORD,
    wChannelMask: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));};
T.MIDIOUTCAPS2 = function() {return T.MIDIOUTCAPS2A;};
T.LPMIDIOUTCAPS2 = function() {return T.LPMIDIOUTCAPS2A;};
T.MIDIINCAPSA = function() {return Struct('tagMIDIINCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwSupport: T.DWORD
});};
T.LPMIDIINCAPSA = function() {return Pointer(Struct('tagMIDIINCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwSupport: T.DWORD
}));};
T.MIDIINCAPSW = function() {return Struct('tagMIDIINCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwSupport: T.DWORD
});};
T.LPMIDIINCAPSW = function() {return Pointer(Struct('tagMIDIINCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwSupport: T.DWORD
}));};
T.MIDIINCAPS = function() {return T.MIDIINCAPSA;};
T.LPMIDIINCAPS = function() {return T.LPMIDIINCAPSA;};
T.MIDIINCAPS2A = function() {return Struct('tagMIDIINCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});};
T.LPMIDIINCAPS2A = function() {return Pointer(Struct('tagMIDIINCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));};
T.MIDIINCAPS2W = function() {return Struct('tagMIDIINCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});};
T.LPMIDIINCAPS2W = function() {return Pointer(Struct('tagMIDIINCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));};
T.MIDIINCAPS2 = function() {return T.MIDIINCAPS2A;};
T.LPMIDIINCAPS2 = function() {return T.LPMIDIINCAPS2A;};
T.MIDIHDR = function() {return Struct('midihdr_tag', {
    lpData: T.LPSTR,
    dwBufferLength: T.DWORD,
    dwBytesRecorded: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwFlags: T.DWORD,
    lpNext: Pointer(Struct('midihdr_tag', null)),
    reserved: T.DWORD_PTR,
    dwOffset: T.DWORD,
    dwReserved: ArrayType(T.DWORD_PTR, 8)
});};
T.LPMIDIHDR = function() {return Pointer(Struct('midihdr_tag', {
    lpData: T.LPSTR,
    dwBufferLength: T.DWORD,
    dwBytesRecorded: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwFlags: T.DWORD,
    lpNext: Pointer(Struct('midihdr_tag', null)),
    reserved: T.DWORD_PTR,
    dwOffset: T.DWORD,
    dwReserved: ArrayType(T.DWORD_PTR, 8)
}));};
T.MIDIPROPTEMPO = function() {return Struct('midiproptempo_tag', {
    cbStruct: T.DWORD,
    dwTempo: T.DWORD
});};
T.LPMIDIPROPTEMPO = function() {return Pointer(Struct('midiproptempo_tag', {
    cbStruct: T.DWORD,
    dwTempo: T.DWORD
}));};
T.MIDIPROPTIMEDIV = function() {return Struct('midiproptimediv_tag', {
    cbStruct: T.DWORD,
    dwTimeDiv: T.DWORD
});};
T.LPMIDIPROPTIMEDIV = function() {return Pointer(Struct('midiproptimediv_tag', {
    cbStruct: T.DWORD,
    dwTimeDiv: T.DWORD
}));};
T.MIDIEVENT = function() {return Struct('midievent_tag', {
    dwDeltaTime: T.DWORD,
    dwStreamID: T.DWORD,
    dwEvent: T.DWORD,
    dwParms: ArrayType(T.DWORD, 1)
});};
T.LPMIDIEVENT = function() {return Pointer(Struct('midievent_tag', {
    dwDeltaTime: T.DWORD,
    dwStreamID: T.DWORD,
    dwEvent: T.DWORD,
    dwParms: ArrayType(T.DWORD, 1)
}));};
T.AUXCAPSA = function() {return Struct('tagAUXCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    wTechnology: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD
});};
T.LPAUXCAPSA = function() {return Pointer(Struct('tagAUXCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    wTechnology: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD
}));};
T.AUXCAPSW = function() {return Struct('tagAUXCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    wTechnology: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD
});};
T.LPAUXCAPSW = function() {return Pointer(Struct('tagAUXCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    wTechnology: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD
}));};
T.AUXCAPS = function() {return T.AUXCAPSA;};
T.LPAUXCAPS = function() {return T.LPAUXCAPSA;};
T.AUXCAPS2A = function() {return Struct('tagAUXCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    wTechnology: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});};
T.LPAUXCAPS2A = function() {return Pointer(Struct('tagAUXCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    wTechnology: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));};
T.AUXCAPS2W = function() {return Struct('tagAUXCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    wTechnology: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});};
T.LPAUXCAPS2W = function() {return Pointer(Struct('tagAUXCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    wTechnology: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));};
T.AUXCAPS2 = function() {return T.AUXCAPS2A;};
T.LPAUXCAPS2 = function() {return T.LPAUXCAPS2A;};
T.LPTIMECALLBACK = function() {return Pointer(Fn(null, [[T.UINT], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR], [T.DWORD_PTR]]), [['stdcall']]);};
T.TIMECAPS = function() {return Struct('timecaps_tag', {
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT
});};
T.LPTIMECAPS = function() {return Pointer(Struct('timecaps_tag', {
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT
}));};
T.JOYCAPSA = function() {return Struct('tagJOYCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    szPname: ArrayType(T.CHAR, 32),
    wXmin: T.UINT,
    wXmax: T.UINT,
    wYmin: T.UINT,
    wYmax: T.UINT,
    wZmin: T.UINT,
    wZmax: T.UINT,
    wNumButtons: T.UINT,
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT,
    wRmin: T.UINT,
    wRmax: T.UINT,
    wUmin: T.UINT,
    wUmax: T.UINT,
    wVmin: T.UINT,
    wVmax: T.UINT,
    wCaps: T.UINT,
    wMaxAxes: T.UINT,
    wNumAxes: T.UINT,
    wMaxButtons: T.UINT,
    szRegKey: ArrayType(T.CHAR, 32),
    szOEMVxD: ArrayType(T.CHAR, 260)
});};
T.LPJOYCAPSA = function() {return Pointer(Struct('tagJOYCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    szPname: ArrayType(T.CHAR, 32),
    wXmin: T.UINT,
    wXmax: T.UINT,
    wYmin: T.UINT,
    wYmax: T.UINT,
    wZmin: T.UINT,
    wZmax: T.UINT,
    wNumButtons: T.UINT,
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT,
    wRmin: T.UINT,
    wRmax: T.UINT,
    wUmin: T.UINT,
    wUmax: T.UINT,
    wVmin: T.UINT,
    wVmax: T.UINT,
    wCaps: T.UINT,
    wMaxAxes: T.UINT,
    wNumAxes: T.UINT,
    wMaxButtons: T.UINT,
    szRegKey: ArrayType(T.CHAR, 32),
    szOEMVxD: ArrayType(T.CHAR, 260)
}));};
T.JOYCAPSW = function() {return Struct('tagJOYCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    szPname: ArrayType(T.WCHAR, 32),
    wXmin: T.UINT,
    wXmax: T.UINT,
    wYmin: T.UINT,
    wYmax: T.UINT,
    wZmin: T.UINT,
    wZmax: T.UINT,
    wNumButtons: T.UINT,
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT,
    wRmin: T.UINT,
    wRmax: T.UINT,
    wUmin: T.UINT,
    wUmax: T.UINT,
    wVmin: T.UINT,
    wVmax: T.UINT,
    wCaps: T.UINT,
    wMaxAxes: T.UINT,
    wNumAxes: T.UINT,
    wMaxButtons: T.UINT,
    szRegKey: ArrayType(T.WCHAR, 32),
    szOEMVxD: ArrayType(T.WCHAR, 260)
});};
T.LPJOYCAPSW = function() {return Pointer(Struct('tagJOYCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    szPname: ArrayType(T.WCHAR, 32),
    wXmin: T.UINT,
    wXmax: T.UINT,
    wYmin: T.UINT,
    wYmax: T.UINT,
    wZmin: T.UINT,
    wZmax: T.UINT,
    wNumButtons: T.UINT,
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT,
    wRmin: T.UINT,
    wRmax: T.UINT,
    wUmin: T.UINT,
    wUmax: T.UINT,
    wVmin: T.UINT,
    wVmax: T.UINT,
    wCaps: T.UINT,
    wMaxAxes: T.UINT,
    wNumAxes: T.UINT,
    wMaxButtons: T.UINT,
    szRegKey: ArrayType(T.WCHAR, 32),
    szOEMVxD: ArrayType(T.WCHAR, 260)
}));};
T.JOYCAPS = function() {return T.JOYCAPSA;};
T.LPJOYCAPS = function() {return T.LPJOYCAPSA;};
T.JOYCAPS2A = function() {return Struct('tagJOYCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    szPname: ArrayType(T.CHAR, 32),
    wXmin: T.UINT,
    wXmax: T.UINT,
    wYmin: T.UINT,
    wYmax: T.UINT,
    wZmin: T.UINT,
    wZmax: T.UINT,
    wNumButtons: T.UINT,
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT,
    wRmin: T.UINT,
    wRmax: T.UINT,
    wUmin: T.UINT,
    wUmax: T.UINT,
    wVmin: T.UINT,
    wVmax: T.UINT,
    wCaps: T.UINT,
    wMaxAxes: T.UINT,
    wNumAxes: T.UINT,
    wMaxButtons: T.UINT,
    szRegKey: ArrayType(T.CHAR, 32),
    szOEMVxD: ArrayType(T.CHAR, 260),
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});};
T.LPJOYCAPS2A = function() {return Pointer(Struct('tagJOYCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    szPname: ArrayType(T.CHAR, 32),
    wXmin: T.UINT,
    wXmax: T.UINT,
    wYmin: T.UINT,
    wYmax: T.UINT,
    wZmin: T.UINT,
    wZmax: T.UINT,
    wNumButtons: T.UINT,
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT,
    wRmin: T.UINT,
    wRmax: T.UINT,
    wUmin: T.UINT,
    wUmax: T.UINT,
    wVmin: T.UINT,
    wVmax: T.UINT,
    wCaps: T.UINT,
    wMaxAxes: T.UINT,
    wNumAxes: T.UINT,
    wMaxButtons: T.UINT,
    szRegKey: ArrayType(T.CHAR, 32),
    szOEMVxD: ArrayType(T.CHAR, 260),
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));};
T.JOYCAPS2W = function() {return Struct('tagJOYCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    szPname: ArrayType(T.WCHAR, 32),
    wXmin: T.UINT,
    wXmax: T.UINT,
    wYmin: T.UINT,
    wYmax: T.UINT,
    wZmin: T.UINT,
    wZmax: T.UINT,
    wNumButtons: T.UINT,
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT,
    wRmin: T.UINT,
    wRmax: T.UINT,
    wUmin: T.UINT,
    wUmax: T.UINT,
    wVmin: T.UINT,
    wVmax: T.UINT,
    wCaps: T.UINT,
    wMaxAxes: T.UINT,
    wNumAxes: T.UINT,
    wMaxButtons: T.UINT,
    szRegKey: ArrayType(T.WCHAR, 32),
    szOEMVxD: ArrayType(T.WCHAR, 260),
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});};
T.LPJOYCAPS2W = function() {return Pointer(Struct('tagJOYCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    szPname: ArrayType(T.WCHAR, 32),
    wXmin: T.UINT,
    wXmax: T.UINT,
    wYmin: T.UINT,
    wYmax: T.UINT,
    wZmin: T.UINT,
    wZmax: T.UINT,
    wNumButtons: T.UINT,
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT,
    wRmin: T.UINT,
    wRmax: T.UINT,
    wUmin: T.UINT,
    wUmax: T.UINT,
    wVmin: T.UINT,
    wVmax: T.UINT,
    wCaps: T.UINT,
    wMaxAxes: T.UINT,
    wNumAxes: T.UINT,
    wMaxButtons: T.UINT,
    szRegKey: ArrayType(T.WCHAR, 32),
    szOEMVxD: ArrayType(T.WCHAR, 260),
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));};
T.JOYCAPS2 = function() {return T.JOYCAPS2A;};
T.LPJOYCAPS2 = function() {return T.LPJOYCAPS2A;};
T.JOYINFO = function() {return Struct('joyinfo_tag', {
    wXpos: T.UINT,
    wYpos: T.UINT,
    wZpos: T.UINT,
    wButtons: T.UINT
});};
T.LPJOYINFO = function() {return Pointer(Struct('joyinfo_tag', {
    wXpos: T.UINT,
    wYpos: T.UINT,
    wZpos: T.UINT,
    wButtons: T.UINT
}));};
T.JOYINFOEX = function() {return Struct('joyinfoex_tag', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    dwXpos: T.DWORD,
    dwYpos: T.DWORD,
    dwZpos: T.DWORD,
    dwRpos: T.DWORD,
    dwUpos: T.DWORD,
    dwVpos: T.DWORD,
    dwButtons: T.DWORD,
    dwButtonNumber: T.DWORD,
    dwPOV: T.DWORD,
    dwReserved1: T.DWORD,
    dwReserved2: T.DWORD
});};
T.LPJOYINFOEX = function() {return Pointer(Struct('joyinfoex_tag', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    dwXpos: T.DWORD,
    dwYpos: T.DWORD,
    dwZpos: T.DWORD,
    dwRpos: T.DWORD,
    dwUpos: T.DWORD,
    dwVpos: T.DWORD,
    dwButtons: T.DWORD,
    dwButtonNumber: T.DWORD,
    dwPOV: T.DWORD,
    dwReserved1: T.DWORD,
    dwReserved2: T.DWORD
}));};
T.MIXERCAPSA = function() {return Struct('tagMIXERCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    fdwSupport: T.DWORD,
    cDestinations: T.DWORD
});};
T.LPMIXERCAPSA = function() {return Pointer(Struct('tagMIXERCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    fdwSupport: T.DWORD,
    cDestinations: T.DWORD
}));};
T.MIXERCAPSW = function() {return Struct('tagMIXERCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    fdwSupport: T.DWORD,
    cDestinations: T.DWORD
});};
T.LPMIXERCAPSW = function() {return Pointer(Struct('tagMIXERCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    fdwSupport: T.DWORD,
    cDestinations: T.DWORD
}));};
T.MIXERCAPS = function() {return T.MIXERCAPSA;};
T.LPMIXERCAPS = function() {return T.LPMIXERCAPSA;};
T.MIXERCAPS2A = function() {return Struct('tagMIXERCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    fdwSupport: T.DWORD,
    cDestinations: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});};
T.LPMIXERCAPS2A = function() {return Pointer(Struct('tagMIXERCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    fdwSupport: T.DWORD,
    cDestinations: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));};
T.MIXERCAPS2W = function() {return Struct('tagMIXERCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    fdwSupport: T.DWORD,
    cDestinations: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});};
T.LPMIXERCAPS2W = function() {return Pointer(Struct('tagMIXERCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    fdwSupport: T.DWORD,
    cDestinations: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));};
T.MIXERCAPS2 = function() {return T.MIXERCAPS2A;};
T.LPMIXERCAPS2 = function() {return T.LPMIXERCAPS2A;};
T.MIXERLINEA = function() {return Struct('tagMIXERLINEA', {
    cbStruct: T.DWORD,
    dwDestination: T.DWORD,
    dwSource: T.DWORD,
    dwLineID: T.DWORD,
    fdwLine: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwComponentType: T.DWORD,
    cChannels: T.DWORD,
    cConnections: T.DWORD,
    cControls: T.DWORD,
    szShortName: ArrayType(T.CHAR, 16),
    szName: ArrayType(T.CHAR, 64),
    Target: Struct('', {
        dwType: T.DWORD,
        dwDeviceID: T.DWORD,
        wMid: T.WORD,
        wPid: T.WORD,
        vDriverVersion: T.MMVERSION,
        szPname: ArrayType(T.CHAR, 32)
    })
});};
T.LPMIXERLINEA = function() {return Pointer(Struct('tagMIXERLINEA', {
    cbStruct: T.DWORD,
    dwDestination: T.DWORD,
    dwSource: T.DWORD,
    dwLineID: T.DWORD,
    fdwLine: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwComponentType: T.DWORD,
    cChannels: T.DWORD,
    cConnections: T.DWORD,
    cControls: T.DWORD,
    szShortName: ArrayType(T.CHAR, 16),
    szName: ArrayType(T.CHAR, 64),
    Target: Struct('', {
        dwType: T.DWORD,
        dwDeviceID: T.DWORD,
        wMid: T.WORD,
        wPid: T.WORD,
        vDriverVersion: T.MMVERSION,
        szPname: ArrayType(T.CHAR, 32)
    })
}));};
T.MIXERLINEW = function() {return Struct('tagMIXERLINEW', {
    cbStruct: T.DWORD,
    dwDestination: T.DWORD,
    dwSource: T.DWORD,
    dwLineID: T.DWORD,
    fdwLine: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwComponentType: T.DWORD,
    cChannels: T.DWORD,
    cConnections: T.DWORD,
    cControls: T.DWORD,
    szShortName: ArrayType(T.WCHAR, 16),
    szName: ArrayType(T.WCHAR, 64),
    Target: Struct('', {
        dwType: T.DWORD,
        dwDeviceID: T.DWORD,
        wMid: T.WORD,
        wPid: T.WORD,
        vDriverVersion: T.MMVERSION,
        szPname: ArrayType(T.WCHAR, 32)
    })
});};
T.LPMIXERLINEW = function() {return Pointer(Struct('tagMIXERLINEW', {
    cbStruct: T.DWORD,
    dwDestination: T.DWORD,
    dwSource: T.DWORD,
    dwLineID: T.DWORD,
    fdwLine: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwComponentType: T.DWORD,
    cChannels: T.DWORD,
    cConnections: T.DWORD,
    cControls: T.DWORD,
    szShortName: ArrayType(T.WCHAR, 16),
    szName: ArrayType(T.WCHAR, 64),
    Target: Struct('', {
        dwType: T.DWORD,
        dwDeviceID: T.DWORD,
        wMid: T.WORD,
        wPid: T.WORD,
        vDriverVersion: T.MMVERSION,
        szPname: ArrayType(T.WCHAR, 32)
    })
}));};
T.MIXERLINE = function() {return T.MIXERLINEA;};
T.LPMIXERLINE = function() {return T.LPMIXERLINEA;};
T.MIXERCONTROLA = function() {return Struct('tagMIXERCONTROLA', {
    cbStruct: T.DWORD,
    dwControlID: T.DWORD,
    dwControlType: T.DWORD,
    fdwControl: T.DWORD,
    cMultipleItems: T.DWORD,
    szShortName: ArrayType(T.CHAR, 16),
    szName: ArrayType(T.CHAR, 64),
    Bounds: Union('', {
        __unnamed0: Struct('', {
            lMinimum: T.LONG,
            lMaximum: T.LONG
        }),
        __unnamed1: Struct('', {
            dwMinimum: T.DWORD,
            dwMaximum: T.DWORD
        }),
        dwReserved: ArrayType(T.DWORD, 6)
    }),
    Metrics: Union('', {
        cSteps: T.DWORD,
        cbCustomData: T.DWORD,
        dwReserved: ArrayType(T.DWORD, 6)
    })
});};
T.LPMIXERCONTROLA = function() {return Pointer(Struct('tagMIXERCONTROLA', {
    cbStruct: T.DWORD,
    dwControlID: T.DWORD,
    dwControlType: T.DWORD,
    fdwControl: T.DWORD,
    cMultipleItems: T.DWORD,
    szShortName: ArrayType(T.CHAR, 16),
    szName: ArrayType(T.CHAR, 64),
    Bounds: Union('', {
        __unnamed0: Struct('', {
            lMinimum: T.LONG,
            lMaximum: T.LONG
        }),
        __unnamed1: Struct('', {
            dwMinimum: T.DWORD,
            dwMaximum: T.DWORD
        }),
        dwReserved: ArrayType(T.DWORD, 6)
    }),
    Metrics: Union('', {
        cSteps: T.DWORD,
        cbCustomData: T.DWORD,
        dwReserved: ArrayType(T.DWORD, 6)
    })
}));};
T.MIXERCONTROLW = function() {return Struct('MIXERCONTROLW', {
    cbStruct: T.DWORD,
    dwControlID: T.DWORD,
    dwControlType: T.DWORD,
    fdwControl: T.DWORD,
    cMultipleItems: T.DWORD,
    szShortName: ArrayType(T.WCHAR, 16),
    szName: ArrayType(T.WCHAR, 64),
    Bounds: Union('', {
        __unnamed0: Struct('', {
            lMinimum: T.LONG,
            lMaximum: T.LONG
        }),
        __unnamed1: Struct('', {
            dwMinimum: T.DWORD,
            dwMaximum: T.DWORD
        }),
        dwReserved: ArrayType(T.DWORD, 6)
    }),
    Metrics: Union('', {
        cSteps: T.DWORD,
        cbCustomData: T.DWORD,
        dwReserved: ArrayType(T.DWORD, 6)
    })
});};
T.LPMIXERCONTROLW = function() {return Pointer(Struct('MIXERCONTROLW', {
    cbStruct: T.DWORD,
    dwControlID: T.DWORD,
    dwControlType: T.DWORD,
    fdwControl: T.DWORD,
    cMultipleItems: T.DWORD,
    szShortName: ArrayType(T.WCHAR, 16),
    szName: ArrayType(T.WCHAR, 64),
    Bounds: Union('', {
        __unnamed0: Struct('', {
            lMinimum: T.LONG,
            lMaximum: T.LONG
        }),
        __unnamed1: Struct('', {
            dwMinimum: T.DWORD,
            dwMaximum: T.DWORD
        }),
        dwReserved: ArrayType(T.DWORD, 6)
    }),
    Metrics: Union('', {
        cSteps: T.DWORD,
        cbCustomData: T.DWORD,
        dwReserved: ArrayType(T.DWORD, 6)
    })
}));};
T.MIXERCONTROL = function() {return T.MIXERCONTROLA;};
T.LPMIXERCONTROL = function() {return T.LPMIXERCONTROLA;};
T.MIXERLINECONTROLSA = function() {return Struct('tagMIXERLINECONTROLSA', {
    cbStruct: T.DWORD,
    dwLineID: T.DWORD,
    __unnamed0: Union('', {
        dwControlID: T.DWORD,
        dwControlType: T.DWORD
    }),
    cControls: T.DWORD,
    cbmxctrl: T.DWORD,
    pamxctrl: T.LPMIXERCONTROLA
});};
T.LPMIXERLINECONTROLSA = function() {return Pointer(Struct('tagMIXERLINECONTROLSA', {
    cbStruct: T.DWORD,
    dwLineID: T.DWORD,
    __unnamed0: Union('', {
        dwControlID: T.DWORD,
        dwControlType: T.DWORD
    }),
    cControls: T.DWORD,
    cbmxctrl: T.DWORD,
    pamxctrl: T.LPMIXERCONTROLA
}));};
T.MIXERLINECONTROLSW = function() {return Struct('tagMIXERLINECONTROLSW', {
    cbStruct: T.DWORD,
    dwLineID: T.DWORD,
    __unnamed0: Union('', {
        dwControlID: T.DWORD,
        dwControlType: T.DWORD
    }),
    cControls: T.DWORD,
    cbmxctrl: T.DWORD,
    pamxctrl: T.LPMIXERCONTROLW
});};
T.LPMIXERLINECONTROLSW = function() {return Pointer(Struct('tagMIXERLINECONTROLSW', {
    cbStruct: T.DWORD,
    dwLineID: T.DWORD,
    __unnamed0: Union('', {
        dwControlID: T.DWORD,
        dwControlType: T.DWORD
    }),
    cControls: T.DWORD,
    cbmxctrl: T.DWORD,
    pamxctrl: T.LPMIXERCONTROLW
}));};
T.MIXERLINECONTROLS = function() {return T.MIXERLINECONTROLSA;};
T.LPMIXERLINECONTROLS = function() {return T.LPMIXERLINECONTROLSA;};
T.MIXERCONTROLDETAILS = function() {return Struct('tMIXERCONTROLDETAILS', {
    cbStruct: T.DWORD,
    dwControlID: T.DWORD,
    cChannels: T.DWORD,
    __unnamed0: Union('', {
        hwndOwner: T.HWND,
        cMultipleItems: T.DWORD
    }),
    cbDetails: T.DWORD,
    paDetails: T.LPVOID
});};
T.LPMIXERCONTROLDETAILS = function() {return Pointer(Struct('tMIXERCONTROLDETAILS', {
    cbStruct: T.DWORD,
    dwControlID: T.DWORD,
    cChannels: T.DWORD,
    __unnamed0: Union('', {
        hwndOwner: T.HWND,
        cMultipleItems: T.DWORD
    }),
    cbDetails: T.DWORD,
    paDetails: T.LPVOID
}));};
T.MIXERCONTROLDETAILS_LISTTEXTA = function() {return Struct('tagMIXERCONTROLDETAILS_LISTTEXTA', {
    dwParam1: T.DWORD,
    dwParam2: T.DWORD,
    szName: ArrayType(T.CHAR, 64)
});};
T.LPMIXERCONTROLDETAILS_LISTTEXTA = function() {return Pointer(Struct('tagMIXERCONTROLDETAILS_LISTTEXTA', {
    dwParam1: T.DWORD,
    dwParam2: T.DWORD,
    szName: ArrayType(T.CHAR, 64)
}));};
T.MIXERCONTROLDETAILS_LISTTEXTW = function() {return Struct('tagMIXERCONTROLDETAILS_LISTTEXTW', {
    dwParam1: T.DWORD,
    dwParam2: T.DWORD,
    szName: ArrayType(T.WCHAR, 64)
});};
T.LPMIXERCONTROLDETAILS_LISTTEXTW = function() {return Pointer(Struct('tagMIXERCONTROLDETAILS_LISTTEXTW', {
    dwParam1: T.DWORD,
    dwParam2: T.DWORD,
    szName: ArrayType(T.WCHAR, 64)
}));};
T.MIXERCONTROLDETAILS_LISTTEXT = function() {return T.MIXERCONTROLDETAILS_LISTTEXTA;};
T.LPMIXERCONTROLDETAILS_LISTTEXT = function() {return T.LPMIXERCONTROLDETAILS_LISTTEXTA;};
T.MIXERCONTROLDETAILS_BOOLEAN = function() {return Struct('', {
    fValue: T.LONG
});};
T.LPMIXERCONTROLDETAILS_BOOLEAN = function() {return Pointer(Struct('', {
    fValue: T.LONG
}));};
T.MIXERCONTROLDETAILS_SIGNED = function() {return Struct('', {
    lValue: T.LONG
});};
T.LPMIXERCONTROLDETAILS_SIGNED = function() {return Pointer(Struct('', {
    lValue: T.LONG
}));};
T.MIXERCONTROLDETAILS_UNSIGNED = function() {return Struct('', {
    dwValue: T.DWORD
});};
T.LPMIXERCONTROLDETAILS_UNSIGNED = function() {return Pointer(Struct('', {
    dwValue: T.DWORD
}));};
T.FOURCC = function() {return T.DWORD;};
T.LPMMIOPROC = function() {return Pointer(Fn(T.LRESULT, [[T.LPSTR, 'lpmmioinfo'], [T.UINT, 'uMessage'], [T.LPARAM, 'lParam1'], [T.LPARAM, 'lParam2']]), [['stdcall']]);};
T.MMIOINFO = function() {return Struct('_MMIOINFO', {
    dwFlags: T.DWORD,
    fccIOProc: T.FOURCC,
    pIOProc: T.LPMMIOPROC,
    wErrorRet: T.UINT,
    hTask: T.HTASK,
    cchBuffer: T.LONG,
    pchBuffer: T.HPSTR,
    pchNext: T.HPSTR,
    pchEndRead: T.HPSTR,
    pchEndWrite: T.HPSTR,
    lBufOffset: T.LONG,
    lDiskOffset: T.LONG,
    adwInfo: ArrayType(T.DWORD, 3),
    dwReserved1: T.DWORD,
    dwReserved2: T.DWORD,
    hmmio: T.HMMIO
});};
T.PMMIOINFO = function() {return Pointer(Struct('_MMIOINFO', {
    dwFlags: T.DWORD,
    fccIOProc: T.FOURCC,
    pIOProc: T.LPMMIOPROC,
    wErrorRet: T.UINT,
    hTask: T.HTASK,
    cchBuffer: T.LONG,
    pchBuffer: T.HPSTR,
    pchNext: T.HPSTR,
    pchEndRead: T.HPSTR,
    pchEndWrite: T.HPSTR,
    lBufOffset: T.LONG,
    lDiskOffset: T.LONG,
    adwInfo: ArrayType(T.DWORD, 3),
    dwReserved1: T.DWORD,
    dwReserved2: T.DWORD,
    hmmio: T.HMMIO
}));};
T.LPMMIOINFO = function() {return Pointer(Struct('_MMIOINFO', {
    dwFlags: T.DWORD,
    fccIOProc: T.FOURCC,
    pIOProc: T.LPMMIOPROC,
    wErrorRet: T.UINT,
    hTask: T.HTASK,
    cchBuffer: T.LONG,
    pchBuffer: T.HPSTR,
    pchNext: T.HPSTR,
    pchEndRead: T.HPSTR,
    pchEndWrite: T.HPSTR,
    lBufOffset: T.LONG,
    lDiskOffset: T.LONG,
    adwInfo: ArrayType(T.DWORD, 3),
    dwReserved1: T.DWORD,
    dwReserved2: T.DWORD,
    hmmio: T.HMMIO
}));};
T.MMCKINFO = function() {return Struct('_MMCKINFO', {
    ckid: T.FOURCC,
    cksize: T.DWORD,
    fccType: T.FOURCC,
    dwDataOffset: T.DWORD,
    dwFlags: T.DWORD
});};
T.LPMMCKINFO = function() {return Pointer(Struct('_MMCKINFO', {
    ckid: T.FOURCC,
    cksize: T.DWORD,
    fccType: T.FOURCC,
    dwDataOffset: T.DWORD,
    dwFlags: T.DWORD
}));};
T.YIELDPROC = function() {return Pointer(Fn(T.UINT, [[T.MCIDEVICEID], [T.DWORD]]), [['stdcall']]);};
T.MCI_GENERIC_PARMS = function() {return Struct('tagMCI_GENERIC_PARMS', {
    dwCallback: T.DWORD_PTR
});};
T.LPMCI_GENERIC_PARMS = function() {return Pointer(Struct('tagMCI_GENERIC_PARMS', {
    dwCallback: T.DWORD_PTR
}));};
T.MCI_OPEN_PARMSA = function() {return Struct('tagMCI_OPEN_PARMSA', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCSTR,
    lpstrElementName: T.LPCSTR,
    lpstrAlias: T.LPCSTR
});};
T.LPMCI_OPEN_PARMSA = function() {return Pointer(Struct('tagMCI_OPEN_PARMSA', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCSTR,
    lpstrElementName: T.LPCSTR,
    lpstrAlias: T.LPCSTR
}));};
T.MCI_OPEN_PARMSW = function() {return Struct('tagMCI_OPEN_PARMSW', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCWSTR,
    lpstrElementName: T.LPCWSTR,
    lpstrAlias: T.LPCWSTR
});};
T.LPMCI_OPEN_PARMSW = function() {return Pointer(Struct('tagMCI_OPEN_PARMSW', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCWSTR,
    lpstrElementName: T.LPCWSTR,
    lpstrAlias: T.LPCWSTR
}));};
T.MCI_OPEN_PARMS = function() {return T.MCI_OPEN_PARMSA;};
T.LPMCI_OPEN_PARMS = function() {return T.LPMCI_OPEN_PARMSA;};
T.MCI_PLAY_PARMS = function() {return Struct('tagMCI_PLAY_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD
});};
T.LPMCI_PLAY_PARMS = function() {return Pointer(Struct('tagMCI_PLAY_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD
}));};
T.MCI_SEEK_PARMS = function() {return Struct('tagMCI_SEEK_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwTo: T.DWORD
});};
T.LPMCI_SEEK_PARMS = function() {return Pointer(Struct('tagMCI_SEEK_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwTo: T.DWORD
}));};
T.MCI_STATUS_PARMS = function() {return Struct('tagMCI_STATUS_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwReturn: T.DWORD_PTR,
    dwItem: T.DWORD,
    dwTrack: T.DWORD
});};
T.LPMCI_STATUS_PARMS = function() {return Pointer(Struct('tagMCI_STATUS_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwReturn: T.DWORD_PTR,
    dwItem: T.DWORD,
    dwTrack: T.DWORD
}));};
T.MCI_INFO_PARMSA = function() {return Struct('tagMCI_INFO_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpstrReturn: T.LPSTR,
    dwRetSize: T.DWORD
});};
T.LPMCI_INFO_PARMSA = function() {return Pointer(Struct('tagMCI_INFO_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpstrReturn: T.LPSTR,
    dwRetSize: T.DWORD
}));};
T.MCI_INFO_PARMSW = function() {return Struct('tagMCI_INFO_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpstrReturn: T.LPWSTR,
    dwRetSize: T.DWORD
});};
T.LPMCI_INFO_PARMSW = function() {return Pointer(Struct('tagMCI_INFO_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpstrReturn: T.LPWSTR,
    dwRetSize: T.DWORD
}));};
T.MCI_INFO_PARMS = function() {return T.MCI_INFO_PARMSA;};
T.LPMCI_INFO_PARMS = function() {return T.LPMCI_INFO_PARMSA;};
T.MCI_GETDEVCAPS_PARMS = function() {return Struct('tagMCI_GETDEVCAPS_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwReturn: T.DWORD,
    dwItem: T.DWORD
});};
T.LPMCI_GETDEVCAPS_PARMS = function() {return Pointer(Struct('tagMCI_GETDEVCAPS_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwReturn: T.DWORD,
    dwItem: T.DWORD
}));};
T.MCI_SYSINFO_PARMSA = function() {return Struct('tagMCI_SYSINFO_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpstrReturn: T.LPSTR,
    dwRetSize: T.DWORD,
    dwNumber: T.DWORD,
    wDeviceType: T.UINT
});};
T.LPMCI_SYSINFO_PARMSA = function() {return Pointer(Struct('tagMCI_SYSINFO_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpstrReturn: T.LPSTR,
    dwRetSize: T.DWORD,
    dwNumber: T.DWORD,
    wDeviceType: T.UINT
}));};
T.MCI_SYSINFO_PARMSW = function() {return Struct('tagMCI_SYSINFO_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpstrReturn: T.LPWSTR,
    dwRetSize: T.DWORD,
    dwNumber: T.DWORD,
    wDeviceType: T.UINT
});};
T.LPMCI_SYSINFO_PARMSW = function() {return Pointer(Struct('tagMCI_SYSINFO_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpstrReturn: T.LPWSTR,
    dwRetSize: T.DWORD,
    dwNumber: T.DWORD,
    wDeviceType: T.UINT
}));};
T.MCI_SYSINFO_PARMS = function() {return T.MCI_SYSINFO_PARMSA;};
T.LPMCI_SYSINFO_PARMS = function() {return T.LPMCI_SYSINFO_PARMSA;};
T.MCI_SET_PARMS = function() {return Struct('tagMCI_SET_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwTimeFormat: T.DWORD,
    dwAudio: T.DWORD
});};
T.LPMCI_SET_PARMS = function() {return Pointer(Struct('tagMCI_SET_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwTimeFormat: T.DWORD,
    dwAudio: T.DWORD
}));};
T.MCI_BREAK_PARMS = function() {return Struct('tagMCI_BREAK_PARMS', {
    dwCallback: T.DWORD_PTR,
    nVirtKey: T.INT,
    hwndBreak: T.HWND
});};
T.LPMCI_BREAK_PARMS = function() {return Pointer(Struct('tagMCI_BREAK_PARMS', {
    dwCallback: T.DWORD_PTR,
    nVirtKey: T.INT,
    hwndBreak: T.HWND
}));};
T.MCI_SOUND_PARMSA = function() {return Struct('tagMCI_SOUND_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpstrSoundName: T.LPCSTR
});};
T.LPMCI_SOUND_PARMSA = function() {return Pointer(Struct('tagMCI_SOUND_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpstrSoundName: T.LPCSTR
}));};
T.MCI_SOUND_PARMSW = function() {return Struct('tagMCI_SOUND_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpstrSoundName: T.LPCWSTR
});};
T.LPMCI_SOUND_PARMSW = function() {return Pointer(Struct('tagMCI_SOUND_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpstrSoundName: T.LPCWSTR
}));};
T.MCI_SOUND_PARMS = function() {return T.MCI_SOUND_PARMSA;};
T.LPMCI_SOUND_PARMS = function() {return T.LPMCI_SOUND_PARMSA;};
T.MCI_SAVE_PARMSA = function() {return Struct('tagMCI_SAVE_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCSTR
});};
T.LPMCI_SAVE_PARMSA = function() {return Pointer(Struct('tagMCI_SAVE_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCSTR
}));};
T.MCI_SAVE_PARMSW = function() {return Struct('tagMCI_SAVE_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCWSTR
});};
T.LPMCI_SAVE_PARMSW = function() {return Pointer(Struct('tagMCI_SAVE_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCWSTR
}));};
T.MCI_SAVE_PARMS = function() {return T.MCI_SAVE_PARMSA;};
T.LPMCI_SAVE_PARMS = function() {return T.LPMCI_SAVE_PARMSA;};
T.MCI_LOAD_PARMSA = function() {return Struct('tagMCI_LOAD_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCSTR
});};
T.LPMCI_LOAD_PARMSA = function() {return Pointer(Struct('tagMCI_LOAD_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCSTR
}));};
T.MCI_LOAD_PARMSW = function() {return Struct('tagMCI_LOAD_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCWSTR
});};
T.LPMCI_LOAD_PARMSW = function() {return Pointer(Struct('tagMCI_LOAD_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCWSTR
}));};
T.MCI_LOAD_PARMS = function() {return T.MCI_LOAD_PARMSA;};
T.LPMCI_LOAD_PARMS = function() {return T.LPMCI_LOAD_PARMSA;};
T.MCI_RECORD_PARMS = function() {return Struct('tagMCI_RECORD_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD
});};
T.LPMCI_RECORD_PARMS = function() {return Pointer(Struct('tagMCI_RECORD_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD
}));};
T.MCI_VD_PLAY_PARMS = function() {return Struct('tagMCI_VD_PLAY_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD,
    dwSpeed: T.DWORD
});};
T.LPMCI_VD_PLAY_PARMS = function() {return Pointer(Struct('tagMCI_VD_PLAY_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD,
    dwSpeed: T.DWORD
}));};
T.MCI_VD_STEP_PARMS = function() {return Struct('tagMCI_VD_STEP_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrames: T.DWORD
});};
T.LPMCI_VD_STEP_PARMS = function() {return Pointer(Struct('tagMCI_VD_STEP_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrames: T.DWORD
}));};
T.MCI_VD_ESCAPE_PARMSA = function() {return Struct('tagMCI_VD_ESCAPE_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpstrCommand: T.LPCSTR
});};
T.LPMCI_VD_ESCAPE_PARMSA = function() {return Pointer(Struct('tagMCI_VD_ESCAPE_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpstrCommand: T.LPCSTR
}));};
T.MCI_VD_ESCAPE_PARMSW = function() {return Struct('tagMCI_VD_ESCAPE_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpstrCommand: T.LPCWSTR
});};
T.LPMCI_VD_ESCAPE_PARMSW = function() {return Pointer(Struct('tagMCI_VD_ESCAPE_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpstrCommand: T.LPCWSTR
}));};
T.MCI_VD_ESCAPE_PARMS = function() {return T.MCI_VD_ESCAPE_PARMSA;};
T.LPMCI_VD_ESCAPE_PARMS = function() {return T.LPMCI_VD_ESCAPE_PARMSA;};
T.MCI_WAVE_OPEN_PARMSA = function() {return Struct('tagMCI_WAVE_OPEN_PARMSA', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCSTR,
    lpstrElementName: T.LPCSTR,
    lpstrAlias: T.LPCSTR,
    dwBufferSeconds: T.DWORD
});};
T.LPMCI_WAVE_OPEN_PARMSA = function() {return Pointer(Struct('tagMCI_WAVE_OPEN_PARMSA', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCSTR,
    lpstrElementName: T.LPCSTR,
    lpstrAlias: T.LPCSTR,
    dwBufferSeconds: T.DWORD
}));};
T.MCI_WAVE_OPEN_PARMSW = function() {return Struct('tagMCI_WAVE_OPEN_PARMSW', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCWSTR,
    lpstrElementName: T.LPCWSTR,
    lpstrAlias: T.LPCWSTR,
    dwBufferSeconds: T.DWORD
});};
T.LPMCI_WAVE_OPEN_PARMSW = function() {return Pointer(Struct('tagMCI_WAVE_OPEN_PARMSW', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCWSTR,
    lpstrElementName: T.LPCWSTR,
    lpstrAlias: T.LPCWSTR,
    dwBufferSeconds: T.DWORD
}));};
T.MCI_WAVE_OPEN_PARMS = function() {return T.MCI_WAVE_OPEN_PARMSA;};
T.LPMCI_WAVE_OPEN_PARMS = function() {return T.LPMCI_WAVE_OPEN_PARMSA;};
T.MCI_WAVE_DELETE_PARMS = function() {return Struct('tagMCI_WAVE_DELETE_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD
});};
T.LPMCI_WAVE_DELETE_PARMS = function() {return Pointer(Struct('tagMCI_WAVE_DELETE_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD
}));};
T.MCI_WAVE_SET_PARMS = function() {return Struct('tagMCI_WAVE_SET_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwTimeFormat: T.DWORD,
    dwAudio: T.DWORD,
    wInput: T.UINT,
    wOutput: T.UINT,
    wFormatTag: T.UINT,
    nChannels: T.UINT,
    nSamplesPerSec: T.DWORD,
    nAvgBytesPerSec: T.DWORD,
    nBlockAlign: T.UINT,
    wBitsPerSample: T.UINT
});};
T.LPMCI_WAVE_SET_PARMS = function() {return Pointer(Struct('tagMCI_WAVE_SET_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwTimeFormat: T.DWORD,
    dwAudio: T.DWORD,
    wInput: T.UINT,
    wOutput: T.UINT,
    wFormatTag: T.UINT,
    nChannels: T.UINT,
    nSamplesPerSec: T.DWORD,
    nAvgBytesPerSec: T.DWORD,
    nBlockAlign: T.UINT,
    wBitsPerSample: T.UINT
}));};
T.MCI_SEQ_SET_PARMS = function() {return Struct('tagMCI_SEQ_SET_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwTimeFormat: T.DWORD,
    dwAudio: T.DWORD,
    dwTempo: T.DWORD,
    dwPort: T.DWORD,
    dwSlave: T.DWORD,
    dwMaster: T.DWORD,
    dwOffset: T.DWORD
});};
T.LPMCI_SEQ_SET_PARMS = function() {return Pointer(Struct('tagMCI_SEQ_SET_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwTimeFormat: T.DWORD,
    dwAudio: T.DWORD,
    dwTempo: T.DWORD,
    dwPort: T.DWORD,
    dwSlave: T.DWORD,
    dwMaster: T.DWORD,
    dwOffset: T.DWORD
}));};
T.MCI_ANIM_OPEN_PARMSA = function() {return Struct('tagMCI_ANIM_OPEN_PARMSA', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCSTR,
    lpstrElementName: T.LPCSTR,
    lpstrAlias: T.LPCSTR,
    dwStyle: T.DWORD,
    hWndParent: T.HWND
});};
T.LPMCI_ANIM_OPEN_PARMSA = function() {return Pointer(Struct('tagMCI_ANIM_OPEN_PARMSA', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCSTR,
    lpstrElementName: T.LPCSTR,
    lpstrAlias: T.LPCSTR,
    dwStyle: T.DWORD,
    hWndParent: T.HWND
}));};
T.MCI_ANIM_OPEN_PARMSW = function() {return Struct('tagMCI_ANIM_OPEN_PARMSW', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCWSTR,
    lpstrElementName: T.LPCWSTR,
    lpstrAlias: T.LPCWSTR,
    dwStyle: T.DWORD,
    hWndParent: T.HWND
});};
T.LPMCI_ANIM_OPEN_PARMSW = function() {return Pointer(Struct('tagMCI_ANIM_OPEN_PARMSW', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCWSTR,
    lpstrElementName: T.LPCWSTR,
    lpstrAlias: T.LPCWSTR,
    dwStyle: T.DWORD,
    hWndParent: T.HWND
}));};
T.MCI_ANIM_OPEN_PARMS = function() {return T.MCI_ANIM_OPEN_PARMSA;};
T.LPMCI_ANIM_OPEN_PARMS = function() {return T.LPMCI_ANIM_OPEN_PARMSA;};
T.MCI_ANIM_PLAY_PARMS = function() {return Struct('tagMCI_ANIM_PLAY_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD,
    dwSpeed: T.DWORD
});};
T.LPMCI_ANIM_PLAY_PARMS = function() {return Pointer(Struct('tagMCI_ANIM_PLAY_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD,
    dwSpeed: T.DWORD
}));};
T.MCI_ANIM_STEP_PARMS = function() {return Struct('tagMCI_ANIM_STEP_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrames: T.DWORD
});};
T.LPMCI_ANIM_STEP_PARMS = function() {return Pointer(Struct('tagMCI_ANIM_STEP_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrames: T.DWORD
}));};
T.MCI_ANIM_WINDOW_PARMSA = function() {return Struct('tagMCI_ANIM_WINDOW_PARMSA', {
    dwCallback: T.DWORD_PTR,
    hWnd: T.HWND,
    nCmdShow: T.UINT,
    lpstrText: T.LPCSTR
});};
T.LPMCI_ANIM_WINDOW_PARMSA = function() {return Pointer(Struct('tagMCI_ANIM_WINDOW_PARMSA', {
    dwCallback: T.DWORD_PTR,
    hWnd: T.HWND,
    nCmdShow: T.UINT,
    lpstrText: T.LPCSTR
}));};
T.MCI_ANIM_WINDOW_PARMSW = function() {return Struct('tagMCI_ANIM_WINDOW_PARMSW', {
    dwCallback: T.DWORD_PTR,
    hWnd: T.HWND,
    nCmdShow: T.UINT,
    lpstrText: T.LPCWSTR
});};
T.LPMCI_ANIM_WINDOW_PARMSW = function() {return Pointer(Struct('tagMCI_ANIM_WINDOW_PARMSW', {
    dwCallback: T.DWORD_PTR,
    hWnd: T.HWND,
    nCmdShow: T.UINT,
    lpstrText: T.LPCWSTR
}));};
T.MCI_ANIM_WINDOW_PARMS = function() {return T.MCI_ANIM_WINDOW_PARMSA;};
T.LPMCI_ANIM_WINDOW_PARMS = function() {return T.LPMCI_ANIM_WINDOW_PARMSA;};
T.MCI_ANIM_RECT_PARMS = function() {return Struct('tagMCI_ANIM_RECT_PARMS', {
    dwCallback: T.DWORD_PTR,
    rc: T.RECT
});};
T.LPMCI_ANIM_RECT_PARMS = function() {return Pointer(Struct('tagMCI_ANIM_RECT_PARMS', {
    dwCallback: T.DWORD_PTR,
    rc: T.RECT
}));};
T.MCI_ANIM_UPDATE_PARMS = function() {return Struct('tagMCI_ANIM_UPDATE_PARMS', {
    dwCallback: T.DWORD_PTR,
    rc: T.RECT,
    hDC: T.HDC
});};
T.LPMCI_ANIM_UPDATE_PARMS = function() {return Pointer(Struct('tagMCI_ANIM_UPDATE_PARMS', {
    dwCallback: T.DWORD_PTR,
    rc: T.RECT,
    hDC: T.HDC
}));};
T.MCI_OVLY_OPEN_PARMSA = function() {return Struct('tagMCI_OVLY_OPEN_PARMSA', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCSTR,
    lpstrElementName: T.LPCSTR,
    lpstrAlias: T.LPCSTR,
    dwStyle: T.DWORD,
    hWndParent: T.HWND
});};
T.LPMCI_OVLY_OPEN_PARMSA = function() {return Pointer(Struct('tagMCI_OVLY_OPEN_PARMSA', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCSTR,
    lpstrElementName: T.LPCSTR,
    lpstrAlias: T.LPCSTR,
    dwStyle: T.DWORD,
    hWndParent: T.HWND
}));};
T.MCI_OVLY_OPEN_PARMSW = function() {return Struct('tagMCI_OVLY_OPEN_PARMSW', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCWSTR,
    lpstrElementName: T.LPCWSTR,
    lpstrAlias: T.LPCWSTR,
    dwStyle: T.DWORD,
    hWndParent: T.HWND
});};
T.LPMCI_OVLY_OPEN_PARMSW = function() {return Pointer(Struct('tagMCI_OVLY_OPEN_PARMSW', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCWSTR,
    lpstrElementName: T.LPCWSTR,
    lpstrAlias: T.LPCWSTR,
    dwStyle: T.DWORD,
    hWndParent: T.HWND
}));};
T.MCI_OVLY_OPEN_PARMS = function() {return T.MCI_OVLY_OPEN_PARMSA;};
T.LPMCI_OVLY_OPEN_PARMS = function() {return T.LPMCI_OVLY_OPEN_PARMSA;};
T.MCI_OVLY_WINDOW_PARMSA = function() {return Struct('tagMCI_OVLY_WINDOW_PARMSA', {
    dwCallback: T.DWORD_PTR,
    hWnd: T.HWND,
    nCmdShow: T.UINT,
    lpstrText: T.LPCSTR
});};
T.LPMCI_OVLY_WINDOW_PARMSA = function() {return Pointer(Struct('tagMCI_OVLY_WINDOW_PARMSA', {
    dwCallback: T.DWORD_PTR,
    hWnd: T.HWND,
    nCmdShow: T.UINT,
    lpstrText: T.LPCSTR
}));};
T.MCI_OVLY_WINDOW_PARMSW = function() {return Struct('tagMCI_OVLY_WINDOW_PARMSW', {
    dwCallback: T.DWORD_PTR,
    hWnd: T.HWND,
    nCmdShow: T.UINT,
    lpstrText: T.LPCWSTR
});};
T.LPMCI_OVLY_WINDOW_PARMSW = function() {return Pointer(Struct('tagMCI_OVLY_WINDOW_PARMSW', {
    dwCallback: T.DWORD_PTR,
    hWnd: T.HWND,
    nCmdShow: T.UINT,
    lpstrText: T.LPCWSTR
}));};
T.MCI_OVLY_WINDOW_PARMS = function() {return T.MCI_OVLY_WINDOW_PARMSA;};
T.LPMCI_OVLY_WINDOW_PARMS = function() {return T.LPMCI_OVLY_WINDOW_PARMSA;};
T.MCI_OVLY_RECT_PARMS = function() {return Struct('tagMCI_OVLY_RECT_PARMS', {
    dwCallback: T.DWORD_PTR,
    rc: T.RECT
});};
T.LPMCI_OVLY_RECT_PARMS = function() {return Pointer(Struct('tagMCI_OVLY_RECT_PARMS', {
    dwCallback: T.DWORD_PTR,
    rc: T.RECT
}));};
T.MCI_OVLY_SAVE_PARMSA = function() {return Struct('tagMCI_OVLY_SAVE_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCSTR,
    rc: T.RECT
});};
T.LPMCI_OVLY_SAVE_PARMSA = function() {return Pointer(Struct('tagMCI_OVLY_SAVE_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCSTR,
    rc: T.RECT
}));};
T.MCI_OVLY_SAVE_PARMSW = function() {return Struct('tagMCI_OVLY_SAVE_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCWSTR,
    rc: T.RECT
});};
T.LPMCI_OVLY_SAVE_PARMSW = function() {return Pointer(Struct('tagMCI_OVLY_SAVE_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCWSTR,
    rc: T.RECT
}));};
T.MCI_OVLY_SAVE_PARMS = function() {return T.MCI_OVLY_SAVE_PARMSA;};
T.LPMCI_OVLY_SAVE_PARMS = function() {return T.LPMCI_OVLY_SAVE_PARMSA;};
T.MCI_OVLY_LOAD_PARMSA = function() {return Struct('tagMCI_OVLY_LOAD_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCSTR,
    rc: T.RECT
});};
T.LPMCI_OVLY_LOAD_PARMSA = function() {return Pointer(Struct('tagMCI_OVLY_LOAD_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCSTR,
    rc: T.RECT
}));};
T.MCI_OVLY_LOAD_PARMSW = function() {return Struct('tagMCI_OVLY_LOAD_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCWSTR,
    rc: T.RECT
});};
T.LPMCI_OVLY_LOAD_PARMSW = function() {return Pointer(Struct('tagMCI_OVLY_LOAD_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCWSTR,
    rc: T.RECT
}));};
T.MCI_OVLY_LOAD_PARMS = function() {return T.MCI_OVLY_LOAD_PARMSA;};
T.LPMCI_OVLY_LOAD_PARMS = function() {return T.LPMCI_OVLY_LOAD_PARMSA;};
T.NCB = function() {return Struct('_NCB', {
    ncb_command: T.UCHAR,
    ncb_retcode: T.UCHAR,
    ncb_lsn: T.UCHAR,
    ncb_num: T.UCHAR,
    ncb_buffer: T.PUCHAR,
    ncb_length: T.WORD,
    ncb_callname: ArrayType(T.UCHAR, 16),
    ncb_name: ArrayType(T.UCHAR, 16),
    ncb_rto: T.UCHAR,
    ncb_sto: T.UCHAR,
    ncb_post: Pointer(Fn(null, [[Pointer(Struct('_NCB', null))]])),
    ncb_lana_num: T.UCHAR,
    ncb_cmd_cplt: T.UCHAR,
    ncb_reserve: ArrayType(T.UCHAR, 10),
    ncb_event: T.HANDLE
});};
T.PNCB = function() {return Pointer(Struct('_NCB', {
    ncb_command: T.UCHAR,
    ncb_retcode: T.UCHAR,
    ncb_lsn: T.UCHAR,
    ncb_num: T.UCHAR,
    ncb_buffer: T.PUCHAR,
    ncb_length: T.WORD,
    ncb_callname: ArrayType(T.UCHAR, 16),
    ncb_name: ArrayType(T.UCHAR, 16),
    ncb_rto: T.UCHAR,
    ncb_sto: T.UCHAR,
    ncb_post: Pointer(Fn(null, [[Pointer(Struct('_NCB', null))]])),
    ncb_lana_num: T.UCHAR,
    ncb_cmd_cplt: T.UCHAR,
    ncb_reserve: ArrayType(T.UCHAR, 10),
    ncb_event: T.HANDLE
}));};
T.ADAPTER_STATUS = function() {return Struct('_ADAPTER_STATUS', {
    adapter_address: ArrayType(T.UCHAR, 6),
    rev_major: T.UCHAR,
    reserved0: T.UCHAR,
    adapter_type: T.UCHAR,
    rev_minor: T.UCHAR,
    duration: T.WORD,
    frmr_recv: T.WORD,
    frmr_xmit: T.WORD,
    iframe_recv_error: T.WORD,
    xmit_aborts: T.WORD,
    xmit_success: T.DWORD,
    recv_success: T.DWORD,
    iframe_xmit_error: T.WORD,
    recv_buffer_unavail: T.WORD,
    t1_timeouts: T.WORD,
    ti_timeouts: T.WORD,
    reserved1: T.DWORD,
    free_ncbs: T.WORD,
    max_cfg_ncbs: T.WORD,
    max_ncbs: T.WORD,
    xmit_buf_unavail: T.WORD,
    max_dgram_size: T.WORD,
    pending_sess: T.WORD,
    max_cfg_sess: T.WORD,
    max_sess: T.WORD,
    max_sess_pkt_size: T.WORD,
    name_count: T.WORD
});};
T.PADAPTER_STATUS = function() {return Pointer(Struct('_ADAPTER_STATUS', {
    adapter_address: ArrayType(T.UCHAR, 6),
    rev_major: T.UCHAR,
    reserved0: T.UCHAR,
    adapter_type: T.UCHAR,
    rev_minor: T.UCHAR,
    duration: T.WORD,
    frmr_recv: T.WORD,
    frmr_xmit: T.WORD,
    iframe_recv_error: T.WORD,
    xmit_aborts: T.WORD,
    xmit_success: T.DWORD,
    recv_success: T.DWORD,
    iframe_xmit_error: T.WORD,
    recv_buffer_unavail: T.WORD,
    t1_timeouts: T.WORD,
    ti_timeouts: T.WORD,
    reserved1: T.DWORD,
    free_ncbs: T.WORD,
    max_cfg_ncbs: T.WORD,
    max_ncbs: T.WORD,
    xmit_buf_unavail: T.WORD,
    max_dgram_size: T.WORD,
    pending_sess: T.WORD,
    max_cfg_sess: T.WORD,
    max_sess: T.WORD,
    max_sess_pkt_size: T.WORD,
    name_count: T.WORD
}));};
T.NAME_BUFFER = function() {return Struct('_NAME_BUFFER', {
    name: ArrayType(T.UCHAR, 16),
    name_num: T.UCHAR,
    name_flags: T.UCHAR
});};
T.PNAME_BUFFER = function() {return Pointer(Struct('_NAME_BUFFER', {
    name: ArrayType(T.UCHAR, 16),
    name_num: T.UCHAR,
    name_flags: T.UCHAR
}));};
T.LANA_ENUM = function() {return Struct('_LANA_ENUM', {
    length: T.UCHAR,
    lana: ArrayType(T.UCHAR, NaN /* additive_expression {
     _0: constant {
      _0: '0xfe'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
});};
T.PLANA_ENUM = function() {return Pointer(Struct('_LANA_ENUM', {
    length: T.UCHAR,
    lana: ArrayType(T.UCHAR, NaN /* additive_expression {
     _0: constant {
      _0: '0xfe'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
}));};
T.FIND_NAME_HEADER = function() {return Struct('_FIND_NAME_HEADER', {
    node_count: T.WORD,
    reserved: T.UCHAR,
    unique_group: T.UCHAR
});};
T.PFIND_NAME_HEADER = function() {return Pointer(Struct('_FIND_NAME_HEADER', {
    node_count: T.WORD,
    reserved: T.UCHAR,
    unique_group: T.UCHAR
}));};
T.FIND_NAME_BUFFER = function() {return Struct('_FIND_NAME_BUFFER', {
    length: T.UCHAR,
    access_control: T.UCHAR,
    frame_control: T.UCHAR,
    destination_addr: ArrayType(T.UCHAR, 6),
    source_addr: ArrayType(T.UCHAR, 6),
    routing_info: ArrayType(T.UCHAR, 6)
});};
T.PFIND_NAME_BUFFER = function() {return Pointer(Struct('_FIND_NAME_BUFFER', {
    length: T.UCHAR,
    access_control: T.UCHAR,
    frame_control: T.UCHAR,
    destination_addr: ArrayType(T.UCHAR, 6),
    source_addr: ArrayType(T.UCHAR, 6),
    routing_info: ArrayType(T.UCHAR, 6)
}));};
T.SESSION_HEADER = function() {return Struct('_SESSION_HEADER', {
    sess_name: T.UCHAR,
    num_sess: T.UCHAR,
    rcv_dg_outstanding: T.UCHAR,
    rcv_any_outstanding: T.UCHAR
});};
T.PSESSION_HEADER = function() {return Pointer(Struct('_SESSION_HEADER', {
    sess_name: T.UCHAR,
    num_sess: T.UCHAR,
    rcv_dg_outstanding: T.UCHAR,
    rcv_any_outstanding: T.UCHAR
}));};
T.SESSION_BUFFER = function() {return Struct('_SESSION_BUFFER', {
    lsn: T.UCHAR,
    state: T.UCHAR,
    local_name: ArrayType(T.UCHAR, 16),
    remote_name: ArrayType(T.UCHAR, 16),
    rcvs_outstanding: T.UCHAR,
    sends_outstanding: T.UCHAR
});};
T.PSESSION_BUFFER = function() {return Pointer(Struct('_SESSION_BUFFER', {
    lsn: T.UCHAR,
    state: T.UCHAR,
    local_name: ArrayType(T.UCHAR, 16),
    remote_name: ArrayType(T.UCHAR, 16),
    rcvs_outstanding: T.UCHAR,
    sends_outstanding: T.UCHAR
}));};
T.RPC_STATUS = function() {return T.LONG;};
T.I_RPC_HANDLE = function() {return Pointer(null);};
T.UUID = function() {return T.GUID;};
T.RPC_CSTR = function() {return Pointer(T.u8);};
T.RPC_WSTR = function() {return Pointer(T.u16);};
T.RPC_AUTH_IDENTITY_HANDLE = function() {return Pointer(null);};
T.RPC_AUTHZ_HANDLE = function() {return Pointer(null);};
T.RPC_IF_HANDLE = function() {return Pointer(null);};
T.RPC_BINDING_HANDLE = function() {return T.I_RPC_HANDLE;};
T.handle_t = function() {return T.RPC_BINDING_HANDLE;};
T.RPC_BINDING_VECTOR = function() {return Struct('_RPC_BINDING_VECTOR', {
    Count: T.ULONG,
    BindingH: ArrayType(T.RPC_BINDING_HANDLE, 1)
});};
T.UUID_VECTOR = function() {return Struct('_UUID_VECTOR', {
    Count: T.ULONG,
    Uuid: ArrayType(Pointer(T.UUID), 1)
});};
T.RPC_IF_ID = function() {return Struct('_RPC_IF_ID', {
    Uuid: T.UUID,
    VersMajor: T.u16,
    VersMinor: T.u16
});};
T.RPC_IF_ID_VECTOR = function() {return Struct('', {
    Count: T.ULONG,
    IfId: ArrayType(Pointer(T.RPC_IF_ID), 1)
});};
T.RPC_STATS_VECTOR = function() {return Struct('', {
    Count: T.u32,
    Stats: ArrayType(T.ULONG, 1)
});};
T.RPC_EP_INQ_HANDLE = function() {return Pointer(T.I_RPC_HANDLE);};
T.RPC_IF_CALLBACK_FN = function() {return Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'InterfaceUuid'], [Pointer(null), 'Context']], [['stdcall']]);};
T.RPC_AUTH_KEY_RETRIEVAL_FN = function() {return Pointer(Fn(null, [[Pointer(null)], [T.RPC_WSTR], [T.ULONG], [Pointer(Pointer(null))], [Pointer(T.RPC_STATUS)]]), [['stdcall']]);};
T.RPC_POLICY = function() {return Struct('_RPC_POLICY', {
    Length: T.u32,
    EndpointFlags: T.ULONG,
    NICFlags: T.ULONG
});};
T.PRPC_POLICY = function() {return Pointer(Struct('_RPC_POLICY', {
    Length: T.u32,
    EndpointFlags: T.ULONG,
    NICFlags: T.ULONG
}));};
T.SEC_WINNT_AUTH_IDENTITY_W = function() {return Struct('_SEC_WINNT_AUTH_IDENTITY_W', {
    User: Pointer(T.u16),
    UserLength: T.ULONG,
    Domain: Pointer(T.u16),
    DomainLength: T.ULONG,
    Password: Pointer(T.u16),
    PasswordLength: T.ULONG,
    Flags: T.ULONG
});};
T.PSEC_WINNT_AUTH_IDENTITY_W = function() {return Pointer(Struct('_SEC_WINNT_AUTH_IDENTITY_W', {
    User: Pointer(T.u16),
    UserLength: T.ULONG,
    Domain: Pointer(T.u16),
    DomainLength: T.ULONG,
    Password: Pointer(T.u16),
    PasswordLength: T.ULONG,
    Flags: T.ULONG
}));};
T.SEC_WINNT_AUTH_IDENTITY_A = function() {return Struct('_SEC_WINNT_AUTH_IDENTITY_A', {
    User: Pointer(T.u8),
    UserLength: T.ULONG,
    Domain: Pointer(T.u8),
    DomainLength: T.ULONG,
    Password: Pointer(T.u8),
    PasswordLength: T.ULONG,
    Flags: T.ULONG
});};
T.PSEC_WINNT_AUTH_IDENTITY_A = function() {return Pointer(Struct('_SEC_WINNT_AUTH_IDENTITY_A', {
    User: Pointer(T.u8),
    UserLength: T.ULONG,
    Domain: Pointer(T.u8),
    DomainLength: T.ULONG,
    Password: Pointer(T.u8),
    PasswordLength: T.ULONG,
    Flags: T.ULONG
}));};
T.RPC_HTTP_TRANSPORT_CREDENTIALS_W = function() {return Struct('_RPC_HTTP_TRANSPORT_CREDENTIALS_W', {
    TransportCredentials: Pointer(T.SEC_WINNT_AUTH_IDENTITY_W),
    Flags: T.ULONG,
    AuthenticationTarget: T.ULONG,
    NumberOfAuthnSchemes: T.ULONG,
    AuthnSchemes: Pointer(T.ULONG),
    ServerCertificateSubject: Pointer(T.u16)
});};
T.PRPC_HTTP_TRANSPORT_CREDENTIALS_W = function() {return Pointer(Struct('_RPC_HTTP_TRANSPORT_CREDENTIALS_W', {
    TransportCredentials: Pointer(T.SEC_WINNT_AUTH_IDENTITY_W),
    Flags: T.ULONG,
    AuthenticationTarget: T.ULONG,
    NumberOfAuthnSchemes: T.ULONG,
    AuthnSchemes: Pointer(T.ULONG),
    ServerCertificateSubject: Pointer(T.u16)
}));};
T.RPC_HTTP_TRANSPORT_CREDENTIALS_A = function() {return Struct('_RPC_HTTP_TRANSPORT_CREDENTIALS_A', {
    TransportCredentials: Pointer(T.SEC_WINNT_AUTH_IDENTITY_A),
    Flags: T.ULONG,
    AuthenticationTarget: T.ULONG,
    NumberOfAuthnSchemes: T.ULONG,
    AuthnSchemes: Pointer(T.ULONG),
    ServerCertificateSubject: Pointer(T.u8)
});};
T.PRPC_HTTP_TRANSPORT_CREDENTIALS_A = function() {return Pointer(Struct('_RPC_HTTP_TRANSPORT_CREDENTIALS_A', {
    TransportCredentials: Pointer(T.SEC_WINNT_AUTH_IDENTITY_A),
    Flags: T.ULONG,
    AuthenticationTarget: T.ULONG,
    NumberOfAuthnSchemes: T.ULONG,
    AuthnSchemes: Pointer(T.ULONG),
    ServerCertificateSubject: Pointer(T.u8)
}));};
T.RPC_SECURITY_QOS = function() {return Struct('_RPC_SECURITY_QOS', {
    Version: T.ULONG,
    Capabilities: T.ULONG,
    IdentityTracking: T.ULONG,
    ImpersonationType: T.ULONG
});};
T.PRPC_SECURITY_QOS = function() {return Pointer(Struct('_RPC_SECURITY_QOS', {
    Version: T.ULONG,
    Capabilities: T.ULONG,
    IdentityTracking: T.ULONG,
    ImpersonationType: T.ULONG
}));};
T.RPC_SECURITY_QOS_V2_W = function() {return Struct('_RPC_SECURITY_QOS_V2_W', {
    Version: T.ULONG,
    Capabilities: T.ULONG,
    IdentityTracking: T.ULONG,
    ImpersonationType: T.ULONG,
    AdditionalSecurityInfoType: T.ULONG,
    u: Union('', {
        HttpCredentials: Pointer(T.RPC_HTTP_TRANSPORT_CREDENTIALS_W)
    })
});};
T.PRPC_SECURITY_QOS_V2_W = function() {return Pointer(Struct('_RPC_SECURITY_QOS_V2_W', {
    Version: T.ULONG,
    Capabilities: T.ULONG,
    IdentityTracking: T.ULONG,
    ImpersonationType: T.ULONG,
    AdditionalSecurityInfoType: T.ULONG,
    u: Union('', {
        HttpCredentials: Pointer(T.RPC_HTTP_TRANSPORT_CREDENTIALS_W)
    })
}));};
T.RPC_SECURITY_QOS_V2_A = function() {return Struct('_RPC_SECURITY_QOS_V2_A', {
    Version: T.ULONG,
    Capabilities: T.ULONG,
    IdentityTracking: T.ULONG,
    ImpersonationType: T.ULONG,
    AdditionalSecurityInfoType: T.ULONG,
    u: Union('', {
        HttpCredentials: Pointer(T.RPC_HTTP_TRANSPORT_CREDENTIALS_A)
    })
});};
T.PRPC_SECURITY_QOS_V2_A = function() {return Pointer(Struct('_RPC_SECURITY_QOS_V2_A', {
    Version: T.ULONG,
    Capabilities: T.ULONG,
    IdentityTracking: T.ULONG,
    ImpersonationType: T.ULONG,
    AdditionalSecurityInfoType: T.ULONG,
    u: Union('', {
        HttpCredentials: Pointer(T.RPC_HTTP_TRANSPORT_CREDENTIALS_A)
    })
}));};
T.RPC_MGMT_AUTHORIZATION_FN = function() {return Pointer(Fn(T.i32, [[T.RPC_BINDING_HANDLE], [T.ULONG], [Pointer(T.RPC_STATUS)]]), [['stdcall']]);};
T.RPC_VERSION = function() {return Struct('_RPC_VERSION', {
    MajorVersion: T.u16,
    MinorVersion: T.u16
});};
T.RPC_SYNTAX_IDENTIFIER = function() {return Struct('_RPC_SYNTAX_IDENTIFIER', {
    SyntaxGUID: T.GUID,
    SyntaxVersion: T.RPC_VERSION
});};
T.PRPC_SYNTAX_IDENTIFIER = function() {return Pointer(Struct('_RPC_SYNTAX_IDENTIFIER', {
    SyntaxGUID: T.GUID,
    SyntaxVersion: T.RPC_VERSION
}));};
T.RPC_MESSAGE = function() {return Struct('_RPC_MESSAGE', {
    Handle: T.RPC_BINDING_HANDLE,
    DataRepresentation: T.ULONG,
    Buffer: Pointer(null),
    BufferLength: T.u32,
    ProcNum: T.u32,
    TransferSyntax: T.PRPC_SYNTAX_IDENTIFIER,
    RpcInterfaceInformation: Pointer(null),
    ReservedForRuntime: Pointer(null),
    ManagerEpv: Pointer(null),
    ImportContext: Pointer(null),
    RpcFlags: T.ULONG
});};
T.PRPC_MESSAGE = function() {return Pointer(Struct('_RPC_MESSAGE', {
    Handle: T.RPC_BINDING_HANDLE,
    DataRepresentation: T.ULONG,
    Buffer: Pointer(null),
    BufferLength: T.u32,
    ProcNum: T.u32,
    TransferSyntax: T.PRPC_SYNTAX_IDENTIFIER,
    RpcInterfaceInformation: Pointer(null),
    ReservedForRuntime: Pointer(null),
    ManagerEpv: Pointer(null),
    ImportContext: Pointer(null),
    RpcFlags: T.ULONG
}));};
T.RPC_DISPATCH_FUNCTION = function() {return Pointer(Fn(null, [[T.PRPC_MESSAGE, 'Message']]), [['stdcall']]);};
T.RPC_FORWARD_FUNCTION = function() {return Pointer(Fn(T.RPC_STATUS, [[Pointer(T.UUID), 'InterfaceId'], [Pointer(T.RPC_VERSION), 'InterfaceVersion'], [Pointer(T.UUID), 'ObjectId'], [Pointer(T.u8), 'Rpcpro'], [Pointer(Pointer(null)), 'ppDestEndpoint']]), [['stdcall']]);};
T.RPC_DISPATCH_TABLE = function() {return Struct('', {
    DispatchTableCount: T.u32,
    DispatchTable: Pointer(T.RPC_DISPATCH_FUNCTION),
    Reserved: T.LONG_PTR
});};
T.PRPC_DISPATCH_TABLE = function() {return Pointer(Struct('', {
    DispatchTableCount: T.u32,
    DispatchTable: Pointer(T.RPC_DISPATCH_FUNCTION),
    Reserved: T.LONG_PTR
}));};
T.RPC_PROTSEQ_ENDPOINT = function() {return Struct('_RPC_PROTSEQ_ENDPOINT', {
    RpcProtocolSequence: Pointer(T.u8),
    Endpoint: Pointer(T.u8)
});};
T.PRPC_PROTSEQ_ENDPOINT = function() {return Pointer(Struct('_RPC_PROTSEQ_ENDPOINT', {
    RpcProtocolSequence: Pointer(T.u8),
    Endpoint: Pointer(T.u8)
}));};
T.RPC_SERVER_INTERFACE = function() {return Struct('_RPC_SERVER_INTERFACE', {
    Length: T.u32,
    InterfaceId: T.RPC_SYNTAX_IDENTIFIER,
    TransferSyntax: T.RPC_SYNTAX_IDENTIFIER,
    DispatchTable: T.PRPC_DISPATCH_TABLE,
    RpcProtseqEndpointCount: T.u32,
    RpcProtseqEndpoint: T.PRPC_PROTSEQ_ENDPOINT,
    DefaultManagerEpv: Pointer(null),
    InterpreterInfo: Pointer(null),
    Flags: T.u32
});};
T.PRPC_SERVER_INTERFACE = function() {return Pointer(Struct('_RPC_SERVER_INTERFACE', {
    Length: T.u32,
    InterfaceId: T.RPC_SYNTAX_IDENTIFIER,
    TransferSyntax: T.RPC_SYNTAX_IDENTIFIER,
    DispatchTable: T.PRPC_DISPATCH_TABLE,
    RpcProtseqEndpointCount: T.u32,
    RpcProtseqEndpoint: T.PRPC_PROTSEQ_ENDPOINT,
    DefaultManagerEpv: Pointer(null),
    InterpreterInfo: Pointer(null),
    Flags: T.u32
}));};
T.RPC_CLIENT_INTERFACE = function() {return Struct('_RPC_CLIENT_INTERFACE', {
    Length: T.u32,
    InterfaceId: T.RPC_SYNTAX_IDENTIFIER,
    TransferSyntax: T.RPC_SYNTAX_IDENTIFIER,
    DispatchTable: T.PRPC_DISPATCH_TABLE,
    RpcProtseqEndpointCount: T.u32,
    RpcProtseqEndpoint: T.PRPC_PROTSEQ_ENDPOINT,
    Reserved: T.ULONG_PTR,
    InterpreterInfo: Pointer(null),
    Flags: T.u32
});};
T.PRPC_CLIENT_INTERFACE = function() {return Pointer(Struct('_RPC_CLIENT_INTERFACE', {
    Length: T.u32,
    InterfaceId: T.RPC_SYNTAX_IDENTIFIER,
    TransferSyntax: T.RPC_SYNTAX_IDENTIFIER,
    DispatchTable: T.PRPC_DISPATCH_TABLE,
    RpcProtseqEndpointCount: T.u32,
    RpcProtseqEndpoint: T.PRPC_PROTSEQ_ENDPOINT,
    Reserved: T.ULONG_PTR,
    InterpreterInfo: Pointer(null),
    Flags: T.u32
}));};
T.RPC_ERROR_ENUM_HANDLE = function() {return Struct('tagRPC_ERROR_ENUM_HANDLE', {
    Signature: T.ULONG,
    CurrentPos: Pointer(null),
    Head: Pointer(null)
});};
T.ExtendedErrorParamTypes = function() {return Enum('eeptBinary', {
    eeptAnsiString: 1,
    eeptUnicodeString: 2,
    eeptLongVal: 3,
    eeptShortVal: 4,
    eeptPointerVal: 5,
    eeptNone: 6,
    eeptBinary: 7
});};
T.BinaryParam = function() {return Struct('tagBinaryParam', {
    Buffer: Pointer(null),
    Size: T.i16
});};
T.RPC_EE_INFO_PARAM = function() {return Struct('tagRPC_EE_INFO_PARAM', {
    ParameterType: T.ExtendedErrorParamTypes,
    u: Union('', {
        AnsiString: T.LPSTR,
        UnicodeString: T.LPWSTR,
        LVal: T.LONG,
        SVal: T.i16,
        PVal: T.ULONGLONG,
        BVal: T.BinaryParam
    })
});};
T.RPC_EXTENDED_ERROR_INFO = function() {return Struct('tagRPC_EXTENDED_ERROR_INFO', {
    Version: T.ULONG,
    ComputerName: T.LPWSTR,
    ProcessID: T.ULONG,
    u: Union('', {
        SystemTime: T.SYSTEMTIME,
        FileTime: T.FILETIME
    }),
    GeneratingComponent: T.ULONG,
    Status: T.ULONG,
    DetectionLocation: T.USHORT,
    Flags: T.USHORT,
    NumberOfParameters: T.i32,
    Parameters: ArrayType(T.RPC_EE_INFO_PARAM, 4)
});};
T.RPC_NOTIFICATION_TYPES = function() {return Enum('RpcNotificationTypeCallback', {
    RpcNotificationTypeNone: 0,
    RpcNotificationTypeEvent: 1,
    RpcNotificationTypeApc: 2,
    RpcNotificationTypeIoc: 3,
    RpcNotificationTypeHwnd: 4,
    RpcNotificationTypeCallback: 5
});};
T.RPC_ASYNC_EVENT = function() {return Enum('RpcClientCancel', {
    RpcCallComplete: 0,
    RpcSendComplete: 1,
    RpcReceiveComplete: 2,
    RpcClientDisconnect: 3,
    RpcClientCancel: 4
});};
T.RPCNOTIFICATION_ROUTINE = function() {return Fn(null, [[Pointer(Struct('_RPC_ASYNC_STATE', null))], [Pointer(null)], [T.RPC_ASYNC_EVENT]], [['stdcall']]);};
T.PFN_RPCNOTIFICATION_ROUTINE = function() {return Pointer(T.RPCNOTIFICATION_ROUTINE);};
T.RPC_ASYNC_NOTIFICATION_INFO = function() {return Union('_RPC_ASYNC_NOTIFICATION_INFO', {
    APC: Struct('', {
        NotificationRoutine: T.PFN_RPCNOTIFICATION_ROUTINE,
        hThread: T.HANDLE
    }),
    IOC: Struct('', {
        hIOPort: T.HANDLE,
        dwNumberOfBytesTransferred: T.DWORD,
        dwCompletionKey: T.DWORD_PTR,
        lpOverlapped: T.LPOVERLAPPED
    }),
    HWND: Struct('', {
        hWnd: T.HWND,
        Msg: T.UINT
    }),
    hEvent: T.HANDLE,
    NotificationRoutine: T.PFN_RPCNOTIFICATION_ROUTINE
});};
T.PRPC_ASYNC_NOTIFICATION_INFO = function() {return Pointer(Union('_RPC_ASYNC_NOTIFICATION_INFO', {
    APC: Struct('', {
        NotificationRoutine: T.PFN_RPCNOTIFICATION_ROUTINE,
        hThread: T.HANDLE
    }),
    IOC: Struct('', {
        hIOPort: T.HANDLE,
        dwNumberOfBytesTransferred: T.DWORD,
        dwCompletionKey: T.DWORD_PTR,
        lpOverlapped: T.LPOVERLAPPED
    }),
    HWND: Struct('', {
        hWnd: T.HWND,
        Msg: T.UINT
    }),
    hEvent: T.HANDLE,
    NotificationRoutine: T.PFN_RPCNOTIFICATION_ROUTINE
}));};
T.RPC_ASYNC_STATE = function() {return Struct('_RPC_ASYNC_STATE', {
    Size: T.u32,
    Signature: T.ULONG,
    Lock: T.LONG,
    Flags: T.ULONG,
    StubInfo: Pointer(null),
    UserInfo: Pointer(null),
    RuntimeInfo: Pointer(null),
    Event: T.RPC_ASYNC_EVENT,
    NotificationType: T.RPC_NOTIFICATION_TYPES,
    u: T.RPC_ASYNC_NOTIFICATION_INFO,
    Reserved: ArrayType(T.LONG_PTR, 4)
});};
T.PRPC_ASYNC_STATE = function() {return Pointer(Struct('_RPC_ASYNC_STATE', {
    Size: T.u32,
    Signature: T.ULONG,
    Lock: T.LONG,
    Flags: T.ULONG,
    StubInfo: Pointer(null),
    UserInfo: Pointer(null),
    RuntimeInfo: Pointer(null),
    Event: T.RPC_ASYNC_EVENT,
    NotificationType: T.RPC_NOTIFICATION_TYPES,
    u: T.RPC_ASYNC_NOTIFICATION_INFO,
    Reserved: ArrayType(T.LONG_PTR, 4)
}));};
T.HDROP = function() {return Pointer(Struct('HDROP__', {
    unused: T.i32
}));};
T.DRAGINFOA = function() {return Struct('_DRAGINFOA', {
    uSize: T.UINT,
    pt: T.POINT,
    fNC: T.BOOL,
    lpFileList: T.LPSTR,
    grfKeyState: T.DWORD
});};
T.LPDRAGINFOA = function() {return Pointer(Struct('_DRAGINFOA', {
    uSize: T.UINT,
    pt: T.POINT,
    fNC: T.BOOL,
    lpFileList: T.LPSTR,
    grfKeyState: T.DWORD
}));};
T.DRAGINFOW = function() {return Struct('_DRAGINFOW', {
    uSize: T.UINT,
    pt: T.POINT,
    fNC: T.BOOL,
    lpFileList: T.LPWSTR,
    grfKeyState: T.DWORD
});};
T.LPDRAGINFOW = function() {return Pointer(Struct('_DRAGINFOW', {
    uSize: T.UINT,
    pt: T.POINT,
    fNC: T.BOOL,
    lpFileList: T.LPWSTR,
    grfKeyState: T.DWORD
}));};
T.DRAGINFO = function() {return T.DRAGINFOA;};
T.LPDRAGINFO = function() {return T.LPDRAGINFOA;};
T.APPBARDATA = function() {return Struct('_AppBarData', {
    cbSize: T.DWORD,
    hWnd: T.HWND,
    uCallbackMessage: T.UINT,
    uEdge: T.UINT,
    rc: T.RECT,
    lParam: T.LPARAM
});};
T.PAPPBARDATA = function() {return Pointer(Struct('_AppBarData', {
    cbSize: T.DWORD,
    hWnd: T.HWND,
    uCallbackMessage: T.UINT,
    uEdge: T.UINT,
    rc: T.RECT,
    lParam: T.LPARAM
}));};
T.SHFILEINFOA = function() {return Struct('tagSHFILEINFOA', {
    hIcon: T.HICON,
    iIcon: T.i32,
    dwAttributes: T.DWORD,
    szDisplayName: ArrayType(T.CHAR, 260),
    szTypeName: ArrayType(T.CHAR, 80)
});};
T.SHFILEINFOW = function() {return Struct('tagSHFILEINFOW', {
    hIcon: T.HICON,
    iIcon: T.i32,
    dwAttributes: T.DWORD,
    szDisplayName: ArrayType(T.WCHAR, 260),
    szTypeName: ArrayType(T.WCHAR, 80)
});};
T.SHFILEINFO = function() {return T.SHFILEINFOA;};
T.FILEOP_FLAGS = function() {return T.WORD;};
T.PRINTEROP_FLAGS = function() {return T.WORD;};
T.SHFILEOPSTRUCTA = function() {return Struct('_SHFILEOPSTRUCTA', {
    hwnd: T.HWND,
    wFunc: T.UINT,
    pFrom: T.LPCSTR,
    pTo: T.LPCSTR,
    fFlags: T.FILEOP_FLAGS,
    fAnyOperationsAborted: T.BOOL,
    hNameMappings: T.LPVOID,
    lpszProgressTitle: T.LPCSTR
});};
T.LPSHFILEOPSTRUCTA = function() {return Pointer(Struct('_SHFILEOPSTRUCTA', {
    hwnd: T.HWND,
    wFunc: T.UINT,
    pFrom: T.LPCSTR,
    pTo: T.LPCSTR,
    fFlags: T.FILEOP_FLAGS,
    fAnyOperationsAborted: T.BOOL,
    hNameMappings: T.LPVOID,
    lpszProgressTitle: T.LPCSTR
}));};
T.SHFILEOPSTRUCTW = function() {return Struct('_SHFILEOPSTRUCTW', {
    hwnd: T.HWND,
    wFunc: T.UINT,
    pFrom: T.LPCWSTR,
    pTo: T.LPCWSTR,
    fFlags: T.FILEOP_FLAGS,
    fAnyOperationsAborted: T.BOOL,
    hNameMappings: T.LPVOID,
    lpszProgressTitle: T.LPCWSTR
});};
T.LPSHFILEOPSTRUCTW = function() {return Pointer(Struct('_SHFILEOPSTRUCTW', {
    hwnd: T.HWND,
    wFunc: T.UINT,
    pFrom: T.LPCWSTR,
    pTo: T.LPCWSTR,
    fFlags: T.FILEOP_FLAGS,
    fAnyOperationsAborted: T.BOOL,
    hNameMappings: T.LPVOID,
    lpszProgressTitle: T.LPCWSTR
}));};
T.SHNAMEMAPPINGA = function() {return Struct('_SHNAMEMAPPINGA', {
    pszOldPath: T.LPSTR,
    pszNewPath: T.LPSTR,
    cchOldPath: T.i32,
    cchNewPath: T.i32
});};
T.LPSHNAMEMAPPINGA = function() {return Pointer(Struct('_SHNAMEMAPPINGA', {
    pszOldPath: T.LPSTR,
    pszNewPath: T.LPSTR,
    cchOldPath: T.i32,
    cchNewPath: T.i32
}));};
T.SHNAMEMAPPINGW = function() {return Struct('_SHNAMEMAPPINGW', {
    pszOldPath: T.LPWSTR,
    pszNewPath: T.LPWSTR,
    cchOldPath: T.i32,
    cchNewPath: T.i32
});};
T.LPSHNAMEMAPPINGW = function() {return Pointer(Struct('_SHNAMEMAPPINGW', {
    pszOldPath: T.LPWSTR,
    pszNewPath: T.LPWSTR,
    cchOldPath: T.i32,
    cchNewPath: T.i32
}));};
T.SHNAMEMAPPING = function() {return T.SHNAMEMAPPINGA;};
T.LPSHNAMEMAPPING = function() {return T.LPSHNAMEMAPPINGA;};
T.SHELLEXECUTEINFOA = function() {return Struct('_SHELLEXECUTEINFOA', {
    cbSize: T.DWORD,
    fMask: T.ULONG,
    hwnd: T.HWND,
    lpVerb: T.LPCSTR,
    lpFile: T.LPCSTR,
    lpParameters: T.LPCSTR,
    lpDirectory: T.LPCSTR,
    nShow: T.INT,
    hInstApp: T.HINSTANCE,
    lpIDList: T.LPVOID,
    lpClass: T.LPCSTR,
    hkeyClass: T.HKEY,
    dwHotKey: T.DWORD,
    __unnamed0: Union('', {
        hIcon: T.HANDLE,
        hMonitor: T.HANDLE
    }),
    hProcess: T.HANDLE
});};
T.LPSHELLEXECUTEINFOA = function() {return Pointer(Struct('_SHELLEXECUTEINFOA', {
    cbSize: T.DWORD,
    fMask: T.ULONG,
    hwnd: T.HWND,
    lpVerb: T.LPCSTR,
    lpFile: T.LPCSTR,
    lpParameters: T.LPCSTR,
    lpDirectory: T.LPCSTR,
    nShow: T.INT,
    hInstApp: T.HINSTANCE,
    lpIDList: T.LPVOID,
    lpClass: T.LPCSTR,
    hkeyClass: T.HKEY,
    dwHotKey: T.DWORD,
    __unnamed0: Union('', {
        hIcon: T.HANDLE,
        hMonitor: T.HANDLE
    }),
    hProcess: T.HANDLE
}));};
T.SHELLEXECUTEINFOW = function() {return Struct('_SHELLEXECUTEINFOW', {
    cbSize: T.DWORD,
    fMask: T.ULONG,
    hwnd: T.HWND,
    lpVerb: T.LPCWSTR,
    lpFile: T.LPCWSTR,
    lpParameters: T.LPCWSTR,
    lpDirectory: T.LPCWSTR,
    nShow: T.INT,
    hInstApp: T.HINSTANCE,
    lpIDList: T.LPVOID,
    lpClass: T.LPCWSTR,
    hkeyClass: T.HKEY,
    dwHotKey: T.DWORD,
    __unnamed0: Union('', {
        hIcon: T.HANDLE,
        hMonitor: T.HANDLE
    }),
    hProcess: T.HANDLE
});};
T.LPSHELLEXECUTEINFOW = function() {return Pointer(Struct('_SHELLEXECUTEINFOW', {
    cbSize: T.DWORD,
    fMask: T.ULONG,
    hwnd: T.HWND,
    lpVerb: T.LPCWSTR,
    lpFile: T.LPCWSTR,
    lpParameters: T.LPCWSTR,
    lpDirectory: T.LPCWSTR,
    nShow: T.INT,
    hInstApp: T.HINSTANCE,
    lpIDList: T.LPVOID,
    lpClass: T.LPCWSTR,
    hkeyClass: T.HKEY,
    dwHotKey: T.DWORD,
    __unnamed0: Union('', {
        hIcon: T.HANDLE,
        hMonitor: T.HANDLE
    }),
    hProcess: T.HANDLE
}));};
T.NOTIFYICONDATAA = function() {return Struct('_NOTIFYICONDATAA', {
    cbSize: T.DWORD,
    hWnd: T.HWND,
    uID: T.UINT,
    uFlags: T.UINT,
    uCallbackMessage: T.UINT,
    hIcon: T.HICON,
    szTip: ArrayType(T.CHAR, 128),
    dwState: T.DWORD,
    dwStateMask: T.DWORD,
    szInfo: ArrayType(T.CHAR, 256),
    __unnamed0: Union('', {
        uTimeout: T.UINT,
        uVersion: T.UINT
    }),
    szInfoTitle: ArrayType(T.CHAR, 64),
    dwInfoFlags: T.DWORD,
    guidItem: T.GUID,
    hBalloonIcon: T.HICON
});};
T.PNOTIFYICONDATAA = function() {return Pointer(Struct('_NOTIFYICONDATAA', {
    cbSize: T.DWORD,
    hWnd: T.HWND,
    uID: T.UINT,
    uFlags: T.UINT,
    uCallbackMessage: T.UINT,
    hIcon: T.HICON,
    szTip: ArrayType(T.CHAR, 128),
    dwState: T.DWORD,
    dwStateMask: T.DWORD,
    szInfo: ArrayType(T.CHAR, 256),
    __unnamed0: Union('', {
        uTimeout: T.UINT,
        uVersion: T.UINT
    }),
    szInfoTitle: ArrayType(T.CHAR, 64),
    dwInfoFlags: T.DWORD,
    guidItem: T.GUID,
    hBalloonIcon: T.HICON
}));};
T.NOTIFYICONDATAW = function() {return Struct('_NOTIFYICONDATAW', {
    cbSize: T.DWORD,
    hWnd: T.HWND,
    uID: T.UINT,
    uFlags: T.UINT,
    uCallbackMessage: T.UINT,
    hIcon: T.HICON,
    szTip: ArrayType(T.WCHAR, 128),
    dwState: T.DWORD,
    dwStateMask: T.DWORD,
    szInfo: ArrayType(T.WCHAR, 256),
    __unnamed0: Union('', {
        uTimeout: T.UINT,
        uVersion: T.UINT
    }),
    szInfoTitle: ArrayType(T.WCHAR, 64),
    dwInfoFlags: T.DWORD,
    guidItem: T.GUID,
    hBalloonIcon: T.HICON
});};
T.PNOTIFYICONDATAW = function() {return Pointer(Struct('_NOTIFYICONDATAW', {
    cbSize: T.DWORD,
    hWnd: T.HWND,
    uID: T.UINT,
    uFlags: T.UINT,
    uCallbackMessage: T.UINT,
    hIcon: T.HICON,
    szTip: ArrayType(T.WCHAR, 128),
    dwState: T.DWORD,
    dwStateMask: T.DWORD,
    szInfo: ArrayType(T.WCHAR, 256),
    __unnamed0: Union('', {
        uTimeout: T.UINT,
        uVersion: T.UINT
    }),
    szInfoTitle: ArrayType(T.WCHAR, 64),
    dwInfoFlags: T.DWORD,
    guidItem: T.GUID,
    hBalloonIcon: T.HICON
}));};
T.NOTIFYICONDATA = function() {return T.NOTIFYICONDATAA;};
T.PNOTIFYICONDATA = function() {return T.PNOTIFYICONDATAA;};
T.SHQUERYRBINFO = function() {return Struct('_SHQUERYRBINFO', {
    cbSize: T.DWORD,
    i64Size: T.DWORDLONG,
    i64NumItems: T.DWORDLONG
});};
T.LPSHQUERYRBINFO = function() {return Pointer(Struct('_SHQUERYRBINFO', {
    cbSize: T.DWORD,
    i64Size: T.DWORDLONG,
    i64NumItems: T.DWORDLONG
}));};
T._ino_t = function() {return T.u16;};
T.ino_t = function() {return T.u16;};
T._dev_t = function() {return T.u32;};
T.dev_t = function() {return T.u32;};
T._pid_t = function() {return T.i32;};
T.pid_t = function() {return T._pid_t;};
T._mode_t = function() {return T.u16;};
T.mode_t = function() {return T._mode_t;};
T._off_t = function() {return T.i32;};
T.off32_t = function() {return T.i32;};
T._off64_t = function() {return T.i64;};
T.off64_t = function() {return T.i64;};
T.off_t = function() {return T.off32_t;};
T.useconds_t = function() {return T.u32;};
T._sigset_t = function() {return T.u32;};
T.clock_t = function() {return T.i32;};
T._onexit_t = function() {return Pointer(Fn(T.i32, [[null]]), [['cdecl']]);};
T.div_t = function() {return Struct('_div_t', {
    quot: T.i32,
    rem: T.i32
});};
T.ldiv_t = function() {return Struct('_ldiv_t', {
    quot: T.i32,
    rem: T.i32
});};
T._LDOUBLE = function() {return Struct('', {
    ld: ArrayType(T.u8, 10)
});};
T._CRT_DOUBLE = function() {return Struct('', {
    x: T.f64
});};
T._CRT_FLOAT = function() {return Struct('', {
    f: T.f32
});};
T._LONGDOUBLE = function() {return Struct('', {
    x: T.f128
});};
T._LDBL12 = function() {return Struct('', {
    ld12: ArrayType(T.u8, 12)
});};
T._purecall_handler = function() {return Pointer(Fn(null, [[null]]), [['cdecl']]);};
T._invalid_parameter_handler = function() {return Pointer(Fn(null, [[Pointer(T.wchar_t)], [Pointer(T.wchar_t)], [Pointer(T.wchar_t)], [T.u32], [T.uintptr_t]]), [['cdecl']]);};
T.lldiv_t = function() {return Struct('', {
    quot: T.i64,
    rem: T.i64
});};
T._HEAPINFO = function() {return Struct('_heapinfo', {
    _pentry: Pointer(T.i32),
    _size: T.size_t,
    _useflag: T.i32
});};
T.u_char = function() {return T.u8;};
T.u_short = function() {return T.u16;};
T.u_int = function() {return T.u32;};
T.u_long = function() {return T.ULONG;};
T.PROTOENT = function() {return Struct('protoent', {
    p_name: Pointer(T.char),
    p_aliases: Pointer(Pointer(T.char)),
    p_proto: T.i16
});};
T.PPROTOENT = function() {return Pointer(Struct('protoent', {
    p_name: Pointer(T.char),
    p_aliases: Pointer(Pointer(T.char)),
    p_proto: T.i16
}));};
T.LPPROTOENT = function() {return Pointer(Struct('protoent', {
    p_name: Pointer(T.char),
    p_aliases: Pointer(Pointer(T.char)),
    p_proto: T.i16
}));};
T.SERVENT = function() {return Struct('servent', {
    s_name: Pointer(T.char),
    s_aliases: Pointer(Pointer(T.char)),
    s_port: T.i16,
    s_proto: Pointer(T.char)
});};
T.PSERVENT = function() {return Pointer(Struct('servent', {
    s_name: Pointer(T.char),
    s_aliases: Pointer(Pointer(T.char)),
    s_port: T.i16,
    s_proto: Pointer(T.char)
}));};
T.LPSERVENT = function() {return Pointer(Struct('servent', {
    s_name: Pointer(T.char),
    s_aliases: Pointer(Pointer(T.char)),
    s_port: T.i16,
    s_proto: Pointer(T.char)
}));};
T.HOSTENT = function() {return Struct('hostent', {
    h_name: Pointer(T.char),
    h_aliases: Pointer(Pointer(T.char)),
    h_addrtype: T.i16,
    h_length: T.i16,
    h_addr_list: Pointer(Pointer(T.char))
});};
T.PHOSTENT = function() {return Pointer(Struct('hostent', {
    h_name: Pointer(T.char),
    h_aliases: Pointer(Pointer(T.char)),
    h_addrtype: T.i16,
    h_length: T.i16,
    h_addr_list: Pointer(Pointer(T.char))
}));};
T.LPHOSTENT = function() {return Pointer(Struct('hostent', {
    h_name: Pointer(T.char),
    h_aliases: Pointer(Pointer(T.char)),
    h_addrtype: T.i16,
    h_length: T.i16,
    h_addr_list: Pointer(Pointer(T.char))
}));};
T.SOCKET = function() {return T.UINT_PTR;};
T.SOCKADDR = function() {return Struct('sockaddr', {
    sa_family: T.u_short,
    sa_data: ArrayType(T.char, 14)
});};
T.PSOCKADDR = function() {return Pointer(Struct('sockaddr', {
    sa_family: T.u_short,
    sa_data: ArrayType(T.char, 14)
}));};
T.LPSOCKADDR = function() {return Pointer(Struct('sockaddr', {
    sa_family: T.u_short,
    sa_data: ArrayType(T.char, 14)
}));};
T.LINGER = function() {return Struct('linger', {
    l_onoff: T.u_short,
    l_linger: T.u_short
});};
T.PLINGER = function() {return Pointer(Struct('linger', {
    l_onoff: T.u_short,
    l_linger: T.u_short
}));};
T.LPLINGER = function() {return Pointer(Struct('linger', {
    l_onoff: T.u_short,
    l_linger: T.u_short
}));};
T.fd_set = function() {return Struct('fd_set', {
    fd_count: T.u_int,
    fd_array: ArrayType(T.SOCKET, 64)
});};
T.FD_SET = function() {return Struct('fd_set', {
    fd_count: T.u_int,
    fd_array: ArrayType(T.SOCKET, 64)
});};
T.PFD_SET = function() {return Pointer(Struct('fd_set', {
    fd_count: T.u_int,
    fd_array: ArrayType(T.SOCKET, 64)
}));};
T.LPFD_SET = function() {return Pointer(Struct('fd_set', {
    fd_count: T.u_int,
    fd_array: ArrayType(T.SOCKET, 64)
}));};
T.TIMEVAL = function() {return Struct('timeval', {
    tv_sec: T.LONG,
    tv_usec: T.LONG
});};
T.PTIMEVAL = function() {return Pointer(Struct('timeval', {
    tv_sec: T.LONG,
    tv_usec: T.LONG
}));};
T.LPTIMEVAL = function() {return Pointer(Struct('timeval', {
    tv_sec: T.LONG,
    tv_usec: T.LONG
}));};
T.IN_ADDR = function() {return Struct('in_addr', {
    S_un: Union('', {
        S_un_b: Struct('', {
            s_b1: T.u_char,
            s_b2: T.u_char,
            s_b3: T.u_char,
            s_b4: T.u_char
        }),
        S_un_w: Struct('', {
            s_w1: T.u_short,
            s_w2: T.u_short
        }),
        S_addr: T.ULONG
    })
});};
T.PIN_ADDR = function() {return Pointer(Struct('in_addr', {
    S_un: Union('', {
        S_un_b: Struct('', {
            s_b1: T.u_char,
            s_b2: T.u_char,
            s_b3: T.u_char,
            s_b4: T.u_char
        }),
        S_un_w: Struct('', {
            s_w1: T.u_short,
            s_w2: T.u_short
        }),
        S_addr: T.ULONG
    })
}));};
T.LPIN_ADDR = function() {return Pointer(Struct('in_addr', {
    S_un: Union('', {
        S_un_b: Struct('', {
            s_b1: T.u_char,
            s_b2: T.u_char,
            s_b3: T.u_char,
            s_b4: T.u_char
        }),
        S_un_w: Struct('', {
            s_w1: T.u_short,
            s_w2: T.u_short
        }),
        S_addr: T.ULONG
    })
}));};
T.SOCKADDR_IN = function() {return Struct('sockaddr_in', {
    sin_family: T.i16,
    sin_port: T.u_short,
    sin_addr: Struct('in_addr', null),
    sin_zero: ArrayType(T.char, 8)
});};
T.PSOCKADDR_IN = function() {return Pointer(Struct('sockaddr_in', {
    sin_family: T.i16,
    sin_port: T.u_short,
    sin_addr: Struct('in_addr', null),
    sin_zero: ArrayType(T.char, 8)
}));};
T.LPSOCKADDR_IN = function() {return Pointer(Struct('sockaddr_in', {
    sin_family: T.i16,
    sin_port: T.u_short,
    sin_addr: Struct('in_addr', null),
    sin_zero: ArrayType(T.char, 8)
}));};
T.WSADATA = function() {return Struct('WSAData', {
    wVersion: T.WORD,
    wHighVersion: T.WORD,
    szDescription: ArrayType(T.char, NaN /* additive_expression {
     _0: constant {
      _0: '256'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */),
    szSystemStatus: ArrayType(T.char, NaN /* additive_expression {
     _0: constant {
      _0: '128'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */),
    iMaxSockets: T.WORD,
    iMaxUdpDg: T.WORD,
    lpVendorInfo: Pointer(T.char)
});};
T.LPWSADATA = function() {return Pointer(Struct('WSAData', {
    wVersion: T.WORD,
    wHighVersion: T.WORD,
    szDescription: ArrayType(T.char, NaN /* additive_expression {
     _0: constant {
      _0: '256'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */),
    szSystemStatus: ArrayType(T.char, NaN /* additive_expression {
     _0: constant {
      _0: '128'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */),
    iMaxSockets: T.WORD,
    iMaxUdpDg: T.WORD,
    lpVendorInfo: Pointer(T.char)
}));};
T.SOCKET_ADDRESS = function() {return Struct('_SOCKET_ADDRESS', {
    lpSockaddr: T.LPSOCKADDR,
    iSockaddrLength: T.INT
});};
T.PSOCKET_ADDRESS = function() {return Pointer(Struct('_SOCKET_ADDRESS', {
    lpSockaddr: T.LPSOCKADDR,
    iSockaddrLength: T.INT
}));};
T.LPSOCKET_ADDRESS = function() {return Pointer(Struct('_SOCKET_ADDRESS', {
    lpSockaddr: T.LPSOCKADDR,
    iSockaddrLength: T.INT
}));};
T.CSADDR_INFO = function() {return Struct('_CSADDR_INFO', {
    LocalAddr: T.SOCKET_ADDRESS,
    RemoteAddr: T.SOCKET_ADDRESS,
    iSocketType: T.INT,
    iProtocol: T.INT
});};
T.PCSADDR_INFO = function() {return Pointer(Struct('_CSADDR_INFO', {
    LocalAddr: T.SOCKET_ADDRESS,
    RemoteAddr: T.SOCKET_ADDRESS,
    iSocketType: T.INT,
    iProtocol: T.INT
}));};
T.LPCSADDR_INFO = function() {return Pointer(Struct('_CSADDR_INFO', {
    LocalAddr: T.SOCKET_ADDRESS,
    RemoteAddr: T.SOCKET_ADDRESS,
    iSocketType: T.INT,
    iProtocol: T.INT
}));};
T.SOCKADDR_STORAGE = function() {return Struct('sockaddr_storage', {
    ss_family: T.i16,
    __ss_pad1: ArrayType(T.char, NaN /* primary_expression {
     _0: {
      _0: '(',
      _1: '',
      _2: additive_expression {
       _0: primary_expression {
        _0: {
         _0: '(',
         _1: '',
         _2: unary_expression {
          _0: {
           _0: 'sizeof',
           _1: '',
           _2: '(',
           _3: '',
           _4: type_name {
            _0: specifier_qualifier_list {
             type: 'T.i64'
            }
           },
           _5: '',
           _6: ')'
          }
         },
         _3: '',
         _4: ')'
        }
       },
       _1: [{
        _0: ' ',
        _1: {
         _0: '-',
         _1: ' ',
         _2: unary_expression {
          _0: {
           _0: 'sizeof',
           _1: '',
           _2: '(',
           _3: '',
           _4: type_name {
            _0: specifier_qualifier_list {
             type: 'T.i16'
            }
           },
           _5: '',
           _6: ')'
          }
         }
        }
       }]
      },
      _3: '',
      _4: ')'
     }
    } */),
    __ss_align: T.i64,
    __ss_pad2: ArrayType(T.char, NaN /* primary_expression {
     _0: {
      _0: '(',
      _1: '',
      _2: additive_expression {
       _0: constant {
        _0: '128'
       },
       _1: [{
        _0: ' ',
        _1: {
         _0: '-',
         _1: ' ',
         _2: multiplicative_expression {
          _0: constant {
           _0: '2'
          },
          _1: [{
           _0: ' ',
           _1: {
            _0: '*',
            _1: ' ',
            _2: primary_expression {
             _0: {
              _0: '(',
              _1: '',
              _2: unary_expression {
               _0: {
                _0: 'sizeof',
                _1: '',
                _2: '(',
                _3: '',
                _4: type_name {
                 _0: specifier_qualifier_list {
                  type: 'T.i64'
                 }
                },
                _5: '',
                _6: ')'
               }
              },
              _3: '',
              _4: ')'
             }
            }
           }
          }]
         }
        }
       }]
      },
      _3: '',
      _4: ')'
     }
    } */)
});};
T.PSOCKADDR_STORAGE = function() {return Pointer(Struct('sockaddr_storage', {
    ss_family: T.i16,
    __ss_pad1: ArrayType(T.char, NaN /* primary_expression {
     _0: {
      _0: '(',
      _1: '',
      _2: additive_expression {
       _0: primary_expression {
        _0: {
         _0: '(',
         _1: '',
         _2: unary_expression {
          _0: {
           _0: 'sizeof',
           _1: '',
           _2: '(',
           _3: '',
           _4: type_name {
            _0: specifier_qualifier_list {
             type: 'T.i64'
            }
           },
           _5: '',
           _6: ')'
          }
         },
         _3: '',
         _4: ')'
        }
       },
       _1: [{
        _0: ' ',
        _1: {
         _0: '-',
         _1: ' ',
         _2: unary_expression {
          _0: {
           _0: 'sizeof',
           _1: '',
           _2: '(',
           _3: '',
           _4: type_name {
            _0: specifier_qualifier_list {
             type: 'T.i16'
            }
           },
           _5: '',
           _6: ')'
          }
         }
        }
       }]
      },
      _3: '',
      _4: ')'
     }
    } */),
    __ss_align: T.i64,
    __ss_pad2: ArrayType(T.char, NaN /* primary_expression {
     _0: {
      _0: '(',
      _1: '',
      _2: additive_expression {
       _0: constant {
        _0: '128'
       },
       _1: [{
        _0: ' ',
        _1: {
         _0: '-',
         _1: ' ',
         _2: multiplicative_expression {
          _0: constant {
           _0: '2'
          },
          _1: [{
           _0: ' ',
           _1: {
            _0: '*',
            _1: ' ',
            _2: primary_expression {
             _0: {
              _0: '(',
              _1: '',
              _2: unary_expression {
               _0: {
                _0: 'sizeof',
                _1: '',
                _2: '(',
                _3: '',
                _4: type_name {
                 _0: specifier_qualifier_list {
                  type: 'T.i64'
                 }
                },
                _5: '',
                _6: ')'
               }
              },
              _3: '',
              _4: ')'
             }
            }
           }
          }]
         }
        }
       }]
      },
      _3: '',
      _4: ')'
     }
    } */)
}));};
T.LPSOCKADDR_STORAGE = function() {return Pointer(Struct('sockaddr_storage', {
    ss_family: T.i16,
    __ss_pad1: ArrayType(T.char, NaN /* primary_expression {
     _0: {
      _0: '(',
      _1: '',
      _2: additive_expression {
       _0: primary_expression {
        _0: {
         _0: '(',
         _1: '',
         _2: unary_expression {
          _0: {
           _0: 'sizeof',
           _1: '',
           _2: '(',
           _3: '',
           _4: type_name {
            _0: specifier_qualifier_list {
             type: 'T.i64'
            }
           },
           _5: '',
           _6: ')'
          }
         },
         _3: '',
         _4: ')'
        }
       },
       _1: [{
        _0: ' ',
        _1: {
         _0: '-',
         _1: ' ',
         _2: unary_expression {
          _0: {
           _0: 'sizeof',
           _1: '',
           _2: '(',
           _3: '',
           _4: type_name {
            _0: specifier_qualifier_list {
             type: 'T.i16'
            }
           },
           _5: '',
           _6: ')'
          }
         }
        }
       }]
      },
      _3: '',
      _4: ')'
     }
    } */),
    __ss_align: T.i64,
    __ss_pad2: ArrayType(T.char, NaN /* primary_expression {
     _0: {
      _0: '(',
      _1: '',
      _2: additive_expression {
       _0: constant {
        _0: '128'
       },
       _1: [{
        _0: ' ',
        _1: {
         _0: '-',
         _1: ' ',
         _2: multiplicative_expression {
          _0: constant {
           _0: '2'
          },
          _1: [{
           _0: ' ',
           _1: {
            _0: '*',
            _1: ' ',
            _2: primary_expression {
             _0: {
              _0: '(',
              _1: '',
              _2: unary_expression {
               _0: {
                _0: 'sizeof',
                _1: '',
                _2: '(',
                _3: '',
                _4: type_name {
                 _0: specifier_qualifier_list {
                  type: 'T.i64'
                 }
                },
                _5: '',
                _6: ')'
               }
              },
              _3: '',
              _4: ')'
             }
            }
           }
          }]
         }
        }
       }]
      },
      _3: '',
      _4: ')'
     }
    } */)
}));};
T.SOCKET_ADDRESS_LIST = function() {return Struct('_SOCKET_ADDRESS_LIST', {
    iAddressCount: T.INT,
    Address: ArrayType(T.SOCKET_ADDRESS, 1)
});};
T.LPSOCKET_ADDRESS_LIST = function() {return Pointer(Struct('_SOCKET_ADDRESS_LIST', {
    iAddressCount: T.INT,
    Address: ArrayType(T.SOCKET_ADDRESS, 1)
}));};
T.SCOPE_LEVEL = function() {return Enum('ScopeLevelGlobal', {
    ScopeLevelInterface: 1,
    ScopeLevelLink: 2,
    ScopeLevelSubnet: 3,
    ScopeLevelAdmin: 4,
    ScopeLevelSite: 5,
    ScopeLevelOrganization: 8,
    ScopeLevelGlobal: 14
});};
T.WSAPROTOCOLCHAIN = function() {return Struct('_WSAPROTOCOLCHAIN', {
    ChainLen: T.i32,
    ChainEntries: ArrayType(T.DWORD, 7)
});};
T.LPWSAPROTOCOLCHAIN = function() {return Pointer(Struct('_WSAPROTOCOLCHAIN', {
    ChainLen: T.i32,
    ChainEntries: ArrayType(T.DWORD, 7)
}));};
T.WSAPROTOCOL_INFOA = function() {return Struct('_WSAPROTOCOL_INFOA', {
    dwServiceFlags1: T.DWORD,
    dwServiceFlags2: T.DWORD,
    dwServiceFlags3: T.DWORD,
    dwServiceFlags4: T.DWORD,
    dwProviderFlags: T.DWORD,
    ProviderId: T.GUID,
    dwCatalogEntryId: T.DWORD,
    ProtocolChain: T.WSAPROTOCOLCHAIN,
    iVersion: T.i32,
    iAddressFamily: T.i32,
    iMaxSockAddr: T.i32,
    iMinSockAddr: T.i32,
    iSocketType: T.i32,
    iProtocol: T.i32,
    iProtocolMaxOffset: T.i32,
    iNetworkByteOrder: T.i32,
    iSecurityScheme: T.i32,
    dwMessageSize: T.DWORD,
    dwProviderReserved: T.DWORD,
    szProtocol: ArrayType(T.CHAR, NaN /* additive_expression {
     _0: constant {
      _0: '255'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
});};
T.LPWSAPROTOCOL_INFOA = function() {return Pointer(Struct('_WSAPROTOCOL_INFOA', {
    dwServiceFlags1: T.DWORD,
    dwServiceFlags2: T.DWORD,
    dwServiceFlags3: T.DWORD,
    dwServiceFlags4: T.DWORD,
    dwProviderFlags: T.DWORD,
    ProviderId: T.GUID,
    dwCatalogEntryId: T.DWORD,
    ProtocolChain: T.WSAPROTOCOLCHAIN,
    iVersion: T.i32,
    iAddressFamily: T.i32,
    iMaxSockAddr: T.i32,
    iMinSockAddr: T.i32,
    iSocketType: T.i32,
    iProtocol: T.i32,
    iProtocolMaxOffset: T.i32,
    iNetworkByteOrder: T.i32,
    iSecurityScheme: T.i32,
    dwMessageSize: T.DWORD,
    dwProviderReserved: T.DWORD,
    szProtocol: ArrayType(T.CHAR, NaN /* additive_expression {
     _0: constant {
      _0: '255'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
}));};
T.WSAPROTOCOL_INFOW = function() {return Struct('_WSAPROTOCOL_INFOW', {
    dwServiceFlags1: T.DWORD,
    dwServiceFlags2: T.DWORD,
    dwServiceFlags3: T.DWORD,
    dwServiceFlags4: T.DWORD,
    dwProviderFlags: T.DWORD,
    ProviderId: T.GUID,
    dwCatalogEntryId: T.DWORD,
    ProtocolChain: T.WSAPROTOCOLCHAIN,
    iVersion: T.i32,
    iAddressFamily: T.i32,
    iMaxSockAddr: T.i32,
    iMinSockAddr: T.i32,
    iSocketType: T.i32,
    iProtocol: T.i32,
    iProtocolMaxOffset: T.i32,
    iNetworkByteOrder: T.i32,
    iSecurityScheme: T.i32,
    dwMessageSize: T.DWORD,
    dwProviderReserved: T.DWORD,
    szProtocol: ArrayType(T.WCHAR, NaN /* additive_expression {
     _0: constant {
      _0: '255'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
});};
T.LPWSAPROTOCOL_INFOW = function() {return Pointer(Struct('_WSAPROTOCOL_INFOW', {
    dwServiceFlags1: T.DWORD,
    dwServiceFlags2: T.DWORD,
    dwServiceFlags3: T.DWORD,
    dwServiceFlags4: T.DWORD,
    dwProviderFlags: T.DWORD,
    ProviderId: T.GUID,
    dwCatalogEntryId: T.DWORD,
    ProtocolChain: T.WSAPROTOCOLCHAIN,
    iVersion: T.i32,
    iAddressFamily: T.i32,
    iMaxSockAddr: T.i32,
    iMinSockAddr: T.i32,
    iSocketType: T.i32,
    iProtocol: T.i32,
    iProtocolMaxOffset: T.i32,
    iNetworkByteOrder: T.i32,
    iSecurityScheme: T.i32,
    dwMessageSize: T.DWORD,
    dwProviderReserved: T.DWORD,
    szProtocol: ArrayType(T.WCHAR, NaN /* additive_expression {
     _0: constant {
      _0: '255'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
}));};
T.WSAPROTOCOL_INFO = function() {return T.WSAPROTOCOL_INFOA;};
T.LPWSAPROTOCOL_INFO = function() {return T.LPWSAPROTOCOL_INFOA;};
T.WSANETWORKEVENTS = function() {return Struct('_WSANETWORKEVENTS', {
    lNetworkEvents: T.LONG,
    iErrorCode: ArrayType(T.i32, 10)
});};
T.LPWSANETWORKEVENTS = function() {return Pointer(Struct('_WSANETWORKEVENTS', {
    lNetworkEvents: T.LONG,
    iErrorCode: ArrayType(T.i32, 10)
}));};
T.WSANSCLASSINFOA = function() {return Struct('_WSANSClassInfoA', {
    lpszName: T.LPSTR,
    dwNameSpace: T.DWORD,
    dwValueType: T.DWORD,
    dwValueSize: T.DWORD,
    lpValue: T.LPVOID
});};
T.PWSANSCLASSINFOA = function() {return Pointer(Struct('_WSANSClassInfoA', {
    lpszName: T.LPSTR,
    dwNameSpace: T.DWORD,
    dwValueType: T.DWORD,
    dwValueSize: T.DWORD,
    lpValue: T.LPVOID
}));};
T.LPWSANSCLASSINFOA = function() {return Pointer(Struct('_WSANSClassInfoA', {
    lpszName: T.LPSTR,
    dwNameSpace: T.DWORD,
    dwValueType: T.DWORD,
    dwValueSize: T.DWORD,
    lpValue: T.LPVOID
}));};
T.WSANSCLASSINFOW = function() {return Struct('_WSANSClassInfoW', {
    lpszName: T.LPSTR,
    dwNameSpace: T.DWORD,
    dwValueType: T.DWORD,
    dwValueSize: T.DWORD,
    lpValue: T.LPVOID
});};
T.PWSANSCLASSINFOW = function() {return Pointer(Struct('_WSANSClassInfoW', {
    lpszName: T.LPSTR,
    dwNameSpace: T.DWORD,
    dwValueType: T.DWORD,
    dwValueSize: T.DWORD,
    lpValue: T.LPVOID
}));};
T.LPWSANSCLASSINFOW = function() {return Pointer(Struct('_WSANSClassInfoW', {
    lpszName: T.LPSTR,
    dwNameSpace: T.DWORD,
    dwValueType: T.DWORD,
    dwValueSize: T.DWORD,
    lpValue: T.LPVOID
}));};
T.WSANSCLASSINFO = function() {return T.WSANSCLASSINFOA;};
T.PWSANSCLASSINFO = function() {return T.PWSANSCLASSINFOA;};
T.LPWSANSCLASSINFO = function() {return T.LPWSANSCLASSINFOA;};
T.WSASERVICECLASSINFOA = function() {return Struct('_WSAServiceClassInfoA', {
    lpServiceClassId: T.LPGUID,
    lpszServiceClassName: T.LPSTR,
    dwCount: T.DWORD,
    lpClassInfos: T.LPWSANSCLASSINFOA
});};
T.PWSASERVICECLASSINFOA = function() {return Pointer(Struct('_WSAServiceClassInfoA', {
    lpServiceClassId: T.LPGUID,
    lpszServiceClassName: T.LPSTR,
    dwCount: T.DWORD,
    lpClassInfos: T.LPWSANSCLASSINFOA
}));};
T.LPWSASERVICECLASSINFOA = function() {return Pointer(Struct('_WSAServiceClassInfoA', {
    lpServiceClassId: T.LPGUID,
    lpszServiceClassName: T.LPSTR,
    dwCount: T.DWORD,
    lpClassInfos: T.LPWSANSCLASSINFOA
}));};
T.WSASERVICECLASSINFOW = function() {return Struct('_WSAServiceClassInfoW', {
    lpServiceClassId: T.LPGUID,
    lpszServiceClassName: T.LPWSTR,
    dwCount: T.DWORD,
    lpClassInfos: T.LPWSANSCLASSINFOW
});};
T.PWSASERVICECLASSINFOW = function() {return Pointer(Struct('_WSAServiceClassInfoW', {
    lpServiceClassId: T.LPGUID,
    lpszServiceClassName: T.LPWSTR,
    dwCount: T.DWORD,
    lpClassInfos: T.LPWSANSCLASSINFOW
}));};
T.LPWSASERVICECLASSINFOW = function() {return Pointer(Struct('_WSAServiceClassInfoW', {
    lpServiceClassId: T.LPGUID,
    lpszServiceClassName: T.LPWSTR,
    dwCount: T.DWORD,
    lpClassInfos: T.LPWSANSCLASSINFOW
}));};
T.WSASERVICECLASSINFO = function() {return T.WSASERVICECLASSINFOA;};
T.PWSASERVICECLASSINFO = function() {return T.PWSASERVICECLASSINFOA;};
T.LPWSASERVICECLASSINFO = function() {return T.LPWSASERVICECLASSINFOA;};
T.WSABUF = function() {return Struct('_WSABUF', {
    len: T.ULONG,
    buf: Pointer(T.CHAR)
});};
T.LPWSABUF = function() {return Pointer(Struct('_WSABUF', {
    len: T.ULONG,
    buf: Pointer(T.CHAR)
}));};
T.LPWSAOVERLAPPED = function() {return Pointer(Struct('_OVERLAPPED', null));};
T.GROUP = function() {return T.u32;};
T.SERVICETYPE = function() {return T.ULONG;};
T.FLOWSPEC = function() {return Struct('_FLOWSPEC', {
    TokenRate: T.u32,
    TokenBucketSize: T.u32,
    PeakBandwidth: T.u32,
    Latency: T.u32,
    DelayVariation: T.u32,
    ServiceType: T.SERVICETYPE,
    MaxSduSize: T.u32,
    MinimumPolicedSize: T.u32
});};
T.PFLOWSPEC = function() {return Pointer(Struct('_FLOWSPEC', {
    TokenRate: T.u32,
    TokenBucketSize: T.u32,
    PeakBandwidth: T.u32,
    Latency: T.u32,
    DelayVariation: T.u32,
    ServiceType: T.SERVICETYPE,
    MaxSduSize: T.u32,
    MinimumPolicedSize: T.u32
}));};
T.LPFLOWSPEC = function() {return Pointer(Struct('_FLOWSPEC', {
    TokenRate: T.u32,
    TokenBucketSize: T.u32,
    PeakBandwidth: T.u32,
    Latency: T.u32,
    DelayVariation: T.u32,
    ServiceType: T.SERVICETYPE,
    MaxSduSize: T.u32,
    MinimumPolicedSize: T.u32
}));};
T.QOS = function() {return Struct('_QUALITYOFSERVICE', {
    SendingFlowspec: T.FLOWSPEC,
    ReceivingFlowspec: T.FLOWSPEC,
    ProviderSpecific: T.WSABUF
});};
T.LPQOS = function() {return Pointer(Struct('_QUALITYOFSERVICE', {
    SendingFlowspec: T.FLOWSPEC,
    ReceivingFlowspec: T.FLOWSPEC,
    ProviderSpecific: T.WSABUF
}));};
T.LPCONDITIONPROC = function() {return Pointer(Fn(T.i32, [[T.LPWSABUF, 'lpCallerId'], [T.LPWSABUF, 'lpCallerData'], [T.LPQOS, 'lpSQOS'], [T.LPQOS, 'lpGQOS'], [T.LPWSABUF, 'lpCalleeId'], [T.LPWSABUF, 'lpCalleeData'], [Pointer(T.GROUP), 'g'], [T.DWORD, 'dwCallbackData']]), [['stdcall']]);};
T.LPWSAOVERLAPPED_COMPLETION_ROUTINE = function() {return Pointer(Fn(null, [[T.DWORD, 'dwError'], [T.DWORD, 'cbTransferred'], [T.LPWSAOVERLAPPED, 'lpOverlapped'], [T.DWORD, 'dwFlags']]), [['stdcall']]);};
T.BLOB = function() {return Struct('_BLOB', {
    cbSize: T.ULONG,
    pBlobData: Pointer(T.BYTE)
});};
T.LPBLOB = function() {return Pointer(Struct('_BLOB', {
    cbSize: T.ULONG,
    pBlobData: Pointer(T.BYTE)
}));};
T.AFPROTOCOLS = function() {return Struct('_AFPROTOCOLS', {
    iAddressFamily: T.INT,
    iProtocol: T.INT
});};
T.PAFPROTOCOLS = function() {return Pointer(Struct('_AFPROTOCOLS', {
    iAddressFamily: T.INT,
    iProtocol: T.INT
}));};
T.LPAFPROTOCOLS = function() {return Pointer(Struct('_AFPROTOCOLS', {
    iAddressFamily: T.INT,
    iProtocol: T.INT
}));};
T.WSAECOMPARATOR = function() {return Enum('COMP_NOTLESS', {
    COMP_EQUAL: 0,
    COMP_NOTLESS: 1
});};
T.PWSAECOMPARATOR = function() {return Pointer(Enum('COMP_NOTLESS', {
    COMP_EQUAL: 0,
    COMP_NOTLESS: 1
}));};
T.LPWSAECOMPARATOR = function() {return Pointer(Enum('COMP_NOTLESS', {
    COMP_EQUAL: 0,
    COMP_NOTLESS: 1
}));};
T.WSAVERSION = function() {return Struct('_WSAVersion', {
    dwVersion: T.DWORD,
    ecHow: T.WSAECOMPARATOR
});};
T.PWSAVERSION = function() {return Pointer(Struct('_WSAVersion', {
    dwVersion: T.DWORD,
    ecHow: T.WSAECOMPARATOR
}));};
T.LPWSAVERSION = function() {return Pointer(Struct('_WSAVersion', {
    dwVersion: T.DWORD,
    ecHow: T.WSAECOMPARATOR
}));};
T.WSAQUERYSETA = function() {return Struct('_WSAQuerySetA', {
    dwSize: T.DWORD,
    lpszServiceInstanceName: T.LPSTR,
    lpServiceClassId: T.LPGUID,
    lpVersion: T.LPWSAVERSION,
    lpszComment: T.LPSTR,
    dwNameSpace: T.DWORD,
    lpNSProviderId: T.LPGUID,
    lpszContext: T.LPSTR,
    dwNumberOfProtocols: T.DWORD,
    lpafpProtocols: T.LPAFPROTOCOLS,
    lpszQueryString: T.LPSTR,
    dwNumberOfCsAddrs: T.DWORD,
    lpcsaBuffer: T.LPCSADDR_INFO,
    dwOutputFlags: T.DWORD,
    lpBlob: T.LPBLOB
});};
T.PWSAQUERYSETA = function() {return Pointer(Struct('_WSAQuerySetA', {
    dwSize: T.DWORD,
    lpszServiceInstanceName: T.LPSTR,
    lpServiceClassId: T.LPGUID,
    lpVersion: T.LPWSAVERSION,
    lpszComment: T.LPSTR,
    dwNameSpace: T.DWORD,
    lpNSProviderId: T.LPGUID,
    lpszContext: T.LPSTR,
    dwNumberOfProtocols: T.DWORD,
    lpafpProtocols: T.LPAFPROTOCOLS,
    lpszQueryString: T.LPSTR,
    dwNumberOfCsAddrs: T.DWORD,
    lpcsaBuffer: T.LPCSADDR_INFO,
    dwOutputFlags: T.DWORD,
    lpBlob: T.LPBLOB
}));};
T.LPWSAQUERYSETA = function() {return Pointer(Struct('_WSAQuerySetA', {
    dwSize: T.DWORD,
    lpszServiceInstanceName: T.LPSTR,
    lpServiceClassId: T.LPGUID,
    lpVersion: T.LPWSAVERSION,
    lpszComment: T.LPSTR,
    dwNameSpace: T.DWORD,
    lpNSProviderId: T.LPGUID,
    lpszContext: T.LPSTR,
    dwNumberOfProtocols: T.DWORD,
    lpafpProtocols: T.LPAFPROTOCOLS,
    lpszQueryString: T.LPSTR,
    dwNumberOfCsAddrs: T.DWORD,
    lpcsaBuffer: T.LPCSADDR_INFO,
    dwOutputFlags: T.DWORD,
    lpBlob: T.LPBLOB
}));};
T.WSAQUERYSETW = function() {return Struct('_WSAQuerySetW', {
    dwSize: T.DWORD,
    lpszServiceInstanceName: T.LPWSTR,
    lpServiceClassId: T.LPGUID,
    lpVersion: T.LPWSAVERSION,
    lpszComment: T.LPWSTR,
    dwNameSpace: T.DWORD,
    lpNSProviderId: T.LPGUID,
    lpszContext: T.LPWSTR,
    dwNumberOfProtocols: T.DWORD,
    lpafpProtocols: T.LPAFPROTOCOLS,
    lpszQueryString: T.LPWSTR,
    dwNumberOfCsAddrs: T.DWORD,
    lpcsaBuffer: T.LPCSADDR_INFO,
    dwOutputFlags: T.DWORD,
    lpBlob: T.LPBLOB
});};
T.PWSAQUERYSETW = function() {return Pointer(Struct('_WSAQuerySetW', {
    dwSize: T.DWORD,
    lpszServiceInstanceName: T.LPWSTR,
    lpServiceClassId: T.LPGUID,
    lpVersion: T.LPWSAVERSION,
    lpszComment: T.LPWSTR,
    dwNameSpace: T.DWORD,
    lpNSProviderId: T.LPGUID,
    lpszContext: T.LPWSTR,
    dwNumberOfProtocols: T.DWORD,
    lpafpProtocols: T.LPAFPROTOCOLS,
    lpszQueryString: T.LPWSTR,
    dwNumberOfCsAddrs: T.DWORD,
    lpcsaBuffer: T.LPCSADDR_INFO,
    dwOutputFlags: T.DWORD,
    lpBlob: T.LPBLOB
}));};
T.LPWSAQUERYSETW = function() {return Pointer(Struct('_WSAQuerySetW', {
    dwSize: T.DWORD,
    lpszServiceInstanceName: T.LPWSTR,
    lpServiceClassId: T.LPGUID,
    lpVersion: T.LPWSAVERSION,
    lpszComment: T.LPWSTR,
    dwNameSpace: T.DWORD,
    lpNSProviderId: T.LPGUID,
    lpszContext: T.LPWSTR,
    dwNumberOfProtocols: T.DWORD,
    lpafpProtocols: T.LPAFPROTOCOLS,
    lpszQueryString: T.LPWSTR,
    dwNumberOfCsAddrs: T.DWORD,
    lpcsaBuffer: T.LPCSADDR_INFO,
    dwOutputFlags: T.DWORD,
    lpBlob: T.LPBLOB
}));};
T.WSAQUERYSET = function() {return T.WSAQUERYSETA;};
T.PWSAQUERYSET = function() {return T.PWSAQUERYSETA;};
T.LPWSAQUERYSET = function() {return T.LPWSAQUERYSETA;};
T.WSAESETSERVICEOP = function() {return Enum('RNRSERVICE_DELETE', {
    RNRSERVICE_REGISTER: 0,
    RNRSERVICE_DEREGISTER: 1,
    RNRSERVICE_DELETE: 2
});};
T.PWSAESETSERVICEOP = function() {return Pointer(Enum('RNRSERVICE_DELETE', {
    RNRSERVICE_REGISTER: 0,
    RNRSERVICE_DEREGISTER: 1,
    RNRSERVICE_DELETE: 2
}));};
T.LPWSAESETSERVICEOP = function() {return Pointer(Enum('RNRSERVICE_DELETE', {
    RNRSERVICE_REGISTER: 0,
    RNRSERVICE_DEREGISTER: 1,
    RNRSERVICE_DELETE: 2
}));};
T.WSANAMESPACE_INFOA = function() {return Struct('_WSANAMESPACE_INFOA', {
    NSProviderId: T.GUID,
    dwNameSpace: T.DWORD,
    fActive: T.BOOL,
    dwVersion: T.DWORD,
    lpszIdentifier: T.LPSTR
});};
T.PWSANAMESPACE_INFOA = function() {return Pointer(Struct('_WSANAMESPACE_INFOA', {
    NSProviderId: T.GUID,
    dwNameSpace: T.DWORD,
    fActive: T.BOOL,
    dwVersion: T.DWORD,
    lpszIdentifier: T.LPSTR
}));};
T.LPWSANAMESPACE_INFOA = function() {return Pointer(Struct('_WSANAMESPACE_INFOA', {
    NSProviderId: T.GUID,
    dwNameSpace: T.DWORD,
    fActive: T.BOOL,
    dwVersion: T.DWORD,
    lpszIdentifier: T.LPSTR
}));};
T.WSANAMESPACE_INFOW = function() {return Struct('_WSANAMESPACE_INFOW', {
    NSProviderId: T.GUID,
    dwNameSpace: T.DWORD,
    fActive: T.BOOL,
    dwVersion: T.DWORD,
    lpszIdentifier: T.LPWSTR
});};
T.PWSANAMESPACE_INFOW = function() {return Pointer(Struct('_WSANAMESPACE_INFOW', {
    NSProviderId: T.GUID,
    dwNameSpace: T.DWORD,
    fActive: T.BOOL,
    dwVersion: T.DWORD,
    lpszIdentifier: T.LPWSTR
}));};
T.LPWSANAMESPACE_INFOW = function() {return Pointer(Struct('_WSANAMESPACE_INFOW', {
    NSProviderId: T.GUID,
    dwNameSpace: T.DWORD,
    fActive: T.BOOL,
    dwVersion: T.DWORD,
    lpszIdentifier: T.LPWSTR
}));};
T.WSANAMESPACE_INFO = function() {return T.WSANAMESPACE_INFOA;};
T.PWSANAMESPACE_INFO = function() {return T.PWSANAMESPACE_INFOA;};
T.LPWSANAMESPACE_INFO = function() {return T.LPWSANAMESPACE_INFOA;};
T.WSACOMPLETIONTYPE = function() {return Enum('NSP_NOTIFY_APC', {
    NSP_NOTIFY_IMMEDIATELY: 0,
    NSP_NOTIFY_HWND: 1,
    NSP_NOTIFY_EVENT: 2,
    NSP_NOTIFY_PORT: 3,
    NSP_NOTIFY_APC: 4
});};
T.PWSACOMPLETIONTYPE = function() {return Pointer(Enum('NSP_NOTIFY_APC', {
    NSP_NOTIFY_IMMEDIATELY: 0,
    NSP_NOTIFY_HWND: 1,
    NSP_NOTIFY_EVENT: 2,
    NSP_NOTIFY_PORT: 3,
    NSP_NOTIFY_APC: 4
}));};
T.LPWSACOMPLETIONTYPE = function() {return Pointer(Enum('NSP_NOTIFY_APC', {
    NSP_NOTIFY_IMMEDIATELY: 0,
    NSP_NOTIFY_HWND: 1,
    NSP_NOTIFY_EVENT: 2,
    NSP_NOTIFY_PORT: 3,
    NSP_NOTIFY_APC: 4
}));};
T.WSACOMPLETION = function() {return Struct('_WSACOMPLETION', {
    Type: T.WSACOMPLETIONTYPE,
    Parameters: Union('', {
        WindowMessage: Struct('', {
            hWnd: T.HWND,
            uMsg: T.UINT,
            context: T.WPARAM
        }),
        Event: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED
        }),
        Apc: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED,
            lpfnCompletionProc: T.LPWSAOVERLAPPED_COMPLETION_ROUTINE
        }),
        Port: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED,
            hPort: T.HANDLE,
            Key: T.ULONG_PTR
        })
    })
});};
T.PWSACOMPLETION = function() {return Pointer(Struct('_WSACOMPLETION', {
    Type: T.WSACOMPLETIONTYPE,
    Parameters: Union('', {
        WindowMessage: Struct('', {
            hWnd: T.HWND,
            uMsg: T.UINT,
            context: T.WPARAM
        }),
        Event: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED
        }),
        Apc: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED,
            lpfnCompletionProc: T.LPWSAOVERLAPPED_COMPLETION_ROUTINE
        }),
        Port: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED,
            hPort: T.HANDLE,
            Key: T.ULONG_PTR
        })
    })
}));};
T.LPWSACOMPLETION = function() {return Pointer(Struct('_WSACOMPLETION', {
    Type: T.WSACOMPLETIONTYPE,
    Parameters: Union('', {
        WindowMessage: Struct('', {
            hWnd: T.HWND,
            uMsg: T.UINT,
            context: T.WPARAM
        }),
        Event: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED
        }),
        Apc: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED,
            lpfnCompletionProc: T.LPWSAOVERLAPPED_COMPLETION_ROUTINE
        }),
        Port: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED,
            hPort: T.HANDLE,
            Key: T.ULONG_PTR
        })
    })
}));};
T.NTSTATUS = function() {return T.LONG;};
T.ALG_ID = function() {return T.u32;};
T.HCRYPTPROV = function() {return T.ULONG_PTR;};
T.HCRYPTPROV_OR_NCRYPT_KEY_HANDLE = function() {return T.ULONG_PTR;};
T.HCRYPTPROV_LEGACY = function() {return T.ULONG_PTR;};
T.HCRYPTKEY = function() {return T.ULONG_PTR;};
T.HCRYPTHASH = function() {return T.ULONG_PTR;};
T.HCERTSTORE = function() {return Pointer(null);};
T.HCRYPTMSG = function() {return Pointer(null);};
T.HCERTSTOREPROV = function() {return Pointer(null);};
T.HCRYPTOIDFUNCSET = function() {return Pointer(null);};
T.HCRYPTOIDFUNCADDR = function() {return Pointer(null);};
T.HCRYPTDEFAULTCONTEXT = function() {return Pointer(null);};
T.PROV_ENUMALGS = function() {return Struct('_PROV_ENUMALGS', {
    aiAlgid: T.ALG_ID,
    dwBitLen: T.DWORD,
    dwNameLen: T.DWORD,
    szName: ArrayType(T.CHAR, 20)
});};
T.PROV_ENUMALGS_EX = function() {return Struct('_PROV_ENUMALGS_EX', {
    aiAlgid: T.ALG_ID,
    dwDefaultLen: T.DWORD,
    dwMinLen: T.DWORD,
    dwMaxLen: T.DWORD,
    dwProtocols: T.DWORD,
    dwNameLen: T.DWORD,
    szName: ArrayType(T.CHAR, 20),
    dwLongNameLen: T.DWORD,
    szLongName: ArrayType(T.CHAR, 40)
});};
T.SCHANNEL_ALG = function() {return Struct('_SCHANNEL_ALG', {
    dwUse: T.DWORD,
    Algid: T.ALG_ID,
    cBits: T.DWORD,
    dwFlags: T.DWORD,
    dwReserved: T.DWORD
});};
T.PSCHANNEL_ALG = function() {return Pointer(Struct('_SCHANNEL_ALG', {
    dwUse: T.DWORD,
    Algid: T.ALG_ID,
    cBits: T.DWORD,
    dwFlags: T.DWORD,
    dwReserved: T.DWORD
}));};
T.HMAC_INFO = function() {return Struct('_HMAC_INFO', {
    HashAlgid: T.ALG_ID,
    pbInnerString: Pointer(T.BYTE),
    cbInnerString: T.DWORD,
    pbOuterString: Pointer(T.BYTE),
    cbOuterString: T.DWORD
});};
T.PHMAC_INFO = function() {return Pointer(Struct('_HMAC_INFO', {
    HashAlgid: T.ALG_ID,
    pbInnerString: Pointer(T.BYTE),
    cbInnerString: T.DWORD,
    pbOuterString: Pointer(T.BYTE),
    cbOuterString: T.DWORD
}));};
T.CRYPT_INTEGER_BLOB = function() {return Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});};
T.PCRYPT_INTEGER_BLOB = function() {return Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));};
T.CRYPT_UINT_BLOB = function() {return Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});};
T.PCRYPT_UINT_BLOB = function() {return Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));};
T.CRYPT_OBJID_BLOB = function() {return Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});};
T.PCRYPT_OBJID_BLOB = function() {return Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));};
T.CERT_NAME_BLOB = function() {return Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});};
T.PCERT_NAME_BLOB = function() {return Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));};
T.CERT_RDN_VALUE_BLOB = function() {return Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});};
T.PCERT_RDN_VALUE_BLOB = function() {return Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));};
T.CERT_BLOB = function() {return Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});};
T.PCERT_BLOB = function() {return Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));};
T.CRL_BLOB = function() {return Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});};
T.PCRL_BLOB = function() {return Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));};
T.DATA_BLOB = function() {return Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});};
T.PDATA_BLOB = function() {return Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));};
T.CRYPT_DATA_BLOB = function() {return Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});};
T.PCRYPT_DATA_BLOB = function() {return Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));};
T.CRYPT_HASH_BLOB = function() {return Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});};
T.PCRYPT_HASH_BLOB = function() {return Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));};
T.CRYPT_DIGEST_BLOB = function() {return Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});};
T.PCRYPT_DIGEST_BLOB = function() {return Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));};
T.CRYPT_DER_BLOB = function() {return Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});};
T.PCRYPT_DER_BLOB = function() {return Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));};
T.CRYPT_ATTR_BLOB = function() {return Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});};
T.PCRYPT_ATTR_BLOB = function() {return Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));};
T.CRYPTPROTECT_PROMPTSTRUCT = function() {return Struct('_CRYPTPROTECT_PROMPTSTRUCT', {
    cbSize: T.DWORD,
    dwPromptFlags: T.DWORD,
    hwndApp: T.HWND,
    szPrompt: T.LPCWSTR
});};
T.PCRYPTPROTECT_PROMPTSTRUCT = function() {return Pointer(Struct('_CRYPTPROTECT_PROMPTSTRUCT', {
    cbSize: T.DWORD,
    dwPromptFlags: T.DWORD,
    hwndApp: T.HWND,
    szPrompt: T.LPCWSTR
}));};
T.CRYPT_ALGORITHM_IDENTIFIER = function() {return Struct('_CRYPT_ALGORITHM_IDENTIFIER', {
    pszObjId: T.LPSTR,
    Parameters: T.CRYPT_OBJID_BLOB
});};
T.PCRYPT_ALGORITHM_IDENTIFIER = function() {return Pointer(Struct('_CRYPT_ALGORITHM_IDENTIFIER', {
    pszObjId: T.LPSTR,
    Parameters: T.CRYPT_OBJID_BLOB
}));};
T.CRYPT_ATTRIBUTE_TYPE_VALUE = function() {return Struct('_CRYPT_ATTRIBUTE_TYPE_VALUE', {
    pszObjId: T.LPSTR,
    Value: T.CRYPT_OBJID_BLOB
});};
T.PCRYPT_ATTRIBUTE_TYPE_VALUE = function() {return Pointer(Struct('_CRYPT_ATTRIBUTE_TYPE_VALUE', {
    pszObjId: T.LPSTR,
    Value: T.CRYPT_OBJID_BLOB
}));};
T.BLOBHEADER = function() {return Struct('_PUBLICKEYSTRUC', {
    bType: T.BYTE,
    bVersion: T.BYTE,
    reserved: T.WORD,
    aiKeyAlg: T.ALG_ID
});};
T.PUBLICKEYSTRUC = function() {return Struct('_PUBLICKEYSTRUC', {
    bType: T.BYTE,
    bVersion: T.BYTE,
    reserved: T.WORD,
    aiKeyAlg: T.ALG_ID
});};
T.RSAPUBKEY = function() {return Struct('_RSAPUBKEY', {
    magic: T.DWORD,
    bitlen: T.DWORD,
    pubexp: T.DWORD
});};
T.DHPUBKEY = function() {return Struct('_PUBKEY', {
    magic: T.DWORD,
    bitlen: T.DWORD
});};
T.DSSPUBKEY = function() {return Struct('_PUBKEY', {
    magic: T.DWORD,
    bitlen: T.DWORD
});};
T.KEAPUBKEY = function() {return Struct('_PUBKEY', {
    magic: T.DWORD,
    bitlen: T.DWORD
});};
T.TEKPUBKEY = function() {return Struct('_PUBKEY', {
    magic: T.DWORD,
    bitlen: T.DWORD
});};
T.DSSSEED = function() {return Struct('_DSSSEED', {
    counter: T.DWORD,
    seed: ArrayType(T.BYTE, 20)
});};
T.DHPUBKEY_VER3 = function() {return Struct('_PUBKEYVER3', {
    magic: T.DWORD,
    bitlenP: T.DWORD,
    bitlenQ: T.DWORD,
    bitlenJ: T.DWORD,
    DSSSeed: T.DSSSEED
});};
T.DSSPUBKEY_VER3 = function() {return Struct('_PUBKEYVER3', {
    magic: T.DWORD,
    bitlenP: T.DWORD,
    bitlenQ: T.DWORD,
    bitlenJ: T.DWORD,
    DSSSeed: T.DSSSEED
});};
T.DHPRIVKEY_VER3 = function() {return Struct('_PRIVKEYVER3', {
    magic: T.DWORD,
    bitlenP: T.DWORD,
    bitlenQ: T.DWORD,
    bitlenJ: T.DWORD,
    bitlenX: T.DWORD,
    DSSSeed: T.DSSSEED
});};
T.DSSPRIVKEY_VER3 = function() {return Struct('_PRIVKEYVER3', {
    magic: T.DWORD,
    bitlenP: T.DWORD,
    bitlenQ: T.DWORD,
    bitlenJ: T.DWORD,
    bitlenX: T.DWORD,
    DSSSeed: T.DSSSEED
});};
T.KEY_TYPE_SUBTYPE = function() {return Struct('_KEY_TYPE_SUBTYPE', {
    dwKeySpec: T.DWORD,
    Type: T.GUID,
    SubType: T.GUID
});};
T.PKEY_TYPE_SUBTYPE = function() {return Pointer(Struct('_KEY_TYPE_SUBTYPE', {
    dwKeySpec: T.DWORD,
    Type: T.GUID,
    SubType: T.GUID
}));};
T.CERT_FORTEZZA_DATA_PROP = function() {return Struct('_CERT_FORTEZZA_DATA_PROP', {
    SerialNumber: ArrayType(T.u8, 8),
    CertIndex: T.i32,
    CertLabel: ArrayType(T.u8, 36)
});};
T.CMS_DH_KEY_INFO = function() {return Struct('_CMS_DH_KEY_INFO', {
    dwVersion: T.DWORD,
    Algid: T.ALG_ID,
    pszContentEncObjId: T.LPSTR,
    PubInfo: T.CRYPT_DATA_BLOB,
    pReserved: Pointer(null)
});};
T.PCMS_DH_KEY_INFO = function() {return Pointer(Struct('_CMS_DH_KEY_INFO', {
    dwVersion: T.DWORD,
    Algid: T.ALG_ID,
    pszContentEncObjId: T.LPSTR,
    PubInfo: T.CRYPT_DATA_BLOB,
    pReserved: Pointer(null)
}));};
T.CRYPT_BIT_BLOB = function() {return Struct('_CRYPT_BIT_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE),
    cUnusedBits: T.DWORD
});};
T.PCRYPT_BIT_BLOB = function() {return Pointer(Struct('_CRYPT_BIT_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE),
    cUnusedBits: T.DWORD
}));};
T.CRYPT_KEY_PROV_PARAM = function() {return Struct('_CRYPT_KEY_PROV_PARAM', {
    dwParam: T.DWORD,
    pbData: Pointer(T.BYTE),
    cbData: T.DWORD,
    dwFlags: T.DWORD
});};
T.PCRYPT_KEY_PROV_PARAM = function() {return Pointer(Struct('_CRYPT_KEY_PROV_PARAM', {
    dwParam: T.DWORD,
    pbData: Pointer(T.BYTE),
    cbData: T.DWORD,
    dwFlags: T.DWORD
}));};
T.CRYPT_KEY_PROV_INFO = function() {return Struct('_CRYPT_KEY_PROV_INFO', {
    pwszContainerName: T.LPWSTR,
    pwszProvName: T.LPWSTR,
    dwProvType: T.DWORD,
    dwFlags: T.DWORD,
    cProvParam: T.DWORD,
    rgProvParam: T.PCRYPT_KEY_PROV_PARAM,
    dwKeySpec: T.DWORD
});};
T.PCRYPT_KEY_PROV_INFO = function() {return Pointer(Struct('_CRYPT_KEY_PROV_INFO', {
    pwszContainerName: T.LPWSTR,
    pwszProvName: T.LPWSTR,
    dwProvType: T.DWORD,
    dwFlags: T.DWORD,
    cProvParam: T.DWORD,
    rgProvParam: T.PCRYPT_KEY_PROV_PARAM,
    dwKeySpec: T.DWORD
}));};
T.CERT_KEY_CONTEXT = function() {return Struct('_CERT_KEY_CONTEXT', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD
});};
T.PCERT_KEY_CONTEXT = function() {return Pointer(Struct('_CERT_KEY_CONTEXT', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD
}));};
T.CERT_PUBLIC_KEY_INFO = function() {return Struct('_CERT_PUBLIC_KEY_INFO', {
    Algorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    PublicKey: T.CRYPT_BIT_BLOB
});};
T.PCERT_PUBLIC_KEY_INFO = function() {return Pointer(Struct('_CERT_PUBLIC_KEY_INFO', {
    Algorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    PublicKey: T.CRYPT_BIT_BLOB
}));};
T.CERT_EXTENSION = function() {return Struct('_CERT_EXTENSION', {
    pszObjId: T.LPSTR,
    fCritical: T.BOOL,
    Value: T.CRYPT_OBJID_BLOB
});};
T.PCERT_EXTENSION = function() {return Pointer(Struct('_CERT_EXTENSION', {
    pszObjId: T.LPSTR,
    fCritical: T.BOOL,
    Value: T.CRYPT_OBJID_BLOB
}));};
T.CERT_EXTENSIONS = function() {return Struct('_CERT_EXTENSIONS', {
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
});};
T.PCERT_EXTENSIONS = function() {return Pointer(Struct('_CERT_EXTENSIONS', {
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
}));};
T.CERT_INFO = function() {return Struct('_CERT_INFO', {
    dwVersion: T.DWORD,
    SerialNumber: T.CRYPT_INTEGER_BLOB,
    SignatureAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    Issuer: T.CERT_NAME_BLOB,
    NotBefore: T.FILETIME,
    NotAfter: T.FILETIME,
    Subject: T.CERT_NAME_BLOB,
    SubjectPublicKeyInfo: T.CERT_PUBLIC_KEY_INFO,
    IssuerUniqueId: T.CRYPT_BIT_BLOB,
    SubjectUniqueId: T.CRYPT_BIT_BLOB,
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
});};
T.PCERT_INFO = function() {return Pointer(Struct('_CERT_INFO', {
    dwVersion: T.DWORD,
    SerialNumber: T.CRYPT_INTEGER_BLOB,
    SignatureAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    Issuer: T.CERT_NAME_BLOB,
    NotBefore: T.FILETIME,
    NotAfter: T.FILETIME,
    Subject: T.CERT_NAME_BLOB,
    SubjectPublicKeyInfo: T.CERT_PUBLIC_KEY_INFO,
    IssuerUniqueId: T.CRYPT_BIT_BLOB,
    SubjectUniqueId: T.CRYPT_BIT_BLOB,
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
}));};
T.CERT_RDN_ATTR = function() {return Struct('_CERT_RDN_ATTR', {
    pszObjId: T.LPSTR,
    dwValueType: T.DWORD,
    Value: T.CERT_RDN_VALUE_BLOB
});};
T.PCERT_RDN_ATTR = function() {return Pointer(Struct('_CERT_RDN_ATTR', {
    pszObjId: T.LPSTR,
    dwValueType: T.DWORD,
    Value: T.CERT_RDN_VALUE_BLOB
}));};
T.CERT_RDN = function() {return Struct('_CERT_RDN', {
    cRDNAttr: T.DWORD,
    rgRDNAttr: T.PCERT_RDN_ATTR
});};
T.PCERT_RDN = function() {return Pointer(Struct('_CERT_RDN', {
    cRDNAttr: T.DWORD,
    rgRDNAttr: T.PCERT_RDN_ATTR
}));};
T.CERT_NAME_INFO = function() {return Struct('_CERT_NAME_INFO', {
    cRDN: T.DWORD,
    rgRDN: T.PCERT_RDN
});};
T.PCERT_NAME_INFO = function() {return Pointer(Struct('_CERT_NAME_INFO', {
    cRDN: T.DWORD,
    rgRDN: T.PCERT_RDN
}));};
T.CERT_NAME_VALUE = function() {return Struct('_CERT_NAME_VALUE', {
    dwValueType: T.DWORD,
    Value: T.CERT_RDN_VALUE_BLOB
});};
T.PCERT_NAME_VALUE = function() {return Pointer(Struct('_CERT_NAME_VALUE', {
    dwValueType: T.DWORD,
    Value: T.CERT_RDN_VALUE_BLOB
}));};
T.CERT_ENCRYPTED_PRIVATE_KEY_INFO = function() {return Struct('_CERT_ENCRYPTED_PRIVATE_KEY_INFO', {
    EncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedPrivateKey: T.CRYPT_DATA_BLOB
});};
T.PCERT_ENCRYPTED_PRIVATE_KEY_INFO = function() {return Pointer(Struct('_CERT_ENCRYPTED_PRIVATE_KEY_INFO', {
    EncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedPrivateKey: T.CRYPT_DATA_BLOB
}));};
T.CERT_AUTHORITY_KEY_ID_INFO = function() {return Struct('_CERT_AUTHORITY_KEY_ID_INFO', {
    KeyId: T.CRYPT_DATA_BLOB,
    CertIssuer: T.CERT_NAME_BLOB,
    CertSerialNumber: T.CRYPT_INTEGER_BLOB
});};
T.PCERT_AUTHORITY_KEY_ID_INFO = function() {return Pointer(Struct('_CERT_AUTHORITY_KEY_ID_INFO', {
    KeyId: T.CRYPT_DATA_BLOB,
    CertIssuer: T.CERT_NAME_BLOB,
    CertSerialNumber: T.CRYPT_INTEGER_BLOB
}));};
T.CERT_PRIVATE_KEY_VALIDITY = function() {return Struct('_CERT_PRIVATE_KEY_VALIDITY', {
    NotBefore: T.FILETIME,
    NotAfter: T.FILETIME
});};
T.PCERT_PRIVATE_KEY_VALIDITY = function() {return Pointer(Struct('_CERT_PRIVATE_KEY_VALIDITY', {
    NotBefore: T.FILETIME,
    NotAfter: T.FILETIME
}));};
T.CERT_KEY_ATTRIBUTES_INFO = function() {return Struct('_CERT_KEY_ATTRIBUTES_INFO', {
    KeyId: T.CRYPT_DATA_BLOB,
    IntendedKeyUsage: T.CRYPT_BIT_BLOB,
    pPrivateKeyUsagePeriod: T.PCERT_PRIVATE_KEY_VALIDITY
});};
T.PCERT_KEY_ATTRIBUTES_INFO = function() {return Pointer(Struct('_CERT_KEY_ATTRIBUTES_INFO', {
    KeyId: T.CRYPT_DATA_BLOB,
    IntendedKeyUsage: T.CRYPT_BIT_BLOB,
    pPrivateKeyUsagePeriod: T.PCERT_PRIVATE_KEY_VALIDITY
}));};
T.CERT_POLICY_ID = function() {return Struct('_CERT_POLICY_ID', {
    cCertPolicyElementId: T.DWORD,
    rgbszCertPolicyElementId: Pointer(T.LPSTR)
});};
T.PCERT_POLICY_ID = function() {return Pointer(Struct('_CERT_POLICY_ID', {
    cCertPolicyElementId: T.DWORD,
    rgbszCertPolicyElementId: Pointer(T.LPSTR)
}));};
T.CERT_KEY_USAGE_RESTRICTION_INFO = function() {return Struct('_CERT_KEY_USAGE_RESTRICTION_INFO', {
    cCertPolicyId: T.DWORD,
    rgCertPolicyId: T.PCERT_POLICY_ID,
    RestrictedKeyUsage: T.CRYPT_BIT_BLOB
});};
T.PCERT_KEY_USAGE_RESTRICTION_INFO = function() {return Pointer(Struct('_CERT_KEY_USAGE_RESTRICTION_INFO', {
    cCertPolicyId: T.DWORD,
    rgCertPolicyId: T.PCERT_POLICY_ID,
    RestrictedKeyUsage: T.CRYPT_BIT_BLOB
}));};
T.CERT_OTHER_NAME = function() {return Struct('_CERT_OTHER_NAME', {
    pszObjId: T.LPSTR,
    Value: T.CRYPT_OBJID_BLOB
});};
T.PCERT_OTHER_NAME = function() {return Pointer(Struct('_CERT_OTHER_NAME', {
    pszObjId: T.LPSTR,
    Value: T.CRYPT_OBJID_BLOB
}));};
T.CERT_ALT_NAME_ENTRY = function() {return Struct('_CERT_ALT_NAME_ENTRY', {
    dwAltNameChoice: T.DWORD,
    __unnamed0: Union('', {
        pOtherName: T.PCERT_OTHER_NAME,
        pwszRfc822Name: T.LPWSTR,
        pwszDNSName: T.LPWSTR,
        DirectoryName: T.CERT_NAME_BLOB,
        pwszURL: T.LPWSTR,
        IPAddress: T.CRYPT_DATA_BLOB,
        pszRegisteredID: T.LPSTR
    })
});};
T.PCERT_ALT_NAME_ENTRY = function() {return Pointer(Struct('_CERT_ALT_NAME_ENTRY', {
    dwAltNameChoice: T.DWORD,
    __unnamed0: Union('', {
        pOtherName: T.PCERT_OTHER_NAME,
        pwszRfc822Name: T.LPWSTR,
        pwszDNSName: T.LPWSTR,
        DirectoryName: T.CERT_NAME_BLOB,
        pwszURL: T.LPWSTR,
        IPAddress: T.CRYPT_DATA_BLOB,
        pszRegisteredID: T.LPSTR
    })
}));};
T.CERT_ALT_NAME_INFO = function() {return Struct('_CERT_ALT_NAME_INFO', {
    cAltEntry: T.DWORD,
    rgAltEntry: T.PCERT_ALT_NAME_ENTRY
});};
T.PCERT_ALT_NAME_INFO = function() {return Pointer(Struct('_CERT_ALT_NAME_INFO', {
    cAltEntry: T.DWORD,
    rgAltEntry: T.PCERT_ALT_NAME_ENTRY
}));};
T.CERT_BASIC_CONSTRAINTS_INFO = function() {return Struct('_CERT_BASIC_CONSTRAINTS_INFO', {
    SubjectType: T.CRYPT_BIT_BLOB,
    fPathLenConstraint: T.BOOL,
    dwPathLenConstraint: T.DWORD,
    cSubtreesConstraint: T.DWORD,
    rgSubtreesConstraint: Pointer(T.CERT_NAME_BLOB)
});};
T.PCERT_BASIC_CONSTRAINTS_INFO = function() {return Pointer(Struct('_CERT_BASIC_CONSTRAINTS_INFO', {
    SubjectType: T.CRYPT_BIT_BLOB,
    fPathLenConstraint: T.BOOL,
    dwPathLenConstraint: T.DWORD,
    cSubtreesConstraint: T.DWORD,
    rgSubtreesConstraint: Pointer(T.CERT_NAME_BLOB)
}));};
T.CERT_BASIC_CONSTRAINTS2_INFO = function() {return Struct('_CERT_BASIC_CONSTRAINTS2_INFO', {
    fCA: T.BOOL,
    fPathLenConstraint: T.BOOL,
    dwPathLenConstraint: T.DWORD
});};
T.PCERT_BASIC_CONSTRAINTS2_INFO = function() {return Pointer(Struct('_CERT_BASIC_CONSTRAINTS2_INFO', {
    fCA: T.BOOL,
    fPathLenConstraint: T.BOOL,
    dwPathLenConstraint: T.DWORD
}));};
T.CERT_POLICY_QUALIFIER_INFO = function() {return Struct('_CERT_POLICY_QUALIFIER_INFO', {
    pszPolicyQualifierId: T.LPSTR,
    Qualifier: T.CRYPT_OBJID_BLOB
});};
T.PCERT_POLICY_QUALIFIER_INFO = function() {return Pointer(Struct('_CERT_POLICY_QUALIFIER_INFO', {
    pszPolicyQualifierId: T.LPSTR,
    Qualifier: T.CRYPT_OBJID_BLOB
}));};
T.CERT_POLICY_INFO = function() {return Struct('_CERT_POLICY_INFO', {
    pszPolicyIdentifier: T.LPSTR,
    cPolicyQualifier: T.DWORD,
    rgPolicyQualifier: Pointer(T.CERT_POLICY_QUALIFIER_INFO)
});};
T.PCERT_POLICY_INFO = function() {return Pointer(Struct('_CERT_POLICY_INFO', {
    pszPolicyIdentifier: T.LPSTR,
    cPolicyQualifier: T.DWORD,
    rgPolicyQualifier: Pointer(T.CERT_POLICY_QUALIFIER_INFO)
}));};
T.CERT_POLICIES_INFO = function() {return Struct('_CERT_POLICIES_INFO', {
    cPolicyInfo: T.DWORD,
    rgPolicyInfo: Pointer(T.CERT_POLICY_INFO)
});};
T.PCERT_POLICIES_INFO = function() {return Pointer(Struct('_CERT_POLICIES_INFO', {
    cPolicyInfo: T.DWORD,
    rgPolicyInfo: Pointer(T.CERT_POLICY_INFO)
}));};
T.CERT_POLICY_QUALIFIER_NOTICE_REFERENCE = function() {return Struct('_CERT_POLICY_QUALIFIER_NOTICE_REFERENCE', {
    pszOrganization: T.LPSTR,
    cNoticeNumbers: T.DWORD,
    rgNoticeNumbers: Pointer(T.i32)
});};
T.PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE = function() {return Pointer(Struct('_CERT_POLICY_QUALIFIER_NOTICE_REFERENCE', {
    pszOrganization: T.LPSTR,
    cNoticeNumbers: T.DWORD,
    rgNoticeNumbers: Pointer(T.i32)
}));};
T.CERT_POLICY_QUALIFIER_USER_NOTICE = function() {return Struct('_CERT_POLICY_QUALIFIER_USER_NOTICE', {
    pNoticeReference: Pointer(T.CERT_POLICY_QUALIFIER_NOTICE_REFERENCE),
    pszDisplayText: T.LPWSTR
});};
T.PCERT_POLICY_QUALIFIER_USER_NOTICE = function() {return Pointer(Struct('_CERT_POLICY_QUALIFIER_USER_NOTICE', {
    pNoticeReference: Pointer(T.CERT_POLICY_QUALIFIER_NOTICE_REFERENCE),
    pszDisplayText: T.LPWSTR
}));};
T.CPS_URLS = function() {return Struct('_CPS_URLS', {
    pszURL: T.LPWSTR,
    pAlgorithm: Pointer(T.CRYPT_ALGORITHM_IDENTIFIER),
    pDigest: Pointer(T.CRYPT_DATA_BLOB)
});};
T.PCPS_URLS = function() {return Pointer(Struct('_CPS_URLS', {
    pszURL: T.LPWSTR,
    pAlgorithm: Pointer(T.CRYPT_ALGORITHM_IDENTIFIER),
    pDigest: Pointer(T.CRYPT_DATA_BLOB)
}));};
T.CERT_POLICY95_QUALIFIER1 = function() {return Struct('_CERT_POLICY95_QUALIFIER1', {
    pszPracticesReference: T.LPWSTR,
    pszNoticeIdentifier: T.LPSTR,
    pszNSINoticeIdentifier: T.LPSTR,
    cCPSURLs: T.DWORD,
    rgCPSURLs: Pointer(T.CPS_URLS)
});};
T.PCERT_POLICY95_QUALIFIER1 = function() {return Pointer(Struct('_CERT_POLICY95_QUALIFIER1', {
    pszPracticesReference: T.LPWSTR,
    pszNoticeIdentifier: T.LPSTR,
    pszNSINoticeIdentifier: T.LPSTR,
    cCPSURLs: T.DWORD,
    rgCPSURLs: Pointer(T.CPS_URLS)
}));};
T.CERT_POLICY_MAPPING = function() {return Struct('_CERT_POLICY_MAPPING', {
    pszIssuerDomainPolicy: T.LPSTR,
    pszSubjectDomainPolicy: T.LPSTR
});};
T.PCERT_POLICY_MAPPING = function() {return Pointer(Struct('_CERT_POLICY_MAPPING', {
    pszIssuerDomainPolicy: T.LPSTR,
    pszSubjectDomainPolicy: T.LPSTR
}));};
T.CERT_POLICY_MAPPINGS_INFO = function() {return Struct('_CERT_POLICY_MAPPINGS_INFO', {
    cPolicyMapping: T.DWORD,
    rgPolicyMapping: T.PCERT_POLICY_MAPPING
});};
T.PCERT_POLICY_MAPPINGS_INFO = function() {return Pointer(Struct('_CERT_POLICY_MAPPINGS_INFO', {
    cPolicyMapping: T.DWORD,
    rgPolicyMapping: T.PCERT_POLICY_MAPPING
}));};
T.CERT_POLICY_CONSTRAINTS_INFO = function() {return Struct('_CERT_POLICY_CONSTRAINTS_INFO', {
    fRequireExplicitPolicy: T.BOOL,
    dwRequireExplicitPolicySkipCerts: T.DWORD,
    fInhibitPolicyMapping: T.BOOL,
    dwInhibitPolicyMappingSkipCerts: T.DWORD
});};
T.PCERT_POLICY_CONSTRAINTS_INFO = function() {return Pointer(Struct('_CERT_POLICY_CONSTRAINTS_INFO', {
    fRequireExplicitPolicy: T.BOOL,
    dwRequireExplicitPolicySkipCerts: T.DWORD,
    fInhibitPolicyMapping: T.BOOL,
    dwInhibitPolicyMappingSkipCerts: T.DWORD
}));};
T.CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = function() {return Struct('_CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY', {
    pszObjId: T.LPSTR,
    cValue: T.DWORD,
    rgValue: T.PCRYPT_DER_BLOB
});};
T.PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = function() {return Pointer(Struct('_CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY', {
    pszObjId: T.LPSTR,
    cValue: T.DWORD,
    rgValue: T.PCRYPT_DER_BLOB
}));};
T.CRYPT_CONTENT_INFO = function() {return Struct('_CRYPT_CONTENT_INFO', {
    pszObjId: T.LPSTR,
    Content: T.CRYPT_DER_BLOB
});};
T.PCRYPT_CONTENT_INFO = function() {return Pointer(Struct('_CRYPT_CONTENT_INFO', {
    pszObjId: T.LPSTR,
    Content: T.CRYPT_DER_BLOB
}));};
T.CRYPT_SEQUENCE_OF_ANY = function() {return Struct('_CRYPT_SEQUENCE_OF_ANY', {
    cValue: T.DWORD,
    rgValue: T.PCRYPT_DER_BLOB
});};
T.PCRYPT_SEQUENCE_OF_ANY = function() {return Pointer(Struct('_CRYPT_SEQUENCE_OF_ANY', {
    cValue: T.DWORD,
    rgValue: T.PCRYPT_DER_BLOB
}));};
T.CERT_AUTHORITY_KEY_ID2_INFO = function() {return Struct('_CERT_AUTHORITY_KEY_ID2_INFO', {
    KeyId: T.CRYPT_DATA_BLOB,
    AuthorityCertIssuer: T.CERT_ALT_NAME_INFO,
    AuthorityCertSerialNumber: T.CRYPT_INTEGER_BLOB
});};
T.PCERT_AUTHORITY_KEY_ID2_INFO = function() {return Pointer(Struct('_CERT_AUTHORITY_KEY_ID2_INFO', {
    KeyId: T.CRYPT_DATA_BLOB,
    AuthorityCertIssuer: T.CERT_ALT_NAME_INFO,
    AuthorityCertSerialNumber: T.CRYPT_INTEGER_BLOB
}));};
T.CERT_ACCESS_DESCRIPTION = function() {return Struct('_CERT_ACCESS_DESCRIPTION', {
    pszAccessMethod: T.LPSTR,
    AccessLocation: T.CERT_ALT_NAME_ENTRY
});};
T.PCERT_ACCESS_DESCRIPTION = function() {return Pointer(Struct('_CERT_ACCESS_DESCRIPTION', {
    pszAccessMethod: T.LPSTR,
    AccessLocation: T.CERT_ALT_NAME_ENTRY
}));};
T.CERT_AUTHORITY_INFO_ACCESS = function() {return Struct('_CERT_AUTHORITY_INFO_ACCESS', {
    cAccDescr: T.DWORD,
    rgAccDescr: T.PCERT_ACCESS_DESCRIPTION
});};
T.PCERT_AUTHORITY_INFO_ACCESS = function() {return Pointer(Struct('_CERT_AUTHORITY_INFO_ACCESS', {
    cAccDescr: T.DWORD,
    rgAccDescr: T.PCERT_ACCESS_DESCRIPTION
}));};
T.CERT_CONTEXT = function() {return Struct('_CERT_CONTEXT', {
    dwCertEncodingType: T.DWORD,
    pbCertEncoded: Pointer(T.BYTE),
    cbCertEncoded: T.DWORD,
    pCertInfo: T.PCERT_INFO,
    hCertStore: T.HCERTSTORE
});};
T.PCERT_CONTEXT = function() {return Pointer(Struct('_CERT_CONTEXT', {
    dwCertEncodingType: T.DWORD,
    pbCertEncoded: Pointer(T.BYTE),
    cbCertEncoded: T.DWORD,
    pCertInfo: T.PCERT_INFO,
    hCertStore: T.HCERTSTORE
}));};
T.PCCERT_CONTEXT = function() {return Pointer(T.CERT_CONTEXT, [['const']]);};
T.CRL_ENTRY = function() {return Struct('_CRL_ENTRY', {
    SerialNumber: T.CRYPT_INTEGER_BLOB,
    RevocationDate: T.FILETIME,
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
});};
T.PCRL_ENTRY = function() {return Pointer(Struct('_CRL_ENTRY', {
    SerialNumber: T.CRYPT_INTEGER_BLOB,
    RevocationDate: T.FILETIME,
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
}));};
T.CRL_INFO = function() {return Struct('_CRL_INFO', {
    dwVersion: T.DWORD,
    SignatureAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    Issuer: T.CERT_NAME_BLOB,
    ThisUpdate: T.FILETIME,
    NextUpdate: T.FILETIME,
    cCRLEntry: T.DWORD,
    rgCRLEntry: T.PCRL_ENTRY,
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
});};
T.PCRL_INFO = function() {return Pointer(Struct('_CRL_INFO', {
    dwVersion: T.DWORD,
    SignatureAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    Issuer: T.CERT_NAME_BLOB,
    ThisUpdate: T.FILETIME,
    NextUpdate: T.FILETIME,
    cCRLEntry: T.DWORD,
    rgCRLEntry: T.PCRL_ENTRY,
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
}));};
T.CRL_DIST_POINT_NAME = function() {return Struct('_CRL_DIST_POINT_NAME', {
    dwDistPointNameChoice: T.DWORD,
    __unnamed0: Union('', {
        FullName: T.CERT_ALT_NAME_INFO
    })
});};
T.PCRL_DIST_POINT_NAME = function() {return Pointer(Struct('_CRL_DIST_POINT_NAME', {
    dwDistPointNameChoice: T.DWORD,
    __unnamed0: Union('', {
        FullName: T.CERT_ALT_NAME_INFO
    })
}));};
T.CRL_DIST_POINT = function() {return Struct('_CRL_DIST_POINT', {
    DistPointName: T.CRL_DIST_POINT_NAME,
    ReasonFlags: T.CRYPT_BIT_BLOB,
    CRLIssuer: T.CERT_ALT_NAME_INFO
});};
T.PCRL_DIST_POINT = function() {return Pointer(Struct('_CRL_DIST_POINT', {
    DistPointName: T.CRL_DIST_POINT_NAME,
    ReasonFlags: T.CRYPT_BIT_BLOB,
    CRLIssuer: T.CERT_ALT_NAME_INFO
}));};
T.CRL_DIST_POINTS_INFO = function() {return Struct('_CRL_DIST_POINTS_INFO', {
    cDistPoint: T.DWORD,
    rgDistPoint: T.PCRL_DIST_POINT
});};
T.PCRL_DIST_POINTS_INFO = function() {return Pointer(Struct('_CRL_DIST_POINTS_INFO', {
    cDistPoint: T.DWORD,
    rgDistPoint: T.PCRL_DIST_POINT
}));};
T.CROSS_CERT_DIST_POINTS_INFO = function() {return Struct('_CROSS_CERT_DIST_POINTS_INFO', {
    dwSyncDeltaTime: T.DWORD,
    cDistPoint: T.DWORD,
    rgDistPoint: T.PCERT_ALT_NAME_INFO
});};
T.PCROSS_CERT_DIST_POINTS_INFO = function() {return Pointer(Struct('_CROSS_CERT_DIST_POINTS_INFO', {
    dwSyncDeltaTime: T.DWORD,
    cDistPoint: T.DWORD,
    rgDistPoint: T.PCERT_ALT_NAME_INFO
}));};
T.CERT_PAIR = function() {return Struct('_CERT_PAIR', {
    Forward: T.CERT_BLOB,
    Reverse: T.CERT_BLOB
});};
T.PCERT_PAIR = function() {return Pointer(Struct('_CERT_PAIR', {
    Forward: T.CERT_BLOB,
    Reverse: T.CERT_BLOB
}));};
T.CRL_ISSUING_DIST_POINT = function() {return Struct('_CRL_ISSUING_DIST_POINT', {
    DistPointName: T.CRL_DIST_POINT_NAME,
    fOnlyContainsUserCerts: T.BOOL,
    fOnlyContainsCACerts: T.BOOL,
    OnlySomeReasonFlags: T.CRYPT_BIT_BLOB,
    fIndirectCRL: T.BOOL
});};
T.PCRL_ISSUING_DIST_POINT = function() {return Pointer(Struct('_CRL_ISSUING_DIST_POINT', {
    DistPointName: T.CRL_DIST_POINT_NAME,
    fOnlyContainsUserCerts: T.BOOL,
    fOnlyContainsCACerts: T.BOOL,
    OnlySomeReasonFlags: T.CRYPT_BIT_BLOB,
    fIndirectCRL: T.BOOL
}));};
T.CERT_GENERAL_SUBTREE = function() {return Struct('_CERT_GENERAL_SUBTREE', {
    Base: T.CERT_ALT_NAME_ENTRY,
    dwMinimum: T.DWORD,
    fMaximum: T.BOOL,
    dwMaximum: T.DWORD
});};
T.PCERT_GENERAL_SUBTREE = function() {return Pointer(Struct('_CERT_GENERAL_SUBTREE', {
    Base: T.CERT_ALT_NAME_ENTRY,
    dwMinimum: T.DWORD,
    fMaximum: T.BOOL,
    dwMaximum: T.DWORD
}));};
T.CERT_NAME_CONSTRAINTS_INFO = function() {return Struct('_CERT_NAME_CONSTRAINTS_INFO', {
    cPermittedSubtree: T.DWORD,
    rgPermittedSubtree: T.PCERT_GENERAL_SUBTREE,
    cExcludedSubtree: T.DWORD,
    rgExcludedSubtree: T.PCERT_GENERAL_SUBTREE
});};
T.PCERT_NAME_CONSTRAINTS_INFO = function() {return Pointer(Struct('_CERT_NAME_CONSTRAINTS_INFO', {
    cPermittedSubtree: T.DWORD,
    rgPermittedSubtree: T.PCERT_GENERAL_SUBTREE,
    cExcludedSubtree: T.DWORD,
    rgExcludedSubtree: T.PCERT_GENERAL_SUBTREE
}));};
T.CRYPT_ATTRIBUTE = function() {return Struct('_CRYPT_ATTRIBUTE', {
    pszObjId: T.LPSTR,
    cValue: T.DWORD,
    rgValue: T.PCRYPT_DATA_BLOB
});};
T.PCRYPT_ATTRIBUTE = function() {return Pointer(Struct('_CRYPT_ATTRIBUTE', {
    pszObjId: T.LPSTR,
    cValue: T.DWORD,
    rgValue: T.PCRYPT_DATA_BLOB
}));};
T.CRYPT_ATTRIBUTES = function() {return Struct('_CRYPT_ATTRIBUTES', {
    cAttr: T.DWORD,
    rgAttr: T.PCRYPT_ATTRIBUTE
});};
T.PCRYPT_ATTRIBUTES = function() {return Pointer(Struct('_CRYPT_ATTRIBUTES', {
    cAttr: T.DWORD,
    rgAttr: T.PCRYPT_ATTRIBUTE
}));};
T.CERT_REQUEST_INFO = function() {return Struct('_CERT_REQUEST_INFO', {
    dwVersion: T.DWORD,
    Subject: T.CERT_NAME_BLOB,
    SubjectPublicKeyInfo: T.CERT_PUBLIC_KEY_INFO,
    cAttribute: T.DWORD,
    rgAttribute: T.PCRYPT_ATTRIBUTE
});};
T.PCERT_REQUEST_INFO = function() {return Pointer(Struct('_CERT_REQUEST_INFO', {
    dwVersion: T.DWORD,
    Subject: T.CERT_NAME_BLOB,
    SubjectPublicKeyInfo: T.CERT_PUBLIC_KEY_INFO,
    cAttribute: T.DWORD,
    rgAttribute: T.PCRYPT_ATTRIBUTE
}));};
T.CERT_KEYGEN_REQUEST_INFO = function() {return Struct('_CERT_KEYGEN_REQUEST_INFO', {
    dwVersion: T.DWORD,
    SubjectPubliceKeyInfo: T.CERT_PUBLIC_KEY_INFO,
    pwszChallengeString: T.LPWSTR
});};
T.PCERT_KEYGEN_REQUEST_INFO = function() {return Pointer(Struct('_CERT_KEYGEN_REQUEST_INFO', {
    dwVersion: T.DWORD,
    SubjectPubliceKeyInfo: T.CERT_PUBLIC_KEY_INFO,
    pwszChallengeString: T.LPWSTR
}));};
T.CERT_SIGNED_CONTENT_INFO = function() {return Struct('_CERT_SIGNED_CONTENT_INFO', {
    ToBeSigned: T.CRYPT_DER_BLOB,
    SignatureAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    Signature: T.CRYPT_BIT_BLOB
});};
T.PCERT_SIGNED_CONTENT_INFO = function() {return Pointer(Struct('_CERT_SIGNED_CONTENT_INFO', {
    ToBeSigned: T.CRYPT_DER_BLOB,
    SignatureAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    Signature: T.CRYPT_BIT_BLOB
}));};
T.CRL_CONTEXT = function() {return Struct('_CRL_CONTEXT', {
    dwCertEncodingType: T.DWORD,
    pbCrlEncoded: Pointer(T.BYTE),
    cbCrlEncoded: T.DWORD,
    pCrlInfo: T.PCRL_INFO,
    hCertStore: T.HCERTSTORE
});};
T.PCRL_CONTEXT = function() {return Pointer(Struct('_CRL_CONTEXT', {
    dwCertEncodingType: T.DWORD,
    pbCrlEncoded: Pointer(T.BYTE),
    cbCrlEncoded: T.DWORD,
    pCrlInfo: T.PCRL_INFO,
    hCertStore: T.HCERTSTORE
}));};
T.PCCRL_CONTEXT = function() {return Pointer(T.CRL_CONTEXT, [['const']]);};
T.CERT_DSS_PARAMETERS = function() {return Struct('_CERT_DSS_PARAMETERS', {
    p: T.CRYPT_UINT_BLOB,
    q: T.CRYPT_UINT_BLOB,
    g: T.CRYPT_UINT_BLOB
});};
T.PCERT_DSS_PARAMETERS = function() {return Pointer(Struct('_CERT_DSS_PARAMETERS', {
    p: T.CRYPT_UINT_BLOB,
    q: T.CRYPT_UINT_BLOB,
    g: T.CRYPT_UINT_BLOB
}));};
T.CERT_DH_PARAMETERS = function() {return Struct('_CERT_DH_PARAMETERS', {
    p: T.CRYPT_UINT_BLOB,
    g: T.CRYPT_UINT_BLOB
});};
T.PCERT_DH_PARAMETERS = function() {return Pointer(Struct('_CERT_DH_PARAMETERS', {
    p: T.CRYPT_UINT_BLOB,
    g: T.CRYPT_UINT_BLOB
}));};
T.CERT_X942_DH_VALIDATION_PARAMS = function() {return Struct('_CERT_X942_DH_VALIDATION_PARAMS', {
    seed: T.CRYPT_BIT_BLOB,
    pgenCounter: T.DWORD
});};
T.PCERT_X942_DH_VALIDATION_PARAMS = function() {return Pointer(Struct('_CERT_X942_DH_VALIDATION_PARAMS', {
    seed: T.CRYPT_BIT_BLOB,
    pgenCounter: T.DWORD
}));};
T.CERT_X942_DH_PARAMETERS = function() {return Struct('_CERT_X942_DH_PARAMETERS', {
    p: T.CRYPT_UINT_BLOB,
    g: T.CRYPT_UINT_BLOB,
    q: T.CRYPT_UINT_BLOB,
    j: T.CRYPT_UINT_BLOB,
    pValidationParams: T.PCERT_X942_DH_VALIDATION_PARAMS
});};
T.PCERT_X942_DH_PARAMETERS = function() {return Pointer(Struct('_CERT_X942_DH_PARAMETERS', {
    p: T.CRYPT_UINT_BLOB,
    g: T.CRYPT_UINT_BLOB,
    q: T.CRYPT_UINT_BLOB,
    j: T.CRYPT_UINT_BLOB,
    pValidationParams: T.PCERT_X942_DH_VALIDATION_PARAMS
}));};
T.CRYPT_X942_OTHER_INFO = function() {return Struct('_CRYPT_X942_OTHER_INFO', {
    pszContentEncryptionObjId: T.LPSTR,
    rgbCounter: ArrayType(T.BYTE, 4),
    rgbKeyLength: ArrayType(T.BYTE, 4),
    PubInfo: T.CRYPT_DATA_BLOB
});};
T.PCRYPT_X942_OTHER_INFO = function() {return Pointer(Struct('_CRYPT_X942_OTHER_INFO', {
    pszContentEncryptionObjId: T.LPSTR,
    rgbCounter: ArrayType(T.BYTE, 4),
    rgbKeyLength: ArrayType(T.BYTE, 4),
    PubInfo: T.CRYPT_DATA_BLOB
}));};
T.CRYPT_RC2_CBC_PARAMETERS = function() {return Struct('_CRYPT_RC2_CBC_PARAMETERS', {
    dwVersion: T.DWORD,
    fIV: T.BOOL,
    rgbIV: ArrayType(T.BYTE, 4)
});};
T.PCRYPT_RC2_CBC_PARAMETERS = function() {return Pointer(Struct('_CRYPT_RC2_CBC_PARAMETERS', {
    dwVersion: T.DWORD,
    fIV: T.BOOL,
    rgbIV: ArrayType(T.BYTE, 4)
}));};
T.CRYPT_SMIME_CAPABILITY = function() {return Struct('_CRYPT_SMIME_CAPABILITY', {
    pszObjId: T.LPSTR,
    Parameters: T.CRYPT_OBJID_BLOB
});};
T.PCRYPT_SMIME_CAPABILITY = function() {return Pointer(Struct('_CRYPT_SMIME_CAPABILITY', {
    pszObjId: T.LPSTR,
    Parameters: T.CRYPT_OBJID_BLOB
}));};
T.CRYPT_SMIME_CAPABILITIES = function() {return Struct('_CRYPT_SMIME_CAPABILITIES', {
    cCapability: T.DWORD,
    rgCapability: T.PCRYPT_SMIME_CAPABILITY
});};
T.PCRYPT_SMIME_CAPABILITIES = function() {return Pointer(Struct('_CRYPT_SMIME_CAPABILITIES', {
    cCapability: T.DWORD,
    rgCapability: T.PCRYPT_SMIME_CAPABILITY
}));};
T.VTableProvStruc = function() {return Struct('_VTableProvStruc', {
    Version: T.DWORD,
    FuncVerifyImage: T.FARPROC,
    FuncReturnhWnd: T.FARPROC,
    dwProvType: T.DWORD,
    pbContextInfo: Pointer(T.BYTE),
    cbContextInfo: T.DWORD,
    pszProvName: T.LPSTR
});};
T.PVTableProvStruc = function() {return Pointer(Struct('_VTableProvStruc', {
    Version: T.DWORD,
    FuncVerifyImage: T.FARPROC,
    FuncReturnhWnd: T.FARPROC,
    dwProvType: T.DWORD,
    pbContextInfo: Pointer(T.BYTE),
    cbContextInfo: T.DWORD,
    pszProvName: T.LPSTR
}));};
T.CERT_PRIVATE_KEY_INFO = function() {return Struct('_CERT_PRIVATE_KEY_INFO', {
    Version: T.DWORD,
    Algorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    PrivateKey: T.CRYPT_DER_BLOB,
    pAttributes: T.PCRYPT_ATTRIBUTES
});};
T.PCERT_PRIVATE_KEY_INFO = function() {return Pointer(Struct('_CERT_PRIVATE_KEY_INFO', {
    Version: T.DWORD,
    Algorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    PrivateKey: T.CRYPT_DER_BLOB,
    pAttributes: T.PCRYPT_ATTRIBUTES
}));};
T.CTL_USAGE = function() {return Struct('_CTL_USAGE', {
    cUsageIdentifier: T.DWORD,
    rgpszUsageIdentifier: Pointer(T.LPSTR)
});};
T.PCTL_USAGE = function() {return Pointer(Struct('_CTL_USAGE', {
    cUsageIdentifier: T.DWORD,
    rgpszUsageIdentifier: Pointer(T.LPSTR)
}));};
T.CERT_ENHKEY_USAGE = function() {return Struct('_CTL_USAGE', {
    cUsageIdentifier: T.DWORD,
    rgpszUsageIdentifier: Pointer(T.LPSTR)
});};
T.PCERT_ENHKEY_USAGE = function() {return Pointer(Struct('_CTL_USAGE', {
    cUsageIdentifier: T.DWORD,
    rgpszUsageIdentifier: Pointer(T.LPSTR)
}));};
T.CTL_ENTRY = function() {return Struct('_CTL_ENTRY', {
    SubjectIdentifier: T.CRYPT_DATA_BLOB,
    cAttribute: T.DWORD,
    rgAttribute: T.PCRYPT_ATTRIBUTE
});};
T.PCTL_ENTRY = function() {return Pointer(Struct('_CTL_ENTRY', {
    SubjectIdentifier: T.CRYPT_DATA_BLOB,
    cAttribute: T.DWORD,
    rgAttribute: T.PCRYPT_ATTRIBUTE
}));};
T.CTL_INFO = function() {return Struct('_CTL_INFO', {
    dwVersion: T.DWORD,
    SubjectUsage: T.CTL_USAGE,
    ListIdentifier: T.CRYPT_DATA_BLOB,
    SequenceNumber: T.CRYPT_INTEGER_BLOB,
    ThisUpdate: T.FILETIME,
    NextUpdate: T.FILETIME,
    SubjectAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    cCTLEntry: T.DWORD,
    rgCTLEntry: T.PCTL_ENTRY,
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
});};
T.PCTL_INFO = function() {return Pointer(Struct('_CTL_INFO', {
    dwVersion: T.DWORD,
    SubjectUsage: T.CTL_USAGE,
    ListIdentifier: T.CRYPT_DATA_BLOB,
    SequenceNumber: T.CRYPT_INTEGER_BLOB,
    ThisUpdate: T.FILETIME,
    NextUpdate: T.FILETIME,
    SubjectAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    cCTLEntry: T.DWORD,
    rgCTLEntry: T.PCTL_ENTRY,
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
}));};
T.CTL_CONTEXT = function() {return Struct('_CTL_CONTEXT', {
    dwMsgAndCertEncodingType: T.DWORD,
    pbCtlEncoded: Pointer(T.BYTE),
    cbCtlEncoded: T.DWORD,
    pCtlInfo: T.PCTL_INFO,
    hCertStore: T.HCERTSTORE,
    hCryptMsg: T.HCRYPTMSG,
    pbCtlContext: Pointer(T.BYTE),
    cbCtlContext: T.DWORD
});};
T.PCTL_CONTEXT = function() {return Pointer(Struct('_CTL_CONTEXT', {
    dwMsgAndCertEncodingType: T.DWORD,
    pbCtlEncoded: Pointer(T.BYTE),
    cbCtlEncoded: T.DWORD,
    pCtlInfo: T.PCTL_INFO,
    hCertStore: T.HCERTSTORE,
    hCryptMsg: T.HCRYPTMSG,
    pbCtlContext: Pointer(T.BYTE),
    cbCtlContext: T.DWORD
}));};
T.PCCTL_CONTEXT = function() {return Pointer(T.CTL_CONTEXT, [['const']]);};
T.CRYPT_TIME_STAMP_REQUEST_INFO = function() {return Struct('_CRYPT_TIME_STAMP_REQUEST_INFO', {
    pszTimeStampAlgorithm: T.LPSTR,
    pszContentType: T.LPSTR,
    Content: T.CRYPT_OBJID_BLOB,
    cAttribute: T.DWORD,
    rgAttribute: T.PCRYPT_ATTRIBUTE
});};
T.PCRYPT_TIME_STAMP_REQUEST_INFO = function() {return Pointer(Struct('_CRYPT_TIME_STAMP_REQUEST_INFO', {
    pszTimeStampAlgorithm: T.LPSTR,
    pszContentType: T.LPSTR,
    Content: T.CRYPT_OBJID_BLOB,
    cAttribute: T.DWORD,
    rgAttribute: T.PCRYPT_ATTRIBUTE
}));};
T.CRYPT_ENROLLMENT_NAME_VALUE_PAIR = function() {return Struct('_CRYPT_ENROLLMENT_NAME_VALUE_PAIR', {
    pwszName: T.LPWSTR,
    pwszValue: T.LPWSTR
});};
T.PCRYPT_ENROLLMENT_NAME_VALUE_PAIR = function() {return Pointer(Struct('_CRYPT_ENROLLMENT_NAME_VALUE_PAIR', {
    pwszName: T.LPWSTR,
    pwszValue: T.LPWSTR
}));};
T.CMSG_SIGNER_INFO = function() {return Struct('_CMSG_SIGNER_INFO', {
    dwVersion: T.DWORD,
    Issuer: T.CERT_NAME_BLOB,
    SerialNumber: T.CRYPT_INTEGER_BLOB,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    HashEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedHash: T.CRYPT_DATA_BLOB,
    AuthAttrs: T.CRYPT_ATTRIBUTES,
    UnauthAttrs: T.CRYPT_ATTRIBUTES
});};
T.PCMSG_SIGNER_INFO = function() {return Pointer(Struct('_CMSG_SIGNER_INFO', {
    dwVersion: T.DWORD,
    Issuer: T.CERT_NAME_BLOB,
    SerialNumber: T.CRYPT_INTEGER_BLOB,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    HashEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedHash: T.CRYPT_DATA_BLOB,
    AuthAttrs: T.CRYPT_ATTRIBUTES,
    UnauthAttrs: T.CRYPT_ATTRIBUTES
}));};
T.CERT_REVOCATION_CRL_INFO = function() {return Struct('_CERT_REVOCATION_CRL_INFO', {
    cbSize: T.DWORD,
    pBaseCrlContext: T.PCCRL_CONTEXT,
    pDeltaCrlContext: T.PCCRL_CONTEXT,
    pCrlEntry: T.PCRL_ENTRY,
    fDeltaCrlEntry: T.BOOL
});};
T.PCERT_REVOCATION_CRL_INFO = function() {return Pointer(Struct('_CERT_REVOCATION_CRL_INFO', {
    cbSize: T.DWORD,
    pBaseCrlContext: T.PCCRL_CONTEXT,
    pDeltaCrlContext: T.PCCRL_CONTEXT,
    pCrlEntry: T.PCRL_ENTRY,
    fDeltaCrlEntry: T.BOOL
}));};
T.CERT_REVOCATION_INFO = function() {return Struct('_CERT_REVOCATION_INFO', {
    cbSize: T.DWORD,
    dwRevocationResult: T.DWORD,
    pszRevocationOid: T.LPCSTR,
    pvOidSpecificInfo: T.LPVOID,
    fHasFreshnessTime: T.BOOL,
    dwFreshnessTime: T.DWORD,
    pCrlInfo: T.PCERT_REVOCATION_CRL_INFO
});};
T.PCERT_REVOCATION_INFO = function() {return Pointer(Struct('_CERT_REVOCATION_INFO', {
    cbSize: T.DWORD,
    dwRevocationResult: T.DWORD,
    pszRevocationOid: T.LPCSTR,
    pvOidSpecificInfo: T.LPVOID,
    fHasFreshnessTime: T.BOOL,
    dwFreshnessTime: T.DWORD,
    pCrlInfo: T.PCERT_REVOCATION_CRL_INFO
}));};
T.CERT_REVOCATION_PARA = function() {return Struct('_CERT_REVOCATION_PARA', {
    cbSize: T.DWORD,
    pIssuerCert: T.PCCERT_CONTEXT,
    cCertStore: T.DWORD,
    rgCertStore: Pointer(T.HCERTSTORE),
    hCrlStore: T.HCERTSTORE,
    pftTimeToUse: T.LPFILETIME
});};
T.PCERT_REVOCATION_PARA = function() {return Pointer(Struct('_CERT_REVOCATION_PARA', {
    cbSize: T.DWORD,
    pIssuerCert: T.PCCERT_CONTEXT,
    cCertStore: T.DWORD,
    rgCertStore: Pointer(T.HCERTSTORE),
    hCrlStore: T.HCERTSTORE,
    pftTimeToUse: T.LPFILETIME
}));};
T.CTL_VERIFY_USAGE_PARA = function() {return Struct('_CTL_VERIFY_USAGE_PARA', {
    cbSize: T.DWORD,
    ListIdentifier: T.CRYPT_DATA_BLOB,
    cCtlStore: T.DWORD,
    rghCtlStore: Pointer(T.HCERTSTORE),
    cSignerStore: T.DWORD,
    rghSignerStore: Pointer(T.HCERTSTORE)
});};
T.PCTL_VERIFY_USAGE_PARA = function() {return Pointer(Struct('_CTL_VERIFY_USAGE_PARA', {
    cbSize: T.DWORD,
    ListIdentifier: T.CRYPT_DATA_BLOB,
    cCtlStore: T.DWORD,
    rghCtlStore: Pointer(T.HCERTSTORE),
    cSignerStore: T.DWORD,
    rghSignerStore: Pointer(T.HCERTSTORE)
}));};
T.CTL_VERIFY_USAGE_STATUS = function() {return Struct('_CTL_VERIFY_USAGE_STATUS', {
    cbSize: T.DWORD,
    dwError: T.DWORD,
    dwFlags: T.DWORD,
    ppCtl: Pointer(T.PCCTL_CONTEXT),
    dwCtlEntryIndex: T.DWORD,
    ppSigner: Pointer(T.PCCERT_CONTEXT),
    dwSignerIndex: T.DWORD
});};
T.PCTL_VERIFY_USAGE_STATUS = function() {return Pointer(Struct('_CTL_VERIFY_USAGE_STATUS', {
    cbSize: T.DWORD,
    dwError: T.DWORD,
    dwFlags: T.DWORD,
    ppCtl: Pointer(T.PCCTL_CONTEXT),
    dwCtlEntryIndex: T.DWORD,
    ppSigner: Pointer(T.PCCERT_CONTEXT),
    dwSignerIndex: T.DWORD
}));};
T.CERT_REVOCATION_STATUS = function() {return Struct('_CERT_REVOCATION_STATUS', {
    cbSize: T.DWORD,
    dwIndex: T.DWORD,
    dwError: T.DWORD,
    dwReason: T.DWORD,
    fHasFreshnessTime: T.BOOL,
    dwFreshnessTime: T.DWORD
});};
T.PCERT_REVOCATION_STATUS = function() {return Pointer(Struct('_CERT_REVOCATION_STATUS', {
    cbSize: T.DWORD,
    dwIndex: T.DWORD,
    dwError: T.DWORD,
    dwReason: T.DWORD,
    fHasFreshnessTime: T.BOOL,
    dwFreshnessTime: T.DWORD
}));};
T.CERT_TRUST_LIST_INFO = function() {return Struct('_CERT_TRUST_LIST_INFO', {
    cbSize: T.DWORD,
    pCtlEntry: T.PCTL_ENTRY,
    pCtlContext: T.PCCTL_CONTEXT
});};
T.PCERT_TRUST_LIST_INFO = function() {return Pointer(Struct('_CERT_TRUST_LIST_INFO', {
    cbSize: T.DWORD,
    pCtlEntry: T.PCTL_ENTRY,
    pCtlContext: T.PCCTL_CONTEXT
}));};
T.CERT_TRUST_STATUS = function() {return Struct('_CERT_TRUST_STATUS', {
    dwErrorStatus: T.DWORD,
    dwInfoStatus: T.DWORD
});};
T.PCERT_TRUST_STATUS = function() {return Pointer(Struct('_CERT_TRUST_STATUS', {
    dwErrorStatus: T.DWORD,
    dwInfoStatus: T.DWORD
}));};
T.CERT_CHAIN_ELEMENT = function() {return Struct('_CERT_CHAIN_ELEMENT', {
    cbSize: T.DWORD,
    pCertContext: T.PCCERT_CONTEXT,
    TrustStatus: T.CERT_TRUST_STATUS,
    pRevocationInfo: T.PCERT_REVOCATION_INFO,
    pIssuanceUsage: T.PCERT_ENHKEY_USAGE,
    pApplicationUsage: T.PCERT_ENHKEY_USAGE,
    pwszExtendedErrorInfo: T.LPCWSTR
});};
T.PCERT_CHAIN_ELEMENT = function() {return Pointer(Struct('_CERT_CHAIN_ELEMENT', {
    cbSize: T.DWORD,
    pCertContext: T.PCCERT_CONTEXT,
    TrustStatus: T.CERT_TRUST_STATUS,
    pRevocationInfo: T.PCERT_REVOCATION_INFO,
    pIssuanceUsage: T.PCERT_ENHKEY_USAGE,
    pApplicationUsage: T.PCERT_ENHKEY_USAGE,
    pwszExtendedErrorInfo: T.LPCWSTR
}));};
T.CERT_SIMPLE_CHAIN = function() {return Struct('_CERT_SIMPLE_CHAIN', {
    cbSize: T.DWORD,
    TrustStatus: T.CERT_TRUST_STATUS,
    cElement: T.DWORD,
    rgpElement: Pointer(T.PCERT_CHAIN_ELEMENT),
    pTrustListInfo: T.PCERT_TRUST_LIST_INFO,
    fHasRevocationFreshnessTime: T.BOOL,
    dwRevocationFreshnessTime: T.DWORD
});};
T.PCERT_SIMPLE_CHAIN = function() {return Pointer(Struct('_CERT_SIMPLE_CHAIN', {
    cbSize: T.DWORD,
    TrustStatus: T.CERT_TRUST_STATUS,
    cElement: T.DWORD,
    rgpElement: Pointer(T.PCERT_CHAIN_ELEMENT),
    pTrustListInfo: T.PCERT_TRUST_LIST_INFO,
    fHasRevocationFreshnessTime: T.BOOL,
    dwRevocationFreshnessTime: T.DWORD
}));};
T.CERT_CHAIN_CONTEXT = function() {return Struct('_CERT_CHAIN_CONTEXT', null);};
T.PCERT_CHAIN_CONTEXT = function() {return Pointer(Struct('_CERT_CHAIN_CONTEXT', null));};
T.PCCERT_CHAIN_CONTEXT = function() {return Pointer(T.CERT_CHAIN_CONTEXT, [['const']]);};
T.CERT_CHAIN_POLICY_PARA = function() {return Struct('_CERT_CHAIN_POLICY_PARA', {
    cbSize: T.DWORD,
    dwFlags: T.DWORD,
    pvExtraPolicyPara: Pointer(null)
});};
T.PCERT_CHAIN_POLICY_PARA = function() {return Pointer(Struct('_CERT_CHAIN_POLICY_PARA', {
    cbSize: T.DWORD,
    dwFlags: T.DWORD,
    pvExtraPolicyPara: Pointer(null)
}));};
T.CERT_CHAIN_POLICY_STATUS = function() {return Struct('_CERT_CHAIN_POLICY_STATUS', {
    cbSize: T.DWORD,
    dwError: T.DWORD,
    lChainIndex: T.LONG,
    lElementIndex: T.LONG,
    pvExtraPolicyStatus: Pointer(null)
});};
T.PCERT_CHAIN_POLICY_STATUS = function() {return Pointer(Struct('_CERT_CHAIN_POLICY_STATUS', {
    cbSize: T.DWORD,
    dwError: T.DWORD,
    lChainIndex: T.LONG,
    lElementIndex: T.LONG,
    pvExtraPolicyStatus: Pointer(null)
}));};
T.AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = function() {return Struct('_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA', {
    cbSize: T.DWORD,
    dwRegPolicySettings: T.DWORD,
    pSignerInfo: T.PCMSG_SIGNER_INFO
});};
T.PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = function() {return Pointer(Struct('_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA', {
    cbSize: T.DWORD,
    dwRegPolicySettings: T.DWORD,
    pSignerInfo: T.PCMSG_SIGNER_INFO
}));};
T.AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = function() {return Struct('_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS', {
    cbSize: T.DWORD,
    fCommercial: T.BOOL
});};
T.PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = function() {return Pointer(Struct('_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS', {
    cbSize: T.DWORD,
    fCommercial: T.BOOL
}));};
T.AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = function() {return Struct('_AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA', {
    cbSize: T.DWORD,
    dwRegPolicySettings: T.DWORD,
    fCommercial: T.BOOL
});};
T.PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = function() {return Pointer(Struct('_AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA', {
    cbSize: T.DWORD,
    dwRegPolicySettings: T.DWORD,
    fCommercial: T.BOOL
}));};
T.HTTPSPolicyCallbackData = function() {return Struct('_HTTPSPolicyCallbackData', {
    __unnamed0: Union('', {
        cbStruct: T.DWORD,
        cbSize: T.DWORD
    }),
    dwAuthType: T.DWORD,
    fdwChecks: T.DWORD,
    pwszServerName: Pointer(T.WCHAR)
});};
T.PHTTPSPolicyCallbackData = function() {return Pointer(Struct('_HTTPSPolicyCallbackData', {
    __unnamed0: Union('', {
        cbStruct: T.DWORD,
        cbSize: T.DWORD
    }),
    dwAuthType: T.DWORD,
    fdwChecks: T.DWORD,
    pwszServerName: Pointer(T.WCHAR)
}));};
T.SSL_EXTRA_CERT_CHAIN_POLICY_PARA = function() {return Struct('_HTTPSPolicyCallbackData', {
    __unnamed0: Union('', {
        cbStruct: T.DWORD,
        cbSize: T.DWORD
    }),
    dwAuthType: T.DWORD,
    fdwChecks: T.DWORD,
    pwszServerName: Pointer(T.WCHAR)
});};
T.PSSL_EXTRA_CERT_CHAIN_POLICY_PARA = function() {return Pointer(Struct('_HTTPSPolicyCallbackData', {
    __unnamed0: Union('', {
        cbStruct: T.DWORD,
        cbSize: T.DWORD
    }),
    dwAuthType: T.DWORD,
    fdwChecks: T.DWORD,
    pwszServerName: Pointer(T.WCHAR)
}));};
T.CERT_USAGE_MATCH = function() {return Struct('_CERT_USAGE_MATCH', {
    dwType: T.DWORD,
    Usage: T.CERT_ENHKEY_USAGE
});};
T.PCERT_USAGE_MATCH = function() {return Pointer(Struct('_CERT_USAGE_MATCH', {
    dwType: T.DWORD,
    Usage: T.CERT_ENHKEY_USAGE
}));};
T.CTL_USAGE_MATCH = function() {return Struct('_CTL_USAGE_MATCH', {
    dwType: T.DWORD,
    Usage: T.CTL_USAGE
});};
T.PCTL_USAGE_MATCH = function() {return Pointer(Struct('_CTL_USAGE_MATCH', {
    dwType: T.DWORD,
    Usage: T.CTL_USAGE
}));};
T.CERT_CHAIN_PARA = function() {return Struct('_CERT_CHAIN_PARA', {
    cbSize: T.DWORD,
    RequestedUsage: T.CERT_USAGE_MATCH
});};
T.PCERT_CHAIN_PARA = function() {return Pointer(Struct('_CERT_CHAIN_PARA', {
    cbSize: T.DWORD,
    RequestedUsage: T.CERT_USAGE_MATCH
}));};
T.CERT_SYSTEM_STORE_INFO = function() {return Struct('_CERT_SYSTEM_STORE_INFO', {
    cbSize: T.DWORD
});};
T.PCERT_SYSTEM_STORE_INFO = function() {return Pointer(Struct('_CERT_SYSTEM_STORE_INFO', {
    cbSize: T.DWORD
}));};
T.CERT_PHYSICAL_STORE_INFO = function() {return Struct('_CERT_PHYSICAL_STORE_INFO', {
    cbSize: T.DWORD,
    pszOpenStoreProvider: T.LPSTR,
    dwOpenEncodingType: T.DWORD,
    dwOpenFlags: T.DWORD,
    OpenParameters: T.CRYPT_DATA_BLOB,
    dwFlags: T.DWORD,
    dwPriority: T.DWORD
});};
T.PCERT_PHYSICAL_STORE_INFO = function() {return Pointer(Struct('_CERT_PHYSICAL_STORE_INFO', {
    cbSize: T.DWORD,
    pszOpenStoreProvider: T.LPSTR,
    dwOpenEncodingType: T.DWORD,
    dwOpenFlags: T.DWORD,
    OpenParameters: T.CRYPT_DATA_BLOB,
    dwFlags: T.DWORD,
    dwPriority: T.DWORD
}));};
T.CERT_SYSTEM_STORE_RELOCATE_PARA = function() {return Struct('_CERT_SYSTEM_STORE_RELOCATE_PARA', {
    __unnamed0: Union('', {
        hKeyBase: T.HKEY,
        pvBase: Pointer(null)
    }),
    __unnamed1: Union('', {
        pvSystemStore: Pointer(null),
        pszSystemStore: T.LPCSTR,
        pwszSystemStore: T.LPCWSTR
    })
});};
T.PCERT_SYSTEM_STORE_RELOCATE_PARA = function() {return Pointer(Struct('_CERT_SYSTEM_STORE_RELOCATE_PARA', {
    __unnamed0: Union('', {
        hKeyBase: T.HKEY,
        pvBase: Pointer(null)
    }),
    __unnamed1: Union('', {
        pvSystemStore: Pointer(null),
        pszSystemStore: T.LPCSTR,
        pwszSystemStore: T.LPCWSTR
    })
}));};
T.PFN_CERT_ENUM_SYSTEM_STORE_LOCATION = function() {return Pointer(Fn(T.BOOL, [[T.LPCWSTR, 'pwszStoreLocation'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved'], [Pointer(null), 'pvArg']]), [['stdcall']]);};
T.PFN_CERT_ENUM_SYSTEM_STORE = function() {return Pointer(Fn(T.BOOL, [[Pointer(null), 'pvSystemStore'], [T.DWORD, 'dwFlags'], [T.PCERT_SYSTEM_STORE_INFO, 'pStoreInfo'], [Pointer(null), 'pvReserved'], [Pointer(null), 'pvArg']]), [['stdcall']]);};
T.PFN_CERT_ENUM_PHYSICAL_STORE = function() {return Pointer(Fn(T.BOOL, [[Pointer(null), 'pvSystemStore'], [T.DWORD, 'dwFlags'], [T.LPCWSTR, 'pwszStoreName'], [T.PCERT_PHYSICAL_STORE_INFO, 'pStoreInfo'], [Pointer(null), 'pvReserved'], [Pointer(null), 'pvArg']]), [['stdcall']]);};
T.PFN_CRYPT_ALLOC = function() {return Pointer(Fn(T.LPVOID, [[T.size_t, 'cbsize']]), [['alloc_size', {"__rule":"constant","_0":"1"}], ['stdcall']]);};
T.PFN_CRYPT_FREE = function() {return Pointer(Fn(null, [[T.LPVOID, 'pv']]), [['stdcall']]);};
T.CRYPT_ENCODE_PARA = function() {return Struct('_CRYPT_ENCODE_PARA', {
    cbSize: T.DWORD,
    pfnAlloc: T.PFN_CRYPT_ALLOC,
    pfnFree: T.PFN_CRYPT_FREE
});};
T.PCRYPT_ENCODE_PARA = function() {return Pointer(Struct('_CRYPT_ENCODE_PARA', {
    cbSize: T.DWORD,
    pfnAlloc: T.PFN_CRYPT_ALLOC,
    pfnFree: T.PFN_CRYPT_FREE
}));};
T.CRYPT_DECODE_PARA = function() {return Struct('_CRYPT_DECODE_PARA', {
    cbSize: T.DWORD,
    pfnAlloc: T.PFN_CRYPT_ALLOC,
    pfnFree: T.PFN_CRYPT_FREE
});};
T.PCRYPT_DECODE_PARA = function() {return Pointer(Struct('_CRYPT_DECODE_PARA', {
    cbSize: T.DWORD,
    pfnAlloc: T.PFN_CRYPT_ALLOC,
    pfnFree: T.PFN_CRYPT_FREE
}));};
T.CERT_STORE_PROV_INFO = function() {return Struct('_CERT_STORE_PROV_INFO', {
    cbSize: T.DWORD,
    cStoreProvFunc: T.DWORD,
    rgpvStoreProvFunc: Pointer(Pointer(null)),
    hStoreProv: T.HCERTSTOREPROV,
    dwStoreProvFlags: T.DWORD,
    hStoreProvFuncAddr2: T.HCRYPTOIDFUNCADDR
});};
T.PCERT_STORE_PROV_INFO = function() {return Pointer(Struct('_CERT_STORE_PROV_INFO', {
    cbSize: T.DWORD,
    cStoreProvFunc: T.DWORD,
    rgpvStoreProvFunc: Pointer(Pointer(null)),
    hStoreProv: T.HCERTSTOREPROV,
    dwStoreProvFlags: T.DWORD,
    hStoreProvFuncAddr2: T.HCRYPTOIDFUNCADDR
}));};
T.PFN_CERT_DLL_OPEN_STORE_PROV_FUNC = function() {return Pointer(Fn(T.BOOL, [[T.LPCSTR, 'lpszStoreProvider'], [T.DWORD, 'dwEncodingType'], [T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvPara'], [T.HCERTSTORE, 'hCertStore'], [T.PCERT_STORE_PROV_INFO, 'pStoreProvInfo']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_CLOSE = function() {return Pointer(Fn(null, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.DWORD, 'dwFlags']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_READ_CERT = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCERT_CONTEXT, 'pStoreCertContext'], [T.DWORD, 'dwFlags'], [Pointer(T.PCCERT_CONTEXT), 'ppProvCertContext']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_WRITE_CERT = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwFlags']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_DELETE_CERT = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwFlags']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_SET_CERT_PROPERTY = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_READ_CRL = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCRL_CONTEXT, 'pStoreCrlContext'], [T.DWORD, 'dwFlags'], [Pointer(T.PCCRL_CONTEXT), 'ppProvCrlContext']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_WRITE_CRL = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCRL_CONTEXT, 'pCrlContext'], [T.DWORD, 'dwFlags']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_DELETE_CRL = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCRL_CONTEXT, 'pCrlContext'], [T.DWORD, 'dwFlags']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_SET_CRL_PROPERTY = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCRL_CONTEXT, 'pCrlContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_READ_CTL = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCTL_CONTEXT, 'pStoreCtlContext'], [T.DWORD, 'dwFlags'], [Pointer(T.PCCTL_CONTEXT), 'ppProvCtlContext']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_WRITE_CTL = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCTL_CONTEXT, 'pCtlContext'], [T.DWORD, 'dwFlags']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_DELETE_CTL = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCTL_CONTEXT, 'pCtlContext'], [T.DWORD, 'dwFlags']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_SET_CTL_PROPERTY = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCTL_CONTEXT, 'pCtlContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_CONTROL = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwCtrlType'], [Pointer(null), 'pvCtrlPara']]), [['stdcall']]);};
T.CERT_STORE_PROV_FIND_INFO = function() {return Struct('_CERT_STORE_PROV_FIND_INFO', {
    cbSize: T.DWORD,
    dwMsgAndCertEncodingType: T.DWORD,
    dwFindFlags: T.DWORD,
    dwFindType: T.DWORD,
    pvFindPara: Pointer(null)
});};
T.PCERT_STORE_PROV_FIND_INFO = function() {return Pointer(Struct('_CERT_STORE_PROV_FIND_INFO', {
    cbSize: T.DWORD,
    dwMsgAndCertEncodingType: T.DWORD,
    dwFindFlags: T.DWORD,
    dwFindType: T.DWORD,
    pvFindPara: Pointer(null)
}));};
T.CCERT_STORE_PROV_FIND_INFO = function() {return T.CERT_STORE_PROV_FIND_INFO;};
T.PCCERT_STORE_PROV_FIND_INFO = function() {return Pointer(T.CERT_STORE_PROV_FIND_INFO, [['const']]);};
T.PFN_CERT_STORE_PROV_FIND_CERT = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCERT_STORE_PROV_FIND_INFO, 'pFindInfo'], [T.PCCERT_CONTEXT, 'pPrevCertContext'], [T.DWORD, 'dwFlags'], [Pointer(Pointer(null)), 'ppvStoreProvFindInfo'], [Pointer(T.PCCERT_CONTEXT), 'ppProvCertContext']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_FREE_FIND_CERT = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCERT_CONTEXT, 'pCertContext'], [Pointer(null), 'pvStoreProvFindInfo'], [T.DWORD, 'dwFlags']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_GET_CERT_PROPERTY = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData'], [Pointer(T.DWORD), 'pcbData']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_FIND_CRL = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCERT_STORE_PROV_FIND_INFO, 'pFindInfo'], [T.PCCRL_CONTEXT, 'pPrevCrlContext'], [T.DWORD, 'dwFlags'], [Pointer(Pointer(null)), 'ppvStoreProvFindInfo'], [Pointer(T.PCCRL_CONTEXT), 'ppProvCrlContext']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_FREE_FIND_CRL = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCRL_CONTEXT, 'pCrlContext'], [Pointer(null), 'pvStoreProvFindInfo'], [T.DWORD, 'dwFlags']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_GET_CRL_PROPERTY = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCRL_CONTEXT, 'pCrlContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData'], [Pointer(T.DWORD), 'pcbData']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_FIND_CTL = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCTL_CONTEXT, 'pCtlContext'], [Pointer(null), 'pvStoreProvFindInfo'], [T.DWORD, 'dwFlags']]), [['stdcall']]);};
T.PFN_CERT_STORE_PROV_GET_CTL_PROPERTY = function() {return Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCTL_CONTEXT, 'pCtlContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData']]), [['stdcall']]);};
T.CERT_CREATE_CONTEXT_PARA = function() {return Struct('_CERT_CREATE_CONTEXT_PARA', {
    cbSize: T.DWORD,
    pfnFree: T.PFN_CRYPT_FREE,
    pvFree: Pointer(null)
});};
T.PCERT_CREATE_CONTEXT_PARA = function() {return Pointer(Struct('_CERT_CREATE_CONTEXT_PARA', {
    cbSize: T.DWORD,
    pfnFree: T.PFN_CRYPT_FREE,
    pvFree: Pointer(null)
}));};
T.CRYPT_OID_FUNC_ENTRY = function() {return Struct('_CRYPT_OID_FUNC_ENTRY', {
    pszOID: T.LPCSTR,
    pvFuncAddr: Pointer(null)
});};
T.PCRYPT_OID_FUNC_ENTRY = function() {return Pointer(Struct('_CRYPT_OID_FUNC_ENTRY', {
    pszOID: T.LPCSTR,
    pvFuncAddr: Pointer(null)
}));};
T.PFN_CRYPT_ENUM_OID_FUNC = function() {return Pointer(Fn(T.BOOL, [[T.DWORD, 'dwEncodingType'], [T.LPCSTR, 'pszFuncName'], [T.LPCSTR, 'pszOID'], [T.DWORD, 'cValue'], [Pointer(T.DWORD), 'rgdwValueType'], [Pointer(T.LPCWSTR), 'rgpwszValueName'], [Pointer(Pointer(T.BYTE)), 'rgpbValueData'], [Pointer(T.DWORD), 'rgcbValueData'], [Pointer(null), 'pvArg']]), [['stdcall']]);};
T.CRYPT_OID_INFO = function() {return Struct('_CRYPT_OID_INFO', {
    cbSize: T.DWORD,
    pszOID: T.LPCSTR,
    pwszName: T.LPCWSTR,
    dwGroupId: T.DWORD,
    __unnamed0: Union('', {
        dwValue: T.DWORD,
        Algid: T.ALG_ID,
        dwLength: T.DWORD
    }),
    ExtraInfo: T.CRYPT_DATA_BLOB
});};
T.PCRYPT_OID_INFO = function() {return Pointer(Struct('_CRYPT_OID_INFO', {
    cbSize: T.DWORD,
    pszOID: T.LPCSTR,
    pwszName: T.LPCWSTR,
    dwGroupId: T.DWORD,
    __unnamed0: Union('', {
        dwValue: T.DWORD,
        Algid: T.ALG_ID,
        dwLength: T.DWORD
    }),
    ExtraInfo: T.CRYPT_DATA_BLOB
}));};
T.CCRYPT_OID_INFO = function() {return T.CRYPT_OID_INFO;};
T.PCCRYPT_OID_INFO = function() {return Pointer(T.CRYPT_OID_INFO, [['const']]);};
T.PFN_CRYPT_ENUM_OID_INFO = function() {return Pointer(Fn(T.BOOL, [[T.PCCRYPT_OID_INFO, 'pInfo'], [Pointer(null), 'pvArg']]), [['stdcall']]);};
T.CRYPT_SIGN_MESSAGE_PARA = function() {return Struct('_CRYPT_SIGN_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgEncodingType: T.DWORD,
    pSigningCert: T.PCCERT_CONTEXT,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null),
    cMsgCert: T.DWORD,
    rgpMsgCert: Pointer(T.PCCERT_CONTEXT),
    cMsgCrl: T.DWORD,
    rgpMsgCrl: Pointer(T.PCCRL_CONTEXT),
    cAuthAttr: T.DWORD,
    rgAuthAttr: T.PCRYPT_ATTRIBUTE,
    cUnauthAttr: T.DWORD,
    rgUnauthAttr: T.PCRYPT_ATTRIBUTE,
    dwFlags: T.DWORD,
    dwInnerContentType: T.DWORD
});};
T.PCRYPT_SIGN_MESSAGE_PARA = function() {return Pointer(Struct('_CRYPT_SIGN_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgEncodingType: T.DWORD,
    pSigningCert: T.PCCERT_CONTEXT,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null),
    cMsgCert: T.DWORD,
    rgpMsgCert: Pointer(T.PCCERT_CONTEXT),
    cMsgCrl: T.DWORD,
    rgpMsgCrl: Pointer(T.PCCRL_CONTEXT),
    cAuthAttr: T.DWORD,
    rgAuthAttr: T.PCRYPT_ATTRIBUTE,
    cUnauthAttr: T.DWORD,
    rgUnauthAttr: T.PCRYPT_ATTRIBUTE,
    dwFlags: T.DWORD,
    dwInnerContentType: T.DWORD
}));};
T.PFN_CRYPT_GET_SIGNER_CERTIFICATE = function() {return Pointer(Fn(T.PCCERT_CONTEXT, [[Pointer(null), 'pvArg'], [T.DWORD, 'dwCertEncodingType'], [T.PCERT_INFO, 'pSignerId'], [T.HCERTSTORE, 'hMsgCertStore']]), [['stdcall']]);};
T.CRYPT_VERIFY_MESSAGE_PARA = function() {return Struct('_CRYPT_VERIFY_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgAndCertEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    pfnGetSignerCertificate: T.PFN_CRYPT_GET_SIGNER_CERTIFICATE,
    pvGetArg: Pointer(null)
});};
T.PCRYPT_VERIFY_MESSAGE_PARA = function() {return Pointer(Struct('_CRYPT_VERIFY_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgAndCertEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    pfnGetSignerCertificate: T.PFN_CRYPT_GET_SIGNER_CERTIFICATE,
    pvGetArg: Pointer(null)
}));};
T.CRYPT_ENCRYPT_MESSAGE_PARA = function() {return Struct('_CRYPT_ENCRYPT_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    ContentEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: Pointer(null),
    dwFlags: T.DWORD,
    dwInnerContentType: T.DWORD
});};
T.PCRYPT_ENCRYPT_MESSAGE_PARA = function() {return Pointer(Struct('_CRYPT_ENCRYPT_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    ContentEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: Pointer(null),
    dwFlags: T.DWORD,
    dwInnerContentType: T.DWORD
}));};
T.CRYPT_DECRYPT_MESSAGE_PARA = function() {return Struct('_CRYPT_DECRYPT_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgAndCertEncodingType: T.DWORD,
    cCertStore: T.DWORD,
    rghCertStore: Pointer(T.HCERTSTORE)
});};
T.PCRYPT_DECRYPT_MESSAGE_PARA = function() {return Pointer(Struct('_CRYPT_DECRYPT_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgAndCertEncodingType: T.DWORD,
    cCertStore: T.DWORD,
    rghCertStore: Pointer(T.HCERTSTORE)
}));};
T.CRYPT_HASH_MESSAGE_PARA = function() {return Struct('_CRYPT_HASH_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null)
});};
T.PCRYPT_HASH_MESSAGE_PARA = function() {return Pointer(Struct('_CRYPT_HASH_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null)
}));};
T.CRYPT_KEY_SIGN_MESSAGE_PARA = function() {return Struct('_CRYPT_KEY_SIGN_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgAndCertEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null)
});};
T.PCRYPT_KEY_SIGN_MESSAGE_PARA = function() {return Pointer(Struct('_CRYPT_KEY_SIGN_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgAndCertEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null)
}));};
T.CRYPT_KEY_VERIFY_MESSAGE_PARA = function() {return Struct('_CRYPT_KEY_VERIFY_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY
});};
T.PCRYPT_KEY_VERIFY_MESSAGE_PARA = function() {return Pointer(Struct('_CRYPT_KEY_VERIFY_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY
}));};
T.CRYPT_URL_ARRAY = function() {return Struct('_CRYPT_URL_ARRAY', {
    cUrl: T.DWORD,
    rgwszUrl: Pointer(T.LPWSTR)
});};
T.PCRYPT_URL_ARRAY = function() {return Pointer(Struct('_CRYPT_URL_ARRAY', {
    cUrl: T.DWORD,
    rgwszUrl: Pointer(T.LPWSTR)
}));};
T.CRYPT_URL_INFO = function() {return Struct('_CRYPT_URL_INFO', {
    cbSize: T.DWORD,
    dwSyncDeltaTime: T.DWORD,
    cGroup: T.DWORD,
    rgcGroupEntry: Pointer(T.DWORD)
});};
T.PCRYPT_URL_INFO = function() {return Pointer(Struct('_CRYPT_URL_INFO', {
    cbSize: T.DWORD,
    dwSyncDeltaTime: T.DWORD,
    cGroup: T.DWORD,
    rgcGroupEntry: Pointer(T.DWORD)
}));};
T.HCRYPTASYNC = function() {return T.HANDLE;};
T.PHCRYPTASYNC = function() {return Pointer(T.HANDLE);};
T.PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = function() {return Pointer(Fn(null, [[T.LPSTR, 'pszParamOid'], [T.LPVOID, 'pvParam']]), [['stdcall']]);};
T.PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = function() {return Pointer(Fn(null, [[Pointer(null), 'pvCompletion'], [T.DWORD, 'dwCompletionCode'], [T.LPCSTR, 'pszURL'], [T.LPSTR, 'pszObjectOid'], [Pointer(null), 'pvObject']]), [['stdcall']]);};
T.CRYPT_ASYNC_RETRIEVAL_COMPLETION = function() {return Struct('_CRYPT_ASYNC_RETRIEVAL_COMPLETION', {
    pfnCompletion: T.PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC,
    pvCompletion: Pointer(null)
});};
T.PCRYPT_ASYNC_RETRIEVAL_COMPLETION = function() {return Pointer(Struct('_CRYPT_ASYNC_RETRIEVAL_COMPLETION', {
    pfnCompletion: T.PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC,
    pvCompletion: Pointer(null)
}));};
T.PFN_CANCEL_ASYNC_RETRIEVAL_FUNC = function() {return Pointer(Fn(T.BOOL, [[T.HCRYPTASYNC, 'hAsyncRetrieve']]), [['stdcall']]);};
T.CRYPT_BLOB_ARRAY = function() {return Struct('_CRYPT_BLOB_ARRAY', {
    cBlob: T.DWORD,
    rgBlob: T.PCRYPT_DATA_BLOB
});};
T.PCRYPT_BLOB_ARRAY = function() {return Pointer(Struct('_CRYPT_BLOB_ARRAY', {
    cBlob: T.DWORD,
    rgBlob: T.PCRYPT_DATA_BLOB
}));};
T.CRYPT_CREDENTIALS = function() {return Struct('_CRYPT_CREDENTIALS', {
    cbSize: T.DWORD,
    pszCredentialsOid: T.LPCSTR,
    pvCredentials: T.LPVOID
});};
T.PCRYPT_CREDENTIALS = function() {return Pointer(Struct('_CRYPT_CREDENTIALS', {
    cbSize: T.DWORD,
    pszCredentialsOid: T.LPCSTR,
    pvCredentials: T.LPVOID
}));};
T.CRYPT_PASSWORD_CREDENTIALSA = function() {return Struct('_CRYPT_PASSWORD_CREDENTIALSA', {
    cbSize: T.DWORD,
    pszUsername: T.LPSTR,
    pszPassword: T.LPSTR
});};
T.PCRYPT_PASSWORD_CREDENTIALSA = function() {return Pointer(Struct('_CRYPT_PASSWORD_CREDENTIALSA', {
    cbSize: T.DWORD,
    pszUsername: T.LPSTR,
    pszPassword: T.LPSTR
}));};
T.CRYPT_PASSWORD_CREDENTIALSW = function() {return Struct('_CRYPT_PASSWORD_CREDENTIALSW', {
    cbSize: T.DWORD,
    pszUsername: T.LPWSTR,
    pszPassword: T.LPWSTR
});};
T.PCRYPT_PASSWORD_CREDENTIALSW = function() {return Pointer(Struct('_CRYPT_PASSWORD_CREDENTIALSW', {
    cbSize: T.DWORD,
    pszUsername: T.LPWSTR,
    pszPassword: T.LPWSTR
}));};
T.CRYPT_RETRIEVE_AUX_INFO = function() {return Struct('_CRYPT_RETRIEVE_AUX_INFO', {
    cbSize: T.DWORD,
    pLastSyncTime: Pointer(T.FILETIME),
    dwMaxUrlRetrievalByteCount: T.DWORD
});};
T.PCRYPT_RETRIEVE_AUX_INFO = function() {return Pointer(Struct('_CRYPT_RETRIEVE_AUX_INFO', {
    cbSize: T.DWORD,
    pLastSyncTime: Pointer(T.FILETIME),
    dwMaxUrlRetrievalByteCount: T.DWORD
}));};
T.PFN_FREE_ENCODED_OBJECT_FUNC = function() {return Pointer(Fn(null, [[T.LPCSTR, 'pszObjectOid'], [T.PCRYPT_BLOB_ARRAY, 'pObject'], [Pointer(null), 'pvFreeContext']]), [['stdcall']]);};
T.PFN_CRYPT_CANCEL_RETRIEVAL = function() {return Pointer(Fn(T.BOOL, [[T.DWORD, 'dwFlags'], [Pointer(null), 'pvArg']]), [['stdcall']]);};
T.CERT_CRL_CONTEXT_PAIR = function() {return Struct('_CERT_CRL_CONTEXT_PAIR', {
    pCertContext: T.PCCERT_CONTEXT,
    pCrlContext: T.PCCRL_CONTEXT
});};
T.PCERT_CRL_CONTEXT_PAIR = function() {return Pointer(Struct('_CERT_CRL_CONTEXT_PAIR', {
    pCertContext: T.PCCERT_CONTEXT,
    pCrlContext: T.PCCRL_CONTEXT
}));};
T.PCCERT_CRL_CONTEXT_PAIR = function() {return Pointer(T.CERT_CRL_CONTEXT_PAIR, [['const']]);};
T.CRL_FIND_ISSUED_FOR_PARA = function() {return Struct('_CRL_FIND_ISSUED_FOR_PARA', {
    pSubjectCert: T.PCCERT_CONTEXT,
    pIssuerCert: T.PCCERT_CONTEXT
});};
T.PCRL_FIND_ISSUED_FOR_PARA = function() {return Pointer(Struct('_CRL_FIND_ISSUED_FOR_PARA', {
    pSubjectCert: T.PCCERT_CONTEXT,
    pIssuerCert: T.PCCERT_CONTEXT
}));};
T.CTL_FIND_USAGE_PARA = function() {return Struct('_CTL_FIND_USAGE_PARA', {
    cbSize: T.DWORD,
    SubjectUsage: T.CTL_USAGE,
    ListIdentifier: T.CRYPT_DATA_BLOB,
    pSigner: T.PCERT_INFO
});};
T.PCTL_FIND_USAGE_PARA = function() {return Pointer(Struct('_CTL_FIND_USAGE_PARA', {
    cbSize: T.DWORD,
    SubjectUsage: T.CTL_USAGE,
    ListIdentifier: T.CRYPT_DATA_BLOB,
    pSigner: T.PCERT_INFO
}));};
T.CTL_FIND_SUBJECT_PARA = function() {return Struct('_CTL_FIND_SUBJECT_PARA', {
    cbSize: T.DWORD,
    pUsagePara: T.PCTL_FIND_USAGE_PARA,
    dwSubjectType: T.DWORD,
    pvSubject: Pointer(null)
});};
T.PCTL_FIND_SUBJECT_PARA = function() {return Pointer(Struct('_CTL_FIND_SUBJECT_PARA', {
    cbSize: T.DWORD,
    pUsagePara: T.PCTL_FIND_USAGE_PARA,
    dwSubjectType: T.DWORD,
    pvSubject: Pointer(null)
}));};
T.HCERTCHAINENGINE = function() {return T.HANDLE;};
T.CERT_CHAIN_ENGINE_CONFIG = function() {return Struct('_CERT_CHAIN_ENGINE_CONFIG', {
    cbSize: T.DWORD,
    hRestrictedRoot: T.HCERTSTORE,
    hRestrictedTrust: T.HCERTSTORE,
    hRestrictedOther: T.HCERTSTORE,
    cAdditionalStore: T.DWORD,
    rghAdditionalStore: Pointer(T.HCERTSTORE),
    dwFlags: T.DWORD,
    dwUrlRetrievalTimeout: T.DWORD,
    MaximumCachedCertificates: T.DWORD,
    CycleDetectionModulus: T.DWORD,
    hExclusiveRoot: T.HCERTSTORE,
    hExclusiveRootTrustedPeople: T.HCERTSTORE
});};
T.PCERT_CHAIN_ENGINE_CONFIG = function() {return Pointer(Struct('_CERT_CHAIN_ENGINE_CONFIG', {
    cbSize: T.DWORD,
    hRestrictedRoot: T.HCERTSTORE,
    hRestrictedTrust: T.HCERTSTORE,
    hRestrictedOther: T.HCERTSTORE,
    cAdditionalStore: T.DWORD,
    rghAdditionalStore: Pointer(T.HCERTSTORE),
    dwFlags: T.DWORD,
    dwUrlRetrievalTimeout: T.DWORD,
    MaximumCachedCertificates: T.DWORD,
    CycleDetectionModulus: T.DWORD,
    hExclusiveRoot: T.HCERTSTORE,
    hExclusiveRootTrustedPeople: T.HCERTSTORE
}));};
T.PFN_CMSG_STREAM_OUTPUT = function() {return Pointer(Fn(T.BOOL, [[Pointer(null), 'pvArg'], [Pointer(T.BYTE), 'pbData'], [T.DWORD, 'cbData'], [T.BOOL, 'fFinal']]), [['stdcall']]);};
T.CMSG_STREAM_INFO = function() {return Struct('_CMSG_STREAM_INFO', {
    cbContent: T.DWORD,
    pfnStreamOutput: T.PFN_CMSG_STREAM_OUTPUT,
    pvArg: Pointer(null)
});};
T.PCMSG_STREAM_INFO = function() {return Pointer(Struct('_CMSG_STREAM_INFO', {
    cbContent: T.DWORD,
    pfnStreamOutput: T.PFN_CMSG_STREAM_OUTPUT,
    pvArg: Pointer(null)
}));};
T.CERT_ISSUER_SERIAL_NUMBER = function() {return Struct('_CERT_ISSUER_SERIAL_NUMBER', {
    Issuer: T.CERT_NAME_BLOB,
    SerialNumber: T.CRYPT_INTEGER_BLOB
});};
T.PCERT_ISSUER_SERIAL_NUMBER = function() {return Pointer(Struct('_CERT_ISSUER_SERIAL_NUMBER', {
    Issuer: T.CERT_NAME_BLOB,
    SerialNumber: T.CRYPT_INTEGER_BLOB
}));};
T.CERT_ID = function() {return Struct('_CERT_ID', {
    dwIdChoice: T.DWORD,
    __unnamed0: Union('', {
        IssuerSerialNumber: T.CERT_ISSUER_SERIAL_NUMBER,
        KeyId: T.CRYPT_HASH_BLOB,
        HashId: T.CRYPT_HASH_BLOB
    })
});};
T.PCERT_ID = function() {return Pointer(Struct('_CERT_ID', {
    dwIdChoice: T.DWORD,
    __unnamed0: Union('', {
        IssuerSerialNumber: T.CERT_ISSUER_SERIAL_NUMBER,
        KeyId: T.CRYPT_HASH_BLOB,
        HashId: T.CRYPT_HASH_BLOB
    })
}));};
T.CMSG_SIGNER_ENCODE_INFO = function() {return Struct('_CMSG_SIGNER_ENCODE_INFO', {
    cbSize: T.DWORD,
    pCertInfo: T.PCERT_INFO,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null),
    cAuthAttr: T.DWORD,
    rgAuthAttr: T.PCRYPT_ATTRIBUTE,
    cUnauthAttr: T.DWORD,
    rgUnauthAttr: T.PCRYPT_ATTRIBUTE
});};
T.PCMSG_SIGNER_ENCODE_INFO = function() {return Pointer(Struct('_CMSG_SIGNER_ENCODE_INFO', {
    cbSize: T.DWORD,
    pCertInfo: T.PCERT_INFO,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null),
    cAuthAttr: T.DWORD,
    rgAuthAttr: T.PCRYPT_ATTRIBUTE,
    cUnauthAttr: T.DWORD,
    rgUnauthAttr: T.PCRYPT_ATTRIBUTE
}));};
T.CMSG_SIGNED_ENCODE_INFO = function() {return Struct('_CMSG_SIGNED_ENCODE_INFO', {
    cbSize: T.DWORD,
    cSigners: T.DWORD,
    rgSigners: T.PCMSG_SIGNER_ENCODE_INFO,
    cCertEncoded: T.DWORD,
    rgCertEncoded: T.PCERT_BLOB,
    cCrlEncoded: T.DWORD,
    rgCrlEncoded: T.PCRL_BLOB
});};
T.PCMSG_SIGNED_ENCODE_INFO = function() {return Pointer(Struct('_CMSG_SIGNED_ENCODE_INFO', {
    cbSize: T.DWORD,
    cSigners: T.DWORD,
    rgSigners: T.PCMSG_SIGNER_ENCODE_INFO,
    cCertEncoded: T.DWORD,
    rgCertEncoded: T.PCERT_BLOB,
    cCrlEncoded: T.DWORD,
    rgCrlEncoded: T.PCRL_BLOB
}));};
T.CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = function() {return Struct('_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO', {
    cbSize: T.DWORD,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: Pointer(null),
    hCryptProv: T.HCRYPTPROV_LEGACY,
    RecipientPublicKey: T.CRYPT_BIT_BLOB,
    RecipientId: T.CERT_ID
});};
T.PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = function() {return Pointer(Struct('_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO', {
    cbSize: T.DWORD,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: Pointer(null),
    hCryptProv: T.HCRYPTPROV_LEGACY,
    RecipientPublicKey: T.CRYPT_BIT_BLOB,
    RecipientId: T.CERT_ID
}));};
T.CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = function() {return Struct('_CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO', {
    cbSize: T.DWORD,
    RecipientPublicKey: T.CRYPT_BIT_BLOB,
    RecipientId: T.CERT_ID,
    Date: T.FILETIME,
    pOtherAttr: T.PCRYPT_ATTRIBUTE_TYPE_VALUE
});};
T.PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = function() {return Pointer(Struct('_CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO', {
    cbSize: T.DWORD,
    RecipientPublicKey: T.CRYPT_BIT_BLOB,
    RecipientId: T.CERT_ID,
    Date: T.FILETIME,
    pOtherAttr: T.PCRYPT_ATTRIBUTE_TYPE_VALUE
}));};
T.CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = function() {return Struct('_CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO', {
    cbSize: T.DWORD,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: Pointer(null),
    KeyWrapAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyWrapAuxInfo: Pointer(null),
    hCryptProv: T.HCRYPTPROV_LEGACY,
    dwKeySpec: T.DWORD,
    dwKeyChoice: T.DWORD,
    __unnamed0: Union('', {
        pEphemeralAlgorithm: T.PCRYPT_ALGORITHM_IDENTIFIER,
        pSenderId: T.PCERT_ID
    }),
    UserKeyingMaterial: T.CRYPT_DATA_BLOB,
    cRecipientEncryptedKeys: T.DWORD,
    rgpRecipientEncryptedKeys: Pointer(T.PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO)
});};
T.PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = function() {return Pointer(Struct('_CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO', {
    cbSize: T.DWORD,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: Pointer(null),
    KeyWrapAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyWrapAuxInfo: Pointer(null),
    hCryptProv: T.HCRYPTPROV_LEGACY,
    dwKeySpec: T.DWORD,
    dwKeyChoice: T.DWORD,
    __unnamed0: Union('', {
        pEphemeralAlgorithm: T.PCRYPT_ALGORITHM_IDENTIFIER,
        pSenderId: T.PCERT_ID
    }),
    UserKeyingMaterial: T.CRYPT_DATA_BLOB,
    cRecipientEncryptedKeys: T.DWORD,
    rgpRecipientEncryptedKeys: Pointer(T.PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO)
}));};
T.CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = function() {return Struct('_CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO', {
    cbSize: T.DWORD,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: Pointer(null),
    hCryptProv: T.HCRYPTPROV,
    dwKeyChoice: T.DWORD,
    __unnamed0: Union('', {
        hKeyEncryptionKey: T.HCRYPTKEY,
        pvKeyEncryptionKey: Pointer(null)
    }),
    KeyId: T.CRYPT_DATA_BLOB,
    Date: T.FILETIME,
    pOtherAttr: T.PCRYPT_ATTRIBUTE_TYPE_VALUE
});};
T.PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = function() {return Pointer(Struct('_CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO', {
    cbSize: T.DWORD,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: Pointer(null),
    hCryptProv: T.HCRYPTPROV,
    dwKeyChoice: T.DWORD,
    __unnamed0: Union('', {
        hKeyEncryptionKey: T.HCRYPTKEY,
        pvKeyEncryptionKey: Pointer(null)
    }),
    KeyId: T.CRYPT_DATA_BLOB,
    Date: T.FILETIME,
    pOtherAttr: T.PCRYPT_ATTRIBUTE_TYPE_VALUE
}));};
T.CMSG_RECIPIENT_ENCODE_INFO = function() {return Struct('_CMSG_RECIPIENT_ENCODE_INFO', {
    dwRecipientChoice: T.DWORD,
    __unnamed0: Union('', {
        pKeyTrans: T.PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO,
        pKeyAgree: T.PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO,
        pMailList: T.PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
    })
});};
T.PCMSG_RECIPIENT_ENCODE_INFO = function() {return Pointer(Struct('_CMSG_RECIPIENT_ENCODE_INFO', {
    dwRecipientChoice: T.DWORD,
    __unnamed0: Union('', {
        pKeyTrans: T.PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO,
        pKeyAgree: T.PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO,
        pMailList: T.PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
    })
}));};
T.CMSG_ENVELOPED_ENCODE_INFO = function() {return Struct('_CMSG_ENVELOPED_ENCODE_INFO', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    ContentEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: Pointer(null),
    cRecipients: T.DWORD,
    rgpRecipientCert: Pointer(T.PCERT_INFO)
});};
T.PCMSG_ENVELOPED_ENCODE_INFO = function() {return Pointer(Struct('_CMSG_ENVELOPED_ENCODE_INFO', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    ContentEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: Pointer(null),
    cRecipients: T.DWORD,
    rgpRecipientCert: Pointer(T.PCERT_INFO)
}));};
T.CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = function() {return Struct('_CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO', {
    cbSize: T.DWORD,
    SignedInfo: T.CMSG_SIGNED_ENCODE_INFO,
    EnvelopedInfo: T.CMSG_ENVELOPED_ENCODE_INFO
});};
T.PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = function() {return Pointer(Struct('_CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO', {
    cbSize: T.DWORD,
    SignedInfo: T.CMSG_SIGNED_ENCODE_INFO,
    EnvelopedInfo: T.CMSG_ENVELOPED_ENCODE_INFO
}));};
T.CMSG_HASHED_ENCODE_INFO = function() {return Struct('_CMSG_HASHED_ENCODE_INFO', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null)
});};
T.PCMSG_HASHED_ENCODE_INFO = function() {return Pointer(Struct('_CMSG_HASHED_ENCODE_INFO', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null)
}));};
T.CMSG_ENCRYPTED_ENCODE_INFO = function() {return Struct('_CMSG_ENCRYPTED_ENCODE_INFO', {
    cbSize: T.DWORD,
    ContentEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: Pointer(null)
});};
T.PCMSG_ENCRYPTED_ENCODE_INFO = function() {return Pointer(Struct('_CMSG_ENCRYPTED_ENCODE_INFO', {
    cbSize: T.DWORD,
    ContentEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: Pointer(null)
}));};
T.CMSG_CTRL_DECRYPT_PARA = function() {return Struct('_CMSG_CTRL_DECRYPT_PARA', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD,
    dwRecipientIndex: T.DWORD
});};
T.PCMSG_CTRL_DECRYPT_PARA = function() {return Pointer(Struct('_CMSG_CTRL_DECRYPT_PARA', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD,
    dwRecipientIndex: T.DWORD
}));};
T.CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = function() {return Struct('_CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA', {
    cbSize: T.DWORD,
    dwSignerIndex: T.DWORD,
    blob: T.CRYPT_DATA_BLOB
});};
T.PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = function() {return Pointer(Struct('_CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA', {
    cbSize: T.DWORD,
    dwSignerIndex: T.DWORD,
    blob: T.CRYPT_DATA_BLOB
}));};
T.CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = function() {return Struct('_CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA', {
    cbSize: T.DWORD,
    dwSignerIndex: T.DWORD,
    dwUnauthAttrIndex: T.DWORD
});};
T.PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = function() {return Pointer(Struct('_CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA', {
    cbSize: T.DWORD,
    dwSignerIndex: T.DWORD,
    dwUnauthAttrIndex: T.DWORD
}));};
T.CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = function() {return Struct('_CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwSignerIndex: T.DWORD,
    dwSignerType: T.DWORD,
    pvSigner: Pointer(null)
});};
T.PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = function() {return Pointer(Struct('_CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwSignerIndex: T.DWORD,
    dwSignerType: T.DWORD,
    pvSigner: Pointer(null)
}));};
T.CMSG_CMS_SIGNER_INFO = function() {return Struct('_CMSG_CMS_SIGNER_INFO', {
    dwVersion: T.DWORD,
    SignerId: T.CERT_ID,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    HashEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedHash: T.CRYPT_DATA_BLOB,
    AuthAttrs: T.CRYPT_ATTRIBUTES,
    UnauthAttrs: T.CRYPT_ATTRIBUTES
});};
T.PCMSG_CMS_SIGNER_INFO = function() {return Pointer(Struct('_CMSG_CMS_SIGNER_INFO', {
    dwVersion: T.DWORD,
    SignerId: T.CERT_ID,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    HashEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedHash: T.CRYPT_DATA_BLOB,
    AuthAttrs: T.CRYPT_ATTRIBUTES,
    UnauthAttrs: T.CRYPT_ATTRIBUTES
}));};
T.CMSG_ATTR = function() {return T.CRYPT_ATTRIBUTES;};
T.PCMSG_ATTR = function() {return Pointer(T.CRYPT_ATTRIBUTES);};
T.CMSG_KEY_TRANS_RECIPIENT_INFO = function() {return Struct('_CMSG_KEY_TRANS_RECIPIENT_INFO', {
    dwVersion: T.DWORD,
    RecipientId: T.CERT_ID,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: T.CRYPT_DATA_BLOB
});};
T.PCMSG_KEY_TRANS_RECIPIENT_INFO = function() {return Pointer(Struct('_CMSG_KEY_TRANS_RECIPIENT_INFO', {
    dwVersion: T.DWORD,
    RecipientId: T.CERT_ID,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: T.CRYPT_DATA_BLOB
}));};
T.CMSG_RECIPIENT_ENCRYPTED_KEY_INFO = function() {return Struct('_CMSG_RECIPIENT_ENCRYPTED_KEY_INFO', {
    RecipientId: T.CERT_ID,
    EncryptedKey: T.CRYPT_DATA_BLOB,
    pOtherAttr: T.PCRYPT_ATTRIBUTE_TYPE_VALUE
});};
T.PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO = function() {return Pointer(Struct('_CMSG_RECIPIENT_ENCRYPTED_KEY_INFO', {
    RecipientId: T.CERT_ID,
    EncryptedKey: T.CRYPT_DATA_BLOB,
    pOtherAttr: T.PCRYPT_ATTRIBUTE_TYPE_VALUE
}));};
T.CMSG_KEY_AGREE_RECIPIENT_INFO = function() {return Struct('_CMSG_KEY_AGREE_RECIPIENT_INFO', {
    dwVersion: T.DWORD,
    dwOriginatorChoice: T.DWORD,
    __unnamed0: Union('', {
        OriginatorCertId: T.CERT_ID,
        OriginatorPublicKeyInfo: T.CERT_PUBLIC_KEY_INFO
    }),
    UserKeyingMaterial: T.CRYPT_ALGORITHM_IDENTIFIER,
    cRecipientEncryptedKeys: T.DWORD,
    rgpRecipientEncryptedKeys: Pointer(T.PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO)
});};
T.PCMSG_KEY_AGREE_RECIPIENT_INFO = function() {return Pointer(Struct('_CMSG_KEY_AGREE_RECIPIENT_INFO', {
    dwVersion: T.DWORD,
    dwOriginatorChoice: T.DWORD,
    __unnamed0: Union('', {
        OriginatorCertId: T.CERT_ID,
        OriginatorPublicKeyInfo: T.CERT_PUBLIC_KEY_INFO
    }),
    UserKeyingMaterial: T.CRYPT_ALGORITHM_IDENTIFIER,
    cRecipientEncryptedKeys: T.DWORD,
    rgpRecipientEncryptedKeys: Pointer(T.PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO)
}));};
T.CMSG_MAIL_LIST_RECIPIENT_INFO = function() {return Struct('_CMSG_MAIL_LIST_RECIPIENT_INFO', {
    dwVersion: T.DWORD,
    KeyId: T.CRYPT_DATA_BLOB,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: T.CRYPT_DATA_BLOB,
    Date: T.FILETIME,
    pOtherAttr: T.PCRYPT_ATTRIBUTE_TYPE_VALUE
});};
T.PCMSG_MAIL_LIST_RECIPIENT_INFO = function() {return Pointer(Struct('_CMSG_MAIL_LIST_RECIPIENT_INFO', {
    dwVersion: T.DWORD,
    KeyId: T.CRYPT_DATA_BLOB,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: T.CRYPT_DATA_BLOB,
    Date: T.FILETIME,
    pOtherAttr: T.PCRYPT_ATTRIBUTE_TYPE_VALUE
}));};
T.CMSG_CMS_RECIPIENT_INFO = function() {return Struct('_CMSG_CMS_RECIPIENT_INFO', {
    dwRecipientChoice: T.DWORD,
    __unnamed0: Union('', {
        pKeyTrans: T.PCMSG_KEY_TRANS_RECIPIENT_INFO,
        pKeyAgree: T.PCMSG_KEY_AGREE_RECIPIENT_INFO,
        pMailList: T.PCMSG_MAIL_LIST_RECIPIENT_INFO
    })
});};
T.PCMSG_CMS_RECIPIENT_INFO = function() {return Pointer(Struct('_CMSG_CMS_RECIPIENT_INFO', {
    dwRecipientChoice: T.DWORD,
    __unnamed0: Union('', {
        pKeyTrans: T.PCMSG_KEY_TRANS_RECIPIENT_INFO,
        pKeyAgree: T.PCMSG_KEY_AGREE_RECIPIENT_INFO,
        pMailList: T.PCMSG_MAIL_LIST_RECIPIENT_INFO
    })
}));};
T.PFN_CMSG_ALLOC = function() {return Pointer(Fn(Pointer(null), [[T.size_t, 'cb']]));};
T.PFN_CMSG_FREE = function() {return Pointer(Fn(null, [[Pointer(null), 'pv']]), [['stdcall']]);};
T.CMSG_CONTENT_ENCRYPT_INFO = function() {return Struct('_CMSG_CONTENT_ENCRYPT_INFO', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    ContentEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: Pointer(null),
    cRecipients: T.DWORD,
    rgCmsRecipients: T.PCMSG_RECIPIENT_ENCODE_INFO,
    pfnAlloc: T.PFN_CMSG_ALLOC,
    pfnFree: T.PFN_CMSG_FREE,
    dwEncryptFlags: T.DWORD,
    hContentEncryptKey: T.HCRYPTKEY,
    dwFlags: T.DWORD
});};
T.PCMSG_CONTENT_ENCRYPT_INFO = function() {return Pointer(Struct('_CMSG_CONTENT_ENCRYPT_INFO', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    ContentEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: Pointer(null),
    cRecipients: T.DWORD,
    rgCmsRecipients: T.PCMSG_RECIPIENT_ENCODE_INFO,
    pfnAlloc: T.PFN_CMSG_ALLOC,
    pfnFree: T.PFN_CMSG_FREE,
    dwEncryptFlags: T.DWORD,
    hContentEncryptKey: T.HCRYPTKEY,
    dwFlags: T.DWORD
}));};
T.CMSG_KEY_TRANS_ENCRYPT_INFO = function() {return Struct('_CMSG_KEY_TRANS_ENCRYPT_INFO', {
    cbSize: T.DWORD,
    dwRecipientIndex: T.DWORD,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: T.CRYPT_DATA_BLOB,
    dwFlags: T.DWORD
});};
T.PCMSG_KEY_TRANS_ENCRYPT_INFO = function() {return Pointer(Struct('_CMSG_KEY_TRANS_ENCRYPT_INFO', {
    cbSize: T.DWORD,
    dwRecipientIndex: T.DWORD,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: T.CRYPT_DATA_BLOB,
    dwFlags: T.DWORD
}));};
T.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA = function() {return Struct('_CMSG_CTRL_KEY_TRANS_DECRYPT_PARA', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD,
    pKeyTrans: T.PCMSG_KEY_TRANS_RECIPIENT_INFO,
    dwRecipientIndex: T.DWORD
});};
T.PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA = function() {return Pointer(Struct('_CMSG_CTRL_KEY_TRANS_DECRYPT_PARA', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD,
    pKeyTrans: T.PCMSG_KEY_TRANS_RECIPIENT_INFO,
    dwRecipientIndex: T.DWORD
}));};
T.PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY = function() {return Pointer(Fn(T.BOOL, [[T.PCMSG_CONTENT_ENCRYPT_INFO, 'pContentEncryptInfo'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']]), [['stdcall']]);};
T.PFN_CMSG_EXPORT_KEY_TRANS = function() {return Pointer(Fn(T.BOOL, [[T.PCMSG_CONTENT_ENCRYPT_INFO, 'pContentEncryptInfo'], [T.PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO, 'pKeyTransEncodeInfo'], [T.PCMSG_KEY_TRANS_ENCRYPT_INFO, 'pKeyTransEncryptInfo'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']]), [['stdcall']]);};
T.PFN_CMSG_IMPORT_KEY_TRANS = function() {return Pointer(Fn(T.BOOL, [[T.PCRYPT_ALGORITHM_IDENTIFIER, 'pContentEncryptionAlgorithm'], [T.PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA, 'pKeyTransDecryptPara'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved'], [Pointer(T.HCRYPTKEY), 'phContentEncryptKey']]), [['stdcall']]);};
T.PRINTER_DEFAULTSA = function() {return Struct('_PRINTER_DEFAULTSA', {
    pDatatype: T.LPSTR,
    pDevMode: T.LPDEVMODEA,
    DesiredAccess: T.ACCESS_MASK
});};
T.LPPRINTER_DEFAULTSA = function() {return Pointer(Struct('_PRINTER_DEFAULTSA', {
    pDatatype: T.LPSTR,
    pDevMode: T.LPDEVMODEA,
    DesiredAccess: T.ACCESS_MASK
}));};
T.PRINTER_DEFAULTSW = function() {return Struct('_PRINTER_DEFAULTSW', {
    pDatatype: T.LPWSTR,
    pDevMode: T.LPDEVMODEW,
    DesiredAccess: T.ACCESS_MASK
});};
T.LPPRINTER_DEFAULTSW = function() {return Pointer(Struct('_PRINTER_DEFAULTSW', {
    pDatatype: T.LPWSTR,
    pDevMode: T.LPDEVMODEW,
    DesiredAccess: T.ACCESS_MASK
}));};
T.PRINTER_DEFAULTS = function() {return T.PRINTER_DEFAULTSA;};
T.LPPRINTER_DEFAULTS = function() {return T.LPPRINTER_DEFAULTSA;};
T.DRIVER_INFO_1A = function() {return Struct('_DRIVER_INFO_1A', {
    pName: T.LPSTR
});};
T.PDRIVER_INFO_1A = function() {return Pointer(Struct('_DRIVER_INFO_1A', {
    pName: T.LPSTR
}));};
T.LPDRIVER_INFO_1A = function() {return Pointer(Struct('_DRIVER_INFO_1A', {
    pName: T.LPSTR
}));};
T.DRIVER_INFO_1W = function() {return Struct('_DRIVER_INFO_1W', {
    pName: T.LPWSTR
});};
T.PDRIVER_INFO_1W = function() {return Pointer(Struct('_DRIVER_INFO_1W', {
    pName: T.LPWSTR
}));};
T.LPDRIVER_INFO_1W = function() {return Pointer(Struct('_DRIVER_INFO_1W', {
    pName: T.LPWSTR
}));};
T.DRIVER_INFO_1 = function() {return T.DRIVER_INFO_1A;};
T.PDRIVER_INFO_1 = function() {return T.PDRIVER_INFO_1A;};
T.LPDRIVER_INFO_1 = function() {return T.LPDRIVER_INFO_1A;};
T.DRIVER_INFO_2A = function() {return Struct('_DRIVER_INFO_2A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR
});};
T.PDRIVER_INFO_2A = function() {return Pointer(Struct('_DRIVER_INFO_2A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR
}));};
T.LPDRIVER_INFO_2A = function() {return Pointer(Struct('_DRIVER_INFO_2A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR
}));};
T.DRIVER_INFO_2W = function() {return Struct('_DRIVER_INFO_2W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR
});};
T.PDRIVER_INFO_2W = function() {return Pointer(Struct('_DRIVER_INFO_2W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR
}));};
T.LPDRIVER_INFO_2W = function() {return Pointer(Struct('_DRIVER_INFO_2W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR
}));};
T.DRIVER_INFO_2 = function() {return T.DRIVER_INFO_2A;};
T.PDRIVER_INFO_2 = function() {return T.PDRIVER_INFO_2A;};
T.LPDRIVER_INFO_2 = function() {return T.LPDRIVER_INFO_2A;};
T.DRIVER_INFO_3A = function() {return Struct('_DRIVER_INFO_3A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR
});};
T.PDRIVER_INFO_3A = function() {return Pointer(Struct('_DRIVER_INFO_3A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR
}));};
T.LPDRIVER_INFO_3A = function() {return Pointer(Struct('_DRIVER_INFO_3A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR
}));};
T.DRIVER_INFO_3W = function() {return Struct('_DRIVER_INFO_3W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR
});};
T.PDRIVER_INFO_3W = function() {return Pointer(Struct('_DRIVER_INFO_3W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR
}));};
T.LPDRIVER_INFO_3W = function() {return Pointer(Struct('_DRIVER_INFO_3W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR
}));};
T.DRIVER_INFO_3 = function() {return T.DRIVER_INFO_3A;};
T.PDRIVER_INFO_3 = function() {return T.PDRIVER_INFO_3A;};
T.LPDRIVER_INFO_3 = function() {return T.LPDRIVER_INFO_3A;};
T.DRIVER_INFO_4A = function() {return Struct('_DRIVER_INFO_4A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR
});};
T.PDRIVER_INFO_4A = function() {return Pointer(Struct('_DRIVER_INFO_4A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR
}));};
T.LPDRIVER_INFO_4A = function() {return Pointer(Struct('_DRIVER_INFO_4A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR
}));};
T.DRIVER_INFO_4W = function() {return Struct('_DRIVER_INFO_4W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR
});};
T.PDRIVER_INFO_4W = function() {return Pointer(Struct('_DRIVER_INFO_4W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR
}));};
T.LPDRIVER_INFO_4W = function() {return Pointer(Struct('_DRIVER_INFO_4W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR
}));};
T.DRIVER_INFO_4 = function() {return T.DRIVER_INFO_4A;};
T.PDRIVER_INFO_4 = function() {return T.PDRIVER_INFO_4A;};
T.LPDRIVER_INFO_4 = function() {return T.LPDRIVER_INFO_4A;};
T.DRIVER_INFO_5A = function() {return Struct('_DRIVER_INFO_5A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    dwDriverAttributes: T.DWORD,
    dwConfigVersion: T.DWORD,
    dwDriverVersion: T.DWORD
});};
T.PDRIVER_INFO_5A = function() {return Pointer(Struct('_DRIVER_INFO_5A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    dwDriverAttributes: T.DWORD,
    dwConfigVersion: T.DWORD,
    dwDriverVersion: T.DWORD
}));};
T.LPDRIVER_INFO_5A = function() {return Pointer(Struct('_DRIVER_INFO_5A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    dwDriverAttributes: T.DWORD,
    dwConfigVersion: T.DWORD,
    dwDriverVersion: T.DWORD
}));};
T.DRIVER_INFO_5W = function() {return Struct('_DRIVER_INFO_5W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    dwDriverAttributes: T.DWORD,
    dwConfigVersion: T.DWORD,
    dwDriverVersion: T.DWORD
});};
T.PDRIVER_INFO_5W = function() {return Pointer(Struct('_DRIVER_INFO_5W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    dwDriverAttributes: T.DWORD,
    dwConfigVersion: T.DWORD,
    dwDriverVersion: T.DWORD
}));};
T.LPDRIVER_INFO_5W = function() {return Pointer(Struct('_DRIVER_INFO_5W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    dwDriverAttributes: T.DWORD,
    dwConfigVersion: T.DWORD,
    dwDriverVersion: T.DWORD
}));};
T.DRIVER_INFO_5 = function() {return T.DRIVER_INFO_5A;};
T.PDRIVER_INFO_5 = function() {return T.PDRIVER_INFO_5A;};
T.LPDRIVER_INFO_5 = function() {return T.LPDRIVER_INFO_5A;};
T.DRIVER_INFO_6A = function() {return Struct('_DRIVER_INFO_6A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPSTR,
    pszOEMUrl: T.LPSTR,
    pszHardwareID: T.LPSTR,
    pszProvider: T.LPSTR
});};
T.PDRIVER_INFO_6A = function() {return Pointer(Struct('_DRIVER_INFO_6A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPSTR,
    pszOEMUrl: T.LPSTR,
    pszHardwareID: T.LPSTR,
    pszProvider: T.LPSTR
}));};
T.LPDRIVER_INFO_6A = function() {return Pointer(Struct('_DRIVER_INFO_6A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPSTR,
    pszOEMUrl: T.LPSTR,
    pszHardwareID: T.LPSTR,
    pszProvider: T.LPSTR
}));};
T.DRIVER_INFO_6W = function() {return Struct('_DRIVER_INFO_6W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPWSTR,
    pszOEMUrl: T.LPWSTR,
    pszHardwareID: T.LPWSTR,
    pszProvider: T.LPWSTR
});};
T.PDRIVER_INFO_6W = function() {return Pointer(Struct('_DRIVER_INFO_6W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPWSTR,
    pszOEMUrl: T.LPWSTR,
    pszHardwareID: T.LPWSTR,
    pszProvider: T.LPWSTR
}));};
T.LPDRIVER_INFO_6W = function() {return Pointer(Struct('_DRIVER_INFO_6W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPWSTR,
    pszOEMUrl: T.LPWSTR,
    pszHardwareID: T.LPWSTR,
    pszProvider: T.LPWSTR
}));};
T.DRIVER_INFO_6 = function() {return T.DRIVER_INFO_6A;};
T.PDRIVER_INFO_6 = function() {return T.PDRIVER_INFO_6A;};
T.LPDRIVER_INFO_6 = function() {return T.LPDRIVER_INFO_6A;};
T.DRIVER_INFO_8A = function() {return Struct('_DRIVER_INFO_8A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPSTR,
    pszOEMUrl: T.LPSTR,
    pszHardwareID: T.LPSTR,
    pszProvider: T.LPSTR,
    pszPrintProcessor: T.LPSTR,
    pszVendorSetup: T.LPSTR,
    pszzColorProfiles: T.LPSTR,
    pszInfPath: T.LPSTR,
    dwPrinterDriverAttributes: T.DWORD,
    pszzCoreDriverDependencies: T.LPSTR,
    ftMinInboxDriverVerDate: T.FILETIME,
    dwlMinInboxDriverVerVersion: T.DWORDLONG
});};
T.PDRIVER_INFO_8A = function() {return Pointer(Struct('_DRIVER_INFO_8A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPSTR,
    pszOEMUrl: T.LPSTR,
    pszHardwareID: T.LPSTR,
    pszProvider: T.LPSTR,
    pszPrintProcessor: T.LPSTR,
    pszVendorSetup: T.LPSTR,
    pszzColorProfiles: T.LPSTR,
    pszInfPath: T.LPSTR,
    dwPrinterDriverAttributes: T.DWORD,
    pszzCoreDriverDependencies: T.LPSTR,
    ftMinInboxDriverVerDate: T.FILETIME,
    dwlMinInboxDriverVerVersion: T.DWORDLONG
}));};
T.LPDRIVER_INFO_8A = function() {return Pointer(Struct('_DRIVER_INFO_8A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPSTR,
    pszOEMUrl: T.LPSTR,
    pszHardwareID: T.LPSTR,
    pszProvider: T.LPSTR,
    pszPrintProcessor: T.LPSTR,
    pszVendorSetup: T.LPSTR,
    pszzColorProfiles: T.LPSTR,
    pszInfPath: T.LPSTR,
    dwPrinterDriverAttributes: T.DWORD,
    pszzCoreDriverDependencies: T.LPSTR,
    ftMinInboxDriverVerDate: T.FILETIME,
    dwlMinInboxDriverVerVersion: T.DWORDLONG
}));};
T.DRIVER_INFO_8W = function() {return Struct('_DRIVER_INFO_8W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPWSTR,
    pszOEMUrl: T.LPWSTR,
    pszHardwareID: T.LPWSTR,
    pszProvider: T.LPWSTR,
    pszPrintProcessor: T.LPWSTR,
    pszVendorSetup: T.LPWSTR,
    pszzColorProfiles: T.LPWSTR,
    pszInfPath: T.LPWSTR,
    dwPrinterDriverAttributes: T.DWORD,
    pszzCoreDriverDependencies: T.LPWSTR,
    ftMinInboxDriverVerDate: T.FILETIME,
    dwlMinInboxDriverVerVersion: T.DWORDLONG
});};
T.PDRIVER_INFO_8W = function() {return Pointer(Struct('_DRIVER_INFO_8W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPWSTR,
    pszOEMUrl: T.LPWSTR,
    pszHardwareID: T.LPWSTR,
    pszProvider: T.LPWSTR,
    pszPrintProcessor: T.LPWSTR,
    pszVendorSetup: T.LPWSTR,
    pszzColorProfiles: T.LPWSTR,
    pszInfPath: T.LPWSTR,
    dwPrinterDriverAttributes: T.DWORD,
    pszzCoreDriverDependencies: T.LPWSTR,
    ftMinInboxDriverVerDate: T.FILETIME,
    dwlMinInboxDriverVerVersion: T.DWORDLONG
}));};
T.LPDRIVER_INFO_8W = function() {return Pointer(Struct('_DRIVER_INFO_8W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPWSTR,
    pszOEMUrl: T.LPWSTR,
    pszHardwareID: T.LPWSTR,
    pszProvider: T.LPWSTR,
    pszPrintProcessor: T.LPWSTR,
    pszVendorSetup: T.LPWSTR,
    pszzColorProfiles: T.LPWSTR,
    pszInfPath: T.LPWSTR,
    dwPrinterDriverAttributes: T.DWORD,
    pszzCoreDriverDependencies: T.LPWSTR,
    ftMinInboxDriverVerDate: T.FILETIME,
    dwlMinInboxDriverVerVersion: T.DWORDLONG
}));};
T.DRIVER_INFO_8 = function() {return T.DRIVER_INFO_8A;};
T.PDRIVER_INFO_8 = function() {return T.PDRIVER_INFO_8A;};
T.LPDRIVER_INFO_8 = function() {return T.LPDRIVER_INFO_8A;};
T.PRINTER_INFO_1A = function() {return Struct('_PRINTER_INFO_1A', {
    Flags: T.DWORD,
    pDescription: T.LPSTR,
    pName: T.LPSTR,
    pComment: T.LPSTR
});};
T.PPRINTER_INFO_1A = function() {return Pointer(Struct('_PRINTER_INFO_1A', {
    Flags: T.DWORD,
    pDescription: T.LPSTR,
    pName: T.LPSTR,
    pComment: T.LPSTR
}));};
T.LPPRINTER_INFO_1A = function() {return Pointer(Struct('_PRINTER_INFO_1A', {
    Flags: T.DWORD,
    pDescription: T.LPSTR,
    pName: T.LPSTR,
    pComment: T.LPSTR
}));};
T.PRINTER_INFO_1W = function() {return Struct('_PRINTER_INFO_1W', {
    Flags: T.DWORD,
    pDescription: T.LPWSTR,
    pName: T.LPWSTR,
    pComment: T.LPWSTR
});};
T.PPRINTER_INFO_1W = function() {return Pointer(Struct('_PRINTER_INFO_1W', {
    Flags: T.DWORD,
    pDescription: T.LPWSTR,
    pName: T.LPWSTR,
    pComment: T.LPWSTR
}));};
T.LPPRINTER_INFO_1W = function() {return Pointer(Struct('_PRINTER_INFO_1W', {
    Flags: T.DWORD,
    pDescription: T.LPWSTR,
    pName: T.LPWSTR,
    pComment: T.LPWSTR
}));};
T.PRINTER_INFO_1 = function() {return T.PRINTER_INFO_1A;};
T.PPRINTER_INFO_1 = function() {return T.PPRINTER_INFO_1A;};
T.LPPRINTER_INFO_1 = function() {return T.LPPRINTER_INFO_1A;};
T.PRINTER_INFO_2A = function() {return Struct('_PRINTER_INFO_2A', {
    pServerName: T.LPSTR,
    pPrinterName: T.LPSTR,
    pShareName: T.LPSTR,
    pPortName: T.LPSTR,
    pDriverName: T.LPSTR,
    pComment: T.LPSTR,
    pLocation: T.LPSTR,
    pDevMode: T.LPDEVMODEA,
    pSepFile: T.LPSTR,
    pPrintProcessor: T.LPSTR,
    pDatatype: T.LPSTR,
    pParameters: T.LPSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Attributes: T.DWORD,
    Priority: T.DWORD,
    DefaultPriority: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    Status: T.DWORD,
    cJobs: T.DWORD,
    AveragePPM: T.DWORD
});};
T.PPRINTER_INFO_2A = function() {return Pointer(Struct('_PRINTER_INFO_2A', {
    pServerName: T.LPSTR,
    pPrinterName: T.LPSTR,
    pShareName: T.LPSTR,
    pPortName: T.LPSTR,
    pDriverName: T.LPSTR,
    pComment: T.LPSTR,
    pLocation: T.LPSTR,
    pDevMode: T.LPDEVMODEA,
    pSepFile: T.LPSTR,
    pPrintProcessor: T.LPSTR,
    pDatatype: T.LPSTR,
    pParameters: T.LPSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Attributes: T.DWORD,
    Priority: T.DWORD,
    DefaultPriority: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    Status: T.DWORD,
    cJobs: T.DWORD,
    AveragePPM: T.DWORD
}));};
T.LPPRINTER_INFO_2A = function() {return Pointer(Struct('_PRINTER_INFO_2A', {
    pServerName: T.LPSTR,
    pPrinterName: T.LPSTR,
    pShareName: T.LPSTR,
    pPortName: T.LPSTR,
    pDriverName: T.LPSTR,
    pComment: T.LPSTR,
    pLocation: T.LPSTR,
    pDevMode: T.LPDEVMODEA,
    pSepFile: T.LPSTR,
    pPrintProcessor: T.LPSTR,
    pDatatype: T.LPSTR,
    pParameters: T.LPSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Attributes: T.DWORD,
    Priority: T.DWORD,
    DefaultPriority: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    Status: T.DWORD,
    cJobs: T.DWORD,
    AveragePPM: T.DWORD
}));};
T.PRINTER_INFO_2W = function() {return Struct('_PRINTER_INFO_2W', {
    pServerName: T.LPWSTR,
    pPrinterName: T.LPWSTR,
    pShareName: T.LPWSTR,
    pPortName: T.LPWSTR,
    pDriverName: T.LPWSTR,
    pComment: T.LPWSTR,
    pLocation: T.LPWSTR,
    pDevMode: T.LPDEVMODEW,
    pSepFile: T.LPWSTR,
    pPrintProcessor: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pParameters: T.LPWSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Attributes: T.DWORD,
    Priority: T.DWORD,
    DefaultPriority: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    Status: T.DWORD,
    cJobs: T.DWORD,
    AveragePPM: T.DWORD
});};
T.PPRINTER_INFO_2W = function() {return Pointer(Struct('_PRINTER_INFO_2W', {
    pServerName: T.LPWSTR,
    pPrinterName: T.LPWSTR,
    pShareName: T.LPWSTR,
    pPortName: T.LPWSTR,
    pDriverName: T.LPWSTR,
    pComment: T.LPWSTR,
    pLocation: T.LPWSTR,
    pDevMode: T.LPDEVMODEW,
    pSepFile: T.LPWSTR,
    pPrintProcessor: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pParameters: T.LPWSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Attributes: T.DWORD,
    Priority: T.DWORD,
    DefaultPriority: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    Status: T.DWORD,
    cJobs: T.DWORD,
    AveragePPM: T.DWORD
}));};
T.LPPRINTER_INFO_2W = function() {return Pointer(Struct('_PRINTER_INFO_2W', {
    pServerName: T.LPWSTR,
    pPrinterName: T.LPWSTR,
    pShareName: T.LPWSTR,
    pPortName: T.LPWSTR,
    pDriverName: T.LPWSTR,
    pComment: T.LPWSTR,
    pLocation: T.LPWSTR,
    pDevMode: T.LPDEVMODEW,
    pSepFile: T.LPWSTR,
    pPrintProcessor: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pParameters: T.LPWSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Attributes: T.DWORD,
    Priority: T.DWORD,
    DefaultPriority: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    Status: T.DWORD,
    cJobs: T.DWORD,
    AveragePPM: T.DWORD
}));};
T.PRINTER_INFO_2 = function() {return T.PRINTER_INFO_2A;};
T.PPRINTER_INFO_2 = function() {return T.PPRINTER_INFO_2A;};
T.LPPRINTER_INFO_2 = function() {return T.LPPRINTER_INFO_2A;};
T.PRINTER_INFO_3 = function() {return Struct('_PRINTER_INFO_3', {
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR
});};
T.PPRINTER_INFO_3 = function() {return Pointer(Struct('_PRINTER_INFO_3', {
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR
}));};
T.LPPRINTER_INFO_3 = function() {return Pointer(Struct('_PRINTER_INFO_3', {
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR
}));};
T.PRINTER_INFO_4A = function() {return Struct('_PRINTER_INFO_4A', {
    pPrinterName: T.LPSTR,
    pServerName: T.LPSTR,
    Attributes: T.DWORD
});};
T.PPRINTER_INFO_4A = function() {return Pointer(Struct('_PRINTER_INFO_4A', {
    pPrinterName: T.LPSTR,
    pServerName: T.LPSTR,
    Attributes: T.DWORD
}));};
T.LPPRINTER_INFO_4A = function() {return Pointer(Struct('_PRINTER_INFO_4A', {
    pPrinterName: T.LPSTR,
    pServerName: T.LPSTR,
    Attributes: T.DWORD
}));};
T.PRINTER_INFO_4W = function() {return Struct('_PRINTER_INFO_4W', {
    pPrinterName: T.LPWSTR,
    pServerName: T.LPWSTR,
    Attributes: T.DWORD
});};
T.PPRINTER_INFO_4W = function() {return Pointer(Struct('_PRINTER_INFO_4W', {
    pPrinterName: T.LPWSTR,
    pServerName: T.LPWSTR,
    Attributes: T.DWORD
}));};
T.LPPRINTER_INFO_4W = function() {return Pointer(Struct('_PRINTER_INFO_4W', {
    pPrinterName: T.LPWSTR,
    pServerName: T.LPWSTR,
    Attributes: T.DWORD
}));};
T.PRINTER_INFO_4 = function() {return T.PRINTER_INFO_4A;};
T.PPRINTER_INFO_4 = function() {return T.PPRINTER_INFO_4A;};
T.LPPRINTER_INFO_4 = function() {return T.LPPRINTER_INFO_4A;};
T.PRINTER_INFO_5A = function() {return Struct('_PRINTER_INFO_5A', {
    pPrinterName: T.LPSTR,
    pPortName: T.LPSTR,
    Attributes: T.DWORD,
    DeviceNotSelectedTimeout: T.DWORD,
    TransmissionRetryTimeout: T.DWORD
});};
T.PPRINTER_INFO_5A = function() {return Pointer(Struct('_PRINTER_INFO_5A', {
    pPrinterName: T.LPSTR,
    pPortName: T.LPSTR,
    Attributes: T.DWORD,
    DeviceNotSelectedTimeout: T.DWORD,
    TransmissionRetryTimeout: T.DWORD
}));};
T.LPPRINTER_INFO_5A = function() {return Pointer(Struct('_PRINTER_INFO_5A', {
    pPrinterName: T.LPSTR,
    pPortName: T.LPSTR,
    Attributes: T.DWORD,
    DeviceNotSelectedTimeout: T.DWORD,
    TransmissionRetryTimeout: T.DWORD
}));};
T.PRINTER_INFO_5W = function() {return Struct('_PRINTER_INFO_5W', {
    pPrinterName: T.LPWSTR,
    pPortName: T.LPWSTR,
    Attributes: T.DWORD,
    DeviceNotSelectedTimeout: T.DWORD,
    TransmissionRetryTimeout: T.DWORD
});};
T.PPRINTER_INFO_5W = function() {return Pointer(Struct('_PRINTER_INFO_5W', {
    pPrinterName: T.LPWSTR,
    pPortName: T.LPWSTR,
    Attributes: T.DWORD,
    DeviceNotSelectedTimeout: T.DWORD,
    TransmissionRetryTimeout: T.DWORD
}));};
T.LPPRINTER_INFO_5W = function() {return Pointer(Struct('_PRINTER_INFO_5W', {
    pPrinterName: T.LPWSTR,
    pPortName: T.LPWSTR,
    Attributes: T.DWORD,
    DeviceNotSelectedTimeout: T.DWORD,
    TransmissionRetryTimeout: T.DWORD
}));};
T.PRINTER_INFO_5 = function() {return T.PRINTER_INFO_5A;};
T.PPRINTER_INFO_5 = function() {return T.PPRINTER_INFO_5A;};
T.LPPRINTER_INFO_5 = function() {return T.LPPRINTER_INFO_5A;};
T.PRINTER_INFO_6 = function() {return Struct('_PRINTER_INFO_6', {
    dwStatus: T.DWORD
});};
T.PPRINTER_INFO_6 = function() {return Pointer(Struct('_PRINTER_INFO_6', {
    dwStatus: T.DWORD
}));};
T.LPPRINTER_INFO_6 = function() {return Pointer(Struct('_PRINTER_INFO_6', {
    dwStatus: T.DWORD
}));};
T.PRINTER_INFO_7A = function() {return Struct('_PRINTER_INFO_7A', {
    pszObjectGUID: T.LPSTR,
    dwAction: T.DWORD
});};
T.PPRINTER_INFO_7A = function() {return Pointer(Struct('_PRINTER_INFO_7A', {
    pszObjectGUID: T.LPSTR,
    dwAction: T.DWORD
}));};
T.LPPRINTER_INFO_7A = function() {return Pointer(Struct('_PRINTER_INFO_7A', {
    pszObjectGUID: T.LPSTR,
    dwAction: T.DWORD
}));};
T.PRINTER_INFO_7W = function() {return Struct('_PRINTER_INFO_7W', {
    pszObjectGUID: T.LPWSTR,
    dwAction: T.DWORD
});};
T.PPRINTER_INFO_7W = function() {return Pointer(Struct('_PRINTER_INFO_7W', {
    pszObjectGUID: T.LPWSTR,
    dwAction: T.DWORD
}));};
T.LPPRINTER_INFO_7W = function() {return Pointer(Struct('_PRINTER_INFO_7W', {
    pszObjectGUID: T.LPWSTR,
    dwAction: T.DWORD
}));};
T.PRINTER_INFO_7 = function() {return T.PRINTER_INFO_7A;};
T.PPRINTER_INFO_7 = function() {return T.PPRINTER_INFO_7A;};
T.LPPRINTER_INFO_7 = function() {return T.LPPRINTER_INFO_7A;};
T.PRINTER_INFO_8A = function() {return Struct('_PRINTER_INFO_8A', {
    pDevMode: T.LPDEVMODEA
});};
T.PPRINTER_INFO_8A = function() {return Pointer(Struct('_PRINTER_INFO_8A', {
    pDevMode: T.LPDEVMODEA
}));};
T.LPPRINTER_INFO_8A = function() {return Pointer(Struct('_PRINTER_INFO_8A', {
    pDevMode: T.LPDEVMODEA
}));};
T.PRINTER_INFO_8W = function() {return Struct('_PRINTER_INFO_8W', {
    pDevMode: T.LPDEVMODEW
});};
T.PPRINTER_INFO_8W = function() {return Pointer(Struct('_PRINTER_INFO_8W', {
    pDevMode: T.LPDEVMODEW
}));};
T.LPPRINTER_INFO_8W = function() {return Pointer(Struct('_PRINTER_INFO_8W', {
    pDevMode: T.LPDEVMODEW
}));};
T.PRINTER_INFO_8 = function() {return T.PRINTER_INFO_8A;};
T.PPRINTER_INFO_8 = function() {return T.PPRINTER_INFO_8A;};
T.LPPRINTER_INFO_8 = function() {return T.LPPRINTER_INFO_8A;};
T.PRINTER_INFO_9A = function() {return Struct('_PRINTER_INFO_9A', {
    pDevMode: T.LPDEVMODEA
});};
T.PPRINTER_INFO_9A = function() {return Pointer(Struct('_PRINTER_INFO_9A', {
    pDevMode: T.LPDEVMODEA
}));};
T.LPPRINTER_INFO_9A = function() {return Pointer(Struct('_PRINTER_INFO_9A', {
    pDevMode: T.LPDEVMODEA
}));};
T.PRINTER_INFO_9W = function() {return Struct('_PRINTER_INFO_9W', {
    pDevMode: T.LPDEVMODEW
});};
T.PPRINTER_INFO_9W = function() {return Pointer(Struct('_PRINTER_INFO_9W', {
    pDevMode: T.LPDEVMODEW
}));};
T.LPPRINTER_INFO_9W = function() {return Pointer(Struct('_PRINTER_INFO_9W', {
    pDevMode: T.LPDEVMODEW
}));};
T.PRINTER_INFO_9 = function() {return T.PRINTER_INFO_9A;};
T.PPRINTER_INFO_9 = function() {return T.PPRINTER_INFO_9A;};
T.LPPRINTER_INFO_9 = function() {return T.LPPRINTER_INFO_9A;};
T.JOB_INFO_1A = function() {return Struct('_JOB_INFO_1A', {
    JobId: T.DWORD,
    pPrinterName: T.LPSTR,
    pMachineName: T.LPSTR,
    pUserName: T.LPSTR,
    pDocument: T.LPSTR,
    pDatatype: T.LPSTR,
    pStatus: T.LPSTR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    TotalPages: T.DWORD,
    PagesPrinted: T.DWORD,
    Submitted: T.SYSTEMTIME
});};
T.PJOB_INFO_1A = function() {return Pointer(Struct('_JOB_INFO_1A', {
    JobId: T.DWORD,
    pPrinterName: T.LPSTR,
    pMachineName: T.LPSTR,
    pUserName: T.LPSTR,
    pDocument: T.LPSTR,
    pDatatype: T.LPSTR,
    pStatus: T.LPSTR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    TotalPages: T.DWORD,
    PagesPrinted: T.DWORD,
    Submitted: T.SYSTEMTIME
}));};
T.LPJOB_INFO_1A = function() {return Pointer(Struct('_JOB_INFO_1A', {
    JobId: T.DWORD,
    pPrinterName: T.LPSTR,
    pMachineName: T.LPSTR,
    pUserName: T.LPSTR,
    pDocument: T.LPSTR,
    pDatatype: T.LPSTR,
    pStatus: T.LPSTR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    TotalPages: T.DWORD,
    PagesPrinted: T.DWORD,
    Submitted: T.SYSTEMTIME
}));};
T.JOB_INFO_1W = function() {return Struct('_JOB_INFO_1W', {
    JobId: T.DWORD,
    pPrinterName: T.LPWSTR,
    pMachineName: T.LPWSTR,
    pUserName: T.LPWSTR,
    pDocument: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pStatus: T.LPWSTR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    TotalPages: T.DWORD,
    PagesPrinted: T.DWORD,
    Submitted: T.SYSTEMTIME
});};
T.PJOB_INFO_1W = function() {return Pointer(Struct('_JOB_INFO_1W', {
    JobId: T.DWORD,
    pPrinterName: T.LPWSTR,
    pMachineName: T.LPWSTR,
    pUserName: T.LPWSTR,
    pDocument: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pStatus: T.LPWSTR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    TotalPages: T.DWORD,
    PagesPrinted: T.DWORD,
    Submitted: T.SYSTEMTIME
}));};
T.LPJOB_INFO_1W = function() {return Pointer(Struct('_JOB_INFO_1W', {
    JobId: T.DWORD,
    pPrinterName: T.LPWSTR,
    pMachineName: T.LPWSTR,
    pUserName: T.LPWSTR,
    pDocument: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pStatus: T.LPWSTR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    TotalPages: T.DWORD,
    PagesPrinted: T.DWORD,
    Submitted: T.SYSTEMTIME
}));};
T.JOB_INFO_1 = function() {return T.JOB_INFO_1A;};
T.PJOB_INFO_1 = function() {return T.PJOB_INFO_1A;};
T.LPJOB_INFO_1 = function() {return T.LPJOB_INFO_1A;};
T.JOB_INFO_2A = function() {return Struct('_JOB_INFO_2A', {
    JobId: T.DWORD,
    pPrinterName: T.LPSTR,
    pMachineName: T.LPSTR,
    pUserName: T.LPSTR,
    pDocument: T.LPSTR,
    pNotifyName: T.LPSTR,
    pDatatype: T.LPSTR,
    pPrintProcessor: T.LPSTR,
    pParameters: T.LPSTR,
    pDriverName: T.LPSTR,
    pDevMode: T.LPDEVMODEA,
    pStatus: T.LPSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    TotalPages: T.DWORD,
    Size: T.DWORD,
    Submitted: T.SYSTEMTIME,
    Time: T.DWORD,
    PagesPrinted: T.DWORD
});};
T.PJOB_INFO_2A = function() {return Pointer(Struct('_JOB_INFO_2A', {
    JobId: T.DWORD,
    pPrinterName: T.LPSTR,
    pMachineName: T.LPSTR,
    pUserName: T.LPSTR,
    pDocument: T.LPSTR,
    pNotifyName: T.LPSTR,
    pDatatype: T.LPSTR,
    pPrintProcessor: T.LPSTR,
    pParameters: T.LPSTR,
    pDriverName: T.LPSTR,
    pDevMode: T.LPDEVMODEA,
    pStatus: T.LPSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    TotalPages: T.DWORD,
    Size: T.DWORD,
    Submitted: T.SYSTEMTIME,
    Time: T.DWORD,
    PagesPrinted: T.DWORD
}));};
T.LPJOB_INFO_2A = function() {return Pointer(Struct('_JOB_INFO_2A', {
    JobId: T.DWORD,
    pPrinterName: T.LPSTR,
    pMachineName: T.LPSTR,
    pUserName: T.LPSTR,
    pDocument: T.LPSTR,
    pNotifyName: T.LPSTR,
    pDatatype: T.LPSTR,
    pPrintProcessor: T.LPSTR,
    pParameters: T.LPSTR,
    pDriverName: T.LPSTR,
    pDevMode: T.LPDEVMODEA,
    pStatus: T.LPSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    TotalPages: T.DWORD,
    Size: T.DWORD,
    Submitted: T.SYSTEMTIME,
    Time: T.DWORD,
    PagesPrinted: T.DWORD
}));};
T.JOB_INFO_2W = function() {return Struct('_JOB_INFO_2W', {
    JobId: T.DWORD,
    pPrinterName: T.LPWSTR,
    pMachineName: T.LPWSTR,
    pUserName: T.LPWSTR,
    pDocument: T.LPWSTR,
    pNotifyName: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pPrintProcessor: T.LPWSTR,
    pParameters: T.LPWSTR,
    pDriverName: T.LPWSTR,
    pDevMode: T.LPDEVMODEW,
    pStatus: T.LPWSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    TotalPages: T.DWORD,
    Size: T.DWORD,
    Submitted: T.SYSTEMTIME,
    Time: T.DWORD,
    PagesPrinted: T.DWORD
});};
T.PJOB_INFO_2W = function() {return Pointer(Struct('_JOB_INFO_2W', {
    JobId: T.DWORD,
    pPrinterName: T.LPWSTR,
    pMachineName: T.LPWSTR,
    pUserName: T.LPWSTR,
    pDocument: T.LPWSTR,
    pNotifyName: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pPrintProcessor: T.LPWSTR,
    pParameters: T.LPWSTR,
    pDriverName: T.LPWSTR,
    pDevMode: T.LPDEVMODEW,
    pStatus: T.LPWSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    TotalPages: T.DWORD,
    Size: T.DWORD,
    Submitted: T.SYSTEMTIME,
    Time: T.DWORD,
    PagesPrinted: T.DWORD
}));};
T.LPJOB_INFO_2W = function() {return Pointer(Struct('_JOB_INFO_2W', {
    JobId: T.DWORD,
    pPrinterName: T.LPWSTR,
    pMachineName: T.LPWSTR,
    pUserName: T.LPWSTR,
    pDocument: T.LPWSTR,
    pNotifyName: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pPrintProcessor: T.LPWSTR,
    pParameters: T.LPWSTR,
    pDriverName: T.LPWSTR,
    pDevMode: T.LPDEVMODEW,
    pStatus: T.LPWSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    TotalPages: T.DWORD,
    Size: T.DWORD,
    Submitted: T.SYSTEMTIME,
    Time: T.DWORD,
    PagesPrinted: T.DWORD
}));};
T.JOB_INFO_2 = function() {return T.JOB_INFO_2A;};
T.PJOB_INFO_2 = function() {return T.PJOB_INFO_2A;};
T.LPJOB_INFO_2 = function() {return T.LPJOB_INFO_2A;};
T.JOB_INFO_3 = function() {return Struct('_JOB_INFO_3', {
    JobId: T.DWORD,
    NextJobId: T.DWORD,
    Reserved: T.DWORD
});};
T.PJOB_INFO_3 = function() {return Pointer(Struct('_JOB_INFO_3', {
    JobId: T.DWORD,
    NextJobId: T.DWORD,
    Reserved: T.DWORD
}));};
T.LPJOB_INFO_3 = function() {return Pointer(Struct('_JOB_INFO_3', {
    JobId: T.DWORD,
    NextJobId: T.DWORD,
    Reserved: T.DWORD
}));};
T.ADDJOB_INFO_1A = function() {return Struct('_ADDJOB_INFO_1A', {
    Path: T.LPSTR,
    JobId: T.DWORD
});};
T.PADDJOB_INFO_1A = function() {return Pointer(Struct('_ADDJOB_INFO_1A', {
    Path: T.LPSTR,
    JobId: T.DWORD
}));};
T.LPADDJOB_INFO_1A = function() {return Pointer(Struct('_ADDJOB_INFO_1A', {
    Path: T.LPSTR,
    JobId: T.DWORD
}));};
T.ADDJOB_INFO_1W = function() {return Struct('_ADDJOB_INFO_1W', {
    Path: T.LPWSTR,
    JobId: T.DWORD
});};
T.PADDJOB_INFO_1W = function() {return Pointer(Struct('_ADDJOB_INFO_1W', {
    Path: T.LPWSTR,
    JobId: T.DWORD
}));};
T.LPADDJOB_INFO_1W = function() {return Pointer(Struct('_ADDJOB_INFO_1W', {
    Path: T.LPWSTR,
    JobId: T.DWORD
}));};
T.ADDJOB_INFO_1 = function() {return T.ADDJOB_INFO_1A;};
T.PADDJOB_INFO_1 = function() {return T.PADDJOB_INFO_1A;};
T.LPADDJOB_INFO_1 = function() {return T.LPADDJOB_INFO_1A;};
T.DOC_INFO_1A = function() {return Struct('_DOC_INFO_1A', {
    pDocName: T.LPSTR,
    pOutputFile: T.LPSTR,
    pDatatype: T.LPSTR
});};
T.PDOC_INFO_1A = function() {return Pointer(Struct('_DOC_INFO_1A', {
    pDocName: T.LPSTR,
    pOutputFile: T.LPSTR,
    pDatatype: T.LPSTR
}));};
T.LPDOC_INFO_1A = function() {return Pointer(Struct('_DOC_INFO_1A', {
    pDocName: T.LPSTR,
    pOutputFile: T.LPSTR,
    pDatatype: T.LPSTR
}));};
T.DOC_INFO_1W = function() {return Struct('_DOC_INFO_1W', {
    pDocName: T.LPWSTR,
    pOutputFile: T.LPWSTR,
    pDatatype: T.LPWSTR
});};
T.PDOC_INFO_1W = function() {return Pointer(Struct('_DOC_INFO_1W', {
    pDocName: T.LPWSTR,
    pOutputFile: T.LPWSTR,
    pDatatype: T.LPWSTR
}));};
T.LPDOC_INFO_1W = function() {return Pointer(Struct('_DOC_INFO_1W', {
    pDocName: T.LPWSTR,
    pOutputFile: T.LPWSTR,
    pDatatype: T.LPWSTR
}));};
T.DOC_INFO_1 = function() {return T.DOC_INFO_1A;};
T.PDOC_INFO_1 = function() {return T.PDOC_INFO_1A;};
T.LPDOC_INFO_1 = function() {return T.LPDOC_INFO_1A;};
T.DOC_INFO_2A = function() {return Struct('_DOC_INFO_2A', {
    pDocName: T.LPSTR,
    pOutputFile: T.LPSTR,
    pDatatype: T.LPSTR,
    dwMode: T.DWORD,
    JobId: T.DWORD
});};
T.PDOC_INFO_2A = function() {return Pointer(Struct('_DOC_INFO_2A', {
    pDocName: T.LPSTR,
    pOutputFile: T.LPSTR,
    pDatatype: T.LPSTR,
    dwMode: T.DWORD,
    JobId: T.DWORD
}));};
T.LPDOC_INFO_2A = function() {return Pointer(Struct('_DOC_INFO_2A', {
    pDocName: T.LPSTR,
    pOutputFile: T.LPSTR,
    pDatatype: T.LPSTR,
    dwMode: T.DWORD,
    JobId: T.DWORD
}));};
T.DOC_INFO_2W = function() {return Struct('_DOC_INFO_2W', {
    pDocName: T.LPWSTR,
    pOutputFile: T.LPWSTR,
    pDatatype: T.LPWSTR,
    dwMode: T.DWORD,
    JobId: T.DWORD
});};
T.PDOC_INFO_2W = function() {return Pointer(Struct('_DOC_INFO_2W', {
    pDocName: T.LPWSTR,
    pOutputFile: T.LPWSTR,
    pDatatype: T.LPWSTR,
    dwMode: T.DWORD,
    JobId: T.DWORD
}));};
T.LPDOC_INFO_2W = function() {return Pointer(Struct('_DOC_INFO_2W', {
    pDocName: T.LPWSTR,
    pOutputFile: T.LPWSTR,
    pDatatype: T.LPWSTR,
    dwMode: T.DWORD,
    JobId: T.DWORD
}));};
T.DOC_INFO_2 = function() {return T.DOC_INFO_2A;};
T.PDOC_INFO_2 = function() {return T.PDOC_INFO_2A;};
T.LPDOC_INFO_2 = function() {return T.LPDOC_INFO_2A;};
T.FORM_INFO_1A = function() {return Struct('_FORM_INFO_1A', {
    Flags: T.DWORD,
    pName: T.LPSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL
});};
T.PFORM_INFO_1A = function() {return Pointer(Struct('_FORM_INFO_1A', {
    Flags: T.DWORD,
    pName: T.LPSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL
}));};
T.LPFORM_INFO_1A = function() {return Pointer(Struct('_FORM_INFO_1A', {
    Flags: T.DWORD,
    pName: T.LPSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL
}));};
T.FORM_INFO_1W = function() {return Struct('_FORM_INFO_1W', {
    Flags: T.DWORD,
    pName: T.LPWSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL
});};
T.PFORM_INFO_1W = function() {return Pointer(Struct('_FORM_INFO_1W', {
    Flags: T.DWORD,
    pName: T.LPWSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL
}));};
T.LPFORM_INFO_1W = function() {return Pointer(Struct('_FORM_INFO_1W', {
    Flags: T.DWORD,
    pName: T.LPWSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL
}));};
T.FORM_INFO_1 = function() {return T.FORM_INFO_1A;};
T.PFORM_INFO_1 = function() {return T.PFORM_INFO_1A;};
T.LPFORM_INFO_1 = function() {return T.LPFORM_INFO_1A;};
T.FORM_INFO_2A = function() {return Struct('_FORM_INFO_2A', {
    Flags: T.DWORD,
    pName: T.LPSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL,
    pKeyword: T.LPCSTR,
    StringType: T.DWORD,
    pMuiDll: T.LPSTR,
    dwResourceId: T.DWORD,
    pDisplayName: T.LPSTR,
    wLangId: T.LANGID
});};
T.PFORM_INFO_2A = function() {return Pointer(Struct('_FORM_INFO_2A', {
    Flags: T.DWORD,
    pName: T.LPSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL,
    pKeyword: T.LPCSTR,
    StringType: T.DWORD,
    pMuiDll: T.LPSTR,
    dwResourceId: T.DWORD,
    pDisplayName: T.LPSTR,
    wLangId: T.LANGID
}));};
T.LPFORM_INFO_2A = function() {return Pointer(Struct('_FORM_INFO_2A', {
    Flags: T.DWORD,
    pName: T.LPSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL,
    pKeyword: T.LPCSTR,
    StringType: T.DWORD,
    pMuiDll: T.LPSTR,
    dwResourceId: T.DWORD,
    pDisplayName: T.LPSTR,
    wLangId: T.LANGID
}));};
T.FORM_INFO_2W = function() {return Struct('_FORM_INFO_2W', {
    Flags: T.DWORD,
    pName: T.LPWSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL,
    pKeyword: T.LPCSTR,
    StringType: T.DWORD,
    pMuiDll: T.LPWSTR,
    dwResourceId: T.DWORD,
    pDisplayName: T.LPWSTR,
    wLangId: T.LANGID
});};
T.PFORM_INFO_2W = function() {return Pointer(Struct('_FORM_INFO_2W', {
    Flags: T.DWORD,
    pName: T.LPWSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL,
    pKeyword: T.LPCSTR,
    StringType: T.DWORD,
    pMuiDll: T.LPWSTR,
    dwResourceId: T.DWORD,
    pDisplayName: T.LPWSTR,
    wLangId: T.LANGID
}));};
T.LPFORM_INFO_2W = function() {return Pointer(Struct('_FORM_INFO_2W', {
    Flags: T.DWORD,
    pName: T.LPWSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL,
    pKeyword: T.LPCSTR,
    StringType: T.DWORD,
    pMuiDll: T.LPWSTR,
    dwResourceId: T.DWORD,
    pDisplayName: T.LPWSTR,
    wLangId: T.LANGID
}));};
T.FORM_INFO_2 = function() {return T.FORM_INFO_2A;};
T.PFORM_INFO_2 = function() {return T.PFORM_INFO_2A;};
T.LPFORM_INFO_2 = function() {return T.LPFORM_INFO_2A;};
T.PRINTPROCESSOR_INFO_1A = function() {return Struct('_PRINTPROCESSOR_INFO_1A', {
    pName: T.LPSTR
});};
T.PPRINTPROCESSOR_INFO_1A = function() {return Pointer(Struct('_PRINTPROCESSOR_INFO_1A', {
    pName: T.LPSTR
}));};
T.LPPRINTPROCESSOR_INFO_1A = function() {return Pointer(Struct('_PRINTPROCESSOR_INFO_1A', {
    pName: T.LPSTR
}));};
T.PRINTPROCESSOR_INFO_1W = function() {return Struct('_PRINTPROCESSOR_INFO_1W', {
    pName: T.LPWSTR
});};
T.PPRINTPROCESSOR_INFO_1W = function() {return Pointer(Struct('_PRINTPROCESSOR_INFO_1W', {
    pName: T.LPWSTR
}));};
T.LPPRINTPROCESSOR_INFO_1W = function() {return Pointer(Struct('_PRINTPROCESSOR_INFO_1W', {
    pName: T.LPWSTR
}));};
T.PRINTPROCESSOR_INFO_1 = function() {return T.PRINTPROCESSOR_INFO_1A;};
T.PPRINTPROCESSOR_INFO_1 = function() {return T.PPRINTPROCESSOR_INFO_1A;};
T.LPPRINTPROCESSOR_INFO_1 = function() {return T.LPPRINTPROCESSOR_INFO_1A;};
T.PORT_INFO_1A = function() {return Struct('_PORT_INFO_1A', {
    pName: T.LPSTR
});};
T.PPORT_INFO_1A = function() {return Pointer(Struct('_PORT_INFO_1A', {
    pName: T.LPSTR
}));};
T.LPPORT_INFO_1A = function() {return Pointer(Struct('_PORT_INFO_1A', {
    pName: T.LPSTR
}));};
T.PORT_INFO_1W = function() {return Struct('_PORT_INFO_1W', {
    pName: T.LPWSTR
});};
T.PPORT_INFO_1W = function() {return Pointer(Struct('_PORT_INFO_1W', {
    pName: T.LPWSTR
}));};
T.LPPORT_INFO_1W = function() {return Pointer(Struct('_PORT_INFO_1W', {
    pName: T.LPWSTR
}));};
T.PORT_INFO_1 = function() {return T.PORT_INFO_1A;};
T.PPORT_INFO_1 = function() {return T.PPORT_INFO_1A;};
T.LPPORT_INFO_1 = function() {return T.LPPORT_INFO_1A;};
T.PORT_INFO_2A = function() {return Struct('_PORT_INFO_2A', {
    pPortName: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDescription: T.LPSTR,
    fPortType: T.DWORD,
    Reserved: T.DWORD
});};
T.PPORT_INFO_2A = function() {return Pointer(Struct('_PORT_INFO_2A', {
    pPortName: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDescription: T.LPSTR,
    fPortType: T.DWORD,
    Reserved: T.DWORD
}));};
T.LPPORT_INFO_2A = function() {return Pointer(Struct('_PORT_INFO_2A', {
    pPortName: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDescription: T.LPSTR,
    fPortType: T.DWORD,
    Reserved: T.DWORD
}));};
T.PORT_INFO_2W = function() {return Struct('_PORT_INFO_2W', {
    pPortName: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDescription: T.LPWSTR,
    fPortType: T.DWORD,
    Reserved: T.DWORD
});};
T.PPORT_INFO_2W = function() {return Pointer(Struct('_PORT_INFO_2W', {
    pPortName: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDescription: T.LPWSTR,
    fPortType: T.DWORD,
    Reserved: T.DWORD
}));};
T.LPPORT_INFO_2W = function() {return Pointer(Struct('_PORT_INFO_2W', {
    pPortName: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDescription: T.LPWSTR,
    fPortType: T.DWORD,
    Reserved: T.DWORD
}));};
T.PORT_INFO_2 = function() {return T.PORT_INFO_2A;};
T.PPORT_INFO_2 = function() {return T.PPORT_INFO_2A;};
T.LPPORT_INFO_2 = function() {return T.LPPORT_INFO_2A;};
T.PORT_INFO_3A = function() {return Struct('_PORT_INFO_3A', {
    dwStatus: T.DWORD,
    pszStatus: T.LPSTR,
    dwSeverity: T.DWORD
});};
T.PPORT_INFO_3A = function() {return Pointer(Struct('_PORT_INFO_3A', {
    dwStatus: T.DWORD,
    pszStatus: T.LPSTR,
    dwSeverity: T.DWORD
}));};
T.LPPORT_INFO_3A = function() {return Pointer(Struct('_PORT_INFO_3A', {
    dwStatus: T.DWORD,
    pszStatus: T.LPSTR,
    dwSeverity: T.DWORD
}));};
T.PORT_INFO_3W = function() {return Struct('_PORT_INFO_3W', {
    dwStatus: T.DWORD,
    pszStatus: T.LPWSTR,
    dwSeverity: T.DWORD
});};
T.PPORT_INFO_3W = function() {return Pointer(Struct('_PORT_INFO_3W', {
    dwStatus: T.DWORD,
    pszStatus: T.LPWSTR,
    dwSeverity: T.DWORD
}));};
T.LPPORT_INFO_3W = function() {return Pointer(Struct('_PORT_INFO_3W', {
    dwStatus: T.DWORD,
    pszStatus: T.LPWSTR,
    dwSeverity: T.DWORD
}));};
T.PORT_INFO_3 = function() {return T.PORT_INFO_3A;};
T.PPORT_INFO_3 = function() {return T.PPORT_INFO_3A;};
T.LPPORT_INFO_3 = function() {return T.LPPORT_INFO_3A;};
T.MONITOR_INFO_1A = function() {return Struct('_MONITOR_INFO_1A', {
    pName: T.LPSTR
});};
T.PMONITOR_INFO_1A = function() {return Pointer(Struct('_MONITOR_INFO_1A', {
    pName: T.LPSTR
}));};
T.LPMONITOR_INFO_1A = function() {return Pointer(Struct('_MONITOR_INFO_1A', {
    pName: T.LPSTR
}));};
T.MONITOR_INFO_1W = function() {return Struct('_MONITOR_INFO_1W', {
    pName: T.LPWSTR
});};
T.PMONITOR_INFO_1W = function() {return Pointer(Struct('_MONITOR_INFO_1W', {
    pName: T.LPWSTR
}));};
T.LPMONITOR_INFO_1W = function() {return Pointer(Struct('_MONITOR_INFO_1W', {
    pName: T.LPWSTR
}));};
T.MONITOR_INFO_1 = function() {return T.MONITOR_INFO_1A;};
T.PMONITOR_INFO_1 = function() {return T.PMONITOR_INFO_1A;};
T.LPMONITOR_INFO_1 = function() {return T.LPMONITOR_INFO_1A;};
T.MONITOR_INFO_2A = function() {return Struct('_MONITOR_INFO_2A', {
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDLLName: T.LPSTR
});};
T.PMONITOR_INFO_2A = function() {return Pointer(Struct('_MONITOR_INFO_2A', {
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDLLName: T.LPSTR
}));};
T.LPMONITOR_INFO_2A = function() {return Pointer(Struct('_MONITOR_INFO_2A', {
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDLLName: T.LPSTR
}));};
T.MONITOR_INFO_2W = function() {return Struct('_MONITOR_INFO_2W', {
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDLLName: T.LPWSTR
});};
T.PMONITOR_INFO_2W = function() {return Pointer(Struct('_MONITOR_INFO_2W', {
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDLLName: T.LPWSTR
}));};
T.LPMONITOR_INFO_2W = function() {return Pointer(Struct('_MONITOR_INFO_2W', {
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDLLName: T.LPWSTR
}));};
T.MONITOR_INFO_2 = function() {return T.MONITOR_INFO_2A;};
T.PMONITOR_INFO_2 = function() {return T.PMONITOR_INFO_2A;};
T.LPMONITOR_INFO_2 = function() {return T.LPMONITOR_INFO_2A;};
T.DATATYPES_INFO_1A = function() {return Struct('_DATATYPES_INFO_1A', {
    pName: T.LPSTR
});};
T.PDATATYPES_INFO_1A = function() {return Pointer(Struct('_DATATYPES_INFO_1A', {
    pName: T.LPSTR
}));};
T.LPDATATYPES_INFO_1A = function() {return Pointer(Struct('_DATATYPES_INFO_1A', {
    pName: T.LPSTR
}));};
T.DATATYPES_INFO_1W = function() {return Struct('_DATATYPES_INFO_1W', {
    pName: T.LPWSTR
});};
T.PDATATYPES_INFO_1W = function() {return Pointer(Struct('_DATATYPES_INFO_1W', {
    pName: T.LPWSTR
}));};
T.LPDATATYPES_INFO_1W = function() {return Pointer(Struct('_DATATYPES_INFO_1W', {
    pName: T.LPWSTR
}));};
T.DATATYPES_INFO_1 = function() {return T.DATATYPES_INFO_1A;};
T.PDATATYPES_INFO_1 = function() {return T.PDATATYPES_INFO_1A;};
T.LPDATATYPES_INFO_1 = function() {return T.LPDATATYPES_INFO_1A;};
T.PRINTER_NOTIFY_OPTIONS_TYPE = function() {return Struct('_PRINTER_NOTIFY_OPTIONS_TYPE', {
    Type: T.WORD,
    Reserved0: T.WORD,
    Reserved1: T.DWORD,
    Reserved2: T.DWORD,
    Count: T.DWORD,
    pFields: T.PWORD
});};
T.PPRINTER_NOTIFY_OPTIONS_TYPE = function() {return Pointer(Struct('_PRINTER_NOTIFY_OPTIONS_TYPE', {
    Type: T.WORD,
    Reserved0: T.WORD,
    Reserved1: T.DWORD,
    Reserved2: T.DWORD,
    Count: T.DWORD,
    pFields: T.PWORD
}));};
T.LPPRINTER_NOTIFY_OPTIONS_TYPE = function() {return Pointer(Struct('_PRINTER_NOTIFY_OPTIONS_TYPE', {
    Type: T.WORD,
    Reserved0: T.WORD,
    Reserved1: T.DWORD,
    Reserved2: T.DWORD,
    Count: T.DWORD,
    pFields: T.PWORD
}));};
T.PRINTER_NOTIFY_OPTIONS = function() {return Struct('_PRINTER_NOTIFY_OPTIONS', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    pTypes: T.PPRINTER_NOTIFY_OPTIONS_TYPE
});};
T.PPRINTER_NOTIFY_OPTIONS = function() {return Pointer(Struct('_PRINTER_NOTIFY_OPTIONS', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    pTypes: T.PPRINTER_NOTIFY_OPTIONS_TYPE
}));};
T.LPPRINTER_NOTIFY_OPTIONS = function() {return Pointer(Struct('_PRINTER_NOTIFY_OPTIONS', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    pTypes: T.PPRINTER_NOTIFY_OPTIONS_TYPE
}));};
T.PRINTER_NOTIFY_INFO_DATA = function() {return Struct('_PRINTER_NOTIFY_INFO_DATA', {
    Type: T.WORD,
    Field: T.WORD,
    Reserved: T.DWORD,
    Id: T.DWORD,
    NotifyData: Union('', {
        adwData: ArrayType(T.DWORD, 2),
        Data: Struct('', {
            cbBuf: T.DWORD,
            pBuf: T.LPVOID
        })
    })
});};
T.PPRINTER_NOTIFY_INFO_DATA = function() {return Pointer(Struct('_PRINTER_NOTIFY_INFO_DATA', {
    Type: T.WORD,
    Field: T.WORD,
    Reserved: T.DWORD,
    Id: T.DWORD,
    NotifyData: Union('', {
        adwData: ArrayType(T.DWORD, 2),
        Data: Struct('', {
            cbBuf: T.DWORD,
            pBuf: T.LPVOID
        })
    })
}));};
T.LPPRINTER_NOTIFY_INFO_DATA = function() {return Pointer(Struct('_PRINTER_NOTIFY_INFO_DATA', {
    Type: T.WORD,
    Field: T.WORD,
    Reserved: T.DWORD,
    Id: T.DWORD,
    NotifyData: Union('', {
        adwData: ArrayType(T.DWORD, 2),
        Data: Struct('', {
            cbBuf: T.DWORD,
            pBuf: T.LPVOID
        })
    })
}));};
T.PRINTER_NOTIFY_INFO = function() {return Struct('_PRINTER_NOTIFY_INFO', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.PRINTER_NOTIFY_INFO_DATA, 1)
});};
T.PPRINTER_NOTIFY_INFO = function() {return Pointer(Struct('_PRINTER_NOTIFY_INFO', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.PRINTER_NOTIFY_INFO_DATA, 1)
}));};
T.LPPRINTER_NOTIFY_INFO = function() {return Pointer(Struct('_PRINTER_NOTIFY_INFO', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.PRINTER_NOTIFY_INFO_DATA, 1)
}));};
T.PROVIDOR_INFO_1A = function() {return Struct('_PROVIDOR_INFO_1A', {
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDLLName: T.LPSTR
});};
T.PPROVIDOR_INFO_1A = function() {return Pointer(Struct('_PROVIDOR_INFO_1A', {
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDLLName: T.LPSTR
}));};
T.LPPROVIDOR_INFO_1A = function() {return Pointer(Struct('_PROVIDOR_INFO_1A', {
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDLLName: T.LPSTR
}));};
T.PROVIDOR_INFO_1W = function() {return Struct('_PROVIDOR_INFO_1W', {
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDLLName: T.LPWSTR
});};
T.PPROVIDOR_INFO_1W = function() {return Pointer(Struct('_PROVIDOR_INFO_1W', {
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDLLName: T.LPWSTR
}));};
T.LPPROVIDOR_INFO_1W = function() {return Pointer(Struct('_PROVIDOR_INFO_1W', {
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDLLName: T.LPWSTR
}));};
T.PROVIDOR_INFO_1 = function() {return T.PROVIDOR_INFO_1A;};
T.PPROVIDOR_INFO_1 = function() {return T.PPROVIDOR_INFO_1A;};
T.LPPROVIDOR_INFO_1 = function() {return T.LPPROVIDOR_INFO_1A;};
T.PRINTER_ENUM_VALUESA = function() {return Struct('_PRINTER_ENUM_VALUESA', {
    pValueName: T.LPSTR,
    cbValueName: T.DWORD,
    dwType: T.DWORD,
    pData: T.LPBYTE,
    cbData: T.DWORD
});};
T.PPRINTER_ENUM_VALUESA = function() {return Pointer(Struct('_PRINTER_ENUM_VALUESA', {
    pValueName: T.LPSTR,
    cbValueName: T.DWORD,
    dwType: T.DWORD,
    pData: T.LPBYTE,
    cbData: T.DWORD
}));};
T.PRINTER_ENUM_VALUESW = function() {return Struct('_PRINTER_ENUM_VALUESW', {
    pValueName: T.LPWSTR,
    cbValueName: T.DWORD,
    dwType: T.DWORD,
    pData: T.LPBYTE,
    cbData: T.DWORD
});};
T.PPRINTER_ENUM_VALUESW = function() {return Pointer(Struct('_PRINTER_ENUM_VALUESW', {
    pValueName: T.LPWSTR,
    cbValueName: T.DWORD,
    dwType: T.DWORD,
    pData: T.LPBYTE,
    cbData: T.DWORD
}));};
T.PRINTER_ENUM_VALUES = function() {return T.PRINTER_ENUM_VALUESA;};
T.PPRINTER_ENUM_VALUES = function() {return T.PPRINTER_ENUM_VALUESA;};
T.BIDI_TYPE = function() {return Enum('BIDI_BLOB', {
    BIDI_NULL: 0,
    BIDI_INT: 1,
    BIDI_FLOAT: 2,
    BIDI_BOOL: 3,
    BIDI_STRING: 4,
    BIDI_TEXT: 5,
    BIDI_ENUM: 6,
    BIDI_BLOB: 7
});};
T.BINARY_CONTAINER = function() {return Struct('_BINARY_CONTAINER', {
    cbBuf: T.DWORD,
    pData: T.LPBYTE
});};
T.PBINARY_CONTAINER = function() {return Pointer(Struct('_BINARY_CONTAINER', {
    cbBuf: T.DWORD,
    pData: T.LPBYTE
}));};
T.BIDI_DATA = function() {return Struct('_BIDI_DATA', {
    dwBidiType: T.DWORD,
    u: Union('', {
        bData: T.BOOL,
        iData: T.INT,
        sData: T.LPWSTR,
        fData: T.FLOAT,
        biData: T.BINARY_CONTAINER
    })
});};
T.LPBIDI_DATA = function() {return Pointer(Struct('_BIDI_DATA', {
    dwBidiType: T.DWORD,
    u: Union('', {
        bData: T.BOOL,
        iData: T.INT,
        sData: T.LPWSTR,
        fData: T.FLOAT,
        biData: T.BINARY_CONTAINER
    })
}));};
T.PBIDI_DATA = function() {return Pointer(Struct('_BIDI_DATA', {
    dwBidiType: T.DWORD,
    u: Union('', {
        bData: T.BOOL,
        iData: T.INT,
        sData: T.LPWSTR,
        fData: T.FLOAT,
        biData: T.BINARY_CONTAINER
    })
}));};
T.BIDI_REQUEST_DATA = function() {return Struct('_BIDI_REQUEST_DATA', {
    dwReqNumber: T.DWORD,
    pSchema: T.LPWSTR,
    data: T.BIDI_DATA
});};
T.LPBIDI_REQUEST_DATA = function() {return Pointer(Struct('_BIDI_REQUEST_DATA', {
    dwReqNumber: T.DWORD,
    pSchema: T.LPWSTR,
    data: T.BIDI_DATA
}));};
T.PBIDI_REQUEST_DATA = function() {return Pointer(Struct('_BIDI_REQUEST_DATA', {
    dwReqNumber: T.DWORD,
    pSchema: T.LPWSTR,
    data: T.BIDI_DATA
}));};
T.BIDI_REQUEST_CONTAINER = function() {return Struct('_BIDI_REQUEST_CONTAINER', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.BIDI_REQUEST_DATA, 1)
});};
T.LPBIDI_REQUEST_CONTAINER = function() {return Pointer(Struct('_BIDI_REQUEST_CONTAINER', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.BIDI_REQUEST_DATA, 1)
}));};
T.PBIDI_REQUEST_CONTAINER = function() {return Pointer(Struct('_BIDI_REQUEST_CONTAINER', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.BIDI_REQUEST_DATA, 1)
}));};
T.BIDI_RESPONSE_DATA = function() {return Struct('_BIDI_RESPONSE_DATA', {
    dwResult: T.DWORD,
    dwReqNumber: T.DWORD,
    pSchema: T.LPWSTR,
    data: T.BIDI_DATA
});};
T.LPBIDI_RESPONSE_DATA = function() {return Pointer(Struct('_BIDI_RESPONSE_DATA', {
    dwResult: T.DWORD,
    dwReqNumber: T.DWORD,
    pSchema: T.LPWSTR,
    data: T.BIDI_DATA
}));};
T.PBIDI_RESPONSE_DATA = function() {return Pointer(Struct('_BIDI_RESPONSE_DATA', {
    dwResult: T.DWORD,
    dwReqNumber: T.DWORD,
    pSchema: T.LPWSTR,
    data: T.BIDI_DATA
}));};
T.BIDI_RESPONSE_CONTAINER = function() {return Struct('_BIDI_RESPONSE_CONTAINER', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.BIDI_RESPONSE_DATA, 1)
});};
T.LPBIDI_RESPONSE_CONTAINER = function() {return Pointer(Struct('_BIDI_RESPONSE_CONTAINER', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.BIDI_RESPONSE_DATA, 1)
}));};
T.PBIDI_RESPONSE_CONTAINER = function() {return Pointer(Struct('_BIDI_RESPONSE_CONTAINER', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.BIDI_RESPONSE_DATA, 1)
}));};
T.byte = function() {return T.u8;};
T.hyper = function() {return T.INT64;};
T.MIDL_uhyper = function() {return T.UINT64;};
T.boolean = function() {return T.u8;};
T.NDR_SCONTEXT = function() {return Pointer(Struct('', {
    pad: ArrayType(Pointer(null), 2),
    userContext: Pointer(null)
}));};
T.NDR_RUNDOWN = function() {return Pointer(Fn(null, [[Pointer(null), 'context']]), [['stdcall']]);};
T.NDR_NOTIFY_ROUTINE = function() {return Pointer(Fn(null, [[null]]), [['stdcall']]);};
T.NDR_NOTIFY2_ROUTINE = function() {return Pointer(Fn(null, [[T.boolean, 'flag']]), [['stdcall']]);};
T.RPC_BUFPTR = function() {return Pointer(T.u8);};
T.RPC_LENGTH = function() {return T.ULONG;};
T.EXPR_EVAL = function() {return Pointer(Fn(null, [[Pointer(Struct('_MIDL_STUB_MESSAGE', null))]]), [['stdcall']]);};
T.PFORMAT_STRING = function() {return Pointer(T.u8, [['const']]);};
T.ARRAY_INFO = function() {return Struct('', {
    Dimension: T.LONG,
    BufferConformanceMark: Pointer(T.ULONG),
    BufferVarianceMark: Pointer(T.ULONG),
    MaxCountArray: Pointer(T.ULONG),
    OffsetArray: Pointer(T.ULONG),
    ActualCountArray: Pointer(T.ULONG)
});};
T.PARRAY_INFO = function() {return Pointer(Struct('', {
    Dimension: T.LONG,
    BufferConformanceMark: Pointer(T.ULONG),
    BufferVarianceMark: Pointer(T.ULONG),
    MaxCountArray: Pointer(T.ULONG),
    OffsetArray: Pointer(T.ULONG),
    ActualCountArray: Pointer(T.ULONG)
}));};
T.CS_STUB_INFO = function() {return Struct('', {
    WireCodeset: T.ULONG,
    DesiredReceivingCodeset: T.ULONG,
    CSArrayInfo: Pointer(null)
});};
T.PNDR_PIPE_DESC = function() {return Pointer(Struct('_NDR_PIPE_DESC', null));};
T.PNDR_PIPE_MESSAGE = function() {return Pointer(Struct('_NDR_PIPE_MESSAGE', null));};
T.PNDR_ASYNC_MESSAGE = function() {return Pointer(Struct('_NDR_ASYNC_MESSAGE', null));};
T.PNDR_CORRELATION_INFO = function() {return Pointer(Struct('_NDR_CORRELATION_INFO', null));};
T.MIDL_STUB_MESSAGE = function() {return Struct('_MIDL_STUB_MESSAGE', {
    RpcMsg: T.PRPC_MESSAGE,
    Buffer: Pointer(T.u8),
    BufferStart: Pointer(T.u8),
    BufferEnd: Pointer(T.u8),
    BufferMark: Pointer(T.u8),
    BufferLength: T.ULONG,
    MemorySize: T.ULONG,
    Memory: Pointer(T.u8),
    IsClient: T.u8,
    Pad: T.u8,
    uFlags2: T.u16,
    ReuseBuffer: T.i32,
    pAllocAllNodesContext: Pointer(Struct('NDR_ALLOC_ALL_NODES_CONTEXT', null)),
    pPointerQueueState: Pointer(Struct('NDR_POINTER_QUEUE_STATE', null)),
    IgnoreEmbeddedPointers: T.i32,
    PointerBufferMark: Pointer(T.u8),
    CorrDespIncrement: T.u8,
    uFlags: T.u8,
    UniquePtrCount: T.u16,
    MaxCount: T.ULONG_PTR,
    Offset: T.ULONG,
    ActualCount: T.ULONG,
    pfnAllocate: Pointer(Fn(Pointer(null), [[T.SIZE_T]])),
    pfnFree: Pointer(Fn(null, [[Pointer(null)]])),
    StackTop: Pointer(T.u8),
    pPresentedType: Pointer(T.u8),
    pTransmitType: Pointer(T.u8),
    SavedHandle: T.handle_t,
    StubDesc: Pointer(Struct('_MIDL_STUB_DESC', null)),
    FullPtrXlatTables: Pointer(Struct('_FULL_PTR_XLAT_TABLES', null)),
    FullPtrRefId: T.ULONG,
    PointerLength: T.ULONG,
    fInDontFree: [T.u32, 1],
    fDontCallFreeInst: [T.u32, 1],
    fInOnlyParam: [T.u32, 1],
    fHasReturn: [T.u32, 1],
    fHasExtensions: [T.u32, 1],
    fHasNewCorrDesc: [T.u32, 1],
    fIsIn: [T.u32, 1],
    fIsOut: [T.u32, 1],
    fIsOicf: [T.u32, 1],
    fBufferValid: [T.u32, 1],
    fHasMemoryValidateCallback: [T.u32, 1],
    fInFree: [T.u32, 1],
    fNeedMCCP: [T.u32, 1],
    fUnused: [T.i32, 3],
    fUnused2: [T.i32, 16],
    dwDestContext: T.DWORD,
    pvDestContext: Pointer(null),
    SavedContextHandles: Pointer(T.NDR_SCONTEXT),
    ParamNumber: T.LONG,
    pRpcChannelBuffer: Pointer(Struct('IRpcChannelBuffer', null)),
    pArrayInfo: T.PARRAY_INFO,
    SizePtrCountArray: Pointer(T.ULONG),
    SizePtrOffsetArray: Pointer(T.ULONG),
    SizePtrLengthArray: Pointer(T.ULONG),
    pArgQueue: Pointer(null),
    dwStubPhase: T.DWORD,
    LowStackMark: Pointer(null),
    pAsyncMsg: T.PNDR_ASYNC_MESSAGE,
    pCorrInfo: T.PNDR_CORRELATION_INFO,
    pCorrMemory: Pointer(T.u8),
    pMemoryList: Pointer(null),
    pCSInfo: Pointer(T.CS_STUB_INFO),
    ConformanceMark: Pointer(T.u8),
    VarianceMark: Pointer(T.u8),
    Unused: T.INT_PTR,
    pContext: Pointer(Struct('_NDR_PROC_CONTEXT', null)),
    ContextHandleHash: Pointer(null),
    pUserMarshalList: Pointer(null),
    Reserved51_3: T.INT_PTR,
    Reserved51_4: T.INT_PTR,
    Reserved51_5: T.INT_PTR
});};
T.PMIDL_STUB_MESSAGE = function() {return Pointer(Struct('_MIDL_STUB_MESSAGE', {
    RpcMsg: T.PRPC_MESSAGE,
    Buffer: Pointer(T.u8),
    BufferStart: Pointer(T.u8),
    BufferEnd: Pointer(T.u8),
    BufferMark: Pointer(T.u8),
    BufferLength: T.ULONG,
    MemorySize: T.ULONG,
    Memory: Pointer(T.u8),
    IsClient: T.u8,
    Pad: T.u8,
    uFlags2: T.u16,
    ReuseBuffer: T.i32,
    pAllocAllNodesContext: Pointer(Struct('NDR_ALLOC_ALL_NODES_CONTEXT', null)),
    pPointerQueueState: Pointer(Struct('NDR_POINTER_QUEUE_STATE', null)),
    IgnoreEmbeddedPointers: T.i32,
    PointerBufferMark: Pointer(T.u8),
    CorrDespIncrement: T.u8,
    uFlags: T.u8,
    UniquePtrCount: T.u16,
    MaxCount: T.ULONG_PTR,
    Offset: T.ULONG,
    ActualCount: T.ULONG,
    pfnAllocate: Pointer(Fn(Pointer(null), [[T.SIZE_T]])),
    pfnFree: Pointer(Fn(null, [[Pointer(null)]])),
    StackTop: Pointer(T.u8),
    pPresentedType: Pointer(T.u8),
    pTransmitType: Pointer(T.u8),
    SavedHandle: T.handle_t,
    StubDesc: Pointer(Struct('_MIDL_STUB_DESC', null)),
    FullPtrXlatTables: Pointer(Struct('_FULL_PTR_XLAT_TABLES', null)),
    FullPtrRefId: T.ULONG,
    PointerLength: T.ULONG,
    fInDontFree: [T.u32, 1],
    fDontCallFreeInst: [T.u32, 1],
    fInOnlyParam: [T.u32, 1],
    fHasReturn: [T.u32, 1],
    fHasExtensions: [T.u32, 1],
    fHasNewCorrDesc: [T.u32, 1],
    fIsIn: [T.u32, 1],
    fIsOut: [T.u32, 1],
    fIsOicf: [T.u32, 1],
    fBufferValid: [T.u32, 1],
    fHasMemoryValidateCallback: [T.u32, 1],
    fInFree: [T.u32, 1],
    fNeedMCCP: [T.u32, 1],
    fUnused: [T.i32, 3],
    fUnused2: [T.i32, 16],
    dwDestContext: T.DWORD,
    pvDestContext: Pointer(null),
    SavedContextHandles: Pointer(T.NDR_SCONTEXT),
    ParamNumber: T.LONG,
    pRpcChannelBuffer: Pointer(Struct('IRpcChannelBuffer', null)),
    pArrayInfo: T.PARRAY_INFO,
    SizePtrCountArray: Pointer(T.ULONG),
    SizePtrOffsetArray: Pointer(T.ULONG),
    SizePtrLengthArray: Pointer(T.ULONG),
    pArgQueue: Pointer(null),
    dwStubPhase: T.DWORD,
    LowStackMark: Pointer(null),
    pAsyncMsg: T.PNDR_ASYNC_MESSAGE,
    pCorrInfo: T.PNDR_CORRELATION_INFO,
    pCorrMemory: Pointer(T.u8),
    pMemoryList: Pointer(null),
    pCSInfo: Pointer(T.CS_STUB_INFO),
    ConformanceMark: Pointer(T.u8),
    VarianceMark: Pointer(T.u8),
    Unused: T.INT_PTR,
    pContext: Pointer(Struct('_NDR_PROC_CONTEXT', null)),
    ContextHandleHash: Pointer(null),
    pUserMarshalList: Pointer(null),
    Reserved51_3: T.INT_PTR,
    Reserved51_4: T.INT_PTR,
    Reserved51_5: T.INT_PTR
}));};
T.GENERIC_BINDING_ROUTINE = function() {return Pointer(Fn(Pointer(null), [[Pointer(null)]]));};
T.GENERIC_UNBIND_ROUTINE = function() {return Pointer(Fn(null, [[Pointer(null)], [Pointer(T.u8)]]), [['stdcall']]);};
T.GENERIC_BINDING_ROUTINE_PAIR = function() {return Struct('_GENERIC_BINDING_ROUTINE_PAIR', {
    pfnBind: T.GENERIC_BINDING_ROUTINE,
    pfnUnbind: T.GENERIC_UNBIND_ROUTINE
});};
T.PGENERIC_BINDING_ROUTINE_PAIR = function() {return Pointer(Struct('_GENERIC_BINDING_ROUTINE_PAIR', {
    pfnBind: T.GENERIC_BINDING_ROUTINE,
    pfnUnbind: T.GENERIC_UNBIND_ROUTINE
}));};
T.GENERIC_BINDING_INFO = function() {return Struct('__GENERIC_BINDING_INFO', {
    pObj: Pointer(null),
    Size: T.u32,
    pfnBind: T.GENERIC_BINDING_ROUTINE,
    pfnUnbind: T.GENERIC_UNBIND_ROUTINE
});};
T.PGENERIC_BINDING_INFO = function() {return Pointer(Struct('__GENERIC_BINDING_INFO', {
    pObj: Pointer(null),
    Size: T.u32,
    pfnBind: T.GENERIC_BINDING_ROUTINE,
    pfnUnbind: T.GENERIC_UNBIND_ROUTINE
}));};
T.XMIT_HELPER_ROUTINE = function() {return Pointer(Fn(null, [[T.PMIDL_STUB_MESSAGE]]), [['stdcall']]);};
T.XMIT_ROUTINE_QUINTUPLE = function() {return Struct('_XMIT_ROUTINE_QUINTUPLE', {
    pfnTranslateToXmit: T.XMIT_HELPER_ROUTINE,
    pfnTranslateFromXmit: T.XMIT_HELPER_ROUTINE,
    pfnFreeXmit: T.XMIT_HELPER_ROUTINE,
    pfnFreeInst: T.XMIT_HELPER_ROUTINE
});};
T.PXMIT_ROUTINE_QUINTUPLE = function() {return Pointer(Struct('_XMIT_ROUTINE_QUINTUPLE', {
    pfnTranslateToXmit: T.XMIT_HELPER_ROUTINE,
    pfnTranslateFromXmit: T.XMIT_HELPER_ROUTINE,
    pfnFreeXmit: T.XMIT_HELPER_ROUTINE,
    pfnFreeInst: T.XMIT_HELPER_ROUTINE
}));};
T.USER_MARSHAL_SIZING_ROUTINE = function() {return Pointer(Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(null)]]), [['stdcall']]);};
T.USER_MARSHAL_MARSHALLING_ROUTINE = function() {return Pointer(Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(null)]]));};
T.USER_MARSHAL_UNMARSHALLING_ROUTINE = function() {return Pointer(Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(null)]]));};
T.USER_MARSHAL_FREEING_ROUTINE = function() {return Pointer(Fn(null, [[Pointer(T.ULONG)], [Pointer(null)]]), [['stdcall']]);};
T.USER_MARSHAL_ROUTINE_QUADRUPLE = function() {return Struct('_USER_MARSHAL_ROUTINE_QUADRUPLE', {
    pfnBufferSize: T.USER_MARSHAL_SIZING_ROUTINE,
    pfnMarshall: T.USER_MARSHAL_MARSHALLING_ROUTINE,
    pfnUnmarshall: T.USER_MARSHAL_UNMARSHALLING_ROUTINE,
    pfnFree: T.USER_MARSHAL_FREEING_ROUTINE
});};
T.USER_MARSHAL_CB_TYPE = function() {return Enum('USER_MARSHAL_CB_FREE', {
    USER_MARSHAL_CB_BUFFER_SIZE: 0,
    USER_MARSHAL_CB_MARSHALL: 1,
    USER_MARSHAL_CB_UNMARSHALL: 2,
    USER_MARSHAL_CB_FREE: 3
});};
T.USER_MARSHAL_CB = function() {return Struct('_USER_MARSHAL_CB', {
    Flags: T.ULONG,
    pStubMsg: T.PMIDL_STUB_MESSAGE,
    pReserve: T.PFORMAT_STRING,
    Signature: T.ULONG,
    CBType: T.USER_MARSHAL_CB_TYPE,
    pFormat: T.PFORMAT_STRING,
    pTypeFormat: T.PFORMAT_STRING
});};
T.MALLOC_FREE_STRUCT = function() {return Struct('_MALLOC_FREE_STRUCT', {
    pfnAllocate: Pointer(Fn(Pointer(null), [[T.SIZE_T]])),
    pfnFree: Pointer(Fn(null, [[Pointer(null)]]))
});};
T.COMM_FAULT_OFFSETS = function() {return Struct('_COMM_FAULT_OFFSETS', {
    CommOffset: T.i16,
    FaultOffset: T.i16
});};
T.MIDL_STUB_DESC = function() {return Struct('_MIDL_STUB_DESC', {
    RpcInterfaceInformation: Pointer(null),
    pfnAllocate: Pointer(Fn(Pointer(null), [[T.SIZE_T]])),
    pfnFree: Pointer(Fn(null, [[Pointer(null)]])),
    IMPLICIT_HANDLE_INFO: Union('', {
        pAutoHandle: Pointer(T.handle_t),
        pPrimitiveHandle: Pointer(T.handle_t),
        pGenericBindingInfo: T.PGENERIC_BINDING_INFO
    }),
    apfnNdrRundownRoutines: Pointer(T.NDR_RUNDOWN),
    aGenericBindingRoutinePairs: Pointer(T.GENERIC_BINDING_ROUTINE_PAIR),
    apfnExprEval: Pointer(T.EXPR_EVAL),
    aXmitQuintuple: Pointer(T.XMIT_ROUTINE_QUINTUPLE),
    pFormatTypes: Pointer(T.u8),
    fCheckBounds: T.i32,
    Version: T.ULONG,
    pMallocFreeStruct: Pointer(T.MALLOC_FREE_STRUCT),
    MIDLVersion: T.LONG,
    CommFaultOffsets: Pointer(T.COMM_FAULT_OFFSETS),
    aUserMarshalQuadruple: Pointer(T.USER_MARSHAL_ROUTINE_QUADRUPLE),
    NotifyRoutineTable: Pointer(T.NDR_NOTIFY_ROUTINE),
    mFlags: T.ULONG_PTR,
    Reserved3: T.ULONG_PTR,
    Reserved4: T.ULONG_PTR,
    Reserved5: T.ULONG_PTR
});};
T.PMIDL_STUB_DESC = function() {return Pointer(T.MIDL_STUB_DESC, [['const']]);};
T.MIDL_FORMAT_STRING = function() {return Struct('_MIDL_FORMAT_STRING', {
    Pad: T.i16,
    Format: ArrayType(T.u8, 0)
});};
T.MIDL_SYNTAX_INFO = function() {return Struct('_MIDL_SYNTAX_INFO', {
    TransferSyntax: T.RPC_SYNTAX_IDENTIFIER,
    DispatchTable: Pointer(T.RPC_DISPATCH_TABLE),
    ProcString: T.PFORMAT_STRING,
    FmtStringOffset: Pointer(T.u16),
    TypeString: T.PFORMAT_STRING,
    aUserMarshalQuadruple: Pointer(null),
    pReserved1: T.ULONG_PTR,
    pReserved2: T.ULONG_PTR
});};
T.PMIDL_SYNTAX_INFO = function() {return Pointer(Struct('_MIDL_SYNTAX_INFO', {
    TransferSyntax: T.RPC_SYNTAX_IDENTIFIER,
    DispatchTable: Pointer(T.RPC_DISPATCH_TABLE),
    ProcString: T.PFORMAT_STRING,
    FmtStringOffset: Pointer(T.u16),
    TypeString: T.PFORMAT_STRING,
    aUserMarshalQuadruple: Pointer(null),
    pReserved1: T.ULONG_PTR,
    pReserved2: T.ULONG_PTR
}));};
T.STUB_THUNK = function() {return Pointer(Fn(null, [[T.PMIDL_STUB_MESSAGE]]), [['stdcall']]);};
T.SERVER_ROUTINE = function() {return Pointer(Fn(T.LONG, []), [['stdcall']]);};
T.MIDL_SERVER_INFO = function() {return Struct('_MIDL_SERVER_INFO_', {
    pStubDesc: T.PMIDL_STUB_DESC,
    DispatchTable: Pointer(T.SERVER_ROUTINE),
    ProcString: T.PFORMAT_STRING,
    FmtStringOffset: Pointer(T.u16),
    ThunkTable: Pointer(T.STUB_THUNK),
    pTransferSyntax: T.PRPC_SYNTAX_IDENTIFIER,
    nCount: T.ULONG_PTR,
    pSyntaxInfo: T.PMIDL_SYNTAX_INFO
});};
T.PMIDL_SERVER_INFO = function() {return Pointer(Struct('_MIDL_SERVER_INFO_', {
    pStubDesc: T.PMIDL_STUB_DESC,
    DispatchTable: Pointer(T.SERVER_ROUTINE),
    ProcString: T.PFORMAT_STRING,
    FmtStringOffset: Pointer(T.u16),
    ThunkTable: Pointer(T.STUB_THUNK),
    pTransferSyntax: T.PRPC_SYNTAX_IDENTIFIER,
    nCount: T.ULONG_PTR,
    pSyntaxInfo: T.PMIDL_SYNTAX_INFO
}));};
T.MIDL_STUBLESS_PROXY_INFO = function() {return Struct('_MIDL_STUBLESS_PROXY_INFO', {
    pStubDesc: T.PMIDL_STUB_DESC,
    ProcFormatString: T.PFORMAT_STRING,
    FormatStringOffset: Pointer(T.u16),
    pTransferSyntax: T.PRPC_SYNTAX_IDENTIFIER,
    nCount: T.ULONG_PTR,
    pSyntaxInfo: T.PMIDL_SYNTAX_INFO
});};
T.PMIDL_STUBLESS_PROXY_INFO = function() {return Pointer(Struct('_MIDL_STUBLESS_PROXY_INFO', {
    pStubDesc: T.PMIDL_STUB_DESC,
    ProcFormatString: T.PFORMAT_STRING,
    FormatStringOffset: Pointer(T.u16),
    pTransferSyntax: T.PRPC_SYNTAX_IDENTIFIER,
    nCount: T.ULONG_PTR,
    pSyntaxInfo: T.PMIDL_SYNTAX_INFO
}));};
T.CLIENT_CALL_RETURN = function() {return Union('_CLIENT_CALL_RETURN', {
    Pointer: Pointer(null),
    Simple: T.LONG_PTR
});};
T.STUB_PHASE = function() {return Enum('STUB_CALL_SERVER_NO_HRESULT', {
    STUB_UNMARSHAL: 0,
    STUB_CALL_SERVER: 1,
    STUB_MARSHAL: 2,
    STUB_CALL_SERVER_NO_HRESULT: 3
});};
T.PROXY_PHASE = function() {return Enum('PROXY_UNMARSHAL', {
    PROXY_CALCSIZE: 0,
    PROXY_GETBUFFER: 1,
    PROXY_MARSHAL: 2,
    PROXY_SENDRECEIVE: 3,
    PROXY_UNMARSHAL: 4
});};
T.XLAT_SIDE = function() {return Enum('XLAT_CLIENT', {
    XLAT_SERVER: 1,
    XLAT_CLIENT: 2
});};
T.FULL_PTR_TO_REFID_ELEMENT = function() {return Struct('_FULL_PTR_TO_REFID_ELEMENT', {
    Next: Pointer(Struct('_FULL_PTR_TO_REFID_ELEMENT', null)),
    Pointer: Pointer(null),
    RefId: T.ULONG,
    State: T.u8
});};
T.PFULL_PTR_TO_REFID_ELEMENT = function() {return Pointer(Struct('_FULL_PTR_TO_REFID_ELEMENT', {
    Next: Pointer(Struct('_FULL_PTR_TO_REFID_ELEMENT', null)),
    Pointer: Pointer(null),
    RefId: T.ULONG,
    State: T.u8
}));};
T.FULL_PTR_XLAT_TABLES = function() {return Struct('_FULL_PTR_XLAT_TABLES', {
    RefIdToPointer: Struct('', {
        XlatTable: Pointer(Pointer(null)),
        StateTable: Pointer(T.u8),
        NumberOfEntries: T.ULONG
    }),
    PointerToRefId: Struct('', {
        XlatTable: Pointer(T.PFULL_PTR_TO_REFID_ELEMENT),
        NumberOfBuckets: T.ULONG,
        HashMask: T.ULONG
    }),
    NextRefId: T.ULONG,
    XlatSide: T.XLAT_SIDE
});};
T.PFULL_PTR_XLAT_TABLES = function() {return Pointer(Struct('_FULL_PTR_XLAT_TABLES', {
    RefIdToPointer: Struct('', {
        XlatTable: Pointer(Pointer(null)),
        StateTable: Pointer(T.u8),
        NumberOfEntries: T.ULONG
    }),
    PointerToRefId: Struct('', {
        XlatTable: Pointer(T.PFULL_PTR_TO_REFID_ELEMENT),
        NumberOfBuckets: T.ULONG,
        HashMask: T.ULONG
    }),
    NextRefId: T.ULONG,
    XlatSide: T.XLAT_SIDE
}));};
T.error_status_t = function() {return T.ULONG;};
T.NDR_CCONTEXT = function() {return Pointer(null);};
T.SCONTEXT_QUEUE = function() {return Struct('_SCONTEXT_QUEUE', {
    NumberOfObjects: T.ULONG,
    ArrayOfObjects: Pointer(T.NDR_SCONTEXT)
});};
T.PSCONTEXT_QUEUE = function() {return Pointer(Struct('_SCONTEXT_QUEUE', {
    NumberOfObjects: T.ULONG,
    ArrayOfObjects: Pointer(T.NDR_SCONTEXT)
}));};
T.NDR_USER_MARSHAL_INFO_LEVEL1 = function() {return Struct('_NDR_USER_MARSHAL_INFO_LEVEL1', {
    Buffer: Pointer(null),
    BufferSize: T.ULONG,
    pfnAllocate: Pointer(Fn(Pointer(null), [[T.SIZE_T]])),
    pfnFree: Pointer(Fn(null, [[Pointer(null)]])),
    pRpcChannelBuffer: Pointer(Struct('IRpcChannelBuffer', null)),
    Reserved: ArrayType(T.ULONG_PTR, 5)
});};
T.NDR_USER_MARSHAL_INFO = function() {return Struct('_NDR_USER_MARSHAL_INFO', {
    InformationLevel: T.ULONG,
    __unnamed0: Union('', {
        Level1: T.NDR_USER_MARSHAL_INFO_LEVEL1
    })
});};
T.IRpcStubBuffer = function() {return Struct('IRpcStubBuffer', null);};
T.IRpcChannelBuffer = function() {return Struct('IRpcChannelBuffer', null);};
T.DOUBLE = function() {return T.f64;};
T.OLECHAR = function() {return T.WCHAR;};
T.LPOLESTR = function() {return Pointer(T.OLECHAR);};
T.LPCOLESTR = function() {return Pointer(T.OLECHAR, [['const']]);};
T.SCODE = function() {return T.LONG;};
T.COAUTHIDENTITY = function() {return Struct('_COAUTHIDENTITY', {
    User: Pointer(T.USHORT),
    UserLength: T.ULONG,
    Domain: Pointer(T.USHORT),
    DomainLength: T.ULONG,
    Password: Pointer(T.USHORT),
    PasswordLength: T.ULONG,
    Flags: T.ULONG
});};
T.COAUTHINFO = function() {return Struct('_COAUTHINFO', {
    dwAuthnSvc: T.DWORD,
    dwAuthzSvc: T.DWORD,
    pwszServerPrincName: T.LPWSTR,
    dwAuthnLevel: T.DWORD,
    dwImpersonationLevel: T.DWORD,
    pAuthIdentityData: Pointer(T.COAUTHIDENTITY),
    dwCapabilities: T.DWORD
});};
T.MEMCTX = function() {return Enum('MEMCTX_SAME', {
    MEMCTX_TASK: 1,
    MEMCTX_SHARED: 2,
    MEMCTX_MACSYSTEM: 3,
    MEMCTX_UNKNOWN: 4,
    MEMCTX_SAME: 5
});};
T.CLSCTX = function() {return Enum('CLSCTX_FROM_DEFAULT_CONTEXT', {
    CLSCTX_INPROC_SERVER: 1,
    CLSCTX_INPROC_HANDLER: 2,
    CLSCTX_LOCAL_SERVER: 4,
    CLSCTX_INPROC_SERVER16: 8,
    CLSCTX_REMOTE_SERVER: 16,
    CLSCTX_INPROC_HANDLER16: 32,
    CLSCTX_INPROC_SERVERX86: 64,
    CLSCTX_INPROC_HANDLERX86: 128,
    CLSCTX_ESERVER_HANDLER: 256,
    CLSCTX_NO_CODE_DOWNLOAD: 1024,
    CLSCTX_NO_CUSTOM_MARSHAL: 4096,
    CLSCTX_ENABLE_CODE_DOWNLOAD: 8192,
    CLSCTX_NO_FAILURE_LOG: 16384,
    CLSCTX_DISABLE_AAA: 32768,
    CLSCTX_ENABLE_AAA: 65536,
    CLSCTX_FROM_DEFAULT_CONTEXT: 131072
});};
T.MSHLFLAGS = function() {return Enum('MSHLFLAGS_NOPING', {
    MSHLFLAGS_NORMAL: 0,
    MSHLFLAGS_TABLESTRONG: 1,
    MSHLFLAGS_TABLEWEAK: 2,
    MSHLFLAGS_NOPING: 4
});};
T.MSHCTX = function() {return Enum('MSHCTX_CROSSCTX', {
    MSHCTX_LOCAL: 0,
    MSHCTX_NOSHAREDMEM: 1,
    MSHCTX_DIFFERENTMACHINE: 2,
    MSHCTX_INPROC: 3,
    MSHCTX_CROSSCTX: 4
});};
T.BYTE_BLOB = function() {return Struct('_BYTE_BLOB', {
    clSize: T.ULONG,
    abData: ArrayType(T.byte, 1)
});};
T.UP_BYTE_BLOB = function() {return Pointer(T.BYTE_BLOB);};
T.FLAGGED_BYTE_BLOB = function() {return Struct('_FLAGGED_BYTE_BLOB', {
    fFlags: T.ULONG,
    clSize: T.ULONG,
    abData: ArrayType(T.byte, 1)
});};
T.UP_FLAGGED_BYTE_BLOB = function() {return Pointer(T.FLAGGED_BYTE_BLOB);};
T.FLAGGED_WORD_BLOB = function() {return Struct('_FLAGGED_WORD_BLOB', {
    fFlags: T.ULONG,
    clSize: T.ULONG,
    asData: ArrayType(T.u16, 1)
});};
T.UP_FLAGGED_WORD_BLOB = function() {return Pointer(T.FLAGGED_WORD_BLOB);};
T.BYTE_SIZEDARR = function() {return Struct('_BYTE_SIZEDARR', {
    clSize: T.ULONG,
    pData: Pointer(T.byte)
});};
T.WORD_SIZEDARR = function() {return Struct('_SHORT_SIZEDARR', {
    clSize: T.ULONG,
    pData: Pointer(T.u16)
});};
T.DWORD_SIZEDARR = function() {return Struct('_LONG_SIZEDARR', {
    clSize: T.ULONG,
    pData: Pointer(T.ULONG)
});};
T.HYPER_SIZEDARR = function() {return Struct('_HYPER_SIZEDARR', {
    clSize: T.ULONG,
    pData: Pointer(T.hyper)
});};
T.userCLIPFORMAT = function() {return Struct('_userCLIPFORMAT', {
    fContext: T.LONG,
    u: Union('', {
        dwValue: T.DWORD,
        pwszName: T.LPWSTR
    })
});};
T.wireCLIPFORMAT = function() {return Pointer(T.userCLIPFORMAT);};
T.CLIPFORMAT = function() {return T.WORD;};
T.RemHGLOBAL = function() {return Struct('tagRemHGLOBAL', {
    fNullHGlobal: T.LONG,
    cbData: T.ULONG,
    data: ArrayType(T.byte, 1)
});};
T.userHGLOBAL = function() {return Struct('_userHGLOBAL', {
    fContext: T.LONG,
    u: Union('', {
        hInproc: T.LONG,
        hRemote: Pointer(T.FLAGGED_BYTE_BLOB),
        hInproc64: T.INT64
    })
});};
T.wireHGLOBAL = function() {return Pointer(T.userHGLOBAL);};
T.RemHMETAFILEPICT = function() {return Struct('tagRemHMETAFILEPICT', {
    mm: T.LONG,
    xExt: T.LONG,
    yExt: T.LONG,
    cbData: T.ULONG,
    data: ArrayType(T.byte, 1)
});};
T.userHMETAFILE = function() {return Struct('_userHMETAFILE', {
    fContext: T.LONG,
    u: Union('', {
        hInproc: T.LONG,
        hRemote: Pointer(T.BYTE_BLOB),
        hInproc64: T.INT64
    })
});};
T.wireHMETAFILE = function() {return Pointer(T.userHMETAFILE);};
T.remoteMETAFILEPICT = function() {return Struct('_remoteMETAFILEPICT', {
    mm: T.LONG,
    xExt: T.LONG,
    yExt: T.LONG,
    hMF: Pointer(T.userHMETAFILE)
});};
T.userHMETAFILEPICT = function() {return Struct('_userHMETAFILEPICT', {
    fContext: T.LONG,
    u: Union('', {
        hInproc: T.LONG,
        hRemote: Pointer(T.remoteMETAFILEPICT),
        hInproc64: T.INT64
    })
});};
T.wireHMETAFILEPICT = function() {return Pointer(T.userHMETAFILEPICT);};
T.RemHENHMETAFILE = function() {return Struct('tagRemHENHMETAFILE', {
    cbData: T.ULONG,
    data: ArrayType(T.byte, 1)
});};
T.userHENHMETAFILE = function() {return Struct('_userHENHMETAFILE', {
    fContext: T.LONG,
    u: Union('', {
        hInproc: T.LONG,
        hRemote: Pointer(T.BYTE_BLOB),
        hInproc64: T.INT64
    })
});};
T.wireHENHMETAFILE = function() {return Pointer(T.userHENHMETAFILE);};
T.RemHBITMAP = function() {return Struct('tagRemHBITMAP', {
    cbData: T.ULONG,
    data: ArrayType(T.byte, 1)
});};
T.userBITMAP = function() {return Struct('_userBITMAP', {
    bmType: T.LONG,
    bmWidth: T.LONG,
    bmHeight: T.LONG,
    bmWidthBytes: T.LONG,
    bmPlanes: T.WORD,
    bmBitsPixel: T.WORD,
    cbSize: T.ULONG,
    pBuffer: ArrayType(T.byte, 1)
});};
T.userHBITMAP = function() {return Struct('_userHBITMAP', {
    fContext: T.LONG,
    u: Union('', {
        hInproc: T.LONG,
        hRemote: Pointer(T.userBITMAP),
        hInproc64: T.INT64
    })
});};
T.wireHBITMAP = function() {return Pointer(T.userHBITMAP);};
T.RemHPALETTE = function() {return Struct('tagRemHPALETTE', {
    cbData: T.ULONG,
    data: ArrayType(T.byte, 1)
});};
T.rpcLOGPALETTE = function() {return Struct('tagrpcLOGPALETTE', {
    palVersion: T.WORD,
    palNumEntries: T.WORD,
    palPalEntry: ArrayType(T.PALETTEENTRY, 1)
});};
T.userHPALETTE = function() {return Struct('_userHPALETTE', {
    fContext: T.LONG,
    u: Union('', {
        hInproc: T.LONG,
        hRemote: Pointer(T.rpcLOGPALETTE),
        hInproc64: T.INT64
    })
});};
T.wireHPALETTE = function() {return Pointer(T.userHPALETTE);};
T.HMETAFILEPICT = function() {return Pointer(null);};
T.RemotableHandle = function() {return Struct('_RemotableHandle', {
    fContext: T.LONG,
    u: Union('', {
        hInproc: T.LONG,
        hRemote: T.LONG
    })
});};
T.wireHACCEL = function() {return Pointer(T.RemotableHandle);};
T.wireHBRUSH = function() {return Pointer(T.RemotableHandle);};
T.wireHDC = function() {return Pointer(T.RemotableHandle);};
T.wireHFONT = function() {return Pointer(T.RemotableHandle);};
T.wireHICON = function() {return Pointer(T.RemotableHandle);};
T.wireHMENU = function() {return Pointer(T.RemotableHandle);};
T.wireHWND = function() {return Pointer(T.RemotableHandle);};
T.DVASPECT = function() {return Enum('DVASPECT_DOCPRINT', {
    DVASPECT_CONTENT: 1,
    DVASPECT_THUMBNAIL: 2,
    DVASPECT_ICON: 4,
    DVASPECT_DOCPRINT: 8
});};
T.STGC = function() {return Enum('STGC_CONSOLIDATE', {
    STGC_DEFAULT: 0,
    STGC_OVERWRITE: 1,
    STGC_ONLYIFCURRENT: 2,
    STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE: 4,
    STGC_CONSOLIDATE: 8
});};
T.STGMOVE = function() {return Enum('STGMOVE_SHALLOWCOPY', {
    STGMOVE_MOVE: 0,
    STGMOVE_COPY: 1,
    STGMOVE_SHALLOWCOPY: 2
});};
T.STATFLAG = function() {return Enum('STATFLAG_NOOPEN', {
    STATFLAG_DEFAULT: 0,
    STATFLAG_NONAME: 1,
    STATFLAG_NOOPEN: 2
});};
T.DATE = function() {return T.f64;};
T.CY = function() {return Union('tagCY', {
    __unnamed0: Struct('', {
        Lo: T.ULONG,
        Hi: T.LONG
    }),
    int64: T.LONGLONG
});};
T.LPCY = function() {return Pointer(T.CY);};
T.DECIMAL = function() {return Struct('tagDEC', {
    wReserved: T.USHORT,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            scale: T.BYTE,
            sign: T.BYTE
        }),
        signscale: T.USHORT
    }),
    Hi32: T.ULONG,
    __unnamed1: Union('', {
        __unnamed0: Struct('', {
            Lo32: T.ULONG,
            Mid32: T.ULONG
        }),
        Lo64: T.ULONGLONG
    })
});};
T.LPDECIMAL = function() {return Pointer(T.DECIMAL);};
T.wireBSTR = function() {return Pointer(T.FLAGGED_WORD_BLOB);};
T.BSTR = function() {return Pointer(T.OLECHAR);};
T.LPBSTR = function() {return Pointer(T.BSTR);};
T.VARIANT_BOOL = function() {return T.i16;};
T._VARIANT_BOOL = function() {return T.VARIANT_BOOL;};
T.BSTRBLOB = function() {return Struct('tagBSTRBLOB', {
    cbSize: T.ULONG,
    pData: Pointer(T.BYTE)
});};
T.LPBSTRBLOB = function() {return Pointer(Struct('tagBSTRBLOB', null));};
T.CLIPDATA = function() {return Struct('tagCLIPDATA', {
    cbSize: T.ULONG,
    ulClipFmt: T.LONG,
    pClipData: Pointer(T.BYTE)
});};
T.PROPID = function() {return T.ULONG;};
T.VARTYPE = function() {return T.u16;};
T.CSPLATFORM = function() {return Struct('tagCSPLATFORM', {
    dwPlatformId: T.DWORD,
    dwVersionHi: T.DWORD,
    dwVersionLo: T.DWORD,
    dwProcessorArch: T.DWORD
});};
T.QUERYCONTEXT = function() {return Struct('tagQUERYCONTEXT', {
    dwContext: T.DWORD,
    Platform: T.CSPLATFORM,
    Locale: T.LCID,
    dwVersionHi: T.DWORD,
    dwVersionLo: T.DWORD
});};
T.TYSPEC = function() {return Enum('TYSPEC_OBJECTID', {
    TYSPEC_CLSID: 0,
    TYSPEC_FILEEXT: 1,
    TYSPEC_MIMETYPE: 2,
    TYSPEC_PROGID: 3,
    TYSPEC_FILENAME: 4,
    TYSPEC_PACKAGENAME: 5,
    TYSPEC_OBJECTID: 6
});};
T.uCLSSPEC = function() {return Struct('__WIDL_wtypes_generated_name_00000000', {
    tyspec: T.DWORD,
    tagged_union: Union('', {
        clsid: T.CLSID,
        pFileExt: T.LPOLESTR,
        pMimeType: T.LPOLESTR,
        pProgId: T.LPOLESTR,
        pFileName: T.LPOLESTR,
        ByName: Struct('', {
            pPackageName: T.LPOLESTR,
            PolicyId: T.GUID
        }),
        ByObjectId: Struct('', {
            ObjectId: T.GUID,
            PolicyId: T.GUID
        })
    })
});};
T.PROPERTYKEY = function() {return Struct('_tagpropertykey', {
    fmtid: T.GUID,
    pid: T.DWORD
});};
T.IUnknown = function() {return Struct('IUnknown', null);};
T.IClassFactory = function() {return Struct('IClassFactory', null);};
T.LPUNKNOWN = function() {return Pointer(T.IUnknown);};
T.IUnknownVtbl = function() {return Struct('IUnknownVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IUnknown), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IUnknown), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IUnknown), 'This']]))
});};
T.LPCLASSFACTORY = function() {return Pointer(T.IClassFactory);};
T.IClassFactoryVtbl = function() {return Struct('IClassFactoryVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IClassFactory), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IClassFactory), 'This']])),
    CreateInstance: Pointer(Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    LockServer: Pointer(Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [T.BOOL, 'fLock']]))
});};
T.IMarshal = function() {return Struct('IMarshal', null);};
T.IMarshal2 = function() {return Struct('IMarshal2', null);};
T.IStdMarshalInfo = function() {return Struct('IStdMarshalInfo', null);};
T.IExternalConnection = function() {return Struct('IExternalConnection', null);};
T.IMultiQI = function() {return Struct('IMultiQI', null);};
T.IMalloc = function() {return Struct('IMalloc', null);};
T.IMallocSpy = function() {return Struct('IMallocSpy', null);};
T.IInternalUnknown = function() {return Struct('IInternalUnknown', null);};
T.IEnumUnknown = function() {return Struct('IEnumUnknown', null);};
T.ISurrogate = function() {return Struct('ISurrogate', null);};
T.IGlobalInterfaceTable = function() {return Struct('IGlobalInterfaceTable', null);};
T.IBindCtx = function() {return Struct('IBindCtx', null);};
T.IEnumMoniker = function() {return Struct('IEnumMoniker', null);};
T.IRunnableObject = function() {return Struct('IRunnableObject', null);};
T.IRunningObjectTable = function() {return Struct('IRunningObjectTable', null);};
T.IPersist = function() {return Struct('IPersist', null);};
T.IPersistStream = function() {return Struct('IPersistStream', null);};
T.IMoniker = function() {return Struct('IMoniker', null);};
T.IROTData = function() {return Struct('IROTData', null);};
T.IEnumString = function() {return Struct('IEnumString', null);};
T.IClassActivator = function() {return Struct('IClassActivator', null);};
T.ISequentialStream = function() {return Struct('ISequentialStream', null);};
T.IStream = function() {return Struct('IStream', null);};
T.IEnumSTATSTG = function() {return Struct('IEnumSTATSTG', null);};
T.IStorage = function() {return Struct('IStorage', null);};
T.IPersistFile = function() {return Struct('IPersistFile', null);};
T.IPersistStorage = function() {return Struct('IPersistStorage', null);};
T.IRootStorage = function() {return Struct('IRootStorage', null);};
T.ILockBytes = function() {return Struct('ILockBytes', null);};
T.IFillLockBytes = function() {return Struct('IFillLockBytes', null);};
T.IProgressNotify = function() {return Struct('IProgressNotify', null);};
T.ILayoutStorage = function() {return Struct('ILayoutStorage', null);};
T.IBlockingLock = function() {return Struct('IBlockingLock', null);};
T.ITimeAndNoticeControl = function() {return Struct('ITimeAndNoticeControl', null);};
T.IOplockStorage = function() {return Struct('IOplockStorage', null);};
T.IEnumFORMATETC = function() {return Struct('IEnumFORMATETC', null);};
T.IEnumSTATDATA = function() {return Struct('IEnumSTATDATA', null);};
T.IAdviseSink = function() {return Struct('IAdviseSink', null);};
T.IAdviseSink2 = function() {return Struct('IAdviseSink2', null);};
T.IDataObject = function() {return Struct('IDataObject', null);};
T.IDataAdviseHolder = function() {return Struct('IDataAdviseHolder', null);};
T.IMessageFilter = function() {return Struct('IMessageFilter', null);};
T.IRpcChannelBuffer2 = function() {return Struct('IRpcChannelBuffer2', null);};
T.IRpcChannelBuffer3 = function() {return Struct('IRpcChannelBuffer3', null);};
T.IAsyncRpcChannelBuffer = function() {return Struct('IAsyncRpcChannelBuffer', null);};
T.IRpcSyntaxNegotiate = function() {return Struct('IRpcSyntaxNegotiate', null);};
T.IRpcProxyBuffer = function() {return Struct('IRpcProxyBuffer', null);};
T.IPSFactoryBuffer = function() {return Struct('IPSFactoryBuffer', null);};
T.IChannelHook = function() {return Struct('IChannelHook', null);};
T.IClientSecurity = function() {return Struct('IClientSecurity', null);};
T.IServerSecurity = function() {return Struct('IServerSecurity', null);};
T.IAsyncSetup = function() {return Struct('IAsyncSetup', null);};
T.IDirectWriterLock = function() {return Struct('IDirectWriterLock', null);};
T.ISynchronize = function() {return Struct('ISynchronize', null);};
T.ISynchronizeHandle = function() {return Struct('ISynchronizeHandle', null);};
T.ISynchronizeEvent = function() {return Struct('ISynchronizeEvent', null);};
T.ISynchronizeContainer = function() {return Struct('ISynchronizeContainer', null);};
T.ISynchronizeMutex = function() {return Struct('ISynchronizeMutex', null);};
T.ICancelMethodCalls = function() {return Struct('ICancelMethodCalls', null);};
T.IAsyncManager = function() {return Struct('IAsyncManager', null);};
T.ICallFactory = function() {return Struct('ICallFactory', null);};
T.IRpcOptions = function() {return Struct('IRpcOptions', null);};
T.IRpcHelper = function() {return Struct('IRpcHelper', null);};
T.IReleaseMarshalBuffers = function() {return Struct('IReleaseMarshalBuffers', null);};
T.IWaitMultiple = function() {return Struct('IWaitMultiple', null);};
T.IUrlMon = function() {return Struct('IUrlMon', null);};
T.IForegroundTransfer = function() {return Struct('IForegroundTransfer', null);};
T.IAddrTrackingControl = function() {return Struct('IAddrTrackingControl', null);};
T.IAddrExclusionControl = function() {return Struct('IAddrExclusionControl', null);};
T.IComThreadingInfo = function() {return Struct('IComThreadingInfo', null);};
T.IProcessInitControl = function() {return Struct('IProcessInitControl', null);};
T.IInitializeSpy = function() {return Struct('IInitializeSpy', null);};
T.IThumbnailExtractor = function() {return Struct('IThumbnailExtractor', null);};
T.IEnumContextProps = function() {return Struct('IEnumContextProps', null);};
T.IContext = function() {return Struct('IContext', null);};
T.IObjContext = function() {return Struct('IObjContext', null);};
T.COSERVERINFO = function() {return Struct('_COSERVERINFO', {
    dwReserved1: T.DWORD,
    pwszName: T.LPWSTR,
    pAuthInfo: Pointer(T.COAUTHINFO),
    dwReserved2: T.DWORD
});};
T.LPMARSHAL = function() {return Pointer(T.IMarshal);};
T.IMarshalVtbl = function() {return Struct('IMarshalVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IMarshal), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IMarshal), 'This']])),
    GetUnmarshalClass: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags'], [Pointer(T.CLSID), 'pCid']])),
    GetMarshalSizeMax: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags'], [Pointer(T.DWORD), 'pSize']])),
    MarshalInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IStream), 'pStm'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags']])),
    UnmarshalInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IStream), 'pStm'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']])),
    ReleaseMarshalData: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IStream), 'pStm']])),
    DisconnectObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [T.DWORD, 'dwReserved']]))
});};
T.LPMARSHAL2 = function() {return Pointer(T.IMarshal2);};
T.IMarshal2Vtbl = function() {return Struct('IMarshal2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IMarshal2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IMarshal2), 'This']])),
    GetUnmarshalClass: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags'], [Pointer(T.CLSID), 'pCid']])),
    GetMarshalSizeMax: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags'], [Pointer(T.DWORD), 'pSize']])),
    MarshalInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal2), 'This'], [Pointer(T.IStream), 'pStm'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags']])),
    UnmarshalInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal2), 'This'], [Pointer(T.IStream), 'pStm'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']])),
    ReleaseMarshalData: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal2), 'This'], [Pointer(T.IStream), 'pStm']])),
    DisconnectObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal2), 'This'], [T.DWORD, 'dwReserved']]))
});};
T.LPSTDMARSHALINFO = function() {return Pointer(T.IStdMarshalInfo);};
T.IStdMarshalInfoVtbl = function() {return Struct('IStdMarshalInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IStdMarshalInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IStdMarshalInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IStdMarshalInfo), 'This']])),
    GetClassForHandler: Pointer(Fn(T.HRESULT, [[Pointer(T.IStdMarshalInfo), 'This'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [Pointer(T.CLSID), 'pClsid']]))
});};
T.LPEXTERNALCONNECTION = function() {return Pointer(T.IExternalConnection);};
T.EXTCONN = function() {return Enum('EXTCONN_CALLABLE', {
    EXTCONN_STRONG: 1,
    EXTCONN_WEAK: 2,
    EXTCONN_CALLABLE: 4
});};
T.IExternalConnectionVtbl = function() {return Struct('IExternalConnectionVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IExternalConnection), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IExternalConnection), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IExternalConnection), 'This']])),
    AddConnection: Pointer(Fn(T.DWORD, [[Pointer(T.IExternalConnection), 'This'], [T.DWORD, 'extconn'], [T.DWORD, 'reserved']])),
    ReleaseConnection: Pointer(Fn(T.DWORD, [[Pointer(T.IExternalConnection), 'This'], [T.DWORD, 'extconn'], [T.DWORD, 'reserved'], [T.BOOL, 'fLastReleaseCloses']]))
});};
T.LPMULTIQI = function() {return Pointer(T.IMultiQI);};
T.MULTI_QI = function() {return Struct('tagMULTI_QI', {
    pIID: Pointer(T.IID),
    pItf: Pointer(T.IUnknown),
    hr: T.HRESULT
});};
T.IMultiQIVtbl = function() {return Struct('IMultiQIVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMultiQI), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IMultiQI), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IMultiQI), 'This']])),
    QueryMultipleInterfaces: Pointer(Fn(T.HRESULT, [[Pointer(T.IMultiQI), 'This'], [T.ULONG, 'cMQIs'], [Pointer(T.MULTI_QI), 'pMQIs']]))
});};
T.LPMALLOC = function() {return Pointer(T.IMalloc);};
T.IMallocVtbl = function() {return Struct('IMallocVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMalloc), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IMalloc), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IMalloc), 'This']])),
    Alloc: Pointer(Fn(T.LPVOID, [[Pointer(T.IMalloc), 'This'], [T.ULONG, 'cb']])),
    Realloc: Pointer(Fn(T.LPVOID, [[Pointer(T.IMalloc), 'This'], [T.LPVOID, 'pv'], [T.ULONG, 'cb']])),
    Free: Pointer(Fn(null, [[Pointer(T.IMalloc), 'This'], [T.LPVOID, 'pv']])),
    GetSize: Pointer(Fn(T.ULONG, [[Pointer(T.IMalloc), 'This'], [T.LPVOID, 'pv']])),
    DidAlloc: Pointer(Fn(T.i32, [[Pointer(T.IMalloc), 'This'], [T.LPVOID, 'pv']])),
    HeapMinimize: Pointer(Fn(null, [[Pointer(T.IMalloc), 'This']]))
});};
T.LPMALLOCSPY = function() {return Pointer(T.IMallocSpy);};
T.IMallocSpyVtbl = function() {return Struct('IMallocSpyVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMallocSpy), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IMallocSpy), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IMallocSpy), 'This']])),
    PreAlloc: Pointer(Fn(T.ULONG, [[Pointer(T.IMallocSpy), 'This'], [T.ULONG, 'cbRequest']])),
    PostAlloc: Pointer(Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pActual']])),
    PreFree: Pointer(Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.BOOL, 'fSpyed']])),
    PostFree: Pointer(Fn(null, [[Pointer(T.IMallocSpy), 'This'], [T.BOOL, 'fSpyed']])),
    PreRealloc: Pointer(Fn(T.ULONG, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.ULONG, 'cbRequest'], [Pointer(T.LPVOID), 'ppNewRequest'], [T.BOOL, 'fSpyed']])),
    PostRealloc: Pointer(Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pActual'], [T.BOOL, 'fSpyed']])),
    PreGetSize: Pointer(Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.BOOL, 'fSpyed']])),
    PostGetSize: Pointer(Fn(T.ULONG, [[Pointer(T.IMallocSpy), 'This'], [T.ULONG, 'cbActual'], [T.BOOL, 'fSpyed']])),
    PreDidAlloc: Pointer(Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.BOOL, 'fSpyed']])),
    PostDidAlloc: Pointer(Fn(T.i32, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.BOOL, 'fSpyed'], [T.i32, 'fActual']])),
    PreHeapMinimize: Pointer(Fn(null, [[Pointer(T.IMallocSpy), 'This']])),
    PostHeapMinimize: Pointer(Fn(null, [[Pointer(T.IMallocSpy), 'This']]))
});};
T.IInternalUnknownVtbl = function() {return Struct('IInternalUnknownVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternalUnknown), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternalUnknown), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternalUnknown), 'This']])),
    QueryInternalInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternalUnknown), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']]))
});};
T.LPENUMUNKNOWN = function() {return Pointer(T.IEnumUnknown);};
T.IEnumUnknownVtbl = function() {return Struct('IEnumUnknownVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumUnknown), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumUnknown), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [T.ULONG, 'celt'], [Pointer(Pointer(T.IUnknown)), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [Pointer(Pointer(T.IEnumUnknown)), 'ppenum']]))
});};
T.LPSURROGATE = function() {return Pointer(T.ISurrogate);};
T.ISurrogateVtbl = function() {return Struct('ISurrogateVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISurrogate), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISurrogate), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISurrogate), 'This']])),
    LoadDllServer: Pointer(Fn(T.HRESULT, [[Pointer(T.ISurrogate), 'This'], [Pointer(T.CLSID), 'Clsid']])),
    FreeSurrogate: Pointer(Fn(T.HRESULT, [[Pointer(T.ISurrogate), 'This']]))
});};
T.LPGLOBALINTERFACETABLE = function() {return Pointer(T.IGlobalInterfaceTable);};
T.IGlobalInterfaceTableVtbl = function() {return Struct('IGlobalInterfaceTableVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IGlobalInterfaceTable), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IGlobalInterfaceTable), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IGlobalInterfaceTable), 'This']])),
    RegisterInterfaceInGlobal: Pointer(Fn(T.HRESULT, [[Pointer(T.IGlobalInterfaceTable), 'This'], [Pointer(T.IUnknown), 'pUnk'], [Pointer(T.IID), 'riid'], [Pointer(T.DWORD), 'pdwCookie']])),
    RevokeInterfaceFromGlobal: Pointer(Fn(T.HRESULT, [[Pointer(T.IGlobalInterfaceTable), 'This'], [T.DWORD, 'dwCookie']])),
    GetInterfaceFromGlobal: Pointer(Fn(T.HRESULT, [[Pointer(T.IGlobalInterfaceTable), 'This'], [T.DWORD, 'dwCookie'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']]))
});};
T.LPBINDCTX = function() {return Pointer(T.IBindCtx);};
T.LPBC = function() {return Pointer(T.IBindCtx);};
T.BIND_OPTS = function() {return Struct('tagBIND_OPTS', {
    cbStruct: T.DWORD,
    grfFlags: T.DWORD,
    grfMode: T.DWORD,
    dwTickCountDeadline: T.DWORD
});};
T.LPBIND_OPTS = function() {return Pointer(Struct('tagBIND_OPTS', null));};
T.BIND_OPTS2 = function() {return Struct('tagBIND_OPTS2', {
    cbStruct: T.DWORD,
    grfFlags: T.DWORD,
    grfMode: T.DWORD,
    dwTickCountDeadline: T.DWORD,
    dwTrackFlags: T.DWORD,
    dwClassContext: T.DWORD,
    locale: T.LCID,
    pServerInfo: Pointer(T.COSERVERINFO)
});};
T.LPBIND_OPTS2 = function() {return Pointer(Struct('tagBIND_OPTS2', null));};
T.BIND_OPTS3 = function() {return Struct('tagBIND_OPTS3', {
    cbStruct: T.DWORD,
    grfFlags: T.DWORD,
    grfMode: T.DWORD,
    dwTickCountDeadline: T.DWORD,
    dwTrackFlags: T.DWORD,
    dwClassContext: T.DWORD,
    locale: T.LCID,
    pServerInfo: Pointer(T.COSERVERINFO),
    hwnd: T.HWND
});};
T.LPBIND_OPTS3 = function() {return Pointer(Struct('tagBIND_OPTS3', null));};
T.BIND_FLAGS = function() {return Enum('BIND_JUSTTESTEXISTENCE', {
    BIND_MAYBOTHERUSER: 1,
    BIND_JUSTTESTEXISTENCE: 2
});};
T.IBindCtxVtbl = function() {return Struct('IBindCtxVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IBindCtx), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IBindCtx), 'This']])),
    RegisterObjectBound: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.IUnknown), 'punk']])),
    RevokeObjectBound: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.IUnknown), 'punk']])),
    ReleaseBoundObjects: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This']])),
    SetBindOptions: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.BIND_OPTS), 'pbindopts']])),
    GetBindOptions: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.BIND_OPTS), 'pbindopts']])),
    GetRunningObjectTable: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(Pointer(T.IRunningObjectTable)), 'pprot']])),
    RegisterObjectParam: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [T.LPOLESTR, 'pszKey'], [Pointer(T.IUnknown), 'punk']])),
    GetObjectParam: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [T.LPOLESTR, 'pszKey'], [Pointer(Pointer(T.IUnknown)), 'ppunk']])),
    EnumObjectParam: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(Pointer(T.IEnumString)), 'ppenum']])),
    RevokeObjectParam: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [T.LPOLESTR, 'pszKey']]))
});};
T.LPENUMMONIKER = function() {return Pointer(T.IEnumMoniker);};
T.IEnumMonikerVtbl = function() {return Struct('IEnumMonikerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumMoniker), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumMoniker), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [T.ULONG, 'celt'], [Pointer(Pointer(T.IMoniker)), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [Pointer(Pointer(T.IEnumMoniker)), 'ppenum']]))
});};
T.LPRUNNABLEOBJECT = function() {return Pointer(T.IRunnableObject);};
T.IRunnableObjectVtbl = function() {return Struct('IRunnableObjectVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRunnableObject), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRunnableObject), 'This']])),
    GetRunningClass: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [T.LPCLSID, 'lpClsid']])),
    Run: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [T.LPBINDCTX, 'pbc']])),
    IsRunning: Pointer(Fn(T.BOOL, [[Pointer(T.IRunnableObject), 'This']])),
    LockRunning: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [T.BOOL, 'fLock'], [T.BOOL, 'fLastUnlockCloses']])),
    SetContainedObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [T.BOOL, 'fContained']]))
});};
T.LPRUNNINGOBJECTTABLE = function() {return Pointer(T.IRunningObjectTable);};
T.IRunningObjectTableVtbl = function() {return Struct('IRunningObjectTableVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRunningObjectTable), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRunningObjectTable), 'This']])),
    Register: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [T.DWORD, 'grfFlags'], [Pointer(T.IUnknown), 'punkObject'], [Pointer(T.IMoniker), 'pmkObjectName'], [Pointer(T.DWORD), 'pdwRegister']])),
    Revoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [T.DWORD, 'dwRegister']])),
    IsRunning: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(T.IMoniker), 'pmkObjectName']])),
    GetObjectA: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(T.IMoniker), 'pmkObjectName'], [Pointer(Pointer(T.IUnknown)), 'ppunkObject']])),
    NoteChangeTime: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [T.DWORD, 'dwRegister'], [Pointer(T.FILETIME), 'pfiletime']])),
    GetTimeOfLastChange: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(T.IMoniker), 'pmkObjectName'], [Pointer(T.FILETIME), 'pfiletime']])),
    EnumRunning: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(Pointer(T.IEnumMoniker)), 'ppenumMoniker']]))
});};
T.LPPERSIST = function() {return Pointer(T.IPersist);};
T.IPersistVtbl = function() {return Struct('IPersistVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersist), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPersist), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPersist), 'This']])),
    GetClassID: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersist), 'This'], [Pointer(T.CLSID), 'pClassID']]))
});};
T.LPPERSISTSTREAM = function() {return Pointer(T.IPersistStream);};
T.IPersistStreamVtbl = function() {return Struct('IPersistStreamVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPersistStream), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPersistStream), 'This']])),
    GetClassID: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This'], [Pointer(T.CLSID), 'pClassID']])),
    IsDirty: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This']])),
    Load: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This'], [Pointer(T.IStream), 'pStm']])),
    Save: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This'], [Pointer(T.IStream), 'pStm'], [T.BOOL, 'fClearDirty']])),
    GetSizeMax: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This'], [Pointer(T.ULARGE_INTEGER), 'pcbSize']]))
});};
T.LPMONIKER = function() {return Pointer(T.IMoniker);};
T.MKSYS = function() {return Enum('MKSYS_CLASSMONIKER', {
    MKSYS_NONE: 0,
    MKSYS_GENERICCOMPOSITE: 1,
    MKSYS_FILEMONIKER: 2,
    MKSYS_ANTIMONIKER: 3,
    MKSYS_ITEMMONIKER: 4,
    MKSYS_POINTERMONIKER: 5,
    MKSYS_CLASSMONIKER: 7
});};
T.MKRREDUCE = function() {return Enum('MKRREDUCE_ALL', {
    MKRREDUCE_ONE: 0,
    MKRREDUCE_TOUSER: 1,
    MKRREDUCE_THROUGHUSER: 2,
    MKRREDUCE_ALL: 0
});};
T.IMonikerVtbl = function() {return Struct('IMonikerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IMoniker), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IMoniker), 'This']])),
    GetClassID: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.CLSID), 'pClassID']])),
    IsDirty: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This']])),
    Load: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IStream), 'pStm']])),
    Save: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IStream), 'pStm'], [T.BOOL, 'fClearDirty']])),
    GetSizeMax: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.ULARGE_INTEGER), 'pcbSize']])),
    BindToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IID), 'riidResult'], [Pointer(Pointer(null)), 'ppvResult']])),
    BindToStorage: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObj']])),
    Reduce: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [T.DWORD, 'dwReduceHowFar'], [Pointer(Pointer(T.IMoniker)), 'ppmkToLeft'], [Pointer(Pointer(T.IMoniker)), 'ppmkReduced']])),
    ComposeWith: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IMoniker), 'pmkRight'], [T.BOOL, 'fOnlyIfNotGeneric'], [Pointer(Pointer(T.IMoniker)), 'ppmkComposite']])),
    Enum: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [T.BOOL, 'fForward'], [Pointer(Pointer(T.IEnumMoniker)), 'ppenumMoniker']])),
    IsEqual: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IMoniker), 'pmkOtherMoniker']])),
    Hash: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.DWORD), 'pdwHash']])),
    IsRunning: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IMoniker), 'pmkNewlyRunning']])),
    GetTimeOfLastChange: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.FILETIME), 'pFileTime']])),
    Inverse: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(Pointer(T.IMoniker)), 'ppmk']])),
    CommonPrefixWith: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IMoniker), 'pmkOther'], [Pointer(Pointer(T.IMoniker)), 'ppmkPrefix']])),
    RelativePathTo: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IMoniker), 'pmkOther'], [Pointer(Pointer(T.IMoniker)), 'ppmkRelPath']])),
    GetDisplayName: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.LPOLESTR), 'ppszDisplayName']])),
    ParseDisplayName: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [T.LPOLESTR, 'pszDisplayName'], [Pointer(T.ULONG), 'pchEaten'], [Pointer(Pointer(T.IMoniker)), 'ppmkOut']])),
    IsSystemMoniker: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.DWORD), 'pdwMksys']]))
});};
T.IROTDataVtbl = function() {return Struct('IROTDataVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IROTData), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IROTData), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IROTData), 'This']])),
    GetComparisonData: Pointer(Fn(T.HRESULT, [[Pointer(T.IROTData), 'This'], [Pointer(T.byte), 'pbData'], [T.ULONG, 'cbMax'], [Pointer(T.ULONG), 'pcbData']]))
});};
T.LPENUMSTRING = function() {return Pointer(T.IEnumString);};
T.IEnumStringVtbl = function() {return Struct('IEnumStringVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumString), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumString), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [T.ULONG, 'celt'], [Pointer(T.LPOLESTR), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [Pointer(Pointer(T.IEnumString)), 'ppenum']]))
});};
T.IClassActivatorVtbl = function() {return Struct('IClassActivatorVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IClassActivator), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IClassActivator), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IClassActivator), 'This']])),
    GetClassObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IClassActivator), 'This'], [Pointer(T.CLSID), 'rclsid'], [T.DWORD, 'dwClassContext'], [T.LCID, 'locale'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']]))
});};
T.ISequentialStreamVtbl = function() {return Struct('ISequentialStreamVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISequentialStream), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISequentialStream), 'This']])),
    Read: Pointer(Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']])),
    Write: Pointer(Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']]))
});};
T.LPSTREAM = function() {return Pointer(T.IStream);};
T.STATSTG = function() {return Struct('tagSTATSTG', {
    pwcsName: T.LPOLESTR,
    type: T.DWORD,
    cbSize: T.ULARGE_INTEGER,
    mtime: T.FILETIME,
    ctime: T.FILETIME,
    atime: T.FILETIME,
    grfMode: T.DWORD,
    grfLocksSupported: T.DWORD,
    clsid: T.CLSID,
    grfStateBits: T.DWORD,
    reserved: T.DWORD
});};
T.STGTY = function() {return Enum('STGTY_PROPERTY', {
    STGTY_STORAGE: 1,
    STGTY_STREAM: 2,
    STGTY_LOCKBYTES: 3,
    STGTY_PROPERTY: 4
});};
T.STREAM_SEEK = function() {return Enum('STREAM_SEEK_END', {
    STREAM_SEEK_SET: 0,
    STREAM_SEEK_CUR: 1,
    STREAM_SEEK_END: 2
});};
T.LOCKTYPE = function() {return Enum('LOCK_ONLYONCE', {
    LOCK_WRITE: 1,
    LOCK_EXCLUSIVE: 2,
    LOCK_ONLYONCE: 4
});};
T.IStreamVtbl = function() {return Struct('IStreamVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IStream), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IStream), 'This']])),
    Read: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']])),
    Write: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']])),
    Seek: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.LARGE_INTEGER, 'dlibMove'], [T.DWORD, 'dwOrigin'], [Pointer(T.ULARGE_INTEGER), 'plibNewPosition']])),
    SetSize: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.ULARGE_INTEGER, 'libNewSize']])),
    CopyTo: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(T.IStream), 'pstm'], [T.ULARGE_INTEGER, 'cb'], [Pointer(T.ULARGE_INTEGER), 'pcbRead'], [Pointer(T.ULARGE_INTEGER), 'pcbWritten']])),
    Commit: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.DWORD, 'grfCommitFlags']])),
    Revert: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This']])),
    LockRegion: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.ULARGE_INTEGER, 'libOffset'], [T.ULARGE_INTEGER, 'cb'], [T.DWORD, 'dwLockType']])),
    UnlockRegion: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.ULARGE_INTEGER, 'libOffset'], [T.ULARGE_INTEGER, 'cb'], [T.DWORD, 'dwLockType']])),
    Stat: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(T.STATSTG), 'pstatstg'], [T.DWORD, 'grfStatFlag']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(Pointer(T.IStream)), 'ppstm']]))
});};
T.LPENUMSTATSTG = function() {return Pointer(T.IEnumSTATSTG);};
T.IEnumSTATSTGVtbl = function() {return Struct('IEnumSTATSTGVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumSTATSTG), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumSTATSTG), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [Pointer(Pointer(T.IEnumSTATSTG)), 'ppenum']]))
});};
T.LPSTORAGE = function() {return Pointer(T.IStorage);};
T.RemSNB = function() {return Struct('tagRemSNB', {
    ulCntStr: T.ULONG,
    ulCntChar: T.ULONG,
    rgString: ArrayType(T.OLECHAR, 1)
});};
T.wireSNB = function() {return Pointer(T.RemSNB);};
T.SNB = function() {return Pointer(Pointer(T.OLECHAR));};
T.IStorageVtbl = function() {return Struct('IStorageVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IStorage), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IStorage), 'This']])),
    CreateStream: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'reserved1'], [T.DWORD, 'reserved2'], [Pointer(Pointer(T.IStream)), 'ppstm']])),
    OpenStream: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [Pointer(null), 'reserved1'], [T.DWORD, 'grfMode'], [T.DWORD, 'reserved2'], [Pointer(Pointer(T.IStream)), 'ppstm']])),
    CreateStorage: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'dwStgFmt'], [T.DWORD, 'reserved2'], [Pointer(Pointer(T.IStorage)), 'ppstg']])),
    OpenStorage: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [Pointer(T.IStorage), 'pstgPriority'], [T.DWORD, 'grfMode'], [T.SNB, 'snbExclude'], [T.DWORD, 'reserved'], [Pointer(Pointer(T.IStorage)), 'ppstg']])),
    CopyTo: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'ciidExclude'], [Pointer(T.IID), 'rgiidExclude'], [T.SNB, 'snbExclude'], [Pointer(T.IStorage), 'pstgDest']])),
    MoveElementTo: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [Pointer(T.IStorage), 'pstgDest'], [T.LPCOLESTR, 'pwcsNewName'], [T.DWORD, 'grfFlags']])),
    Commit: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'grfCommitFlags']])),
    Revert: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This']])),
    EnumElements: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'reserved1'], [Pointer(null), 'reserved2'], [T.DWORD, 'reserved3'], [Pointer(Pointer(T.IEnumSTATSTG)), 'ppenum']])),
    DestroyElement: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName']])),
    RenameElement: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsOldName'], [T.LPCOLESTR, 'pwcsNewName']])),
    SetElementTimes: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [Pointer(T.FILETIME), 'pctime'], [Pointer(T.FILETIME), 'patime'], [Pointer(T.FILETIME), 'pmtime']])),
    SetClass: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [Pointer(T.CLSID), 'clsid']])),
    SetStateBits: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'grfStateBits'], [T.DWORD, 'grfMask']])),
    Stat: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [Pointer(T.STATSTG), 'pstatstg'], [T.DWORD, 'grfStatFlag']]))
});};
T.LPPERSISTFILE = function() {return Pointer(T.IPersistFile);};
T.IPersistFileVtbl = function() {return Struct('IPersistFileVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPersistFile), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPersistFile), 'This']])),
    GetClassID: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [Pointer(T.CLSID), 'pClassID']])),
    IsDirty: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This']])),
    Load: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [T.LPCOLESTR, 'pszFileName'], [T.DWORD, 'dwMode']])),
    Save: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [T.LPCOLESTR, 'pszFileName'], [T.BOOL, 'fRemember']])),
    SaveCompleted: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [T.LPCOLESTR, 'pszFileName']])),
    GetCurFile: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [Pointer(T.LPOLESTR), 'ppszFileName']]))
});};
T.LPPERSISTSTORAGE = function() {return Pointer(T.IPersistStorage);};
T.IPersistStorageVtbl = function() {return Struct('IPersistStorageVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPersistStorage), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPersistStorage), 'This']])),
    GetClassID: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.CLSID), 'pClassID']])),
    IsDirty: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This']])),
    InitNew: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IStorage), 'pStg']])),
    Load: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IStorage), 'pStg']])),
    Save: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IStorage), 'pStgSave'], [T.BOOL, 'fSameAsLoad']])),
    SaveCompleted: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IStorage), 'pStgNew']])),
    HandsOffStorage: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This']]))
});};
T.LPROOTSTORAGE = function() {return Pointer(T.IRootStorage);};
T.IRootStorageVtbl = function() {return Struct('IRootStorageVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRootStorage), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRootStorage), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRootStorage), 'This']])),
    SwitchToFile: Pointer(Fn(T.HRESULT, [[Pointer(T.IRootStorage), 'This'], [T.LPOLESTR, 'pszFile']]))
});};
T.LPLOCKBYTES = function() {return Pointer(T.ILockBytes);};
T.ILockBytesVtbl = function() {return Struct('ILockBytesVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ILockBytes), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ILockBytes), 'This']])),
    ReadAt: Pointer(Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']])),
    WriteAt: Pointer(Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']])),
    Flush: Pointer(Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This']])),
    SetSize: Pointer(Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'cb']])),
    LockRegion: Pointer(Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'libOffset'], [T.ULARGE_INTEGER, 'cb'], [T.DWORD, 'dwLockType']])),
    UnlockRegion: Pointer(Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'libOffset'], [T.ULARGE_INTEGER, 'cb'], [T.DWORD, 'dwLockType']])),
    Stat: Pointer(Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [Pointer(T.STATSTG), 'pstatstg'], [T.DWORD, 'grfStatFlag']]))
});};
T.IFillLockBytesVtbl = function() {return Struct('IFillLockBytesVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IFillLockBytes), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IFillLockBytes), 'This']])),
    FillAppend: Pointer(Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']])),
    FillAt: Pointer(Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']])),
    SetFillSize: Pointer(Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [T.ULARGE_INTEGER, 'ulSize']])),
    Terminate: Pointer(Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [T.BOOL, 'bCanceled']]))
});};
T.IProgressNotifyVtbl = function() {return Struct('IProgressNotifyVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IProgressNotify), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IProgressNotify), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IProgressNotify), 'This']])),
    OnProgress: Pointer(Fn(T.HRESULT, [[Pointer(T.IProgressNotify), 'This'], [T.DWORD, 'dwProgressCurrent'], [T.DWORD, 'dwProgressMaximum'], [T.BOOL, 'fAccurate'], [T.BOOL, 'fOwner']]))
});};
T.StorageLayout = function() {return Struct('tagStorageLayout', {
    LayoutType: T.DWORD,
    pwcsElementName: Pointer(T.OLECHAR),
    cOffset: T.LARGE_INTEGER,
    cBytes: T.LARGE_INTEGER
});};
T.ILayoutStorageVtbl = function() {return Struct('ILayoutStorageVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ILayoutStorage), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ILayoutStorage), 'This']])),
    LayoutScript: Pointer(Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This'], [Pointer(T.StorageLayout), 'pStorageLayout'], [T.DWORD, 'nEntries'], [T.DWORD, 'glfInterleavedFlag']])),
    BeginMonitor: Pointer(Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This']])),
    EndMonitor: Pointer(Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This']])),
    ReLayoutDocfile: Pointer(Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This'], [Pointer(T.OLECHAR), 'pwcsNewDfName']])),
    ReLayoutDocfileOnILockBytes: Pointer(Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This'], [Pointer(T.ILockBytes), 'pILockBytes']]))
});};
T.IBlockingLockVtbl = function() {return Struct('IBlockingLockVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IBlockingLock), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IBlockingLock), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IBlockingLock), 'This']])),
    Lock: Pointer(Fn(T.HRESULT, [[Pointer(T.IBlockingLock), 'This'], [T.DWORD, 'dwTimeout']])),
    Unlock: Pointer(Fn(T.HRESULT, [[Pointer(T.IBlockingLock), 'This']]))
});};
T.ITimeAndNoticeControlVtbl = function() {return Struct('ITimeAndNoticeControlVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITimeAndNoticeControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITimeAndNoticeControl), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITimeAndNoticeControl), 'This']])),
    SuppressChanges: Pointer(Fn(T.HRESULT, [[Pointer(T.ITimeAndNoticeControl), 'This'], [T.DWORD, 'res1'], [T.DWORD, 'res2']]))
});};
T.IOplockStorageVtbl = function() {return Struct('IOplockStorageVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOplockStorage), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOplockStorage), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOplockStorage), 'This']])),
    CreateStorageEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IOplockStorage), 'This'], [T.LPCWSTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'stgfmt'], [T.DWORD, 'grfAttrs'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppstgOpen']])),
    OpenStorageEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IOplockStorage), 'This'], [T.LPCWSTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'stgfmt'], [T.DWORD, 'grfAttrs'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppstgOpen']]))
});};
T.LPENUMFORMATETC = function() {return Pointer(T.IEnumFORMATETC);};
T.DVTARGETDEVICE = function() {return Struct('tagDVTARGETDEVICE', {
    tdSize: T.DWORD,
    tdDriverNameOffset: T.WORD,
    tdDeviceNameOffset: T.WORD,
    tdPortNameOffset: T.WORD,
    tdExtDevmodeOffset: T.WORD,
    tdData: ArrayType(T.BYTE, 1)
});};
T.LPCLIPFORMAT = function() {return Pointer(T.CLIPFORMAT);};
T.FORMATETC = function() {return Struct('tagFORMATETC', {
    cfFormat: T.CLIPFORMAT,
    ptd: Pointer(T.DVTARGETDEVICE),
    dwAspect: T.DWORD,
    lindex: T.LONG,
    tymed: T.DWORD
});};
T.LPFORMATETC = function() {return Pointer(Struct('tagFORMATETC', null));};
T.IEnumFORMATETCVtbl = function() {return Struct('IEnumFORMATETCVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumFORMATETC), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumFORMATETC), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [T.ULONG, 'celt'], [Pointer(T.FORMATETC), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [Pointer(Pointer(T.IEnumFORMATETC)), 'ppenum']]))
});};
T.LPENUMSTATDATA = function() {return Pointer(T.IEnumSTATDATA);};
T.ADVF = function() {return Enum('ADVFCACHE_ONSAVE', {
    ADVF_NODATA: 1,
    ADVF_PRIMEFIRST: 2,
    ADVF_ONLYONCE: 4,
    ADVF_DATAONSTOP: 64,
    ADVFCACHE_NOHANDLER: 8,
    ADVFCACHE_FORCEBUILTIN: 16,
    ADVFCACHE_ONSAVE: 32
});};
T.STATDATA = function() {return Struct('tagSTATDATA', {
    formatetc: T.FORMATETC,
    advf: T.DWORD,
    pAdvSink: Pointer(T.IAdviseSink),
    dwConnection: T.DWORD
});};
T.LPSTATDATA = function() {return Pointer(Struct('tagSTATDATA', null));};
T.IEnumSTATDATAVtbl = function() {return Struct('IEnumSTATDATAVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumSTATDATA), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumSTATDATA), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATDATA), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenum']]))
});};
T.LPADVISESINK = function() {return Pointer(T.IAdviseSink);};
T.TYMED = function() {return Enum('TYMED_NULL', {
    TYMED_HGLOBAL: 1,
    TYMED_FILE: 2,
    TYMED_ISTREAM: 4,
    TYMED_ISTORAGE: 8,
    TYMED_GDI: 16,
    TYMED_MFPICT: 32,
    TYMED_ENHMF: 64,
    TYMED_NULL: 0
});};
T.RemSTGMEDIUM = function() {return Struct('tagRemSTGMEDIUM', {
    tymed: T.DWORD,
    dwHandleType: T.DWORD,
    pData: T.ULONG,
    pUnkForRelease: T.ULONG,
    cbData: T.ULONG,
    data: ArrayType(T.byte, 1)
});};
T.uSTGMEDIUM = function() {return Struct('tagSTGMEDIUM', {
    tymed: T.DWORD,
    __unnamed0: Union('', {
        hBitmap: T.HBITMAP,
        hMetaFilePict: T.HMETAFILEPICT,
        hEnhMetaFile: T.HENHMETAFILE,
        hGlobal: T.HGLOBAL,
        lpszFileName: T.LPOLESTR,
        pstm: Pointer(T.IStream),
        pstg: Pointer(T.IStorage)
    }),
    pUnkForRelease: Pointer(T.IUnknown)
});};
T.GDI_OBJECT = function() {return Struct('_GDI_OBJECT', {
    ObjectType: T.DWORD,
    u: Union('', {
        hBitmap: T.wireHBITMAP,
        hPalette: T.wireHPALETTE,
        hGeneric: T.wireHGLOBAL
    })
});};
T.userSTGMEDIUM = function() {return Struct('_userSTGMEDIUM', {
    __unnamed0: Struct('', {
        tymed: T.DWORD,
        u: Union('', {
            hMetaFilePict: T.wireHMETAFILEPICT,
            hHEnhMetaFile: T.wireHENHMETAFILE,
            hGdiHandle: Pointer(T.GDI_OBJECT),
            hGlobal: T.wireHGLOBAL,
            lpszFileName: T.LPOLESTR,
            pstm: Pointer(T.BYTE_BLOB),
            pstg: Pointer(T.BYTE_BLOB)
        })
    }),
    pUnkForRelease: Pointer(T.IUnknown)
});};
T.wireSTGMEDIUM = function() {return Pointer(T.userSTGMEDIUM);};
T.STGMEDIUM = function() {return T.uSTGMEDIUM;};
T.wireASYNC_STGMEDIUM = function() {return Pointer(T.userSTGMEDIUM);};
T.ASYNC_STGMEDIUM = function() {return T.STGMEDIUM;};
T.LPSTGMEDIUM = function() {return Pointer(T.STGMEDIUM);};
T.userFLAG_STGMEDIUM = function() {return Struct('_userFLAG_STGMEDIUM', {
    ContextFlags: T.LONG,
    fPassOwnership: T.LONG,
    Stgmed: T.userSTGMEDIUM
});};
T.wireFLAG_STGMEDIUM = function() {return Pointer(T.userFLAG_STGMEDIUM);};
T.FLAG_STGMEDIUM = function() {return Struct('_FLAG_STGMEDIUM', {
    ContextFlags: T.LONG,
    fPassOwnership: T.LONG,
    Stgmed: T.STGMEDIUM
});};
T.IAdviseSinkVtbl = function() {return Struct('IAdviseSinkVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IAdviseSink), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IAdviseSink), 'This']])),
    OnDataChange: Pointer(Fn(null, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.FORMATETC), 'pFormatetc'], [Pointer(T.STGMEDIUM), 'pStgmed']])),
    OnViewChange: Pointer(Fn(null, [[Pointer(T.IAdviseSink), 'This'], [T.DWORD, 'dwAspect'], [T.LONG, 'lindex']])),
    OnRename: Pointer(Fn(null, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.IMoniker), 'pmk']])),
    OnSave: Pointer(Fn(null, [[Pointer(T.IAdviseSink), 'This']])),
    OnClose: Pointer(Fn(null, [[Pointer(T.IAdviseSink), 'This']]))
});};
T.LPADVISESINK2 = function() {return Pointer(T.IAdviseSink2);};
T.IAdviseSink2Vtbl = function() {return Struct('IAdviseSink2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IAdviseSink2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IAdviseSink2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IAdviseSink2), 'This']])),
    OnDataChange: Pointer(Fn(null, [[Pointer(T.IAdviseSink2), 'This'], [Pointer(T.FORMATETC), 'pFormatetc'], [Pointer(T.STGMEDIUM), 'pStgmed']])),
    OnViewChange: Pointer(Fn(null, [[Pointer(T.IAdviseSink2), 'This'], [T.DWORD, 'dwAspect'], [T.LONG, 'lindex']])),
    OnRename: Pointer(Fn(null, [[Pointer(T.IAdviseSink2), 'This'], [Pointer(T.IMoniker), 'pmk']])),
    OnSave: Pointer(Fn(null, [[Pointer(T.IAdviseSink2), 'This']])),
    OnClose: Pointer(Fn(null, [[Pointer(T.IAdviseSink2), 'This']])),
    OnLinkSrcChange: Pointer(Fn(null, [[Pointer(T.IAdviseSink2), 'This'], [Pointer(T.IMoniker), 'pmk']]))
});};
T.LPDATAOBJECT = function() {return Pointer(T.IDataObject);};
T.DATADIR = function() {return Enum('DATADIR_SET', {
    DATADIR_GET: 1,
    DATADIR_SET: 2
});};
T.IDataObjectVtbl = function() {return Struct('IDataObjectVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IDataObject), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IDataObject), 'This']])),
    GetData: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetcIn'], [Pointer(T.STGMEDIUM), 'pmedium']])),
    GetDataHere: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pmedium']])),
    QueryGetData: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc']])),
    GetCanonicalFormatEtc: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatectIn'], [Pointer(T.FORMATETC), 'pformatetcOut']])),
    SetData: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pmedium'], [T.BOOL, 'fRelease']])),
    EnumFormatEtc: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [T.DWORD, 'dwDirection'], [Pointer(Pointer(T.IEnumFORMATETC)), 'ppenumFormatEtc']])),
    DAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [T.DWORD, 'advf'], [Pointer(T.IAdviseSink), 'pAdvSink'], [Pointer(T.DWORD), 'pdwConnection']])),
    DUnadvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [T.DWORD, 'dwConnection']])),
    EnumDAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumAdvise']]))
});};
T.LPDATAADVISEHOLDER = function() {return Pointer(T.IDataAdviseHolder);};
T.IDataAdviseHolderVtbl = function() {return Struct('IDataAdviseHolderVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IDataAdviseHolder), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IDataAdviseHolder), 'This']])),
    Advise: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [Pointer(T.IDataObject), 'pDataObject'], [Pointer(T.FORMATETC), 'pFetc'], [T.DWORD, 'advf'], [Pointer(T.IAdviseSink), 'pAdvise'], [Pointer(T.DWORD), 'pdwConnection']])),
    Unadvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [T.DWORD, 'dwConnection']])),
    EnumAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumAdvise']])),
    SendOnDataChange: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [Pointer(T.IDataObject), 'pDataObject'], [T.DWORD, 'dwReserved'], [T.DWORD, 'advf']]))
});};
T.LPMESSAGEFILTER = function() {return Pointer(T.IMessageFilter);};
T.CALLTYPE = function() {return Enum('CALLTYPE_ASYNC_CALLPENDING', {
    CALLTYPE_TOPLEVEL: 1,
    CALLTYPE_NESTED: 2,
    CALLTYPE_ASYNC: 3,
    CALLTYPE_TOPLEVEL_CALLPENDING: 4,
    CALLTYPE_ASYNC_CALLPENDING: 5
});};
T.SERVERCALL = function() {return Enum('SERVERCALL_RETRYLATER', {
    SERVERCALL_ISHANDLED: 0,
    SERVERCALL_REJECTED: 1,
    SERVERCALL_RETRYLATER: 2
});};
T.PENDINGTYPE = function() {return Enum('PENDINGTYPE_NESTED', {
    PENDINGTYPE_TOPLEVEL: 1,
    PENDINGTYPE_NESTED: 2
});};
T.PENDINGMSG = function() {return Enum('PENDINGMSG_WAITDEFPROCESS', {
    PENDINGMSG_CANCELCALL: 0,
    PENDINGMSG_WAITNOPROCESS: 1,
    PENDINGMSG_WAITDEFPROCESS: 2
});};
T.INTERFACEINFO = function() {return Struct('tagINTERFACEINFO', {
    pUnk: Pointer(T.IUnknown),
    iid: T.IID,
    wMethod: T.WORD
});};
T.LPINTERFACEINFO = function() {return Pointer(Struct('tagINTERFACEINFO', null));};
T.IMessageFilterVtbl = function() {return Struct('IMessageFilterVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMessageFilter), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IMessageFilter), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IMessageFilter), 'This']])),
    HandleInComingCall: Pointer(Fn(T.DWORD, [[Pointer(T.IMessageFilter), 'This'], [T.DWORD, 'dwCallType'], [T.HTASK, 'htaskCaller'], [T.DWORD, 'dwTickCount'], [T.LPINTERFACEINFO, 'lpInterfaceInfo']])),
    RetryRejectedCall: Pointer(Fn(T.DWORD, [[Pointer(T.IMessageFilter), 'This'], [T.HTASK, 'htaskCallee'], [T.DWORD, 'dwTickCount'], [T.DWORD, 'dwRejectType']])),
    MessagePending: Pointer(Fn(T.DWORD, [[Pointer(T.IMessageFilter), 'This'], [T.HTASK, 'htaskCallee'], [T.DWORD, 'dwTickCount'], [T.DWORD, 'dwPendingType']]))
});};
T.LPRPCCHANNELBUFFER = function() {return Pointer(T.IRpcChannelBuffer);};
T.RPCOLEDATAREP = function() {return T.ULONG;};
T.RPCOLEMESSAGE = function() {return Struct('tagRPCOLEMESSAGE', {
    reserved1: Pointer(null),
    dataRepresentation: T.RPCOLEDATAREP,
    Buffer: Pointer(null),
    cbBuffer: T.ULONG,
    iMethod: T.ULONG,
    reserved2: ArrayType(Pointer(null), 5),
    rpcFlags: T.ULONG
});};
T.PRPCOLEMESSAGE = function() {return Pointer(T.RPCOLEMESSAGE);};
T.IRpcChannelBufferVtbl = function() {return Struct('IRpcChannelBufferVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcChannelBuffer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcChannelBuffer), 'This']])),
    GetBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.IID), 'riid']])),
    SendReceive: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.ULONG), 'pStatus']])),
    FreeBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage']])),
    GetDestCtx: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']])),
    IsConnected: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This']]))
});};
T.LPRPCCHANNELBUFFER2 = function() {return Pointer(T.IRpcChannelBuffer2);};
T.IRpcChannelBuffer2Vtbl = function() {return Struct('IRpcChannelBuffer2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcChannelBuffer2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcChannelBuffer2), 'This']])),
    GetBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer2), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.IID), 'riid']])),
    SendReceive: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer2), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.ULONG), 'pStatus']])),
    FreeBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer2), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage']])),
    GetDestCtx: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer2), 'This'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']])),
    IsConnected: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer2), 'This']])),
    GetProtocolVersion: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer2), 'This'], [Pointer(T.DWORD), 'pdwVersion']]))
});};
T.LPRPCCHANNELBUFFER3 = function() {return Pointer(T.IRpcChannelBuffer3);};
T.IRpcChannelBuffer3Vtbl = function() {return Struct('IRpcChannelBuffer3Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcChannelBuffer3), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcChannelBuffer3), 'This']])),
    GetBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.IID), 'riid']])),
    SendReceive: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.ULONG), 'pStatus']])),
    FreeBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage']])),
    GetDestCtx: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']])),
    IsConnected: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This']])),
    GetProtocolVersion: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.DWORD), 'pdwVersion']])),
    Send: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.ULONG), 'pulStatus']])),
    Receive: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [T.ULONG, 'ulSize'], [Pointer(T.ULONG), 'pulStatus']])),
    Cancel: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg']])),
    GetCallContext: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'pInterface']])),
    GetDestCtxEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']])),
    GetState: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.DWORD), 'pState']])),
    RegisterAsync: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.IAsyncManager), 'pAsyncMgr']]))
});};
T.IAsyncRpcChannelBufferVtbl = function() {return Struct('IAsyncRpcChannelBufferVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IAsyncRpcChannelBuffer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IAsyncRpcChannelBuffer), 'This']])),
    GetBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.IID), 'riid']])),
    SendReceive: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.ULONG), 'pStatus']])),
    FreeBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage']])),
    GetDestCtx: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']])),
    IsConnected: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This']])),
    GetProtocolVersion: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.DWORD), 'pdwVersion']])),
    Send: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.ISynchronize), 'pSync'], [Pointer(T.ULONG), 'pulStatus']])),
    Receive: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.ULONG), 'pulStatus']])),
    GetDestCtxEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']]))
});};
T.IRpcSyntaxNegotiateVtbl = function() {return Struct('IRpcSyntaxNegotiateVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcSyntaxNegotiate), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcSyntaxNegotiate), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcSyntaxNegotiate), 'This']])),
    NegotiateSyntax: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcSyntaxNegotiate), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg']]))
});};
T.LPRPCPROXYBUFFER = function() {return Pointer(T.IRpcProxyBuffer);};
T.IRpcProxyBufferVtbl = function() {return Struct('IRpcProxyBufferVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcProxyBuffer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcProxyBuffer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcProxyBuffer), 'This']])),
    Connect: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcProxyBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer']])),
    Disconnect: Pointer(Fn(null, [[Pointer(T.IRpcProxyBuffer), 'This']]))
});};
T.LPRPCSTUBBUFFER = function() {return Pointer(T.IRpcStubBuffer);};
T.IRpcStubBufferVtbl = function() {return Struct('IRpcStubBufferVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcStubBuffer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcStubBuffer), 'This']])),
    Connect: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IUnknown), 'pUnkServer']])),
    Disconnect: Pointer(Fn(null, [[Pointer(T.IRpcStubBuffer), 'This']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), '_prpcmsg'], [Pointer(T.IRpcChannelBuffer), '_pRpcChannelBuffer']])),
    IsIIDSupported: Pointer(Fn(Pointer(T.IRpcStubBuffer), [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IID), 'riid']])),
    CountRefs: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcStubBuffer), 'This']])),
    DebugServerQueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(Pointer(null)), 'ppv']])),
    DebugServerRelease: Pointer(Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(null), 'pv']]))
});};
T.LPPSFACTORYBUFFER = function() {return Pointer(T.IPSFactoryBuffer);};
T.IPSFactoryBufferVtbl = function() {return Struct('IPSFactoryBufferVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPSFactoryBuffer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPSFactoryBuffer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPSFactoryBuffer), 'This']])),
    CreateProxy: Pointer(Fn(T.HRESULT, [[Pointer(T.IPSFactoryBuffer), 'This'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IRpcProxyBuffer)), 'ppProxy'], [Pointer(Pointer(null)), 'ppv']])),
    CreateStub: Pointer(Fn(T.HRESULT, [[Pointer(T.IPSFactoryBuffer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'pUnkServer'], [Pointer(Pointer(T.IRpcStubBuffer)), 'ppStub']]))
});};
T.LPCHANNELHOOK = function() {return Pointer(T.IChannelHook);};
T.SChannelHookCallInfo = function() {return Struct('SChannelHookCallInfo', {
    iid: T.IID,
    cbSize: T.DWORD,
    uCausality: T.GUID,
    dwServerPid: T.DWORD,
    iMethod: T.DWORD,
    pObject: Pointer(null)
});};
T.IChannelHookVtbl = function() {return Struct('IChannelHookVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IChannelHook), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IChannelHook), 'This']])),
    ClientGetSize: Pointer(Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [Pointer(T.ULONG), 'pDataSize']])),
    ClientFillBuffer: Pointer(Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [Pointer(T.ULONG), 'pDataSize'], [Pointer(null), 'pDataBuffer']])),
    ClientNotify: Pointer(Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [T.ULONG, 'cbDataSize'], [Pointer(null), 'pDataBuffer'], [T.DWORD, 'lDataRep'], [T.HRESULT, 'hrFault']])),
    ServerNotify: Pointer(Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [T.ULONG, 'cbDataSize'], [Pointer(null), 'pDataBuffer'], [T.DWORD, 'lDataRep']])),
    ServerGetSize: Pointer(Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [T.HRESULT, 'hrFault'], [Pointer(T.ULONG), 'pDataSize']])),
    ServerFillBuffer: Pointer(Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [Pointer(T.ULONG), 'pDataSize'], [Pointer(null), 'pDataBuffer'], [T.HRESULT, 'hrFault']]))
});};
T.SOLE_AUTHENTICATION_SERVICE = function() {return Struct('tagSOLE_AUTHENTICATION_SERVICE', {
    dwAuthnSvc: T.DWORD,
    dwAuthzSvc: T.DWORD,
    pPrincipalName: Pointer(T.OLECHAR),
    hr: T.HRESULT
});};
T.PSOLE_AUTHENTICATION_SERVICE = function() {return Pointer(T.SOLE_AUTHENTICATION_SERVICE);};
T.SOLE_AUTHENTICATION_INFO = function() {return Struct('tagSOLE_AUTHENTICATION_INFO', {
    dwAuthnSvc: T.DWORD,
    dwAuthzSvc: T.DWORD,
    pAuthInfo: Pointer(null)
});};
T.SOLE_AUTHENTICATION_LIST = function() {return Struct('tagSOLE_AUTHENTICATION_LIST', {
    cAuthInfo: T.DWORD,
    aAuthInfo: Pointer(T.SOLE_AUTHENTICATION_INFO)
});};
T.EOLE_AUTHENTICATION_CAPABILITIES = function() {return Enum('EOAC_NO_CUSTOM_MARSHAL', {
    EOAC_NONE: 0,
    EOAC_MUTUAL_AUTH: 1,
    EOAC_SECURE_REFS: 2,
    EOAC_ACCESS_CONTROL: 4,
    EOAC_APPID: 8,
    EOAC_DYNAMIC: 16,
    EOAC_STATIC_CLOAKING: 32,
    EOAC_DYNAMIC_CLOAKING: 64,
    EOAC_ANY_AUTHORITY: 128,
    EOAC_MAKE_FULLSIC: 256,
    EOAC_REQUIRE_FULLSIC: 512,
    EOAC_AUTO_IMPERSONATE: 1024,
    EOAC_DEFAULT: 2048,
    EOAC_DISABLE_AAA: 4096,
    EOAC_NO_CUSTOM_MARSHAL: 8192
});};
T.IClientSecurityVtbl = function() {return Struct('IClientSecurityVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IClientSecurity), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IClientSecurity), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IClientSecurity), 'This']])),
    QueryBlanket: Pointer(Fn(T.HRESULT, [[Pointer(T.IClientSecurity), 'This'], [Pointer(T.IUnknown), 'pProxy'], [Pointer(T.DWORD), 'pAuthnSvc'], [Pointer(T.DWORD), 'pAuthzSvc'], [Pointer(Pointer(T.OLECHAR)), 'pServerPrincName'], [Pointer(T.DWORD), 'pAuthnLevel'], [Pointer(T.DWORD), 'pImpLevel'], [Pointer(Pointer(null)), 'pAuthInfo'], [Pointer(T.DWORD), 'pCapabilities']])),
    SetBlanket: Pointer(Fn(T.HRESULT, [[Pointer(T.IClientSecurity), 'This'], [Pointer(T.IUnknown), 'pProxy'], [T.DWORD, 'AuthnSvc'], [T.DWORD, 'AuthzSvc'], [Pointer(T.OLECHAR), 'pServerPrincName'], [T.DWORD, 'AuthnLevel'], [T.DWORD, 'ImpLevel'], [Pointer(null), 'pAuthInfo'], [T.DWORD, 'Capabilities']])),
    CopyProxy: Pointer(Fn(T.HRESULT, [[Pointer(T.IClientSecurity), 'This'], [Pointer(T.IUnknown), 'pProxy'], [Pointer(Pointer(T.IUnknown)), 'ppCopy']]))
});};
T.IServerSecurityVtbl = function() {return Struct('IServerSecurityVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IServerSecurity), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IServerSecurity), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IServerSecurity), 'This']])),
    QueryBlanket: Pointer(Fn(T.HRESULT, [[Pointer(T.IServerSecurity), 'This'], [Pointer(T.DWORD), 'pAuthnSvc'], [Pointer(T.DWORD), 'pAuthzSvc'], [Pointer(Pointer(T.OLECHAR)), 'pServerPrincName'], [Pointer(T.DWORD), 'pAuthnLevel'], [Pointer(T.DWORD), 'pImpLevel'], [Pointer(Pointer(null)), 'pPrivs'], [Pointer(T.DWORD), 'pCapabilities']])),
    ImpersonateClient: Pointer(Fn(T.HRESULT, [[Pointer(T.IServerSecurity), 'This']])),
    RevertToSelf: Pointer(Fn(T.HRESULT, [[Pointer(T.IServerSecurity), 'This']])),
    IsImpersonating: Pointer(Fn(T.BOOL, [[Pointer(T.IServerSecurity), 'This']]))
});};
T.IAsyncSetupVtbl = function() {return Struct('IAsyncSetupVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncSetup), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IAsyncSetup), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IAsyncSetup), 'This']])),
    GetAsyncManager: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncSetup), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'pOuter'], [T.DWORD, 'dwFlags'], [Pointer(Pointer(T.IUnknown)), 'ppInner'], [Pointer(Pointer(T.IAsyncManager)), 'ppAsyncMgr']]))
});};
T.IDirectWriterLockVtbl = function() {return Struct('IDirectWriterLockVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IDirectWriterLock), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IDirectWriterLock), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IDirectWriterLock), 'This']])),
    WaitForWriteAccess: Pointer(Fn(T.HRESULT, [[Pointer(T.IDirectWriterLock), 'This'], [T.DWORD, 'dwTimeout']])),
    ReleaseWriteAccess: Pointer(Fn(T.HRESULT, [[Pointer(T.IDirectWriterLock), 'This']])),
    HaveWriteAccess: Pointer(Fn(T.HRESULT, [[Pointer(T.IDirectWriterLock), 'This']]))
});};
T.ISynchronizeVtbl = function() {return Struct('ISynchronizeVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronize), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronize), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronize), 'This']])),
    Wait: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronize), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwMilliseconds']])),
    Signal: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronize), 'This']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronize), 'This']]))
});};
T.ISynchronizeHandleVtbl = function() {return Struct('ISynchronizeHandleVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeHandle), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronizeHandle), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronizeHandle), 'This']])),
    GetHandle: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeHandle), 'This'], [Pointer(T.HANDLE), 'ph']]))
});};
T.ISynchronizeEventVtbl = function() {return Struct('ISynchronizeEventVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeEvent), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronizeEvent), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronizeEvent), 'This']])),
    GetHandle: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeEvent), 'This'], [Pointer(T.HANDLE), 'ph']])),
    SetEventHandle: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeEvent), 'This'], [Pointer(T.HANDLE), 'ph']]))
});};
T.ISynchronizeContainerVtbl = function() {return Struct('ISynchronizeContainerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeContainer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronizeContainer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronizeContainer), 'This']])),
    AddSynchronize: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeContainer), 'This'], [Pointer(T.ISynchronize), 'pSync']])),
    WaitMultiple: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeContainer), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwTimeOut'], [Pointer(Pointer(T.ISynchronize)), 'ppSync']]))
});};
T.ISynchronizeMutexVtbl = function() {return Struct('ISynchronizeMutexVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeMutex), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronizeMutex), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronizeMutex), 'This']])),
    Wait: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeMutex), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwMilliseconds']])),
    Signal: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeMutex), 'This']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeMutex), 'This']])),
    ReleaseMutex: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeMutex), 'This']]))
});};
T.LPCANCELMETHODCALLS = function() {return Pointer(T.ICancelMethodCalls);};
T.ICancelMethodCallsVtbl = function() {return Struct('ICancelMethodCallsVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ICancelMethodCalls), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ICancelMethodCalls), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ICancelMethodCalls), 'This']])),
    Cancel: Pointer(Fn(T.HRESULT, [[Pointer(T.ICancelMethodCalls), 'This'], [T.ULONG, 'ulSeconds']])),
    TestCancel: Pointer(Fn(T.HRESULT, [[Pointer(T.ICancelMethodCalls), 'This']]))
});};
T.DCOM_CALL_STATE = function() {return Enum('DCOM_CALL_CANCELED', {
    DCOM_NONE: 0,
    DCOM_CALL_COMPLETE: 1,
    DCOM_CALL_CANCELED: 2
});};
T.IAsyncManagerVtbl = function() {return Struct('IAsyncManagerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncManager), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IAsyncManager), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IAsyncManager), 'This']])),
    CompleteCall: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncManager), 'This'], [T.HRESULT, 'Result']])),
    GetCallContext: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncManager), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'pInterface']])),
    GetState: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncManager), 'This'], [Pointer(T.ULONG), 'pulStateFlags']]))
});};
T.ICallFactoryVtbl = function() {return Struct('ICallFactoryVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ICallFactory), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ICallFactory), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ICallFactory), 'This']])),
    CreateCall: Pointer(Fn(T.HRESULT, [[Pointer(T.ICallFactory), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'pCtrlUnk'], [Pointer(T.IID), 'riid2'], [Pointer(Pointer(T.IUnknown)), 'ppv']]))
});};
T.IRpcOptionsVtbl = function() {return Struct('IRpcOptionsVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcOptions), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcOptions), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcOptions), 'This']])),
    Set: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcOptions), 'This'], [Pointer(T.IUnknown), 'pPrx'], [T.DWORD, 'dwProperty'], [T.ULONG_PTR, 'dwValue']])),
    Query: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcOptions), 'This'], [Pointer(T.IUnknown), 'pPrx'], [T.DWORD, 'dwProperty'], [Pointer(T.ULONG_PTR), 'pdwValue']]))
});};
T.IRpcHelperVtbl = function() {return Struct('IRpcHelperVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcHelper), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcHelper), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcHelper), 'This']])),
    GetDCOMProtocolVersion: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcHelper), 'This'], [Pointer(T.DWORD), 'pComVersion']])),
    GetIIDFromOBJREF: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcHelper), 'This'], [Pointer(null), 'pObjRef'], [Pointer(Pointer(T.IID)), 'piid']]))
});};
T.IReleaseMarshalBuffersVtbl = function() {return Struct('IReleaseMarshalBuffersVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IReleaseMarshalBuffers), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IReleaseMarshalBuffers), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IReleaseMarshalBuffers), 'This']])),
    ReleaseMarshalBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IReleaseMarshalBuffers), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [T.DWORD, 'dwFlags'], [Pointer(T.IUnknown), 'pChnl']]))
});};
T.IWaitMultipleVtbl = function() {return Struct('IWaitMultipleVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IWaitMultiple), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IWaitMultiple), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IWaitMultiple), 'This']])),
    WaitMultiple: Pointer(Fn(T.HRESULT, [[Pointer(T.IWaitMultiple), 'This'], [T.DWORD, 'timeout'], [Pointer(Pointer(T.ISynchronize)), 'pSync']])),
    AddSynchronize: Pointer(Fn(T.HRESULT, [[Pointer(T.IWaitMultiple), 'This'], [Pointer(T.ISynchronize), 'pSync']]))
});};
T.IUrlMonVtbl = function() {return Struct('IUrlMonVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IUrlMon), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IUrlMon), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IUrlMon), 'This']])),
    AsyncGetClassBits: Pointer(Fn(T.HRESULT, [[Pointer(T.IUrlMon), 'This'], [Pointer(T.CLSID), 'rclsid'], [T.LPCWSTR, 'pszTYPE'], [T.LPCWSTR, 'pszExt'], [T.DWORD, 'dwFileVersionMS'], [T.DWORD, 'dwFileVersionLS'], [T.LPCWSTR, 'pszCodeBase'], [Pointer(T.IBindCtx), 'pbc'], [T.DWORD, 'dwClassContext'], [Pointer(T.IID), 'riid'], [T.DWORD, 'flags']]))
});};
T.IForegroundTransferVtbl = function() {return Struct('IForegroundTransferVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IForegroundTransfer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IForegroundTransfer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IForegroundTransfer), 'This']])),
    AllowForegroundTransfer: Pointer(Fn(T.HRESULT, [[Pointer(T.IForegroundTransfer), 'This'], [Pointer(null), 'lpvReserved']]))
});};
T.LPADDRTRACKINGCONTROL = function() {return Pointer(T.IAddrTrackingControl);};
T.IAddrTrackingControlVtbl = function() {return Struct('IAddrTrackingControlVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IAddrTrackingControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IAddrTrackingControl), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IAddrTrackingControl), 'This']])),
    EnableCOMDynamicAddrTracking: Pointer(Fn(T.HRESULT, [[Pointer(T.IAddrTrackingControl), 'This']])),
    DisableCOMDynamicAddrTracking: Pointer(Fn(T.HRESULT, [[Pointer(T.IAddrTrackingControl), 'This']]))
});};
T.LPADDREXCLUSIONCONTROL = function() {return Pointer(T.IAddrExclusionControl);};
T.IAddrExclusionControlVtbl = function() {return Struct('IAddrExclusionControlVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IAddrExclusionControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IAddrExclusionControl), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IAddrExclusionControl), 'This']])),
    GetCurrentAddrExclusionList: Pointer(Fn(T.HRESULT, [[Pointer(T.IAddrExclusionControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppEnumerator']])),
    UpdateAddrExclusionList: Pointer(Fn(T.HRESULT, [[Pointer(T.IAddrExclusionControl), 'This'], [Pointer(T.IUnknown), 'pEnumerator']]))
});};
T.APTTYPE = function() {return Enum('APTTYPE_MAINSTA', {
    APTTYPE_CURRENT: 0,
    APTTYPE_STA: 0,
    APTTYPE_MTA: 1,
    APTTYPE_NA: 2,
    APTTYPE_MAINSTA: 3
});};
T.THDTYPE = function() {return Enum('THDTYPE_PROCESSMESSAGES', {
    THDTYPE_BLOCKMESSAGES: 0,
    THDTYPE_PROCESSMESSAGES: 1
});};
T.IComThreadingInfoVtbl = function() {return Struct('IComThreadingInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IComThreadingInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IComThreadingInfo), 'This']])),
    GetCurrentApartmentType: Pointer(Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.APTTYPE), 'pAptType']])),
    GetCurrentThreadType: Pointer(Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.THDTYPE), 'pThreadType']])),
    GetCurrentLogicalThreadId: Pointer(Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.GUID), 'pguidLogicalThreadId']])),
    SetCurrentLogicalThreadId: Pointer(Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.GUID), 'rguid']]))
});};
T.IProcessInitControlVtbl = function() {return Struct('IProcessInitControlVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IProcessInitControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IProcessInitControl), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IProcessInitControl), 'This']])),
    ResetInitializerTimeout: Pointer(Fn(T.HRESULT, [[Pointer(T.IProcessInitControl), 'This'], [T.DWORD, 'dwSecondsRemaining']]))
});};
T.LPINITIALIZESPY = function() {return Pointer(T.IInitializeSpy);};
T.IInitializeSpyVtbl = function() {return Struct('IInitializeSpyVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInitializeSpy), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInitializeSpy), 'This']])),
    PreInitialize: Pointer(Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [T.DWORD, 'dwCoInit'], [T.DWORD, 'dwCurThreadAptRefs']])),
    PostInitialize: Pointer(Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [T.HRESULT, 'hrCoInit'], [T.DWORD, 'dwCoInit'], [T.DWORD, 'dwNewThreadAptRefs']])),
    PreUninitialize: Pointer(Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [T.DWORD, 'dwCurThreadAptRefs']])),
    PostUninitialize: Pointer(Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [T.DWORD, 'dwNewThreadAptRefs']]))
});};
T.IThumbnailExtractorVtbl = function() {return Struct('IThumbnailExtractorVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IThumbnailExtractor), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IThumbnailExtractor), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IThumbnailExtractor), 'This']])),
    ExtractThumbnail: Pointer(Fn(T.HRESULT, [[Pointer(T.IThumbnailExtractor), 'This'], [Pointer(T.IStorage), 'pStg'], [T.ULONG, 'ulLength'], [T.ULONG, 'ulHeight'], [Pointer(T.ULONG), 'pulOutputLength'], [Pointer(T.ULONG), 'pulOutputHeight'], [Pointer(T.HBITMAP), 'phOutputBitmap']])),
    OnFileUpdated: Pointer(Fn(T.HRESULT, [[Pointer(T.IThumbnailExtractor), 'This'], [Pointer(T.IStorage), 'pStg']]))
});};
T.COINIT = function() {return Enum('COINIT_SPEED_OVER_MEMORY', {
    COINIT_APARTMENTTHREADED: 2,
    COINIT_MULTITHREADED: 0,
    COINIT_DISABLE_OLE1DDE: 4,
    COINIT_SPEED_OVER_MEMORY: 8
});};
T.REGCLS = function() {return Enum('REGCLS_SURROGATE', {
    REGCLS_SINGLEUSE: 0,
    REGCLS_MULTIPLEUSE: 1,
    REGCLS_MULTI_SEPARATE: 2,
    REGCLS_SUSPENDED: 4,
    REGCLS_SURROGATE: 8
});};
T.COWAIT_FLAGS = function() {return Enum('COWAIT_ALERTABLE', {
    COWAIT_WAITALL: 1,
    COWAIT_ALERTABLE: 2
});};
T.STGOPTIONS = function() {return Struct('tagSTGOPTIONS', {
    usVersion: T.USHORT,
    reserved: T.USHORT,
    ulSectorSize: T.ULONG,
    pwcsTemplateFile: Pointer(T.WCHAR)
});};
T.IInternet = function() {return Struct('IInternet', null);};
T.IBinding = function() {return Struct('IBinding', null);};
T.IBindStatusCallback = function() {return Struct('IBindStatusCallback', null);};
T.IBindStatusCallbackEx = function() {return Struct('IBindStatusCallbackEx', null);};
T.IAuthenticate = function() {return Struct('IAuthenticate', null);};
T.IHttpNegotiate = function() {return Struct('IHttpNegotiate', null);};
T.IHttpNegotiate2 = function() {return Struct('IHttpNegotiate2', null);};
T.IBindHost = function() {return Struct('IBindHost', null);};
T.IWinInetInfo = function() {return Struct('IWinInetInfo', null);};
T.IWinInetHttpInfo = function() {return Struct('IWinInetHttpInfo', null);};
T.IWindowForBindingUI = function() {return Struct('IWindowForBindingUI', null);};
T.IHttpSecurity = function() {return Struct('IHttpSecurity', null);};
T.IPersistMoniker = function() {return Struct('IPersistMoniker', null);};
T.IMonikerProp = function() {return Struct('IMonikerProp', null);};
T.IBindProtocol = function() {return Struct('IBindProtocol', null);};
T.IInternetBindInfo = function() {return Struct('IInternetBindInfo', null);};
T.IInternetPriority = function() {return Struct('IInternetPriority', null);};
T.IInternetProtocolRoot = function() {return Struct('IInternetProtocolRoot', null);};
T.IInternetProtocolSink = function() {return Struct('IInternetProtocolSink', null);};
T.IInternetProtocol = function() {return Struct('IInternetProtocol', null);};
T.IInternetProtocolInfo = function() {return Struct('IInternetProtocolInfo', null);};
T.IInternetSession = function() {return Struct('IInternetSession', null);};
T.IInternetSecurityMgrSite = function() {return Struct('IInternetSecurityMgrSite', null);};
T.IInternetSecurityManager = function() {return Struct('IInternetSecurityManager', null);};
T.IInternetHostSecurityManager = function() {return Struct('IInternetHostSecurityManager', null);};
T.IInternetZoneManager = function() {return Struct('IInternetZoneManager', null);};
T.IInternetZoneManagerEx = function() {return Struct('IInternetZoneManagerEx', null);};
T.IInternetZoneManagerEx2 = function() {return Struct('IInternetZoneManagerEx2', null);};
T.ISoftDistExt = function() {return Struct('ISoftDistExt', null);};
T.IUri = function() {return Struct('IUri', null);};
T.IUriContainer = function() {return Struct('IUriContainer', null);};
T.IUriBuilder = function() {return Struct('IUriBuilder', null);};
T.IUriBuilderFactory = function() {return Struct('IUriBuilderFactory', null);};
T.IInternetProtocolEx = function() {return Struct('IInternetProtocolEx', null);};
T.IOleWindow = function() {return Struct('IOleWindow', null);};
T.IOleInPlaceObject = function() {return Struct('IOleInPlaceObject', null);};
T.IOleInPlaceUIWindow = function() {return Struct('IOleInPlaceUIWindow', null);};
T.IOleInPlaceFrame = function() {return Struct('IOleInPlaceFrame', null);};
T.IOleInPlaceActiveObject = function() {return Struct('IOleInPlaceActiveObject', null);};
T.IOleInPlaceSite = function() {return Struct('IOleInPlaceSite', null);};
T.IParseDisplayName = function() {return Struct('IParseDisplayName', null);};
T.IOleContainer = function() {return Struct('IOleContainer', null);};
T.IOleItemContainer = function() {return Struct('IOleItemContainer', null);};
T.IOleLink = function() {return Struct('IOleLink', null);};
T.IOleClientSite = function() {return Struct('IOleClientSite', null);};
T.IOleCache = function() {return Struct('IOleCache', null);};
T.IOleCache2 = function() {return Struct('IOleCache2', null);};
T.IOleCacheControl = function() {return Struct('IOleCacheControl', null);};
T.IEnumOLEVERB = function() {return Struct('IEnumOLEVERB', null);};
T.IOleObject = function() {return Struct('IOleObject', null);};
T.IOleAdviseHolder = function() {return Struct('IOleAdviseHolder', null);};
T.IContinue = function() {return Struct('IContinue', null);};
T.IViewObject = function() {return Struct('IViewObject', null);};
T.IViewObject2 = function() {return Struct('IViewObject2', null);};
T.IDropSource = function() {return Struct('IDropSource', null);};
T.IDropTarget = function() {return Struct('IDropTarget', null);};
T.OLERENDER = function() {return Enum('OLERENDER_ASIS', {
    OLERENDER_NONE: 0,
    OLERENDER_DRAW: 1,
    OLERENDER_FORMAT: 2,
    OLERENDER_ASIS: 3
});};
T.LPOLERENDER = function() {return Pointer(Enum('tagOLERENDER', null));};
T.OBJECTDESCRIPTOR = function() {return Struct('tagOBJECTDESCRIPTOR', {
    cbSize: T.ULONG,
    clsid: T.CLSID,
    dwDrawAspect: T.DWORD,
    sizel: T.SIZEL,
    pointl: T.POINTL,
    dwStatus: T.DWORD,
    dwFullUserTypeName: T.DWORD,
    dwSrcOfCopy: T.DWORD
});};
T.POBJECTDESCRIPTOR = function() {return Pointer(Struct('tagOBJECTDESCRIPTOR', null));};
T.LPOBJECTDESCRIPTOR = function() {return Pointer(Struct('tagOBJECTDESCRIPTOR', null));};
T.LINKSRCDESCRIPTOR = function() {return Struct('tagOBJECTDESCRIPTOR', null);};
T.PLINKSRCDESCRIPTOR = function() {return Pointer(Struct('tagOBJECTDESCRIPTOR', null));};
T.LPLINKSRCDESCRIPTOR = function() {return Pointer(Struct('tagOBJECTDESCRIPTOR', null));};
T.LPOLEWINDOW = function() {return Pointer(T.IOleWindow);};
T.IOleWindowVtbl = function() {return Struct('IOleWindowVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleWindow), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleWindow), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleWindow), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleWindow), 'This'], [Pointer(T.HWND), 'phwnd']])),
    ContextSensitiveHelp: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleWindow), 'This'], [T.BOOL, 'fEnterMode']]))
});};
T.LPOLEINPLACEOBJECT = function() {return Pointer(T.IOleInPlaceObject);};
T.IOleInPlaceObjectVtbl = function() {return Struct('IOleInPlaceObjectVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceObject), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceObject), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This'], [Pointer(T.HWND), 'phwnd']])),
    ContextSensitiveHelp: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This'], [T.BOOL, 'fEnterMode']])),
    InPlaceDeactivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This']])),
    UIDeactivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This']])),
    SetObjectRects: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This'], [T.LPCRECT, 'lprcPosRect'], [T.LPCRECT, 'lprcClipRect']])),
    ReactivateAndUndo: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This']]))
});};
T.LPOLEINPLACEUIWINDOW = function() {return Pointer(T.IOleInPlaceUIWindow);};
T.BORDERWIDTHS = function() {return T.RECT;};
T.LPBORDERWIDTHS = function() {return T.LPRECT;};
T.LPCBORDERWIDTHS = function() {return T.LPCRECT;};
T.IOleInPlaceUIWindowVtbl = function() {return Struct('IOleInPlaceUIWindowVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceUIWindow), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceUIWindow), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [Pointer(T.HWND), 'phwnd']])),
    ContextSensitiveHelp: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [T.BOOL, 'fEnterMode']])),
    GetBorder: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [T.LPRECT, 'lprectBorder']])),
    RequestBorderSpace: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [T.LPCBORDERWIDTHS, 'pborderwidths']])),
    SetBorderSpace: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [T.LPCBORDERWIDTHS, 'pborderwidths']])),
    SetActiveObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [Pointer(T.IOleInPlaceActiveObject), 'pActiveObject'], [T.LPCOLESTR, 'pszObjName']]))
});};
T.LPOLEINPLACEFRAME = function() {return Pointer(T.IOleInPlaceFrame);};
T.OLEINPLACEFRAMEINFO = function() {return Struct('tagOleInPlaceFrameInfo', {
    cb: T.UINT,
    fMDIApp: T.BOOL,
    hwndFrame: T.HWND,
    haccel: T.HACCEL,
    cAccelEntries: T.UINT
});};
T.LPOLEINPLACEFRAMEINFO = function() {return Pointer(Struct('tagOleInPlaceFrameInfo', null));};
T.OLEMENUGROUPWIDTHS = function() {return Struct('tagOleMenuGroupWidths', {
    width: ArrayType(T.LONG, 6)
});};
T.LPOLEMENUGROUPWIDTHS = function() {return Pointer(Struct('tagOleMenuGroupWidths', null));};
T.HOLEMENU = function() {return T.HGLOBAL;};
T.IOleInPlaceFrameVtbl = function() {return Struct('IOleInPlaceFrameVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceFrame), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceFrame), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [Pointer(T.HWND), 'phwnd']])),
    ContextSensitiveHelp: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.BOOL, 'fEnterMode']])),
    GetBorder: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.LPRECT, 'lprectBorder']])),
    RequestBorderSpace: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.LPCBORDERWIDTHS, 'pborderwidths']])),
    SetBorderSpace: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.LPCBORDERWIDTHS, 'pborderwidths']])),
    SetActiveObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [Pointer(T.IOleInPlaceActiveObject), 'pActiveObject'], [T.LPCOLESTR, 'pszObjName']])),
    InsertMenus: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.HMENU, 'hmenuShared'], [T.LPOLEMENUGROUPWIDTHS, 'lpMenuWidths']])),
    SetMenu: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.HMENU, 'hmenuShared'], [T.HOLEMENU, 'holemenu'], [T.HWND, 'hwndActiveObject']])),
    RemoveMenus: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.HMENU, 'hmenuShared']])),
    SetStatusText: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.LPCOLESTR, 'pszStatusText']])),
    EnableModeless: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.BOOL, 'fEnable']])),
    TranslateAcceleratorA: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.LPMSG, 'lpmsg'], [T.WORD, 'wID']]))
});};
T.LPOLEINPLACEACTIVEOBJECT = function() {return Pointer(T.IOleInPlaceActiveObject);};
T.IOleInPlaceActiveObjectVtbl = function() {return Struct('IOleInPlaceActiveObjectVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceActiveObject), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceActiveObject), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [Pointer(T.HWND), 'phwnd']])),
    ContextSensitiveHelp: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.BOOL, 'fEnterMode']])),
    TranslateAcceleratorA: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.LPMSG, 'lpmsg']])),
    OnFrameWindowActivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.BOOL, 'fActivate']])),
    OnDocWindowActivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.BOOL, 'fActivate']])),
    ResizeBorder: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.LPCRECT, 'prcBorder'], [Pointer(T.IOleInPlaceUIWindow), 'pUIWindow'], [T.BOOL, 'fFrameWindow']])),
    EnableModeless: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.BOOL, 'fEnable']]))
});};
T.LPOLEINPLACESITE = function() {return Pointer(T.IOleInPlaceSite);};
T.IOleInPlaceSiteVtbl = function() {return Struct('IOleInPlaceSiteVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceSite), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceSite), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [Pointer(T.HWND), 'phwnd']])),
    ContextSensitiveHelp: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [T.BOOL, 'fEnterMode']])),
    CanInPlaceActivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']])),
    OnInPlaceActivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']])),
    OnUIActivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']])),
    GetWindowContext: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [Pointer(Pointer(T.IOleInPlaceFrame)), 'ppFrame'], [Pointer(Pointer(T.IOleInPlaceUIWindow)), 'ppDoc'], [T.LPRECT, 'lprcPosRect'], [T.LPRECT, 'lprcClipRect'], [T.LPOLEINPLACEFRAMEINFO, 'lpFrameInfo']])),
    Scroll: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [T.SIZE, 'scrollExtent']])),
    OnUIDeactivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [T.BOOL, 'fUndoable']])),
    OnInPlaceDeactivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']])),
    DiscardUndoState: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']])),
    DeactivateAndUndo: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']])),
    OnPosRectChange: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [T.LPCRECT, 'lprcPosRect']]))
});};
T.LPPARSEDISPLAYNAME = function() {return Pointer(T.IParseDisplayName);};
T.IParseDisplayNameVtbl = function() {return Struct('IParseDisplayNameVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IParseDisplayName), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IParseDisplayName), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IParseDisplayName), 'This']])),
    ParseDisplayName: Pointer(Fn(T.HRESULT, [[Pointer(T.IParseDisplayName), 'This'], [Pointer(T.IBindCtx), 'pbc'], [T.LPOLESTR, 'pszDisplayName'], [Pointer(T.ULONG), 'pchEaten'], [Pointer(Pointer(T.IMoniker)), 'ppmkOut']]))
});};
T.LPOLECONTAINER = function() {return Pointer(T.IOleContainer);};
T.IOleContainerVtbl = function() {return Struct('IOleContainerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleContainer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleContainer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleContainer), 'This']])),
    ParseDisplayName: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleContainer), 'This'], [Pointer(T.IBindCtx), 'pbc'], [T.LPOLESTR, 'pszDisplayName'], [Pointer(T.ULONG), 'pchEaten'], [Pointer(Pointer(T.IMoniker)), 'ppmkOut']])),
    EnumObjects: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleContainer), 'This'], [T.DWORD, 'grfFlags'], [Pointer(Pointer(T.IEnumUnknown)), 'ppenum']])),
    LockContainer: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleContainer), 'This'], [T.BOOL, 'fLock']]))
});};
T.LPOLEITEMCONTAINER = function() {return Pointer(T.IOleItemContainer);};
T.BINDSPEED = function() {return Enum('BINDSPEED_IMMEDIATE', {
    BINDSPEED_INDEFINITE: 1,
    BINDSPEED_MODERATE: 2,
    BINDSPEED_IMMEDIATE: 3
});};
T.OLECONTF = function() {return Enum('OLECONTF_ONLYIFRUNNING', {
    OLECONTF_EMBEDDINGS: 1,
    OLECONTF_LINKS: 2,
    OLECONTF_OTHERS: 4,
    OLECONTF_ONLYUSER: 8,
    OLECONTF_ONLYIFRUNNING: 16
});};
T.IOleItemContainerVtbl = function() {return Struct('IOleItemContainerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleItemContainer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleItemContainer), 'This']])),
    ParseDisplayName: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [Pointer(T.IBindCtx), 'pbc'], [T.LPOLESTR, 'pszDisplayName'], [Pointer(T.ULONG), 'pchEaten'], [Pointer(Pointer(T.IMoniker)), 'ppmkOut']])),
    EnumObjects: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [T.DWORD, 'grfFlags'], [Pointer(Pointer(T.IEnumUnknown)), 'ppenum']])),
    LockContainer: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [T.BOOL, 'fLock']])),
    GetObjectA: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [T.LPOLESTR, 'pszItem'], [T.DWORD, 'dwSpeedNeeded'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    GetObjectStorage: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [T.LPOLESTR, 'pszItem'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvStorage']])),
    IsRunning: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [T.LPOLESTR, 'pszItem']]))
});};
T.LPOLELINK = function() {return Pointer(T.IOleLink);};
T.OLEUPDATE = function() {return Enum('OLEUPDATE_ONCALL', {
    OLEUPDATE_ALWAYS: 1,
    OLEUPDATE_ONCALL: 3
});};
T.POLEUPDATE = function() {return Pointer(Enum('tagOLEUPDATE', null));};
T.LPOLEUPDATE = function() {return Pointer(Enum('tagOLEUPDATE', null));};
T.OLELINKBIND = function() {return Enum('OLELINKBIND_EVENIFCLASSDIFF', {
    OLELINKBIND_EVENIFCLASSDIFF: 1
});};
T.IOleLinkVtbl = function() {return Struct('IOleLinkVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleLink), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleLink), 'This']])),
    SetUpdateOptions: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [T.DWORD, 'dwUpdateOpt']])),
    GetUpdateOptions: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.DWORD), 'pdwUpdateOpt']])),
    SetSourceMoniker: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.IMoniker), 'pmk'], [Pointer(T.CLSID), 'rclsid']])),
    GetSourceMoniker: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(Pointer(T.IMoniker)), 'ppmk']])),
    SetSourceDisplayName: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [T.LPCOLESTR, 'pszStatusText']])),
    GetSourceDisplayName: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.LPOLESTR), 'ppszDisplayName']])),
    BindToSource: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [T.DWORD, 'bindflags'], [Pointer(T.IBindCtx), 'pbc']])),
    BindIfRunning: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This']])),
    GetBoundSource: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(Pointer(T.IUnknown)), 'ppunk']])),
    UnbindSource: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This']])),
    Update: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.IBindCtx), 'pbc']]))
});};
T.LPOLECLIENTSITE = function() {return Pointer(T.IOleClientSite);};
T.IOleClientSiteVtbl = function() {return Struct('IOleClientSiteVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleClientSite), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleClientSite), 'This']])),
    SaveObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This']])),
    GetMoniker: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This'], [T.DWORD, 'dwAssign'], [T.DWORD, 'dwWhichMoniker'], [Pointer(Pointer(T.IMoniker)), 'ppmk']])),
    GetContainer: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This'], [Pointer(Pointer(T.IOleContainer)), 'ppContainer']])),
    ShowObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This']])),
    OnShowWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This'], [T.BOOL, 'fShow']])),
    RequestNewObjectLayout: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This']]))
});};
T.LPOLECACHE = function() {return Pointer(T.IOleCache);};
T.IOleCacheVtbl = function() {return Struct('IOleCacheVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleCache), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleCache), 'This']])),
    Cache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [T.DWORD, 'advf'], [Pointer(T.DWORD), 'pdwConnection']])),
    Uncache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [T.DWORD, 'dwConnection']])),
    EnumCache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumSTATDATA']])),
    InitCache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(T.IDataObject), 'pDataObject']])),
    SetData: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pmedium'], [T.BOOL, 'fRelease']]))
});};
T.LPOLECACHE2 = function() {return Pointer(T.IOleCache2);};
T.DISCARDCACHE = function() {return Enum('DISCARDCACHE_NOSAVE', {
    DISCARDCACHE_SAVEIFDIRTY: 0,
    DISCARDCACHE_NOSAVE: 1
});};
T.IOleCache2Vtbl = function() {return Struct('IOleCache2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleCache2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleCache2), 'This']])),
    Cache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [T.DWORD, 'advf'], [Pointer(T.DWORD), 'pdwConnection']])),
    Uncache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [T.DWORD, 'dwConnection']])),
    EnumCache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumSTATDATA']])),
    InitCache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [Pointer(T.IDataObject), 'pDataObject']])),
    SetData: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pmedium'], [T.BOOL, 'fRelease']])),
    UpdateCache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [T.LPDATAOBJECT, 'pDataObject'], [T.DWORD, 'grfUpdf'], [T.LPVOID, 'pReserved']])),
    DiscardCache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [T.DWORD, 'dwDiscardOptions']]))
});};
T.LPOLECACHECONTROL = function() {return Pointer(T.IOleCacheControl);};
T.IOleCacheControlVtbl = function() {return Struct('IOleCacheControlVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCacheControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleCacheControl), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleCacheControl), 'This']])),
    OnRun: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCacheControl), 'This'], [T.LPDATAOBJECT, 'pDataObject']])),
    OnStop: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCacheControl), 'This']]))
});};
T.LPENUMOLEVERB = function() {return Pointer(T.IEnumOLEVERB);};
T.OLEVERB = function() {return Struct('tagOLEVERB', {
    lVerb: T.LONG,
    lpszVerbName: T.LPOLESTR,
    fuFlags: T.DWORD,
    grfAttribs: T.DWORD
});};
T.LPOLEVERB = function() {return Pointer(Struct('tagOLEVERB', null));};
T.OLEVERBATTRIB = function() {return Enum('OLEVERBATTRIB_ONCONTAINERMENU', {
    OLEVERBATTRIB_NEVERDIRTIES: 1,
    OLEVERBATTRIB_ONCONTAINERMENU: 2
});};
T.IEnumOLEVERBVtbl = function() {return Struct('IEnumOLEVERBVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumOLEVERB), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumOLEVERB), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [T.ULONG, 'celt'], [T.LPOLEVERB, 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [Pointer(Pointer(T.IEnumOLEVERB)), 'ppenum']]))
});};
T.LPOLEOBJECT = function() {return Pointer(T.IOleObject);};
T.OLEGETMONIKER = function() {return Enum('OLEGETMONIKER_TEMPFORUSER', {
    OLEGETMONIKER_ONLYIFTHERE: 1,
    OLEGETMONIKER_FORCEASSIGN: 2,
    OLEGETMONIKER_UNASSIGN: 3,
    OLEGETMONIKER_TEMPFORUSER: 4
});};
T.OLEWHICHMK = function() {return Enum('OLEWHICHMK_OBJFULL', {
    OLEWHICHMK_CONTAINER: 1,
    OLEWHICHMK_OBJREL: 2,
    OLEWHICHMK_OBJFULL: 3
});};
T.USERCLASSTYPE = function() {return Enum('USERCLASSTYPE_APPNAME', {
    USERCLASSTYPE_FULL: 1,
    USERCLASSTYPE_SHORT: 2,
    USERCLASSTYPE_APPNAME: 3
});};
T.OLEMISC = function() {return Enum('OLEMISC_SUPPORTSMULTILEVELUNDO', {
    OLEMISC_RECOMPOSEONRESIZE: 1,
    OLEMISC_ONLYICONIC: 2,
    OLEMISC_INSERTNOTREPLACE: 4,
    OLEMISC_STATIC: 8,
    OLEMISC_CANTLINKINSIDE: 16,
    OLEMISC_CANLINKBYOLE1: 32,
    OLEMISC_ISLINKOBJECT: 64,
    OLEMISC_INSIDEOUT: 128,
    OLEMISC_ACTIVATEWHENVISIBLE: 256,
    OLEMISC_RENDERINGISDEVICEINDEPENDENT: 512,
    OLEMISC_INVISIBLEATRUNTIME: 1024,
    OLEMISC_ALWAYSRUN: 2048,
    OLEMISC_ACTSLIKEBUTTON: 4096,
    OLEMISC_ACTSLIKELABEL: 8192,
    OLEMISC_NOUIACTIVATE: 16384,
    OLEMISC_ALIGNABLE: 32768,
    OLEMISC_SIMPLEFRAME: 65536,
    OLEMISC_SETCLIENTSITEFIRST: 131072,
    OLEMISC_IMEMODE: 262144,
    OLEMISC_IGNOREACTIVATEWHENVISIBLE: 524288,
    OLEMISC_WANTSTOMENUMERGE: 1048576,
    OLEMISC_SUPPORTSMULTILEVELUNDO: 2097152
});};
T.OLECLOSE = function() {return Enum('OLECLOSE_PROMPTSAVE', {
    OLECLOSE_SAVEIFDIRTY: 0,
    OLECLOSE_NOSAVE: 1,
    OLECLOSE_PROMPTSAVE: 2
});};
T.IOleObjectVtbl = function() {return Struct('IOleObjectVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleObject), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleObject), 'This']])),
    SetClientSite: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.IOleClientSite), 'pClientSite']])),
    GetClientSite: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(Pointer(T.IOleClientSite)), 'ppClientSite']])),
    SetHostNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.LPCOLESTR, 'szContainerApp'], [T.LPCOLESTR, 'szContainerObj']])),
    Close: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwSaveOption']])),
    SetMoniker: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwWhichMoniker'], [Pointer(T.IMoniker), 'pmk']])),
    GetMoniker: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwAssign'], [T.DWORD, 'dwWhichMoniker'], [Pointer(Pointer(T.IMoniker)), 'ppmk']])),
    InitFromData: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.IDataObject), 'pDataObject'], [T.BOOL, 'fCreation'], [T.DWORD, 'dwReserved']])),
    GetClipboardData: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwReserved'], [Pointer(Pointer(T.IDataObject)), 'ppDataObject']])),
    DoVerb: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.LONG, 'iVerb'], [T.LPMSG, 'lpmsg'], [Pointer(T.IOleClientSite), 'pActiveSite'], [T.LONG, 'lindex'], [T.HWND, 'hwndParent'], [T.LPCRECT, 'lprcPosRect']])),
    EnumVerbs: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(Pointer(T.IEnumOLEVERB)), 'ppEnumOleVerb']])),
    Update: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This']])),
    IsUpToDate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This']])),
    GetUserClassID: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.CLSID), 'pClsid']])),
    GetUserType: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwFormOfType'], [Pointer(T.LPOLESTR), 'pszUserType']])),
    SetExtent: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwDrawAspect'], [Pointer(T.SIZEL), 'psizel']])),
    GetExtent: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwDrawAspect'], [Pointer(T.SIZEL), 'psizel']])),
    Advise: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.IAdviseSink), 'pAdvSink'], [Pointer(T.DWORD), 'pdwConnection']])),
    Unadvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwConnection']])),
    EnumAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumAdvise']])),
    GetMiscStatus: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwAspect'], [Pointer(T.DWORD), 'pdwStatus']])),
    SetColorScheme: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.LOGPALETTE), 'pLogpal']]))
});};
T.LPOLEADVISEHOLDER = function() {return Pointer(T.IOleAdviseHolder);};
T.IOleAdviseHolderVtbl = function() {return Struct('IOleAdviseHolderVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleAdviseHolder), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleAdviseHolder), 'This']])),
    Advise: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [Pointer(T.IAdviseSink), 'pAdvise'], [Pointer(T.DWORD), 'pdwConnection']])),
    Unadvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [T.DWORD, 'dwConnection']])),
    EnumAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumAdvise']])),
    SendOnRename: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [Pointer(T.IMoniker), 'pmk']])),
    SendOnSave: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This']])),
    SendOnClose: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This']]))
});};
T.IContinueVtbl = function() {return Struct('IContinueVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IContinue), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IContinue), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IContinue), 'This']])),
    FContinue: Pointer(Fn(T.HRESULT, [[Pointer(T.IContinue), 'This']]))
});};
T.LPVIEWOBJECT = function() {return Pointer(T.IViewObject);};
T.IViewObjectVtbl = function() {return Struct('IViewObjectVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IViewObject), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IViewObject), 'This']])),
    Draw: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.HDC, 'hdcTargetDev'], [T.HDC, 'hdcDraw'], [T.LPCRECTL, 'lprcBounds'], [T.LPCRECTL, 'lprcWBounds'], [Pointer(Fn(T.BOOL, [[T.ULONG_PTR, 'dwContinue']])), 'pfnContinue'], [T.ULONG_PTR, 'dwContinue']])),
    GetColorSet: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.HDC, 'hicTargetDev'], [Pointer(Pointer(T.LOGPALETTE)), 'ppColorSet']])),
    Freeze: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DWORD), 'pdwFreeze']])),
    Unfreeze: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwFreeze']])),
    SetAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'aspects'], [T.DWORD, 'advf'], [Pointer(T.IAdviseSink), 'pAdvSink']])),
    GetAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [Pointer(T.DWORD), 'pAspects'], [Pointer(T.DWORD), 'pAdvf'], [Pointer(Pointer(T.IAdviseSink)), 'ppAdvSink']]))
});};
T.LPVIEWOBJECT2 = function() {return Pointer(T.IViewObject2);};
T.IViewObject2Vtbl = function() {return Struct('IViewObject2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IViewObject2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IViewObject2), 'This']])),
    Draw: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.HDC, 'hdcTargetDev'], [T.HDC, 'hdcDraw'], [T.LPCRECTL, 'lprcBounds'], [T.LPCRECTL, 'lprcWBounds'], [Pointer(Fn(T.BOOL, [[T.ULONG_PTR, 'dwContinue']])), 'pfnContinue'], [T.ULONG_PTR, 'dwContinue']])),
    GetColorSet: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.HDC, 'hicTargetDev'], [Pointer(Pointer(T.LOGPALETTE)), 'ppColorSet']])),
    Freeze: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DWORD), 'pdwFreeze']])),
    Unfreeze: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [T.DWORD, 'dwFreeze']])),
    SetAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [T.DWORD, 'aspects'], [T.DWORD, 'advf'], [Pointer(T.IAdviseSink), 'pAdvSink']])),
    GetAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [Pointer(T.DWORD), 'pAspects'], [Pointer(T.DWORD), 'pAdvf'], [Pointer(Pointer(T.IAdviseSink)), 'ppAdvSink']])),
    GetExtent: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.LPSIZEL, 'lpsizel']]))
});};
T.LPDROPSOURCE = function() {return Pointer(T.IDropSource);};
T.IDropSourceVtbl = function() {return Struct('IDropSourceVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IDropSource), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IDropSource), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IDropSource), 'This']])),
    QueryContinueDrag: Pointer(Fn(T.HRESULT, [[Pointer(T.IDropSource), 'This'], [T.BOOL, 'fEscapePressed'], [T.DWORD, 'grfKeyState']])),
    GiveFeedback: Pointer(Fn(T.HRESULT, [[Pointer(T.IDropSource), 'This'], [T.DWORD, 'dwEffect']]))
});};
T.LPDROPTARGET = function() {return Pointer(T.IDropTarget);};
T.IDropTargetVtbl = function() {return Struct('IDropTargetVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IDropTarget), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IDropTarget), 'This']])),
    DragEnter: Pointer(Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This'], [Pointer(T.IDataObject), 'pDataObj'], [T.DWORD, 'grfKeyState'], [T.POINTL, 'pt'], [Pointer(T.DWORD), 'pdwEffect']])),
    DragOver: Pointer(Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This'], [T.DWORD, 'grfKeyState'], [T.POINTL, 'pt'], [Pointer(T.DWORD), 'pdwEffect']])),
    DragLeave: Pointer(Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This']])),
    Drop: Pointer(Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This'], [Pointer(T.IDataObject), 'pDataObj'], [T.DWORD, 'grfKeyState'], [T.POINTL, 'pt'], [Pointer(T.DWORD), 'pdwEffect']]))
});};
T.IServiceProvider = function() {return Struct('IServiceProvider', null);};
T.LPSERVICEPROVIDER = function() {return Pointer(T.IServiceProvider);};
T.IServiceProviderVtbl = function() {return Struct('IServiceProviderVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IServiceProvider), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IServiceProvider), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IServiceProvider), 'This']])),
    QueryService: Pointer(Fn(T.HRESULT, [[Pointer(T.IServiceProvider), 'This'], [Pointer(T.GUID), 'guidService'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']]))
});};
T.IXMLDOMNode = function() {return Struct('IXMLDOMNode', null);};
T.IXMLDOMDocument = function() {return Struct('IXMLDOMDocument', null);};
T.IXMLDOMNodeList = function() {return Struct('IXMLDOMNodeList', null);};
T.IXMLDOMNamedNodeMap = function() {return Struct('IXMLDOMNamedNodeMap', null);};
T.IXMLDOMDocumentFragment = function() {return Struct('IXMLDOMDocumentFragment', null);};
T.IXMLDOMCharacterData = function() {return Struct('IXMLDOMCharacterData', null);};
T.IXMLDOMAttribute = function() {return Struct('IXMLDOMAttribute', null);};
T.IXMLDOMElement = function() {return Struct('IXMLDOMElement', null);};
T.IXMLDOMText = function() {return Struct('IXMLDOMText', null);};
T.IXMLDOMComment = function() {return Struct('IXMLDOMComment', null);};
T.IXMLDOMProcessingInstruction = function() {return Struct('IXMLDOMProcessingInstruction', null);};
T.IXMLDOMCDATASection = function() {return Struct('IXMLDOMCDATASection', null);};
T.IXMLDOMDocumentType = function() {return Struct('IXMLDOMDocumentType', null);};
T.IXMLDOMNotation = function() {return Struct('IXMLDOMNotation', null);};
T.IXMLDOMEntity = function() {return Struct('IXMLDOMEntity', null);};
T.IXMLDOMEntityReference = function() {return Struct('IXMLDOMEntityReference', null);};
T.IXMLDOMImplementation = function() {return Struct('IXMLDOMImplementation', null);};
T.IXMLDOMParseError = function() {return Struct('IXMLDOMParseError', null);};
T.XMLDOMDocumentEvents = function() {return Struct('XMLDOMDocumentEvents', null);};
T.DOMDocument = function() {return Struct('DOMDocument', null);};
T.DOMFreeThreadedDocument = function() {return Struct('DOMFreeThreadedDocument', null);};
T.IXMLHttpRequest = function() {return Struct('IXMLHttpRequest', null);};
T.XMLHTTPRequest = function() {return Struct('XMLHTTPRequest', null);};
T.IXMLDSOControl = function() {return Struct('IXMLDSOControl', null);};
T.XMLDSOControl = function() {return Struct('XMLDSOControl', null);};
T.IXMLElementCollection = function() {return Struct('IXMLElementCollection', null);};
T.IXMLElement = function() {return Struct('IXMLElement', null);};
T.IXMLDocument = function() {return Struct('IXMLDocument', null);};
T.IXMLElement2 = function() {return Struct('IXMLElement2', null);};
T.IXMLDocument2 = function() {return Struct('IXMLDocument2', null);};
T.IXMLAttribute = function() {return Struct('IXMLAttribute', null);};
T.IXMLError = function() {return Struct('IXMLError', null);};
T.IXMLElementNotificationSink = function() {return Struct('IXMLElementNotificationSink', null);};
T.XMLDocument = function() {return Struct('XMLDocument', null);};
T.IDispatch = function() {return Struct('IDispatch', null);};
T.IEnumVARIANT = function() {return Struct('IEnumVARIANT', null);};
T.ITypeComp = function() {return Struct('ITypeComp', null);};
T.ITypeInfo = function() {return Struct('ITypeInfo', null);};
T.ITypeInfo2 = function() {return Struct('ITypeInfo2', null);};
T.ITypeLib = function() {return Struct('ITypeLib', null);};
T.ITypeLib2 = function() {return Struct('ITypeLib2', null);};
T.ITypeChangeEvents = function() {return Struct('ITypeChangeEvents', null);};
T.IErrorInfo = function() {return Struct('IErrorInfo', null);};
T.ICreateErrorInfo = function() {return Struct('ICreateErrorInfo', null);};
T.ISupportErrorInfo = function() {return Struct('ISupportErrorInfo', null);};
T.ITypeFactory = function() {return Struct('ITypeFactory', null);};
T.ITypeMarshal = function() {return Struct('ITypeMarshal', null);};
T.IRecordInfo = function() {return Struct('IRecordInfo', null);};
T.ICreateTypeInfo = function() {return Struct('ICreateTypeInfo', null);};
T.ICreateTypeInfo2 = function() {return Struct('ICreateTypeInfo2', null);};
T.ICreateTypeLib = function() {return Struct('ICreateTypeLib', null);};
T.ICreateTypeLib2 = function() {return Struct('ICreateTypeLib2', null);};
T.IErrorLog = function() {return Struct('IErrorLog', null);};
T.IPropertyBag = function() {return Struct('IPropertyBag', null);};
T.CURRENCY = function() {return T.CY;};
T.SAFEARRAYBOUND = function() {return Struct('tagSAFEARRAYBOUND', {
    cElements: T.ULONG,
    lLbound: T.LONG
});};
T.LPSAFEARRAYBOUND = function() {return Pointer(Struct('tagSAFEARRAYBOUND', null));};
T.wireVARIANT = function() {return Pointer(Struct('_wireVARIANT', null));};
T.wireBRECORD = function() {return Pointer(Struct('_wireBRECORD', null));};
T.SAFEARR_BSTR = function() {return Struct('_wireSAFEARR_BSTR', {
    Size: T.ULONG,
    aBstr: Pointer(T.wireBSTR)
});};
T.SAFEARR_UNKNOWN = function() {return Struct('_wireSAFEARR_UNKNOWN', {
    Size: T.ULONG,
    apUnknown: Pointer(Pointer(T.IUnknown))
});};
T.SAFEARR_DISPATCH = function() {return Struct('_wireSAFEARR_DISPATCH', {
    Size: T.ULONG,
    apDispatch: Pointer(Pointer(T.IDispatch))
});};
T.SAFEARR_VARIANT = function() {return Struct('_wireSAFEARR_VARIANT', {
    Size: T.ULONG,
    aVariant: Pointer(T.wireVARIANT)
});};
T.SAFEARR_BRECORD = function() {return Struct('_wireSAFEARR_BRECORD', {
    Size: T.ULONG,
    aRecord: Pointer(T.wireBRECORD)
});};
T.SAFEARR_HAVEIID = function() {return Struct('_wireSAFEARR_HAVEIID', {
    Size: T.ULONG,
    apUnknown: Pointer(Pointer(T.IUnknown)),
    iid: T.IID
});};
T.SF_TYPE = function() {return Enum('SF_HAVEIID', {
    SF_ERROR: 0,
    SF_I1: 1,
    SF_I2: 2,
    SF_I4: 3,
    SF_I8: 4,
    SF_BSTR: 5,
    SF_UNKNOWN: 6,
    SF_DISPATCH: 7,
    SF_VARIANT: 8,
    SF_RECORD: 9,
    SF_HAVEIID: 10
});};
T.SAFEARRAYUNION = function() {return Struct('_wireSAFEARRAY_UNION', {
    sfType: T.ULONG,
    u: Union('', {
        BstrStr: T.SAFEARR_BSTR,
        UnknownStr: T.SAFEARR_UNKNOWN,
        DispatchStr: T.SAFEARR_DISPATCH,
        VariantStr: T.SAFEARR_VARIANT,
        RecordStr: T.SAFEARR_BRECORD,
        HaveIidStr: T.SAFEARR_HAVEIID,
        ByteStr: T.BYTE_SIZEDARR,
        WordStr: T.WORD_SIZEDARR,
        LongStr: T.DWORD_SIZEDARR,
        HyperStr: T.HYPER_SIZEDARR
    })
});};
T.wireSAFEARRAY = function() {return Pointer(Struct('_wireSAFEARRAY', {
    cDims: T.USHORT,
    fFeatures: T.USHORT,
    cbElements: T.ULONG,
    cLocks: T.ULONG,
    uArrayStructs: T.SAFEARRAYUNION,
    rgsabound: ArrayType(T.SAFEARRAYBOUND, 1)
}));};
T.wirePSAFEARRAY = function() {return Pointer(T.wireSAFEARRAY);};
T.SAFEARRAY = function() {return Struct('tagSAFEARRAY', {
    cDims: T.USHORT,
    fFeatures: T.USHORT,
    cbElements: T.ULONG,
    cLocks: T.ULONG,
    pvData: T.PVOID,
    rgsabound: ArrayType(T.SAFEARRAYBOUND, 1)
});};
T.LPSAFEARRAY = function() {return Pointer(T.SAFEARRAY);};
T.VARIANT = function() {return Struct('tagVARIANT', null);};
T.LPVARIANT = function() {return Pointer(T.VARIANT);};
T.VARIANTARG = function() {return T.VARIANT;};
T.LPVARIANTARG = function() {return Pointer(T.VARIANTARG);};
T.DISPID = function() {return T.LONG;};
T.HREFTYPE = function() {return T.DWORD;};
T.MEMBERID = function() {return T.DISPID;};
T.TYPEKIND = function() {return Enum('TKIND_MAX', {
    TKIND_ENUM: 0,
    TKIND_RECORD: 1,
    TKIND_MODULE: 2,
    TKIND_INTERFACE: 3,
    TKIND_DISPATCH: 4,
    TKIND_COCLASS: 5,
    TKIND_ALIAS: 6,
    TKIND_UNION: 7,
    TKIND_MAX: 8
});};
T.TYPEDESC = function() {return Struct('tagTYPEDESC', {
    __unnamed0: Union('', {
        lptdesc: Pointer(Struct('tagTYPEDESC', null)),
        lpadesc: Pointer(Struct('tagARRAYDESC', null)),
        hreftype: T.HREFTYPE
    }),
    vt: T.VARTYPE
});};
T.ARRAYDESC = function() {return Struct('tagARRAYDESC', {
    tdescElem: T.TYPEDESC,
    cDims: T.USHORT,
    rgbounds: ArrayType(T.SAFEARRAYBOUND, 1)
});};
T.PARAMDESCEX = function() {return Struct('tagPARAMDESCEX', {
    cBytes: T.ULONG,
    varDefaultValue: T.VARIANTARG
});};
T.LPPARAMDESCEX = function() {return Pointer(Struct('tagPARAMDESCEX', null));};
T.PARAMDESC = function() {return Struct('tagPARAMDESC', {
    pparamdescex: T.LPPARAMDESCEX,
    wParamFlags: T.USHORT
});};
T.LPPARAMDESC = function() {return Pointer(Struct('tagPARAMDESC', null));};
T.IDLDESC = function() {return Struct('tagIDLDESC', {
    dwReserved: T.ULONG_PTR,
    wIDLFlags: T.USHORT
});};
T.LPIDLDESC = function() {return Pointer(Struct('tagIDLDESC', null));};
T.ELEMDESC = function() {return Struct('tagELEMDESC', {
    tdesc: T.TYPEDESC,
    __unnamed0: Union('', {
        idldesc: T.IDLDESC,
        paramdesc: T.PARAMDESC
    })
});};
T.LPELEMDESC = function() {return Pointer(Struct('tagELEMDESC', {
    tdesc: T.TYPEDESC,
    __unnamed0: Union('', {
        idldesc: T.IDLDESC,
        paramdesc: T.PARAMDESC
    })
}));};
T.TYPEATTR = function() {return Struct('tagTYPEATTR', {
    guid: T.GUID,
    lcid: T.LCID,
    dwReserved: T.DWORD,
    memidConstructor: T.MEMBERID,
    memidDestructor: T.MEMBERID,
    lpstrSchema: T.LPOLESTR,
    cbSizeInstance: T.ULONG,
    typekind: T.TYPEKIND,
    cFuncs: T.WORD,
    cVars: T.WORD,
    cImplTypes: T.WORD,
    cbSizeVft: T.WORD,
    cbAlignment: T.WORD,
    wTypeFlags: T.WORD,
    wMajorVerNum: T.WORD,
    wMinorVerNum: T.WORD,
    tdescAlias: T.TYPEDESC,
    idldescType: T.IDLDESC
});};
T.LPTYPEATTR = function() {return Pointer(Struct('tagTYPEATTR', null));};
T.DISPPARAMS = function() {return Struct('tagDISPPARAMS', {
    rgvarg: Pointer(T.VARIANTARG),
    rgdispidNamedArgs: Pointer(T.DISPID),
    cArgs: T.UINT,
    cNamedArgs: T.UINT
});};
T.EXCEPINFO = function() {return Struct('tagEXCEPINFO', {
    wCode: T.WORD,
    wReserved: T.WORD,
    bstrSource: T.BSTR,
    bstrDescription: T.BSTR,
    bstrHelpFile: T.BSTR,
    dwHelpContext: T.DWORD,
    pvReserved: T.PVOID,
    pfnDeferredFillIn: Pointer(Fn(T.HRESULT, [[Pointer(Struct('tagEXCEPINFO', null))]])),
    scode: T.SCODE
});};
T.LPEXCEPINFO = function() {return Pointer(Struct('tagEXCEPINFO', {
    wCode: T.WORD,
    wReserved: T.WORD,
    bstrSource: T.BSTR,
    bstrDescription: T.BSTR,
    bstrHelpFile: T.BSTR,
    dwHelpContext: T.DWORD,
    pvReserved: T.PVOID,
    pfnDeferredFillIn: Pointer(Fn(T.HRESULT, [[Pointer(Struct('tagEXCEPINFO', null))]])),
    scode: T.SCODE
}));};
T.CALLCONV = function() {return Enum('CC_MAX', {
    CC_FASTCALL: 0,
    CC_CDECL: 1,
    CC_MSCPASCAL: 2,
    CC_PASCAL: 3,
    CC_MACPASCAL: 3,
    CC_STDCALL: 4,
    CC_FPFASTCALL: 5,
    CC_SYSCALL: 6,
    CC_MPWCDECL: 7,
    CC_MPWPASCAL: 8,
    CC_MAX: 9
});};
T.FUNCKIND = function() {return Enum('FUNC_DISPATCH', {
    FUNC_VIRTUAL: 0,
    FUNC_PUREVIRTUAL: 1,
    FUNC_NONVIRTUAL: 2,
    FUNC_STATIC: 3,
    FUNC_DISPATCH: 4
});};
T.INVOKEKIND = function() {return Enum('INVOKE_PROPERTYPUTREF', {
    INVOKE_FUNC: 1,
    INVOKE_PROPERTYGET: 2,
    INVOKE_PROPERTYPUT: 4,
    INVOKE_PROPERTYPUTREF: 8
});};
T.FUNCDESC = function() {return Struct('tagFUNCDESC', {
    memid: T.MEMBERID,
    lprgscode: Pointer(T.SCODE),
    lprgelemdescParam: Pointer(T.ELEMDESC),
    funckind: T.FUNCKIND,
    invkind: T.INVOKEKIND,
    callconv: T.CALLCONV,
    cParams: T.SHORT,
    cParamsOpt: T.SHORT,
    oVft: T.SHORT,
    cScodes: T.SHORT,
    elemdescFunc: T.ELEMDESC,
    wFuncFlags: T.WORD
});};
T.LPFUNCDESC = function() {return Pointer(Struct('tagFUNCDESC', null));};
T.VARKIND = function() {return Enum('VAR_DISPATCH', {
    VAR_PERINSTANCE: 0,
    VAR_STATIC: 1,
    VAR_CONST: 2,
    VAR_DISPATCH: 3
});};
T.VARDESC = function() {return Struct('tagVARDESC', {
    memid: T.MEMBERID,
    lpstrSchema: T.LPOLESTR,
    __unnamed0: Union('', {
        oInst: T.ULONG,
        lpvarValue: Pointer(T.VARIANT)
    }),
    elemdescVar: T.ELEMDESC,
    wVarFlags: T.WORD,
    varkind: T.VARKIND
});};
T.LPVARDESC = function() {return Pointer(Struct('tagVARDESC', null));};
T.TYPEFLAGS = function() {return Enum('TYPEFLAG_FPROXY', {
    TYPEFLAG_FAPPOBJECT: 1,
    TYPEFLAG_FCANCREATE: 2,
    TYPEFLAG_FLICENSED: 4,
    TYPEFLAG_FPREDECLID: 8,
    TYPEFLAG_FHIDDEN: 16,
    TYPEFLAG_FCONTROL: 32,
    TYPEFLAG_FDUAL: 64,
    TYPEFLAG_FNONEXTENSIBLE: 128,
    TYPEFLAG_FOLEAUTOMATION: 256,
    TYPEFLAG_FRESTRICTED: 512,
    TYPEFLAG_FAGGREGATABLE: 1024,
    TYPEFLAG_FREPLACEABLE: 2048,
    TYPEFLAG_FDISPATCHABLE: 4096,
    TYPEFLAG_FREVERSEBIND: 8192,
    TYPEFLAG_FPROXY: 16384
});};
T.FUNCFLAGS = function() {return Enum('FUNCFLAG_FIMMEDIATEBIND', {
    FUNCFLAG_FRESTRICTED: 1,
    FUNCFLAG_FSOURCE: 2,
    FUNCFLAG_FBINDABLE: 4,
    FUNCFLAG_FREQUESTEDIT: 8,
    FUNCFLAG_FDISPLAYBIND: 16,
    FUNCFLAG_FDEFAULTBIND: 32,
    FUNCFLAG_FHIDDEN: 64,
    FUNCFLAG_FUSESGETLASTERROR: 128,
    FUNCFLAG_FDEFAULTCOLLELEM: 256,
    FUNCFLAG_FUIDEFAULT: 512,
    FUNCFLAG_FNONBROWSABLE: 1024,
    FUNCFLAG_FREPLACEABLE: 2048,
    FUNCFLAG_FIMMEDIATEBIND: 4096
});};
T.VARFLAGS = function() {return Enum('VARFLAG_FIMMEDIATEBIND', {
    VARFLAG_FREADONLY: 1,
    VARFLAG_FSOURCE: 2,
    VARFLAG_FBINDABLE: 4,
    VARFLAG_FREQUESTEDIT: 8,
    VARFLAG_FDISPLAYBIND: 16,
    VARFLAG_FDEFAULTBIND: 32,
    VARFLAG_FHIDDEN: 64,
    VARFLAG_FRESTRICTED: 128,
    VARFLAG_FDEFAULTCOLLELEM: 256,
    VARFLAG_FUIDEFAULT: 512,
    VARFLAG_FNONBROWSABLE: 1024,
    VARFLAG_FREPLACEABLE: 2048,
    VARFLAG_FIMMEDIATEBIND: 4096
});};
T.CLEANLOCALSTORAGE = function() {return Struct('tagCLEANLOCALSTORAGE', {
    pInterface: Pointer(T.IUnknown),
    pStorage: T.PVOID,
    flags: T.DWORD
});};
T.CUSTDATAITEM = function() {return Struct('tagCUSTDATAITEM', {
    guid: T.GUID,
    varValue: T.VARIANTARG
});};
T.LPCUSTDATAITEM = function() {return Pointer(Struct('tagCUSTDATAITEM', null));};
T.CUSTDATA = function() {return Struct('tagCUSTDATA', {
    cCustData: T.DWORD,
    prgCustData: T.LPCUSTDATAITEM
});};
T.LPCUSTDATA = function() {return Pointer(Struct('tagCUSTDATA', null));};
T.LPDISPATCH = function() {return Pointer(T.IDispatch);};
T.IDispatchVtbl = function() {return Struct('IDispatchVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IDispatch), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IDispatch), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']]))
});};
T.LPENUMVARIANT = function() {return Pointer(T.IEnumVARIANT);};
T.IEnumVARIANTVtbl = function() {return Struct('IEnumVARIANTVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumVARIANT), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumVARIANT), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [T.ULONG, 'celt'], [Pointer(T.VARIANT), 'rgVar'], [Pointer(T.ULONG), 'pCeltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [Pointer(Pointer(T.IEnumVARIANT)), 'ppEnum']]))
});};
T.LPTYPECOMP = function() {return Pointer(T.ITypeComp);};
T.DESCKIND = function() {return Enum('DESCKIND_MAX', {
    DESCKIND_NONE: 0,
    DESCKIND_FUNCDESC: 1,
    DESCKIND_VARDESC: 2,
    DESCKIND_TYPECOMP: 3,
    DESCKIND_IMPLICITAPPOBJ: 4,
    DESCKIND_MAX: 5
});};
T.BINDPTR = function() {return Union('tagBINDPTR', {
    lpfuncdesc: Pointer(T.FUNCDESC),
    lpvardesc: Pointer(T.VARDESC),
    lptcomp: Pointer(T.ITypeComp)
});};
T.LPBINDPTR = function() {return Pointer(Union('tagBINDPTR', null));};
T.ITypeCompVtbl = function() {return Struct('ITypeCompVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeComp), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeComp), 'This']])),
    Bind: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [T.LPOLESTR, 'szName'], [T.ULONG, 'lHashVal'], [T.WORD, 'wFlags'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.DESCKIND), 'pDescKind'], [Pointer(T.BINDPTR), 'pBindPtr']])),
    BindType: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [T.LPOLESTR, 'szName'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(Pointer(T.ITypeComp)), 'ppTComp']]))
});};
T.LPTYPEINFO = function() {return Pointer(T.ITypeInfo);};
T.ITypeInfoVtbl = function() {return Struct('ITypeInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeInfo), 'This']])),
    GetTypeAttr: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(Pointer(T.TYPEATTR)), 'ppTypeAttr']])),
    GetTypeComp: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(Pointer(T.ITypeComp)), 'ppTComp']])),
    GetFuncDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.FUNCDESC)), 'ppFuncDesc']])),
    GetVarDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.VARDESC)), 'ppVarDesc']])),
    GetNames: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'rgBstrNames'], [T.UINT, 'cMaxNames'], [Pointer(T.UINT), 'pcNames']])),
    GetRefTypeOfImplType: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.HREFTYPE), 'pRefType']])),
    GetImplTypeFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.INT), 'pImplTypeFlags']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [Pointer(T.MEMBERID), 'pMemId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.PVOID, 'pvInstance'], [T.MEMBERID, 'memid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    GetDocumentation: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']])),
    GetDllEntry: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [Pointer(T.BSTR), 'pBstrDllName'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.WORD), 'pwOrdinal']])),
    GetRefTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.HREFTYPE, 'hRefType'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    AddressOfMember: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [Pointer(T.PVOID), 'ppv']])),
    CreateInstance: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(T.IID), 'riid'], [Pointer(T.PVOID), 'ppvObj']])),
    GetMops: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'pBstrMops']])),
    GetContainingTypeLib: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(Pointer(T.ITypeLib)), 'ppTLib'], [Pointer(T.UINT), 'pIndex']])),
    ReleaseTypeAttr: Pointer(Fn(null, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.TYPEATTR), 'pTypeAttr']])),
    ReleaseFuncDesc: Pointer(Fn(null, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.FUNCDESC), 'pFuncDesc']])),
    ReleaseVarDesc: Pointer(Fn(null, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.VARDESC), 'pVarDesc']]))
});};
T.LPTYPEINFO2 = function() {return Pointer(T.ITypeInfo2);};
T.ITypeInfo2Vtbl = function() {return Struct('ITypeInfo2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeInfo2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeInfo2), 'This']])),
    GetTypeAttr: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(Pointer(T.TYPEATTR)), 'ppTypeAttr']])),
    GetTypeComp: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(Pointer(T.ITypeComp)), 'ppTComp']])),
    GetFuncDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.FUNCDESC)), 'ppFuncDesc']])),
    GetVarDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.VARDESC)), 'ppVarDesc']])),
    GetNames: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'rgBstrNames'], [T.UINT, 'cMaxNames'], [Pointer(T.UINT), 'pcNames']])),
    GetRefTypeOfImplType: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.HREFTYPE), 'pRefType']])),
    GetImplTypeFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.INT), 'pImplTypeFlags']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [Pointer(T.MEMBERID), 'pMemId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.PVOID, 'pvInstance'], [T.MEMBERID, 'memid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    GetDocumentation: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']])),
    GetDllEntry: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [Pointer(T.BSTR), 'pBstrDllName'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.WORD), 'pwOrdinal']])),
    GetRefTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.HREFTYPE, 'hRefType'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    AddressOfMember: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [Pointer(T.PVOID), 'ppv']])),
    CreateInstance: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(T.IID), 'riid'], [Pointer(T.PVOID), 'ppvObj']])),
    GetMops: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'pBstrMops']])),
    GetContainingTypeLib: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(Pointer(T.ITypeLib)), 'ppTLib'], [Pointer(T.UINT), 'pIndex']])),
    ReleaseTypeAttr: Pointer(Fn(null, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.TYPEATTR), 'pTypeAttr']])),
    ReleaseFuncDesc: Pointer(Fn(null, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.FUNCDESC), 'pFuncDesc']])),
    ReleaseVarDesc: Pointer(Fn(null, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.VARDESC), 'pVarDesc']])),
    GetTypeKind: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.TYPEKIND), 'pTypeKind']])),
    GetTypeFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.ULONG), 'pTypeFlags']])),
    GetFuncIndexOfMemId: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [Pointer(T.UINT), 'pFuncIndex']])),
    GetVarIndexOfMemId: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.UINT), 'pVarIndex']])),
    GetCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    GetFuncCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    GetParamCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'indexFunc'], [T.UINT, 'indexParam'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    GetVarCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    GetImplTypeCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    GetDocumentation2: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.LCID, 'lcid'], [Pointer(T.BSTR), 'pbstrHelpString'], [Pointer(T.DWORD), 'pdwHelpStringContext'], [Pointer(T.BSTR), 'pbstrHelpStringDll']])),
    GetAllCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.CUSTDATA), 'pCustData']])),
    GetAllFuncCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.CUSTDATA), 'pCustData']])),
    GetAllParamCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'indexFunc'], [T.UINT, 'indexParam'], [Pointer(T.CUSTDATA), 'pCustData']])),
    GetAllVarCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.CUSTDATA), 'pCustData']])),
    GetAllImplTypeCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.CUSTDATA), 'pCustData']]))
});};
T.LPTYPELIB = function() {return Pointer(T.ITypeLib);};
T.SYSKIND = function() {return Enum('SYS_WIN64', {
    SYS_WIN16: 0,
    SYS_WIN32: 1,
    SYS_MAC: 2,
    SYS_WIN64: 3
});};
T.LIBFLAGS = function() {return Enum('LIBFLAG_FHASDISKIMAGE', {
    LIBFLAG_FRESTRICTED: 1,
    LIBFLAG_FCONTROL: 2,
    LIBFLAG_FHIDDEN: 4,
    LIBFLAG_FHASDISKIMAGE: 8
});};
T.TLIBATTR = function() {return Struct('tagTLIBATTR', {
    guid: T.GUID,
    lcid: T.LCID,
    syskind: T.SYSKIND,
    wMajorVerNum: T.WORD,
    wMinorVerNum: T.WORD,
    wLibFlags: T.WORD
});};
T.LPTLIBATTR = function() {return Pointer(Struct('tagTLIBATTR', null));};
T.ITypeLibVtbl = function() {return Struct('ITypeLibVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeLib), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeLib), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.UINT, [[Pointer(T.ITypeLib), 'This']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetTypeInfoType: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.UINT, 'index'], [Pointer(T.TYPEKIND), 'pTKind']])),
    GetTypeInfoOfGuid: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTinfo']])),
    GetLibAttr: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(Pointer(T.TLIBATTR)), 'ppTLibAttr']])),
    GetTypeComp: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(Pointer(T.ITypeComp)), 'ppTComp']])),
    GetDocumentation: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.INT, 'index'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']])),
    IsName: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(T.BOOL), 'pfName']])),
    FindName: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.MEMBERID), 'rgMemId'], [Pointer(T.USHORT), 'pcFound']])),
    ReleaseTLibAttr: Pointer(Fn(null, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.TLIBATTR), 'pTLibAttr']]))
});};
T.LPTYPELIB2 = function() {return Pointer(T.ITypeLib2);};
T.ITypeLib2Vtbl = function() {return Struct('ITypeLib2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeLib2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeLib2), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.UINT, [[Pointer(T.ITypeLib2), 'This']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetTypeInfoType: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.UINT, 'index'], [Pointer(T.TYPEKIND), 'pTKind']])),
    GetTypeInfoOfGuid: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTinfo']])),
    GetLibAttr: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(Pointer(T.TLIBATTR)), 'ppTLibAttr']])),
    GetTypeComp: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(Pointer(T.ITypeComp)), 'ppTComp']])),
    GetDocumentation: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.INT, 'index'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']])),
    IsName: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(T.BOOL), 'pfName']])),
    FindName: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.MEMBERID), 'rgMemId'], [Pointer(T.USHORT), 'pcFound']])),
    ReleaseTLibAttr: Pointer(Fn(null, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.TLIBATTR), 'pTLibAttr']])),
    GetCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    GetLibStatistics: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.ULONG), 'pcUniqueNames'], [Pointer(T.ULONG), 'pcchUniqueNames']])),
    GetDocumentation2: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.INT, 'index'], [T.LCID, 'lcid'], [Pointer(T.BSTR), 'pbstrHelpString'], [Pointer(T.DWORD), 'pdwHelpStringContext'], [Pointer(T.BSTR), 'pbstrHelpStringDll']])),
    GetAllCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.CUSTDATA), 'pCustData']]))
});};
T.LPTYPECHANGEEVENTS = function() {return Pointer(T.ITypeChangeEvents);};
T.CHANGEKIND = function() {return Enum('CHANGEKIND_MAX', {
    CHANGEKIND_ADDMEMBER: 0,
    CHANGEKIND_DELETEMEMBER: 1,
    CHANGEKIND_SETNAMES: 2,
    CHANGEKIND_SETDOCUMENTATION: 3,
    CHANGEKIND_GENERAL: 4,
    CHANGEKIND_INVALIDATE: 5,
    CHANGEKIND_CHANGEFAILED: 6,
    CHANGEKIND_MAX: 7
});};
T.ITypeChangeEventsVtbl = function() {return Struct('ITypeChangeEventsVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeChangeEvents), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeChangeEvents), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeChangeEvents), 'This']])),
    RequestTypeChange: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeChangeEvents), 'This'], [T.CHANGEKIND, 'changeKind'], [Pointer(T.ITypeInfo), 'pTInfoBefore'], [T.LPOLESTR, 'pStrName'], [Pointer(T.INT), 'pfCancel']])),
    AfterTypeChange: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeChangeEvents), 'This'], [T.CHANGEKIND, 'changeKind'], [Pointer(T.ITypeInfo), 'pTInfoAfter'], [T.LPOLESTR, 'pStrName']]))
});};
T.LPERRORINFO = function() {return Pointer(T.IErrorInfo);};
T.IErrorInfoVtbl = function() {return Struct('IErrorInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IErrorInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IErrorInfo), 'This']])),
    GetGUID: Pointer(Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.GUID), 'pGUID']])),
    GetSource: Pointer(Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.BSTR), 'pBstrSource']])),
    GetDescription: Pointer(Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.BSTR), 'pBstrDescription']])),
    GetHelpFile: Pointer(Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.BSTR), 'pBstrHelpFile']])),
    GetHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.DWORD), 'pdwHelpContext']]))
});};
T.LPCREATEERRORINFO = function() {return Pointer(T.ICreateErrorInfo);};
T.ICreateErrorInfoVtbl = function() {return Struct('ICreateErrorInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateErrorInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateErrorInfo), 'This']])),
    SetGUID: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [Pointer(T.GUID), 'rguid']])),
    SetSource: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [T.LPOLESTR, 'szSource']])),
    SetDescription: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [T.LPOLESTR, 'szDescription']])),
    SetHelpFile: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [T.LPOLESTR, 'szHelpFile']])),
    SetHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [T.DWORD, 'dwHelpContext']]))
});};
T.LPSUPPORTERRORINFO = function() {return Pointer(T.ISupportErrorInfo);};
T.ISupportErrorInfoVtbl = function() {return Struct('ISupportErrorInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISupportErrorInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISupportErrorInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISupportErrorInfo), 'This']])),
    InterfaceSupportsErrorInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ISupportErrorInfo), 'This'], [Pointer(T.IID), 'riid']]))
});};
T.ITypeFactoryVtbl = function() {return Struct('ITypeFactoryVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeFactory), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeFactory), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeFactory), 'This']])),
    CreateFromTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeFactory), 'This'], [Pointer(T.ITypeInfo), 'pTypeInfo'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppv']]))
});};
T.ITypeMarshalVtbl = function() {return Struct('ITypeMarshalVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeMarshal), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeMarshal), 'This']])),
    Size: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [T.PVOID, 'pvType'], [T.DWORD, 'dwDestContext'], [T.PVOID, 'pvDestContext'], [Pointer(T.ULONG), 'pSize']])),
    Marshal: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [T.PVOID, 'pvType'], [T.DWORD, 'dwDestContext'], [T.PVOID, 'pvDestContext'], [T.ULONG, 'cbBufferLength'], [Pointer(T.BYTE), 'pBuffer'], [Pointer(T.ULONG), 'pcbWritten']])),
    Unmarshal: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [T.PVOID, 'pvType'], [T.DWORD, 'dwFlags'], [T.ULONG, 'cbBufferLength'], [Pointer(T.BYTE), 'pBuffer'], [Pointer(T.ULONG), 'pcbRead']])),
    Free: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [T.PVOID, 'pvType']]))
});};
T.LPRECORDINFO = function() {return Pointer(T.IRecordInfo);};
T.IRecordInfoVtbl = function() {return Struct('IRecordInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRecordInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRecordInfo), 'This']])),
    RecordInit: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvNew']])),
    RecordClear: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvExisting']])),
    RecordCopy: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvExisting'], [T.PVOID, 'pvNew']])),
    GetGuid: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.GUID), 'pguid']])),
    GetName: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.BSTR), 'pbstrName']])),
    GetSize: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.ULONG), 'pcbSize']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(Pointer(T.ITypeInfo)), 'ppTypeInfo']])),
    GetField: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvData'], [T.LPCOLESTR, 'szFieldName'], [Pointer(T.VARIANT), 'pvarField']])),
    GetFieldNoCopy: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvData'], [T.LPCOLESTR, 'szFieldName'], [Pointer(T.VARIANT), 'pvarField'], [Pointer(T.PVOID), 'ppvDataCArray']])),
    PutField: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.ULONG, 'wFlags'], [T.PVOID, 'pvData'], [T.LPCOLESTR, 'szFieldName'], [Pointer(T.VARIANT), 'pvarField']])),
    PutFieldNoCopy: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.ULONG, 'wFlags'], [T.PVOID, 'pvData'], [T.LPCOLESTR, 'szFieldName'], [Pointer(T.VARIANT), 'pvarField']])),
    GetFieldNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.ULONG), 'pcNames'], [Pointer(T.BSTR), 'rgBstrNames']])),
    IsMatchingType: Pointer(Fn(T.BOOL, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.IRecordInfo), 'pRecordInfo']])),
    RecordCreate: Pointer(Fn(T.PVOID, [[Pointer(T.IRecordInfo), 'This']])),
    RecordCreateCopy: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvSource'], [Pointer(T.PVOID), 'ppvDest']])),
    RecordDestroy: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvRecord']]))
});};
T.LPCREATETYPEINFO = function() {return Pointer(T.ICreateTypeInfo);};
T.ICreateTypeInfoVtbl = function() {return Struct('ICreateTypeInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateTypeInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateTypeInfo), 'This']])),
    SetGuid: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.GUID), 'guid']])),
    SetTypeFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'uTypeFlags']])),
    SetDocString: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.LPOLESTR, 'pStrDoc']])),
    SetHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.DWORD, 'dwHelpContext']])),
    SetVersion: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.WORD, 'wMajorVerNum'], [T.WORD, 'wMinorVerNum']])),
    AddRefTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.ITypeInfo), 'pTInfo'], [Pointer(T.HREFTYPE), 'phRefType']])),
    AddFuncDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.FUNCDESC), 'pFuncDesc']])),
    AddImplType: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.HREFTYPE, 'hRefType']])),
    SetImplTypeFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.INT, 'implTypeFlags']])),
    SetAlignment: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.WORD, 'cbAlignment']])),
    SetSchema: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.LPOLESTR, 'pStrSchema']])),
    AddVarDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.VARDESC), 'pVarDesc']])),
    SetFuncAndParamNames: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames']])),
    SetVarName: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szName']])),
    SetTypeDescAlias: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.TYPEDESC), 'pTDescAlias']])),
    DefineFuncAsDllEntry: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDllName'], [T.LPOLESTR, 'szProcName']])),
    SetFuncDocString: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDocString']])),
    SetVarDocString: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDocString']])),
    SetFuncHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.DWORD, 'dwHelpContext']])),
    SetVarHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.DWORD, 'dwHelpContext']])),
    SetMops: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.BSTR, 'bstrMops']])),
    SetTypeIdldesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.IDLDESC), 'pIdlDesc']])),
    LayOut: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This']]))
});};
T.LPCREATETYPEINFO2 = function() {return Pointer(T.ICreateTypeInfo2);};
T.ICreateTypeInfo2Vtbl = function() {return Struct('ICreateTypeInfo2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateTypeInfo2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateTypeInfo2), 'This']])),
    SetGuid: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [Pointer(T.GUID), 'guid']])),
    SetTypeFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'uTypeFlags']])),
    SetDocString: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.LPOLESTR, 'pStrDoc']])),
    SetHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.DWORD, 'dwHelpContext']])),
    SetVersion: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.WORD, 'wMajorVerNum'], [T.WORD, 'wMinorVerNum']])),
    AddRefTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [Pointer(T.ITypeInfo), 'pTInfo'], [Pointer(T.HREFTYPE), 'phRefType']])),
    AddFuncDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.FUNCDESC), 'pFuncDesc']])),
    AddImplType: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.HREFTYPE, 'hRefType']])),
    SetImplTypeFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.INT, 'implTypeFlags']])),
    SetAlignment: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.WORD, 'cbAlignment']])),
    SetSchema: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.LPOLESTR, 'pStrSchema']])),
    AddVarDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.VARDESC), 'pVarDesc']])),
    SetFuncAndParamNames: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames']])),
    SetVarName: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szName']])),
    SetTypeDescAlias: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [Pointer(T.TYPEDESC), 'pTDescAlias']])),
    DefineFuncAsDllEntry: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDllName'], [T.LPOLESTR, 'szProcName']])),
    SetFuncDocString: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDocString']])),
    SetVarDocString: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDocString']])),
    SetFuncHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.DWORD, 'dwHelpContext']])),
    SetVarHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.DWORD, 'dwHelpContext']])),
    SetMops: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.BSTR, 'bstrMops']])),
    SetTypeIdldesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [Pointer(T.IDLDESC), 'pIdlDesc']])),
    LayOut: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This']])),
    DeleteFuncDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index']])),
    DeleteFuncDescByMemId: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind']])),
    DeleteVarDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index']])),
    DeleteVarDescByMemId: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.MEMBERID, 'memid']])),
    DeleteImplType: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index']])),
    SetCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    SetFuncCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    SetParamCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'indexFunc'], [T.UINT, 'indexParam'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    SetVarCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    SetImplTypeCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    SetHelpStringContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.ULONG, 'dwHelpStringContext']])),
    SetFuncHelpStringContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.ULONG, 'dwHelpStringContext']])),
    SetVarHelpStringContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.ULONG, 'dwHelpStringContext']])),
    Invalidate: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This']])),
    SetName: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.LPOLESTR, 'szName']]))
});};
T.LPCREATETYPELIB = function() {return Pointer(T.ICreateTypeLib);};
T.ICreateTypeLibVtbl = function() {return Struct('ICreateTypeLibVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateTypeLib), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateTypeLib), 'This']])),
    CreateTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LPOLESTR, 'szName'], [T.TYPEKIND, 'tkind'], [Pointer(Pointer(T.ICreateTypeInfo)), 'ppCTInfo']])),
    SetName: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LPOLESTR, 'szName']])),
    SetVersion: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.WORD, 'wMajorVerNum'], [T.WORD, 'wMinorVerNum']])),
    SetGuid: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [Pointer(T.GUID), 'guid']])),
    SetDocString: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LPOLESTR, 'szDoc']])),
    SetHelpFileName: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LPOLESTR, 'szHelpFileName']])),
    SetHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.DWORD, 'dwHelpContext']])),
    SetLcid: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LCID, 'lcid']])),
    SetLibFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.UINT, 'uLibFlags']])),
    SaveAllChanges: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This']]))
});};
T.LPCREATETYPELIB2 = function() {return Pointer(T.ICreateTypeLib2);};
T.ICreateTypeLib2Vtbl = function() {return Struct('ICreateTypeLib2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateTypeLib2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateTypeLib2), 'This']])),
    CreateTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LPOLESTR, 'szName'], [T.TYPEKIND, 'tkind'], [Pointer(Pointer(T.ICreateTypeInfo)), 'ppCTInfo']])),
    SetName: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LPOLESTR, 'szName']])),
    SetVersion: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.WORD, 'wMajorVerNum'], [T.WORD, 'wMinorVerNum']])),
    SetGuid: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [Pointer(T.GUID), 'guid']])),
    SetDocString: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LPOLESTR, 'szDoc']])),
    SetHelpFileName: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LPOLESTR, 'szHelpFileName']])),
    SetHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.DWORD, 'dwHelpContext']])),
    SetLcid: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LCID, 'lcid']])),
    SetLibFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.UINT, 'uLibFlags']])),
    SaveAllChanges: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This']])),
    DeleteTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LPOLESTR, 'szName']])),
    SetCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    SetHelpStringContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.ULONG, 'dwHelpStringContext']])),
    SetHelpStringDll: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LPOLESTR, 'szFileName']]))
});};
T.LPERRORLOG = function() {return Pointer(T.IErrorLog);};
T.IErrorLogVtbl = function() {return Struct('IErrorLogVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IErrorLog), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IErrorLog), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IErrorLog), 'This']])),
    AddError: Pointer(Fn(T.HRESULT, [[Pointer(T.IErrorLog), 'This'], [T.LPCOLESTR, 'pszPropName'], [Pointer(T.EXCEPINFO), 'pExcepInfo']]))
});};
T.LPPROPERTYBAG = function() {return Pointer(T.IPropertyBag);};
T.IPropertyBagVtbl = function() {return Struct('IPropertyBagVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyBag), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPropertyBag), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPropertyBag), 'This']])),
    Read: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyBag), 'This'], [T.LPCOLESTR, 'pszPropName'], [Pointer(T.VARIANT), 'pVar'], [Pointer(T.IErrorLog), 'pErrorLog']])),
    Write: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyBag), 'This'], [T.LPCOLESTR, 'pszPropName'], [Pointer(T.VARIANT), 'pVar']]))
});};
T.DOMNodeType = function() {return Enum('NODE_NOTATION', {
    NODE_INVALID: 0,
    NODE_ELEMENT: 1,
    NODE_ATTRIBUTE: 2,
    NODE_TEXT: 3,
    NODE_CDATA_SECTION: 4,
    NODE_ENTITY_REFERENCE: 5,
    NODE_ENTITY: 6,
    NODE_PROCESSING_INSTRUCTION: 7,
    NODE_COMMENT: 8,
    NODE_DOCUMENT: 9,
    NODE_DOCUMENT_TYPE: 10,
    NODE_DOCUMENT_FRAGMENT: 11,
    NODE_NOTATION: 12
});};
T.IXMLDOMNodeVtbl = function() {return Struct('IXMLDOMNodeVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMNode), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMNode), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']]))
});};
T.IXMLDOMDocumentVtbl = function() {return Struct('IXMLDOMDocumentVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMDocument), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMDocument), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_doctype: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMDocumentType)), 'documentType']])),
    get_implementation: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMImplementation)), 'impl']])),
    get_documentElement: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMElement)), 'DOMElement']])),
    putref_documentElement: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IXMLDOMElement), 'DOMElement']])),
    createElement: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'tagname'], [Pointer(Pointer(T.IXMLDOMElement)), 'element']])),
    createDocumentFragment: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMDocumentFragment)), 'docFrag']])),
    createTextNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'data'], [Pointer(Pointer(T.IXMLDOMText)), 'text']])),
    createComment: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'data'], [Pointer(Pointer(T.IXMLDOMComment)), 'comment']])),
    createCDATASection: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'data'], [Pointer(Pointer(T.IXMLDOMCDATASection)), 'cdata']])),
    createProcessingInstruction: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'target'], [T.BSTR, 'data'], [Pointer(Pointer(T.IXMLDOMProcessingInstruction)), 'pi']])),
    createAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMAttribute)), 'attribute']])),
    createEntityReference: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMEntityReference)), 'entityRef']])),
    getElementsByTagName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'tagName'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    createNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'Type'], [T.BSTR, 'name'], [T.BSTR, 'namespaceURI'], [Pointer(Pointer(T.IXMLDOMNode)), 'node']])),
    nodeFromID: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'idString'], [Pointer(Pointer(T.IXMLDOMNode)), 'node']])),
    load: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'xmlSource'], [Pointer(T.VARIANT_BOOL), 'isSuccessful']])),
    get_readyState: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.LONG), 'value']])),
    get_parseError: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMParseError)), 'errorObj']])),
    get_url: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'urlString']])),
    get_async: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isAsync']])),
    put_async: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'isAsync']])),
    abort: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This']])),
    loadXML: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'bstrXML'], [Pointer(T.VARIANT_BOOL), 'isSuccessful']])),
    save: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'destination']])),
    get_validateOnParse: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isValidating']])),
    put_validateOnParse: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'isValidating']])),
    get_resolveExternals: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isResolving']])),
    put_resolveExternals: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'isValidating']])),
    get_preserveWhiteSpace: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isPreserving']])),
    put_preserveWhiteSpace: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'isPreserving']])),
    put_onreadystatechange: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'readystatechangeSink']])),
    put_ondataavailable: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'ondataavailableSink']])),
    put_ontransformnode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'ontransformnodeSink']]))
});};
T.IXMLDOMNodeListVtbl = function() {return Struct('IXMLDOMNodeListVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMNodeList), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMNodeList), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_item: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [T.LONG, 'index'], [Pointer(Pointer(T.IXMLDOMNode)), 'listItem']])),
    get_length: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(T.LONG), 'listLength']])),
    nextNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextItem']])),
    reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This']])),
    _newEnum: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(Pointer(T.IUnknown)), 'ppUnk']]))
});};
T.IXMLDOMNamedNodeMapVtbl = function() {return Struct('IXMLDOMNamedNodeMapVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMNamedNodeMap), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMNamedNodeMap), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    getNamedItem: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMNode)), 'namedItem']])),
    setNamedItem: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(T.IXMLDOMNode), 'newItem'], [Pointer(Pointer(T.IXMLDOMNode)), 'namedItem']])),
    removeNamedItem: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMNode)), 'namedItem']])),
    get_item: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.LONG, 'index'], [Pointer(Pointer(T.IXMLDOMNode)), 'listItem']])),
    get_length: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(T.LONG), 'listLength']])),
    getQualifiedItem: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.BSTR, 'baseName'], [T.BSTR, 'namespaceURI'], [Pointer(Pointer(T.IXMLDOMNode)), 'qualifiedItem']])),
    removeQualifiedItem: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.BSTR, 'baseName'], [T.BSTR, 'namespaceURI'], [Pointer(Pointer(T.IXMLDOMNode)), 'qualifiedItem']])),
    nextNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextItem']])),
    reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This']])),
    _newEnum: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(Pointer(T.IUnknown)), 'ppUnk']]))
});};
T.IXMLDOMDocumentFragmentVtbl = function() {return Struct('IXMLDOMDocumentFragmentVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMDocumentFragment), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMDocumentFragment), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']]))
});};
T.IXMLDOMCharacterDataVtbl = function() {return Struct('IXMLDOMCharacterDataVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMCharacterData), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMCharacterData), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'data']])),
    put_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.BSTR, 'data']])),
    get_length: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.LONG), 'dataLength']])),
    substringData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [Pointer(T.BSTR), 'data']])),
    appendData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.BSTR, 'data']])),
    insertData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.LONG, 'offset'], [T.BSTR, 'data']])),
    deleteData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.LONG, 'offset'], [T.LONG, 'count']])),
    replaceData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [T.BSTR, 'data']]))
});};
T.IXMLDOMAttributeVtbl = function() {return Struct('IXMLDOMAttributeVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMAttribute), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMAttribute), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_name: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'attributeName']])),
    get_value: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.VARIANT), 'attributeValue']])),
    put_value: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.VARIANT, 'attributeValue']]))
});};
T.IXMLDOMElementVtbl = function() {return Struct('IXMLDOMElementVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMElement), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMElement), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_tagName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'tagName']])),
    getAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'name'], [Pointer(T.VARIANT), 'value']])),
    setAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'name'], [T.VARIANT, 'value']])),
    removeAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'name']])),
    getAttributeNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMAttribute)), 'attributeNode']])),
    setAttributeNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMAttribute), 'DOMAttribute'], [Pointer(Pointer(T.IXMLDOMAttribute)), 'attributeNode']])),
    removeAttributeNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMAttribute), 'DOMAttribute'], [Pointer(Pointer(T.IXMLDOMAttribute)), 'attributeNode']])),
    getElementsByTagName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'tagName'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    normalize: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This']]))
});};
T.IXMLDOMTextVtbl = function() {return Struct('IXMLDOMTextVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMText), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMText), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.BSTR), 'data']])),
    put_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.BSTR, 'data']])),
    get_length: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.LONG), 'dataLength']])),
    substringData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [Pointer(T.BSTR), 'data']])),
    appendData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.BSTR, 'data']])),
    insertData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.LONG, 'offset'], [T.BSTR, 'data']])),
    deleteData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.LONG, 'offset'], [T.LONG, 'count']])),
    replaceData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [T.BSTR, 'data']])),
    splitText: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.LONG, 'offset'], [Pointer(Pointer(T.IXMLDOMText)), 'rightHandTextNode']]))
});};
T.IXMLDOMCommentVtbl = function() {return Struct('IXMLDOMCommentVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMComment), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMComment), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.BSTR), 'data']])),
    put_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.BSTR, 'data']])),
    get_length: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.LONG), 'dataLength']])),
    substringData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [Pointer(T.BSTR), 'data']])),
    appendData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.BSTR, 'data']])),
    insertData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.LONG, 'offset'], [T.BSTR, 'data']])),
    deleteData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.LONG, 'offset'], [T.LONG, 'count']])),
    replaceData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [T.BSTR, 'data']]))
});};
T.IXMLDOMProcessingInstructionVtbl = function() {return Struct('IXMLDOMProcessingInstructionVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMProcessingInstruction), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMProcessingInstruction), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_target: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'name']])),
    get_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'value']])),
    put_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.BSTR, 'value']]))
});};
T.IXMLDOMCDATASectionVtbl = function() {return Struct('IXMLDOMCDATASectionVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMCDATASection), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMCDATASection), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.BSTR), 'data']])),
    put_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.BSTR, 'data']])),
    get_length: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.LONG), 'dataLength']])),
    substringData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [Pointer(T.BSTR), 'data']])),
    appendData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.BSTR, 'data']])),
    insertData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.LONG, 'offset'], [T.BSTR, 'data']])),
    deleteData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.LONG, 'offset'], [T.LONG, 'count']])),
    replaceData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [T.BSTR, 'data']])),
    splitText: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.LONG, 'offset'], [Pointer(Pointer(T.IXMLDOMText)), 'rightHandTextNode']]))
});};
T.IXMLDOMDocumentTypeVtbl = function() {return Struct('IXMLDOMDocumentTypeVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMDocumentType), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMDocumentType), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_name: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'rootName']])),
    get_entities: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'entityMap']])),
    get_notations: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'notationMap']]))
});};
T.IXMLDOMNotationVtbl = function() {return Struct('IXMLDOMNotationVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMNotation), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMNotation), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_publicId: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT), 'publicId']])),
    get_systemId: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT), 'systemId']]))
});};
T.IXMLDOMEntityVtbl = function() {return Struct('IXMLDOMEntityVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMEntity), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMEntity), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_publicId: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT), 'publicId']])),
    get_systemId: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT), 'systemId']])),
    get_notationName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'name']]))
});};
T.IXMLDOMEntityReferenceVtbl = function() {return Struct('IXMLDOMEntityReferenceVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMEntityReference), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMEntityReference), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']]))
});};
T.IXMLDOMImplementationVtbl = function() {return Struct('IXMLDOMImplementationVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMImplementation), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMImplementation), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMImplementation), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMImplementation), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMImplementation), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMImplementation), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMImplementation), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    hasFeature: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMImplementation), 'This'], [T.BSTR, 'feature'], [T.BSTR, 'version'], [Pointer(T.VARIANT_BOOL), 'pbool']]))
});};
T.IXMLDOMParseErrorVtbl = function() {return Struct('IXMLDOMParseErrorVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMParseError), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMParseError), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_errorCode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.LONG), 'errCode']])),
    get_url: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.BSTR), 'p']])),
    get_reason: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.BSTR), 'p']])),
    get_srcText: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.BSTR), 'p']])),
    get_line: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.LONG), 'lineNo']])),
    get_linepos: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.LONG), 'linePos']])),
    get_filepos: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.LONG), 'filePos']]))
});};
T.XMLDOMDocumentEventsVtbl = function() {return Struct('XMLDOMDocumentEventsVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.XMLDOMDocumentEvents), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.XMLDOMDocumentEvents), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.XMLDOMDocumentEvents), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.XMLDOMDocumentEvents), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.XMLDOMDocumentEvents), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.XMLDOMDocumentEvents), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.XMLDOMDocumentEvents), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']]))
});};
T.IXMLHttpRequestVtbl = function() {return Struct('IXMLHttpRequestVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLHttpRequest), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLHttpRequest), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    open: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.BSTR, 'bstrMethod'], [T.BSTR, 'bstrUrl'], [T.VARIANT, 'varAsync'], [T.VARIANT, 'varUser'], [T.VARIANT, 'varPassword']])),
    setRequestHeader: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.BSTR, 'bstrHeader'], [T.BSTR, 'bstrValue']])),
    getResponseHeader: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.BSTR, 'bstrHeader'], [Pointer(T.BSTR), 'pbstrValue']])),
    getAllResponseHeaders: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.BSTR), 'pbstrHeaders']])),
    send: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.VARIANT, 'varBody']])),
    abort: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This']])),
    get_status: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.LONG), 'plStatus']])),
    get_statusText: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.BSTR), 'bstrStatus']])),
    get_responseXML: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(Pointer(T.IDispatch)), 'ppBody']])),
    get_responseText: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.BSTR), 'pbstrBody']])),
    get_responseBody: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.VARIANT), 'pvarBody']])),
    get_responseStream: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.VARIANT), 'pvarBody']])),
    get_readyState: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.LONG), 'plState']])),
    put_onreadystatechange: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.IDispatch), 'pReadyStateSink']]))
});};
T.IXMLDSOControlVtbl = function() {return Struct('IXMLDSOControlVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDSOControl), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDSOControl), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_XMLDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'ppDoc']])),
    put_XMLDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.IXMLDOMDocument), 'ppDoc']])),
    get_JavaDSOCompatible: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.BOOL), 'fJavaDSOCompatible']])),
    put_JavaDSOCompatible: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [T.BOOL, 'fJavaDSOCompatible']])),
    get_readyState: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.LONG), 'state']]))
});};
T.IXMLElementCollectionVtbl = function() {return Struct('IXMLElementCollectionVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLElementCollection), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLElementCollection), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    put_length: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [T.LONG, 'v']])),
    get_length: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [Pointer(T.LONG), 'p']])),
    get__newEnum: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [Pointer(Pointer(T.IUnknown)), 'ppUnk']])),
    item: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [T.VARIANT, 'var1'], [T.VARIANT, 'var2'], [Pointer(Pointer(T.IDispatch)), 'ppDisp']]))
});};
T.IXMLElementVtbl = function() {return Struct('IXMLElementVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLElement), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLElement), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_tagName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.BSTR), 'p']])),
    put_tagName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'p']])),
    get_parent: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(Pointer(T.IXMLElement)), 'parent']])),
    setAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'strPropertyName'], [T.VARIANT, 'PropertyValue']])),
    getAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'strPropertyName'], [Pointer(T.VARIANT), 'PropertyValue']])),
    removeAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'strPropertyName']])),
    get_children: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(Pointer(T.IXMLElementCollection)), 'p']])),
    get_type: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.LONG), 'p']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.BSTR), 'p']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'p']])),
    addChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.IXMLElement), 'pChildElem'], [T.LONG, 'lIndex'], [T.LONG, 'lreserved']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.IXMLElement), 'pChildElem']]))
});};
T.IXMLDocumentVtbl = function() {return Struct('IXMLDocumentVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDocument), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDocument), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_root: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(Pointer(T.IXMLElement)), 'p']])),
    get_fileSize: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    get_fileModifiedDate: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    get_fileUpdatedDate: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    get_URL: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    put_URL: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [T.BSTR, 'p']])),
    get_mimeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    get_readyState: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.LONG), 'p']])),
    get_charset: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    put_charset: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [T.BSTR, 'p']])),
    get_version: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    get_doctype: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    get_dtdURl: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    createElement: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [T.VARIANT, 'vType'], [T.VARIANT, 'var1'], [Pointer(Pointer(T.IXMLElement)), 'ppElem']]))
});};
T.IXMLElement2Vtbl = function() {return Struct('IXMLElement2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLElement2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLElement2), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_tagName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.BSTR), 'p']])),
    put_tagName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'p']])),
    get_parent: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(Pointer(T.IXMLElement2)), 'ppParent']])),
    setAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'strPropertyName'], [T.VARIANT, 'PropertyValue']])),
    getAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'strPropertyName'], [Pointer(T.VARIANT), 'PropertyValue']])),
    removeAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'strPropertyName']])),
    get_children: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(Pointer(T.IXMLElementCollection)), 'pp']])),
    get_type: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.LONG), 'plType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.BSTR), 'p']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'p']])),
    addChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.IXMLElement2), 'pChildElem'], [T.LONG, 'lIndex'], [T.LONG, 'lReserved']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.IXMLElement2), 'pChildElem']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(Pointer(T.IXMLElementCollection)), 'pp']]))
});};
T.IXMLDocument2Vtbl = function() {return Struct('IXMLDocument2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDocument2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDocument2), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_root: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(Pointer(T.IXMLElement2)), 'p']])),
    get_fileSize: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    get_fileModifiedDate: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    get_fileUpdatedDate: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    get_URL: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    put_URL: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.BSTR, 'p']])),
    get_mimeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    get_readyState: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.LONG), 'pl']])),
    get_charset: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    put_charset: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.BSTR, 'p']])),
    get_version: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    get_doctype: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    get_dtdURL: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    createElement: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.VARIANT, 'vType'], [T.VARIANT, 'var'], [Pointer(Pointer(T.IXMLElement2)), 'ppElem']])),
    get_async: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.VARIANT_BOOL), 'pf']])),
    put_async: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.VARIANT_BOOL, 'f']]))
});};
T.XMLELEM_TYPE = function() {return Enum('XMLELEMTYPE_OTHER', {
    XMLELEMTYPE_ELEMENT: 0,
    XMLELEMTYPE_TEXT: 1,
    XMLELEMTYPE_COMMENT: 2,
    XMLELEMTYPE_DOCUMENT: 3,
    XMLELEMTYPE_DTD: 4,
    XMLELEMTYPE_PI: 5,
    XMLELEMTYPE_OTHER: 6
});};
T.XML_ERROR = function() {return Struct('_xml_error', {
    _nLine: T.UINT,
    _pchBuf: T.BSTR,
    _cchBuf: T.BSTR,
    _ich: T.UINT,
    _pszFound: T.BSTR,
    _pszExpected: T.BSTR,
    _reserved1: T.DWORD,
    _reserved2: T.DWORD
});};
T.IXMLAttributeVtbl = function() {return Struct('IXMLAttributeVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLAttribute), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLAttribute), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_name: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [Pointer(T.BSTR), 'p']])),
    get_value: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [Pointer(T.BSTR), 'p']]))
});};
T.IXMLErrorVtbl = function() {return Struct('IXMLErrorVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLError), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLError), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLError), 'This']])),
    GetErrorInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLError), 'This'], [Pointer(T.XML_ERROR), 'pErrorReturn']]))
});};
T.IXMLElementNotificationSinkVtbl = function() {return Struct('IXMLElementNotificationSinkVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementNotificationSink), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLElementNotificationSink), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLElementNotificationSink), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementNotificationSink), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementNotificationSink), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementNotificationSink), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementNotificationSink), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    ChildAdded: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementNotificationSink), 'This'], [Pointer(T.IDispatch), 'pChildElem']]))
});};
T.LPIINTERNET = function() {return Pointer(T.IInternet);};
T.IInternetVtbl = function() {return Struct('IInternetVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternet), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternet), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternet), 'This']]))
});};
T.LPBINDING = function() {return Pointer(T.IBinding);};
T.IBindingVtbl = function() {return Struct('IBindingVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IBinding), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IBinding), 'This']])),
    Abort: Pointer(Fn(T.HRESULT, [[Pointer(T.IBinding), 'This']])),
    Suspend: Pointer(Fn(T.HRESULT, [[Pointer(T.IBinding), 'This']])),
    Resume: Pointer(Fn(T.HRESULT, [[Pointer(T.IBinding), 'This']])),
    SetPriority: Pointer(Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [T.LONG, 'nPriority']])),
    GetPriority: Pointer(Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [Pointer(T.LONG), 'pnPriority']])),
    GetBindResult: Pointer(Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [Pointer(T.CLSID), 'pclsidProtocol'], [Pointer(T.DWORD), 'pdwResult'], [Pointer(T.LPOLESTR), 'pszResult'], [Pointer(T.DWORD), 'pdwReserved']]))
});};
T.LPBINDSTATUSCALLBACK = function() {return Pointer(T.IBindStatusCallback);};
T.BINDVERB = function() {return Enum('BINDVERB_CUSTOM', {
    BINDVERB_GET: 0,
    BINDVERB_POST: 1,
    BINDVERB_PUT: 2,
    BINDVERB_CUSTOM: 3
});};
T.BINDINFOF = function() {return Enum('BINDINFOF_URLENCODEDEXTRAINFO', {
    BINDINFOF_URLENCODESTGMEDDATA: 1,
    BINDINFOF_URLENCODEDEXTRAINFO: 2
});};
T.BINDF = function() {return Enum('BINDF_ENFORCERESTRICTED', {
    BINDF_ASYNCHRONOUS: 1,
    BINDF_ASYNCSTORAGE: 2,
    BINDF_NOPROGRESSIVERENDERING: 4,
    BINDF_OFFLINEOPERATION: 8,
    BINDF_GETNEWESTVERSION: 16,
    BINDF_NOWRITECACHE: 32,
    BINDF_NEEDFILE: 64,
    BINDF_PULLDATA: 128,
    BINDF_IGNORESECURITYPROBLEM: 256,
    BINDF_RESYNCHRONIZE: 512,
    BINDF_HYPERLINK: 1024,
    BINDF_NO_UI: 2048,
    BINDF_SILENTOPERATION: 4096,
    BINDF_PRAGMA_NO_CACHE: 8192,
    BINDF_GETCLASSOBJECT: 16384,
    BINDF_RESERVED_1: 32768,
    BINDF_FREE_THREADED: 65536,
    BINDF_DIRECT_READ: 131072,
    BINDF_FORMS_SUBMIT: 262144,
    BINDF_GETFROMCACHE_IF_NET_FAIL: 524288,
    BINDF_FROMURLMON: 1048576,
    BINDF_FWD_BACK: 2097152,
    BINDF_PREFERDEFAULTHANDLER: 4194304,
    BINDF_ENFORCERESTRICTED: 8388608
});};
T.URL_ENCODING = function() {return Enum('URL_ENCODING_DISABLE_UTF8', {
    URL_ENCODING_NONE: 0,
    URL_ENCODING_ENABLE_UTF8: 268435456,
    URL_ENCODING_DISABLE_UTF8: 536870912
});};
T.BINDINFO = function() {return Struct('_tagBINDINFO', {
    cbSize: T.ULONG,
    szExtraInfo: T.LPWSTR,
    stgmedData: T.STGMEDIUM,
    grfBindInfoF: T.DWORD,
    dwBindVerb: T.DWORD,
    szCustomVerb: T.LPWSTR,
    cbstgmedData: T.DWORD,
    dwOptions: T.DWORD,
    dwOptionsFlags: T.DWORD,
    dwCodePage: T.DWORD,
    securityAttributes: T.SECURITY_ATTRIBUTES,
    iid: T.IID,
    pUnk: Pointer(T.IUnknown),
    dwReserved: T.DWORD
});};
T.REMSECURITY_ATTRIBUTES = function() {return Struct('_REMSECURITY_ATTRIBUTES', {
    nLength: T.DWORD,
    lpSecurityDescriptor: T.DWORD,
    bInheritHandle: T.BOOL
});};
T.PREMSECURITY_ATTRIBUTES = function() {return Pointer(Struct('_REMSECURITY_ATTRIBUTES', null));};
T.LPREMSECURITY_ATTRIBUTES = function() {return Pointer(Struct('_REMSECURITY_ATTRIBUTES', null));};
T.RemBINDINFO = function() {return Struct('_tagRemBINDINFO', {
    cbSize: T.ULONG,
    szExtraInfo: T.LPWSTR,
    grfBindInfoF: T.DWORD,
    dwBindVerb: T.DWORD,
    szCustomVerb: T.LPWSTR,
    cbstgmedData: T.DWORD,
    dwOptions: T.DWORD,
    dwOptionsFlags: T.DWORD,
    dwCodePage: T.DWORD,
    securityAttributes: T.REMSECURITY_ATTRIBUTES,
    iid: T.IID,
    pUnk: Pointer(T.IUnknown),
    dwReserved: T.DWORD
});};
T.RemFORMATETC = function() {return Struct('tagRemFORMATETC', {
    cfFormat: T.DWORD,
    ptd: T.DWORD,
    dwAspect: T.DWORD,
    lindex: T.LONG,
    tymed: T.DWORD
});};
T.LPREMFORMATETC = function() {return Pointer(Struct('tagRemFORMATETC', null));};
T.BSCF = function() {return Enum('BSCF_64BITLENGTHDOWNLOAD', {
    BSCF_FIRSTDATANOTIFICATION: 1,
    BSCF_INTERMEDIATEDATANOTIFICATION: 2,
    BSCF_LASTDATANOTIFICATION: 4,
    BSCF_DATAFULLYAVAILABLE: 8,
    BSCF_AVAILABLEDATASIZEUNKNOWN: 16,
    BSCF_SKIPDRAINDATAFORFILEURLS: 32,
    BSCF_64BITLENGTHDOWNLOAD: 64
});};
T.BINDSTATUS = function() {return Enum('BINDSTATUS_DISPLAYNAMEAVAILABLE', {
    BINDSTATUS_FINDINGRESOURCE: 1,
    BINDSTATUS_CONNECTING: 2,
    BINDSTATUS_REDIRECTING: 3,
    BINDSTATUS_BEGINDOWNLOADDATA: 4,
    BINDSTATUS_DOWNLOADINGDATA: 5,
    BINDSTATUS_ENDDOWNLOADDATA: 6,
    BINDSTATUS_BEGINDOWNLOADCOMPONENTS: 7,
    BINDSTATUS_INSTALLINGCOMPONENTS: 8,
    BINDSTATUS_ENDDOWNLOADCOMPONENTS: 9,
    BINDSTATUS_USINGCACHEDCOPY: 10,
    BINDSTATUS_SENDINGREQUEST: 11,
    BINDSTATUS_CLASSIDAVAILABLE: 12,
    BINDSTATUS_MIMETYPEAVAILABLE: 13,
    BINDSTATUS_CACHEFILENAMEAVAILABLE: 14,
    BINDSTATUS_BEGINSYNCOPERATION: 15,
    BINDSTATUS_ENDSYNCOPERATION: 16,
    BINDSTATUS_BEGINUPLOADDATA: 17,
    BINDSTATUS_UPLOADINGDATA: 18,
    BINDSTATUS_ENDUPLOADINGDATA: 19,
    BINDSTATUS_PROTOCOLCLASSID: 20,
    BINDSTATUS_ENCODING: 21,
    BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE: 22,
    BINDSTATUS_CLASSINSTALLLOCATION: 23,
    BINDSTATUS_DECODING: 24,
    BINDSTATUS_LOADINGMIMEHANDLER: 25,
    BINDSTATUS_CONTENTDISPOSITIONATTACH: 26,
    BINDSTATUS_FILTERREPORTMIMETYPE: 27,
    BINDSTATUS_CLSIDCANINSTANTIATE: 28,
    BINDSTATUS_IUNKNOWNAVAILABLE: 29,
    BINDSTATUS_DIRECTBIND: 30,
    BINDSTATUS_RAWMIMETYPE: 31,
    BINDSTATUS_PROXYDETECTING: 32,
    BINDSTATUS_ACCEPTRANGES: 33,
    BINDSTATUS_COOKIE_SENT: 34,
    BINDSTATUS_COMPACT_POLICY_RECEIVED: 35,
    BINDSTATUS_COOKIE_SUPPRESSED: 36,
    BINDSTATUS_COOKIE_STATE_UNKNOWN: 37,
    BINDSTATUS_COOKIE_STATE_ACCEPT: 38,
    BINDSTATUS_COOKIE_STATE_REJECT: 39,
    BINDSTATUS_COOKIE_STATE_PROMPT: 40,
    BINDSTATUS_COOKIE_STATE_LEASH: 41,
    BINDSTATUS_COOKIE_STATE_DOWNGRADE: 42,
    BINDSTATUS_POLICY_HREF: 43,
    BINDSTATUS_P3P_HEADER: 44,
    BINDSTATUS_SESSION_COOKIE_RECEIVED: 45,
    BINDSTATUS_PERSISTENT_COOKIE_RECEIVED: 46,
    BINDSTATUS_SESSION_COOKIES_ALLOWED: 47,
    BINDSTATUS_CACHECONTROL: 48,
    BINDSTATUS_CONTENTDISPOSITIONFILENAME: 49,
    BINDSTATUS_MIMETEXTPLAINMISMATCH: 50,
    BINDSTATUS_PUBLISHERAVAILABLE: 51,
    BINDSTATUS_DISPLAYNAMEAVAILABLE: 52
});};
T.IBindStatusCallbackVtbl = function() {return Struct('IBindStatusCallbackVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IBindStatusCallback), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IBindStatusCallback), 'This']])),
    OnStartBinding: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.DWORD, 'dwReserved'], [Pointer(T.IBinding), 'pib']])),
    GetPriority: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.LONG), 'pnPriority']])),
    OnLowResource: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.DWORD, 'reserved']])),
    OnProgress: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.ULONG, 'ulProgress'], [T.ULONG, 'ulProgressMax'], [T.ULONG, 'ulStatusCode'], [T.LPCWSTR, 'szStatusText']])),
    OnStopBinding: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.HRESULT, 'hresult'], [T.LPCWSTR, 'szError']])),
    GetBindInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.BINDINFO), 'pbindinfo']])),
    OnDataAvailable: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.DWORD, 'grfBSCF'], [T.DWORD, 'dwSize'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pstgmed']])),
    OnObjectAvailable: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'punk']]))
});};
T.LPBINDSTATUSCALLBACKEX = function() {return Pointer(T.IBindStatusCallbackEx);};
T.BINDF2 = function() {return Enum('BINDF2_RESERVED_1', {
    BINDF2_DISABLEBASICOVERHTTP: 1,
    BINDF2_DISABLEAUTOCOOKIEHANDLING: 2,
    BINDF2_READ_DATA_GREATER_THAN_4GB: 4,
    BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID: 8,
    BINDF2_RESERVED_3: 536870912,
    BINDF2_RESERVED_2: 1073741824,
    BINDF2_RESERVED_1: 2147483648
});};
T.IBindStatusCallbackExVtbl = function() {return Struct('IBindStatusCallbackExVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IBindStatusCallbackEx), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IBindStatusCallbackEx), 'This']])),
    OnStartBinding: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [T.DWORD, 'dwReserved'], [Pointer(T.IBinding), 'pib']])),
    GetPriority: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [Pointer(T.LONG), 'pnPriority']])),
    OnLowResource: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [T.DWORD, 'reserved']])),
    OnProgress: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [T.ULONG, 'ulProgress'], [T.ULONG, 'ulProgressMax'], [T.ULONG, 'ulStatusCode'], [T.LPCWSTR, 'szStatusText']])),
    OnStopBinding: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [T.HRESULT, 'hresult'], [T.LPCWSTR, 'szError']])),
    GetBindInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.BINDINFO), 'pbindinfo']])),
    OnDataAvailable: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [T.DWORD, 'grfBSCF'], [T.DWORD, 'dwSize'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pstgmed']])),
    OnObjectAvailable: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'punk']])),
    GetBindInfoEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.BINDINFO), 'pbindinfo'], [Pointer(T.DWORD), 'grfBINDF2'], [Pointer(T.DWORD), 'pdwReserved']]))
});};
T.LPAUTHENTICATION = function() {return Pointer(T.IAuthenticate);};
T.IAuthenticateVtbl = function() {return Struct('IAuthenticateVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IAuthenticate), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IAuthenticate), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IAuthenticate), 'This']])),
    Authenticate: Pointer(Fn(T.HRESULT, [[Pointer(T.IAuthenticate), 'This'], [Pointer(T.HWND), 'phwnd'], [Pointer(T.LPWSTR), 'pszUsername'], [Pointer(T.LPWSTR), 'pszPassword']]))
});};
T.LPHTTPNEGOTIATE = function() {return Pointer(T.IHttpNegotiate);};
T.IHttpNegotiateVtbl = function() {return Struct('IHttpNegotiateVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IHttpNegotiate), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IHttpNegotiate), 'This']])),
    BeginningTransaction: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate), 'This'], [T.LPCWSTR, 'szURL'], [T.LPCWSTR, 'szHeaders'], [T.DWORD, 'dwReserved'], [Pointer(T.LPWSTR), 'pszAdditionalHeaders']])),
    OnResponse: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate), 'This'], [T.DWORD, 'dwResponseCode'], [T.LPCWSTR, 'szResponseHeaders'], [T.LPCWSTR, 'szRequestHeaders'], [Pointer(T.LPWSTR), 'pszAdditionalRequestHeaders']]))
});};
T.LPHTTPNEGOTIATE2 = function() {return Pointer(T.IHttpNegotiate2);};
T.IHttpNegotiate2Vtbl = function() {return Struct('IHttpNegotiate2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IHttpNegotiate2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IHttpNegotiate2), 'This']])),
    BeginningTransaction: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate2), 'This'], [T.LPCWSTR, 'szURL'], [T.LPCWSTR, 'szHeaders'], [T.DWORD, 'dwReserved'], [Pointer(T.LPWSTR), 'pszAdditionalHeaders']])),
    OnResponse: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate2), 'This'], [T.DWORD, 'dwResponseCode'], [T.LPCWSTR, 'szResponseHeaders'], [T.LPCWSTR, 'szRequestHeaders'], [Pointer(T.LPWSTR), 'pszAdditionalRequestHeaders']])),
    GetRootSecurityId: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate2), 'This'], [Pointer(T.BYTE), 'pbSecurityId'], [Pointer(T.DWORD), 'pcbSecurityId'], [T.DWORD_PTR, 'dwReserved']]))
});};
T.LPBINDHOST = function() {return Pointer(T.IBindHost);};
T.IBindHostVtbl = function() {return Struct('IBindHostVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IBindHost), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IBindHost), 'This']])),
    CreateMoniker: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [T.LPOLESTR, 'szName'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(Pointer(T.IMoniker)), 'ppmk'], [T.DWORD, 'dwReserved']])),
    MonikerBindToStorage: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IMoniker), 'pMk'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(T.IBindStatusCallback), 'pBSC'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObj']])),
    MonikerBindToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IMoniker), 'pMk'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(T.IBindStatusCallback), 'pBSC'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObj']]))
});};
T.LPWININETINFO = function() {return Pointer(T.IWinInetInfo);};
T.IWinInetInfoVtbl = function() {return Struct('IWinInetInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IWinInetInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IWinInetInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IWinInetInfo), 'This']])),
    QueryOption: Pointer(Fn(T.HRESULT, [[Pointer(T.IWinInetInfo), 'This'], [T.DWORD, 'dwOption'], [T.LPVOID, 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf']]))
});};
T.LPWININETHTTPINFO = function() {return Pointer(T.IWinInetHttpInfo);};
T.IWinInetHttpInfoVtbl = function() {return Struct('IWinInetHttpInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IWinInetHttpInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IWinInetHttpInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IWinInetHttpInfo), 'This']])),
    QueryOption: Pointer(Fn(T.HRESULT, [[Pointer(T.IWinInetHttpInfo), 'This'], [T.DWORD, 'dwOption'], [T.LPVOID, 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf']])),
    QueryInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IWinInetHttpInfo), 'This'], [T.DWORD, 'dwOption'], [T.LPVOID, 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf'], [Pointer(T.DWORD), 'pdwFlags'], [Pointer(T.DWORD), 'pdwReserved']]))
});};
T.LPWINDOWFORBINDINGUI = function() {return Pointer(T.IWindowForBindingUI);};
T.IWindowForBindingUIVtbl = function() {return Struct('IWindowForBindingUIVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IWindowForBindingUI), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IWindowForBindingUI), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IWindowForBindingUI), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IWindowForBindingUI), 'This'], [Pointer(T.GUID), 'rguidReason'], [Pointer(T.HWND), 'phwnd']]))
});};
T.LPHTTPSECURITY = function() {return Pointer(T.IHttpSecurity);};
T.IHttpSecurityVtbl = function() {return Struct('IHttpSecurityVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpSecurity), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IHttpSecurity), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IHttpSecurity), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpSecurity), 'This'], [Pointer(T.GUID), 'rguidReason'], [Pointer(T.HWND), 'phwnd']])),
    OnSecurityProblem: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpSecurity), 'This'], [T.DWORD, 'dwProblem']]))
});};
T.LPPERSISTMONIKER = function() {return Pointer(T.IPersistMoniker);};
T.IPersistMonikerVtbl = function() {return Struct('IPersistMonikerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPersistMoniker), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPersistMoniker), 'This']])),
    GetClassID: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(T.CLSID), 'pClassID']])),
    IsDirty: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This']])),
    Load: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [T.BOOL, 'fFullyAvailable'], [Pointer(T.IMoniker), 'pimkName'], [T.LPBC, 'pibc'], [T.DWORD, 'grfMode']])),
    Save: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(T.IMoniker), 'pimkName'], [T.LPBC, 'pbc'], [T.BOOL, 'fRemember']])),
    SaveCompleted: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(T.IMoniker), 'pimkName'], [T.LPBC, 'pibc']])),
    GetCurMoniker: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(Pointer(T.IMoniker)), 'ppimkName']]))
});};
T.LPMONIKERPROP = function() {return Pointer(T.IMonikerProp);};
T.MONIKERPROPERTY = function() {return Enum('POPUPLEVELPROP', {
    MIMETYPEPROP: 0,
    USE_SRC_URL: 1,
    CLASSIDPROP: 2,
    TRUSTEDDOWNLOADPROP: 3,
    POPUPLEVELPROP: 4
});};
T.IMonikerPropVtbl = function() {return Struct('IMonikerPropVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMonikerProp), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IMonikerProp), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IMonikerProp), 'This']])),
    PutProperty: Pointer(Fn(T.HRESULT, [[Pointer(T.IMonikerProp), 'This'], [T.MONIKERPROPERTY, 'mkp'], [T.LPCWSTR, 'val']]))
});};
T.LPBINDPROTOCOL = function() {return Pointer(T.IBindProtocol);};
T.IBindProtocolVtbl = function() {return Struct('IBindProtocolVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindProtocol), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IBindProtocol), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IBindProtocol), 'This']])),
    CreateBinding: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindProtocol), 'This'], [T.LPCWSTR, 'szUrl'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(Pointer(T.IBinding)), 'ppb']]))
});};
T.LPIINTERNETBINDINFO = function() {return Pointer(T.IInternetBindInfo);};
T.BINDSTRING = function() {return Enum('BINDSTRING_PTR_BIND_CONTEXT', {
    BINDSTRING_HEADERS: 1,
    BINDSTRING_ACCEPT_MIMES: 2,
    BINDSTRING_EXTRA_URL: 3,
    BINDSTRING_LANGUAGE: 4,
    BINDSTRING_USERNAME: 5,
    BINDSTRING_PASSWORD: 6,
    BINDSTRING_UA_PIXELS: 7,
    BINDSTRING_UA_COLOR: 8,
    BINDSTRING_OS: 9,
    BINDSTRING_USER_AGENT: 10,
    BINDSTRING_ACCEPT_ENCODINGS: 11,
    BINDSTRING_POST_COOKIE: 12,
    BINDSTRING_POST_DATA_MIME: 13,
    BINDSTRING_URL: 14,
    BINDSTRING_IID: 15,
    BINDSTRING_FLAG_BIND_TO_OBJECT: 16,
    BINDSTRING_PTR_BIND_CONTEXT: 17
});};
T.IInternetBindInfoVtbl = function() {return Struct('IInternetBindInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetBindInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetBindInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetBindInfo), 'This']])),
    GetBindInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetBindInfo), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.BINDINFO), 'pbindinfo']])),
    GetBindString: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetBindInfo), 'This'], [T.ULONG, 'ulStringType'], [Pointer(T.LPOLESTR), 'ppwzStr'], [T.ULONG, 'cEl'], [Pointer(T.ULONG), 'pcElFetched']]))
});};
T.LPIINTERNETPRIORITY = function() {return Pointer(T.IInternetPriority);};
T.IInternetPriorityVtbl = function() {return Struct('IInternetPriorityVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetPriority), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetPriority), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetPriority), 'This']])),
    SetPriority: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetPriority), 'This'], [T.LONG, 'nPriority']])),
    GetPriority: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetPriority), 'This'], [Pointer(T.LONG), 'pnPriority']]))
});};
T.LPIINTERNETPROTOCOLROOT = function() {return Pointer(T.IInternetProtocolRoot);};
T.PI_FLAGS = function() {return Enum('PD_FORCE_SWITCH', {
    PI_PARSE_URL: 1,
    PI_FILTER_MODE: 2,
    PI_FORCE_ASYNC: 4,
    PI_USE_WORKERTHREAD: 8,
    PI_MIMEVERIFICATION: 16,
    PI_CLSIDLOOKUP: 32,
    PI_DATAPROGRESS: 64,
    PI_SYNCHRONOUS: 128,
    PI_APARTMENTTHREADED: 256,
    PI_CLASSINSTALL: 512,
    PD_FORCE_SWITCH: 65536
});};
T.PROTOCOLDATA = function() {return Struct('_tagPROTOCOLDATA', {
    grfFlags: T.DWORD,
    dwState: T.DWORD,
    pData: T.LPVOID,
    cbData: T.ULONG
});};
T.IInternetProtocolRootVtbl = function() {return Struct('IInternetProtocolRootVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocolRoot), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocolRoot), 'This']])),
    Start: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [T.LPCWSTR, 'szUrl'], [Pointer(T.IInternetProtocolSink), 'pOIProtSink'], [Pointer(T.IInternetBindInfo), 'pOIBindInfo'], [T.DWORD, 'grfPI'], [T.HANDLE_PTR, 'dwReserved']])),
    Continue: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [Pointer(T.PROTOCOLDATA), 'pProtocolData']])),
    Abort: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [T.HRESULT, 'hrReason'], [T.DWORD, 'dwOptions']])),
    Terminate: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [T.DWORD, 'dwOptions']])),
    Suspend: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This']])),
    Resume: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This']]))
});};
T.LPIINTERNETPROTOCOLSINK = function() {return Pointer(T.IInternetProtocolSink);};
T.IInternetProtocolSinkVtbl = function() {return Struct('IInternetProtocolSinkVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocolSink), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocolSink), 'This']])),
    Switch: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [Pointer(T.PROTOCOLDATA), 'pProtocolData']])),
    ReportProgress: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [T.ULONG, 'ulStatusCode'], [T.LPCWSTR, 'szStatusText']])),
    ReportData: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [T.DWORD, 'grfBSCF'], [T.ULONG, 'ulProgress'], [T.ULONG, 'ulProgressMax']])),
    ReportResult: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [T.HRESULT, 'hrResult'], [T.DWORD, 'dwError'], [T.LPCWSTR, 'szResult']]))
});};
T.LPIINTERNETPROTOCOL = function() {return Pointer(T.IInternetProtocol);};
T.IInternetProtocolVtbl = function() {return Struct('IInternetProtocolVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocol), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocol), 'This']])),
    Start: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [T.LPCWSTR, 'szUrl'], [Pointer(T.IInternetProtocolSink), 'pOIProtSink'], [Pointer(T.IInternetBindInfo), 'pOIBindInfo'], [T.DWORD, 'grfPI'], [T.HANDLE_PTR, 'dwReserved']])),
    Continue: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [Pointer(T.PROTOCOLDATA), 'pProtocolData']])),
    Abort: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [T.HRESULT, 'hrReason'], [T.DWORD, 'dwOptions']])),
    Terminate: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [T.DWORD, 'dwOptions']])),
    Suspend: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This']])),
    Resume: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This']])),
    Read: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']])),
    Seek: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [T.LARGE_INTEGER, 'dlibMove'], [T.DWORD, 'dwOrigin'], [Pointer(T.ULARGE_INTEGER), 'plibNewPosition']])),
    LockRequest: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [T.DWORD, 'dwOptions']])),
    UnlockRequest: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This']]))
});};
T.LPIINTERNETPROTOCOLINFO = function() {return Pointer(T.IInternetProtocolInfo);};
T.PARSEACTION = function() {return Enum('PARSE_UNESCAPE', {
    PARSE_CANONICALIZE: 1,
    PARSE_FRIENDLY: 2,
    PARSE_SECURITY_URL: 3,
    PARSE_ROOTDOCUMENT: 4,
    PARSE_DOCUMENT: 5,
    PARSE_ANCHOR: 6,
    PARSE_ENCODE: 7,
    PARSE_DECODE: 8,
    PARSE_PATH_FROM_URL: 9,
    PARSE_URL_FROM_PATH: 10,
    PARSE_MIME: 11,
    PARSE_SERVER: 12,
    PARSE_SCHEMA: 13,
    PARSE_SITE: 14,
    PARSE_DOMAIN: 15,
    PARSE_LOCATION: 16,
    PARSE_SECURITY_DOMAIN: 17,
    PARSE_ESCAPE: 18,
    PARSE_UNESCAPE: 19
});};
T.PSUACTION = function() {return Enum('PSU_SECURITY_URL_ONLY', {
    PSU_DEFAULT: 1,
    PSU_SECURITY_URL_ONLY: 2
});};
T.QUERYOPTION = function() {return Enum('QUERY_USES_HISTORYFOLDER', {
    QUERY_EXPIRATION_DATE: 1,
    QUERY_TIME_OF_LAST_CHANGE: 2,
    QUERY_CONTENT_ENCODING: 3,
    QUERY_CONTENT_TYPE: 4,
    QUERY_REFRESH: 5,
    QUERY_RECOMBINE: 6,
    QUERY_CAN_NAVIGATE: 7,
    QUERY_USES_NETWORK: 8,
    QUERY_IS_CACHED: 9,
    QUERY_IS_INSTALLEDENTRY: 10,
    QUERY_IS_CACHED_OR_MAPPED: 11,
    QUERY_USES_CACHE: 12,
    QUERY_IS_SECURE: 13,
    QUERY_IS_SAFE: 14,
    QUERY_USES_HISTORYFOLDER: 15
});};
T.IInternetProtocolInfoVtbl = function() {return Struct('IInternetProtocolInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocolInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocolInfo), 'This']])),
    ParseUrl: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [T.LPCWSTR, 'pwzUrl'], [T.PARSEACTION, 'ParseAction'], [T.DWORD, 'dwParseFlags'], [T.LPWSTR, 'pwzResult'], [T.DWORD, 'cchResult'], [Pointer(T.DWORD), 'pcchResult'], [T.DWORD, 'dwReserved']])),
    CombineUrl: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [T.LPCWSTR, 'pwzBaseUrl'], [T.LPCWSTR, 'pwzRelativeUrl'], [T.DWORD, 'dwCombineFlags'], [T.LPWSTR, 'pwzResult'], [T.DWORD, 'cchResult'], [Pointer(T.DWORD), 'pcchResult'], [T.DWORD, 'dwReserved']])),
    CompareUrl: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [T.LPCWSTR, 'pwzUrl1'], [T.LPCWSTR, 'pwzUrl2'], [T.DWORD, 'dwCompareFlags']])),
    QueryInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [T.LPCWSTR, 'pwzUrl'], [T.QUERYOPTION, 'OueryOption'], [T.DWORD, 'dwQueryFlags'], [T.LPVOID, 'pBuffer'], [T.DWORD, 'cbBuffer'], [Pointer(T.DWORD), 'pcbBuf'], [T.DWORD, 'dwReserved']]))
});};
T.LPIINTERNETSESSION = function() {return Pointer(T.IInternetSession);};
T.OIBDG_FLAGS = function() {return Enum('OIBDG_DATAONLY', {
    OIBDG_APARTMENTTHREADED: 256,
    OIBDG_DATAONLY: 4096
});};
T.IInternetSessionVtbl = function() {return Struct('IInternetSessionVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetSession), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetSession), 'This']])),
    RegisterNameSpace: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IClassFactory), 'pCF'], [Pointer(T.CLSID), 'rclsid'], [T.LPCWSTR, 'pwzProtocol'], [T.ULONG, 'cPatterns'], [Pointer(T.LPCWSTR), 'ppwzPatterns'], [T.DWORD, 'dwReserved']])),
    UnregisterNameSpace: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IClassFactory), 'pCF'], [T.LPCWSTR, 'pszProtocol']])),
    RegisterMimeFilter: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IClassFactory), 'pCF'], [Pointer(T.CLSID), 'rclsid'], [T.LPCWSTR, 'pwzType']])),
    UnregisterMimeFilter: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IClassFactory), 'pCF'], [T.LPCWSTR, 'pwzType']])),
    CreateBinding: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [T.LPBC, 'pBC'], [T.LPCWSTR, 'szUrl'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(Pointer(T.IUnknown)), 'ppUnk'], [Pointer(Pointer(T.IInternetProtocol)), 'ppOInetProt'], [T.DWORD, 'dwOption']])),
    SetSessionOption: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [T.DWORD, 'dwOption'], [T.LPVOID, 'pBuffer'], [T.DWORD, 'dwBufferLength'], [T.DWORD, 'dwReserved']]))
});};
T.IInternetSecurityMgrSiteVtbl = function() {return Struct('IInternetSecurityMgrSiteVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityMgrSite), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetSecurityMgrSite), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetSecurityMgrSite), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityMgrSite), 'This'], [Pointer(T.HWND), 'phwnd']])),
    EnableModeless: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityMgrSite), 'This'], [T.BOOL, 'fEnable']]))
});};
T.PUAF = function() {return Enum('PUAF_CHECK_TIPS', {
    PUAF_DEFAULT: 0,
    PUAF_NOUI: 1,
    PUAF_ISFILE: 2,
    PUAF_WARN_IF_DENIED: 4,
    PUAF_FORCEUI_FOREGROUND: 8,
    PUAF_CHECK_TIPS: 16
});};
T.SZM_FLAGS = function() {return Enum('SZM_DELETE', {
    SZM_CREATE: 0,
    SZM_DELETE: 1
});};
T.IInternetSecurityManagerVtbl = function() {return Struct('IInternetSecurityManagerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetSecurityManager), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetSecurityManager), 'This']])),
    SetSecuritySite: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [Pointer(T.IInternetSecurityMgrSite), 'pSite']])),
    GetSecuritySite: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [Pointer(Pointer(T.IInternetSecurityMgrSite)), 'ppSite']])),
    MapUrlToZone: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.LPCWSTR, 'pwszUrl'], [Pointer(T.DWORD), 'pdwZone'], [T.DWORD, 'dwFlags']])),
    GetSecurityId: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.LPCWSTR, 'pwszUrl'], [Pointer(T.BYTE), 'pbSecurityId'], [Pointer(T.DWORD), 'pcbSecurityId'], [T.DWORD_PTR, 'dwReserved']])),
    ProcessUrlAction: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.LPCWSTR, 'pwszUrl'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [Pointer(T.BYTE), 'pContext'], [T.DWORD, 'cbContext'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwReserved']])),
    QueryCustomPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.LPCWSTR, 'pwszUrl'], [Pointer(T.GUID), 'guidKey'], [Pointer(Pointer(T.BYTE)), 'ppPolicy'], [Pointer(T.DWORD), 'pcbPolicy'], [Pointer(T.BYTE), 'pContext'], [T.DWORD, 'cbContext'], [T.DWORD, 'dwReserved']])),
    SetZoneMapping: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.DWORD, 'dwZone'], [T.LPCWSTR, 'lpszPattern'], [T.DWORD, 'dwFlags']])),
    GetZoneMappings: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(Pointer(T.IEnumString)), 'ppenumString'], [T.DWORD, 'dwFlags']]))
});};
T.IInternetHostSecurityManagerVtbl = function() {return Struct('IInternetHostSecurityManagerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetHostSecurityManager), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetHostSecurityManager), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetHostSecurityManager), 'This']])),
    GetSecurityId: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetHostSecurityManager), 'This'], [Pointer(T.BYTE), 'pbSecurityId'], [Pointer(T.DWORD), 'pcbSecurityId'], [T.DWORD_PTR, 'dwReserved']])),
    ProcessUrlAction: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetHostSecurityManager), 'This'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [Pointer(T.BYTE), 'pContext'], [T.DWORD, 'cbContext'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwReserved']])),
    QueryCustomPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetHostSecurityManager), 'This'], [Pointer(T.GUID), 'guidKey'], [Pointer(Pointer(T.BYTE)), 'ppPolicy'], [Pointer(T.DWORD), 'pcbPolicy'], [Pointer(T.BYTE), 'pContext'], [T.DWORD, 'cbContext'], [T.DWORD, 'dwReserved']]))
});};
T.LPURLZONEMANAGER = function() {return Pointer(T.IInternetZoneManager);};
T.URLZONE = function() {return Enum('URLZONE_USER_MAX', {
    URLZONE_INVALID: 0,
    URLZONE_PREDEFINED_MIN: 0,
    URLZONE_LOCAL_MACHINE: 0,
    URLZONE_INTRANET: 1,
    URLZONE_TRUSTED: 2,
    URLZONE_INTERNET: 3,
    URLZONE_UNTRUSTED: 4,
    URLZONE_PREDEFINED_MAX: 999,
    URLZONE_USER_MIN: 1000,
    URLZONE_USER_MAX: 10000
});};
T.URLTEMPLATE = function() {return Enum('URLTEMPLATE_PREDEFINED_MAX', {
    URLTEMPLATE_CUSTOM: 0,
    URLTEMPLATE_PREDEFINED_MIN: 65536,
    URLTEMPLATE_LOW: 65536,
    URLTEMPLATE_MEDLOW: 66816,
    URLTEMPLATE_MEDIUM: 69632,
    URLTEMPLATE_MEDHIGH: 70912,
    URLTEMPLATE_HIGH: 73728,
    URLTEMPLATE_PREDEFINED_MAX: 131072
});};
T.ZAFLAGS = function() {return Enum('ZAFLAGS_NO_CACHE', {
    ZAFLAGS_CUSTOM_EDIT: 1,
    ZAFLAGS_ADD_SITES: 2,
    ZAFLAGS_REQUIRE_VERIFICATION: 4,
    ZAFLAGS_INCLUDE_PROXY_OVERRIDE: 8,
    ZAFLAGS_INCLUDE_INTRANET_SITES: 16,
    ZAFLAGS_NO_UI: 32,
    ZAFLAGS_SUPPORTS_VERIFICATION: 64,
    ZAFLAGS_UNC_AS_INTRANET: 128,
    ZAFLAGS_DETECT_INTRANET: 256,
    ZAFLAGS_USE_LOCKED_ZONES: 65536,
    ZAFLAGS_VERIFY_TEMPLATE_SETTINGS: 131072,
    ZAFLAGS_NO_CACHE: 262144
});};
T.ZONEATTRIBUTES = function() {return Struct('_ZONEATTRIBUTES', {
    cbSize: T.ULONG,
    szDisplayName: ArrayType(T.WCHAR, 260),
    szDescription: ArrayType(T.WCHAR, 200),
    szIconPath: ArrayType(T.WCHAR, 260),
    dwTemplateMinLevel: T.DWORD,
    dwTemplateRecommended: T.DWORD,
    dwTemplateCurrentLevel: T.DWORD,
    dwFlags: T.DWORD
});};
T.LPZONEATTRIBUTES = function() {return Pointer(Struct('_ZONEATTRIBUTES', null));};
T.URLZONEREG = function() {return Enum('URLZONEREG_HKCU', {
    URLZONEREG_DEFAULT: 0,
    URLZONEREG_HKLM: 1,
    URLZONEREG_HKCU: 2
});};
T.IInternetZoneManagerVtbl = function() {return Struct('IInternetZoneManagerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetZoneManager), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetZoneManager), 'This']])),
    GetZoneAttributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes']])),
    SetZoneAttributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes']])),
    GetZoneCustomPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.GUID), 'guidKey'], [Pointer(Pointer(T.BYTE)), 'ppPolicy'], [Pointer(T.DWORD), 'pcbPolicy'], [T.URLZONEREG, 'ulrZoneReg']])),
    SetZoneCustomPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.GUID), 'guidKey'], [Pointer(T.BYTE), 'ppPolicy'], [T.DWORD, 'pcbPolicy'], [T.URLZONEREG, 'ulrZoneReg']])),
    GetZoneActionPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg']])),
    SetZoneActionPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg']])),
    PromptAction: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwAction'], [T.HWND, 'hwndParent'], [T.LPCWSTR, 'pwszUrl'], [T.LPCWSTR, 'pwszText'], [T.DWORD, 'dwPromptFlags']])),
    LogAction: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwAction'], [T.LPCWSTR, 'pwszUrl'], [T.LPCWSTR, 'pwszText'], [T.DWORD, 'dwLogFlags']])),
    CreateZoneEnumerator: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [Pointer(T.DWORD), 'pdwEnum'], [Pointer(T.DWORD), 'pdwCount'], [T.DWORD, 'dwFlags']])),
    GetZoneAt: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwEnum'], [T.DWORD, 'dwIndex'], [Pointer(T.DWORD), 'pdwZone']])),
    DestroyZoneEnumerator: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwEnum']])),
    CopyTemplatePoliciesToZone: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwTemplate'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwReserved']]))
});};
T.IInternetZoneManagerExVtbl = function() {return Struct('IInternetZoneManagerExVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetZoneManagerEx), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetZoneManagerEx), 'This']])),
    GetZoneAttributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes']])),
    SetZoneAttributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes']])),
    GetZoneCustomPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.GUID), 'guidKey'], [Pointer(Pointer(T.BYTE)), 'ppPolicy'], [Pointer(T.DWORD), 'pcbPolicy'], [T.URLZONEREG, 'ulrZoneReg']])),
    SetZoneCustomPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.GUID), 'guidKey'], [Pointer(T.BYTE), 'ppPolicy'], [T.DWORD, 'pcbPolicy'], [T.URLZONEREG, 'ulrZoneReg']])),
    GetZoneActionPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg']])),
    SetZoneActionPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg']])),
    PromptAction: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwAction'], [T.HWND, 'hwndParent'], [T.LPCWSTR, 'pwszUrl'], [T.LPCWSTR, 'pwszText'], [T.DWORD, 'dwPromptFlags']])),
    LogAction: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwAction'], [T.LPCWSTR, 'pwszUrl'], [T.LPCWSTR, 'pwszText'], [T.DWORD, 'dwLogFlags']])),
    CreateZoneEnumerator: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [Pointer(T.DWORD), 'pdwEnum'], [Pointer(T.DWORD), 'pdwCount'], [T.DWORD, 'dwFlags']])),
    GetZoneAt: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwEnum'], [T.DWORD, 'dwIndex'], [Pointer(T.DWORD), 'pdwZone']])),
    DestroyZoneEnumerator: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwEnum']])),
    CopyTemplatePoliciesToZone: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwTemplate'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwReserved']])),
    GetZoneActionPolicyEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg'], [T.DWORD, 'dwFlags']])),
    SetZoneActionPolicyEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg'], [T.DWORD, 'dwFlags']]))
});};
T.IInternetZoneManagerEx2Vtbl = function() {return Struct('IInternetZoneManagerEx2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetZoneManagerEx2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetZoneManagerEx2), 'This']])),
    GetZoneAttributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes']])),
    SetZoneAttributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes']])),
    GetZoneCustomPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.GUID), 'guidKey'], [Pointer(Pointer(T.BYTE)), 'ppPolicy'], [Pointer(T.DWORD), 'pcbPolicy'], [T.URLZONEREG, 'ulrZoneReg']])),
    SetZoneCustomPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.GUID), 'guidKey'], [Pointer(T.BYTE), 'ppPolicy'], [T.DWORD, 'pcbPolicy'], [T.URLZONEREG, 'ulrZoneReg']])),
    GetZoneActionPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg']])),
    SetZoneActionPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg']])),
    PromptAction: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwAction'], [T.HWND, 'hwndParent'], [T.LPCWSTR, 'pwszUrl'], [T.LPCWSTR, 'pwszText'], [T.DWORD, 'dwPromptFlags']])),
    LogAction: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwAction'], [T.LPCWSTR, 'pwszUrl'], [T.LPCWSTR, 'pwszText'], [T.DWORD, 'dwLogFlags']])),
    CreateZoneEnumerator: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [Pointer(T.DWORD), 'pdwEnum'], [Pointer(T.DWORD), 'pdwCount'], [T.DWORD, 'dwFlags']])),
    GetZoneAt: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwEnum'], [T.DWORD, 'dwIndex'], [Pointer(T.DWORD), 'pdwZone']])),
    DestroyZoneEnumerator: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwEnum']])),
    CopyTemplatePoliciesToZone: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwTemplate'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwReserved']])),
    GetZoneActionPolicyEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg'], [T.DWORD, 'dwFlags']])),
    SetZoneActionPolicyEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg'], [T.DWORD, 'dwFlags']])),
    GetZoneAttributesEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes'], [T.DWORD, 'dwFlags']])),
    GetZoneSecurityState: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZoneIndex'], [T.BOOL, 'fRespectPolicy'], [T.LPDWORD, 'pdwState'], [Pointer(T.BOOL), 'pfPolicyEncountered']])),
    GetIESecurityState: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.BOOL, 'fRespectPolicy'], [T.LPDWORD, 'pdwState'], [Pointer(T.BOOL), 'pfPolicyEncountered'], [T.BOOL, 'fNoCache']])),
    FixInsecureSettings: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This']]))
});};
T.SOFTDISTINFO = function() {return Struct('_tagSOFTDISTINFO', {
    cbSize: T.ULONG,
    dwFlags: T.DWORD,
    dwAdState: T.DWORD,
    szTitle: T.LPWSTR,
    szAbstract: T.LPWSTR,
    szHREF: T.LPWSTR,
    dwInstalledVersionMS: T.DWORD,
    dwInstalledVersionLS: T.DWORD,
    dwUpdateVersionMS: T.DWORD,
    dwUpdateVersionLS: T.DWORD,
    dwAdvertisedVersionMS: T.DWORD,
    dwAdvertisedVersionLS: T.DWORD,
    dwReserved: T.DWORD
});};
T.LPSOFTDISTINFO = function() {return Pointer(Struct('_tagSOFTDISTINFO', null));};
T.CODEBASEHOLD = function() {return Struct('_tagCODEBASEHOLD', {
    cbSize: T.DWORD,
    szDistUnit: T.LPWSTR,
    szCodeBase: T.LPWSTR,
    dwVersionMS: T.DWORD,
    dwVersionLS: T.DWORD,
    dwStyle: T.DWORD
});};
T.LPCODEBASEHOLD = function() {return Pointer(Struct('_tagCODEBASEHOLD', null));};
T.ISoftDistExtVtbl = function() {return Struct('ISoftDistExtVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISoftDistExt), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISoftDistExt), 'This']])),
    ProcessSoftDist: Pointer(Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [T.LPCWSTR, 'szCDFURL'], [Pointer(T.IXMLElement), 'pSoftDistElement'], [T.LPSOFTDISTINFO, 'lpsdi']])),
    GetFirstCodeBase: Pointer(Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [Pointer(T.LPWSTR), 'szCodeBase'], [T.LPDWORD, 'dwMaxSize']])),
    GetNextCodeBase: Pointer(Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [Pointer(T.LPWSTR), 'szCodeBase'], [T.LPDWORD, 'dwMaxSize']])),
    AsyncInstallDistributionUnit: Pointer(Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [Pointer(T.IBindCtx), 'pbc'], [T.LPVOID, 'lpReserved'], [T.DWORD, 'flags'], [T.LPCODEBASEHOLD, 'lpcbh']]))
});};
T.INTERNETFEATURELIST = function() {return Enum('FEATURE_ENTRY_COUNT', {
    FEATURE_OBJECT_CACHING: 0,
    FEATURE_ZONE_ELEVATION: 1,
    FEATURE_MIME_HANDLING: 2,
    FEATURE_MIME_SNIFFING: 3,
    FEATURE_WINDOW_RESTRICTIONS: 4,
    FEATURE_WEBOC_POPUPMANAGEMENT: 5,
    FEATURE_BEHAVIORS: 6,
    FEATURE_DISABLE_MK_PROTOCOL: 7,
    FEATURE_LOCALMACHINE_LOCKDOWN: 8,
    FEATURE_SECURITYBAND: 9,
    FEATURE_RESTRICT_ACTIVEXINSTALL: 10,
    FEATURE_VALIDATE_NAVIGATE_URL: 11,
    FEATURE_RESTRICT_FILEDOWNLOAD: 12,
    FEATURE_ADDON_MANAGEMENT: 13,
    FEATURE_PROTOCOL_LOCKDOWN: 14,
    FEATURE_HTTP_USERNAME_PASSWORD_DISABLE: 15,
    FEATURE_SAFE_BINDTOOBJECT: 16,
    FEATURE_UNC_SAVEDFILECHECK: 17,
    FEATURE_GET_URL_DOM_FILEPATH_UNENCODED: 18,
    FEATURE_TABBED_BROWSING: 19,
    FEATURE_SSLUX: 20,
    FEATURE_DISABLE_NAVIGATION_SOUNDS: 21,
    FEATURE_DISABLE_LEGACY_COMPRESSION: 22,
    FEATURE_FORCE_ADDR_AND_STATUS: 23,
    FEATURE_XMLHTTP: 24,
    FEATURE_DISABLE_TELNET_PROTOCOL: 25,
    FEATURE_FEEDS: 26,
    FEATURE_BLOCK_INPUT_PROMPTS: 27,
    FEATURE_DOMSTORAGE: 28,
    FEATURE_XDOMAINREQUEST: 29,
    FEATURE_DATAURI: 30,
    FEATURE_AJAX_CONNECTIONSERVICES: 31,
    FEATURE_ENTRY_COUNT: 32
});};
T.PROTOCOLFILTERDATA = function() {return Struct('_tagPROTOCOLFILTERDATA', {
    cbSize: T.DWORD,
    pProtocolSink: Pointer(T.IInternetProtocolSink),
    pProtocol: Pointer(T.IInternetProtocol),
    pUnk: Pointer(T.IUnknown),
    dwFilterFlags: T.DWORD
});};
T.Uri_PROPERTY = function() {return Enum('Uri_PROPERTY_DWORD_LAST', {
    Uri_PROPERTY_ABSOLUTE_URI: 0,
    Uri_PROPERTY_STRING_START: 1,
    Uri_PROPERTY_AUTHORITY: 1,
    Uri_PROPERTY_DISPLAY_URI: 2,
    Uri_PROPERTY_DOMAIN: 3,
    Uri_PROPERTY_EXTENSION: 4,
    Uri_PROPERTY_FRAGMENT: 5,
    Uri_PROPERTY_HOST: 6,
    Uri_PROPERTY_PASSWORD: 7,
    Uri_PROPERTY_PATH: 8,
    Uri_PROPERTY_PATH_AND_QUERY: 9,
    Uri_PROPERTY_QUERY: 10,
    Uri_PROPERTY_RAW_URI: 11,
    Uri_PROPERTY_SCHEME_NAME: 12,
    Uri_PROPERTY_USER_INFO: 13,
    Uri_PROPERTY_USER_NAME: 14,
    Uri_PROPERTY_STRING_LAST: 15,
    Uri_PROPERTY_HOST_TYPE: 15,
    Uri_PROPERTY_DWORD_START: 16,
    Uri_PROPERTY_PORT: 16,
    Uri_PROPERTY_SCHEME: 17,
    Uri_PROPERTY_ZONE: 18,
    Uri_PROPERTY_DWORD_LAST: 19
});};
T.Uri_HOST_TYPE = function() {return Enum('Uri_HOST_IDN', {
    Uri_HOST_UNKNOWN: 0,
    Uri_HOST_DNS: 1,
    Uri_HOST_IPV4: 2,
    Uri_HOST_IPV6: 3,
    Uri_HOST_IDN: 4
});};
T.IUriVtbl = function() {return Struct('IUriVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IUri), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IUri), 'This']])),
    GetPropertyBSTR: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.Uri_PROPERTY, 'uriProp'], [Pointer(T.BSTR), 'pbstrProperty'], [T.DWORD, 'dwFlags']])),
    GetPropertyLength: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.Uri_PROPERTY, 'uriProp'], [Pointer(T.DWORD), 'pcchProperty'], [T.DWORD, 'dwFlags']])),
    GetPropertyDWORD: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.Uri_PROPERTY, 'uriProp'], [Pointer(T.DWORD), 'pdwProperty'], [T.DWORD, 'dwFlags']])),
    HasProperty: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.Uri_PROPERTY, 'uriProp'], [Pointer(T.BOOL), 'pfHasProperty']])),
    GetAbsoluteUri: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrAbsoluteUri']])),
    GetAuthority: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrAuthority']])),
    GetDisplayUri: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrDisplayString']])),
    GetDomain: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrDomain']])),
    GetExtension: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrExtension']])),
    GetFragment: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrFragment']])),
    GetHost: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrHost']])),
    GetPassword: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrPassword']])),
    GetPath: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrPath']])),
    GetPathAndQuery: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrPathAndQuery']])),
    GetQuery: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrQuery']])),
    GetRawUri: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrRawUri']])),
    GetSchemeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrSchemeName']])),
    GetUserInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrUserInfo']])),
    GetUserNameA: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrUserName']])),
    GetHostType: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.DWORD), 'pdwHostType']])),
    GetPort: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.DWORD), 'pdwPort']])),
    GetScheme: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.DWORD), 'pdwScheme']])),
    GetZone: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.DWORD), 'pdwZone']])),
    GetProperties: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.LPDWORD, 'pdwFlags']])),
    IsEqual: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.IUri), 'pUri'], [Pointer(T.BOOL), 'pfEqual']]))
});};
T.IUriContainerVtbl = function() {return Struct('IUriContainerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriContainer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IUriContainer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IUriContainer), 'This']])),
    GetIUri: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriContainer), 'This'], [Pointer(Pointer(T.IUri)), 'ppIUri']]))
});};
T.IUriBuilderVtbl = function() {return Struct('IUriBuilderVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IUriBuilder), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IUriBuilder), 'This']])),
    CreateUriSimple: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.DWORD, 'dwAllowEncodingPropertyMask'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUri)), 'ppIUri']])),
    CreateUri: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.DWORD, 'dwCreateFlags'], [T.DWORD, 'dwAllowEncodingPropertyMask'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUri)), 'ppIUri']])),
    CreateUriWithFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.DWORD, 'dwCreateFlags'], [T.DWORD, 'dwUriBuilderFlags'], [T.DWORD, 'dwAllowEncodingPropertyMask'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUri)), 'ppIUri']])),
    GetIUri: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(Pointer(T.IUri)), 'ppIUri']])),
    SetIUri: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.IUri), 'pIUri']])),
    GetFragment: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchFragment'], [Pointer(T.LPCWSTR), 'ppwzFragment']])),
    GetHost: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchHost'], [Pointer(T.LPCWSTR), 'ppwzHost']])),
    GetPassword: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchPassword'], [Pointer(T.LPCWSTR), 'ppwzPassword']])),
    GetPath: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchPath'], [Pointer(T.LPCWSTR), 'ppwzPath']])),
    GetPort: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.BOOL), 'pfHasPort'], [Pointer(T.DWORD), 'pdwPort']])),
    GetQuery: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchQuery'], [Pointer(T.LPCWSTR), 'ppwzQuery']])),
    GetSchemeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchSchemeName'], [Pointer(T.LPCWSTR), 'ppwzSchemeName']])),
    GetUserNameA: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchUserName'], [Pointer(T.LPCWSTR), 'ppwzUserName']])),
    SetFragment: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']])),
    SetHost: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']])),
    SetPassword: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']])),
    SetPath: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']])),
    SetPortA: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.BOOL, 'fHasPort'], [T.DWORD, 'dwNewValue']])),
    SetQuery: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']])),
    SetSchemeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']])),
    SetUserName: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']])),
    RemoveProperties: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.DWORD, 'dwPropertyMask']])),
    HasBeenModified: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.BOOL), 'pfModified']]))
});};
T.IUriBuilderFactoryVtbl = function() {return Struct('IUriBuilderFactoryVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilderFactory), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IUriBuilderFactory), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IUriBuilderFactory), 'This']])),
    CreateIUriBuilder: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilderFactory), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUriBuilder)), 'ppIUriBuilder']])),
    CreateInitializedIUriBuilder: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilderFactory), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUriBuilder)), 'ppIUriBuilder']]))
});};
T.IInternetProtocolExVtbl = function() {return Struct('IInternetProtocolExVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocolEx), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocolEx), 'This']])),
    Start: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [T.LPCWSTR, 'szUrl'], [Pointer(T.IInternetProtocolSink), 'pOIProtSink'], [Pointer(T.IInternetBindInfo), 'pOIBindInfo'], [T.DWORD, 'grfPI'], [T.HANDLE_PTR, 'dwReserved']])),
    Continue: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [Pointer(T.PROTOCOLDATA), 'pProtocolData']])),
    Abort: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [T.HRESULT, 'hrReason'], [T.DWORD, 'dwOptions']])),
    Terminate: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [T.DWORD, 'dwOptions']])),
    Suspend: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This']])),
    Resume: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This']])),
    Read: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']])),
    Seek: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [T.LARGE_INTEGER, 'dlibMove'], [T.DWORD, 'dwOrigin'], [Pointer(T.ULARGE_INTEGER), 'plibNewPosition']])),
    LockRequest: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [T.DWORD, 'dwOptions']])),
    UnlockRequest: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This']])),
    StartEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [Pointer(T.IUri), 'pUri'], [Pointer(T.IInternetProtocolSink), 'pOIProtSink'], [Pointer(T.IInternetBindInfo), 'pOIBindInfo'], [T.DWORD, 'grfPI'], [Pointer(T.HANDLE), 'dwReserved']]))
});};
T.IPropertyStorage = function() {return Struct('IPropertyStorage', null);};
T.IPropertySetStorage = function() {return Struct('IPropertySetStorage', null);};
T.IEnumSTATPROPSTG = function() {return Struct('IEnumSTATPROPSTG', null);};
T.IEnumSTATPROPSETSTG = function() {return Struct('IEnumSTATPROPSETSTG', null);};
T.LPPROPERTYSTORAGE = function() {return Pointer(T.IPropertyStorage);};
T.PROPVARIANT = function() {return Struct('tagPROPVARIANT', null);};
T.CAUB = function() {return Struct('tagCAUB', {
    cElems: T.ULONG,
    pElems: Pointer(T.u8)
});};
T.CAI = function() {return Struct('tagCAI', {
    cElems: T.ULONG,
    pElems: Pointer(T.i16)
});};
T.CAUI = function() {return Struct('tagCAUI', {
    cElems: T.ULONG,
    pElems: Pointer(T.USHORT)
});};
T.CAL = function() {return Struct('tagCAL', {
    cElems: T.ULONG,
    pElems: Pointer(T.LONG)
});};
T.CAUL = function() {return Struct('tagCAUL', {
    cElems: T.ULONG,
    pElems: Pointer(T.ULONG)
});};
T.CAFLT = function() {return Struct('tagCAFLT', {
    cElems: T.ULONG,
    pElems: Pointer(T.f32)
});};
T.CADBL = function() {return Struct('tagCADBL', {
    cElems: T.ULONG,
    pElems: Pointer(T.f64)
});};
T.CACY = function() {return Struct('tagCACY', {
    cElems: T.ULONG,
    pElems: Pointer(T.CY)
});};
T.CADATE = function() {return Struct('tagCADATE', {
    cElems: T.ULONG,
    pElems: Pointer(T.DATE)
});};
T.CABSTR = function() {return Struct('tagCABSTR', {
    cElems: T.ULONG,
    pElems: Pointer(T.BSTR)
});};
T.CABSTRBLOB = function() {return Struct('tagCABSTRBLOB', {
    cElems: T.ULONG,
    pElems: Pointer(T.BSTRBLOB)
});};
T.CABOOL = function() {return Struct('tagCABOOL', {
    cElems: T.ULONG,
    pElems: Pointer(T.VARIANT_BOOL)
});};
T.CASCODE = function() {return Struct('tagCASCODE', {
    cElems: T.ULONG,
    pElems: Pointer(T.SCODE)
});};
T.CAPROPVARIANT = function() {return Struct('tagCAPROPVARIANT', {
    cElems: T.ULONG,
    pElems: Pointer(T.PROPVARIANT)
});};
T.CAH = function() {return Struct('tagCAH', {
    cElems: T.ULONG,
    pElems: Pointer(T.LARGE_INTEGER)
});};
T.CAUH = function() {return Struct('tagCAUH', {
    cElems: T.ULONG,
    pElems: Pointer(T.ULARGE_INTEGER)
});};
T.CALPSTR = function() {return Struct('tagCALPSTR', {
    cElems: T.ULONG,
    pElems: Pointer(T.LPSTR)
});};
T.CALPWSTR = function() {return Struct('tagCALPWSTR', {
    cElems: T.ULONG,
    pElems: Pointer(T.LPWSTR)
});};
T.CAFILETIME = function() {return Struct('tagCAFILETIME', {
    cElems: T.ULONG,
    pElems: Pointer(T.FILETIME)
});};
T.CACLIPDATA = function() {return Struct('tagCACLIPDATA', {
    cElems: T.ULONG,
    pElems: Pointer(T.CLIPDATA)
});};
T.CACLSID = function() {return Struct('tagCACLSID', {
    cElems: T.ULONG,
    pElems: Pointer(T.CLSID)
});};
T.LPPROPVARIANT = function() {return Pointer(Struct('tagPROPVARIANT', null));};
T.PROPSPEC = function() {return Struct('tagPROPSPEC', {
    ulKind: T.ULONG,
    __unnamed0: Union('', {
        propid: T.PROPID,
        lpwstr: T.LPOLESTR
    })
});};
T.STATPROPSTG = function() {return Struct('tagSTATPROPSTG', {
    lpwstrName: T.LPOLESTR,
    propid: T.PROPID,
    vt: T.VARTYPE
});};
T.STATPROPSETSTG = function() {return Struct('tagSTATPROPSETSTG', {
    fmtid: T.FMTID,
    clsid: T.CLSID,
    grfFlags: T.DWORD,
    mtime: T.FILETIME,
    ctime: T.FILETIME,
    atime: T.FILETIME,
    dwOSVersion: T.DWORD
});};
T.IPropertyStorageVtbl = function() {return Struct('IPropertyStorageVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPropertyStorage), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPropertyStorage), 'This']])),
    ReadMultiple: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpspec'], [Pointer(T.PROPSPEC), 'rgpspec'], [Pointer(T.PROPVARIANT), 'rgpropvar']])),
    WriteMultiple: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpspec'], [Pointer(T.PROPSPEC), 'rgpspec'], [Pointer(T.PROPVARIANT), 'rgpropvar'], [T.PROPID, 'propidNameFirst']])),
    DeleteMultiple: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpspec'], [Pointer(T.PROPSPEC), 'rgpspec']])),
    ReadPropertyNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpropid'], [Pointer(T.PROPID), 'rgpropid'], [Pointer(T.LPOLESTR), 'rglpwstrName']])),
    WritePropertyNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpropid'], [Pointer(T.PROPID), 'rgpropid'], [Pointer(T.LPOLESTR), 'rglpwstrName']])),
    DeletePropertyNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpropid'], [Pointer(T.PROPID), 'rgpropid']])),
    Commit: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.DWORD, 'grfCommitFlags']])),
    Revert: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This']])),
    Enum: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(Pointer(T.IEnumSTATPROPSTG)), 'ppenum']])),
    SetTimes: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(T.FILETIME), 'pctime'], [Pointer(T.FILETIME), 'patime'], [Pointer(T.FILETIME), 'pmtime']])),
    SetClass: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(T.CLSID), 'clsid']])),
    Stat: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(T.STATPROPSETSTG), 'statpsstg']]))
});};
T.LPPROPERTYSETSTORAGE = function() {return Pointer(T.IPropertySetStorage);};
T.IPropertySetStorageVtbl = function() {return Struct('IPropertySetStorageVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPropertySetStorage), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPropertySetStorage), 'This']])),
    Create: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(T.FMTID), 'rfmtid'], [Pointer(T.CLSID), 'pclsid'], [T.DWORD, 'grfFlags'], [T.DWORD, 'grfMode'], [Pointer(Pointer(T.IPropertyStorage)), 'ppprstg']])),
    Open: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(T.FMTID), 'rfmtid'], [T.DWORD, 'grfMode'], [Pointer(Pointer(T.IPropertyStorage)), 'ppprstg']])),
    Delete: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(T.FMTID), 'rfmtid']])),
    Enum: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(Pointer(T.IEnumSTATPROPSETSTG)), 'ppenum']]))
});};
T.LPENUMSTATPROPSTG = function() {return Pointer(T.IEnumSTATPROPSTG);};
T.IEnumSTATPROPSTGVtbl = function() {return Struct('IEnumSTATPROPSTGVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumSTATPROPSTG), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumSTATPROPSTG), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATPROPSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [Pointer(Pointer(T.IEnumSTATPROPSTG)), 'ppenum']]))
});};
T.LPENUMSTATPROPSETSTG = function() {return Pointer(T.IEnumSTATPROPSETSTG);};
T.IEnumSTATPROPSETSTGVtbl = function() {return Struct('IEnumSTATPROPSETSTGVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumSTATPROPSETSTG), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumSTATPROPSETSTG), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATPROPSETSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [Pointer(Pointer(T.IEnumSTATPROPSETSTG)), 'ppenum']]))
});};
T.UDATE = function() {return Struct('', {
    st: T.SYSTEMTIME,
    wDayOfYear: T.USHORT
});};
T.NUMPARSE = function() {return Struct('', {
    cDig: T.INT,
    dwInFlags: T.ULONG,
    dwOutFlags: T.ULONG,
    cchUsed: T.INT,
    nBaseShift: T.INT,
    nPwr10: T.INT
});};
T.PARAMDATA = function() {return Struct('tagPARAMDATA', {
    szName: Pointer(T.OLECHAR),
    vt: T.VARTYPE
});};
T.LPPARAMDATA = function() {return Pointer(Struct('tagPARAMDATA', {
    szName: Pointer(T.OLECHAR),
    vt: T.VARTYPE
}));};
T.METHODDATA = function() {return Struct('tagMETHODDATA', {
    szName: Pointer(T.OLECHAR),
    ppdata: Pointer(T.PARAMDATA),
    dispid: T.DISPID,
    iMeth: T.UINT,
    cc: T.CALLCONV,
    cArgs: T.UINT,
    wFlags: T.WORD,
    vtReturn: T.VARTYPE
});};
T.LPMETHODDATA = function() {return Pointer(Struct('tagMETHODDATA', {
    szName: Pointer(T.OLECHAR),
    ppdata: Pointer(T.PARAMDATA),
    dispid: T.DISPID,
    iMeth: T.UINT,
    cc: T.CALLCONV,
    cArgs: T.UINT,
    wFlags: T.WORD,
    vtReturn: T.VARTYPE
}));};
T.INTERFACEDATA = function() {return Struct('tagINTERFACEDATA', {
    pmethdata: Pointer(T.METHODDATA),
    cMembers: T.UINT
});};
T.LPINTERFACEDATA = function() {return Pointer(Struct('tagINTERFACEDATA', {
    pmethdata: Pointer(T.METHODDATA),
    cMembers: T.UINT
}));};
T.REGKIND = function() {return Enum('REGKIND_NONE', {
    REGKIND_DEFAULT: 0,
    REGKIND_REGISTER: 1,
    REGKIND_NONE: 2
});};
T.LPOLESTREAM = function() {return Pointer(Struct('_OLESTREAM', null));};
T.OLESTREAMVTBL = function() {return Struct('_OLESTREAMVTBL', {
    Get: Pointer(Fn(T.DWORD, [[T.LPOLESTREAM], [T.LPSTR], [T.DWORD]])),
    Put: Pointer(Fn(T.DWORD, [[T.LPOLESTREAM], [T.LPSTR], [T.DWORD]]))
});};
T.LPOLESTREAMVTBL = function() {return Pointer(T.OLESTREAMVTBL);};
T.OLESTREAM = function() {return Struct('_OLESTREAM', {
    lpstbl: T.LPOLESTREAMVTBL
});};
T.HPROPSHEETPAGE = function() {return Pointer(Struct('_PSP', null));};
T.LPFNPSPCALLBACKA = function() {return Pointer(Fn(T.UINT, [[T.HWND], [T.UINT], [Pointer(Struct('_PROPSHEETPAGEA', null))]]), [['stdcall']]);};
T.LPFNPSPCALLBACKW = function() {return Pointer(Fn(T.UINT, [[T.HWND], [T.UINT], [Pointer(Struct('_PROPSHEETPAGEW', null))]]), [['stdcall']]);};
T.PFNPROPSHEETCALLBACK = function() {return Pointer(Fn(T.INT, [[T.HWND], [T.UINT], [T.LPARAM]]), [['stdcall']]);};
T.LPFNADDPROPSHEETPAGE = function() {return Pointer(Fn(T.BOOL, [[T.HPROPSHEETPAGE], [T.LPARAM]]), [['stdcall']]);};
T.LPFNADDPROPSHEETPAGES = function() {return Pointer(Fn(T.BOOL, [[T.LPVOID], [T.LPFNADDPROPSHEETPAGE], [T.LPARAM]]), [['stdcall']]);};
T.PROPSHEETPAGEA = function() {return Struct('_PROPSHEETPAGEA', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    hInstance: T.HINSTANCE,
    __unnamed0: Union('', {
        pszTemplate: T.LPCSTR,
        pResource: T.LPCDLGTEMPLATEA
    }),
    __unnamed1: Union('', {
        hIcon: T.HICON,
        pszIcon: T.LPCSTR
    }),
    pszTitle: T.LPCSTR,
    pfnDlgProc: T.DLGPROC,
    lParam: T.LPARAM,
    pfnCallback: T.LPFNPSPCALLBACKA,
    pcRefParent: Pointer(T.UINT),
    pszHeaderTitle: T.LPCSTR,
    pszHeaderSubTitle: T.LPCSTR
});};
T.LPPROPSHEETPAGEA = function() {return Pointer(Struct('_PROPSHEETPAGEA', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    hInstance: T.HINSTANCE,
    __unnamed0: Union('', {
        pszTemplate: T.LPCSTR,
        pResource: T.LPCDLGTEMPLATEA
    }),
    __unnamed1: Union('', {
        hIcon: T.HICON,
        pszIcon: T.LPCSTR
    }),
    pszTitle: T.LPCSTR,
    pfnDlgProc: T.DLGPROC,
    lParam: T.LPARAM,
    pfnCallback: T.LPFNPSPCALLBACKA,
    pcRefParent: Pointer(T.UINT),
    pszHeaderTitle: T.LPCSTR,
    pszHeaderSubTitle: T.LPCSTR
}));};
T.LPCPROPSHEETPAGEA = function() {return Pointer(T.PROPSHEETPAGEA, [['const']]);};
T.PROPSHEETPAGEW = function() {return Struct('_PROPSHEETPAGEW', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    hInstance: T.HINSTANCE,
    __unnamed0: Union('', {
        pszTemplate: T.LPCWSTR,
        pResource: T.LPCDLGTEMPLATEW
    }),
    __unnamed1: Union('', {
        hIcon: T.HICON,
        pszIcon: T.LPCWSTR
    }),
    pszTitle: T.LPCWSTR,
    pfnDlgProc: T.DLGPROC,
    lParam: T.LPARAM,
    pfnCallback: T.LPFNPSPCALLBACKW,
    pcRefParent: Pointer(T.UINT),
    pszHeaderTitle: T.LPCWSTR,
    pszHeaderSubTitle: T.LPCWSTR
});};
T.LPPROPSHEETPAGEW = function() {return Pointer(Struct('_PROPSHEETPAGEW', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    hInstance: T.HINSTANCE,
    __unnamed0: Union('', {
        pszTemplate: T.LPCWSTR,
        pResource: T.LPCDLGTEMPLATEW
    }),
    __unnamed1: Union('', {
        hIcon: T.HICON,
        pszIcon: T.LPCWSTR
    }),
    pszTitle: T.LPCWSTR,
    pfnDlgProc: T.DLGPROC,
    lParam: T.LPARAM,
    pfnCallback: T.LPFNPSPCALLBACKW,
    pcRefParent: Pointer(T.UINT),
    pszHeaderTitle: T.LPCWSTR,
    pszHeaderSubTitle: T.LPCWSTR
}));};
T.LPCPROPSHEETPAGEW = function() {return Pointer(T.PROPSHEETPAGEW, [['const']]);};
T.PROPSHEETHEADERA = function() {return Struct('_PROPSHEETHEADERA', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    hwndParent: T.HWND,
    hInstance: T.HINSTANCE,
    __unnamed0: Union('', {
        hIcon: T.HICON,
        pszIcon: T.LPCSTR
    }),
    pszCaption: T.LPCSTR,
    nPages: T.UINT,
    __unnamed1: Union('', {
        nStartPage: T.UINT,
        pStartPage: T.LPCSTR
    }),
    __unnamed2: Union('', {
        ppsp: T.LPCPROPSHEETPAGEA,
        phpage: Pointer(T.HPROPSHEETPAGE)
    }),
    pfnCallback: T.PFNPROPSHEETCALLBACK,
    __unnamed3: Union('', {
        hbmWatermark: T.HBITMAP,
        pszbmWatermark: T.LPCSTR
    }),
    hplWatermark: T.HPALETTE,
    __unnamed4: Union('', {
        hbmHeader: T.HBITMAP,
        pszbmHeader: T.LPCSTR
    })
});};
T.LPPROPSHEETHEADERA = function() {return Pointer(Struct('_PROPSHEETHEADERA', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    hwndParent: T.HWND,
    hInstance: T.HINSTANCE,
    __unnamed0: Union('', {
        hIcon: T.HICON,
        pszIcon: T.LPCSTR
    }),
    pszCaption: T.LPCSTR,
    nPages: T.UINT,
    __unnamed1: Union('', {
        nStartPage: T.UINT,
        pStartPage: T.LPCSTR
    }),
    __unnamed2: Union('', {
        ppsp: T.LPCPROPSHEETPAGEA,
        phpage: Pointer(T.HPROPSHEETPAGE)
    }),
    pfnCallback: T.PFNPROPSHEETCALLBACK,
    __unnamed3: Union('', {
        hbmWatermark: T.HBITMAP,
        pszbmWatermark: T.LPCSTR
    }),
    hplWatermark: T.HPALETTE,
    __unnamed4: Union('', {
        hbmHeader: T.HBITMAP,
        pszbmHeader: T.LPCSTR
    })
}));};
T.LPCPROPSHEETHEADERA = function() {return Pointer(T.PROPSHEETHEADERA, [['const']]);};
T.PROPSHEETHEADERW = function() {return Struct('_PROPSHEETHEADERW', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    hwndParent: T.HWND,
    hInstance: T.HINSTANCE,
    __unnamed0: Union('', {
        hIcon: T.HICON,
        pszIcon: T.LPCWSTR
    }),
    pszCaption: T.LPCWSTR,
    nPages: T.UINT,
    __unnamed1: Union('', {
        nStartPage: T.UINT,
        pStartPage: T.LPCWSTR
    }),
    __unnamed2: Union('', {
        ppsp: T.LPCPROPSHEETPAGEW,
        phpage: Pointer(T.HPROPSHEETPAGE)
    }),
    pfnCallback: T.PFNPROPSHEETCALLBACK,
    __unnamed3: Union('', {
        hbmWatermark: T.HBITMAP,
        pszbmWatermark: T.LPCWSTR
    }),
    hplWatermark: T.HPALETTE,
    __unnamed4: Union('', {
        hbmHeader: T.HBITMAP,
        pszbmHeader: T.LPCWSTR
    })
});};
T.LPPROPSHEETHEADERW = function() {return Pointer(Struct('_PROPSHEETHEADERW', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    hwndParent: T.HWND,
    hInstance: T.HINSTANCE,
    __unnamed0: Union('', {
        hIcon: T.HICON,
        pszIcon: T.LPCWSTR
    }),
    pszCaption: T.LPCWSTR,
    nPages: T.UINT,
    __unnamed1: Union('', {
        nStartPage: T.UINT,
        pStartPage: T.LPCWSTR
    }),
    __unnamed2: Union('', {
        ppsp: T.LPCPROPSHEETPAGEW,
        phpage: Pointer(T.HPROPSHEETPAGE)
    }),
    pfnCallback: T.PFNPROPSHEETCALLBACK,
    __unnamed3: Union('', {
        hbmWatermark: T.HBITMAP,
        pszbmWatermark: T.LPCWSTR
    }),
    hplWatermark: T.HPALETTE,
    __unnamed4: Union('', {
        hbmHeader: T.HBITMAP,
        pszbmHeader: T.LPCWSTR
    })
}));};
T.LPCPROPSHEETHEADERW = function() {return Pointer(T.PROPSHEETHEADERW, [['const']]);};
T.PROPSHEETPAGE = function() {return T.PROPSHEETPAGEA;};
T.LPPROPSHEETPAGE = function() {return T.LPPROPSHEETPAGEA;};
T.LPCPROPSHEETPAGE = function() {return T.LPCPROPSHEETPAGEA;};
T.PROPSHEETHEADER = function() {return T.PROPSHEETHEADERA;};
T.LPPROPSHEETHEADER = function() {return T.LPPROPSHEETHEADERA;};
T.LPCPROPSHEETHEADER = function() {return T.LPCPROPSHEETHEADERA;};
T.LPFNPSPCALLBACK = function() {return T.LPFNPSPCALLBACKA;};
T.PSHNOTIFY = function() {return Struct('_PSHNOTIFY', {
    hdr: T.NMHDR,
    lParam: T.LPARAM
});};
T.LPPSHNOTIFY = function() {return Pointer(Struct('_PSHNOTIFY', {
    hdr: T.NMHDR,
    lParam: T.LPARAM
}));};
T.LPOFNHOOKPROC = function() {return Pointer(Fn(T.UINT_PTR, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]), [['stdcall']]);};
T.OPENFILENAMEA = function() {return Struct('tagOFNA', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpstrFilter: T.LPCSTR,
    lpstrCustomFilter: T.LPSTR,
    nMaxCustFilter: T.DWORD,
    nFilterIndex: T.DWORD,
    lpstrFile: T.LPSTR,
    nMaxFile: T.DWORD,
    lpstrFileTitle: T.LPSTR,
    nMaxFileTitle: T.DWORD,
    lpstrInitialDir: T.LPCSTR,
    lpstrTitle: T.LPCSTR,
    Flags: T.DWORD,
    nFileOffset: T.WORD,
    nFileExtension: T.WORD,
    lpstrDefExt: T.LPCSTR,
    lCustData: T.LPARAM,
    lpfnHook: T.LPOFNHOOKPROC,
    lpTemplateName: T.LPCSTR
});};
T.LPOPENFILENAMEA = function() {return Pointer(Struct('tagOFNA', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpstrFilter: T.LPCSTR,
    lpstrCustomFilter: T.LPSTR,
    nMaxCustFilter: T.DWORD,
    nFilterIndex: T.DWORD,
    lpstrFile: T.LPSTR,
    nMaxFile: T.DWORD,
    lpstrFileTitle: T.LPSTR,
    nMaxFileTitle: T.DWORD,
    lpstrInitialDir: T.LPCSTR,
    lpstrTitle: T.LPCSTR,
    Flags: T.DWORD,
    nFileOffset: T.WORD,
    nFileExtension: T.WORD,
    lpstrDefExt: T.LPCSTR,
    lCustData: T.LPARAM,
    lpfnHook: T.LPOFNHOOKPROC,
    lpTemplateName: T.LPCSTR
}));};
T.OPENFILENAMEW = function() {return Struct('tagOFNW', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpstrFilter: T.LPCWSTR,
    lpstrCustomFilter: T.LPWSTR,
    nMaxCustFilter: T.DWORD,
    nFilterIndex: T.DWORD,
    lpstrFile: T.LPWSTR,
    nMaxFile: T.DWORD,
    lpstrFileTitle: T.LPWSTR,
    nMaxFileTitle: T.DWORD,
    lpstrInitialDir: T.LPCWSTR,
    lpstrTitle: T.LPCWSTR,
    Flags: T.DWORD,
    nFileOffset: T.WORD,
    nFileExtension: T.WORD,
    lpstrDefExt: T.LPCWSTR,
    lCustData: T.LPARAM,
    lpfnHook: T.LPOFNHOOKPROC,
    lpTemplateName: T.LPCWSTR
});};
T.LPOPENFILENAMEW = function() {return Pointer(Struct('tagOFNW', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpstrFilter: T.LPCWSTR,
    lpstrCustomFilter: T.LPWSTR,
    nMaxCustFilter: T.DWORD,
    nFilterIndex: T.DWORD,
    lpstrFile: T.LPWSTR,
    nMaxFile: T.DWORD,
    lpstrFileTitle: T.LPWSTR,
    nMaxFileTitle: T.DWORD,
    lpstrInitialDir: T.LPCWSTR,
    lpstrTitle: T.LPCWSTR,
    Flags: T.DWORD,
    nFileOffset: T.WORD,
    nFileExtension: T.WORD,
    lpstrDefExt: T.LPCWSTR,
    lCustData: T.LPARAM,
    lpfnHook: T.LPOFNHOOKPROC,
    lpTemplateName: T.LPCWSTR
}));};
T.OPENFILENAME = function() {return T.OPENFILENAMEA;};
T.LPOPENFILENAME = function() {return T.LPOPENFILENAMEA;};
T.OFNOTIFYA = function() {return Struct('', {
    hdr: T.NMHDR,
    lpOFN: T.LPOPENFILENAMEA,
    pszFile: T.LPSTR
});};
T.LPOFNOTIFYA = function() {return Pointer(Struct('', {
    hdr: T.NMHDR,
    lpOFN: T.LPOPENFILENAMEA,
    pszFile: T.LPSTR
}));};
T.OFNOTIFYW = function() {return Struct('', {
    hdr: T.NMHDR,
    lpOFN: T.LPOPENFILENAMEW,
    pszFile: T.LPWSTR
});};
T.LPOFNOTIFYW = function() {return Pointer(Struct('', {
    hdr: T.NMHDR,
    lpOFN: T.LPOPENFILENAMEW,
    pszFile: T.LPWSTR
}));};
T.OFNOTIFY = function() {return T.OFNOTIFYA;};
T.LPOFNOTIFY = function() {return T.LPOFNOTIFYA;};
T.OFNOTIFYEXA = function() {return Struct('_OFNOTIFYEXA', {
    hdr: T.NMHDR,
    lpOFN: T.LPOPENFILENAMEA,
    psf: T.LPVOID,
    pidl: T.LPVOID
});};
T.LPOFNOTIFYEXA = function() {return Pointer(Struct('_OFNOTIFYEXA', {
    hdr: T.NMHDR,
    lpOFN: T.LPOPENFILENAMEA,
    psf: T.LPVOID,
    pidl: T.LPVOID
}));};
T.OFNOTIFYEXW = function() {return Struct('_OFNOTIFYEXW', {
    hdr: T.NMHDR,
    lpOFN: T.LPOPENFILENAMEW,
    psf: T.LPVOID,
    pidl: T.LPVOID
});};
T.LPOFNOTIFYEXW = function() {return Pointer(Struct('_OFNOTIFYEXW', {
    hdr: T.NMHDR,
    lpOFN: T.LPOPENFILENAMEW,
    psf: T.LPVOID,
    pidl: T.LPVOID
}));};
T.OFNOTIFYEX = function() {return T.OFNOTIFYEXA;};
T.LPOFNOTIFYEX = function() {return T.LPOFNOTIFYEXA;};
T.LPCCHOOKPROC = function() {return Pointer(Fn(T.UINT_PTR, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]), [['stdcall']]);};
T.CHOOSECOLORA = function() {return Struct('', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HWND,
    rgbResult: T.DWORD,
    lpCustColors: T.LPDWORD,
    Flags: T.DWORD,
    lCustData: T.DWORD,
    lpfnHook: T.LPCCHOOKPROC,
    lpTemplateName: T.LPCSTR
});};
T.LPCHOOSECOLORA = function() {return Pointer(T.CHOOSECOLORA);};
T.CHOOSECOLORW = function() {return Struct('', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HWND,
    rgbResult: T.DWORD,
    lpCustColors: T.LPDWORD,
    Flags: T.DWORD,
    lCustData: T.DWORD,
    lpfnHook: T.LPCCHOOKPROC,
    lpTemplateName: T.LPCWSTR
});};
T.LPCHOOSECOLORW = function() {return Pointer(T.CHOOSECOLORW);};
T.CHOOSECOLOR = function() {return T.CHOOSECOLORA;};
T.LPCHOOSECOLOR = function() {return T.LPCHOOSECOLORA;};
T.LPFRHOOKPROC = function() {return Pointer(Fn(T.UINT_PTR, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]), [['stdcall']]);};
T.FINDREPLACEA = function() {return Struct('', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    Flags: T.DWORD,
    lpstrFindWhat: T.LPSTR,
    lpstrReplaceWith: T.LPSTR,
    wFindWhatLen: T.WORD,
    wReplaceWithLen: T.WORD,
    lCustData: T.LPARAM,
    lpfnHook: T.LPFRHOOKPROC,
    lpTemplateName: T.LPCSTR
});};
T.LPFINDREPLACEA = function() {return Pointer(Struct('', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    Flags: T.DWORD,
    lpstrFindWhat: T.LPSTR,
    lpstrReplaceWith: T.LPSTR,
    wFindWhatLen: T.WORD,
    wReplaceWithLen: T.WORD,
    lCustData: T.LPARAM,
    lpfnHook: T.LPFRHOOKPROC,
    lpTemplateName: T.LPCSTR
}));};
T.FINDREPLACEW = function() {return Struct('', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    Flags: T.DWORD,
    lpstrFindWhat: T.LPWSTR,
    lpstrReplaceWith: T.LPWSTR,
    wFindWhatLen: T.WORD,
    wReplaceWithLen: T.WORD,
    lCustData: T.LPARAM,
    lpfnHook: T.LPFRHOOKPROC,
    lpTemplateName: T.LPCWSTR
});};
T.LPFINDREPLACEW = function() {return Pointer(Struct('', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    Flags: T.DWORD,
    lpstrFindWhat: T.LPWSTR,
    lpstrReplaceWith: T.LPWSTR,
    wFindWhatLen: T.WORD,
    wReplaceWithLen: T.WORD,
    lCustData: T.LPARAM,
    lpfnHook: T.LPFRHOOKPROC,
    lpTemplateName: T.LPCWSTR
}));};
T.FINDREPLACE = function() {return T.FINDREPLACEA;};
T.LPFINDREPLACE = function() {return T.LPFINDREPLACEA;};
T.LPCFHOOKPROC = function() {return Pointer(Fn(T.UINT_PTR, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]), [['stdcall']]);};
T.CHOOSEFONTA = function() {return Struct('tagCHOOSEFONTA', {
    lStructSize: T.UINT,
    hwndOwner: T.HWND,
    hDC: T.HDC,
    lpLogFont: T.LPLOGFONTA,
    iPointSize: T.INT,
    Flags: T.DWORD,
    rgbColors: T.COLORREF,
    lCustData: T.LPARAM,
    lpfnHook: T.LPCFHOOKPROC,
    lpTemplateName: T.LPCSTR,
    hInstance: T.HINSTANCE,
    lpszStyle: T.LPSTR,
    nFontType: T.WORD,
    ___MISSING_ALIGNMENT__: T.WORD,
    nSizeMin: T.INT,
    nSizeMax: T.INT
});};
T.LPCHOOSEFONTA = function() {return Pointer(Struct('tagCHOOSEFONTA', {
    lStructSize: T.UINT,
    hwndOwner: T.HWND,
    hDC: T.HDC,
    lpLogFont: T.LPLOGFONTA,
    iPointSize: T.INT,
    Flags: T.DWORD,
    rgbColors: T.COLORREF,
    lCustData: T.LPARAM,
    lpfnHook: T.LPCFHOOKPROC,
    lpTemplateName: T.LPCSTR,
    hInstance: T.HINSTANCE,
    lpszStyle: T.LPSTR,
    nFontType: T.WORD,
    ___MISSING_ALIGNMENT__: T.WORD,
    nSizeMin: T.INT,
    nSizeMax: T.INT
}));};
T.CHOOSEFONTW = function() {return Struct('tagCHOOSEFONTW', {
    lStructSize: T.UINT,
    hwndOwner: T.HWND,
    hDC: T.HDC,
    lpLogFont: T.LPLOGFONTW,
    iPointSize: T.INT,
    Flags: T.DWORD,
    rgbColors: T.COLORREF,
    lCustData: T.LPARAM,
    lpfnHook: T.LPCFHOOKPROC,
    lpTemplateName: T.LPCWSTR,
    hInstance: T.HINSTANCE,
    lpszStyle: T.LPWSTR,
    nFontType: T.WORD,
    ___MISSING_ALIGNMENT__: T.WORD,
    nSizeMin: T.INT,
    nSizeMax: T.INT
});};
T.LPCHOOSEFONTW = function() {return Pointer(Struct('tagCHOOSEFONTW', {
    lStructSize: T.UINT,
    hwndOwner: T.HWND,
    hDC: T.HDC,
    lpLogFont: T.LPLOGFONTW,
    iPointSize: T.INT,
    Flags: T.DWORD,
    rgbColors: T.COLORREF,
    lCustData: T.LPARAM,
    lpfnHook: T.LPCFHOOKPROC,
    lpTemplateName: T.LPCWSTR,
    hInstance: T.HINSTANCE,
    lpszStyle: T.LPWSTR,
    nFontType: T.WORD,
    ___MISSING_ALIGNMENT__: T.WORD,
    nSizeMin: T.INT,
    nSizeMax: T.INT
}));};
T.CHOOSEFONT = function() {return T.CHOOSEFONTA;};
T.LPCHOOSEFONT = function() {return T.LPCHOOSEFONTA;};
T.LPPRINTHOOKPROC = function() {return Pointer(Fn(T.UINT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]), [['stdcall']]);};
T.LPSETUPHOOKPROC = function() {return Pointer(Fn(T.UINT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]), [['stdcall']]);};
T.PRINTDLGA = function() {return Struct('tagPDA', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    hDC: T.HDC,
    Flags: T.DWORD,
    nFromPage: T.WORD,
    nToPage: T.WORD,
    nMinPage: T.WORD,
    nMaxPage: T.WORD,
    nCopies: T.WORD,
    hInstance: T.HINSTANCE,
    lCustData: T.LPARAM,
    lpfnPrintHook: T.LPPRINTHOOKPROC,
    lpfnSetupHook: T.LPSETUPHOOKPROC,
    lpPrintTemplateName: T.LPCSTR,
    lpSetupTemplateName: T.LPCSTR,
    hPrintTemplate: T.HGLOBAL,
    hSetupTemplate: T.HGLOBAL
});};
T.LPPRINTDLGA = function() {return Pointer(Struct('tagPDA', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    hDC: T.HDC,
    Flags: T.DWORD,
    nFromPage: T.WORD,
    nToPage: T.WORD,
    nMinPage: T.WORD,
    nMaxPage: T.WORD,
    nCopies: T.WORD,
    hInstance: T.HINSTANCE,
    lCustData: T.LPARAM,
    lpfnPrintHook: T.LPPRINTHOOKPROC,
    lpfnSetupHook: T.LPSETUPHOOKPROC,
    lpPrintTemplateName: T.LPCSTR,
    lpSetupTemplateName: T.LPCSTR,
    hPrintTemplate: T.HGLOBAL,
    hSetupTemplate: T.HGLOBAL
}));};
T.PRINTDLGW = function() {return Struct('tagPDW', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    hDC: T.HDC,
    Flags: T.DWORD,
    nFromPage: T.WORD,
    nToPage: T.WORD,
    nMinPage: T.WORD,
    nMaxPage: T.WORD,
    nCopies: T.WORD,
    hInstance: T.HINSTANCE,
    lCustData: T.LPARAM,
    lpfnPrintHook: T.LPPRINTHOOKPROC,
    lpfnSetupHook: T.LPSETUPHOOKPROC,
    lpPrintTemplateName: T.LPCWSTR,
    lpSetupTemplateName: T.LPCWSTR,
    hPrintTemplate: T.HGLOBAL,
    hSetupTemplate: T.HGLOBAL
});};
T.LPPRINTDLGW = function() {return Pointer(Struct('tagPDW', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    hDC: T.HDC,
    Flags: T.DWORD,
    nFromPage: T.WORD,
    nToPage: T.WORD,
    nMinPage: T.WORD,
    nMaxPage: T.WORD,
    nCopies: T.WORD,
    hInstance: T.HINSTANCE,
    lCustData: T.LPARAM,
    lpfnPrintHook: T.LPPRINTHOOKPROC,
    lpfnSetupHook: T.LPSETUPHOOKPROC,
    lpPrintTemplateName: T.LPCWSTR,
    lpSetupTemplateName: T.LPCWSTR,
    hPrintTemplate: T.HGLOBAL,
    hSetupTemplate: T.HGLOBAL
}));};
T.PRINTDLG = function() {return T.PRINTDLGA;};
T.LPPRINTDLG = function() {return T.LPPRINTDLGA;};
T.DEVNAMES = function() {return Struct('', {
    wDriverOffset: T.WORD,
    wDeviceOffset: T.WORD,
    wOutputOffset: T.WORD,
    wDefault: T.WORD
});};
T.LPDEVNAMES = function() {return Pointer(T.DEVNAMES);};
T.LPPAGEPAINTHOOK = function() {return Pointer(Fn(T.UINT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]), [['stdcall']]);};
T.LPPAGESETUPHOOK = function() {return Pointer(Fn(T.UINT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]), [['stdcall']]);};
T.PAGESETUPDLGA = function() {return Struct('tagPSDA', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    Flags: T.DWORD,
    ptPaperSize: T.POINT,
    rtMinMargin: T.RECT,
    rtMargin: T.RECT,
    hInstance: T.HINSTANCE,
    lCustData: T.LPARAM,
    lpfnPageSetupHook: T.LPPAGESETUPHOOK,
    lpfnPagePaintHook: T.LPPAGEPAINTHOOK,
    lpPageSetupTemplateName: T.LPCSTR,
    hPageSetupTemplate: T.HGLOBAL
});};
T.LPPAGESETUPDLGA = function() {return Pointer(Struct('tagPSDA', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    Flags: T.DWORD,
    ptPaperSize: T.POINT,
    rtMinMargin: T.RECT,
    rtMargin: T.RECT,
    hInstance: T.HINSTANCE,
    lCustData: T.LPARAM,
    lpfnPageSetupHook: T.LPPAGESETUPHOOK,
    lpfnPagePaintHook: T.LPPAGEPAINTHOOK,
    lpPageSetupTemplateName: T.LPCSTR,
    hPageSetupTemplate: T.HGLOBAL
}));};
T.PAGESETUPDLGW = function() {return Struct('tagPSDW', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    Flags: T.DWORD,
    ptPaperSize: T.POINT,
    rtMinMargin: T.RECT,
    rtMargin: T.RECT,
    hInstance: T.HINSTANCE,
    lCustData: T.LPARAM,
    lpfnPageSetupHook: T.LPPAGESETUPHOOK,
    lpfnPagePaintHook: T.LPPAGEPAINTHOOK,
    lpPageSetupTemplateName: T.LPCWSTR,
    hPageSetupTemplate: T.HGLOBAL
});};
T.LPPAGESETUPDLGW = function() {return Pointer(Struct('tagPSDW', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    Flags: T.DWORD,
    ptPaperSize: T.POINT,
    rtMinMargin: T.RECT,
    rtMargin: T.RECT,
    hInstance: T.HINSTANCE,
    lCustData: T.LPARAM,
    lpfnPageSetupHook: T.LPPAGESETUPHOOK,
    lpfnPagePaintHook: T.LPPAGEPAINTHOOK,
    lpPageSetupTemplateName: T.LPCWSTR,
    hPageSetupTemplate: T.HGLOBAL
}));};
T.PAGESETUPDLG = function() {return T.PAGESETUPDLGA;};
T.LPPAGESETUPDLG = function() {return T.LPPAGESETUPDLGA;};
T.PRINTPAGERANGE = function() {return Struct('tagPRINTPAGERANGE', {
    nFromPage: T.DWORD,
    nToPage: T.DWORD
});};
T.LPPRINTPAGERANGE = function() {return Pointer(Struct('tagPRINTPAGERANGE', {
    nFromPage: T.DWORD,
    nToPage: T.DWORD
}));};
T.PRINTDLGEXA = function() {return Struct('tagPDEXA', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    hDC: T.HDC,
    Flags: T.DWORD,
    Flags2: T.DWORD,
    ExclusionFlags: T.DWORD,
    nPageRanges: T.DWORD,
    nMaxPageRanges: T.DWORD,
    lpPageRanges: T.LPPRINTPAGERANGE,
    nMinPage: T.DWORD,
    nMaxPage: T.DWORD,
    nCopies: T.DWORD,
    hInstance: T.HINSTANCE,
    lpPrintTemplateName: T.LPCSTR,
    lpCallback: Pointer(null),
    nPropertyPages: T.DWORD,
    lphPropertyPages: Pointer(T.HPROPSHEETPAGE),
    nStartPage: T.DWORD,
    dwResultAction: T.DWORD
});};
T.LPPRINTDLGEXA = function() {return Pointer(Struct('tagPDEXA', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    hDC: T.HDC,
    Flags: T.DWORD,
    Flags2: T.DWORD,
    ExclusionFlags: T.DWORD,
    nPageRanges: T.DWORD,
    nMaxPageRanges: T.DWORD,
    lpPageRanges: T.LPPRINTPAGERANGE,
    nMinPage: T.DWORD,
    nMaxPage: T.DWORD,
    nCopies: T.DWORD,
    hInstance: T.HINSTANCE,
    lpPrintTemplateName: T.LPCSTR,
    lpCallback: Pointer(null),
    nPropertyPages: T.DWORD,
    lphPropertyPages: Pointer(T.HPROPSHEETPAGE),
    nStartPage: T.DWORD,
    dwResultAction: T.DWORD
}));};
T.PRINTDLGEXW = function() {return Struct('tagPDEXW', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    hDC: T.HDC,
    Flags: T.DWORD,
    Flags2: T.DWORD,
    ExclusionFlags: T.DWORD,
    nPageRanges: T.DWORD,
    nMaxPageRanges: T.DWORD,
    lpPageRanges: T.LPPRINTPAGERANGE,
    nMinPage: T.DWORD,
    nMaxPage: T.DWORD,
    nCopies: T.DWORD,
    hInstance: T.HINSTANCE,
    lpPrintTemplateName: T.LPCWSTR,
    lpCallback: Pointer(null),
    nPropertyPages: T.DWORD,
    lphPropertyPages: Pointer(T.HPROPSHEETPAGE),
    nStartPage: T.DWORD,
    dwResultAction: T.DWORD
});};
T.LPPRINTDLGEXW = function() {return Pointer(Struct('tagPDEXW', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    hDC: T.HDC,
    Flags: T.DWORD,
    Flags2: T.DWORD,
    ExclusionFlags: T.DWORD,
    nPageRanges: T.DWORD,
    nMaxPageRanges: T.DWORD,
    lpPageRanges: T.LPPRINTPAGERANGE,
    nMinPage: T.DWORD,
    nMaxPage: T.DWORD,
    nCopies: T.DWORD,
    hInstance: T.HINSTANCE,
    lpPrintTemplateName: T.LPCWSTR,
    lpCallback: Pointer(null),
    nPropertyPages: T.DWORD,
    lphPropertyPages: Pointer(T.HPROPSHEETPAGE),
    nStartPage: T.DWORD,
    dwResultAction: T.DWORD
}));};
T.PRINTDLGEX = function() {return T.PRINTDLGEXA;};
T.LPPRINTDLGEX = function() {return T.LPPRINTDLGEXA;};
T.SC_HANDLE = function() {return Pointer(Struct('SC_HANDLE__', {
    unused: T.i32
}));};
T.LPSC_HANDLE = function() {return Pointer(T.SC_HANDLE);};
T.SERVICE_STATUS_HANDLE = function() {return Pointer(Struct('SERVICE_STATUS_HANDLE__', {
    unused: T.i32
}));};
T.SC_LOCK = function() {return T.LPVOID;};
T.SERVICE_STATUS = function() {return Struct('_SERVICE_STATUS', {
    dwServiceType: T.DWORD,
    dwCurrentState: T.DWORD,
    dwControlsAccepted: T.DWORD,
    dwWin32ExitCode: T.DWORD,
    dwServiceSpecificExitCode: T.DWORD,
    dwCheckPoint: T.DWORD,
    dwWaitHint: T.DWORD
});};
T.LPSERVICE_STATUS = function() {return Pointer(Struct('_SERVICE_STATUS', {
    dwServiceType: T.DWORD,
    dwCurrentState: T.DWORD,
    dwControlsAccepted: T.DWORD,
    dwWin32ExitCode: T.DWORD,
    dwServiceSpecificExitCode: T.DWORD,
    dwCheckPoint: T.DWORD,
    dwWaitHint: T.DWORD
}));};
T.SERVICE_STATUS_PROCESS = function() {return Struct('_SERVICE_STATUS_PROCESS', {
    dwServiceType: T.DWORD,
    dwCurrentState: T.DWORD,
    dwControlsAccepted: T.DWORD,
    dwWin32ExitCode: T.DWORD,
    dwServiceSpecificExitCode: T.DWORD,
    dwCheckPoint: T.DWORD,
    dwWaitHint: T.DWORD,
    dwProcessId: T.DWORD,
    dwServiceFlags: T.DWORD
});};
T.LPSERVICE_STATUS_PROCESS = function() {return Pointer(Struct('_SERVICE_STATUS_PROCESS', {
    dwServiceType: T.DWORD,
    dwCurrentState: T.DWORD,
    dwControlsAccepted: T.DWORD,
    dwWin32ExitCode: T.DWORD,
    dwServiceSpecificExitCode: T.DWORD,
    dwCheckPoint: T.DWORD,
    dwWaitHint: T.DWORD,
    dwProcessId: T.DWORD,
    dwServiceFlags: T.DWORD
}));};
T.SC_STATUS_TYPE = function() {return Enum('SC_STATUS_PROCESS_INFO', {
    SC_STATUS_PROCESS_INFO: 0
});};
T.LPSERVICE_MAIN_FUNCTIONA = function() {return Pointer(Fn(null, [[T.DWORD], [Pointer(T.LPSTR)]]), [['stdcall']]);};
T.LPSERVICE_MAIN_FUNCTIONW = function() {return Pointer(Fn(null, [[T.DWORD], [Pointer(T.LPWSTR)]]), [['stdcall']]);};
T.LPSERVICE_MAIN_FUNCTION = function() {return T.LPSERVICE_MAIN_FUNCTIONA;};
T.SERVICE_TABLE_ENTRYA = function() {return Struct('_SERVICE_TABLE_ENTRYA', {
    lpServiceName: T.LPSTR,
    lpServiceProc: T.LPSERVICE_MAIN_FUNCTIONA
});};
T.LPSERVICE_TABLE_ENTRYA = function() {return Pointer(Struct('_SERVICE_TABLE_ENTRYA', {
    lpServiceName: T.LPSTR,
    lpServiceProc: T.LPSERVICE_MAIN_FUNCTIONA
}));};
T.SERVICE_TABLE_ENTRYW = function() {return Struct('_SERVICE_TABLE_ENTRYW', {
    lpServiceName: T.LPWSTR,
    lpServiceProc: T.LPSERVICE_MAIN_FUNCTIONW
});};
T.LPSERVICE_TABLE_ENTRYW = function() {return Pointer(Struct('_SERVICE_TABLE_ENTRYW', {
    lpServiceName: T.LPWSTR,
    lpServiceProc: T.LPSERVICE_MAIN_FUNCTIONW
}));};
T.SERVICE_TABLE_ENTRY = function() {return T.SERVICE_TABLE_ENTRYA;};
T.LPSERVICE_TABLE_ENTRY = function() {return T.LPSERVICE_TABLE_ENTRYA;};
T.ENUM_SERVICE_STATUSA = function() {return Struct('_ENUM_SERVICE_STATUSA', {
    lpServiceName: T.LPSTR,
    lpDisplayName: T.LPSTR,
    ServiceStatus: T.SERVICE_STATUS
});};
T.LPENUM_SERVICE_STATUSA = function() {return Pointer(Struct('_ENUM_SERVICE_STATUSA', {
    lpServiceName: T.LPSTR,
    lpDisplayName: T.LPSTR,
    ServiceStatus: T.SERVICE_STATUS
}));};
T.ENUM_SERVICE_STATUSW = function() {return Struct('_ENUM_SERVICE_STATUSW', {
    lpServiceName: T.LPWSTR,
    lpDisplayName: T.LPWSTR,
    ServiceStatus: T.SERVICE_STATUS
});};
T.LPENUM_SERVICE_STATUSW = function() {return Pointer(Struct('_ENUM_SERVICE_STATUSW', {
    lpServiceName: T.LPWSTR,
    lpDisplayName: T.LPWSTR,
    ServiceStatus: T.SERVICE_STATUS
}));};
T.ENUM_SERVICE_STATUS = function() {return T.ENUM_SERVICE_STATUSA;};
T.LPENUM_SERVICE_STATUS = function() {return T.LPENUM_SERVICE_STATUSA;};
T.ENUM_SERVICE_STATUS_PROCESSA = function() {return Struct('_ENUM_SERVICE_STATUS_PROCESSA', {
    lpServiceName: T.LPSTR,
    lpDisplayName: T.LPSTR,
    ServiceStatusProcess: T.SERVICE_STATUS_PROCESS
});};
T.LPENUM_SERVICE_STATUS_PROCESSA = function() {return Pointer(Struct('_ENUM_SERVICE_STATUS_PROCESSA', {
    lpServiceName: T.LPSTR,
    lpDisplayName: T.LPSTR,
    ServiceStatusProcess: T.SERVICE_STATUS_PROCESS
}));};
T.ENUM_SERVICE_STATUS_PROCESSW = function() {return Struct('_ENUM_SERVICE_STATUS_PROCESSW', {
    lpServiceName: T.LPWSTR,
    lpDisplayName: T.LPWSTR,
    ServiceStatusProcess: T.SERVICE_STATUS_PROCESS
});};
T.LPENUM_SERVICE_STATUS_PROCESSW = function() {return Pointer(Struct('_ENUM_SERVICE_STATUS_PROCESSW', {
    lpServiceName: T.LPWSTR,
    lpDisplayName: T.LPWSTR,
    ServiceStatusProcess: T.SERVICE_STATUS_PROCESS
}));};
T.ENUM_SERVICE_STATUS_PROCESS = function() {return T.ENUM_SERVICE_STATUS_PROCESSA;};
T.LPENUM_SERVICE_STATUS_PROCESS = function() {return T.LPENUM_SERVICE_STATUS_PROCESSA;};
T.SC_ENUM_TYPE = function() {return Enum('SC_ENUM_PROCESS_INFO', {
    SC_ENUM_PROCESS_INFO: 0
});};
T.QUERY_SERVICE_CONFIGA = function() {return Struct('_QUERY_SERVICE_CONFIGA', {
    dwServiceType: T.DWORD,
    dwStartType: T.DWORD,
    dwErrorControl: T.DWORD,
    lpBinaryPathName: T.LPSTR,
    lpLoadOrderGroup: T.LPSTR,
    dwTagId: T.DWORD,
    lpDependencies: T.LPSTR,
    lpServiceStartName: T.LPSTR,
    lpDisplayName: T.LPSTR
});};
T.LPQUERY_SERVICE_CONFIGA = function() {return Pointer(Struct('_QUERY_SERVICE_CONFIGA', {
    dwServiceType: T.DWORD,
    dwStartType: T.DWORD,
    dwErrorControl: T.DWORD,
    lpBinaryPathName: T.LPSTR,
    lpLoadOrderGroup: T.LPSTR,
    dwTagId: T.DWORD,
    lpDependencies: T.LPSTR,
    lpServiceStartName: T.LPSTR,
    lpDisplayName: T.LPSTR
}));};
T.QUERY_SERVICE_CONFIGW = function() {return Struct('_QUERY_SERVICE_CONFIGW', {
    dwServiceType: T.DWORD,
    dwStartType: T.DWORD,
    dwErrorControl: T.DWORD,
    lpBinaryPathName: T.LPWSTR,
    lpLoadOrderGroup: T.LPWSTR,
    dwTagId: T.DWORD,
    lpDependencies: T.LPWSTR,
    lpServiceStartName: T.LPWSTR,
    lpDisplayName: T.LPWSTR
});};
T.LPQUERY_SERVICE_CONFIGW = function() {return Pointer(Struct('_QUERY_SERVICE_CONFIGW', {
    dwServiceType: T.DWORD,
    dwStartType: T.DWORD,
    dwErrorControl: T.DWORD,
    lpBinaryPathName: T.LPWSTR,
    lpLoadOrderGroup: T.LPWSTR,
    dwTagId: T.DWORD,
    lpDependencies: T.LPWSTR,
    lpServiceStartName: T.LPWSTR,
    lpDisplayName: T.LPWSTR
}));};
T.SERVICE_DESCRIPTIONA = function() {return Struct('_SERVICE_DESCRIPTIONA', {
    lpDescription: T.LPSTR
});};
T.LPSERVICE_DESCRIPTIONA = function() {return Pointer(Struct('_SERVICE_DESCRIPTIONA', {
    lpDescription: T.LPSTR
}));};
T.SERVICE_DESCRIPTIONW = function() {return Struct('_SERVICE_DESCRIPTIONW', {
    lpDescription: T.LPWSTR
});};
T.LPSERVICE_DESCRIPTIONW = function() {return Pointer(Struct('_SERVICE_DESCRIPTIONW', {
    lpDescription: T.LPWSTR
}));};
T.SERVICE_DESCRIPTION = function() {return T.SERVICE_DESCRIPTIONA;};
T.LPSERVICE_DESCRIPTION = function() {return T.LPSERVICE_DESCRIPTIONA;};
T.SC_ACTION_TYPE = function() {return Enum('SC_ACTION_RUN_COMMAND', {
    SC_ACTION_NONE: 0,
    SC_ACTION_RESTART: 1,
    SC_ACTION_REBOOT: 2,
    SC_ACTION_RUN_COMMAND: 3
});};
T.SC_ACTION = function() {return Struct('_SC_ACTION', {
    Type: T.SC_ACTION_TYPE,
    Delay: T.DWORD
});};
T.LPSC_ACTION = function() {return Pointer(Struct('_SC_ACTION', {
    Type: T.SC_ACTION_TYPE,
    Delay: T.DWORD
}));};
T.SERVICE_FAILURE_ACTIONSA = function() {return Struct('_SERVICE_FAILURE_ACTIONSA', {
    dwResetPeriod: T.DWORD,
    lpRebootMsg: T.LPSTR,
    lpCommand: T.LPSTR,
    cActions: T.DWORD,
    lpsaActions: Pointer(T.SC_ACTION)
});};
T.LPSERVICE_FAILURE_ACTIONSA = function() {return Pointer(Struct('_SERVICE_FAILURE_ACTIONSA', {
    dwResetPeriod: T.DWORD,
    lpRebootMsg: T.LPSTR,
    lpCommand: T.LPSTR,
    cActions: T.DWORD,
    lpsaActions: Pointer(T.SC_ACTION)
}));};
T.SERVICE_FAILURE_ACTIONSW = function() {return Struct('_SERVICE_FAILURE_ACTIONSW', {
    dwResetPeriod: T.DWORD,
    lpRebootMsg: T.LPWSTR,
    lpCommand: T.LPWSTR,
    cActions: T.DWORD,
    lpsaActions: Pointer(T.SC_ACTION)
});};
T.LPSERVICE_FAILURE_ACTIONSW = function() {return Pointer(Struct('_SERVICE_FAILURE_ACTIONSW', {
    dwResetPeriod: T.DWORD,
    lpRebootMsg: T.LPWSTR,
    lpCommand: T.LPWSTR,
    cActions: T.DWORD,
    lpsaActions: Pointer(T.SC_ACTION)
}));};
T.SERVICE_FAILURE_ACTIONS = function() {return T.SERVICE_FAILURE_ACTIONSA;};
T.LPSERVICE_FAILURE_ACTIONS = function() {return T.LPSERVICE_FAILURE_ACTIONSA;};
T.QUERY_SERVICE_LOCK_STATUSA = function() {return Struct('_QUERY_SERVICE_LOCK_STATUSA', {
    fIsLocked: T.DWORD,
    lpLockOwner: T.LPSTR,
    dwLockDuration: T.DWORD
});};
T.LPQUERY_SERVICE_LOCK_STATUSA = function() {return Pointer(Struct('_QUERY_SERVICE_LOCK_STATUSA', {
    fIsLocked: T.DWORD,
    lpLockOwner: T.LPSTR,
    dwLockDuration: T.DWORD
}));};
T.QUERY_SERVICE_LOCK_STATUSW = function() {return Struct('_QUERY_SERVICE_LOCK_STATUSW', {
    fIsLocked: T.DWORD,
    lpLockOwner: T.LPWSTR,
    dwLockDuration: T.DWORD
});};
T.LPQUERY_SERVICE_LOCK_STATUSW = function() {return Pointer(Struct('_QUERY_SERVICE_LOCK_STATUSW', {
    fIsLocked: T.DWORD,
    lpLockOwner: T.LPWSTR,
    dwLockDuration: T.DWORD
}));};
T.QUERY_SERVICE_LOCK_STATUS = function() {return T.QUERY_SERVICE_LOCK_STATUSA;};
T.LPHANDLER_FUNCTION = function() {return Pointer(Fn(null, [[T.DWORD]]), [['stdcall']]);};
T.LPHANDLER_FUNCTION_EX = function() {return Pointer(Fn(T.DWORD, [[T.DWORD], [T.DWORD], [T.LPVOID], [T.LPVOID]]), [['stdcall']]);};
T.MODEMDEVCAPS = function() {return Struct('tagMODEMDEVCAPS', {
    dwActualSize: T.DWORD,
    dwRequiredSize: T.DWORD,
    dwDevSpecificOffset: T.DWORD,
    dwDevSpecificSize: T.DWORD,
    dwModemProviderVersion: T.DWORD,
    dwModemManufacturerOffset: T.DWORD,
    dwModemManufacturerSize: T.DWORD,
    dwModemModelOffset: T.DWORD,
    dwModemModelSize: T.DWORD,
    dwModemVersionOffset: T.DWORD,
    dwModemVersionSize: T.DWORD,
    dwDialOptions: T.DWORD,
    dwCallSetupFailTimer: T.DWORD,
    dwInactivityTimeout: T.DWORD,
    dwSpeakerVolume: T.DWORD,
    dwSpeakerMode: T.DWORD,
    dwModemoptions: T.DWORD,
    dwMaxDTERate: T.DWORD,
    dwMaxDCERate: T.DWORD,
    abVariablePortion: ArrayType(T.BYTE, 1)
});};
T.LPMODEMDEVCAPS = function() {return Pointer(Struct('tagMODEMDEVCAPS', {
    dwActualSize: T.DWORD,
    dwRequiredSize: T.DWORD,
    dwDevSpecificOffset: T.DWORD,
    dwDevSpecificSize: T.DWORD,
    dwModemProviderVersion: T.DWORD,
    dwModemManufacturerOffset: T.DWORD,
    dwModemManufacturerSize: T.DWORD,
    dwModemModelOffset: T.DWORD,
    dwModemModelSize: T.DWORD,
    dwModemVersionOffset: T.DWORD,
    dwModemVersionSize: T.DWORD,
    dwDialOptions: T.DWORD,
    dwCallSetupFailTimer: T.DWORD,
    dwInactivityTimeout: T.DWORD,
    dwSpeakerVolume: T.DWORD,
    dwSpeakerMode: T.DWORD,
    dwModemoptions: T.DWORD,
    dwMaxDTERate: T.DWORD,
    dwMaxDCERate: T.DWORD,
    abVariablePortion: ArrayType(T.BYTE, 1)
}));};
T.MODEMSETTINGS = function() {return Struct('tagMODEMSETTINGS', {
    dwActualSize: T.DWORD,
    dwRequiredSize: T.DWORD,
    dwDevSpecificOffset: T.DWORD,
    dwDevSpecificSize: T.DWORD,
    dwCallSetupFailTimer: T.DWORD,
    dwInactivityTimeout: T.DWORD,
    dwSpeakerVolume: T.DWORD,
    dwSpeakerMode: T.DWORD,
    dwPreferredModemOptions: T.DWORD,
    dwNegotiatedModemOptions: T.DWORD,
    dwNegotiatedDCERate: T.DWORD,
    abVariablePortion: ArrayType(T.BYTE, 1)
});};
T.LPMODEMSETTINGS = function() {return Pointer(Struct('tagMODEMSETTINGS', {
    dwActualSize: T.DWORD,
    dwRequiredSize: T.DWORD,
    dwDevSpecificOffset: T.DWORD,
    dwDevSpecificSize: T.DWORD,
    dwCallSetupFailTimer: T.DWORD,
    dwInactivityTimeout: T.DWORD,
    dwSpeakerVolume: T.DWORD,
    dwSpeakerMode: T.DWORD,
    dwPreferredModemOptions: T.DWORD,
    dwNegotiatedModemOptions: T.DWORD,
    dwNegotiatedDCERate: T.DWORD,
    abVariablePortion: ArrayType(T.BYTE, 1)
}));};
T.HIMC = function() {return T.HANDLE;};
T.HIMCC = function() {return T.HANDLE;};
T.REGISTERWORDA = function() {return Struct('tagREGISTERWORDA', {
    lpReading: T.LPSTR,
    lpWord: T.LPSTR
});};
T.PREGISTERWORDA = function() {return Pointer(Struct('tagREGISTERWORDA', {
    lpReading: T.LPSTR,
    lpWord: T.LPSTR
}));};
T.NPREGISTERWORDA = function() {return Pointer(Struct('tagREGISTERWORDA', {
    lpReading: T.LPSTR,
    lpWord: T.LPSTR
}));};
T.LPREGISTERWORDA = function() {return Pointer(Struct('tagREGISTERWORDA', {
    lpReading: T.LPSTR,
    lpWord: T.LPSTR
}));};
T.REGISTERWORDW = function() {return Struct('tagREGISTERWORDW', {
    lpReading: T.LPWSTR,
    lpWord: T.LPWSTR
});};
T.PREGISTERWORDW = function() {return Pointer(Struct('tagREGISTERWORDW', {
    lpReading: T.LPWSTR,
    lpWord: T.LPWSTR
}));};
T.NPREGISTERWORDW = function() {return Pointer(Struct('tagREGISTERWORDW', {
    lpReading: T.LPWSTR,
    lpWord: T.LPWSTR
}));};
T.LPREGISTERWORDW = function() {return Pointer(Struct('tagREGISTERWORDW', {
    lpReading: T.LPWSTR,
    lpWord: T.LPWSTR
}));};
T.REGISTERWORDENUMPROCA = function() {return Pointer(Fn(T.i32, [[T.LPCSTR], [T.DWORD], [T.LPCSTR], [T.LPVOID]]), [['stdcall']]);};
T.REGISTERWORDENUMPROCW = function() {return Pointer(Fn(T.i32, [[T.LPCWSTR], [T.DWORD], [T.LPCWSTR], [T.LPVOID]]), [['stdcall']]);};
T.CANDIDATEFORM = function() {return Struct('tagCANDIDATEFORM', {
    dwIndex: T.DWORD,
    dwStyle: T.DWORD,
    ptCurrentPos: T.POINT,
    rcArea: T.RECT
});};
T.LPCANDIDATEFORM = function() {return Pointer(Struct('tagCANDIDATEFORM', {
    dwIndex: T.DWORD,
    dwStyle: T.DWORD,
    ptCurrentPos: T.POINT,
    rcArea: T.RECT
}));};
T.CANDIDATELIST = function() {return Struct('tagCANDIDATELIST', {
    dwSize: T.DWORD,
    dwStyle: T.DWORD,
    dwCount: T.DWORD,
    dwSelection: T.DWORD,
    dwPageStart: T.DWORD,
    dwPageSize: T.DWORD,
    dwOffset: ArrayType(T.DWORD, 1)
});};
T.LPCANDIDATELIST = function() {return Pointer(Struct('tagCANDIDATELIST', {
    dwSize: T.DWORD,
    dwStyle: T.DWORD,
    dwCount: T.DWORD,
    dwSelection: T.DWORD,
    dwPageStart: T.DWORD,
    dwPageSize: T.DWORD,
    dwOffset: ArrayType(T.DWORD, 1)
}));};
T.STYLEBUFA = function() {return Struct('tagSTYLEBUFA', {
    dwStyle: T.DWORD,
    szDescription: ArrayType(T.CHAR, 32)
});};
T.LPSTYLEBUFA = function() {return Pointer(Struct('tagSTYLEBUFA', {
    dwStyle: T.DWORD,
    szDescription: ArrayType(T.CHAR, 32)
}));};
T.STYLEBUFW = function() {return Struct('tagSTYLEBUFW', {
    dwStyle: T.DWORD,
    szDescription: ArrayType(T.WCHAR, 32)
});};
T.LPSTYLEBUFW = function() {return Pointer(Struct('tagSTYLEBUFW', {
    dwStyle: T.DWORD,
    szDescription: ArrayType(T.WCHAR, 32)
}));};
T.STYLEBUF = function() {return T.STYLEBUFA;};
T.LPSTYLEBUF = function() {return T.LPSTYLEBUFA;};
T.RECONVERTSTRING = function() {return Struct('tagRECONVERTSTRING', {
    dwSize: T.DWORD,
    dwVersion: T.DWORD,
    dwStrLen: T.DWORD,
    dwStrOffset: T.DWORD,
    dwCompStrLen: T.DWORD,
    dwCompStrOffset: T.DWORD,
    dwTargetStrLen: T.DWORD,
    dwTargetStrOffset: T.DWORD
});};
T.LPRECONVERTSTRING = function() {return Pointer(Struct('tagRECONVERTSTRING', {
    dwSize: T.DWORD,
    dwVersion: T.DWORD,
    dwStrLen: T.DWORD,
    dwStrOffset: T.DWORD,
    dwCompStrLen: T.DWORD,
    dwCompStrOffset: T.DWORD,
    dwTargetStrLen: T.DWORD,
    dwTargetStrOffset: T.DWORD
}));};
T.IMEMENUITEMINFOA = function() {return Struct('tagIMEMENUITEMINFOA', {
    cbSize: T.UINT,
    fType: T.UINT,
    fState: T.UINT,
    wID: T.UINT,
    hbmpChecked: T.HBITMAP,
    hbmpUnchecked: T.HBITMAP,
    dwItemData: T.DWORD,
    szString: ArrayType(T.CHAR, 80),
    hbmpItem: T.HBITMAP
});};
T.LPIMEMENUITEMINFOA = function() {return Pointer(Struct('tagIMEMENUITEMINFOA', {
    cbSize: T.UINT,
    fType: T.UINT,
    fState: T.UINT,
    wID: T.UINT,
    hbmpChecked: T.HBITMAP,
    hbmpUnchecked: T.HBITMAP,
    dwItemData: T.DWORD,
    szString: ArrayType(T.CHAR, 80),
    hbmpItem: T.HBITMAP
}));};
T.IMEMENUITEMINFOW = function() {return Struct('tagIMEMENUITEMINFOW', {
    cbSize: T.UINT,
    fType: T.UINT,
    fState: T.UINT,
    wID: T.UINT,
    hbmpChecked: T.HBITMAP,
    hbmpUnchecked: T.HBITMAP,
    dwItemData: T.DWORD,
    szString: ArrayType(T.WCHAR, 80),
    hbmpItem: T.HBITMAP
});};
T.LPIMEMENUITEMINFOW = function() {return Pointer(Struct('tagIMEMENUITEMINFOW', {
    cbSize: T.UINT,
    fType: T.UINT,
    fState: T.UINT,
    wID: T.UINT,
    hbmpChecked: T.HBITMAP,
    hbmpUnchecked: T.HBITMAP,
    dwItemData: T.DWORD,
    szString: ArrayType(T.WCHAR, 80),
    hbmpItem: T.HBITMAP
}));};
T.IMEMENUITEMINFO = function() {return T.IMEMENUITEMINFOA;};
T.LPIMEMENUITEMINFO = function() {return T.LPIMEMENUITEMINFOA;};
T.COMPOSITIONFORM = function() {return Struct('_tagCOMPOSITIONFORM', {
    dwStyle: T.DWORD,
    ptCurrentPos: T.POINT,
    rcArea: T.RECT
});};
T.LPCOMPOSITIONFORM = function() {return Pointer(Struct('_tagCOMPOSITIONFORM', {
    dwStyle: T.DWORD,
    ptCurrentPos: T.POINT,
    rcArea: T.RECT
}));};
T._PVFV = function() {return Pointer(Fn(null, [[null]]), [['cdecl']]);};
T._PIFV = function() {return Pointer(Fn(T.i32, [[null]]), [['cdecl']]);};
T._PVFI = function() {return Pointer(Fn(null, [[T.i32]]), [['cdecl']]);};
T.ioinfo = function() {return Struct('', {
    osfhnd: T.intptr_t,
    osfile: T.char,
    pipech: T.char,
    lockinitflag: T.i32,
    lock: T.CRITICAL_SECTION,
    textmode: [T.char, 7],
    unicode: [T.char, 1],
    pipech2: ArrayType(T.char, 2)
});};
T.FILE = function() {return Struct('_iobuf', null);};
T._startupinfo = function() {return Struct('', {
    newmode: T.i32
});};
T.__enative_startup_state = function() {return Enum('__initialized', {
    __uninitialized: 0,
    __initializing: 1,
    __initialized: 2
});};
T._HFILE = function() {return Pointer(null);};
T._CRT_REPORT_HOOK = function() {return Pointer(Fn(T.i32, [[T.i32], [Pointer(T.char)], [Pointer(T.i32)]]), [['cdecl']]);};
T._CRT_REPORT_HOOKW = function() {return Pointer(Fn(T.i32, [[T.i32], [Pointer(T.wchar_t)], [Pointer(T.i32)]]), [['cdecl']]);};
T._CRT_ALLOC_HOOK = function() {return Pointer(Fn(T.i32, [[T.i32], [Pointer(null)], [T.size_t], [T.i32], [T.i32], [Pointer(T.u8)], [T.i32]]), [['cdecl']]);};
T._CRT_DUMP_CLIENT = function() {return Pointer(Fn(null, [[Pointer(null)], [T.size_t]]), [['cdecl']]);};
T._CrtMemState = function() {return Struct('_CrtMemState', {
    pBlockHeader: Pointer(Struct('_CrtMemBlockHeader', null)),
    lCounts: ArrayType(T.size_t, 5),
    lSizes: ArrayType(T.size_t, 5),
    lHighWaterCount: T.size_t,
    lTotalCount: T.size_t
});};
T.float_t = function() {return T.f128;};
T.double_t = function() {return T.f128;};
T.fpos_t = function() {return T.i64;};
T._fsize_t = function() {return T.u32;};
T.INITCOMMONCONTROLSEX = function() {return Struct('tagINITCOMMONCONTROLSEX', {
    dwSize: T.DWORD,
    dwICC: T.DWORD
});};
T.LPINITCOMMONCONTROLSEX = function() {return Pointer(Struct('tagINITCOMMONCONTROLSEX', {
    dwSize: T.DWORD,
    dwICC: T.DWORD
}));};
T.NMTOOLTIPSCREATED = function() {return Struct('tagNMTOOLTIPSCREATED', {
    hdr: T.NMHDR,
    hwndToolTips: T.HWND
});};
T.LPNMTOOLTIPSCREATED = function() {return Pointer(Struct('tagNMTOOLTIPSCREATED', {
    hdr: T.NMHDR,
    hwndToolTips: T.HWND
}));};
T.NMMOUSE = function() {return Struct('tagNMMOUSE', {
    hdr: T.NMHDR,
    dwItemSpec: T.DWORD_PTR,
    dwItemData: T.DWORD_PTR,
    pt: T.POINT,
    dwHitInfo: T.DWORD
});};
T.LPNMMOUSE = function() {return Pointer(Struct('tagNMMOUSE', {
    hdr: T.NMHDR,
    dwItemSpec: T.DWORD_PTR,
    dwItemData: T.DWORD_PTR,
    pt: T.POINT,
    dwHitInfo: T.DWORD
}));};
T.NMOBJECTNOTIFY = function() {return Struct('tagNMOBJECTNOTIFY', {
    hdr: T.NMHDR,
    iItem: T.i32,
    piid: Pointer(T.IID),
    pObject: Pointer(null),
    hResult: T.HRESULT,
    dwFlags: T.DWORD
});};
T.LPNMOBJECTNOTIFY = function() {return Pointer(Struct('tagNMOBJECTNOTIFY', {
    hdr: T.NMHDR,
    iItem: T.i32,
    piid: Pointer(T.IID),
    pObject: Pointer(null),
    hResult: T.HRESULT,
    dwFlags: T.DWORD
}));};
T.NMKEY = function() {return Struct('tagNMKEY', {
    hdr: T.NMHDR,
    nVKey: T.UINT,
    uFlags: T.UINT
});};
T.LPNMKEY = function() {return Pointer(Struct('tagNMKEY', {
    hdr: T.NMHDR,
    nVKey: T.UINT,
    uFlags: T.UINT
}));};
T.NMCHAR = function() {return Struct('tagNMCHAR', {
    hdr: T.NMHDR,
    ch: T.UINT,
    dwItemPrev: T.DWORD,
    dwItemNext: T.DWORD
});};
T.LPNMCHAR = function() {return Pointer(Struct('tagNMCHAR', {
    hdr: T.NMHDR,
    ch: T.UINT,
    dwItemPrev: T.DWORD,
    dwItemNext: T.DWORD
}));};
T.NMCUSTOMDRAW = function() {return Struct('tagNMCUSTOMDRAWINFO', {
    hdr: T.NMHDR,
    dwDrawStage: T.DWORD,
    hdc: T.HDC,
    rc: T.RECT,
    dwItemSpec: T.DWORD_PTR,
    uItemState: T.UINT,
    lItemlParam: T.LPARAM
});};
T.LPNMCUSTOMDRAW = function() {return Pointer(Struct('tagNMCUSTOMDRAWINFO', {
    hdr: T.NMHDR,
    dwDrawStage: T.DWORD,
    hdc: T.HDC,
    rc: T.RECT,
    dwItemSpec: T.DWORD_PTR,
    uItemState: T.UINT,
    lItemlParam: T.LPARAM
}));};
T.NMTTCUSTOMDRAW = function() {return Struct('tagNMTTCUSTOMDRAW', {
    nmcd: T.NMCUSTOMDRAW,
    uDrawFlags: T.UINT
});};
T.LPNMTTCUSTOMDRAW = function() {return Pointer(Struct('tagNMTTCUSTOMDRAW', {
    nmcd: T.NMCUSTOMDRAW,
    uDrawFlags: T.UINT
}));};
T.COLORSCHEME = function() {return Struct('tagCOLORSCHEME', {
    dwSize: T.DWORD,
    clrBtnHighlight: T.COLORREF,
    clrBtnShadow: T.COLORREF
});};
T.LPCOLORSCHEME = function() {return Pointer(Struct('tagCOLORSCHEME', {
    dwSize: T.DWORD,
    clrBtnHighlight: T.COLORREF,
    clrBtnShadow: T.COLORREF
}));};
T.DRAGLISTINFO = function() {return Struct('tagDRAGLISTINFO', {
    uNotification: T.UINT,
    hWnd: T.HWND,
    ptCursor: T.POINT
});};
T.LPDRAGLISTINFO = function() {return Pointer(Struct('tagDRAGLISTINFO', {
    uNotification: T.UINT,
    hWnd: T.HWND,
    ptCursor: T.POINT
}));};
T.UDACCEL = function() {return Struct('_UDACCEL', {
    nSec: T.UINT,
    nInc: T.UINT
});};
T.LPUDACCEL = function() {return Pointer(Struct('_UDACCEL', {
    nSec: T.UINT,
    nInc: T.UINT
}));};
T.NM_UPDOWN = function() {return Struct('tagNM_UPDOWN', {
    hdr: T.NMHDR,
    iPos: T.i32,
    iDelta: T.i32
});};
T.LPNM_UPDOWN = function() {return Pointer(Struct('tagNM_UPDOWN', {
    hdr: T.NMHDR,
    iPos: T.i32,
    iDelta: T.i32
}));};
T.PBRANGE = function() {return Struct('', {
    iLow: T.INT,
    iHigh: T.INT
});};
T.PPBRANGE = function() {return Pointer(Struct('', {
    iLow: T.INT,
    iHigh: T.INT
}));};
T.HIMAGELIST = function() {return Pointer(Struct('_IMAGELIST', null));};
T.IMAGEINFO = function() {return Struct('_IMAGEINFO', {
    hbmImage: T.HBITMAP,
    hbmMask: T.HBITMAP,
    Unused1: T.INT,
    Unused2: T.INT,
    rcImage: T.RECT
});};
T.LPIMAGEINFO = function() {return Pointer(Struct('_IMAGEINFO', {
    hbmImage: T.HBITMAP,
    hbmMask: T.HBITMAP,
    Unused1: T.INT,
    Unused2: T.INT,
    rcImage: T.RECT
}));};
T.IMAGELISTDRAWPARAMS = function() {return Struct('_IMAGELISTDRAWPARAMS', {
    cbSize: T.DWORD,
    himl: T.HIMAGELIST,
    i: T.INT,
    hdcDst: T.HDC,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    xBitmap: T.INT,
    yBitmap: T.INT,
    rgbBk: T.COLORREF,
    rgbFg: T.COLORREF,
    fStyle: T.UINT,
    dwRop: T.DWORD,
    fState: T.DWORD,
    Frame: T.DWORD,
    crEffect: T.COLORREF
});};
T.LPIMAGELISTDRAWPARAMS = function() {return Pointer(Struct('_IMAGELISTDRAWPARAMS', {
    cbSize: T.DWORD,
    himl: T.HIMAGELIST,
    i: T.INT,
    hdcDst: T.HDC,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    xBitmap: T.INT,
    yBitmap: T.INT,
    rgbBk: T.COLORREF,
    rgbFg: T.COLORREF,
    fStyle: T.UINT,
    dwRop: T.DWORD,
    fState: T.DWORD,
    Frame: T.DWORD,
    crEffect: T.COLORREF
}));};
T.SUBCLASSPROC = function() {return Pointer(Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM], [T.UINT_PTR], [T.DWORD_PTR]]), [['stdcall']]);};
T.HDLAYOUT = function() {return Struct('_HD_LAYOUT', {
    prc: Pointer(T.RECT),
    pwpos: Pointer(T.WINDOWPOS)
});};
T.LPHDLAYOUT = function() {return Pointer(Struct('_HD_LAYOUT', {
    prc: Pointer(T.RECT),
    pwpos: Pointer(T.WINDOWPOS)
}));};
T.HDITEMA = function() {return Struct('_HD_ITEMA', {
    mask: T.UINT,
    cxy: T.INT,
    pszText: T.LPSTR,
    hbm: T.HBITMAP,
    cchTextMax: T.INT,
    fmt: T.INT,
    lParam: T.LPARAM,
    iImage: T.INT,
    iOrder: T.INT,
    type: T.UINT,
    pvFilter: T.LPVOID,
    state: T.UINT
});};
T.LPHDITEMA = function() {return Pointer(Struct('_HD_ITEMA', {
    mask: T.UINT,
    cxy: T.INT,
    pszText: T.LPSTR,
    hbm: T.HBITMAP,
    cchTextMax: T.INT,
    fmt: T.INT,
    lParam: T.LPARAM,
    iImage: T.INT,
    iOrder: T.INT,
    type: T.UINT,
    pvFilter: T.LPVOID,
    state: T.UINT
}));};
T.HDITEMW = function() {return Struct('_HD_ITEMW', {
    mask: T.UINT,
    cxy: T.INT,
    pszText: T.LPWSTR,
    hbm: T.HBITMAP,
    cchTextMax: T.INT,
    fmt: T.INT,
    lParam: T.LPARAM,
    iImage: T.INT,
    iOrder: T.INT,
    type: T.UINT,
    pvFilter: T.LPVOID,
    state: T.UINT
});};
T.LPHDITEMW = function() {return Pointer(Struct('_HD_ITEMW', {
    mask: T.UINT,
    cxy: T.INT,
    pszText: T.LPWSTR,
    hbm: T.HBITMAP,
    cchTextMax: T.INT,
    fmt: T.INT,
    lParam: T.LPARAM,
    iImage: T.INT,
    iOrder: T.INT,
    type: T.UINT,
    pvFilter: T.LPVOID,
    state: T.UINT
}));};
T.HD_TEXTFILTERA = function() {return Struct('_HD_TEXTFILTERA', {
    pszText: T.LPSTR,
    cchTextMax: T.INT
});};
T.LPHD_TEXTFILTERA = function() {return Pointer(Struct('_HD_TEXTFILTERA', {
    pszText: T.LPSTR,
    cchTextMax: T.INT
}));};
T.HD_TEXTFILTERW = function() {return Struct('_HD_TEXTFILTERW', {
    pszText: T.LPWSTR,
    cchTextMax: T.INT
});};
T.LPHD_TEXTFILTERW = function() {return Pointer(Struct('_HD_TEXTFILTERW', {
    pszText: T.LPWSTR,
    cchTextMax: T.INT
}));};
T.HDHITTESTINFO = function() {return Struct('_HD_HITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT,
    iItem: T.INT
});};
T.LPHDHITTESTINFO = function() {return Pointer(Struct('_HD_HITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT,
    iItem: T.INT
}));};
T.NMHEADERA = function() {return Struct('tagNMHEADERA', {
    hdr: T.NMHDR,
    iItem: T.INT,
    iButton: T.INT,
    pitem: Pointer(T.HDITEMA)
});};
T.LPNMHEADERA = function() {return Pointer(Struct('tagNMHEADERA', {
    hdr: T.NMHDR,
    iItem: T.INT,
    iButton: T.INT,
    pitem: Pointer(T.HDITEMA)
}));};
T.NMHEADERW = function() {return Struct('tagNMHEADERW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    iButton: T.INT,
    pitem: Pointer(T.HDITEMW)
});};
T.LPNMHEADERW = function() {return Pointer(Struct('tagNMHEADERW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    iButton: T.INT,
    pitem: Pointer(T.HDITEMW)
}));};
T.NMHDDISPINFOA = function() {return Struct('tagNMHDDISPINFOA', {
    hdr: T.NMHDR,
    iItem: T.INT,
    mask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM
});};
T.LPNMHDDISPINFOA = function() {return Pointer(Struct('tagNMHDDISPINFOA', {
    hdr: T.NMHDR,
    iItem: T.INT,
    mask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM
}));};
T.NMHDDISPINFOW = function() {return Struct('tagNMHDDISPINFOW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    mask: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM
});};
T.LPNMHDDISPINFOW = function() {return Pointer(Struct('tagNMHDDISPINFOW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    mask: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM
}));};
T.NMHDFILTERBTNCLICK = function() {return Struct('tagNMHDFILTERBTNCLICK', {
    hdr: T.NMHDR,
    iItem: T.INT,
    rc: T.RECT
});};
T.LPNMHDFILTERBTNCLICK = function() {return Pointer(Struct('tagNMHDFILTERBTNCLICK', {
    hdr: T.NMHDR,
    iItem: T.INT,
    rc: T.RECT
}));};
T.NMBCHOTITEM = function() {return Struct('tagNMBCHOTITEM', {
    hdr: T.NMHDR,
    dwFlags: T.DWORD
});};
T.LPNMBCHOTITEM = function() {return Pointer(Struct('tagNMBCHOTITEM', {
    hdr: T.NMHDR,
    dwFlags: T.DWORD
}));};
T.NMTBCUSTOMDRAW = function() {return Struct('_NMTBCUSTOMDRAW', {
    nmcd: T.NMCUSTOMDRAW,
    hbrMonoDither: T.HBRUSH,
    hbrLines: T.HBRUSH,
    hpenLines: T.HPEN,
    clrText: T.COLORREF,
    clrMark: T.COLORREF,
    clrTextHighlight: T.COLORREF,
    clrBtnFace: T.COLORREF,
    clrBtnHighlight: T.COLORREF,
    clrHighlightHotTrack: T.COLORREF,
    rcText: T.RECT,
    nStringBkMode: T.i32,
    nHLStringBkMode: T.i32,
    iListGap: T.i32
});};
T.LPNMTBCUSTOMDRAW = function() {return Pointer(Struct('_NMTBCUSTOMDRAW', {
    nmcd: T.NMCUSTOMDRAW,
    hbrMonoDither: T.HBRUSH,
    hbrLines: T.HBRUSH,
    hpenLines: T.HPEN,
    clrText: T.COLORREF,
    clrMark: T.COLORREF,
    clrTextHighlight: T.COLORREF,
    clrBtnFace: T.COLORREF,
    clrBtnHighlight: T.COLORREF,
    clrHighlightHotTrack: T.COLORREF,
    rcText: T.RECT,
    nStringBkMode: T.i32,
    nHLStringBkMode: T.i32,
    iListGap: T.i32
}));};
T.OLDTBBUTTON = function() {return Struct('_OLDTBBUTTON', {
    iBitmap: T.INT,
    idCommand: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    bReserved: ArrayType(T.BYTE, 2),
    dwData: T.DWORD
});};
T.POLDTBBUTTON = function() {return Pointer(Struct('_OLDTBBUTTON', {
    iBitmap: T.INT,
    idCommand: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    bReserved: ArrayType(T.BYTE, 2),
    dwData: T.DWORD
}));};
T.LPOLDTBBUTTON = function() {return Pointer(Struct('_OLDTBBUTTON', {
    iBitmap: T.INT,
    idCommand: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    bReserved: ArrayType(T.BYTE, 2),
    dwData: T.DWORD
}));};
T.LPCOLDTBBUTTON = function() {return Pointer(T.OLDTBBUTTON, [['const']]);};
T.TBBUTTON = function() {return Struct('_TBBUTTON', {
    iBitmap: T.INT,
    idCommand: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    bReserved: ArrayType(T.BYTE, 2),
    dwData: T.DWORD_PTR,
    iString: T.INT_PTR
});};
T.PTBBUTTON = function() {return Pointer(Struct('_TBBUTTON', {
    iBitmap: T.INT,
    idCommand: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    bReserved: ArrayType(T.BYTE, 2),
    dwData: T.DWORD_PTR,
    iString: T.INT_PTR
}));};
T.LPTBBUTTON = function() {return Pointer(Struct('_TBBUTTON', {
    iBitmap: T.INT,
    idCommand: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    bReserved: ArrayType(T.BYTE, 2),
    dwData: T.DWORD_PTR,
    iString: T.INT_PTR
}));};
T.LPCTBBUTTON = function() {return Pointer(T.TBBUTTON, [['const']]);};
T.COLORMAP = function() {return Struct('_COLORMAP', {
    from: T.COLORREF,
    to: T.COLORREF
});};
T.LPCOLORMAP = function() {return Pointer(Struct('_COLORMAP', {
    from: T.COLORREF,
    to: T.COLORREF
}));};
T.TBADDBITMAP = function() {return Struct('tagTBADDBITMAP', {
    hInst: T.HINSTANCE,
    nID: T.UINT_PTR
});};
T.LPTBADDBITMAP = function() {return Pointer(Struct('tagTBADDBITMAP', {
    hInst: T.HINSTANCE,
    nID: T.UINT_PTR
}));};
T.TBSAVEPARAMSA = function() {return Struct('tagTBSAVEPARAMSA', {
    hkr: T.HKEY,
    pszSubKey: T.LPCSTR,
    pszValueName: T.LPCSTR
});};
T.LPTBSAVEPARAMSA = function() {return Pointer(Struct('tagTBSAVEPARAMSA', {
    hkr: T.HKEY,
    pszSubKey: T.LPCSTR,
    pszValueName: T.LPCSTR
}));};
T.TBSAVEPARAMSW = function() {return Struct('tagTBSAVEPARAMSW', {
    hkr: T.HKEY,
    pszSubKey: T.LPCWSTR,
    pszValueName: T.LPCWSTR
});};
T.LPTBSAVEPARAMSW = function() {return Pointer(Struct('tagTBSAVEPARAMSW', {
    hkr: T.HKEY,
    pszSubKey: T.LPCWSTR,
    pszValueName: T.LPCWSTR
}));};
T.TBBUTTONINFOA = function() {return Struct('', {
    cbSize: T.UINT,
    dwMask: T.DWORD,
    idCommand: T.INT,
    iImage: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    cx: T.WORD,
    lParam: T.DWORD_PTR,
    pszText: T.LPSTR,
    cchText: T.INT
});};
T.LPTBBUTTONINFOA = function() {return Pointer(Struct('', {
    cbSize: T.UINT,
    dwMask: T.DWORD,
    idCommand: T.INT,
    iImage: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    cx: T.WORD,
    lParam: T.DWORD_PTR,
    pszText: T.LPSTR,
    cchText: T.INT
}));};
T.TBBUTTONINFOW = function() {return Struct('', {
    cbSize: T.UINT,
    dwMask: T.DWORD,
    idCommand: T.INT,
    iImage: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    cx: T.WORD,
    lParam: T.DWORD_PTR,
    pszText: T.LPWSTR,
    cchText: T.INT
});};
T.LPTBBUTTONINFOW = function() {return Pointer(Struct('', {
    cbSize: T.UINT,
    dwMask: T.DWORD,
    idCommand: T.INT,
    iImage: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    cx: T.WORD,
    lParam: T.DWORD_PTR,
    pszText: T.LPWSTR,
    cchText: T.INT
}));};
T.NMTBHOTITEM = function() {return Struct('tagNMTBHOTITEM', {
    hdr: T.NMHDR,
    idOld: T.i32,
    idNew: T.i32,
    dwFlags: T.DWORD
});};
T.LPNMTBHOTITEM = function() {return Pointer(Struct('tagNMTBHOTITEM', {
    hdr: T.NMHDR,
    idOld: T.i32,
    idNew: T.i32,
    dwFlags: T.DWORD
}));};
T.NMTBGETINFOTIPA = function() {return Struct('tagNMTBGETINFOTIPA', {
    hdr: T.NMHDR,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iItem: T.INT,
    lParam: T.LPARAM
});};
T.LPNMTBGETINFOTIPA = function() {return Pointer(Struct('tagNMTBGETINFOTIPA', {
    hdr: T.NMHDR,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iItem: T.INT,
    lParam: T.LPARAM
}));};
T.NMTBGETINFOTIPW = function() {return Struct('tagNMTBGETINFOTIPW', {
    hdr: T.NMHDR,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iItem: T.INT,
    lParam: T.LPARAM
});};
T.LPNMTBGETINFOTIPW = function() {return Pointer(Struct('tagNMTBGETINFOTIPW', {
    hdr: T.NMHDR,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iItem: T.INT,
    lParam: T.LPARAM
}));};
T.NMTBDISPINFOA = function() {return Struct('', {
    hdr: T.NMHDR,
    dwMask: T.DWORD,
    idCommand: T.i32,
    lParam: T.DWORD_PTR,
    iImage: T.i32,
    pszText: T.LPSTR,
    cchText: T.i32
});};
T.LPNMTBDISPINFOA = function() {return Pointer(Struct('', {
    hdr: T.NMHDR,
    dwMask: T.DWORD,
    idCommand: T.i32,
    lParam: T.DWORD_PTR,
    iImage: T.i32,
    pszText: T.LPSTR,
    cchText: T.i32
}));};
T.NMTBDISPINFOW = function() {return Struct('', {
    hdr: T.NMHDR,
    dwMask: T.DWORD,
    idCommand: T.i32,
    lParam: T.DWORD_PTR,
    iImage: T.i32,
    pszText: T.LPWSTR,
    cchText: T.i32
});};
T.LPNMTBDISPINFOW = function() {return Pointer(Struct('', {
    hdr: T.NMHDR,
    dwMask: T.DWORD,
    idCommand: T.i32,
    lParam: T.DWORD_PTR,
    iImage: T.i32,
    pszText: T.LPWSTR,
    cchText: T.i32
}));};
T.NMTOOLBARA = function() {return Struct('tagNMTOOLBARA', {
    hdr: T.NMHDR,
    iItem: T.INT,
    tbButton: T.TBBUTTON,
    cchText: T.INT,
    pszText: T.LPSTR,
    rcButton: T.RECT
});};
T.LPNMTOOLBARA = function() {return Pointer(Struct('tagNMTOOLBARA', {
    hdr: T.NMHDR,
    iItem: T.INT,
    tbButton: T.TBBUTTON,
    cchText: T.INT,
    pszText: T.LPSTR,
    rcButton: T.RECT
}));};
T.TBNOTIFYA = function() {return Struct('tagNMTOOLBARA', {
    hdr: T.NMHDR,
    iItem: T.INT,
    tbButton: T.TBBUTTON,
    cchText: T.INT,
    pszText: T.LPSTR,
    rcButton: T.RECT
});};
T.LPTBNOTIFYA = function() {return Pointer(Struct('tagNMTOOLBARA', {
    hdr: T.NMHDR,
    iItem: T.INT,
    tbButton: T.TBBUTTON,
    cchText: T.INT,
    pszText: T.LPSTR,
    rcButton: T.RECT
}));};
T.NMTOOLBARW = function() {return Struct('tagNMTOOLBARW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    tbButton: T.TBBUTTON,
    cchText: T.INT,
    pszText: T.LPWSTR,
    rcButton: T.RECT
});};
T.LPNMTOOLBARW = function() {return Pointer(Struct('tagNMTOOLBARW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    tbButton: T.TBBUTTON,
    cchText: T.INT,
    pszText: T.LPWSTR,
    rcButton: T.RECT
}));};
T.TBNOTIFYW = function() {return Struct('tagNMTOOLBARW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    tbButton: T.TBBUTTON,
    cchText: T.INT,
    pszText: T.LPWSTR,
    rcButton: T.RECT
});};
T.LPTBNOTIFYW = function() {return Pointer(Struct('tagNMTOOLBARW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    tbButton: T.TBBUTTON,
    cchText: T.INT,
    pszText: T.LPWSTR,
    rcButton: T.RECT
}));};
T.TBREPLACEBITMAP = function() {return Struct('', {
    hInstOld: T.HINSTANCE,
    nIDOld: T.UINT_PTR,
    hInstNew: T.HINSTANCE,
    nIDNew: T.UINT_PTR,
    nButtons: T.INT
});};
T.LPTBREPLACEBITMAP = function() {return Pointer(Struct('', {
    hInstOld: T.HINSTANCE,
    nIDOld: T.UINT_PTR,
    hInstNew: T.HINSTANCE,
    nIDNew: T.UINT_PTR,
    nButtons: T.INT
}));};
T.TBINSERTMARK = function() {return Struct('', {
    iButton: T.i32,
    dwFlags: T.DWORD
});};
T.LPTBINSERTMARK = function() {return Pointer(Struct('', {
    iButton: T.i32,
    dwFlags: T.DWORD
}));};
T.NMTBSAVE = function() {return Struct('tagNMTBSAVE', {
    hdr: T.NMHDR,
    pData: Pointer(T.DWORD),
    pCurrent: Pointer(T.DWORD),
    cbData: T.UINT,
    iItem: T.i32,
    cButtons: T.i32,
    tbButton: T.TBBUTTON
});};
T.LPNMTBSAVE = function() {return Pointer(Struct('tagNMTBSAVE', {
    hdr: T.NMHDR,
    pData: Pointer(T.DWORD),
    pCurrent: Pointer(T.DWORD),
    cbData: T.UINT,
    iItem: T.i32,
    cButtons: T.i32,
    tbButton: T.TBBUTTON
}));};
T.NMTBRESTORE = function() {return Struct('tagNMTBRESTORE', {
    hdr: T.NMHDR,
    pData: Pointer(T.DWORD),
    pCurrent: Pointer(T.DWORD),
    cbData: T.UINT,
    iItem: T.i32,
    cButtons: T.i32,
    cbBytesPerRecord: T.i32,
    tbButton: T.TBBUTTON
});};
T.LPNMTBRESTORE = function() {return Pointer(Struct('tagNMTBRESTORE', {
    hdr: T.NMHDR,
    pData: Pointer(T.DWORD),
    pCurrent: Pointer(T.DWORD),
    cbData: T.UINT,
    iItem: T.i32,
    cButtons: T.i32,
    cbBytesPerRecord: T.i32,
    tbButton: T.TBBUTTON
}));};
T.TBMETRICS = function() {return Struct('', {
    cbSize: T.UINT,
    dwMask: T.DWORD,
    cxPad: T.INT,
    cyPad: T.INT,
    cxBarPad: T.INT,
    cyBarPad: T.INT,
    cxButtonSpacing: T.INT,
    cyButtonSpacing: T.INT
});};
T.LPTBMETRICS = function() {return Pointer(Struct('', {
    cbSize: T.UINT,
    dwMask: T.DWORD,
    cxPad: T.INT,
    cyPad: T.INT,
    cxBarPad: T.INT,
    cyBarPad: T.INT,
    cxButtonSpacing: T.INT,
    cyButtonSpacing: T.INT
}));};
T.NMTBINITCUSTOMIZE = function() {return Struct('', {
    hdr: T.NMHDR,
    hwndDialog: T.HWND
});};
T.NMTBWRAPHOTITEM = function() {return Struct('', {
    hdr: T.NMHDR,
    idNew: T.INT,
    iDirection: T.INT,
    dwReason: T.DWORD
});};
T.TTTOOLINFOA = function() {return Struct('tagTOOLINFOA', {
    cbSize: T.UINT,
    uFlags: T.UINT,
    hwnd: T.HWND,
    uId: T.UINT_PTR,
    rect: T.RECT,
    hinst: T.HINSTANCE,
    lpszText: T.LPSTR,
    lParam: T.LPARAM,
    lpReserved: Pointer(null)
});};
T.LPTOOLINFOA = function() {return Pointer(Struct('tagTOOLINFOA', {
    cbSize: T.UINT,
    uFlags: T.UINT,
    hwnd: T.HWND,
    uId: T.UINT_PTR,
    rect: T.RECT,
    hinst: T.HINSTANCE,
    lpszText: T.LPSTR,
    lParam: T.LPARAM,
    lpReserved: Pointer(null)
}));};
T.PTOOLINFOA = function() {return Pointer(Struct('tagTOOLINFOA', {
    cbSize: T.UINT,
    uFlags: T.UINT,
    hwnd: T.HWND,
    uId: T.UINT_PTR,
    rect: T.RECT,
    hinst: T.HINSTANCE,
    lpszText: T.LPSTR,
    lParam: T.LPARAM,
    lpReserved: Pointer(null)
}));};
T.LPTTTOOLINFOA = function() {return Pointer(Struct('tagTOOLINFOA', {
    cbSize: T.UINT,
    uFlags: T.UINT,
    hwnd: T.HWND,
    uId: T.UINT_PTR,
    rect: T.RECT,
    hinst: T.HINSTANCE,
    lpszText: T.LPSTR,
    lParam: T.LPARAM,
    lpReserved: Pointer(null)
}));};
T.TTTOOLINFOW = function() {return Struct('tagTOOLINFOW', {
    cbSize: T.UINT,
    uFlags: T.UINT,
    hwnd: T.HWND,
    uId: T.UINT_PTR,
    rect: T.RECT,
    hinst: T.HINSTANCE,
    lpszText: T.LPWSTR,
    lParam: T.LPARAM,
    lpReserved: Pointer(null)
});};
T.LPTOOLINFOW = function() {return Pointer(Struct('tagTOOLINFOW', {
    cbSize: T.UINT,
    uFlags: T.UINT,
    hwnd: T.HWND,
    uId: T.UINT_PTR,
    rect: T.RECT,
    hinst: T.HINSTANCE,
    lpszText: T.LPWSTR,
    lParam: T.LPARAM,
    lpReserved: Pointer(null)
}));};
T.PTOOLINFOW = function() {return Pointer(Struct('tagTOOLINFOW', {
    cbSize: T.UINT,
    uFlags: T.UINT,
    hwnd: T.HWND,
    uId: T.UINT_PTR,
    rect: T.RECT,
    hinst: T.HINSTANCE,
    lpszText: T.LPWSTR,
    lParam: T.LPARAM,
    lpReserved: Pointer(null)
}));};
T.LPTTTOOLINFOW = function() {return Pointer(Struct('tagTOOLINFOW', {
    cbSize: T.UINT,
    uFlags: T.UINT,
    hwnd: T.HWND,
    uId: T.UINT_PTR,
    rect: T.RECT,
    hinst: T.HINSTANCE,
    lpszText: T.LPWSTR,
    lParam: T.LPARAM,
    lpReserved: Pointer(null)
}));};
T.TTHITTESTINFOA = function() {return Struct('_TT_HITTESTINFOA', {
    hwnd: T.HWND,
    pt: T.POINT,
    ti: T.TTTOOLINFOA
});};
T.LPTTHITTESTINFOA = function() {return Pointer(Struct('_TT_HITTESTINFOA', {
    hwnd: T.HWND,
    pt: T.POINT,
    ti: T.TTTOOLINFOA
}));};
T.TTHITTESTINFOW = function() {return Struct('_TT_HITTESTINFOW', {
    hwnd: T.HWND,
    pt: T.POINT,
    ti: T.TTTOOLINFOW
});};
T.LPTTHITTESTINFOW = function() {return Pointer(Struct('_TT_HITTESTINFOW', {
    hwnd: T.HWND,
    pt: T.POINT,
    ti: T.TTTOOLINFOW
}));};
T.NMTTDISPINFOA = function() {return Struct('tagNMTTDISPINFOA', {
    hdr: T.NMHDR,
    lpszText: T.LPSTR,
    szText: ArrayType(T.CHAR, 80),
    hinst: T.HINSTANCE,
    uFlags: T.UINT,
    lParam: T.LPARAM
});};
T.LPNMTTDISPINFOA = function() {return Pointer(Struct('tagNMTTDISPINFOA', {
    hdr: T.NMHDR,
    lpszText: T.LPSTR,
    szText: ArrayType(T.CHAR, 80),
    hinst: T.HINSTANCE,
    uFlags: T.UINT,
    lParam: T.LPARAM
}));};
T.NMTTDISPINFOW = function() {return Struct('tagNMTTDISPINFOW', {
    hdr: T.NMHDR,
    lpszText: T.LPWSTR,
    szText: ArrayType(T.WCHAR, 80),
    hinst: T.HINSTANCE,
    uFlags: T.UINT,
    lParam: T.LPARAM
});};
T.LPNMTTDISPINFOW = function() {return Pointer(Struct('tagNMTTDISPINFOW', {
    hdr: T.NMHDR,
    lpszText: T.LPWSTR,
    szText: ArrayType(T.WCHAR, 80),
    hinst: T.HINSTANCE,
    uFlags: T.UINT,
    lParam: T.LPARAM
}));};
T.TTGETTITLE = function() {return Struct('_TTGETTITLE', {
    dwSize: T.DWORD,
    uTitleBitmap: T.UINT,
    cch: T.UINT,
    pszTitle: Pointer(T.WCHAR)
});};
T.PTTGETTITLE = function() {return Pointer(Struct('_TTGETTITLE', {
    dwSize: T.DWORD,
    uTitleBitmap: T.UINT,
    cch: T.UINT,
    pszTitle: Pointer(T.WCHAR)
}));};
T.REBARINFO = function() {return Struct('tagREBARINFO', {
    cbSize: T.UINT,
    fMask: T.UINT,
    himl: T.HIMAGELIST
});};
T.LPREBARINFO = function() {return Pointer(Struct('tagREBARINFO', {
    cbSize: T.UINT,
    fMask: T.UINT,
    himl: T.HIMAGELIST
}));};
T.REBARBANDINFOA = function() {return Struct('tagREBARBANDINFOA', {
    cbSize: T.UINT,
    fMask: T.UINT,
    fStyle: T.UINT,
    clrFore: T.COLORREF,
    clrBack: T.COLORREF,
    lpText: T.LPSTR,
    cch: T.UINT,
    iImage: T.INT,
    hwndChild: T.HWND,
    cxMinChild: T.UINT,
    cyMinChild: T.UINT,
    cx: T.UINT,
    hbmBack: T.HBITMAP,
    wID: T.UINT,
    cyChild: T.UINT,
    cyMaxChild: T.UINT,
    cyIntegral: T.UINT,
    cxIdeal: T.UINT,
    lParam: T.LPARAM,
    cxHeader: T.UINT,
    rcChevronLocation: T.RECT,
    uChevronState: T.UINT
});};
T.LPREBARBANDINFOA = function() {return Pointer(Struct('tagREBARBANDINFOA', {
    cbSize: T.UINT,
    fMask: T.UINT,
    fStyle: T.UINT,
    clrFore: T.COLORREF,
    clrBack: T.COLORREF,
    lpText: T.LPSTR,
    cch: T.UINT,
    iImage: T.INT,
    hwndChild: T.HWND,
    cxMinChild: T.UINT,
    cyMinChild: T.UINT,
    cx: T.UINT,
    hbmBack: T.HBITMAP,
    wID: T.UINT,
    cyChild: T.UINT,
    cyMaxChild: T.UINT,
    cyIntegral: T.UINT,
    cxIdeal: T.UINT,
    lParam: T.LPARAM,
    cxHeader: T.UINT,
    rcChevronLocation: T.RECT,
    uChevronState: T.UINT
}));};
T.LPCREBARBANDINFOA = function() {return Pointer(T.REBARBANDINFOA, [['const']]);};
T.REBARBANDINFOW = function() {return Struct('tagREBARBANDINFOW', {
    cbSize: T.UINT,
    fMask: T.UINT,
    fStyle: T.UINT,
    clrFore: T.COLORREF,
    clrBack: T.COLORREF,
    lpText: T.LPWSTR,
    cch: T.UINT,
    iImage: T.INT,
    hwndChild: T.HWND,
    cxMinChild: T.UINT,
    cyMinChild: T.UINT,
    cx: T.UINT,
    hbmBack: T.HBITMAP,
    wID: T.UINT,
    cyChild: T.UINT,
    cyMaxChild: T.UINT,
    cyIntegral: T.UINT,
    cxIdeal: T.UINT,
    lParam: T.LPARAM,
    cxHeader: T.UINT,
    rcChevronLocation: T.RECT,
    uChevronState: T.UINT
});};
T.LPREBARBANDINFOW = function() {return Pointer(Struct('tagREBARBANDINFOW', {
    cbSize: T.UINT,
    fMask: T.UINT,
    fStyle: T.UINT,
    clrFore: T.COLORREF,
    clrBack: T.COLORREF,
    lpText: T.LPWSTR,
    cch: T.UINT,
    iImage: T.INT,
    hwndChild: T.HWND,
    cxMinChild: T.UINT,
    cyMinChild: T.UINT,
    cx: T.UINT,
    hbmBack: T.HBITMAP,
    wID: T.UINT,
    cyChild: T.UINT,
    cyMaxChild: T.UINT,
    cyIntegral: T.UINT,
    cxIdeal: T.UINT,
    lParam: T.LPARAM,
    cxHeader: T.UINT,
    rcChevronLocation: T.RECT,
    uChevronState: T.UINT
}));};
T.LPCREBARBANDINFOW = function() {return Pointer(T.REBARBANDINFOW, [['const']]);};
T.NMREBARCHILDSIZE = function() {return Struct('tagNMREBARCHILDSIZE', {
    hdr: T.NMHDR,
    uBand: T.UINT,
    wID: T.UINT,
    rcChild: T.RECT,
    rcBand: T.RECT
});};
T.LPNMREBARCHILDSIZE = function() {return Pointer(Struct('tagNMREBARCHILDSIZE', {
    hdr: T.NMHDR,
    uBand: T.UINT,
    wID: T.UINT,
    rcChild: T.RECT,
    rcBand: T.RECT
}));};
T.NMREBAR = function() {return Struct('tagNMREBAR', {
    hdr: T.NMHDR,
    dwMask: T.DWORD,
    uBand: T.UINT,
    fStyle: T.UINT,
    wID: T.UINT,
    lParam: T.LPARAM
});};
T.LPNMREBAR = function() {return Pointer(Struct('tagNMREBAR', {
    hdr: T.NMHDR,
    dwMask: T.DWORD,
    uBand: T.UINT,
    fStyle: T.UINT,
    wID: T.UINT,
    lParam: T.LPARAM
}));};
T.NMRBAUTOSIZE = function() {return Struct('tagNMRBAUTOSIZE', {
    hdr: T.NMHDR,
    fChanged: T.BOOL,
    rcTarget: T.RECT,
    rcActual: T.RECT
});};
T.LPNMRBAUTOSIZE = function() {return Pointer(Struct('tagNMRBAUTOSIZE', {
    hdr: T.NMHDR,
    fChanged: T.BOOL,
    rcTarget: T.RECT,
    rcActual: T.RECT
}));};
T.NMREBARCHEVRON = function() {return Struct('tagNMREBARCHEVRON', {
    hdr: T.NMHDR,
    uBand: T.UINT,
    wID: T.UINT,
    lParam: T.LPARAM,
    rc: T.RECT,
    lParamNM: T.LPARAM
});};
T.LPNMREBARCHEVRON = function() {return Pointer(Struct('tagNMREBARCHEVRON', {
    hdr: T.NMHDR,
    uBand: T.UINT,
    wID: T.UINT,
    lParam: T.LPARAM,
    rc: T.RECT,
    lParamNM: T.LPARAM
}));};
T.RBHITTESTINFO = function() {return Struct('_RB_HITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT,
    iBand: T.INT
});};
T.LPRBHITTESTINFO = function() {return Pointer(Struct('_RB_HITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT,
    iBand: T.INT
}));};
T.NMREBARAUTOBREAK = function() {return Struct('tagNMREBARAUTOBREAK', {
    hdr: T.NMHDR,
    uBand: T.UINT,
    wID: T.UINT,
    lParam: T.LPARAM,
    uMsg: T.UINT,
    fStyleCurrent: T.UINT,
    fAutoBreak: T.BOOL
});};
T.LPNMREBARAUTOBREAK = function() {return Pointer(Struct('tagNMREBARAUTOBREAK', {
    hdr: T.NMHDR,
    uBand: T.UINT,
    wID: T.UINT,
    lParam: T.LPARAM,
    uMsg: T.UINT,
    fStyleCurrent: T.UINT,
    fAutoBreak: T.BOOL
}));};
T.NMPGSCROLL = function() {return Struct('', {
    hdr: T.NMHDR,
    fwKeys: T.WORD,
    rcParent: T.RECT,
    iDir: T.INT,
    iXpos: T.INT,
    iYpos: T.INT,
    iScroll: T.INT
});};
T.LPNMPGSCROLL = function() {return Pointer(Struct('', {
    hdr: T.NMHDR,
    fwKeys: T.WORD,
    rcParent: T.RECT,
    iDir: T.INT,
    iXpos: T.INT,
    iYpos: T.INT,
    iScroll: T.INT
}));};
T.NMPGCALCSIZE = function() {return Struct('', {
    hdr: T.NMHDR,
    dwFlag: T.DWORD,
    iWidth: T.INT,
    iHeight: T.INT
});};
T.LPNMPGCALCSIZE = function() {return Pointer(Struct('', {
    hdr: T.NMHDR,
    dwFlag: T.DWORD,
    iWidth: T.INT,
    iHeight: T.INT
}));};
T.HTREEITEM = function() {return Pointer(Struct('_TREEITEM', null));};
T.TVITEMA = function() {return Struct('', {
    mask: T.UINT,
    hItem: T.HTREEITEM,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    iSelectedImage: T.INT,
    cChildren: T.INT,
    lParam: T.LPARAM
});};
T.LPTVITEMA = function() {return Pointer(Struct('', {
    mask: T.UINT,
    hItem: T.HTREEITEM,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    iSelectedImage: T.INT,
    cChildren: T.INT,
    lParam: T.LPARAM
}));};
T.TVITEMW = function() {return Struct('', {
    mask: T.UINT,
    hItem: T.HTREEITEM,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    iSelectedImage: T.INT,
    cChildren: T.INT,
    lParam: T.LPARAM
});};
T.LPTVITEMW = function() {return Pointer(Struct('', {
    mask: T.UINT,
    hItem: T.HTREEITEM,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    iSelectedImage: T.INT,
    cChildren: T.INT,
    lParam: T.LPARAM
}));};
T.TVITEMEXA = function() {return Struct('', {
    mask: T.UINT,
    hItem: T.HTREEITEM,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    iSelectedImage: T.INT,
    cChildren: T.INT,
    lParam: T.LPARAM,
    iIntegral: T.INT,
    uStateEx: T.UINT,
    hwnd: T.HWND,
    iExpandedImage: T.INT
});};
T.LPTVITEMEXA = function() {return Pointer(Struct('', {
    mask: T.UINT,
    hItem: T.HTREEITEM,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    iSelectedImage: T.INT,
    cChildren: T.INT,
    lParam: T.LPARAM,
    iIntegral: T.INT,
    uStateEx: T.UINT,
    hwnd: T.HWND,
    iExpandedImage: T.INT
}));};
T.TVITEMEXW = function() {return Struct('', {
    mask: T.UINT,
    hItem: T.HTREEITEM,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    iSelectedImage: T.INT,
    cChildren: T.INT,
    lParam: T.LPARAM,
    iIntegral: T.INT,
    uStateEx: T.UINT,
    hwnd: T.HWND,
    iExpandedImage: T.INT
});};
T.LPTVITEMEXW = function() {return Pointer(Struct('', {
    mask: T.UINT,
    hItem: T.HTREEITEM,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    iSelectedImage: T.INT,
    cChildren: T.INT,
    lParam: T.LPARAM,
    iIntegral: T.INT,
    uStateEx: T.UINT,
    hwnd: T.HWND,
    iExpandedImage: T.INT
}));};
T.TVINSERTSTRUCTA = function() {return Struct('tagTVINSERTSTRUCTA', {
    hParent: T.HTREEITEM,
    hInsertAfter: T.HTREEITEM,
    __unnamed0: Union('', {
        itemex: T.TVITEMEXA,
        item: T.TVITEMA
    })
});};
T.LPTVINSERTSTRUCTA = function() {return Pointer(Struct('tagTVINSERTSTRUCTA', {
    hParent: T.HTREEITEM,
    hInsertAfter: T.HTREEITEM,
    __unnamed0: Union('', {
        itemex: T.TVITEMEXA,
        item: T.TVITEMA
    })
}));};
T.TVINSERTSTRUCTW = function() {return Struct('tagTVINSERTSTRUCTW', {
    hParent: T.HTREEITEM,
    hInsertAfter: T.HTREEITEM,
    __unnamed0: Union('', {
        itemex: T.TVITEMEXW,
        item: T.TVITEMW
    })
});};
T.LPTVINSERTSTRUCTW = function() {return Pointer(Struct('tagTVINSERTSTRUCTW', {
    hParent: T.HTREEITEM,
    hInsertAfter: T.HTREEITEM,
    __unnamed0: Union('', {
        itemex: T.TVITEMEXW,
        item: T.TVITEMW
    })
}));};
T.NMTREEVIEWA = function() {return Struct('tagNMTREEVIEWA', {
    hdr: T.NMHDR,
    action: T.UINT,
    itemOld: T.TVITEMA,
    itemNew: T.TVITEMA,
    ptDrag: T.POINT
});};
T.LPNMTREEVIEWA = function() {return Pointer(Struct('tagNMTREEVIEWA', {
    hdr: T.NMHDR,
    action: T.UINT,
    itemOld: T.TVITEMA,
    itemNew: T.TVITEMA,
    ptDrag: T.POINT
}));};
T.NMTREEVIEWW = function() {return Struct('tagNMTREEVIEWW', {
    hdr: T.NMHDR,
    action: T.UINT,
    itemOld: T.TVITEMW,
    itemNew: T.TVITEMW,
    ptDrag: T.POINT
});};
T.LPNMTREEVIEWW = function() {return Pointer(Struct('tagNMTREEVIEWW', {
    hdr: T.NMHDR,
    action: T.UINT,
    itemOld: T.TVITEMW,
    itemNew: T.TVITEMW,
    ptDrag: T.POINT
}));};
T.NMTVDISPINFOA = function() {return Struct('tagTVDISPINFOA', {
    hdr: T.NMHDR,
    item: T.TVITEMA
});};
T.LPNMTVDISPINFOA = function() {return Pointer(Struct('tagTVDISPINFOA', {
    hdr: T.NMHDR,
    item: T.TVITEMA
}));};
T.NMTVDISPINFOW = function() {return Struct('tagTVDISPINFOW', {
    hdr: T.NMHDR,
    item: T.TVITEMW
});};
T.LPNMTVDISPINFOW = function() {return Pointer(Struct('tagTVDISPINFOW', {
    hdr: T.NMHDR,
    item: T.TVITEMW
}));};
T.NMTVDISPINFOEXA = function() {return Struct('tagTVDISPINFOEXA', {
    hdr: T.NMHDR,
    item: T.TVITEMEXA
});};
T.LPNMTVDISPINFOEXA = function() {return Pointer(Struct('tagTVDISPINFOEXA', {
    hdr: T.NMHDR,
    item: T.TVITEMEXA
}));};
T.NMTVDISPINFOEXW = function() {return Struct('tagTVDISPINFOEXW', {
    hdr: T.NMHDR,
    item: T.TVITEMEXW
});};
T.LPNMTVDISPINFOEXW = function() {return Pointer(Struct('tagTVDISPINFOEXW', {
    hdr: T.NMHDR,
    item: T.TVITEMEXW
}));};
T.PFNTVCOMPARE = function() {return Pointer(Fn(T.INT, [[T.LPARAM], [T.LPARAM], [T.LPARAM]]), [['stdcall']]);};
T.TVSORTCB = function() {return Struct('tagTVSORTCB', {
    hParent: T.HTREEITEM,
    lpfnCompare: T.PFNTVCOMPARE,
    lParam: T.LPARAM
});};
T.LPTVSORTCB = function() {return Pointer(Struct('tagTVSORTCB', {
    hParent: T.HTREEITEM,
    lpfnCompare: T.PFNTVCOMPARE,
    lParam: T.LPARAM
}));};
T.TVHITTESTINFO = function() {return Struct('tagTVHITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT,
    hItem: T.HTREEITEM
});};
T.LPTVHITTESTINFO = function() {return Pointer(Struct('tagTVHITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT,
    hItem: T.HTREEITEM
}));};
T.NMTVCUSTOMDRAW = function() {return Struct('tagNMTVCUSTOMDRAW', {
    nmcd: T.NMCUSTOMDRAW,
    clrText: T.COLORREF,
    clrTextBk: T.COLORREF,
    iLevel: T.INT
});};
T.LPNMTVCUSTOMDRAW = function() {return Pointer(Struct('tagNMTVCUSTOMDRAW', {
    nmcd: T.NMCUSTOMDRAW,
    clrText: T.COLORREF,
    clrTextBk: T.COLORREF,
    iLevel: T.INT
}));};
T.NMTVGETINFOTIPA = function() {return Struct('tagNMTVGETINFOTIPA', {
    hdr: T.NMHDR,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    hItem: T.HTREEITEM,
    lParam: T.LPARAM
});};
T.LPNMTVGETINFOTIPA = function() {return Pointer(Struct('tagNMTVGETINFOTIPA', {
    hdr: T.NMHDR,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    hItem: T.HTREEITEM,
    lParam: T.LPARAM
}));};
T.NMTVGETINFOTIPW = function() {return Struct('tagNMTVGETINFOTIPW', {
    hdr: T.NMHDR,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    hItem: T.HTREEITEM,
    lParam: T.LPARAM
});};
T.LPNMTVGETINFOTIPW = function() {return Pointer(Struct('tagNMTVGETINFOTIPW', {
    hdr: T.NMHDR,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    hItem: T.HTREEITEM,
    lParam: T.LPARAM
}));};
T.NMTVKEYDOWN = function() {return Struct('tagTVKEYDOWN', {
    hdr: T.NMHDR,
    wVKey: T.WORD,
    flags: T.UINT
});};
T.LPNMTVKEYDOWN = function() {return Pointer(Struct('tagTVKEYDOWN', {
    hdr: T.NMHDR,
    wVKey: T.WORD,
    flags: T.UINT
}));};
T.LVITEMA = function() {return Struct('tagLVITEMA', {
    mask: T.UINT,
    iItem: T.INT,
    iSubItem: T.INT,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM,
    iIndent: T.INT,
    iGroupId: T.INT,
    cColumns: T.UINT,
    puColumns: T.PUINT,
    piColFmt: T.PINT,
    iGroup: T.INT
});};
T.LPLVITEMA = function() {return Pointer(Struct('tagLVITEMA', {
    mask: T.UINT,
    iItem: T.INT,
    iSubItem: T.INT,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM,
    iIndent: T.INT,
    iGroupId: T.INT,
    cColumns: T.UINT,
    puColumns: T.PUINT,
    piColFmt: T.PINT,
    iGroup: T.INT
}));};
T.LVITEMW = function() {return Struct('tagLVITEMW', {
    mask: T.UINT,
    iItem: T.INT,
    iSubItem: T.INT,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM,
    iIndent: T.INT,
    iGroupId: T.INT,
    cColumns: T.UINT,
    puColumns: T.PUINT,
    piColFmt: T.PINT,
    iGroup: T.INT
});};
T.LPLVITEMW = function() {return Pointer(Struct('tagLVITEMW', {
    mask: T.UINT,
    iItem: T.INT,
    iSubItem: T.INT,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM,
    iIndent: T.INT,
    iGroupId: T.INT,
    cColumns: T.UINT,
    puColumns: T.PUINT,
    piColFmt: T.PINT,
    iGroup: T.INT
}));};
T.LVSETINFOTIP = function() {return Struct('LVSETINFOTIP', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    pszText: T.LPWSTR,
    iItem: T.i32,
    iSubItem: T.i32
});};
T.PLVSETINFOTIP = function() {return Pointer(Struct('LVSETINFOTIP', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    pszText: T.LPWSTR,
    iItem: T.i32,
    iSubItem: T.i32
}));};
T.LVBKIMAGEA = function() {return Struct('tagLVBKIMAGEA', {
    ulFlags: T.ULONG,
    hbm: T.HBITMAP,
    pszImage: T.LPSTR,
    cchImageMax: T.UINT,
    xOffsetPercent: T.i32,
    yOffsetPercent: T.i32
});};
T.LPLVBKIMAGEA = function() {return Pointer(Struct('tagLVBKIMAGEA', {
    ulFlags: T.ULONG,
    hbm: T.HBITMAP,
    pszImage: T.LPSTR,
    cchImageMax: T.UINT,
    xOffsetPercent: T.i32,
    yOffsetPercent: T.i32
}));};
T.LVBKIMAGEW = function() {return Struct('tagLVBKIMAGEW', {
    ulFlags: T.ULONG,
    hbm: T.HBITMAP,
    pszImage: T.LPWSTR,
    cchImageMax: T.UINT,
    xOffsetPercent: T.i32,
    yOffsetPercent: T.i32
});};
T.LPLVBKIMAGEW = function() {return Pointer(Struct('tagLVBKIMAGEW', {
    ulFlags: T.ULONG,
    hbm: T.HBITMAP,
    pszImage: T.LPWSTR,
    cchImageMax: T.UINT,
    xOffsetPercent: T.i32,
    yOffsetPercent: T.i32
}));};
T.LVCOLUMNA = function() {return Struct('tagLVCOLUMNA', {
    mask: T.UINT,
    fmt: T.INT,
    cx: T.INT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iSubItem: T.INT,
    iImage: T.INT,
    iOrder: T.INT,
    cxMin: T.INT,
    cxDefault: T.INT,
    cxIdeal: T.INT
});};
T.LPLVCOLUMNA = function() {return Pointer(Struct('tagLVCOLUMNA', {
    mask: T.UINT,
    fmt: T.INT,
    cx: T.INT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iSubItem: T.INT,
    iImage: T.INT,
    iOrder: T.INT,
    cxMin: T.INT,
    cxDefault: T.INT,
    cxIdeal: T.INT
}));};
T.LVCOLUMNW = function() {return Struct('tagLVCOLUMNW', {
    mask: T.UINT,
    fmt: T.INT,
    cx: T.INT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iSubItem: T.INT,
    iImage: T.INT,
    iOrder: T.INT,
    cxMin: T.INT,
    cxDefault: T.INT,
    cxIdeal: T.INT
});};
T.LPLVCOLUMNW = function() {return Pointer(Struct('tagLVCOLUMNW', {
    mask: T.UINT,
    fmt: T.INT,
    cx: T.INT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iSubItem: T.INT,
    iImage: T.INT,
    iOrder: T.INT,
    cxMin: T.INT,
    cxDefault: T.INT,
    cxIdeal: T.INT
}));};
T.NMLISTVIEW = function() {return Struct('tagNMLISTVIEW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    iSubItem: T.INT,
    uNewState: T.UINT,
    uOldState: T.UINT,
    uChanged: T.UINT,
    ptAction: T.POINT,
    lParam: T.LPARAM
});};
T.LPNMLISTVIEW = function() {return Pointer(Struct('tagNMLISTVIEW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    iSubItem: T.INT,
    uNewState: T.UINT,
    uOldState: T.UINT,
    uChanged: T.UINT,
    ptAction: T.POINT,
    lParam: T.LPARAM
}));};
T.NMITEMACTIVATE = function() {return Struct('tagNMITEMACTIVATE', {
    hdr: T.NMHDR,
    iItem: T.i32,
    iSubItem: T.i32,
    uNewState: T.UINT,
    uOldState: T.UINT,
    uChanged: T.UINT,
    ptAction: T.POINT,
    lParam: T.LPARAM,
    uKeyFlags: T.UINT
});};
T.LPNMITEMACTIVATE = function() {return Pointer(Struct('tagNMITEMACTIVATE', {
    hdr: T.NMHDR,
    iItem: T.i32,
    iSubItem: T.i32,
    uNewState: T.UINT,
    uOldState: T.UINT,
    uChanged: T.UINT,
    ptAction: T.POINT,
    lParam: T.LPARAM,
    uKeyFlags: T.UINT
}));};
T.NMLVDISPINFOA = function() {return Struct('tagLVDISPINFO', {
    hdr: T.NMHDR,
    item: T.LVITEMA
});};
T.LPNMLVDISPINFOA = function() {return Pointer(Struct('tagLVDISPINFO', {
    hdr: T.NMHDR,
    item: T.LVITEMA
}));};
T.NMLVDISPINFOW = function() {return Struct('tagLVDISPINFOW', {
    hdr: T.NMHDR,
    item: T.LVITEMW
});};
T.LPNMLVDISPINFOW = function() {return Pointer(Struct('tagLVDISPINFOW', {
    hdr: T.NMHDR,
    item: T.LVITEMW
}));};
T.NMLVKEYDOWN = function() {return Struct('tagLVKEYDOWN', {
    hdr: T.NMHDR,
    wVKey: T.WORD,
    flags: T.UINT
});};
T.LPNMLVKEYDOWN = function() {return Pointer(Struct('tagLVKEYDOWN', {
    hdr: T.NMHDR,
    wVKey: T.WORD,
    flags: T.UINT
}));};
T.NMLVGETINFOTIPA = function() {return Struct('tagNMLVGETINFOTIPA', {
    hdr: T.NMHDR,
    dwFlags: T.DWORD,
    pszText: T.LPSTR,
    cchTextMax: T.i32,
    iItem: T.i32,
    iSubItem: T.i32,
    lParam: T.LPARAM
});};
T.LPNMLVGETINFOTIPA = function() {return Pointer(Struct('tagNMLVGETINFOTIPA', {
    hdr: T.NMHDR,
    dwFlags: T.DWORD,
    pszText: T.LPSTR,
    cchTextMax: T.i32,
    iItem: T.i32,
    iSubItem: T.i32,
    lParam: T.LPARAM
}));};
T.NMLVGETINFOTIPW = function() {return Struct('tagNMLVGETINFOTIPW', {
    hdr: T.NMHDR,
    dwFlags: T.DWORD,
    pszText: T.LPWSTR,
    cchTextMax: T.i32,
    iItem: T.i32,
    iSubItem: T.i32,
    lParam: T.LPARAM
});};
T.LPNMLVGETINFOTIPW = function() {return Pointer(Struct('tagNMLVGETINFOTIPW', {
    hdr: T.NMHDR,
    dwFlags: T.DWORD,
    pszText: T.LPWSTR,
    cchTextMax: T.i32,
    iItem: T.i32,
    iSubItem: T.i32,
    lParam: T.LPARAM
}));};
T.LVHITTESTINFO = function() {return Struct('tagLVHITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT,
    iItem: T.INT,
    iSubItem: T.INT,
    iGroup: T.INT
});};
T.LPLVHITTESTINFO = function() {return Pointer(Struct('tagLVHITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT,
    iItem: T.INT,
    iSubItem: T.INT,
    iGroup: T.INT
}));};
T.LVFINDINFOA = function() {return Struct('tagLVFINDINFOA', {
    flags: T.UINT,
    psz: T.LPCSTR,
    lParam: T.LPARAM,
    pt: T.POINT,
    vkDirection: T.UINT
});};
T.LPLVFINDINFOA = function() {return Pointer(Struct('tagLVFINDINFOA', {
    flags: T.UINT,
    psz: T.LPCSTR,
    lParam: T.LPARAM,
    pt: T.POINT,
    vkDirection: T.UINT
}));};
T.LVFINDINFOW = function() {return Struct('tagLVFINDINFOW', {
    flags: T.UINT,
    psz: T.LPCWSTR,
    lParam: T.LPARAM,
    pt: T.POINT,
    vkDirection: T.UINT
});};
T.LPLVFINDINFOW = function() {return Pointer(Struct('tagLVFINDINFOW', {
    flags: T.UINT,
    psz: T.LPCWSTR,
    lParam: T.LPARAM,
    pt: T.POINT,
    vkDirection: T.UINT
}));};
T.LVGROUP = function() {return Struct('LVGROUP', {
    cbSize: T.UINT,
    mask: T.UINT,
    pszHeader: T.LPWSTR,
    cchHeader: T.INT,
    pszFooter: T.LPWSTR,
    cchFooter: T.INT,
    iGroupId: T.INT,
    stateMask: T.UINT,
    state: T.UINT,
    uAlign: T.UINT,
    pszSubtitle: T.LPWSTR,
    cchSubtitle: T.UINT,
    pszTask: T.LPWSTR,
    cchTask: T.UINT,
    pszDescriptionTop: T.LPWSTR,
    cchDescriptionTop: T.UINT,
    pszDescriptionBottom: T.LPWSTR,
    cchDescriptionBottom: T.UINT,
    iTitleImage: T.INT,
    iExtendedImage: T.INT,
    iFirstItem: T.INT,
    cItems: T.UINT,
    pszSubsetTitle: T.LPWSTR,
    cchSubsetTitle: T.UINT
});};
T.PLVGROUP = function() {return Pointer(Struct('LVGROUP', {
    cbSize: T.UINT,
    mask: T.UINT,
    pszHeader: T.LPWSTR,
    cchHeader: T.INT,
    pszFooter: T.LPWSTR,
    cchFooter: T.INT,
    iGroupId: T.INT,
    stateMask: T.UINT,
    state: T.UINT,
    uAlign: T.UINT,
    pszSubtitle: T.LPWSTR,
    cchSubtitle: T.UINT,
    pszTask: T.LPWSTR,
    cchTask: T.UINT,
    pszDescriptionTop: T.LPWSTR,
    cchDescriptionTop: T.UINT,
    pszDescriptionBottom: T.LPWSTR,
    cchDescriptionBottom: T.UINT,
    iTitleImage: T.INT,
    iExtendedImage: T.INT,
    iFirstItem: T.INT,
    cItems: T.UINT,
    pszSubsetTitle: T.LPWSTR,
    cchSubsetTitle: T.UINT
}));};
T.LVGROUPMETRICS = function() {return Struct('LVGROUPMETRICS', {
    cbSize: T.UINT,
    mask: T.UINT,
    Left: T.UINT,
    Top: T.UINT,
    Right: T.UINT,
    Bottom: T.UINT,
    crLeft: T.COLORREF,
    crTop: T.COLORREF,
    crRight: T.COLORREF,
    crBottom: T.COLORREF,
    crRightHeader: T.COLORREF,
    crFooter: T.COLORREF
});};
T.PLVGROUPMETRICS = function() {return Pointer(Struct('LVGROUPMETRICS', {
    cbSize: T.UINT,
    mask: T.UINT,
    Left: T.UINT,
    Top: T.UINT,
    Right: T.UINT,
    Bottom: T.UINT,
    crLeft: T.COLORREF,
    crTop: T.COLORREF,
    crRight: T.COLORREF,
    crBottom: T.COLORREF,
    crRightHeader: T.COLORREF,
    crFooter: T.COLORREF
}));};
T.PFNLVGROUPCOMPARE = function() {return Pointer(Fn(T.INT, [[T.INT], [T.INT], [Pointer(null)]]));};
T.LVINSERTGROUPSORTED = function() {return Struct('LVINSERTGROUPSORTED', {
    pfnGroupCompare: T.PFNLVGROUPCOMPARE,
    pvData: Pointer(T.LPVOID),
    lvGroup: T.LVGROUP
});};
T.PLVINSERTGROUPSORTED = function() {return Pointer(Struct('LVINSERTGROUPSORTED', {
    pfnGroupCompare: T.PFNLVGROUPCOMPARE,
    pvData: Pointer(T.LPVOID),
    lvGroup: T.LVGROUP
}));};
T.LVTILEINFO = function() {return Struct('LVTILEINFO', {
    cbSize: T.UINT,
    iItem: T.i32,
    cColumns: T.UINT,
    puColumns: T.PUINT,
    piColFmt: Pointer(T.i32)
});};
T.PLVTILEINFO = function() {return Pointer(Struct('LVTILEINFO', {
    cbSize: T.UINT,
    iItem: T.i32,
    cColumns: T.UINT,
    puColumns: T.PUINT,
    piColFmt: Pointer(T.i32)
}));};
T.LVTILEVIEWINFO = function() {return Struct('LVTILEVIEWINFO', {
    cbSize: T.UINT,
    dwMask: T.DWORD,
    dwFlags: T.DWORD,
    sizeTile: T.SIZE,
    cLines: T.i32,
    rcLabelMargin: T.RECT
});};
T.PLVTILEVIEWINFO = function() {return Pointer(Struct('LVTILEVIEWINFO', {
    cbSize: T.UINT,
    dwMask: T.DWORD,
    dwFlags: T.DWORD,
    sizeTile: T.SIZE,
    cLines: T.i32,
    rcLabelMargin: T.RECT
}));};
T.LVINSERTMARK = function() {return Struct('LVINSERTMARK', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iItem: T.i32,
    dwReserved: T.DWORD
});};
T.PLVINSERTMARK = function() {return Pointer(Struct('LVINSERTMARK', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iItem: T.i32,
    dwReserved: T.DWORD
}));};
T.TCHITTESTINFO = function() {return Struct('tagTCHITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT
});};
T.LPTCHITTESTINFO = function() {return Pointer(Struct('tagTCHITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT
}));};
T.PFNLVCOMPARE = function() {return Pointer(Fn(T.INT, [[T.LPARAM], [T.LPARAM], [T.LPARAM]]), [['stdcall']]);};
T.NMLVCUSTOMDRAW = function() {return Struct('tagNMLVCUSTOMDRAW', {
    nmcd: T.NMCUSTOMDRAW,
    clrText: T.COLORREF,
    clrTextBk: T.COLORREF,
    iSubItem: T.i32,
    dwItemType: T.DWORD,
    clrFace: T.COLORREF,
    iIconEffect: T.i32,
    iIconPhase: T.i32,
    iPartId: T.i32,
    iStateId: T.i32,
    rcText: T.RECT,
    uAlign: T.UINT
});};
T.LPNMLVCUSTOMDRAW = function() {return Pointer(Struct('tagNMLVCUSTOMDRAW', {
    nmcd: T.NMCUSTOMDRAW,
    clrText: T.COLORREF,
    clrTextBk: T.COLORREF,
    iSubItem: T.i32,
    dwItemType: T.DWORD,
    clrFace: T.COLORREF,
    iIconEffect: T.i32,
    iIconPhase: T.i32,
    iPartId: T.i32,
    iStateId: T.i32,
    rcText: T.RECT,
    uAlign: T.UINT
}));};
T.NMLVCACHEHINT = function() {return Struct('tagNMLVCACHEHINT', {
    hdr: T.NMHDR,
    iFrom: T.INT,
    iTo: T.INT
});};
T.LPNMLVCACHEHINT = function() {return Pointer(Struct('tagNMLVCACHEHINT', {
    hdr: T.NMHDR,
    iFrom: T.INT,
    iTo: T.INT
}));};
T.NMLVFINDITEMA = function() {return Struct('tagNMLVFINDITEMA', {
    hdr: T.NMHDR,
    iStart: T.i32,
    lvfi: T.LVFINDINFOA
});};
T.LPNMLVFINDITEMA = function() {return Pointer(Struct('tagNMLVFINDITEMA', {
    hdr: T.NMHDR,
    iStart: T.i32,
    lvfi: T.LVFINDINFOA
}));};
T.NMLVFINDITEMW = function() {return Struct('tagNMLVFINDITEMW', {
    hdr: T.NMHDR,
    iStart: T.i32,
    lvfi: T.LVFINDINFOW
});};
T.LPNMLVFINDITEMW = function() {return Pointer(Struct('tagNMLVFINDITEMW', {
    hdr: T.NMHDR,
    iStart: T.i32,
    lvfi: T.LVFINDINFOW
}));};
T.NMLVODSTATECHANGE = function() {return Struct('tagNMLVODSTATECHANGE', {
    hdr: T.NMHDR,
    iFrom: T.i32,
    iTo: T.i32,
    uNewState: T.UINT,
    uOldState: T.UINT
});};
T.LPNMLVODSTATECHANGE = function() {return Pointer(Struct('tagNMLVODSTATECHANGE', {
    hdr: T.NMHDR,
    iFrom: T.i32,
    iTo: T.i32,
    uNewState: T.UINT,
    uOldState: T.UINT
}));};
T.NMLVSCROLL = function() {return Struct('NMLVSCROLL', {
    hdr: T.NMHDR,
    dx: T.i32,
    dy: T.i32
});};
T.LPNMLVSCROLL = function() {return Pointer(Struct('NMLVSCROLL', {
    hdr: T.NMHDR,
    dx: T.i32,
    dy: T.i32
}));};
T.TCITEMHEADERA = function() {return Struct('tagTCITEMHEADERA', {
    mask: T.UINT,
    lpReserved1: T.UINT,
    lpReserved2: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.i32,
    iImage: T.i32
});};
T.LPTCITEMHEADERA = function() {return Pointer(Struct('tagTCITEMHEADERA', {
    mask: T.UINT,
    lpReserved1: T.UINT,
    lpReserved2: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.i32,
    iImage: T.i32
}));};
T.TCITEMHEADERW = function() {return Struct('tagTCITEMHEADERW', {
    mask: T.UINT,
    lpReserved1: T.UINT,
    lpReserved2: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.i32,
    iImage: T.i32
});};
T.LPTCITEMHEADERW = function() {return Pointer(Struct('tagTCITEMHEADERW', {
    mask: T.UINT,
    lpReserved1: T.UINT,
    lpReserved2: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.i32,
    iImage: T.i32
}));};
T.TCITEMA = function() {return Struct('tagTCITEMA', {
    mask: T.UINT,
    dwState: T.UINT,
    dwStateMask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM
});};
T.LPTCITEMA = function() {return Pointer(Struct('tagTCITEMA', {
    mask: T.UINT,
    dwState: T.UINT,
    dwStateMask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM
}));};
T.TCITEMW = function() {return Struct('tagTCITEMW', {
    mask: T.UINT,
    dwState: T.DWORD,
    dwStateMask: T.DWORD,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM
});};
T.LPTCITEMW = function() {return Pointer(Struct('tagTCITEMW', {
    mask: T.UINT,
    dwState: T.DWORD,
    dwStateMask: T.DWORD,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM
}));};
T.NMTCKEYDOWN = function() {return Struct('tagTCKEYDOWN', {
    hdr: T.NMHDR,
    wVKey: T.WORD,
    flags: T.UINT
});};
T.COMBOBOXEXITEMA = function() {return Struct('tagCOMBOBOXEXITEMA', {
    mask: T.UINT,
    iItem: T.INT_PTR,
    pszText: T.LPSTR,
    cchTextMax: T.i32,
    iImage: T.i32,
    iSelectedImage: T.i32,
    iOverlay: T.i32,
    iIndent: T.i32,
    lParam: T.LPARAM
});};
T.PCOMBOBOXEXITEMA = function() {return Pointer(Struct('tagCOMBOBOXEXITEMA', {
    mask: T.UINT,
    iItem: T.INT_PTR,
    pszText: T.LPSTR,
    cchTextMax: T.i32,
    iImage: T.i32,
    iSelectedImage: T.i32,
    iOverlay: T.i32,
    iIndent: T.i32,
    lParam: T.LPARAM
}));};
T.PCCOMBOEXITEMA = function() {return Pointer(T.COMBOBOXEXITEMA, [['const']]);};
T.COMBOBOXEXITEMW = function() {return Struct('tagCOMBOBOXEXITEMW', {
    mask: T.UINT,
    iItem: T.INT_PTR,
    pszText: T.LPWSTR,
    cchTextMax: T.i32,
    iImage: T.i32,
    iSelectedImage: T.i32,
    iOverlay: T.i32,
    iIndent: T.i32,
    lParam: T.LPARAM
});};
T.PCOMBOBOXEXITEMW = function() {return Pointer(Struct('tagCOMBOBOXEXITEMW', {
    mask: T.UINT,
    iItem: T.INT_PTR,
    pszText: T.LPWSTR,
    cchTextMax: T.i32,
    iImage: T.i32,
    iSelectedImage: T.i32,
    iOverlay: T.i32,
    iIndent: T.i32,
    lParam: T.LPARAM
}));};
T.PCCOMBOEXITEMW = function() {return Pointer(T.COMBOBOXEXITEMW, [['const']]);};
T.NMCBEENDEDITW = function() {return Struct('tagNMCBEENDEDITW', {
    hdr: T.NMHDR,
    fChanged: T.BOOL,
    iNewSelection: T.i32,
    szText: ArrayType(T.WCHAR, 260),
    iWhy: T.i32
});};
T.LPNMCBEENDEDITW = function() {return Pointer(Struct('tagNMCBEENDEDITW', {
    hdr: T.NMHDR,
    fChanged: T.BOOL,
    iNewSelection: T.i32,
    szText: ArrayType(T.WCHAR, 260),
    iWhy: T.i32
}));};
T.PNMCBEENDEDITW = function() {return Pointer(Struct('tagNMCBEENDEDITW', {
    hdr: T.NMHDR,
    fChanged: T.BOOL,
    iNewSelection: T.i32,
    szText: ArrayType(T.WCHAR, 260),
    iWhy: T.i32
}));};
T.NMCBEENDEDITA = function() {return Struct('tagNMCBEENDEDITA', {
    hdr: T.NMHDR,
    fChanged: T.BOOL,
    iNewSelection: T.i32,
    szText: ArrayType(T.char, 260),
    iWhy: T.i32
});};
T.LPNMCBEENDEDITA = function() {return Pointer(Struct('tagNMCBEENDEDITA', {
    hdr: T.NMHDR,
    fChanged: T.BOOL,
    iNewSelection: T.i32,
    szText: ArrayType(T.char, 260),
    iWhy: T.i32
}));};
T.PNMCBEENDEDITA = function() {return Pointer(Struct('tagNMCBEENDEDITA', {
    hdr: T.NMHDR,
    fChanged: T.BOOL,
    iNewSelection: T.i32,
    szText: ArrayType(T.char, 260),
    iWhy: T.i32
}));};
T.NMCOMBOBOXEXA = function() {return Struct('', {
    hdr: T.NMHDR,
    ceItem: T.COMBOBOXEXITEMA
});};
T.PNMCOMBOBOXEXA = function() {return Pointer(Struct('', {
    hdr: T.NMHDR,
    ceItem: T.COMBOBOXEXITEMA
}));};
T.NMCOMBOBOXEXW = function() {return Struct('', {
    hdr: T.NMHDR,
    ceItem: T.COMBOBOXEXITEMW
});};
T.PNMCOMBOBOXEXW = function() {return Pointer(Struct('', {
    hdr: T.NMHDR,
    ceItem: T.COMBOBOXEXITEMW
}));};
T.NMCBEDRAGBEGINA = function() {return Struct('', {
    hdr: T.NMHDR,
    iItemid: T.i32,
    szText: ArrayType(T.char, 260)
});};
T.PNMCBEDRAGBEGINA = function() {return Pointer(Struct('', {
    hdr: T.NMHDR,
    iItemid: T.i32,
    szText: ArrayType(T.char, 260)
}));};
T.LPNMCBEDRAGBEGINA = function() {return Pointer(Struct('', {
    hdr: T.NMHDR,
    iItemid: T.i32,
    szText: ArrayType(T.char, 260)
}));};
T.NMCBEDRAGBEGINW = function() {return Struct('', {
    hdr: T.NMHDR,
    iItemid: T.i32,
    szText: ArrayType(T.WCHAR, 260)
});};
T.PNMCBEDRAGBEGINW = function() {return Pointer(Struct('', {
    hdr: T.NMHDR,
    iItemid: T.i32,
    szText: ArrayType(T.WCHAR, 260)
}));};
T.LPNMCBEDRAGBEGINW = function() {return Pointer(Struct('', {
    hdr: T.NMHDR,
    iItemid: T.i32,
    szText: ArrayType(T.WCHAR, 260)
}));};
T.NMIPADDRESS = function() {return Struct('tagNMIPADDRESS', {
    hdr: T.NMHDR,
    iField: T.INT,
    iValue: T.INT
});};
T.LPNMIPADDRESS = function() {return Pointer(Struct('tagNMIPADDRESS', {
    hdr: T.NMHDR,
    iField: T.INT,
    iValue: T.INT
}));};
T.MCHITTESTINFO = function() {return Struct('', {
    cbSize: T.UINT,
    pt: T.POINT,
    uHit: T.UINT,
    st: T.SYSTEMTIME,
    rc: T.RECT,
    iOffset: T.INT,
    iRow: T.INT,
    iCol: T.INT
});};
T.PMCHITTESTINFO = function() {return Pointer(Struct('', {
    cbSize: T.UINT,
    pt: T.POINT,
    uHit: T.UINT,
    st: T.SYSTEMTIME,
    rc: T.RECT,
    iOffset: T.INT,
    iRow: T.INT,
    iCol: T.INT
}));};
T.NMSELCHANGE = function() {return Struct('tagNMSELCHANGE', {
    nmhdr: T.NMHDR,
    stSelStart: T.SYSTEMTIME,
    stSelEnd: T.SYSTEMTIME
});};
T.LPNMSELCHANGE = function() {return Pointer(Struct('tagNMSELCHANGE', {
    nmhdr: T.NMHDR,
    stSelStart: T.SYSTEMTIME,
    stSelEnd: T.SYSTEMTIME
}));};
T.NMSELECT = function() {return T.NMSELCHANGE;};
T.LPNMSELECT = function() {return Pointer(T.NMSELCHANGE);};
T.MONTHDAYSTATE = function() {return T.DWORD;};
T.LPMONTHDAYSTATE = function() {return Pointer(T.DWORD);};
T.NMDAYSTATE = function() {return Struct('tagNMDAYSTATE', {
    nmhdr: T.NMHDR,
    stStart: T.SYSTEMTIME,
    cDayState: T.i32,
    prgDayState: T.LPMONTHDAYSTATE
});};
T.LPNMDAYSTATE = function() {return Pointer(Struct('tagNMDAYSTATE', {
    nmhdr: T.NMHDR,
    stStart: T.SYSTEMTIME,
    cDayState: T.i32,
    prgDayState: T.LPMONTHDAYSTATE
}));};
T.NMDATETIMECHANGE = function() {return Struct('tagNMDATETIMECHANGE', {
    nmhdr: T.NMHDR,
    dwFlags: T.DWORD,
    st: T.SYSTEMTIME
});};
T.LPNMDATETIMECHANGE = function() {return Pointer(Struct('tagNMDATETIMECHANGE', {
    nmhdr: T.NMHDR,
    dwFlags: T.DWORD,
    st: T.SYSTEMTIME
}));};
T.NMDATETIMESTRINGA = function() {return Struct('tagNMDATETIMESTRINGA', {
    nmhdr: T.NMHDR,
    pszUserString: T.LPCSTR,
    st: T.SYSTEMTIME,
    dwFlags: T.DWORD
});};
T.LPNMDATETIMESTRINGA = function() {return Pointer(Struct('tagNMDATETIMESTRINGA', {
    nmhdr: T.NMHDR,
    pszUserString: T.LPCSTR,
    st: T.SYSTEMTIME,
    dwFlags: T.DWORD
}));};
T.NMDATETIMESTRINGW = function() {return Struct('tagNMDATETIMESTRINGW', {
    nmhdr: T.NMHDR,
    pszUserString: T.LPCWSTR,
    st: T.SYSTEMTIME,
    dwFlags: T.DWORD
});};
T.LPNMDATETIMESTRINGW = function() {return Pointer(Struct('tagNMDATETIMESTRINGW', {
    nmhdr: T.NMHDR,
    pszUserString: T.LPCWSTR,
    st: T.SYSTEMTIME,
    dwFlags: T.DWORD
}));};
T.NMDATETIMESTRING = function() {return T.NMDATETIMESTRINGA;};
T.LPNMDATETIMESTRING = function() {return T.LPNMDATETIMESTRINGA;};
T.NMDATETIMEWMKEYDOWNA = function() {return Struct('tagNMDATETIMEWMKEYDOWNA', {
    nmhdr: T.NMHDR,
    nVirtKey: T.i32,
    pszFormat: T.LPCSTR,
    st: T.SYSTEMTIME
});};
T.LPNMDATETIMEWMKEYDOWNA = function() {return Pointer(Struct('tagNMDATETIMEWMKEYDOWNA', {
    nmhdr: T.NMHDR,
    nVirtKey: T.i32,
    pszFormat: T.LPCSTR,
    st: T.SYSTEMTIME
}));};
T.NMDATETIMEWMKEYDOWNW = function() {return Struct('tagNMDATETIMEWMKEYDOWNW', {
    nmhdr: T.NMHDR,
    nVirtKey: T.i32,
    pszFormat: T.LPCWSTR,
    st: T.SYSTEMTIME
});};
T.LPNMDATETIMEWMKEYDOWNW = function() {return Pointer(Struct('tagNMDATETIMEWMKEYDOWNW', {
    nmhdr: T.NMHDR,
    nVirtKey: T.i32,
    pszFormat: T.LPCWSTR,
    st: T.SYSTEMTIME
}));};
T.NMDATETIMEWMKEYDOWN = function() {return T.NMDATETIMEWMKEYDOWNA;};
T.LPNMDATETIMEWMKEYDOWN = function() {return T.LPNMDATETIMEWMKEYDOWNA;};
T.NMDATETIMEFORMATA = function() {return Struct('tagNMDATETIMEFORMATA', {
    nmhdr: T.NMHDR,
    pszFormat: T.LPCSTR,
    st: T.SYSTEMTIME,
    pszDisplay: T.LPCSTR,
    szDisplay: ArrayType(T.CHAR, 64)
});};
T.LPNMDATETIMEFORMATA = function() {return Pointer(Struct('tagNMDATETIMEFORMATA', {
    nmhdr: T.NMHDR,
    pszFormat: T.LPCSTR,
    st: T.SYSTEMTIME,
    pszDisplay: T.LPCSTR,
    szDisplay: ArrayType(T.CHAR, 64)
}));};
T.NMDATETIMEFORMATW = function() {return Struct('tagNMDATETIMEFORMATW', {
    nmhdr: T.NMHDR,
    pszFormat: T.LPCWSTR,
    st: T.SYSTEMTIME,
    pszDisplay: T.LPCWSTR,
    szDisplay: ArrayType(T.WCHAR, 64)
});};
T.LPNMDATETIMEFORMATW = function() {return Pointer(Struct('tagNMDATETIMEFORMATW', {
    nmhdr: T.NMHDR,
    pszFormat: T.LPCWSTR,
    st: T.SYSTEMTIME,
    pszDisplay: T.LPCWSTR,
    szDisplay: ArrayType(T.WCHAR, 64)
}));};
T.NMDATETIMEFORMAT = function() {return T.NMDATETIMEFORMATA;};
T.LPNMDATETIMEFORMAT = function() {return T.LPNMDATETIMEFORMATA;};
T.NMDATETIMEFORMATQUERYA = function() {return Struct('tagNMDATETIMEFORMATQUERYA', {
    nmhdr: T.NMHDR,
    pszFormat: T.LPCSTR,
    szMax: T.SIZE
});};
T.LPNMDATETIMEFORMATQUERYA = function() {return Pointer(Struct('tagNMDATETIMEFORMATQUERYA', {
    nmhdr: T.NMHDR,
    pszFormat: T.LPCSTR,
    szMax: T.SIZE
}));};
T.NMDATETIMEFORMATQUERYW = function() {return Struct('tagNMDATETIMEFORMATQUERYW', {
    nmhdr: T.NMHDR,
    pszFormat: T.LPCWSTR,
    szMax: T.SIZE
});};
T.LPNMDATETIMEFORMATQUERYW = function() {return Pointer(Struct('tagNMDATETIMEFORMATQUERYW', {
    nmhdr: T.NMHDR,
    pszFormat: T.LPCWSTR,
    szMax: T.SIZE
}));};
T.NMDATETIMEFORMATQUERY = function() {return T.NMDATETIMEFORMATQUERYA;};
T.LPNMDATETIMEFORMATQUERY = function() {return T.LPNMDATETIMEFORMATQUERYA;};
T.HDSA = function() {return Pointer(Struct('_DSA', null));};
T.PFNDSAENUMCALLBACK = function() {return Pointer(Fn(T.INT, [[T.LPVOID], [T.LPVOID]]), [['stdcall']]);};
T.HDPA = function() {return Pointer(Struct('_DPA', null));};
T.PFNDPAENUMCALLBACK = function() {return Pointer(Fn(T.INT, [[T.LPVOID], [T.LPVOID]]), [['stdcall']]);};
T.PFNDPACOMPARE = function() {return Pointer(Fn(T.INT, [[T.LPVOID], [T.LPVOID], [T.LPARAM]]), [['stdcall']]);};
T.PFNDPAMERGE = function() {return Pointer(Fn(T.PVOID, [[T.UINT], [T.PVOID], [T.PVOID], [T.LPARAM]]), [['stdcall']]);};
T.DPASTREAMINFO = function() {return Struct('_DPASTREAMINFO', {
    iPos: T.INT,
    pvItem: T.LPVOID
});};
T.PFNDPASTREAM = function() {return Pointer(Fn(T.HRESULT, [[Pointer(T.DPASTREAMINFO)], [Pointer(Struct('IStream', null))], [T.LPVOID]]), [['stdcall']]);};
T.LITEM = function() {return Struct('tagLITEM', {
    mask: T.UINT,
    iLink: T.i32,
    state: T.UINT,
    stateMask: T.UINT,
    szID: ArrayType(T.WCHAR, 48),
    szUrl: ArrayType(T.WCHAR, 2084)
});};
T.PLITEM = function() {return Pointer(Struct('tagLITEM', {
    mask: T.UINT,
    iLink: T.i32,
    state: T.UINT,
    stateMask: T.UINT,
    szID: ArrayType(T.WCHAR, 48),
    szUrl: ArrayType(T.WCHAR, 2084)
}));};
T.LHITTESTINFO = function() {return Struct('tagLHITTESTINFO', {
    pt: T.POINT,
    item: T.LITEM
});};
T.PLHITTESTINFO = function() {return Pointer(Struct('tagLHITTESTINFO', {
    pt: T.POINT,
    item: T.LITEM
}));};
T.NMLINK = function() {return Struct('tagNMLINK', {
    hdr: T.NMHDR,
    item: T.LITEM
});};
T.PNMLINK = function() {return Pointer(Struct('tagNMLINK', {
    hdr: T.NMHDR,
    item: T.LITEM
}));};
T.NMLVLINK = function() {return Struct('tagNMLVLINK', {
    hdr: T.NMHDR,
    link: T.LITEM,
    iItem: T.i32,
    iSubItem: T.i32
});};
T.PNMLVLINK = function() {return Pointer(Struct('tagNMLVLINK', {
    hdr: T.NMHDR,
    link: T.LITEM,
    iItem: T.i32,
    iSubItem: T.i32
}));};
T.TASKDIALOG_FLAGS = function() {return T.i32;};
T.TASKDIALOG_COMMON_BUTTON_FLAGS = function() {return T.i32;};
T.TASKDIALOG_BUTTON = function() {return Struct('_TASKDIALOG_BUTTON', {
    nButtonID: T.i32,
    pszButtonText: T.PCWSTR
});};
T.PFTASKDIALOGCALLBACK = function() {return Pointer(Fn(T.HRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM], [T.LONG_PTR]]), [['stdcall']]);};
T.TASKDIALOGCONFIG = function() {return Struct('_TASKDIALOGCONFIG', {
    cbSize: T.UINT,
    hwndParent: T.HWND,
    hInstance: T.HINSTANCE,
    dwFlags: T.TASKDIALOG_FLAGS,
    dwCommonButtons: T.TASKDIALOG_COMMON_BUTTON_FLAGS,
    pszWindowTitle: T.PCWSTR,
    __unnamed0: Union('', {
        hMainIcon: T.HICON,
        pszMainIcon: T.PCWSTR
    }),
    pszMainInstruction: T.PCWSTR,
    pszContent: T.PCWSTR,
    cButtons: T.UINT,
    pButtons: Pointer(T.TASKDIALOG_BUTTON),
    nDefaultButton: T.i32,
    cRadioButtons: T.UINT,
    pRadioButtons: Pointer(T.TASKDIALOG_BUTTON),
    nDefaultRadioButton: T.i32,
    pszVerificationText: T.PCWSTR,
    pszExpandedInformation: T.PCWSTR,
    pszExpandedControlText: T.PCWSTR,
    pszCollapsedControlText: T.PCWSTR,
    __unnamed1: Union('', {
        hFooterIcon: T.HICON,
        pszFooterIcon: T.PCWSTR
    }),
    pszFooter: T.PCWSTR,
    pfCallback: T.PFTASKDIALOGCALLBACK,
    lpCallbackData: T.LONG_PTR,
    cxWidth: T.UINT
});};
var globals = {
    __debugbreak: function() {return (Fn(null, [[null]], [['cdecl']]))('__debugbreak');},
    __mingw_get_crt_info: function() {return (Fn(Pointer(T.char), [[null]], [['const']]))('__mingw_get_crt_info');},
    GUID_NULL: function() {return (T.IID)('GUID_NULL');},
    _imp___pctype: function() {return (Pointer(Pointer(T.u16)))('_imp___pctype');},
    _imp___wctype: function() {return (Pointer(Pointer(T.u16)))('_imp___wctype');},
    _imp___pwctype: function() {return (Pointer(Pointer(T.u16)))('_imp___pwctype');},
    __newclmap: function() {return (Pointer(T.u8, [['const']]))('__newclmap');},
    __newcumap: function() {return (Pointer(T.u8, [['const']]))('__newcumap');},
    __ptlocinfo: function() {return (T.pthreadlocinfo)('__ptlocinfo');},
    __ptmbcinfo: function() {return (T.pthreadmbcinfo)('__ptmbcinfo');},
    __globallocalestatus: function() {return (T.i32)('__globallocalestatus');},
    __locale_changed: function() {return (T.i32)('__locale_changed');},
    __initiallocinfo: function() {return (Struct('threadlocaleinfostruct', null))('__initiallocinfo');},
    __initiallocalestructinfo: function() {return (T._locale_tstruct)('__initiallocalestructinfo');},
    __updatetlocinfo: function() {return (Fn(T.pthreadlocinfo, [[null]], [['cdecl']]))('__updatetlocinfo');},
    __updatetmbcinfo: function() {return (Fn(T.pthreadmbcinfo, [[null]], [['cdecl']]))('__updatetmbcinfo');},
    _isctype: function() {return (Fn(T.i32, [[T.i32, '_C'], [T.i32, '_Type']], [['dllimport'], ['cdecl']]))('_isctype');},
    _isctype_l: function() {return (Fn(T.i32, [[T.i32, '_C'], [T.i32, '_Type'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_isctype_l');},
    isalpha: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('isalpha');},
    _isalpha_l: function() {return (Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_isalpha_l');},
    isupper: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('isupper');},
    _isupper_l: function() {return (Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_isupper_l');},
    islower: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('islower');},
    _islower_l: function() {return (Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_islower_l');},
    isdigit: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('isdigit');},
    _isdigit_l: function() {return (Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_isdigit_l');},
    isxdigit: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('isxdigit');},
    _isxdigit_l: function() {return (Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_isxdigit_l');},
    isspace: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('isspace');},
    _isspace_l: function() {return (Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_isspace_l');},
    ispunct: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('ispunct');},
    _ispunct_l: function() {return (Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_ispunct_l');},
    isalnum: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('isalnum');},
    _isalnum_l: function() {return (Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_isalnum_l');},
    isprint: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('isprint');},
    _isprint_l: function() {return (Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_isprint_l');},
    isgraph: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('isgraph');},
    _isgraph_l: function() {return (Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_isgraph_l');},
    iscntrl: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('iscntrl');},
    _iscntrl_l: function() {return (Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_iscntrl_l');},
    toupper: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('toupper');},
    tolower: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('tolower');},
    _tolower: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('_tolower');},
    _tolower_l: function() {return (Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_tolower_l');},
    _toupper: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('_toupper');},
    _toupper_l: function() {return (Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_toupper_l');},
    __isascii: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('__isascii');},
    __toascii: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('__toascii');},
    __iscsymf: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('__iscsymf');},
    __iscsym: function() {return (Fn(T.i32, [[T.i32, '_C']], [['dllimport'], ['cdecl']]))('__iscsym');},
    isblank: function() {return (Fn(T.i32, [[T.i32, '_C']], [['cdecl']]))('isblank');},
    iswalpha: function() {return (Fn(T.i32, [[T.wint_t, '_C']], [['cdecl']]))('iswalpha');},
    _iswalpha_l: function() {return (Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_iswalpha_l');},
    iswupper: function() {return (Fn(T.i32, [[T.wint_t, '_C']], [['cdecl']]))('iswupper');},
    _iswupper_l: function() {return (Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_iswupper_l');},
    iswlower: function() {return (Fn(T.i32, [[T.wint_t, '_C']], [['cdecl']]))('iswlower');},
    _iswlower_l: function() {return (Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_iswlower_l');},
    iswdigit: function() {return (Fn(T.i32, [[T.wint_t, '_C']], [['cdecl']]))('iswdigit');},
    _iswdigit_l: function() {return (Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_iswdigit_l');},
    iswxdigit: function() {return (Fn(T.i32, [[T.wint_t, '_C']], [['cdecl']]))('iswxdigit');},
    _iswxdigit_l: function() {return (Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_iswxdigit_l');},
    iswspace: function() {return (Fn(T.i32, [[T.wint_t, '_C']], [['cdecl']]))('iswspace');},
    _iswspace_l: function() {return (Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_iswspace_l');},
    iswpunct: function() {return (Fn(T.i32, [[T.wint_t, '_C']], [['cdecl']]))('iswpunct');},
    _iswpunct_l: function() {return (Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_iswpunct_l');},
    iswalnum: function() {return (Fn(T.i32, [[T.wint_t, '_C']], [['cdecl']]))('iswalnum');},
    _iswalnum_l: function() {return (Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_iswalnum_l');},
    iswprint: function() {return (Fn(T.i32, [[T.wint_t, '_C']], [['cdecl']]))('iswprint');},
    _iswprint_l: function() {return (Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_iswprint_l');},
    iswgraph: function() {return (Fn(T.i32, [[T.wint_t, '_C']], [['cdecl']]))('iswgraph');},
    _iswgraph_l: function() {return (Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_iswgraph_l');},
    iswcntrl: function() {return (Fn(T.i32, [[T.wint_t, '_C']], [['cdecl']]))('iswcntrl');},
    _iswcntrl_l: function() {return (Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_iswcntrl_l');},
    iswascii: function() {return (Fn(T.i32, [[T.wint_t, '_C']], [['cdecl']]))('iswascii');},
    isleadbyte: function() {return (Fn(T.i32, [[T.i32, '_C']], [['cdecl']]))('isleadbyte');},
    _isleadbyte_l: function() {return (Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_isleadbyte_l');},
    towupper: function() {return (Fn(T.wint_t, [[T.wint_t, '_C']], [['cdecl']]))('towupper');},
    _towupper_l: function() {return (Fn(T.wint_t, [[T.wint_t, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_towupper_l');},
    towlower: function() {return (Fn(T.wint_t, [[T.wint_t, '_C']], [['cdecl']]))('towlower');},
    _towlower_l: function() {return (Fn(T.wint_t, [[T.wint_t, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_towlower_l');},
    iswctype: function() {return (Fn(T.i32, [[T.wint_t, '_C'], [T.wctype_t, '_Type']], [['cdecl']]))('iswctype');},
    _iswctype_l: function() {return (Fn(T.i32, [[T.wint_t, '_C'], [T.wctype_t, '_Type'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_iswctype_l');},
    __iswcsymf: function() {return (Fn(T.i32, [[T.wint_t, '_C']], [['dllimport'], ['cdecl']]))('__iswcsymf');},
    _iswcsymf_l: function() {return (Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_iswcsymf_l');},
    __iswcsym: function() {return (Fn(T.i32, [[T.wint_t, '_C']], [['dllimport'], ['cdecl']]))('__iswcsym');},
    _iswcsym_l: function() {return (Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_iswcsym_l');},
    is_wctype: function() {return (Fn(T.i32, [[T.wint_t, '_C'], [T.wctype_t, '_Type']], [['cdecl']]))('is_wctype');},
    iswblank: function() {return (Fn(T.i32, [[T.wint_t, '_C']], [['cdecl']]))('iswblank');},
    _imp____mb_cur_max: function() {return (Pointer(T.i32))('_imp____mb_cur_max');},
    _errno: function() {return (Fn(Pointer(T.i32), [[null]], [['dllimport'], ['cdecl']]))('_errno');},
    _set_errno: function() {return (Fn(T.errno_t, [[T.i32, '_Value']], [['cdecl']]))('_set_errno');},
    _get_errno: function() {return (Fn(T.errno_t, [[Pointer(T.i32), '_Value']], [['cdecl']]))('_get_errno');},
    __threadid: function() {return (Fn(T.u32, [[null]], [['dllimport'], ['cdecl']]))('__threadid');},
    __threadhandle: function() {return (Fn(T.uintptr_t, [[null]], [['dllimport'], ['cdecl']]))('__threadhandle');},
    _memccpy: function() {return (Fn(Pointer(null), [[Pointer(null), '_Dst'], [Pointer(null), '_Src'], [T.i32, '_Val'], [T.size_t, '_MaxCount']], [['dllimport'], ['cdecl']]))('_memccpy');},
    memchr: function() {return (Fn(Pointer(null), [[Pointer(null), '_Buf'], [T.i32, '_Val'], [T.size_t, '_MaxCount']], [['cdecl']]))('memchr');},
    _memicmp: function() {return (Fn(T.i32, [[Pointer(null), '_Buf1'], [Pointer(null), '_Buf2'], [T.size_t, '_Size']], [['dllimport'], ['cdecl']]))('_memicmp');},
    _memicmp_l: function() {return (Fn(T.i32, [[Pointer(null), '_Buf1'], [Pointer(null), '_Buf2'], [T.size_t, '_Size'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_memicmp_l');},
    memcmp: function() {return (Fn(T.i32, [[Pointer(null), '_Buf1'], [Pointer(null), '_Buf2'], [T.size_t, '_Size']], [['cdecl']]))('memcmp');},
    memcpy: function() {return (Fn(Pointer(null), [[Pointer(null), '_Dst'], [Pointer(null), '_Src'], [T.size_t, '_Size']], [['cdecl']]))('memcpy');},
    mempcpy: function() {return (Fn(Pointer(null), [[Pointer(null), '_Dst'], [Pointer(null), '_Src'], [T.size_t, '_Size']], [['cdecl']]))('mempcpy');},
    memset: function() {return (Fn(Pointer(null), [[Pointer(null), '_Dst'], [T.i32, '_Val'], [T.size_t, '_Size']], [['cdecl']]))('memset');},
    memccpy: function() {return (Fn(Pointer(null), [[Pointer(null), '_Dst'], [Pointer(null), '_Src'], [T.i32, '_Val'], [T.size_t, '_Size']], [['cdecl']]))('memccpy');},
    memicmp: function() {return (Fn(T.i32, [[Pointer(null), '_Buf1'], [Pointer(null), '_Buf2'], [T.size_t, '_Size']], [['cdecl']]))('memicmp');},
    _strset: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [T.i32, '_Val']], [['cdecl']]))('_strset');},
    _strset_l: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [T.i32, '_Val'], [T._locale_t, '_Locale']], [['cdecl']]))('_strset_l');},
    strcpy: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Dest'], [Pointer(T.char), '_Source']], [['cdecl']]))('strcpy');},
    strcat: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Dest'], [Pointer(T.char), '_Source']], [['cdecl']]))('strcat');},
    strcmp: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2']], [['cdecl']]))('strcmp');},
    strlen: function() {return (Fn(T.size_t, [[Pointer(T.char), '_Str']], [['cdecl']]))('strlen');},
    strnlen: function() {return (Fn(T.size_t, [[Pointer(T.char), '_Str'], [T.size_t, '_MaxCount']], [['cdecl']]))('strnlen');},
    memmove: function() {return (Fn(Pointer(null), [[Pointer(null), '_Dst'], [Pointer(null), '_Src'], [T.size_t, '_Size']], [['cdecl']]))('memmove');},
    _strdup: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Src']], [['dllimport'], ['cdecl']]))('_strdup');},
    strchr: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [T.i32, '_Val']], [['cdecl']]))('strchr');},
    _stricmp: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2']], [['dllimport'], ['cdecl']]))('_stricmp');},
    _strcmpi: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2']], [['dllimport'], ['cdecl']]))('_strcmpi');},
    _stricmp_l: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_stricmp_l');},
    strcoll: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2']], [['cdecl']]))('strcoll');},
    _strcoll_l: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_strcoll_l');},
    _stricoll: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2']], [['dllimport'], ['cdecl']]))('_stricoll');},
    _stricoll_l: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_stricoll_l');},
    _strncoll: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T.size_t, '_MaxCount']], [['dllimport'], ['cdecl']]))('_strncoll');},
    _strncoll_l: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_strncoll_l');},
    _strnicoll: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T.size_t, '_MaxCount']], [['dllimport'], ['cdecl']]))('_strnicoll');},
    _strnicoll_l: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_strnicoll_l');},
    strcspn: function() {return (Fn(T.size_t, [[Pointer(T.char), '_Str'], [Pointer(T.char), '_Control']], [['cdecl']]))('strcspn');},
    _strerror: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_ErrMsg']], [['dllimport'], ['cdecl']]))('_strerror');},
    strerror: function() {return (Fn(Pointer(T.char), [[T.i32]], [['cdecl']]))('strerror');},
    _strlwr: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_String']], [['dllimport'], ['cdecl']]))('_strlwr');},
    strlwr_l: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_String'], [T._locale_t, '_Locale']]))('strlwr_l');},
    strncat: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Dest'], [Pointer(T.char), '_Source'], [T.size_t, '_Count']], [['cdecl']]))('strncat');},
    strncmp: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T.size_t, '_MaxCount']], [['cdecl']]))('strncmp');},
    _strnicmp: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T.size_t, '_MaxCount']], [['dllimport'], ['cdecl']]))('_strnicmp');},
    _strnicmp_l: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_strnicmp_l');},
    strncpy: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Dest'], [Pointer(T.char), '_Source'], [T.size_t, '_Count']]))('strncpy');},
    _strnset: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [T.i32, '_Val'], [T.size_t, '_MaxCount']], [['dllimport'], ['cdecl']]))('_strnset');},
    _strnset_l: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), 'str'], [T.i32, 'c'], [T.size_t, 'count'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_strnset_l');},
    strpbrk: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [Pointer(T.char), '_Control']], [['cdecl']]))('strpbrk');},
    strrchr: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [T.i32, '_Ch']], [['cdecl']]))('strrchr');},
    _strrev: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Str']], [['dllimport'], ['cdecl']]))('_strrev');},
    strspn: function() {return (Fn(T.size_t, [[Pointer(T.char), '_Str'], [Pointer(T.char), '_Control']], [['cdecl']]))('strspn');},
    strstr: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [Pointer(T.char), '_SubStr']], [['cdecl']]))('strstr');},
    strtok: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [Pointer(T.char), '_Delim']], [['cdecl']]))('strtok');},
    _strupr: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_String']], [['dllimport'], ['cdecl']]))('_strupr');},
    _strupr_l: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_String'], [T._locale_t, '_Locale']], [['dllimport']]))('_strupr_l');},
    strxfrm: function() {return (Fn(T.size_t, [[Pointer(T.char), '_Dst'], [Pointer(T.char), '_Src'], [T.size_t, '_MaxCount']], [['cdecl']]))('strxfrm');},
    _strxfrm_l: function() {return (Fn(T.size_t, [[Pointer(T.char), '_Dst'], [Pointer(T.char), '_Src'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_strxfrm_l');},
    strdup: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Src']], [['cdecl']]))('strdup');},
    strcmpi: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2']], [['cdecl']]))('strcmpi');},
    stricmp: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2']], [['cdecl']]))('stricmp');},
    strlwr: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Str']], [['cdecl']]))('strlwr');},
    strnicmp: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str'], [T.size_t, '_MaxCount']], [['cdecl']]))('strnicmp');},
    strncasecmp: function() {return (Fn(T.i32, [[Pointer(T.char)], [Pointer(T.char)], [T.size_t]], [['cdecl']]))('strncasecmp');},
    strcasecmp: function() {return (Fn(T.i32, [[Pointer(T.char)], [Pointer(T.char)]], [['cdecl']]))('strcasecmp');},
    strnset: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [T.i32, '_Val'], [T.size_t, '_MaxCount']], [['cdecl']]))('strnset');},
    strrev: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Str']], [['cdecl']]))('strrev');},
    strset: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [T.i32, '_Val']], [['cdecl']]))('strset');},
    strupr: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Str']], [['cdecl']]))('strupr');},
    _wcsdup: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str']], [['dllimport'], ['cdecl']]))('_wcsdup');},
    wcscat: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Source']], [['cdecl']]))('wcscat');},
    wcschr: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [T.wchar_t, '_Ch']], [['cdecl']]))('wcschr');},
    wcscmp: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2']], [['cdecl']]))('wcscmp');},
    wcscpy: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Source']], [['cdecl']]))('wcscpy');},
    wcscspn: function() {return (Fn(T.size_t, [[Pointer(T.wchar_t), '_Str'], [Pointer(T.wchar_t), '_Control']], [['cdecl']]))('wcscspn');},
    wcslen: function() {return (Fn(T.size_t, [[Pointer(T.wchar_t), '_Str']], [['cdecl']]))('wcslen');},
    wcsnlen: function() {return (Fn(T.size_t, [[Pointer(T.wchar_t), '_Src'], [T.size_t, '_MaxCount']], [['cdecl']]))('wcsnlen');},
    wcsncat: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Source'], [T.size_t, '_Count']]))('wcsncat');},
    wcsncmp: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T.size_t, '_MaxCount']], [['cdecl']]))('wcsncmp');},
    wcsncpy: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Source'], [T.size_t, '_Count']]))('wcsncpy');},
    _wcsncpy_l: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Source'], [T.size_t, '_Count'], [T._locale_t, '_Locale']], [['cdecl']]))('_wcsncpy_l');},
    wcspbrk: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [Pointer(T.wchar_t), '_Control']], [['cdecl']]))('wcspbrk');},
    wcsrchr: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [T.wchar_t, '_Ch']], [['cdecl']]))('wcsrchr');},
    wcsspn: function() {return (Fn(T.size_t, [[Pointer(T.wchar_t), '_Str'], [Pointer(T.wchar_t), '_Control']], [['cdecl']]))('wcsspn');},
    wcsstr: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [Pointer(T.wchar_t), '_SubStr']], [['cdecl']]))('wcsstr');},
    wcstok: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [Pointer(T.wchar_t), '_Delim']], [['cdecl']]))('wcstok');},
    _wcserror: function() {return (Fn(Pointer(T.wchar_t), [[T.i32, '_ErrNum']], [['dllimport'], ['cdecl']]))('_wcserror');},
    __wcserror: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str']], [['dllimport'], ['cdecl']]))('__wcserror');},
    _wcsicmp: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2']], [['dllimport'], ['cdecl']]))('_wcsicmp');},
    _wcsicmp_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wcsicmp_l');},
    _wcsnicmp: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T.size_t, '_MaxCount']], [['dllimport'], ['cdecl']]))('_wcsnicmp');},
    _wcsnicmp_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wcsnicmp_l');},
    _wcsnset: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [T.wchar_t, '_Val'], [T.size_t, '_MaxCount']], [['dllimport'], ['cdecl']]))('_wcsnset');},
    _wcsrev: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str']], [['dllimport'], ['cdecl']]))('_wcsrev');},
    _wcsset: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [T.wchar_t, '_Val']], [['dllimport'], ['cdecl']]))('_wcsset');},
    _wcslwr: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_String']], [['dllimport'], ['cdecl']]))('_wcslwr');},
    _wcslwr_l: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_String'], [T._locale_t, '_Locale']], [['dllimport']]))('_wcslwr_l');},
    _wcsupr: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_String']], [['dllimport'], ['cdecl']]))('_wcsupr');},
    _wcsupr_l: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_String'], [T._locale_t, '_Locale']], [['dllimport']]))('_wcsupr_l');},
    wcsxfrm: function() {return (Fn(T.size_t, [[Pointer(T.wchar_t), '_Dst'], [Pointer(T.wchar_t), '_Src'], [T.size_t, '_MaxCount']], [['cdecl']]))('wcsxfrm');},
    _wcsxfrm_l: function() {return (Fn(T.size_t, [[Pointer(T.wchar_t), '_Dst'], [Pointer(T.wchar_t), '_Src'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wcsxfrm_l');},
    wcscoll: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2']], [['cdecl']]))('wcscoll');},
    _wcscoll_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wcscoll_l');},
    _wcsicoll: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2']], [['dllimport'], ['cdecl']]))('_wcsicoll');},
    _wcsicoll_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wcsicoll_l');},
    _wcsncoll: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T.size_t, '_MaxCount']], [['dllimport'], ['cdecl']]))('_wcsncoll');},
    _wcsncoll_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wcsncoll_l');},
    _wcsnicoll: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T.size_t, '_MaxCount']], [['dllimport'], ['cdecl']]))('_wcsnicoll');},
    _wcsnicoll_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wcsnicoll_l');},
    wcsdup: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str']], [['cdecl']]))('wcsdup');},
    wcsicmp: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2']], [['cdecl']]))('wcsicmp');},
    wcsnicmp: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T.size_t, '_MaxCount']], [['cdecl']]))('wcsnicmp');},
    wcsnset: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [T.wchar_t, '_Val'], [T.size_t, '_MaxCount']], [['cdecl']]))('wcsnset');},
    wcsrev: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str']], [['cdecl']]))('wcsrev');},
    wcsset: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [T.wchar_t, '_Val']], [['cdecl']]))('wcsset');},
    wcslwr: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str']], [['cdecl']]))('wcslwr');},
    wcsupr: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str']], [['cdecl']]))('wcsupr');},
    wcsicoll: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2']], [['cdecl']]))('wcsicoll');},
    RtlFirstEntrySList: function() {return (Fn(T.PSINGLE_LIST_ENTRY, [[Pointer(T.SLIST_HEADER)]], [['dllimport'], ['stdcall']]))('RtlFirstEntrySList');},
    RtlInitializeSListHead: function() {return (Fn(null, [[T.PSLIST_HEADER]], [['dllimport'], ['stdcall']]))('RtlInitializeSListHead');},
    RtlInterlockedFlushSList: function() {return (Fn(T.PSINGLE_LIST_ENTRY, [[T.PSLIST_HEADER]], [['dllimport'], ['stdcall']]))('RtlInterlockedFlushSList');},
    RtlInterlockedPopEntrySList: function() {return (Fn(T.PSINGLE_LIST_ENTRY, [[T.PSLIST_HEADER]], [['dllimport'], ['stdcall']]))('RtlInterlockedPopEntrySList');},
    RtlInterlockedPushEntrySList: function() {return (Fn(T.PSINGLE_LIST_ENTRY, [[T.PSLIST_HEADER], [T.PSINGLE_LIST_ENTRY]], [['dllimport'], ['stdcall']]))('RtlInterlockedPushEntrySList');},
    RtlQueryDepthSList: function() {return (Fn(T.WORD, [[T.PSLIST_HEADER]], [['dllimport'], ['stdcall']]))('RtlQueryDepthSList');},
    RtlCaptureContext: function() {return (Fn(null, [[Pointer(T.CONTEXT)]], [['dllimport'], ['stdcall']]))('RtlCaptureContext');},
    VerSetConditionMask: function() {return (Fn(T.ULONGLONG, [[T.ULONGLONG], [T.DWORD], [T.BYTE]], [['dllimport'], ['stdcall']]))('VerSetConditionMask');},
    RtlGetProductInfo: function() {return (Fn(T.BOOLEAN, [[T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.PDWORD]], [['dllimport'], ['stdcall']]))('RtlGetProductInfo');},
    ActivateActCtx: function() {return (Fn(T.BOOL, [[T.HANDLE], [Pointer(T.ULONG_PTR)]], [['dllimport'], ['stdcall']]))('ActivateActCtx');},
    AddAccessAllowedAce: function() {return (Fn(T.BOOL, [[T.PACL], [T.DWORD], [T.DWORD], [T.PSID]], [['dllimport'], ['stdcall']]))('AddAccessAllowedAce');},
    AddAccessAllowedAceEx: function() {return (Fn(T.BOOL, [[T.PACL], [T.DWORD], [T.DWORD], [T.DWORD], [T.PSID]], [['dllimport'], ['stdcall']]))('AddAccessAllowedAceEx');},
    AddAccessDeniedAce: function() {return (Fn(T.BOOL, [[T.PACL], [T.DWORD], [T.DWORD], [T.PSID]], [['dllimport'], ['stdcall']]))('AddAccessDeniedAce');},
    AddAccessDeniedAceEx: function() {return (Fn(T.BOOL, [[T.PACL], [T.DWORD], [T.DWORD], [T.DWORD], [T.PSID]], [['dllimport'], ['stdcall']]))('AddAccessDeniedAceEx');},
    AddAce: function() {return (Fn(T.BOOL, [[T.PACL], [T.DWORD], [T.DWORD], [T.LPVOID], [T.DWORD]], [['dllimport'], ['stdcall']]))('AddAce');},
    AddAtomA: function() {return (Fn(T.ATOM, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('AddAtomA');},
    AddAtomW: function() {return (Fn(T.ATOM, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('AddAtomW');},
    AddAuditAccessAce: function() {return (Fn(T.BOOL, [[T.PACL], [T.DWORD], [T.DWORD], [T.PSID], [T.BOOL], [T.BOOL]], [['dllimport'], ['stdcall']]))('AddAuditAccessAce');},
    AddAuditAccessAceEx: function() {return (Fn(T.BOOL, [[T.PACL], [T.DWORD], [T.DWORD], [T.DWORD], [T.PSID], [T.BOOL], [T.BOOL]], [['dllimport'], ['stdcall']]))('AddAuditAccessAceEx');},
    AddRefActCtx: function() {return (Fn(null, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('AddRefActCtx');},
    AddVectoredExceptionHandler: function() {return (Fn(T.PVOID, [[T.ULONG], [T.PVECTORED_EXCEPTION_HANDLER]], [['dllimport'], ['stdcall']]))('AddVectoredExceptionHandler');},
    AdjustTokenGroups: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.BOOL], [T.PTOKEN_GROUPS], [T.DWORD], [T.PTOKEN_GROUPS], [T.PDWORD]], [['dllimport'], ['stdcall']]))('AdjustTokenGroups');},
    AccessCheck: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.HANDLE], [T.DWORD], [T.PGENERIC_MAPPING], [T.PPRIVILEGE_SET], [T.LPDWORD], [T.LPDWORD], [T.LPBOOL]], [['dllimport'], ['stdcall']]))('AccessCheck');},
    AccessCheckAndAuditAlarmA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPVOID], [T.LPSTR], [T.LPSTR], [T.PSECURITY_DESCRIPTOR], [T.DWORD], [T.PGENERIC_MAPPING], [T.BOOL], [T.LPDWORD], [T.LPBOOL], [T.LPBOOL]], [['dllimport'], ['stdcall']]))('AccessCheckAndAuditAlarmA');},
    AccessCheckAndAuditAlarmW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPVOID], [T.LPWSTR], [T.LPWSTR], [T.PSECURITY_DESCRIPTOR], [T.DWORD], [T.PGENERIC_MAPPING], [T.BOOL], [T.LPDWORD], [T.LPBOOL], [T.LPBOOL]], [['dllimport'], ['stdcall']]))('AccessCheckAndAuditAlarmW');},
    AccessCheckByType: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.PSID], [T.HANDLE], [T.DWORD], [T.POBJECT_TYPE_LIST], [T.DWORD], [T.PGENERIC_MAPPING], [T.PPRIVILEGE_SET], [T.LPDWORD], [T.LPDWORD], [T.LPBOOL]], [['dllimport'], ['stdcall']]))('AccessCheckByType');},
    AdjustTokenPrivileges: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.BOOL], [T.PTOKEN_PRIVILEGES], [T.DWORD], [T.PTOKEN_PRIVILEGES], [T.PDWORD]], [['dllimport'], ['stdcall']]))('AdjustTokenPrivileges');},
    AllocateAndInitializeSid: function() {return (Fn(T.BOOL, [[T.PSID_IDENTIFIER_AUTHORITY], [T.BYTE], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [Pointer(T.PSID)]], [['dllimport'], ['stdcall']]))('AllocateAndInitializeSid');},
    AllocateLocallyUniqueId: function() {return (Fn(T.BOOL, [[T.PLUID]], [['dllimport'], ['stdcall']]))('AllocateLocallyUniqueId');},
    AreAllAccessesGranted: function() {return (Fn(T.BOOL, [[T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('AreAllAccessesGranted');},
    AreAnyAccessesGranted: function() {return (Fn(T.BOOL, [[T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('AreAnyAccessesGranted');},
    AreFileApisANSI: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('AreFileApisANSI');},
    AssignProcessToJobObject: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.HANDLE]], [['dllimport'], ['stdcall']]))('AssignProcessToJobObject');},
    BackupEventLogA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('BackupEventLogA');},
    BackupEventLogW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('BackupEventLogW');},
    BackupRead: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPBYTE], [T.DWORD], [T.LPDWORD], [T.BOOL], [T.BOOL], [Pointer(T.LPVOID)]], [['dllimport'], ['stdcall']]))('BackupRead');},
    BackupSeek: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [Pointer(T.LPVOID)]], [['dllimport'], ['stdcall']]))('BackupSeek');},
    BackupWrite: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPBYTE], [T.DWORD], [T.LPDWORD], [T.BOOL], [T.BOOL], [Pointer(T.LPVOID)]], [['dllimport'], ['stdcall']]))('BackupWrite');},
    Beep: function() {return (Fn(T.BOOL, [[T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('Beep');},
    BeginUpdateResourceA: function() {return (Fn(T.HANDLE, [[T.LPCSTR], [T.BOOL]], [['dllimport'], ['stdcall']]))('BeginUpdateResourceA');},
    BeginUpdateResourceW: function() {return (Fn(T.HANDLE, [[T.LPCWSTR], [T.BOOL]], [['dllimport'], ['stdcall']]))('BeginUpdateResourceW');},
    BindIoCompletionCallback: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPOVERLAPPED_COMPLETION_ROUTINE], [T.ULONG]], [['dllimport'], ['stdcall']]))('BindIoCompletionCallback');},
    BuildCommDCBA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPDCB]], [['dllimport'], ['stdcall']]))('BuildCommDCBA');},
    BuildCommDCBW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPDCB]], [['dllimport'], ['stdcall']]))('BuildCommDCBW');},
    BuildCommDCBAndTimeoutsA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPDCB], [T.LPCOMMTIMEOUTS]], [['dllimport'], ['stdcall']]))('BuildCommDCBAndTimeoutsA');},
    BuildCommDCBAndTimeoutsW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPDCB], [T.LPCOMMTIMEOUTS]], [['dllimport'], ['stdcall']]))('BuildCommDCBAndTimeoutsW');},
    CallNamedPipeA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPVOID], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('CallNamedPipeA');},
    CallNamedPipeW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPVOID], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('CallNamedPipeW');},
    CancelIo: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('CancelIo');},
    CancelIoEx: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPOVERLAPPED]], [['dllimport'], ['stdcall']]))('CancelIoEx');},
    CancelWaitableTimer: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('CancelWaitableTimer');},
    ChangeTimerQueueTimer: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.HANDLE], [T.ULONG], [T.ULONG]], [['dllimport'], ['stdcall']]))('ChangeTimerQueueTimer');},
    CheckTokenMembership: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PSID], [T.PBOOL]], [['dllimport'], ['stdcall']]))('CheckTokenMembership');},
    ClearCommBreak: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('ClearCommBreak');},
    ClearCommError: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD], [T.LPCOMSTAT]], [['dllimport'], ['stdcall']]))('ClearCommError');},
    ClearEventLogA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('ClearEventLogA');},
    ClearEventLogW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('ClearEventLogW');},
    CloseEventLog: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('CloseEventLog');},
    CloseHandle: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('CloseHandle');},
    CommConfigDialogA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.HWND], [T.LPCOMMCONFIG]], [['dllimport'], ['stdcall']]))('CommConfigDialogA');},
    CommConfigDialogW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.HWND], [T.LPCOMMCONFIG]], [['dllimport'], ['stdcall']]))('CommConfigDialogW');},
    ConnectNamedPipe: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPOVERLAPPED]], [['dllimport'], ['stdcall']]))('ConnectNamedPipe');},
    ContinueDebugEvent: function() {return (Fn(T.BOOL, [[T.DWORD], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('ContinueDebugEvent');},
    ConvertToGlobalHandle: function() {return (Fn(T.HANDLE, [[T.HANDLE, 'hSrc']], [['dllimport'], ['stdcall']]))('ConvertToGlobalHandle');},
    CopyFileA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.BOOL]], [['dllimport'], ['stdcall']]))('CopyFileA');},
    CopyFileW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.BOOL]], [['dllimport'], ['stdcall']]))('CopyFileW');},
    CopyFileExA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPPROGRESS_ROUTINE], [T.LPVOID], [T.LPBOOL], [T.DWORD]], [['dllimport'], ['stdcall']]))('CopyFileExA');},
    CopyFileExW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPPROGRESS_ROUTINE], [T.LPVOID], [T.LPBOOL], [T.DWORD]], [['dllimport'], ['stdcall']]))('CopyFileExW');},
    CopySid: function() {return (Fn(T.BOOL, [[T.DWORD], [T.PSID], [T.PSID]], [['dllimport'], ['stdcall']]))('CopySid');},
    CompareFileTime: function() {return (Fn(T.INT, [[Pointer(T.FILETIME)], [Pointer(T.FILETIME)]], [['dllimport'], ['stdcall']]))('CompareFileTime');},
    ConvertFiberToThread: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('ConvertFiberToThread');},
    ConvertThreadToFiber: function() {return (Fn(T.LPVOID, [[T.LPVOID]], [['dllimport'], ['stdcall']]))('ConvertThreadToFiber');},
    ConvertThreadToFiberEx: function() {return (Fn(T.LPVOID, [[T.LPVOID], [T.DWORD]], [['dllimport'], ['stdcall']]))('ConvertThreadToFiberEx');},
    ConvertToAutoInheritPrivateObjectSecurity: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.PSECURITY_DESCRIPTOR], [Pointer(T.PSECURITY_DESCRIPTOR)], [Pointer(T.GUID)], [T.BOOL], [T.PGENERIC_MAPPING]], [['dllimport'], ['stdcall']]))('ConvertToAutoInheritPrivateObjectSecurity');},
    CreateActCtxA: function() {return (Fn(T.HANDLE, [[T.PCACTCTXA]], [['dllimport'], ['stdcall']]))('CreateActCtxA');},
    CreateActCtxW: function() {return (Fn(T.HANDLE, [[T.PCACTCTXW]], [['dllimport'], ['stdcall']]))('CreateActCtxW');},
    CreateDirectoryA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPSECURITY_ATTRIBUTES]], [['dllimport'], ['stdcall']]))('CreateDirectoryA');},
    CreateDirectoryW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPSECURITY_ATTRIBUTES]], [['dllimport'], ['stdcall']]))('CreateDirectoryW');},
    CreateDirectoryExA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPSECURITY_ATTRIBUTES]], [['dllimport'], ['stdcall']]))('CreateDirectoryExA');},
    CreateDirectoryExW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPSECURITY_ATTRIBUTES]], [['dllimport'], ['stdcall']]))('CreateDirectoryExW');},
    CreateEventA: function() {return (Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.BOOL], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('CreateEventA');},
    CreateEventW: function() {return (Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.BOOL], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('CreateEventW');},
    CreateEventExA: function() {return (Fn(T.HANDLE, [[Pointer(T.SECURITY_ATTRIBUTES)], [T.LPCSTR], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('CreateEventExA');},
    CreateEventExW: function() {return (Fn(T.HANDLE, [[Pointer(T.SECURITY_ATTRIBUTES)], [T.LPCWSTR], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('CreateEventExW');},
    CreateFiber: function() {return (Fn(T.LPVOID, [[T.SIZE_T], [T.LPFIBER_START_ROUTINE], [T.LPVOID]], [['dllimport'], ['stdcall']]))('CreateFiber');},
    CreateFiberEx: function() {return (Fn(T.LPVOID, [[T.SIZE_T], [T.SIZE_T], [T.DWORD], [T.LPFIBER_START_ROUTINE], [T.LPVOID]], [['dllimport'], ['stdcall']]))('CreateFiberEx');},
    CreateFileA: function() {return (Fn(T.HANDLE, [[T.LPCSTR], [T.DWORD], [T.DWORD], [T.LPSECURITY_ATTRIBUTES], [T.DWORD], [T.DWORD], [T.HANDLE]], [['dllimport'], ['stdcall']]))('CreateFileA');},
    CreateFileW: function() {return (Fn(T.HANDLE, [[T.LPCWSTR], [T.DWORD], [T.DWORD], [T.LPSECURITY_ATTRIBUTES], [T.DWORD], [T.DWORD], [T.HANDLE]], [['dllimport'], ['stdcall']]))('CreateFileW');},
    CreateFileMappingA: function() {return (Fn(T.HANDLE, [[T.HANDLE], [T.LPSECURITY_ATTRIBUTES], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('CreateFileMappingA');},
    CreateFileMappingW: function() {return (Fn(T.HANDLE, [[T.HANDLE], [T.LPSECURITY_ATTRIBUTES], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('CreateFileMappingW');},
    CreateIoCompletionPort: function() {return (Fn(T.HANDLE, [[T.HANDLE], [T.HANDLE], [T.ULONG_PTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('CreateIoCompletionPort');},
    CreateJobObjectA: function() {return (Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('CreateJobObjectA');},
    CreateJobObjectW: function() {return (Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('CreateJobObjectW');},
    CreateMailslotA: function() {return (Fn(T.HANDLE, [[T.LPCSTR], [T.DWORD], [T.DWORD], [T.LPSECURITY_ATTRIBUTES]], [['dllimport'], ['stdcall']]))('CreateMailslotA');},
    CreateMailslotW: function() {return (Fn(T.HANDLE, [[T.LPCWSTR], [T.DWORD], [T.DWORD], [T.LPSECURITY_ATTRIBUTES]], [['dllimport'], ['stdcall']]))('CreateMailslotW');},
    CreateMemoryResourceNotification: function() {return (Fn(T.HANDLE, [[T.MEMORY_RESOURCE_NOTIFICATION_TYPE]], [['dllimport'], ['stdcall']]))('CreateMemoryResourceNotification');},
    CreateMutexA: function() {return (Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('CreateMutexA');},
    CreateMutexW: function() {return (Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('CreateMutexW');},
    CreateMutexExA: function() {return (Fn(T.HANDLE, [[Pointer(T.SECURITY_ATTRIBUTES)], [T.LPCSTR], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('CreateMutexExA');},
    CreateMutexExW: function() {return (Fn(T.HANDLE, [[Pointer(T.SECURITY_ATTRIBUTES)], [T.LPCWSTR], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('CreateMutexExW');},
    CreateNamedPipeA: function() {return (Fn(T.HANDLE, [[T.LPCSTR], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPSECURITY_ATTRIBUTES]], [['dllimport'], ['stdcall']]))('CreateNamedPipeA');},
    CreateNamedPipeW: function() {return (Fn(T.HANDLE, [[T.LPCWSTR], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPSECURITY_ATTRIBUTES]], [['dllimport'], ['stdcall']]))('CreateNamedPipeW');},
    CreatePipe: function() {return (Fn(T.BOOL, [[T.PHANDLE], [T.PHANDLE], [T.LPSECURITY_ATTRIBUTES], [T.DWORD]], [['dllimport'], ['stdcall']]))('CreatePipe');},
    CreatePrivateObjectSecurity: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.PSECURITY_DESCRIPTOR], [Pointer(T.PSECURITY_DESCRIPTOR)], [T.BOOL], [T.HANDLE], [T.PGENERIC_MAPPING]], [['dllimport'], ['stdcall']]))('CreatePrivateObjectSecurity');},
    CreateProcessA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR], [T.LPSECURITY_ATTRIBUTES], [T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.DWORD], [T.LPVOID], [T.LPCSTR], [T.LPSTARTUPINFOA], [T.LPPROCESS_INFORMATION]], [['dllimport'], ['stdcall']]))('CreateProcessA');},
    CreateProcessW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPWSTR], [T.LPSECURITY_ATTRIBUTES], [T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.DWORD], [T.LPVOID], [T.LPCWSTR], [T.LPSTARTUPINFOW], [T.LPPROCESS_INFORMATION]], [['dllimport'], ['stdcall']]))('CreateProcessW');},
    CreateProcessAsUserA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCSTR], [T.LPSTR], [T.LPSECURITY_ATTRIBUTES], [T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.DWORD], [T.LPVOID], [T.LPCSTR], [T.LPSTARTUPINFOA], [T.LPPROCESS_INFORMATION]], [['dllimport'], ['stdcall']]))('CreateProcessAsUserA');},
    CreateProcessAsUserW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCWSTR], [T.LPWSTR], [T.LPSECURITY_ATTRIBUTES], [T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.DWORD], [T.LPVOID], [T.LPCWSTR], [T.LPSTARTUPINFOW], [T.LPPROCESS_INFORMATION]], [['dllimport'], ['stdcall']]))('CreateProcessAsUserW');},
    CreateProcessWithLogonW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.LPCWSTR], [T.LPWSTR], [T.DWORD], [T.LPVOID], [T.LPCWSTR], [T.LPSTARTUPINFOW], [T.LPPROCESS_INFORMATION]], [['dllimport'], ['stdcall']]))('CreateProcessWithLogonW');},
    CreateRemoteThread: function() {return (Fn(T.HANDLE, [[T.HANDLE], [T.LPSECURITY_ATTRIBUTES], [T.SIZE_T], [T.LPTHREAD_START_ROUTINE], [T.LPVOID], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('CreateRemoteThread');},
    CreateRestrictedToken: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.PSID_AND_ATTRIBUTES], [T.DWORD], [T.PLUID_AND_ATTRIBUTES], [T.DWORD], [T.PSID_AND_ATTRIBUTES], [T.PHANDLE]], [['dllimport'], ['stdcall']]))('CreateRestrictedToken');},
    CreateSemaphoreA: function() {return (Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.LONG], [T.LONG], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('CreateSemaphoreA');},
    CreateSemaphoreW: function() {return (Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.LONG], [T.LONG], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('CreateSemaphoreW');},
    CreateSemaphoreExA: function() {return (Fn(T.HANDLE, [[Pointer(T.SECURITY_ATTRIBUTES)], [T.LONG], [T.LONG], [T.LPCSTR], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('CreateSemaphoreExA');},
    CreateSemaphoreExW: function() {return (Fn(T.HANDLE, [[Pointer(T.SECURITY_ATTRIBUTES)], [T.LONG], [T.LONG], [T.LPCWSTR], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('CreateSemaphoreExW');},
    CreateTapePartition: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('CreateTapePartition');},
    CreateThread: function() {return (Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.SIZE_T], [T.LPTHREAD_START_ROUTINE], [T.LPVOID], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('CreateThread');},
    CreateTimerQueue: function() {return (Fn(T.HANDLE, [[null]], [['dllimport'], ['stdcall']]))('CreateTimerQueue');},
    CreateTimerQueueTimer: function() {return (Fn(T.BOOL, [[T.PHANDLE], [T.HANDLE], [T.WAITORTIMERCALLBACK], [T.PVOID], [T.DWORD], [T.DWORD], [T.ULONG]], [['dllimport'], ['stdcall']]))('CreateTimerQueueTimer');},
    CreateWaitableTimerA: function() {return (Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('CreateWaitableTimerA');},
    CreateWaitableTimerW: function() {return (Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('CreateWaitableTimerW');},
    CreateWaitableTimerExA: function() {return (Fn(T.HANDLE, [[Pointer(T.SECURITY_ATTRIBUTES)], [T.LPCSTR], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('CreateWaitableTimerExA');},
    CreateWaitableTimerExW: function() {return (Fn(T.HANDLE, [[Pointer(T.SECURITY_ATTRIBUTES)], [T.LPCWSTR], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('CreateWaitableTimerExW');},
    CreateWellKnownSid: function() {return (Fn(T.BOOL, [[T.WELL_KNOWN_SID_TYPE], [T.PSID], [T.PSID], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('CreateWellKnownSid');},
    DeactivateActCtx: function() {return (Fn(T.BOOL, [[T.DWORD], [T.ULONG_PTR]], [['dllimport'], ['stdcall']]))('DeactivateActCtx');},
    DebugActiveProcess: function() {return (Fn(T.BOOL, [[T.DWORD]], [['dllimport'], ['stdcall']]))('DebugActiveProcess');},
    DebugActiveProcessStop: function() {return (Fn(T.BOOL, [[T.DWORD]], [['dllimport'], ['stdcall']]))('DebugActiveProcessStop');},
    DebugBreak: function() {return (Fn(null, [[null]], [['dllimport'], ['stdcall']]))('DebugBreak');},
    DebugBreakProcess: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('DebugBreakProcess');},
    DebugSetProcessKillOnExit: function() {return (Fn(T.BOOL, [[T.BOOL]], [['dllimport'], ['stdcall']]))('DebugSetProcessKillOnExit');},
    DecodePointer: function() {return (Fn(T.PVOID, [[T.PVOID]], [['dllimport'], ['stdcall']]))('DecodePointer');},
    DecryptFileA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('DecryptFileA');},
    DecryptFileW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('DecryptFileW');},
    DefineDosDeviceA: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('DefineDosDeviceA');},
    DefineDosDeviceW: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('DefineDosDeviceW');},
    DeleteAce: function() {return (Fn(T.BOOL, [[T.PACL], [T.DWORD]], [['dllimport'], ['stdcall']]))('DeleteAce');},
    DeleteAtom: function() {return (Fn(T.ATOM, [[T.ATOM]], [['dllimport'], ['stdcall']]))('DeleteAtom');},
    DeleteCriticalSection: function() {return (Fn(null, [[Pointer(T.CRITICAL_SECTION), 'lpCrit']], [['dllimport'], ['stdcall']]))('DeleteCriticalSection');},
    DeleteFiber: function() {return (Fn(null, [[T.LPVOID]], [['dllimport'], ['stdcall']]))('DeleteFiber');},
    DeleteFileA: function() {return (Fn(T.BOOL, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('DeleteFileA');},
    DeleteFileW: function() {return (Fn(T.BOOL, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('DeleteFileW');},
    DeleteTimerQueueEx: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.HANDLE]], [['dllimport'], ['stdcall']]))('DeleteTimerQueueEx');},
    DeleteTimerQueueTimer: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.HANDLE], [T.HANDLE]], [['dllimport'], ['stdcall']]))('DeleteTimerQueueTimer');},
    DeleteVolumeMountPointA: function() {return (Fn(T.BOOL, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('DeleteVolumeMountPointA');},
    DeleteVolumeMountPointW: function() {return (Fn(T.BOOL, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('DeleteVolumeMountPointW');},
    DeregisterEventSource: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('DeregisterEventSource');},
    DestroyPrivateObjectSecurity: function() {return (Fn(T.BOOL, [[Pointer(T.PSECURITY_DESCRIPTOR)]], [['dllimport'], ['stdcall']]))('DestroyPrivateObjectSecurity');},
    DeviceIoControl: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.LPOVERLAPPED]], [['dllimport'], ['stdcall']]))('DeviceIoControl');},
    DisableThreadLibraryCalls: function() {return (Fn(T.BOOL, [[T.HMODULE]], [['dllimport'], ['stdcall']]))('DisableThreadLibraryCalls');},
    DisconnectNamedPipe: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('DisconnectNamedPipe');},
    DnsHostnameToComputerNameA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('DnsHostnameToComputerNameA');},
    DnsHostnameToComputerNameW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPWSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('DnsHostnameToComputerNameW');},
    DosDateTimeToFileTime: function() {return (Fn(T.BOOL, [[T.WORD], [T.WORD], [T.LPFILETIME]], [['dllimport'], ['stdcall']]))('DosDateTimeToFileTime');},
    DuplicateHandle: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.HANDLE], [T.HANDLE], [Pointer(T.HANDLE)], [T.DWORD], [T.BOOL], [T.DWORD]], [['dllimport'], ['stdcall']]))('DuplicateHandle');},
    DuplicateToken: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.SECURITY_IMPERSONATION_LEVEL], [T.PHANDLE]], [['dllimport'], ['stdcall']]))('DuplicateToken');},
    DuplicateTokenEx: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPSECURITY_ATTRIBUTES], [T.SECURITY_IMPERSONATION_LEVEL], [T.TOKEN_TYPE], [T.PHANDLE]], [['dllimport'], ['stdcall']]))('DuplicateTokenEx');},
    EscapeCommFunction: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.UINT]], [['dllimport'], ['stdcall']]))('EscapeCommFunction');},
    EncodePointer: function() {return (Fn(T.PVOID, [[T.PVOID]], [['dllimport'], ['stdcall']]))('EncodePointer');},
    EncryptFileA: function() {return (Fn(T.BOOL, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('EncryptFileA');},
    EncryptFileW: function() {return (Fn(T.BOOL, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('EncryptFileW');},
    EndUpdateResourceA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.BOOL]], [['dllimport'], ['stdcall']]))('EndUpdateResourceA');},
    EndUpdateResourceW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.BOOL]], [['dllimport'], ['stdcall']]))('EndUpdateResourceW');},
    EnterCriticalSection: function() {return (Fn(null, [[Pointer(T.CRITICAL_SECTION), 'lpCrit']], [['dllimport'], ['stdcall']]))('EnterCriticalSection');},
    EnumResourceLanguagesA: function() {return (Fn(T.BOOL, [[T.HMODULE], [T.LPCSTR], [T.LPCSTR], [T.ENUMRESLANGPROCA], [T.LONG_PTR]], [['dllimport'], ['stdcall']]))('EnumResourceLanguagesA');},
    EnumResourceLanguagesW: function() {return (Fn(T.BOOL, [[T.HMODULE], [T.LPCWSTR], [T.LPCWSTR], [T.ENUMRESLANGPROCW], [T.LONG_PTR]], [['dllimport'], ['stdcall']]))('EnumResourceLanguagesW');},
    EnumResourceNamesA: function() {return (Fn(T.BOOL, [[T.HMODULE], [T.LPCSTR], [T.ENUMRESNAMEPROCA], [T.LONG_PTR]], [['dllimport'], ['stdcall']]))('EnumResourceNamesA');},
    EnumResourceNamesW: function() {return (Fn(T.BOOL, [[T.HMODULE], [T.LPCWSTR], [T.ENUMRESNAMEPROCW], [T.LONG_PTR]], [['dllimport'], ['stdcall']]))('EnumResourceNamesW');},
    EnumResourceTypesA: function() {return (Fn(T.BOOL, [[T.HMODULE], [T.ENUMRESTYPEPROCA], [T.LONG_PTR]], [['dllimport'], ['stdcall']]))('EnumResourceTypesA');},
    EnumResourceTypesW: function() {return (Fn(T.BOOL, [[T.HMODULE], [T.ENUMRESTYPEPROCW], [T.LONG_PTR]], [['dllimport'], ['stdcall']]))('EnumResourceTypesW');},
    EqualSid: function() {return (Fn(T.BOOL, [[T.PSID], [T.PSID]], [['dllimport'], ['stdcall']]))('EqualSid');},
    EqualPrefixSid: function() {return (Fn(T.BOOL, [[T.PSID], [T.PSID]], [['dllimport'], ['stdcall']]))('EqualPrefixSid');},
    EraseTape: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.BOOL]], [['dllimport'], ['stdcall']]))('EraseTape');},
    ExitProcess: function() {return (Fn(null, [[T.DWORD]], [['dllimport'], ['noreturn'], ['stdcall']]))('ExitProcess');},
    ExitThread: function() {return (Fn(null, [[T.DWORD]], [['dllimport'], ['noreturn'], ['stdcall']]))('ExitThread');},
    ExpandEnvironmentStringsA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('ExpandEnvironmentStringsA');},
    ExpandEnvironmentStringsW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('ExpandEnvironmentStringsW');},
    FatalAppExitA: function() {return (Fn(null, [[T.UINT], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('FatalAppExitA');},
    FatalAppExitW: function() {return (Fn(null, [[T.UINT], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('FatalAppExitW');},
    FatalExit: function() {return (Fn(null, [[T.i32]], [['dllimport'], ['stdcall']]))('FatalExit');},
    FileEncryptionStatusA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('FileEncryptionStatusA');},
    FileEncryptionStatusW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('FileEncryptionStatusW');},
    FileTimeToDosDateTime: function() {return (Fn(T.BOOL, [[Pointer(T.FILETIME)], [T.LPWORD], [T.LPWORD]], [['dllimport'], ['stdcall']]))('FileTimeToDosDateTime');},
    FileTimeToLocalFileTime: function() {return (Fn(T.BOOL, [[Pointer(T.FILETIME)], [T.LPFILETIME]], [['dllimport'], ['stdcall']]))('FileTimeToLocalFileTime');},
    FileTimeToSystemTime: function() {return (Fn(T.BOOL, [[Pointer(T.FILETIME)], [T.LPSYSTEMTIME]], [['dllimport'], ['stdcall']]))('FileTimeToSystemTime');},
    FindActCtxSectionStringA: function() {return (Fn(T.BOOL, [[T.DWORD], [Pointer(T.GUID)], [T.ULONG], [T.LPCSTR], [T.PACTCTX_SECTION_KEYED_DATA]], [['dllimport'], ['stdcall']]))('FindActCtxSectionStringA');},
    FindActCtxSectionStringW: function() {return (Fn(T.BOOL, [[T.DWORD], [Pointer(T.GUID)], [T.ULONG], [T.LPCWSTR], [T.PACTCTX_SECTION_KEYED_DATA]], [['dllimport'], ['stdcall']]))('FindActCtxSectionStringW');},
    FindActCtxSectionGuid: function() {return (Fn(T.BOOL, [[T.DWORD], [Pointer(T.GUID)], [T.ULONG], [Pointer(T.GUID)], [T.PACTCTX_SECTION_KEYED_DATA]], [['dllimport'], ['stdcall']]))('FindActCtxSectionGuid');},
    FindAtomA: function() {return (Fn(T.ATOM, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('FindAtomA');},
    FindAtomW: function() {return (Fn(T.ATOM, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('FindAtomW');},
    FindClose: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('FindClose');},
    FindFirstChangeNotificationA: function() {return (Fn(T.HANDLE, [[T.LPCSTR], [T.BOOL], [T.DWORD]], [['dllimport'], ['stdcall']]))('FindFirstChangeNotificationA');},
    FindFirstChangeNotificationW: function() {return (Fn(T.HANDLE, [[T.LPCWSTR], [T.BOOL], [T.DWORD]], [['dllimport'], ['stdcall']]))('FindFirstChangeNotificationW');},
    FindFirstFileA: function() {return (Fn(T.HANDLE, [[T.LPCSTR], [T.LPWIN32_FIND_DATAA]], [['dllimport'], ['stdcall']]))('FindFirstFileA');},
    FindFirstFileW: function() {return (Fn(T.HANDLE, [[T.LPCWSTR], [T.LPWIN32_FIND_DATAW]], [['dllimport'], ['stdcall']]))('FindFirstFileW');},
    FindFirstFileExA: function() {return (Fn(T.HANDLE, [[T.LPCSTR], [T.FINDEX_INFO_LEVELS], [T.LPVOID], [T.FINDEX_SEARCH_OPS], [T.LPVOID], [T.DWORD]], [['dllimport'], ['stdcall']]))('FindFirstFileExA');},
    FindFirstFileExW: function() {return (Fn(T.HANDLE, [[T.LPCWSTR], [T.FINDEX_INFO_LEVELS], [T.LPVOID], [T.FINDEX_SEARCH_OPS], [T.LPVOID], [T.DWORD]], [['dllimport'], ['stdcall']]))('FindFirstFileExW');},
    FindFirstFreeAce: function() {return (Fn(T.BOOL, [[T.PACL], [Pointer(T.LPVOID)]], [['dllimport'], ['stdcall']]))('FindFirstFreeAce');},
    FindNextChangeNotification: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('FindNextChangeNotification');},
    FindNextFileA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPWIN32_FIND_DATAA]], [['dllimport'], ['stdcall']]))('FindNextFileA');},
    FindNextFileW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPWIN32_FIND_DATAW]], [['dllimport'], ['stdcall']]))('FindNextFileW');},
    FindCloseChangeNotification: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('FindCloseChangeNotification');},
    FindResourceA: function() {return (Fn(T.HRSRC, [[T.HMODULE], [T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('FindResourceA');},
    FindResourceW: function() {return (Fn(T.HRSRC, [[T.HMODULE], [T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('FindResourceW');},
    FindResourceExA: function() {return (Fn(T.HRSRC, [[T.HMODULE], [T.LPCSTR], [T.LPCSTR], [T.WORD]], [['dllimport'], ['stdcall']]))('FindResourceExA');},
    FindResourceExW: function() {return (Fn(T.HRSRC, [[T.HMODULE], [T.LPCWSTR], [T.LPCWSTR], [T.WORD]], [['dllimport'], ['stdcall']]))('FindResourceExW');},
    FindFirstVolumeA: function() {return (Fn(T.HANDLE, [[T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('FindFirstVolumeA');},
    FindFirstVolumeW: function() {return (Fn(T.HANDLE, [[T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('FindFirstVolumeW');},
    FindFirstVolumeMountPointA: function() {return (Fn(T.HANDLE, [[T.LPCSTR], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('FindFirstVolumeMountPointA');},
    FindFirstVolumeMountPointW: function() {return (Fn(T.HANDLE, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('FindFirstVolumeMountPointW');},
    FindNextVolumeA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('FindNextVolumeA');},
    FindNextVolumeW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('FindNextVolumeW');},
    FindNextVolumeMountPointA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('FindNextVolumeMountPointA');},
    FindNextVolumeMountPointW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('FindNextVolumeMountPointW');},
    FindVolumeClose: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('FindVolumeClose');},
    FindVolumeMountPointClose: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('FindVolumeMountPointClose');},
    FlsAlloc: function() {return (Fn(T.DWORD, [[T.PFLS_CALLBACK_FUNCTION]], [['dllimport'], ['stdcall']]))('FlsAlloc');},
    FlsFree: function() {return (Fn(T.BOOL, [[T.DWORD]], [['dllimport'], ['stdcall']]))('FlsFree');},
    FlsGetValue: function() {return (Fn(T.PVOID, [[T.DWORD]], [['dllimport'], ['stdcall']]))('FlsGetValue');},
    FlsSetValue: function() {return (Fn(T.BOOL, [[T.DWORD], [T.PVOID]], [['dllimport'], ['stdcall']]))('FlsSetValue');},
    FlushFileBuffers: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('FlushFileBuffers');},
    FlushInstructionCache: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCVOID], [T.SIZE_T]], [['dllimport'], ['stdcall']]))('FlushInstructionCache');},
    FlushViewOfFile: function() {return (Fn(T.BOOL, [[T.LPCVOID], [T.SIZE_T]], [['dllimport'], ['stdcall']]))('FlushViewOfFile');},
    FormatMessageA: function() {return (Fn(T.DWORD, [[T.DWORD], [T.LPCVOID], [T.DWORD], [T.DWORD], [T.LPSTR], [T.DWORD], [Pointer(T.va_list)]], [['dllimport'], ['stdcall']]))('FormatMessageA');},
    FormatMessageW: function() {return (Fn(T.DWORD, [[T.DWORD], [T.LPCVOID], [T.DWORD], [T.DWORD], [T.LPWSTR], [T.DWORD], [Pointer(T.va_list)]], [['dllimport'], ['stdcall']]))('FormatMessageW');},
    FreeEnvironmentStringsA: function() {return (Fn(T.BOOL, [[T.LPSTR]], [['dllimport'], ['stdcall']]))('FreeEnvironmentStringsA');},
    FreeEnvironmentStringsW: function() {return (Fn(T.BOOL, [[T.LPWSTR]], [['dllimport'], ['stdcall']]))('FreeEnvironmentStringsW');},
    FreeLibrary: function() {return (Fn(T.BOOL, [[T.HMODULE]], [['dllimport'], ['stdcall']]))('FreeLibrary');},
    FreeLibraryAndExitThread: function() {return (Fn(null, [[T.HINSTANCE], [T.DWORD]], [['dllimport'], ['stdcall']]))('FreeLibraryAndExitThread');},
    FreeResource: function() {return (Fn(T.BOOL, [[T.HGLOBAL]], [['dllimport'], ['stdcall']]))('FreeResource');},
    FreeSid: function() {return (Fn(T.PVOID, [[T.PSID]], [['dllimport'], ['stdcall']]))('FreeSid');},
    GetAce: function() {return (Fn(T.BOOL, [[T.PACL], [T.DWORD], [Pointer(T.LPVOID)]], [['dllimport'], ['stdcall']]))('GetAce');},
    GetAclInformation: function() {return (Fn(T.BOOL, [[T.PACL], [T.LPVOID], [T.DWORD], [T.ACL_INFORMATION_CLASS]], [['dllimport'], ['stdcall']]))('GetAclInformation');},
    GetAtomNameA: function() {return (Fn(T.UINT, [[T.ATOM], [T.LPSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetAtomNameA');},
    GetAtomNameW: function() {return (Fn(T.UINT, [[T.ATOM], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetAtomNameW');},
    GetBinaryTypeA: function() {return (Fn(T.BOOL, [[T.LPCSTR, 'lpApplicationName'], [T.LPDWORD, 'lpBinaryType']], [['dllimport'], ['stdcall']]))('GetBinaryTypeA');},
    GetBinaryTypeW: function() {return (Fn(T.BOOL, [[T.LPCWSTR, 'lpApplicationName'], [T.LPDWORD, 'lpBinaryType']], [['dllimport'], ['stdcall']]))('GetBinaryTypeW');},
    GetCurrentActCtx: function() {return (Fn(T.BOOL, [[Pointer(T.HANDLE)]], [['dllimport'], ['stdcall']]))('GetCurrentActCtx');},
    GetCommConfig: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCOMMCONFIG], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetCommConfig');},
    GetCommMask: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetCommMask');},
    GetCommModemStatus: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetCommModemStatus');},
    GetCommProperties: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCOMMPROP]], [['dllimport'], ['stdcall']]))('GetCommProperties');},
    GetCommState: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDCB]], [['dllimport'], ['stdcall']]))('GetCommState');},
    GetCommTimeouts: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCOMMTIMEOUTS]], [['dllimport'], ['stdcall']]))('GetCommTimeouts');},
    GetCommandLineA: function() {return (Fn(T.LPSTR, [[null]], [['dllimport'], ['stdcall']]))('GetCommandLineA');},
    GetCommandLineW: function() {return (Fn(T.LPWSTR, [[null]], [['dllimport'], ['stdcall']]))('GetCommandLineW');},
    GetCompressedFileSizeA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetCompressedFileSizeA');},
    GetCompressedFileSizeW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetCompressedFileSizeW');},
    GetComputerNameA: function() {return (Fn(T.BOOL, [[T.LPSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetComputerNameA');},
    GetComputerNameW: function() {return (Fn(T.BOOL, [[T.LPWSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetComputerNameW');},
    GetComputerNameExA: function() {return (Fn(T.BOOL, [[T.COMPUTER_NAME_FORMAT], [T.LPSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetComputerNameExA');},
    GetComputerNameExW: function() {return (Fn(T.BOOL, [[T.COMPUTER_NAME_FORMAT], [T.LPWSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetComputerNameExW');},
    GetCurrentDirectoryA: function() {return (Fn(T.UINT, [[T.UINT], [T.LPSTR]], [['dllimport'], ['stdcall']]))('GetCurrentDirectoryA');},
    GetCurrentDirectoryW: function() {return (Fn(T.UINT, [[T.UINT], [T.LPWSTR]], [['dllimport'], ['stdcall']]))('GetCurrentDirectoryW');},
    GetCurrentHwProfileA: function() {return (Fn(T.BOOL, [[T.LPHW_PROFILE_INFOA]], [['dllimport'], ['stdcall']]))('GetCurrentHwProfileA');},
    GetCurrentHwProfileW: function() {return (Fn(T.BOOL, [[T.LPHW_PROFILE_INFOW]], [['dllimport'], ['stdcall']]))('GetCurrentHwProfileW');},
    GetCurrentProcess: function() {return (Fn(T.HANDLE, [[null]], [['dllimport'], ['stdcall']]))('GetCurrentProcess');},
    GetCurrentThread: function() {return (Fn(T.HANDLE, [[null]], [['dllimport'], ['stdcall']]))('GetCurrentThread');},
    GetDefaultCommConfigA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCOMMCONFIG], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetDefaultCommConfigA');},
    GetDefaultCommConfigW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCOMMCONFIG], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetDefaultCommConfigW');},
    GetDevicePowerState: function() {return (Fn(T.BOOL, [[T.HANDLE], [Pointer(T.BOOL)]], [['dllimport'], ['stdcall']]))('GetDevicePowerState');},
    GetDiskFreeSpaceA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetDiskFreeSpaceA');},
    GetDiskFreeSpaceW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetDiskFreeSpaceW');},
    GetDiskFreeSpaceExA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.PULARGE_INTEGER], [T.PULARGE_INTEGER], [T.PULARGE_INTEGER]], [['dllimport'], ['stdcall']]))('GetDiskFreeSpaceExA');},
    GetDiskFreeSpaceExW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.PULARGE_INTEGER], [T.PULARGE_INTEGER], [T.PULARGE_INTEGER]], [['dllimport'], ['stdcall']]))('GetDiskFreeSpaceExW');},
    GetDllDirectoryA: function() {return (Fn(T.DWORD, [[T.DWORD], [T.LPSTR]], [['dllimport'], ['stdcall']]))('GetDllDirectoryA');},
    GetDllDirectoryW: function() {return (Fn(T.DWORD, [[T.DWORD], [T.LPWSTR]], [['dllimport'], ['stdcall']]))('GetDllDirectoryW');},
    GetDriveTypeA: function() {return (Fn(T.UINT, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('GetDriveTypeA');},
    GetDriveTypeW: function() {return (Fn(T.UINT, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('GetDriveTypeW');},
    GetDynamicTimeZoneInformation: function() {return (Fn(T.DWORD, [[T.PDYNAMIC_TIME_ZONE_INFORMATION]], [['dllimport'], ['stdcall']]))('GetDynamicTimeZoneInformation');},
    GetEnvironmentStringsA: function() {return (Fn(T.LPSTR, [[null]], [['dllimport'], ['stdcall']]))('GetEnvironmentStringsA');},
    GetEnvironmentStringsW: function() {return (Fn(T.LPWSTR, [[null]], [['dllimport'], ['stdcall']]))('GetEnvironmentStringsW');},
    GetEnvironmentVariableA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetEnvironmentVariableA');},
    GetEnvironmentVariableW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetEnvironmentVariableW');},
    GetErrorMode: function() {return (Fn(T.UINT, [[null]], [['dllimport'], ['stdcall']]))('GetErrorMode');},
    GetEventLogInformation: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetEventLogInformation');},
    GetExitCodeProcess: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetExitCodeProcess');},
    GetExitCodeThread: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetExitCodeThread');},
    GetFileAttributesA: function() {return (Fn(T.DWORD, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('GetFileAttributesA');},
    GetFileAttributesW: function() {return (Fn(T.DWORD, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('GetFileAttributesW');},
    GetFileAttributesExA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.GET_FILEEX_INFO_LEVELS], [T.LPVOID]], [['dllimport'], ['stdcall']]))('GetFileAttributesExA');},
    GetFileAttributesExW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.GET_FILEEX_INFO_LEVELS], [T.LPVOID]], [['dllimport'], ['stdcall']]))('GetFileAttributesExW');},
    GetFileInformationByHandle: function() {return (Fn(T.BOOL, [[T.HANDLE], [Pointer(T.BY_HANDLE_FILE_INFORMATION)]], [['dllimport'], ['stdcall']]))('GetFileInformationByHandle');},
    GetFileSecurityA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetFileSecurityA');},
    GetFileSecurityW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetFileSecurityW');},
    GetFileSize: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetFileSize');},
    GetFileSizeEx: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PLARGE_INTEGER]], [['dllimport'], ['stdcall']]))('GetFileSizeEx');},
    GetFileTime: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPFILETIME], [T.LPFILETIME], [T.LPFILETIME]], [['dllimport'], ['stdcall']]))('GetFileTime');},
    GetFileType: function() {return (Fn(T.DWORD, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('GetFileType');},
    GetFullPathNameA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.DWORD], [T.LPSTR], [Pointer(T.LPSTR)]], [['dllimport'], ['stdcall']]))('GetFullPathNameA');},
    GetFullPathNameW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.DWORD], [T.LPWSTR], [Pointer(T.LPWSTR)]], [['dllimport'], ['stdcall']]))('GetFullPathNameW');},
    GetHandleInformation: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetHandleInformation');},
    GetKernelObjectSecurity: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetKernelObjectSecurity');},
    GetLengthSid: function() {return (Fn(T.DWORD, [[T.PSID]], [['dllimport'], ['stdcall']]))('GetLengthSid');},
    GetLocalTime: function() {return (Fn(null, [[T.LPSYSTEMTIME]], [['dllimport'], ['stdcall']]))('GetLocalTime');},
    GetLogicalDrives: function() {return (Fn(T.DWORD, [[null]], [['dllimport'], ['stdcall']]))('GetLogicalDrives');},
    GetLogicalDriveStringsA: function() {return (Fn(T.UINT, [[T.UINT], [T.LPSTR]], [['dllimport'], ['stdcall']]))('GetLogicalDriveStringsA');},
    GetLogicalDriveStringsW: function() {return (Fn(T.UINT, [[T.UINT], [T.LPWSTR]], [['dllimport'], ['stdcall']]))('GetLogicalDriveStringsW');},
    GetLongPathNameA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetLongPathNameA');},
    GetLongPathNameW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetLongPathNameW');},
    GetMailslotInfo: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetMailslotInfo');},
    GetModuleFileNameA: function() {return (Fn(T.DWORD, [[T.HMODULE], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetModuleFileNameA');},
    GetModuleFileNameW: function() {return (Fn(T.DWORD, [[T.HMODULE], [T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetModuleFileNameW');},
    GetModuleHandleA: function() {return (Fn(T.HMODULE, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('GetModuleHandleA');},
    GetModuleHandleW: function() {return (Fn(T.HMODULE, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('GetModuleHandleW');},
    GetModuleHandleExA: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPCSTR], [Pointer(T.HMODULE)]], [['dllimport'], ['stdcall']]))('GetModuleHandleExA');},
    GetModuleHandleExW: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPCWSTR], [Pointer(T.HMODULE)]], [['dllimport'], ['stdcall']]))('GetModuleHandleExW');},
    GetNamedPipeHandleStateA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetNamedPipeHandleStateA');},
    GetNamedPipeHandleStateW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetNamedPipeHandleStateW');},
    GetNamedPipeInfo: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetNamedPipeInfo');},
    GetNativeSystemInfo: function() {return (Fn(null, [[T.LPSYSTEM_INFO]], [['dllimport'], ['stdcall']]))('GetNativeSystemInfo');},
    GetNumberOfEventLogRecords: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PDWORD]], [['dllimport'], ['stdcall']]))('GetNumberOfEventLogRecords');},
    GetOldestEventLogRecord: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PDWORD]], [['dllimport'], ['stdcall']]))('GetOldestEventLogRecord');},
    GetOverlappedResult: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPOVERLAPPED], [T.LPDWORD], [T.BOOL]], [['dllimport'], ['stdcall']]))('GetOverlappedResult');},
    GetPriorityClass: function() {return (Fn(T.DWORD, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('GetPriorityClass');},
    GetPrivateObjectSecurity: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR], [T.DWORD], [T.PDWORD]], [['dllimport'], ['stdcall']]))('GetPrivateObjectSecurity');},
    GetPrivateProfileIntA: function() {return (Fn(T.UINT, [[T.LPCSTR], [T.LPCSTR], [T.INT], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('GetPrivateProfileIntA');},
    GetPrivateProfileIntW: function() {return (Fn(T.UINT, [[T.LPCWSTR], [T.LPCWSTR], [T.INT], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('GetPrivateProfileIntW');},
    GetPrivateProfileSectionA: function() {return (Fn(T.INT, [[T.LPCSTR], [T.LPSTR], [T.DWORD], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('GetPrivateProfileSectionA');},
    GetPrivateProfileSectionW: function() {return (Fn(T.INT, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('GetPrivateProfileSectionW');},
    GetPrivateProfileSectionNamesA: function() {return (Fn(T.DWORD, [[T.LPSTR], [T.DWORD], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('GetPrivateProfileSectionNamesA');},
    GetPrivateProfileSectionNamesW: function() {return (Fn(T.DWORD, [[T.LPWSTR], [T.DWORD], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('GetPrivateProfileSectionNamesW');},
    GetPrivateProfileStringA: function() {return (Fn(T.INT, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPSTR], [T.UINT], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('GetPrivateProfileStringA');},
    GetPrivateProfileStringW: function() {return (Fn(T.INT, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPWSTR], [T.UINT], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('GetPrivateProfileStringW');},
    GetPrivateProfileStructA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPVOID], [T.UINT], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('GetPrivateProfileStructA');},
    GetPrivateProfileStructW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPVOID], [T.UINT], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('GetPrivateProfileStructW');},
    GetProcAddress: function() {return (Fn(T.FARPROC, [[T.HMODULE], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('GetProcAddress');},
    GetProcessAffinityMask: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PDWORD_PTR], [T.PDWORD_PTR]], [['dllimport'], ['stdcall']]))('GetProcessAffinityMask');},
    GetLogicalProcessorInformation: function() {return (Fn(T.BOOL, [[T.PSYSTEM_LOGICAL_PROCESSOR_INFORMATION], [T.PDWORD]], [['dllimport'], ['stdcall']]))('GetLogicalProcessorInformation');},
    GetLogicalProcessorInformationEx: function() {return (Fn(T.BOOL, [[T.LOGICAL_PROCESSOR_RELATIONSHIP], [T.PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX], [T.PDWORD]], [['dllimport'], ['stdcall']]))('GetLogicalProcessorInformationEx');},
    GetProcessHeaps: function() {return (Fn(T.DWORD, [[T.DWORD], [T.PHANDLE]], [['dllimport'], ['stdcall']]))('GetProcessHeaps');},
    GetProcessId: function() {return (Fn(T.DWORD, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('GetProcessId');},
    GetProcessIoCounters: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PIO_COUNTERS]], [['dllimport'], ['stdcall']]))('GetProcessIoCounters');},
    GetProcessPriorityBoost: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PBOOL]], [['dllimport'], ['stdcall']]))('GetProcessPriorityBoost');},
    GetProcessShutdownParameters: function() {return (Fn(T.BOOL, [[T.LPDWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetProcessShutdownParameters');},
    GetProcessTimes: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPFILETIME], [T.LPFILETIME], [T.LPFILETIME], [T.LPFILETIME]], [['dllimport'], ['stdcall']]))('GetProcessTimes');},
    GetProcessVersion: function() {return (Fn(T.DWORD, [[T.DWORD]], [['dllimport'], ['stdcall']]))('GetProcessVersion');},
    GetProcessWorkingSetSize: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PSIZE_T], [T.PSIZE_T]], [['dllimport'], ['stdcall']]))('GetProcessWorkingSetSize');},
    GetProductInfo: function() {return (Fn(T.BOOL, [[T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.PDWORD]], [['dllimport'], ['stdcall']]))('GetProductInfo');},
    GetProfileIntA: function() {return (Fn(T.UINT, [[T.LPCSTR], [T.LPCSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetProfileIntA');},
    GetProfileIntW: function() {return (Fn(T.UINT, [[T.LPCWSTR], [T.LPCWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetProfileIntW');},
    GetProfileSectionA: function() {return (Fn(T.INT, [[T.LPCSTR], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetProfileSectionA');},
    GetProfileSectionW: function() {return (Fn(T.INT, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetProfileSectionW');},
    GetProfileStringA: function() {return (Fn(T.INT, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('GetProfileStringA');},
    GetProfileStringW: function() {return (Fn(T.INT, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPWSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('GetProfileStringW');},
    GetQueuedCompletionStatus: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD], [T.PULONG_PTR], [Pointer(T.LPOVERLAPPED)], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetQueuedCompletionStatus');},
    GetSecurityDescriptorControl: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.PSECURITY_DESCRIPTOR_CONTROL], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetSecurityDescriptorControl');},
    GetSecurityDescriptorDacl: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.LPBOOL], [Pointer(T.PACL)], [T.LPBOOL]], [['dllimport'], ['stdcall']]))('GetSecurityDescriptorDacl');},
    GetSecurityDescriptorGroup: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [Pointer(T.PSID)], [T.LPBOOL]], [['dllimport'], ['stdcall']]))('GetSecurityDescriptorGroup');},
    GetSecurityDescriptorLength: function() {return (Fn(T.DWORD, [[T.PSECURITY_DESCRIPTOR]], [['dllimport'], ['stdcall']]))('GetSecurityDescriptorLength');},
    GetSecurityDescriptorOwner: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [Pointer(T.PSID)], [T.LPBOOL]], [['dllimport'], ['stdcall']]))('GetSecurityDescriptorOwner');},
    GetSecurityDescriptorSacl: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.LPBOOL], [Pointer(T.PACL)], [T.LPBOOL]], [['dllimport'], ['stdcall']]))('GetSecurityDescriptorSacl');},
    GetSidIdentifierAuthority: function() {return (Fn(T.PSID_IDENTIFIER_AUTHORITY, [[T.PSID]], [['dllimport'], ['stdcall']]))('GetSidIdentifierAuthority');},
    GetSidLengthRequired: function() {return (Fn(T.DWORD, [[T.BYTE]], [['dllimport'], ['stdcall']]))('GetSidLengthRequired');},
    GetSidSubAuthority: function() {return (Fn(T.PDWORD, [[T.PSID], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetSidSubAuthority');},
    GetSidSubAuthorityCount: function() {return (Fn(T.PUCHAR, [[T.PSID]], [['dllimport'], ['stdcall']]))('GetSidSubAuthorityCount');},
    GetShortPathNameA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetShortPathNameA');},
    GetShortPathNameW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetShortPathNameW');},
    GetStartupInfoA: function() {return (Fn(null, [[T.LPSTARTUPINFOA]], [['dllimport'], ['stdcall']]))('GetStartupInfoA');},
    GetStartupInfoW: function() {return (Fn(null, [[T.LPSTARTUPINFOW]], [['dllimport'], ['stdcall']]))('GetStartupInfoW');},
    GetStdHandle: function() {return (Fn(T.HANDLE, [[T.DWORD]], [['dllimport'], ['stdcall']]))('GetStdHandle');},
    GetSystemDirectoryA: function() {return (Fn(T.UINT, [[T.LPSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('GetSystemDirectoryA');},
    GetSystemDirectoryW: function() {return (Fn(T.UINT, [[T.LPWSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('GetSystemDirectoryW');},
    GetSystemInfo: function() {return (Fn(null, [[T.LPSYSTEM_INFO]], [['dllimport'], ['stdcall']]))('GetSystemInfo');},
    GetSystemPowerStatus: function() {return (Fn(T.BOOL, [[T.LPSYSTEM_POWER_STATUS]], [['dllimport'], ['stdcall']]))('GetSystemPowerStatus');},
    GetSystemRegistryQuota: function() {return (Fn(T.BOOL, [[T.PDWORD], [T.PDWORD]], [['dllimport'], ['stdcall']]))('GetSystemRegistryQuota');},
    GetSystemTime: function() {return (Fn(null, [[T.LPSYSTEMTIME]], [['dllimport'], ['stdcall']]))('GetSystemTime');},
    GetSystemTimeAdjustment: function() {return (Fn(T.BOOL, [[T.PDWORD], [T.PDWORD], [T.PBOOL]], [['dllimport'], ['stdcall']]))('GetSystemTimeAdjustment');},
    GetSystemTimeAsFileTime: function() {return (Fn(null, [[T.LPFILETIME]], [['dllimport'], ['stdcall']]))('GetSystemTimeAsFileTime');},
    GetSystemWindowsDirectoryA: function() {return (Fn(T.UINT, [[T.LPSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('GetSystemWindowsDirectoryA');},
    GetSystemWindowsDirectoryW: function() {return (Fn(T.UINT, [[T.LPWSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('GetSystemWindowsDirectoryW');},
    GetSystemWow64DirectoryA: function() {return (Fn(T.UINT, [[T.LPSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('GetSystemWow64DirectoryA');},
    GetSystemWow64DirectoryW: function() {return (Fn(T.UINT, [[T.LPWSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('GetSystemWow64DirectoryW');},
    GetTapeParameters: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.LPDWORD], [T.LPVOID]], [['dllimport'], ['stdcall']]))('GetTapeParameters');},
    GetTapePosition: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetTapePosition');},
    GetTapeStatus: function() {return (Fn(T.DWORD, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('GetTapeStatus');},
    GetTempFileNameA: function() {return (Fn(T.UINT, [[T.LPCSTR], [T.LPCSTR], [T.UINT], [T.LPSTR]], [['dllimport'], ['stdcall']]))('GetTempFileNameA');},
    GetTempFileNameW: function() {return (Fn(T.UINT, [[T.LPCWSTR], [T.LPCWSTR], [T.UINT], [T.LPWSTR]], [['dllimport'], ['stdcall']]))('GetTempFileNameW');},
    GetTempPathA: function() {return (Fn(T.DWORD, [[T.DWORD], [T.LPSTR]], [['dllimport'], ['stdcall']]))('GetTempPathA');},
    GetTempPathW: function() {return (Fn(T.DWORD, [[T.DWORD], [T.LPWSTR]], [['dllimport'], ['stdcall']]))('GetTempPathW');},
    GetThreadId: function() {return (Fn(T.DWORD, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('GetThreadId');},
    GetThreadIOPendingFlag: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PBOOL]], [['dllimport'], ['stdcall']]))('GetThreadIOPendingFlag');},
    GetTickCount: function() {return (Fn(T.DWORD, [[null]], [['dllimport'], ['stdcall']]))('GetTickCount');},
    GetTickCount64: function() {return (Fn(T.ULONGLONG, [[null]], [['dllimport'], ['stdcall']]))('GetTickCount64');},
    GetTimeZoneInformation: function() {return (Fn(T.DWORD, [[T.LPTIME_ZONE_INFORMATION]], [['dllimport'], ['stdcall']]))('GetTimeZoneInformation');},
    GetThreadContext: function() {return (Fn(T.BOOL, [[T.HANDLE], [Pointer(T.CONTEXT)]], [['dllimport'], ['stdcall']]))('GetThreadContext');},
    GetThreadErrorMode: function() {return (Fn(T.DWORD, [[null]], [['dllimport'], ['stdcall']]))('GetThreadErrorMode');},
    GetThreadPriority: function() {return (Fn(T.INT, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('GetThreadPriority');},
    GetThreadPriorityBoost: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PBOOL]], [['dllimport'], ['stdcall']]))('GetThreadPriorityBoost');},
    GetThreadSelectorEntry: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPLDT_ENTRY]], [['dllimport'], ['stdcall']]))('GetThreadSelectorEntry');},
    GetThreadTimes: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPFILETIME], [T.LPFILETIME], [T.LPFILETIME], [T.LPFILETIME]], [['dllimport'], ['stdcall']]))('GetThreadTimes');},
    GetTokenInformation: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.TOKEN_INFORMATION_CLASS], [T.LPVOID], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetTokenInformation');},
    GetUserNameA: function() {return (Fn(T.BOOL, [[T.LPSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetUserNameA');},
    GetUserNameW: function() {return (Fn(T.BOOL, [[T.LPWSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetUserNameW');},
    GetVersion: function() {return (Fn(T.DWORD, [[null]], [['dllimport'], ['stdcall']]))('GetVersion');},
    GetVersionExA: function() {return (Fn(T.BOOL, [[Pointer(T.OSVERSIONINFOA)]], [['dllimport'], ['stdcall']]))('GetVersionExA');},
    GetVersionExW: function() {return (Fn(T.BOOL, [[Pointer(T.OSVERSIONINFOW)]], [['dllimport'], ['stdcall']]))('GetVersionExW');},
    GetVolumeInformationA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetVolumeInformationA');},
    GetVolumeInformationW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetVolumeInformationW');},
    GetVolumeNameForVolumeMountPointA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetVolumeNameForVolumeMountPointA');},
    GetVolumeNameForVolumeMountPointW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetVolumeNameForVolumeMountPointW');},
    GetVolumePathNameA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetVolumePathNameA');},
    GetVolumePathNameW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetVolumePathNameW');},
    GetVolumePathNamesForVolumeNameA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR], [T.DWORD], [T.PDWORD]], [['dllimport'], ['stdcall']]))('GetVolumePathNamesForVolumeNameA');},
    GetVolumePathNamesForVolumeNameW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD], [T.PDWORD]], [['dllimport'], ['stdcall']]))('GetVolumePathNamesForVolumeNameW');},
    GetWindowsDirectoryA: function() {return (Fn(T.UINT, [[T.LPSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('GetWindowsDirectoryA');},
    GetWindowsDirectoryW: function() {return (Fn(T.UINT, [[T.LPWSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('GetWindowsDirectoryW');},
    GetWriteWatch: function() {return (Fn(T.UINT, [[T.DWORD], [T.LPVOID], [T.SIZE_T], [Pointer(T.LPVOID)], [Pointer(T.ULONG_PTR)], [Pointer(T.ULONG)]], [['dllimport'], ['stdcall']]))('GetWriteWatch');},
    GlobalAddAtomA: function() {return (Fn(T.ATOM, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('GlobalAddAtomA');},
    GlobalAddAtomW: function() {return (Fn(T.ATOM, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('GlobalAddAtomW');},
    GlobalAlloc: function() {return (Fn(T.HGLOBAL, [[T.UINT], [T.SIZE_T]], [['dllimport'], ['stdcall'], ['alloc_size', {"__rule":"constant","_0":"2"}]]))('GlobalAlloc');},
    GlobalCompact: function() {return (Fn(T.SIZE_T, [[T.DWORD]], [['dllimport'], ['stdcall']]))('GlobalCompact');},
    GlobalDeleteAtom: function() {return (Fn(T.ATOM, [[T.ATOM]], [['dllimport'], ['stdcall']]))('GlobalDeleteAtom');},
    GlobalFindAtomA: function() {return (Fn(T.ATOM, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('GlobalFindAtomA');},
    GlobalFindAtomW: function() {return (Fn(T.ATOM, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('GlobalFindAtomW');},
    GlobalFix: function() {return (Fn(null, [[T.HGLOBAL]], [['dllimport'], ['stdcall']]))('GlobalFix');},
    GlobalFlags: function() {return (Fn(T.UINT, [[T.HGLOBAL]], [['dllimport'], ['stdcall']]))('GlobalFlags');},
    GlobalFree: function() {return (Fn(T.HGLOBAL, [[T.HGLOBAL]], [['dllimport'], ['stdcall']]))('GlobalFree');},
    GlobalGetAtomNameA: function() {return (Fn(T.UINT, [[T.ATOM], [T.LPSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GlobalGetAtomNameA');},
    GlobalGetAtomNameW: function() {return (Fn(T.UINT, [[T.ATOM], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GlobalGetAtomNameW');},
    GlobalHandle: function() {return (Fn(T.HGLOBAL, [[T.LPCVOID]], [['dllimport'], ['stdcall']]))('GlobalHandle');},
    GlobalLock: function() {return (Fn(T.LPVOID, [[T.HGLOBAL]], [['dllimport'], ['stdcall']]))('GlobalLock');},
    GlobalMemoryStatus: function() {return (Fn(null, [[T.LPMEMORYSTATUS]], [['dllimport'], ['stdcall']]))('GlobalMemoryStatus');},
    GlobalMemoryStatusEx: function() {return (Fn(T.BOOL, [[T.LPMEMORYSTATUSEX]], [['dllimport'], ['stdcall']]))('GlobalMemoryStatusEx');},
    GlobalReAlloc: function() {return (Fn(T.HGLOBAL, [[T.HGLOBAL], [T.SIZE_T], [T.UINT]], [['dllimport'], ['stdcall'], ['alloc_size', {"__rule":"constant","_0":"3"}]]))('GlobalReAlloc');},
    GlobalSize: function() {return (Fn(T.SIZE_T, [[T.HGLOBAL]], [['dllimport'], ['stdcall']]))('GlobalSize');},
    GlobalUnfix: function() {return (Fn(null, [[T.HGLOBAL]], [['dllimport'], ['stdcall']]))('GlobalUnfix');},
    GlobalUnlock: function() {return (Fn(T.BOOL, [[T.HGLOBAL]], [['dllimport'], ['stdcall']]))('GlobalUnlock');},
    GlobalUnWire: function() {return (Fn(T.BOOL, [[T.HGLOBAL]], [['dllimport'], ['stdcall']]))('GlobalUnWire');},
    GlobalWire: function() {return (Fn(T.LPVOID, [[T.HGLOBAL]], [['dllimport'], ['stdcall']]))('GlobalWire');},
    HeapAlloc: function() {return (Fn(T.LPVOID, [[T.HANDLE], [T.DWORD], [T.SIZE_T]], [['dllimport'], ['stdcall'], ['alloc_size', {"__rule":"constant","_0":"3"}]]))('HeapAlloc');},
    HeapCompact: function() {return (Fn(T.SIZE_T, [[T.HANDLE], [T.DWORD]], [['dllimport'], ['stdcall']]))('HeapCompact');},
    HeapCreate: function() {return (Fn(T.HANDLE, [[T.DWORD], [T.SIZE_T], [T.SIZE_T]], [['dllimport'], ['stdcall']]))('HeapCreate');},
    HeapDestroy: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('HeapDestroy');},
    HeapFree: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPVOID]], [['dllimport'], ['stdcall']]))('HeapFree');},
    HeapLock: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('HeapLock');},
    HeapReAlloc: function() {return (Fn(T.LPVOID, [[T.HANDLE], [T.DWORD], [T.LPVOID], [T.SIZE_T]], [['dllimport'], ['stdcall'], ['alloc_size', {"__rule":"constant","_0":"4"}]]))('HeapReAlloc');},
    HeapQueryInformation: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.HEAP_INFORMATION_CLASS], [T.PVOID], [T.SIZE_T], [T.PSIZE_T]], [['dllimport'], ['stdcall']]))('HeapQueryInformation');},
    HeapSetInformation: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.HEAP_INFORMATION_CLASS], [T.PVOID], [T.SIZE_T]], [['dllimport'], ['stdcall']]))('HeapSetInformation');},
    HeapSize: function() {return (Fn(T.SIZE_T, [[T.HANDLE], [T.DWORD], [T.LPCVOID]], [['dllimport'], ['stdcall']]))('HeapSize');},
    HeapUnlock: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('HeapUnlock');},
    HeapValidate: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPCVOID]], [['dllimport'], ['stdcall']]))('HeapValidate');},
    HeapWalk: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPPROCESS_HEAP_ENTRY]], [['dllimport'], ['stdcall']]))('HeapWalk');},
    InitAtomTable: function() {return (Fn(T.BOOL, [[T.DWORD]], [['dllimport'], ['stdcall']]))('InitAtomTable');},
    InitializeAcl: function() {return (Fn(T.BOOL, [[T.PACL], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('InitializeAcl');},
    InitializeCriticalSection: function() {return (Fn(null, [[Pointer(T.CRITICAL_SECTION), 'lpCrit']], [['dllimport'], ['stdcall']]))('InitializeCriticalSection');},
    InitializeCriticalSectionAndSpinCount: function() {return (Fn(T.BOOL, [[Pointer(T.CRITICAL_SECTION)], [T.DWORD]], [['dllimport'], ['stdcall']]))('InitializeCriticalSectionAndSpinCount');},
    InitializeCriticalSectionEx: function() {return (Fn(T.BOOL, [[Pointer(T.CRITICAL_SECTION)], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('InitializeCriticalSectionEx');},
    InitializeSecurityDescriptor: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.DWORD]], [['dllimport'], ['stdcall']]))('InitializeSecurityDescriptor');},
    InitializeSid: function() {return (Fn(T.BOOL, [[T.PSID], [T.PSID_IDENTIFIER_AUTHORITY], [T.BYTE]], [['dllimport'], ['stdcall']]))('InitializeSid');},
    InitializeSListHead: function() {return (Fn(null, [[T.PSLIST_HEADER]], [['dllimport'], ['stdcall']]))('InitializeSListHead');},
    InterlockedFlushSList: function() {return (Fn(T.PSINGLE_LIST_ENTRY, [[T.PSLIST_HEADER]], [['dllimport'], ['stdcall']]))('InterlockedFlushSList');},
    InterlockedPopEntrySList: function() {return (Fn(T.PSINGLE_LIST_ENTRY, [[T.PSLIST_HEADER]], [['dllimport'], ['stdcall']]))('InterlockedPopEntrySList');},
    InterlockedPushEntrySList: function() {return (Fn(T.PSINGLE_LIST_ENTRY, [[T.PSLIST_HEADER], [T.PSINGLE_LIST_ENTRY]], [['dllimport'], ['stdcall']]))('InterlockedPushEntrySList');},
    IsBadCodePtr: function() {return (Fn(T.BOOL, [[T.FARPROC]], [['dllimport'], ['stdcall']]))('IsBadCodePtr');},
    IsBadHugeReadPtr: function() {return (Fn(T.BOOL, [[T.LPCVOID], [T.UINT]], [['dllimport'], ['stdcall']]))('IsBadHugeReadPtr');},
    IsBadHugeWritePtr: function() {return (Fn(T.BOOL, [[T.LPVOID], [T.UINT]], [['dllimport'], ['stdcall']]))('IsBadHugeWritePtr');},
    IsBadReadPtr: function() {return (Fn(T.BOOL, [[T.LPCVOID], [T.UINT]], [['dllimport'], ['stdcall']]))('IsBadReadPtr');},
    IsBadStringPtrA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('IsBadStringPtrA');},
    IsBadStringPtrW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('IsBadStringPtrW');},
    IsBadWritePtr: function() {return (Fn(T.BOOL, [[T.LPVOID], [T.UINT]], [['dllimport'], ['stdcall']]))('IsBadWritePtr');},
    IsDebuggerPresent: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('IsDebuggerPresent');},
    IsSystemResumeAutomatic: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('IsSystemResumeAutomatic');},
    IsTextUnicode: function() {return (Fn(T.BOOL, [[T.LPCVOID], [T.INT], [T.LPINT]], [['dllimport'], ['stdcall']]))('IsTextUnicode');},
    IsTokenRestricted: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('IsTokenRestricted');},
    IsValidAcl: function() {return (Fn(T.BOOL, [[T.PACL]], [['dllimport'], ['stdcall']]))('IsValidAcl');},
    IsValidSecurityDescriptor: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR]], [['dllimport'], ['stdcall']]))('IsValidSecurityDescriptor');},
    IsValidSid: function() {return (Fn(T.BOOL, [[T.PSID]], [['dllimport'], ['stdcall']]))('IsValidSid');},
    IsWellKnownSid: function() {return (Fn(T.BOOL, [[T.PSID], [T.WELL_KNOWN_SID_TYPE]], [['dllimport'], ['stdcall']]))('IsWellKnownSid');},
    IsWow64Process: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PBOOL]], [['dllimport'], ['stdcall']]))('IsWow64Process');},
    ImpersonateLoggedOnUser: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('ImpersonateLoggedOnUser');},
    ImpersonateNamedPipeClient: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('ImpersonateNamedPipeClient');},
    ImpersonateSelf: function() {return (Fn(T.BOOL, [[T.SECURITY_IMPERSONATION_LEVEL]], [['dllimport'], ['stdcall']]))('ImpersonateSelf');},
    IsProcessInJob: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.HANDLE], [T.PBOOL]], [['dllimport'], ['stdcall']]))('IsProcessInJob');},
    IsProcessorFeaturePresent: function() {return (Fn(T.BOOL, [[T.DWORD]], [['dllimport'], ['stdcall']]))('IsProcessorFeaturePresent');},
    LeaveCriticalSection: function() {return (Fn(null, [[Pointer(T.CRITICAL_SECTION), 'lpCrit']], [['dllimport'], ['stdcall']]))('LeaveCriticalSection');},
    LoadLibraryA: function() {return (Fn(T.HMODULE, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('LoadLibraryA');},
    LoadLibraryW: function() {return (Fn(T.HMODULE, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('LoadLibraryW');},
    LoadLibraryExA: function() {return (Fn(T.HMODULE, [[T.LPCSTR], [T.HANDLE], [T.DWORD]], [['dllimport'], ['stdcall']]))('LoadLibraryExA');},
    LoadLibraryExW: function() {return (Fn(T.HMODULE, [[T.LPCWSTR], [T.HANDLE], [T.DWORD]], [['dllimport'], ['stdcall']]))('LoadLibraryExW');},
    LoadModule: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.LPVOID]], [['dllimport'], ['stdcall']]))('LoadModule');},
    LoadResource: function() {return (Fn(T.HGLOBAL, [[T.HMODULE], [T.HRSRC]], [['dllimport'], ['stdcall']]))('LoadResource');},
    LocalAlloc: function() {return (Fn(T.HLOCAL, [[T.UINT], [T.SIZE_T]], [['dllimport'], ['stdcall'], ['alloc_size', {"__rule":"constant","_0":"2"}]]))('LocalAlloc');},
    LocalCompact: function() {return (Fn(T.SIZE_T, [[T.UINT]], [['dllimport'], ['stdcall']]))('LocalCompact');},
    LocalFlags: function() {return (Fn(T.UINT, [[T.HLOCAL]], [['dllimport'], ['stdcall']]))('LocalFlags');},
    LocalFree: function() {return (Fn(T.HLOCAL, [[T.HLOCAL]], [['dllimport'], ['stdcall']]))('LocalFree');},
    LocalHandle: function() {return (Fn(T.HLOCAL, [[T.LPCVOID]], [['dllimport'], ['stdcall']]))('LocalHandle');},
    LocalLock: function() {return (Fn(T.LPVOID, [[T.HLOCAL]], [['dllimport'], ['stdcall']]))('LocalLock');},
    LocalReAlloc: function() {return (Fn(T.HLOCAL, [[T.HLOCAL], [T.SIZE_T], [T.UINT]], [['dllimport'], ['stdcall'], ['alloc_size', {"__rule":"constant","_0":"3"}]]))('LocalReAlloc');},
    LocalShrink: function() {return (Fn(T.SIZE_T, [[T.HGLOBAL], [T.UINT]], [['dllimport'], ['stdcall']]))('LocalShrink');},
    LocalSize: function() {return (Fn(T.SIZE_T, [[T.HLOCAL]], [['dllimport'], ['stdcall']]))('LocalSize');},
    LocalUnlock: function() {return (Fn(T.BOOL, [[T.HLOCAL]], [['dllimport'], ['stdcall']]))('LocalUnlock');},
    LockResource: function() {return (Fn(T.LPVOID, [[T.HGLOBAL]], [['dllimport'], ['stdcall']]))('LockResource');},
    LookupAccountNameA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.PSID], [T.LPDWORD], [T.LPSTR], [T.LPDWORD], [T.PSID_NAME_USE]], [['dllimport'], ['stdcall']]))('LookupAccountNameA');},
    LookupAccountNameW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.PSID], [T.LPDWORD], [T.LPWSTR], [T.LPDWORD], [T.PSID_NAME_USE]], [['dllimport'], ['stdcall']]))('LookupAccountNameW');},
    LookupAccountSidA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.PSID], [T.LPSTR], [T.LPDWORD], [T.LPSTR], [T.LPDWORD], [T.PSID_NAME_USE]], [['dllimport'], ['stdcall']]))('LookupAccountSidA');},
    LookupAccountSidW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.PSID], [T.LPWSTR], [T.LPDWORD], [T.LPWSTR], [T.LPDWORD], [T.PSID_NAME_USE]], [['dllimport'], ['stdcall']]))('LookupAccountSidW');},
    LocalFileTimeToFileTime: function() {return (Fn(T.BOOL, [[Pointer(T.FILETIME)], [T.LPFILETIME]], [['dllimport'], ['stdcall']]))('LocalFileTimeToFileTime');},
    LockFile: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('LockFile');},
    LockFileEx: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPOVERLAPPED]], [['dllimport'], ['stdcall']]))('LockFileEx');},
    LogonUserA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.DWORD], [T.PHANDLE]], [['dllimport'], ['stdcall']]))('LogonUserA');},
    LogonUserW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.DWORD], [T.PHANDLE]], [['dllimport'], ['stdcall']]))('LogonUserW');},
    LookupPrivilegeDisplayNameA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPSTR], [T.LPDWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('LookupPrivilegeDisplayNameA');},
    LookupPrivilegeDisplayNameW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPWSTR], [T.LPDWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('LookupPrivilegeDisplayNameW');},
    LookupPrivilegeNameA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.PLUID], [T.LPSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('LookupPrivilegeNameA');},
    LookupPrivilegeNameW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.PLUID], [T.LPWSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('LookupPrivilegeNameW');},
    LookupPrivilegeValueA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.PLUID]], [['dllimport'], ['stdcall']]))('LookupPrivilegeValueA');},
    LookupPrivilegeValueW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.PLUID]], [['dllimport'], ['stdcall']]))('LookupPrivilegeValueW');},
    MakeAbsoluteSD: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.PSECURITY_DESCRIPTOR], [T.LPDWORD], [T.PACL], [T.LPDWORD], [T.PACL], [T.LPDWORD], [T.PSID], [T.LPDWORD], [T.PSID], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('MakeAbsoluteSD');},
    MakeCriticalSectionGlobal: function() {return (Fn(null, [[Pointer(T.CRITICAL_SECTION), 'lpCrit']], [['dllimport'], ['stdcall']]))('MakeCriticalSectionGlobal');},
    MakeSelfRelativeSD: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.PSECURITY_DESCRIPTOR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('MakeSelfRelativeSD');},
    MapGenericMask: function() {return (Fn(null, [[T.PDWORD], [T.PGENERIC_MAPPING]], [['dllimport'], ['stdcall']]))('MapGenericMask');},
    MapHModuleSL: function() {return (Fn(T.HMODULE, [[T.WORD]], [['dllimport'], ['stdcall']]))('MapHModuleSL');},
    MapHModuleLS: function() {return (Fn(T.WORD, [[T.HMODULE]], [['dllimport'], ['stdcall']]))('MapHModuleLS');},
    MapViewOfFile: function() {return (Fn(T.LPVOID, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.SIZE_T]], [['dllimport'], ['stdcall']]))('MapViewOfFile');},
    MapViewOfFileEx: function() {return (Fn(T.LPVOID, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.SIZE_T], [T.LPVOID]], [['dllimport'], ['stdcall']]))('MapViewOfFileEx');},
    MoveFileA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('MoveFileA');},
    MoveFileW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('MoveFileW');},
    MoveFileExA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('MoveFileExA');},
    MoveFileExW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('MoveFileExW');},
    MoveFileWithProgressA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPPROGRESS_ROUTINE], [T.LPVOID], [T.DWORD]], [['dllimport'], ['stdcall']]))('MoveFileWithProgressA');},
    MoveFileWithProgressW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPPROGRESS_ROUTINE], [T.LPVOID], [T.DWORD]], [['dllimport'], ['stdcall']]))('MoveFileWithProgressW');},
    MulDiv: function() {return (Fn(T.INT, [[T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('MulDiv');},
    NeedCurrentDirectoryForExePathA: function() {return (Fn(T.BOOL, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('NeedCurrentDirectoryForExePathA');},
    NeedCurrentDirectoryForExePathW: function() {return (Fn(T.BOOL, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('NeedCurrentDirectoryForExePathW');},
    NotifyChangeEventLog: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.HANDLE]], [['dllimport'], ['stdcall']]))('NotifyChangeEventLog');},
    ObjectCloseAuditAlarmA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPVOID], [T.BOOL]], [['dllimport'], ['stdcall']]))('ObjectCloseAuditAlarmA');},
    ObjectCloseAuditAlarmW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPVOID], [T.BOOL]], [['dllimport'], ['stdcall']]))('ObjectCloseAuditAlarmW');},
    ObjectDeleteAuditAlarmA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPVOID], [T.BOOL]], [['dllimport'], ['stdcall']]))('ObjectDeleteAuditAlarmA');},
    ObjectDeleteAuditAlarmW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPVOID], [T.BOOL]], [['dllimport'], ['stdcall']]))('ObjectDeleteAuditAlarmW');},
    ObjectOpenAuditAlarmA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPVOID], [T.LPSTR], [T.LPSTR], [T.PSECURITY_DESCRIPTOR], [T.HANDLE], [T.DWORD], [T.DWORD], [T.PPRIVILEGE_SET], [T.BOOL], [T.BOOL], [T.LPBOOL]], [['dllimport'], ['stdcall']]))('ObjectOpenAuditAlarmA');},
    ObjectOpenAuditAlarmW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPVOID], [T.LPWSTR], [T.LPWSTR], [T.PSECURITY_DESCRIPTOR], [T.HANDLE], [T.DWORD], [T.DWORD], [T.PPRIVILEGE_SET], [T.BOOL], [T.BOOL], [T.LPBOOL]], [['dllimport'], ['stdcall']]))('ObjectOpenAuditAlarmW');},
    ObjectPrivilegeAuditAlarmA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPVOID], [T.HANDLE], [T.DWORD], [T.PPRIVILEGE_SET], [T.BOOL]], [['dllimport'], ['stdcall']]))('ObjectPrivilegeAuditAlarmA');},
    ObjectPrivilegeAuditAlarmW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPVOID], [T.HANDLE], [T.DWORD], [T.PPRIVILEGE_SET], [T.BOOL]], [['dllimport'], ['stdcall']]))('ObjectPrivilegeAuditAlarmW');},
    OpenBackupEventLogA: function() {return (Fn(T.HANDLE, [[T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('OpenBackupEventLogA');},
    OpenBackupEventLogW: function() {return (Fn(T.HANDLE, [[T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('OpenBackupEventLogW');},
    OpenEventA: function() {return (Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('OpenEventA');},
    OpenEventW: function() {return (Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('OpenEventW');},
    OpenEventLogA: function() {return (Fn(T.HANDLE, [[T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('OpenEventLogA');},
    OpenEventLogW: function() {return (Fn(T.HANDLE, [[T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('OpenEventLogW');},
    OpenFile: function() {return (Fn(T.HFILE, [[T.LPCSTR], [Pointer(T.OFSTRUCT)], [T.UINT]], [['dllimport'], ['stdcall']]))('OpenFile');},
    OpenFileMappingA: function() {return (Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('OpenFileMappingA');},
    OpenFileMappingW: function() {return (Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('OpenFileMappingW');},
    OpenJobObjectA: function() {return (Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('OpenJobObjectA');},
    OpenJobObjectW: function() {return (Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('OpenJobObjectW');},
    OpenMutexA: function() {return (Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('OpenMutexA');},
    OpenMutexW: function() {return (Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('OpenMutexW');},
    OpenProcess: function() {return (Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.DWORD]], [['dllimport'], ['stdcall']]))('OpenProcess');},
    OpenProcessToken: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.PHANDLE]], [['dllimport'], ['stdcall']]))('OpenProcessToken');},
    OpenSemaphoreA: function() {return (Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('OpenSemaphoreA');},
    OpenSemaphoreW: function() {return (Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('OpenSemaphoreW');},
    OpenThread: function() {return (Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.DWORD]], [['dllimport'], ['stdcall']]))('OpenThread');},
    OpenThreadToken: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.BOOL], [T.PHANDLE]], [['dllimport'], ['stdcall']]))('OpenThreadToken');},
    OpenWaitableTimerA: function() {return (Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('OpenWaitableTimerA');},
    OpenWaitableTimerW: function() {return (Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('OpenWaitableTimerW');},
    OutputDebugStringA: function() {return (Fn(null, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('OutputDebugStringA');},
    OutputDebugStringW: function() {return (Fn(null, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('OutputDebugStringW');},
    PeekNamedPipe: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PVOID], [T.DWORD], [T.PDWORD], [T.PDWORD], [T.PDWORD]], [['dllimport'], ['stdcall']]))('PeekNamedPipe');},
    PostQueuedCompletionStatus: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.ULONG_PTR], [T.LPOVERLAPPED]], [['dllimport'], ['stdcall']]))('PostQueuedCompletionStatus');},
    PrepareTape: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.BOOL]], [['dllimport'], ['stdcall']]))('PrepareTape');},
    ProcessIdToSessionId: function() {return (Fn(T.BOOL, [[T.DWORD], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('ProcessIdToSessionId');},
    PrivilegeCheck: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PPRIVILEGE_SET], [T.LPBOOL]], [['dllimport'], ['stdcall']]))('PrivilegeCheck');},
    PrivilegedServiceAuditAlarmA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.HANDLE], [T.PPRIVILEGE_SET], [T.BOOL]], [['dllimport'], ['stdcall']]))('PrivilegedServiceAuditAlarmA');},
    PrivilegedServiceAuditAlarmW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.HANDLE], [T.PPRIVILEGE_SET], [T.BOOL]], [['dllimport'], ['stdcall']]))('PrivilegedServiceAuditAlarmW');},
    PulseEvent: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('PulseEvent');},
    PurgeComm: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD]], [['dllimport'], ['stdcall']]))('PurgeComm');},
    QueryActCtxW: function() {return (Fn(T.BOOL, [[T.DWORD], [T.HANDLE], [T.PVOID], [T.ULONG], [T.PVOID], [T.SIZE_T], [Pointer(T.SIZE_T)]], [['dllimport'], ['stdcall']]))('QueryActCtxW');},
    QueryDepthSList: function() {return (Fn(T.USHORT, [[T.PSLIST_HEADER]], [['dllimport'], ['stdcall']]))('QueryDepthSList');},
    QueryDosDeviceA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('QueryDosDeviceA');},
    QueryDosDeviceW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('QueryDosDeviceW');},
    QueryFullProcessImageNameA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPSTR], [T.PDWORD]], [['dllimport'], ['stdcall']]))('QueryFullProcessImageNameA');},
    QueryFullProcessImageNameW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPWSTR], [T.PDWORD]], [['dllimport'], ['stdcall']]))('QueryFullProcessImageNameW');},
    QueryInformationJobObject: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.JOBOBJECTINFOCLASS], [T.LPVOID], [T.DWORD], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('QueryInformationJobObject');},
    QueryPerformanceCounter: function() {return (Fn(T.BOOL, [[Pointer(T.LARGE_INTEGER)]], [['dllimport'], ['stdcall']]))('QueryPerformanceCounter');},
    QueryPerformanceFrequency: function() {return (Fn(T.BOOL, [[Pointer(T.LARGE_INTEGER)]], [['dllimport'], ['stdcall']]))('QueryPerformanceFrequency');},
    QueueUserAPC: function() {return (Fn(T.DWORD, [[T.PAPCFUNC], [T.HANDLE], [T.ULONG_PTR]], [['dllimport'], ['stdcall']]))('QueueUserAPC');},
    QueueUserWorkItem: function() {return (Fn(T.BOOL, [[T.LPTHREAD_START_ROUTINE], [T.PVOID], [T.ULONG]], [['dllimport'], ['stdcall']]))('QueueUserWorkItem');},
    RaiseException: function() {return (Fn(null, [[T.DWORD], [T.DWORD], [T.DWORD], [Pointer(T.ULONG_PTR)]], [['dllimport'], ['stdcall']]))('RaiseException');},
    ReadEventLogA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.LPVOID], [T.DWORD], [Pointer(T.DWORD)], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('ReadEventLogA');},
    ReadEventLogW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.LPVOID], [T.DWORD], [Pointer(T.DWORD)], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('ReadEventLogW');},
    ReadDirectoryChangesW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.DWORD], [T.BOOL], [T.DWORD], [T.LPDWORD], [T.LPOVERLAPPED], [T.LPOVERLAPPED_COMPLETION_ROUTINE]], [['dllimport'], ['stdcall']]))('ReadDirectoryChangesW');},
    ReadFile: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.LPOVERLAPPED]], [['dllimport'], ['stdcall']]))('ReadFile');},
    ReadFileEx: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.DWORD], [T.LPOVERLAPPED], [T.LPOVERLAPPED_COMPLETION_ROUTINE]], [['dllimport'], ['stdcall']]))('ReadFileEx');},
    ReadFileScatter: function() {return (Fn(T.BOOL, [[T.HANDLE], [Pointer(T.FILE_SEGMENT_ELEMENT)], [T.DWORD], [T.LPDWORD], [T.LPOVERLAPPED]], [['dllimport'], ['stdcall']]))('ReadFileScatter');},
    ReadProcessMemory: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCVOID], [T.LPVOID], [T.SIZE_T], [Pointer(T.SIZE_T)]], [['dllimport'], ['stdcall']]))('ReadProcessMemory');},
    RegisterEventSourceA: function() {return (Fn(T.HANDLE, [[T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('RegisterEventSourceA');},
    RegisterEventSourceW: function() {return (Fn(T.HANDLE, [[T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('RegisterEventSourceW');},
    RegisterWaitForSingleObject: function() {return (Fn(T.BOOL, [[T.PHANDLE], [T.HANDLE], [T.WAITORTIMERCALLBACK], [T.PVOID], [T.ULONG], [T.ULONG]], [['dllimport'], ['stdcall']]))('RegisterWaitForSingleObject');},
    RegisterWaitForSingleObjectEx: function() {return (Fn(T.HANDLE, [[T.HANDLE], [T.WAITORTIMERCALLBACK], [T.PVOID], [T.ULONG], [T.ULONG]], [['dllimport'], ['stdcall']]))('RegisterWaitForSingleObjectEx');},
    ReleaseActCtx: function() {return (Fn(null, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('ReleaseActCtx');},
    ReleaseMutex: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('ReleaseMutex');},
    ReleaseSemaphore: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LONG], [T.LPLONG]], [['dllimport'], ['stdcall']]))('ReleaseSemaphore');},
    RemoveVectoredExceptionHandler: function() {return (Fn(T.ULONG, [[T.PVOID]], [['dllimport'], ['stdcall']]))('RemoveVectoredExceptionHandler');},
    ReplaceFileA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.LPVOID], [T.LPVOID]], [['dllimport'], ['stdcall']]))('ReplaceFileA');},
    ReplaceFileW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.LPVOID], [T.LPVOID]], [['dllimport'], ['stdcall']]))('ReplaceFileW');},
    RemoveDirectoryA: function() {return (Fn(T.BOOL, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('RemoveDirectoryA');},
    RemoveDirectoryW: function() {return (Fn(T.BOOL, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('RemoveDirectoryW');},
    ReportEventA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.WORD], [T.WORD], [T.DWORD], [T.PSID], [T.WORD], [T.DWORD], [Pointer(T.LPCSTR)], [T.LPVOID]], [['dllimport'], ['stdcall']]))('ReportEventA');},
    ReportEventW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.WORD], [T.WORD], [T.DWORD], [T.PSID], [T.WORD], [T.DWORD], [Pointer(T.LPCWSTR)], [T.LPVOID]], [['dllimport'], ['stdcall']]))('ReportEventW');},
    RequestWakeupLatency: function() {return (Fn(T.BOOL, [[T.LATENCY_TIME, 'latency']], [['dllimport'], ['stdcall']]))('RequestWakeupLatency');},
    ResetEvent: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('ResetEvent');},
    ResetWriteWatch: function() {return (Fn(T.UINT, [[T.LPVOID], [T.SIZE_T]], [['dllimport'], ['stdcall']]))('ResetWriteWatch');},
    ResumeThread: function() {return (Fn(T.DWORD, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('ResumeThread');},
    RevertToSelf: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('RevertToSelf');},
    SearchPathA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.LPSTR], [Pointer(T.LPSTR)]], [['dllimport'], ['stdcall']]))('SearchPathA');},
    SearchPathW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.LPWSTR], [Pointer(T.LPWSTR)]], [['dllimport'], ['stdcall']]))('SearchPathW');},
    SetAclInformation: function() {return (Fn(T.BOOL, [[T.PACL], [T.LPVOID], [T.DWORD], [T.ACL_INFORMATION_CLASS]], [['dllimport'], ['stdcall']]))('SetAclInformation');},
    SetCommConfig: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCOMMCONFIG], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetCommConfig');},
    SetCommBreak: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('SetCommBreak');},
    SetCommMask: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetCommMask');},
    SetCommState: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDCB]], [['dllimport'], ['stdcall']]))('SetCommState');},
    SetCommTimeouts: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCOMMTIMEOUTS]], [['dllimport'], ['stdcall']]))('SetCommTimeouts');},
    SetComputerNameA: function() {return (Fn(T.BOOL, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('SetComputerNameA');},
    SetComputerNameW: function() {return (Fn(T.BOOL, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('SetComputerNameW');},
    SetComputerNameExA: function() {return (Fn(T.BOOL, [[T.COMPUTER_NAME_FORMAT], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('SetComputerNameExA');},
    SetComputerNameExW: function() {return (Fn(T.BOOL, [[T.COMPUTER_NAME_FORMAT], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('SetComputerNameExW');},
    SetCriticalSectionSpinCount: function() {return (Fn(T.DWORD, [[T.LPCRITICAL_SECTION], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetCriticalSectionSpinCount');},
    SetCurrentDirectoryA: function() {return (Fn(T.BOOL, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('SetCurrentDirectoryA');},
    SetCurrentDirectoryW: function() {return (Fn(T.BOOL, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('SetCurrentDirectoryW');},
    SetDefaultCommConfigA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCOMMCONFIG], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetDefaultCommConfigA');},
    SetDefaultCommConfigW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCOMMCONFIG], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetDefaultCommConfigW');},
    SetDllDirectoryA: function() {return (Fn(T.BOOL, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('SetDllDirectoryA');},
    SetDllDirectoryW: function() {return (Fn(T.BOOL, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('SetDllDirectoryW');},
    SetDynamicTimeZoneInformation: function() {return (Fn(T.BOOL, [[Pointer(T.DYNAMIC_TIME_ZONE_INFORMATION)]], [['dllimport'], ['stdcall']]))('SetDynamicTimeZoneInformation');},
    SetEndOfFile: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('SetEndOfFile');},
    SetEnvironmentVariableA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('SetEnvironmentVariableA');},
    SetEnvironmentVariableW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('SetEnvironmentVariableW');},
    SetErrorMode: function() {return (Fn(T.UINT, [[T.UINT]], [['dllimport'], ['stdcall']]))('SetErrorMode');},
    SetEvent: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('SetEvent');},
    SetFileApisToANSI: function() {return (Fn(null, [[null]], [['dllimport'], ['stdcall']]))('SetFileApisToANSI');},
    SetFileApisToOEM: function() {return (Fn(null, [[null]], [['dllimport'], ['stdcall']]))('SetFileApisToOEM');},
    SetFileAttributesA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetFileAttributesA');},
    SetFileAttributesW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetFileAttributesW');},
    SetFilePointer: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.LONG], [T.LPLONG], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetFilePointer');},
    SetFilePointerEx: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LARGE_INTEGER], [Pointer(T.LARGE_INTEGER)], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetFilePointerEx');},
    SetFileSecurityA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR]], [['dllimport'], ['stdcall']]))('SetFileSecurityA');},
    SetFileSecurityW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR]], [['dllimport'], ['stdcall']]))('SetFileSecurityW');},
    SetFileTime: function() {return (Fn(T.BOOL, [[T.HANDLE], [Pointer(T.FILETIME)], [Pointer(T.FILETIME)], [Pointer(T.FILETIME)]], [['dllimport'], ['stdcall']]))('SetFileTime');},
    SetHandleCount: function() {return (Fn(T.UINT, [[T.UINT]], [['dllimport'], ['stdcall']]))('SetHandleCount');},
    SetHandleInformation: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetHandleInformation');},
    SetInformationJobObject: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.JOBOBJECTINFOCLASS], [T.LPVOID], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetInformationJobObject');},
    SetKernelObjectSecurity: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR]], [['dllimport'], ['stdcall']]))('SetKernelObjectSecurity');},
    SetLocalTime: function() {return (Fn(T.BOOL, [[Pointer(T.SYSTEMTIME)]], [['dllimport'], ['stdcall']]))('SetLocalTime');},
    SetMailslotInfo: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetMailslotInfo');},
    SetNamedPipeHandleState: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('SetNamedPipeHandleState');},
    SetPriorityClass: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetPriorityClass');},
    SetPrivateObjectSecurity: function() {return (Fn(T.BOOL, [[T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR], [Pointer(T.PSECURITY_DESCRIPTOR)], [T.PGENERIC_MAPPING], [T.HANDLE]], [['dllimport'], ['stdcall']]))('SetPrivateObjectSecurity');},
    SetProcessAffinityMask: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD_PTR]], [['dllimport'], ['stdcall']]))('SetProcessAffinityMask');},
    SetProcessPriorityBoost: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.BOOL]], [['dllimport'], ['stdcall']]))('SetProcessPriorityBoost');},
    SetProcessShutdownParameters: function() {return (Fn(T.BOOL, [[T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetProcessShutdownParameters');},
    SetProcessWorkingSetSize: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.SIZE_T], [T.SIZE_T]], [['dllimport'], ['stdcall']]))('SetProcessWorkingSetSize');},
    SetSecurityDescriptorControl: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.SECURITY_DESCRIPTOR_CONTROL], [T.SECURITY_DESCRIPTOR_CONTROL]], [['dllimport'], ['stdcall']]))('SetSecurityDescriptorControl');},
    SetSecurityDescriptorDacl: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.BOOL], [T.PACL], [T.BOOL]], [['dllimport'], ['stdcall']]))('SetSecurityDescriptorDacl');},
    SetSecurityDescriptorGroup: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.PSID], [T.BOOL]], [['dllimport'], ['stdcall']]))('SetSecurityDescriptorGroup');},
    SetSecurityDescriptorOwner: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.PSID], [T.BOOL]], [['dllimport'], ['stdcall']]))('SetSecurityDescriptorOwner');},
    SetSecurityDescriptorSacl: function() {return (Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.BOOL], [T.PACL], [T.BOOL]], [['dllimport'], ['stdcall']]))('SetSecurityDescriptorSacl');},
    SetStdHandle: function() {return (Fn(T.BOOL, [[T.DWORD], [T.HANDLE]], [['dllimport'], ['stdcall']]))('SetStdHandle');},
    SetSystemPowerState: function() {return (Fn(T.BOOL, [[T.BOOL], [T.BOOL]], [['dllimport'], ['stdcall']]))('SetSystemPowerState');},
    SetSystemTime: function() {return (Fn(T.BOOL, [[Pointer(T.SYSTEMTIME)]], [['dllimport'], ['stdcall']]))('SetSystemTime');},
    SetSystemTimeAdjustment: function() {return (Fn(T.BOOL, [[T.DWORD], [T.BOOL]], [['dllimport'], ['stdcall']]))('SetSystemTimeAdjustment');},
    SetTapeParameters: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.LPVOID]], [['dllimport'], ['stdcall']]))('SetTapeParameters');},
    SetTapePosition: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.BOOL]], [['dllimport'], ['stdcall']]))('SetTapePosition');},
    SetThreadAffinityMask: function() {return (Fn(T.DWORD_PTR, [[T.HANDLE], [T.DWORD_PTR]], [['dllimport'], ['stdcall']]))('SetThreadAffinityMask');},
    SetThreadContext: function() {return (Fn(T.BOOL, [[T.HANDLE], [Pointer(T.CONTEXT)]], [['dllimport'], ['stdcall']]))('SetThreadContext');},
    SetThreadErrorMode: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('SetThreadErrorMode');},
    SetThreadExecutionState: function() {return (Fn(T.DWORD, [[T.EXECUTION_STATE]], [['dllimport'], ['stdcall']]))('SetThreadExecutionState');},
    SetThreadIdealProcessor: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetThreadIdealProcessor');},
    SetThreadPriority: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.INT]], [['dllimport'], ['stdcall']]))('SetThreadPriority');},
    SetThreadPriorityBoost: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.BOOL]], [['dllimport'], ['stdcall']]))('SetThreadPriorityBoost');},
    SetThreadToken: function() {return (Fn(T.BOOL, [[T.PHANDLE], [T.HANDLE]], [['dllimport'], ['stdcall']]))('SetThreadToken');},
    SetTimeZoneInformation: function() {return (Fn(T.BOOL, [[Pointer(T.TIME_ZONE_INFORMATION)]], [['dllimport'], ['stdcall']]))('SetTimeZoneInformation');},
    SetTokenInformation: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.TOKEN_INFORMATION_CLASS], [T.LPVOID], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetTokenInformation');},
    SetUnhandledExceptionFilter: function() {return (Fn(T.LPTOP_LEVEL_EXCEPTION_FILTER, [[T.LPTOP_LEVEL_EXCEPTION_FILTER]], [['dllimport'], ['stdcall']]))('SetUnhandledExceptionFilter');},
    SetVolumeLabelA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('SetVolumeLabelA');},
    SetVolumeLabelW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('SetVolumeLabelW');},
    SetVolumeMountPointA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('SetVolumeMountPointA');},
    SetVolumeMountPointW: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('SetVolumeMountPointW');},
    SetWaitableTimer: function() {return (Fn(T.BOOL, [[T.HANDLE], [Pointer(T.LARGE_INTEGER)], [T.LONG], [T.PTIMERAPCROUTINE], [T.LPVOID], [T.BOOL]], [['dllimport'], ['stdcall']]))('SetWaitableTimer');},
    SetupComm: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetupComm');},
    SignalObjectAndWait: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.HANDLE], [T.DWORD], [T.BOOL]], [['dllimport'], ['stdcall']]))('SignalObjectAndWait');},
    SizeofResource: function() {return (Fn(T.DWORD, [[T.HMODULE], [T.HRSRC]], [['dllimport'], ['stdcall']]))('SizeofResource');},
    Sleep: function() {return (Fn(null, [[T.DWORD]], [['dllimport'], ['stdcall']]))('Sleep');},
    SleepEx: function() {return (Fn(T.DWORD, [[T.DWORD], [T.BOOL]], [['dllimport'], ['stdcall']]))('SleepEx');},
    SuspendThread: function() {return (Fn(T.DWORD, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('SuspendThread');},
    SwitchToFiber: function() {return (Fn(null, [[T.LPVOID]], [['dllimport'], ['stdcall']]))('SwitchToFiber');},
    SwitchToThread: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('SwitchToThread');},
    SystemTimeToFileTime: function() {return (Fn(T.BOOL, [[Pointer(T.SYSTEMTIME)], [T.LPFILETIME]], [['dllimport'], ['stdcall']]))('SystemTimeToFileTime');},
    SystemTimeToTzSpecificLocalTime: function() {return (Fn(T.BOOL, [[Pointer(T.TIME_ZONE_INFORMATION)], [Pointer(T.SYSTEMTIME)], [T.LPSYSTEMTIME]], [['dllimport'], ['stdcall']]))('SystemTimeToTzSpecificLocalTime');},
    TerminateJobObject: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.UINT]], [['dllimport'], ['stdcall']]))('TerminateJobObject');},
    TerminateProcess: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD]], [['dllimport'], ['stdcall']]))('TerminateProcess');},
    TerminateThread: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD]], [['dllimport'], ['stdcall']]))('TerminateThread');},
    TlsAlloc: function() {return (Fn(T.DWORD, [[null]], [['dllimport'], ['stdcall']]))('TlsAlloc');},
    TlsFree: function() {return (Fn(T.BOOL, [[T.DWORD]], [['dllimport'], ['stdcall']]))('TlsFree');},
    TlsGetValue: function() {return (Fn(T.LPVOID, [[T.DWORD]], [['dllimport'], ['stdcall']]))('TlsGetValue');},
    TlsSetValue: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPVOID]], [['dllimport'], ['stdcall']]))('TlsSetValue');},
    TransactNamedPipe: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.LPOVERLAPPED]], [['dllimport'], ['stdcall']]))('TransactNamedPipe');},
    TransmitCommChar: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.CHAR]], [['dllimport'], ['stdcall']]))('TransmitCommChar');},
    TryEnterCriticalSection: function() {return (Fn(T.BOOL, [[Pointer(T.CRITICAL_SECTION), 'lpCrit']], [['dllimport'], ['stdcall']]))('TryEnterCriticalSection');},
    TzSpecificLocalTimeToSystemTime: function() {return (Fn(T.BOOL, [[Pointer(T.TIME_ZONE_INFORMATION)], [Pointer(T.SYSTEMTIME)], [T.LPSYSTEMTIME]], [['dllimport'], ['stdcall']]))('TzSpecificLocalTimeToSystemTime');},
    UnhandledExceptionFilter: function() {return (Fn(T.LONG, [[T.PEXCEPTION_POINTERS]], [['dllimport'], ['stdcall']]))('UnhandledExceptionFilter');},
    UnlockFile: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('UnlockFile');},
    UnlockFileEx: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPOVERLAPPED]], [['dllimport'], ['stdcall']]))('UnlockFileEx');},
    UnmapViewOfFile: function() {return (Fn(T.BOOL, [[T.LPCVOID]], [['dllimport'], ['stdcall']]))('UnmapViewOfFile');},
    UnregisterWait: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('UnregisterWait');},
    UnregisterWaitEx: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.HANDLE]], [['dllimport'], ['stdcall']]))('UnregisterWaitEx');},
    UpdateResourceA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCSTR], [T.LPCSTR], [T.WORD], [T.LPVOID], [T.DWORD]], [['dllimport'], ['stdcall']]))('UpdateResourceA');},
    UpdateResourceW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCWSTR], [T.LPCWSTR], [T.WORD], [T.LPVOID], [T.DWORD]], [['dllimport'], ['stdcall']]))('UpdateResourceW');},
    VerifyVersionInfoA: function() {return (Fn(T.BOOL, [[T.LPOSVERSIONINFOEXA], [T.DWORD], [T.DWORDLONG]], [['dllimport'], ['stdcall']]))('VerifyVersionInfoA');},
    VerifyVersionInfoW: function() {return (Fn(T.BOOL, [[T.LPOSVERSIONINFOEXW], [T.DWORD], [T.DWORDLONG]], [['dllimport'], ['stdcall']]))('VerifyVersionInfoW');},
    VirtualAlloc: function() {return (Fn(T.LPVOID, [[T.LPVOID], [T.SIZE_T], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('VirtualAlloc');},
    VirtualAllocEx: function() {return (Fn(T.LPVOID, [[T.HANDLE], [T.LPVOID], [T.SIZE_T], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('VirtualAllocEx');},
    VirtualFree: function() {return (Fn(T.BOOL, [[T.LPVOID], [T.SIZE_T], [T.DWORD]], [['dllimport'], ['stdcall']]))('VirtualFree');},
    VirtualFreeEx: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.SIZE_T], [T.DWORD]], [['dllimport'], ['stdcall']]))('VirtualFreeEx');},
    VirtualLock: function() {return (Fn(T.BOOL, [[T.LPVOID], [T.SIZE_T]], [['dllimport'], ['stdcall']]))('VirtualLock');},
    VirtualProtect: function() {return (Fn(T.BOOL, [[T.LPVOID], [T.SIZE_T], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('VirtualProtect');},
    VirtualProtectEx: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.SIZE_T], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('VirtualProtectEx');},
    VirtualQuery: function() {return (Fn(T.SIZE_T, [[T.LPCVOID], [T.PMEMORY_BASIC_INFORMATION], [T.SIZE_T]], [['dllimport'], ['stdcall']]))('VirtualQuery');},
    VirtualQueryEx: function() {return (Fn(T.SIZE_T, [[T.HANDLE], [T.LPCVOID], [T.PMEMORY_BASIC_INFORMATION], [T.SIZE_T]], [['dllimport'], ['stdcall']]))('VirtualQueryEx');},
    VirtualUnlock: function() {return (Fn(T.BOOL, [[T.LPVOID], [T.SIZE_T]], [['dllimport'], ['stdcall']]))('VirtualUnlock');},
    WTSGetActiveConsoleSessionId: function() {return (Fn(T.DWORD, [[null]], [['dllimport'], ['stdcall']]))('WTSGetActiveConsoleSessionId');},
    WaitCommEvent: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD], [T.LPOVERLAPPED]], [['dllimport'], ['stdcall']]))('WaitCommEvent');},
    WaitForDebugEvent: function() {return (Fn(T.BOOL, [[T.LPDEBUG_EVENT], [T.DWORD]], [['dllimport'], ['stdcall']]))('WaitForDebugEvent');},
    WaitForMultipleObjects: function() {return (Fn(T.DWORD, [[T.DWORD], [Pointer(T.HANDLE)], [T.BOOL], [T.DWORD]], [['dllimport'], ['stdcall']]))('WaitForMultipleObjects');},
    WaitForMultipleObjectsEx: function() {return (Fn(T.DWORD, [[T.DWORD], [Pointer(T.HANDLE)], [T.BOOL], [T.DWORD], [T.BOOL]], [['dllimport'], ['stdcall']]))('WaitForMultipleObjectsEx');},
    WaitForSingleObject: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.DWORD]], [['dllimport'], ['stdcall']]))('WaitForSingleObject');},
    WaitForSingleObjectEx: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.BOOL]], [['dllimport'], ['stdcall']]))('WaitForSingleObjectEx');},
    WaitNamedPipeA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('WaitNamedPipeA');},
    WaitNamedPipeW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('WaitNamedPipeW');},
    WinExec: function() {return (Fn(T.UINT, [[T.LPCSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('WinExec');},
    Wow64DisableWow64FsRedirection: function() {return (Fn(T.BOOL, [[Pointer(T.PVOID)]], [['dllimport'], ['stdcall']]))('Wow64DisableWow64FsRedirection');},
    Wow64EnableWow64FsRedirection: function() {return (Fn(T.BOOLEAN, [[T.BOOLEAN]], [['dllimport'], ['stdcall']]))('Wow64EnableWow64FsRedirection');},
    Wow64RevertWow64FsRedirection: function() {return (Fn(T.BOOL, [[T.PVOID]], [['dllimport'], ['stdcall']]))('Wow64RevertWow64FsRedirection');},
    WriteFile: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCVOID], [T.DWORD], [T.LPDWORD], [T.LPOVERLAPPED]], [['dllimport'], ['stdcall']]))('WriteFile');},
    WriteFileEx: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCVOID], [T.DWORD], [T.LPOVERLAPPED], [T.LPOVERLAPPED_COMPLETION_ROUTINE]], [['dllimport'], ['stdcall']]))('WriteFileEx');},
    WriteFileGather: function() {return (Fn(T.BOOL, [[T.HANDLE], [Pointer(T.FILE_SEGMENT_ELEMENT)], [T.DWORD], [T.LPDWORD], [T.LPOVERLAPPED]], [['dllimport'], ['stdcall']]))('WriteFileGather');},
    WritePrivateProfileSectionA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('WritePrivateProfileSectionA');},
    WritePrivateProfileSectionW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('WritePrivateProfileSectionW');},
    WritePrivateProfileStringA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('WritePrivateProfileStringA');},
    WritePrivateProfileStringW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('WritePrivateProfileStringW');},
    WritePrivateProfileStructA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPVOID], [T.UINT], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('WritePrivateProfileStructA');},
    WritePrivateProfileStructW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPVOID], [T.UINT], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('WritePrivateProfileStructW');},
    WriteProcessMemory: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.LPCVOID], [T.SIZE_T], [Pointer(T.SIZE_T)]], [['dllimport'], ['stdcall']]))('WriteProcessMemory');},
    WriteProfileSectionA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('WriteProfileSectionA');},
    WriteProfileSectionW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('WriteProfileSectionW');},
    WriteProfileStringA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('WriteProfileStringA');},
    WriteProfileStringW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('WriteProfileStringW');},
    WriteTapemark: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.BOOL]], [['dllimport'], ['stdcall']]))('WriteTapemark');},
    ZombifyActCtx: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('ZombifyActCtx');},
    lstrcmpA: function() {return (Fn(T.INT, [[T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('lstrcmpA');},
    lstrcmpW: function() {return (Fn(T.INT, [[T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('lstrcmpW');},
    lstrcmpiA: function() {return (Fn(T.INT, [[T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('lstrcmpiA');},
    lstrcmpiW: function() {return (Fn(T.INT, [[T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('lstrcmpiW');},
    lstrcatA: function() {return (Fn(T.LPSTR, [[T.LPSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('lstrcatA');},
    lstrcatW: function() {return (Fn(T.LPWSTR, [[T.LPWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('lstrcatW');},
    lstrcpyA: function() {return (Fn(T.LPSTR, [[T.LPSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('lstrcpyA');},
    lstrcpyW: function() {return (Fn(T.LPWSTR, [[T.LPWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('lstrcpyW');},
    lstrcpynA: function() {return (Fn(T.LPSTR, [[T.LPSTR], [T.LPCSTR], [T.INT]], [['dllimport'], ['stdcall']]))('lstrcpynA');},
    lstrcpynW: function() {return (Fn(T.LPWSTR, [[T.LPWSTR], [T.LPCWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('lstrcpynW');},
    lstrlenA: function() {return (Fn(T.INT, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('lstrlenA');},
    lstrlenW: function() {return (Fn(T.INT, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('lstrlenW');},
    _hread: function() {return (Fn(T.LONG, [[T.HFILE], [T.LPVOID], [T.LONG]], [['dllimport'], ['stdcall']]))('_hread');},
    _hwrite: function() {return (Fn(T.LONG, [[T.HFILE], [T.LPCSTR], [T.LONG]], [['dllimport'], ['stdcall']]))('_hwrite');},
    _lcreat: function() {return (Fn(T.HFILE, [[T.LPCSTR], [T.INT]], [['dllimport'], ['stdcall']]))('_lcreat');},
    _lclose: function() {return (Fn(T.HFILE, [[T.HFILE]], [['dllimport'], ['stdcall']]))('_lclose');},
    _llseek: function() {return (Fn(T.LONG, [[T.HFILE], [T.LONG], [T.INT]], [['dllimport'], ['stdcall']]))('_llseek');},
    _lopen: function() {return (Fn(T.HFILE, [[T.LPCSTR], [T.INT]], [['dllimport'], ['stdcall']]))('_lopen');},
    _lread: function() {return (Fn(T.UINT, [[T.HFILE], [T.LPVOID], [T.UINT]], [['dllimport'], ['stdcall']]))('_lread');},
    _lwrite: function() {return (Fn(T.UINT, [[T.HFILE], [T.LPCSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('_lwrite');},
    wine_get_unix_file_name: function() {return (Fn(Pointer(T.char), [[T.LPCWSTR, 'dos']], [['cdecl']]))('wine_get_unix_file_name');},
    wine_get_dos_file_name: function() {return (Fn(Pointer(T.WCHAR), [[T.LPCSTR, 'str']], [['cdecl']]))('wine_get_dos_file_name');},
    InterlockedCompareExchange64: function() {return (Fn(T.LONGLONG, [[Pointer(T.LONGLONG)], [T.LONGLONG], [T.LONGLONG]], [['dllimport'], ['stdcall']]))('InterlockedCompareExchange64');},
    GetCurrentProcessId: function() {return (Fn(T.DWORD, [[null]], [['dllimport'], ['stdcall']]))('GetCurrentProcessId');},
    GetCurrentThreadId: function() {return (Fn(T.DWORD, [[null]], [['dllimport'], ['stdcall']]))('GetCurrentThreadId');},
    GetLastError: function() {return (Fn(T.DWORD, [[null]], [['dllimport'], ['stdcall']]))('GetLastError');},
    GetProcessHeap: function() {return (Fn(T.HANDLE, [[null]], [['dllimport'], ['stdcall']]))('GetProcessHeap');},
    SetLastError: function() {return (Fn(null, [[T.DWORD]], [['dllimport'], ['stdcall']]))('SetLastError');},
    WinMain: function() {return (Fn(T.i32, [[T.HINSTANCE], [T.HINSTANCE], [T.LPSTR], [T.i32]], [['stdcall']]))('WinMain');},
    AbortDoc: function() {return (Fn(T.INT, [[T.HDC]], [['dllimport'], ['stdcall']]))('AbortDoc');},
    AbortPath: function() {return (Fn(T.BOOL, [[T.HDC]], [['dllimport'], ['stdcall']]))('AbortPath');},
    AddFontResourceA: function() {return (Fn(T.INT, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('AddFontResourceA');},
    AddFontResourceW: function() {return (Fn(T.INT, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('AddFontResourceW');},
    AddFontResourceExA: function() {return (Fn(T.INT, [[T.LPCSTR], [T.DWORD], [T.PVOID]], [['dllimport'], ['stdcall']]))('AddFontResourceExA');},
    AddFontResourceExW: function() {return (Fn(T.INT, [[T.LPCWSTR], [T.DWORD], [T.PVOID]], [['dllimport'], ['stdcall']]))('AddFontResourceExW');},
    AddFontMemResourceEx: function() {return (Fn(T.HANDLE, [[T.PVOID], [T.DWORD], [T.PVOID], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('AddFontMemResourceEx');},
    AlphaBlend: function() {return (Fn(T.BOOL, [[T.HDC], [T.i32], [T.i32], [T.i32], [T.i32], [T.HDC], [T.i32], [T.i32], [T.i32], [T.i32], [T.BLENDFUNCTION]], [['dllimport'], ['stdcall']]))('AlphaBlend');},
    AngleArc: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.DWORD], [T.FLOAT], [T.FLOAT]], [['dllimport'], ['stdcall']]))('AngleArc');},
    AnimatePalette: function() {return (Fn(T.BOOL, [[T.HPALETTE], [T.UINT], [T.UINT], [Pointer(T.PALETTEENTRY)]], [['dllimport'], ['stdcall']]))('AnimatePalette');},
    Arc: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('Arc');},
    ArcTo: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('ArcTo');},
    BeginPath: function() {return (Fn(T.BOOL, [[T.HDC]], [['dllimport'], ['stdcall']]))('BeginPath');},
    BitBlt: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.HDC], [T.INT], [T.INT], [T.DWORD]], [['dllimport'], ['stdcall']]))('BitBlt');},
    ChoosePixelFormat: function() {return (Fn(T.INT, [[T.HDC], [Pointer(T.PIXELFORMATDESCRIPTOR)]], [['dllimport'], ['stdcall']]))('ChoosePixelFormat');},
    Chord: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('Chord');},
    CloseEnhMetaFile: function() {return (Fn(T.HENHMETAFILE, [[T.HDC]], [['dllimport'], ['stdcall']]))('CloseEnhMetaFile');},
    CloseFigure: function() {return (Fn(T.BOOL, [[T.HDC]], [['dllimport'], ['stdcall']]))('CloseFigure');},
    CloseMetaFile: function() {return (Fn(T.HMETAFILE, [[T.HDC]], [['dllimport'], ['stdcall']]))('CloseMetaFile');},
    CombineRgn: function() {return (Fn(T.INT, [[T.HRGN], [T.HRGN], [T.HRGN], [T.INT]], [['dllimport'], ['stdcall']]))('CombineRgn');},
    CombineTransform: function() {return (Fn(T.BOOL, [[T.LPXFORM], [Pointer(T.XFORM)], [Pointer(T.XFORM)]], [['dllimport'], ['stdcall']]))('CombineTransform');},
    CopyEnhMetaFileA: function() {return (Fn(T.HENHMETAFILE, [[T.HENHMETAFILE], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('CopyEnhMetaFileA');},
    CopyEnhMetaFileW: function() {return (Fn(T.HENHMETAFILE, [[T.HENHMETAFILE], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('CopyEnhMetaFileW');},
    CopyMetaFileA: function() {return (Fn(T.HMETAFILE, [[T.HMETAFILE], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('CopyMetaFileA');},
    CopyMetaFileW: function() {return (Fn(T.HMETAFILE, [[T.HMETAFILE], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('CopyMetaFileW');},
    CreateBitmap: function() {return (Fn(T.HBITMAP, [[T.INT], [T.INT], [T.UINT], [T.UINT], [T.LPCVOID]], [['dllimport'], ['stdcall']]))('CreateBitmap');},
    CreateBitmapIndirect: function() {return (Fn(T.HBITMAP, [[Pointer(T.BITMAP)]], [['dllimport'], ['stdcall']]))('CreateBitmapIndirect');},
    CreateBrushIndirect: function() {return (Fn(T.HBRUSH, [[Pointer(T.LOGBRUSH)]], [['dllimport'], ['stdcall']]))('CreateBrushIndirect');},
    CreateColorSpaceA: function() {return (Fn(T.HCOLORSPACE, [[T.LPLOGCOLORSPACEA]], [['dllimport'], ['stdcall']]))('CreateColorSpaceA');},
    CreateColorSpaceW: function() {return (Fn(T.HCOLORSPACE, [[T.LPLOGCOLORSPACEW]], [['dllimport'], ['stdcall']]))('CreateColorSpaceW');},
    CreateCompatibleBitmap: function() {return (Fn(T.HBITMAP, [[T.HDC], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('CreateCompatibleBitmap');},
    CreateCompatibleDC: function() {return (Fn(T.HDC, [[T.HDC]], [['dllimport'], ['stdcall']]))('CreateCompatibleDC');},
    CreateDCA: function() {return (Fn(T.HDC, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [Pointer(T.DEVMODEA)]], [['dllimport'], ['stdcall']]))('CreateDCA');},
    CreateDCW: function() {return (Fn(T.HDC, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [Pointer(T.DEVMODEW)]], [['dllimport'], ['stdcall']]))('CreateDCW');},
    CreateDIBitmap: function() {return (Fn(T.HBITMAP, [[T.HDC], [Pointer(T.BITMAPINFOHEADER)], [T.DWORD], [T.LPCVOID], [Pointer(T.BITMAPINFO)], [T.UINT]], [['dllimport'], ['stdcall']]))('CreateDIBitmap');},
    CreateDIBPatternBrush: function() {return (Fn(T.HBRUSH, [[T.HGLOBAL], [T.UINT]], [['dllimport'], ['stdcall']]))('CreateDIBPatternBrush');},
    CreateDIBPatternBrushPt: function() {return (Fn(T.HBRUSH, [[Pointer(null)], [T.UINT]], [['dllimport'], ['stdcall']]))('CreateDIBPatternBrushPt');},
    CreateDIBSection: function() {return (Fn(T.HBITMAP, [[T.HDC], [Pointer(T.BITMAPINFO)], [T.UINT], [Pointer(Pointer(null))], [T.HANDLE], [T.DWORD, 'offset']], [['dllimport'], ['stdcall']]))('CreateDIBSection');},
    CreateDiscardableBitmap: function() {return (Fn(T.HBITMAP, [[T.HDC], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('CreateDiscardableBitmap');},
    CreateEllipticRgn: function() {return (Fn(T.HRGN, [[T.INT], [T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('CreateEllipticRgn');},
    CreateEllipticRgnIndirect: function() {return (Fn(T.HRGN, [[Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('CreateEllipticRgnIndirect');},
    CreateEnhMetaFileA: function() {return (Fn(T.HDC, [[T.HDC], [T.LPCSTR], [Pointer(T.RECT)], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('CreateEnhMetaFileA');},
    CreateEnhMetaFileW: function() {return (Fn(T.HDC, [[T.HDC], [T.LPCWSTR], [Pointer(T.RECT)], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('CreateEnhMetaFileW');},
    CreateFontA: function() {return (Fn(T.HFONT, [[T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('CreateFontA');},
    CreateFontW: function() {return (Fn(T.HFONT, [[T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('CreateFontW');},
    CreateFontIndirectA: function() {return (Fn(T.HFONT, [[Pointer(T.LOGFONTA)]], [['dllimport'], ['stdcall']]))('CreateFontIndirectA');},
    CreateFontIndirectW: function() {return (Fn(T.HFONT, [[Pointer(T.LOGFONTW)]], [['dllimport'], ['stdcall']]))('CreateFontIndirectW');},
    CreateFontIndirectExA: function() {return (Fn(T.HFONT, [[Pointer(T.ENUMLOGFONTEXDVA)]], [['dllimport'], ['stdcall']]))('CreateFontIndirectExA');},
    CreateFontIndirectExW: function() {return (Fn(T.HFONT, [[Pointer(T.ENUMLOGFONTEXDVW)]], [['dllimport'], ['stdcall']]))('CreateFontIndirectExW');},
    CreateHalftonePalette: function() {return (Fn(T.HPALETTE, [[T.HDC]], [['dllimport'], ['stdcall']]))('CreateHalftonePalette');},
    CreateHatchBrush: function() {return (Fn(T.HBRUSH, [[T.INT], [T.COLORREF]], [['dllimport'], ['stdcall']]))('CreateHatchBrush');},
    CreateICA: function() {return (Fn(T.HDC, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [Pointer(T.DEVMODEA)]], [['dllimport'], ['stdcall']]))('CreateICA');},
    CreateICW: function() {return (Fn(T.HDC, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [Pointer(T.DEVMODEW)]], [['dllimport'], ['stdcall']]))('CreateICW');},
    CreateMetaFileA: function() {return (Fn(T.HDC, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('CreateMetaFileA');},
    CreateMetaFileW: function() {return (Fn(T.HDC, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('CreateMetaFileW');},
    CreatePalette: function() {return (Fn(T.HPALETTE, [[Pointer(T.LOGPALETTE)]], [['dllimport'], ['stdcall']]))('CreatePalette');},
    CreatePatternBrush: function() {return (Fn(T.HBRUSH, [[T.HBITMAP]], [['dllimport'], ['stdcall']]))('CreatePatternBrush');},
    CreatePen: function() {return (Fn(T.HPEN, [[T.INT], [T.INT], [T.COLORREF]], [['dllimport'], ['stdcall']]))('CreatePen');},
    CreatePenIndirect: function() {return (Fn(T.HPEN, [[Pointer(T.LOGPEN)]], [['dllimport'], ['stdcall']]))('CreatePenIndirect');},
    CreatePolyPolygonRgn: function() {return (Fn(T.HRGN, [[Pointer(T.POINT)], [Pointer(T.INT)], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('CreatePolyPolygonRgn');},
    CreatePolygonRgn: function() {return (Fn(T.HRGN, [[Pointer(T.POINT)], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('CreatePolygonRgn');},
    CreateRectRgn: function() {return (Fn(T.HRGN, [[T.INT], [T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('CreateRectRgn');},
    CreateRectRgnIndirect: function() {return (Fn(T.HRGN, [[Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('CreateRectRgnIndirect');},
    CreateRoundRectRgn: function() {return (Fn(T.HRGN, [[T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('CreateRoundRectRgn');},
    CreateScalableFontResourceA: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('CreateScalableFontResourceA');},
    CreateScalableFontResourceW: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('CreateScalableFontResourceW');},
    CreateSolidBrush: function() {return (Fn(T.HBRUSH, [[T.COLORREF]], [['dllimport'], ['stdcall']]))('CreateSolidBrush');},
    DPtoLP: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPPOINT], [T.INT]], [['dllimport'], ['stdcall']]))('DPtoLP');},
    DeleteColorSpace: function() {return (Fn(T.BOOL, [[T.HCOLORSPACE]], [['dllimport'], ['stdcall']]))('DeleteColorSpace');},
    DeleteDC: function() {return (Fn(T.BOOL, [[T.HDC]], [['dllimport'], ['stdcall']]))('DeleteDC');},
    DeleteEnhMetaFile: function() {return (Fn(T.BOOL, [[T.HENHMETAFILE]], [['dllimport'], ['stdcall']]))('DeleteEnhMetaFile');},
    DeleteMetaFile: function() {return (Fn(T.BOOL, [[T.HMETAFILE]], [['dllimport'], ['stdcall']]))('DeleteMetaFile');},
    DeleteObject: function() {return (Fn(T.BOOL, [[T.HGDIOBJ]], [['dllimport'], ['stdcall']]))('DeleteObject');},
    DescribePixelFormat: function() {return (Fn(T.INT, [[T.HDC], [T.i32], [T.UINT], [T.LPPIXELFORMATDESCRIPTOR]], [['dllimport'], ['stdcall']]))('DescribePixelFormat');},
    DrawEscape: function() {return (Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('DrawEscape');},
    Ellipse: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('Ellipse');},
    EndDoc: function() {return (Fn(T.INT, [[T.HDC]], [['dllimport'], ['stdcall']]))('EndDoc');},
    EndPath: function() {return (Fn(T.BOOL, [[T.HDC]], [['dllimport'], ['stdcall']]))('EndPath');},
    EnumEnhMetaFile: function() {return (Fn(T.BOOL, [[T.HDC], [T.HENHMETAFILE], [T.ENHMFENUMPROC], [T.LPVOID], [Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('EnumEnhMetaFile');},
    EnumFontFamiliesA: function() {return (Fn(T.INT, [[T.HDC], [T.LPCSTR], [T.FONTENUMPROCA], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumFontFamiliesA');},
    EnumFontFamiliesW: function() {return (Fn(T.INT, [[T.HDC], [T.LPCWSTR], [T.FONTENUMPROCW], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumFontFamiliesW');},
    EnumFontFamiliesExA: function() {return (Fn(T.INT, [[T.HDC], [T.LPLOGFONTA], [T.FONTENUMPROCA], [T.LPARAM], [T.DWORD]], [['dllimport'], ['stdcall']]))('EnumFontFamiliesExA');},
    EnumFontFamiliesExW: function() {return (Fn(T.INT, [[T.HDC], [T.LPLOGFONTW], [T.FONTENUMPROCW], [T.LPARAM], [T.DWORD]], [['dllimport'], ['stdcall']]))('EnumFontFamiliesExW');},
    EnumFontsA: function() {return (Fn(T.INT, [[T.HDC], [T.LPCSTR], [T.FONTENUMPROCA], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumFontsA');},
    EnumFontsW: function() {return (Fn(T.INT, [[T.HDC], [T.LPCWSTR], [T.FONTENUMPROCW], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumFontsW');},
    EnumICMProfilesA: function() {return (Fn(T.INT, [[T.HDC], [T.ICMENUMPROCA], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumICMProfilesA');},
    EnumICMProfilesW: function() {return (Fn(T.INT, [[T.HDC], [T.ICMENUMPROCW], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumICMProfilesW');},
    EnumMetaFile: function() {return (Fn(T.BOOL, [[T.HDC], [T.HMETAFILE], [T.MFENUMPROC], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumMetaFile');},
    EnumObjects: function() {return (Fn(T.INT, [[T.HDC], [T.INT], [T.GOBJENUMPROC], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumObjects');},
    EqualRgn: function() {return (Fn(T.BOOL, [[T.HRGN], [T.HRGN]], [['dllimport'], ['stdcall']]))('EqualRgn');},
    Escape: function() {return (Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.LPCSTR], [T.LPVOID]], [['dllimport'], ['stdcall']]))('Escape');},
    ExcludeClipRect: function() {return (Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('ExcludeClipRect');},
    ExtCreatePen: function() {return (Fn(T.HPEN, [[T.DWORD], [T.DWORD], [Pointer(T.LOGBRUSH)], [T.DWORD], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('ExtCreatePen');},
    ExtCreateRegion: function() {return (Fn(T.HRGN, [[Pointer(T.XFORM)], [T.DWORD], [Pointer(T.RGNDATA)]], [['dllimport'], ['stdcall']]))('ExtCreateRegion');},
    ExtEscape: function() {return (Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.LPCSTR], [T.INT], [T.LPSTR]], [['dllimport'], ['stdcall']]))('ExtEscape');},
    ExtFloodFill: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.COLORREF], [T.UINT]], [['dllimport'], ['stdcall']]))('ExtFloodFill');},
    ExtSelectClipRgn: function() {return (Fn(T.INT, [[T.HDC], [T.HRGN], [T.INT]], [['dllimport'], ['stdcall']]))('ExtSelectClipRgn');},
    ExtTextOutA: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.UINT], [Pointer(T.RECT)], [T.LPCSTR], [T.UINT], [Pointer(T.INT)]], [['dllimport'], ['stdcall']]))('ExtTextOutA');},
    ExtTextOutW: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.UINT], [Pointer(T.RECT)], [T.LPCWSTR], [T.UINT], [Pointer(T.INT)]], [['dllimport'], ['stdcall']]))('ExtTextOutW');},
    FillPath: function() {return (Fn(T.BOOL, [[T.HDC]], [['dllimport'], ['stdcall']]))('FillPath');},
    FillRgn: function() {return (Fn(T.BOOL, [[T.HDC], [T.HRGN], [T.HBRUSH]], [['dllimport'], ['stdcall']]))('FillRgn');},
    FixBrushOrgEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPPOINT]], [['dllimport'], ['stdcall']]))('FixBrushOrgEx');},
    FlattenPath: function() {return (Fn(T.BOOL, [[T.HDC]], [['dllimport'], ['stdcall']]))('FlattenPath');},
    FloodFill: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.COLORREF]], [['dllimport'], ['stdcall']]))('FloodFill');},
    FrameRgn: function() {return (Fn(T.BOOL, [[T.HDC], [T.HRGN], [T.HBRUSH], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('FrameRgn');},
    GdiAlphaBlend: function() {return (Fn(T.BOOL, [[T.HDC], [T.i32], [T.i32], [T.i32], [T.i32], [T.HDC], [T.i32], [T.i32], [T.i32], [T.i32], [T.BLENDFUNCTION]], [['dllimport'], ['stdcall']]))('GdiAlphaBlend');},
    GdiComment: function() {return (Fn(T.BOOL, [[T.HDC], [T.UINT], [Pointer(T.BYTE)]], [['dllimport'], ['stdcall']]))('GdiComment');},
    GdiConvertToDevmodeW: function() {return (Fn(Pointer(T.DEVMODEW), [[Pointer(T.DEVMODEA)]], [['dllimport'], ['stdcall']]))('GdiConvertToDevmodeW');},
    GdiFlush: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('GdiFlush');},
    GdiGetCharDimensions: function() {return (Fn(T.LONG, [[T.HDC], [T.LPTEXTMETRICW], [Pointer(T.LONG)]], [['dllimport'], ['stdcall']]))('GdiGetCharDimensions');},
    GdiGetCodePage: function() {return (Fn(T.DWORD, [[T.HDC]], [['dllimport'], ['stdcall']]))('GdiGetCodePage');},
    GdiGradientFill: function() {return (Fn(T.BOOL, [[T.HDC], [T.PTRIVERTEX], [T.ULONG], [T.PVOID], [T.ULONG], [T.ULONG]], [['dllimport'], ['stdcall']]))('GdiGradientFill');},
    GdiIsMetaFileDC: function() {return (Fn(T.BOOL, [[T.HDC]], [['dllimport'], ['stdcall']]))('GdiIsMetaFileDC');},
    GdiIsMetaPrintDC: function() {return (Fn(T.BOOL, [[T.HDC]], [['dllimport'], ['stdcall']]))('GdiIsMetaPrintDC');},
    GdiIsPlayMetafileDC: function() {return (Fn(T.BOOL, [[T.HDC]], [['dllimport'], ['stdcall']]))('GdiIsPlayMetafileDC');},
    GdiTransparentBlt: function() {return (Fn(T.BOOL, [[T.HDC], [T.i32], [T.i32], [T.i32], [T.i32], [T.HDC], [T.i32], [T.i32], [T.i32], [T.i32], [T.UINT]], [['dllimport'], ['stdcall']]))('GdiTransparentBlt');},
    GetArcDirection: function() {return (Fn(T.INT, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetArcDirection');},
    GetAspectRatioFilterEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('GetAspectRatioFilterEx');},
    GetBitmapBits: function() {return (Fn(T.LONG, [[T.HBITMAP], [T.LONG], [T.LPVOID]], [['dllimport'], ['stdcall']]))('GetBitmapBits');},
    GetBitmapDimensionEx: function() {return (Fn(T.BOOL, [[T.HBITMAP], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('GetBitmapDimensionEx');},
    GetBrushOrgEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPPOINT]], [['dllimport'], ['stdcall']]))('GetBrushOrgEx');},
    GetBkColor: function() {return (Fn(T.COLORREF, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetBkColor');},
    GetBkMode: function() {return (Fn(T.INT, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetBkMode');},
    GetBoundsRect: function() {return (Fn(T.UINT, [[T.HDC], [T.LPRECT], [T.UINT]], [['dllimport'], ['stdcall']]))('GetBoundsRect');},
    GetCharABCWidthsA: function() {return (Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPABC]], [['dllimport'], ['stdcall']]))('GetCharABCWidthsA');},
    GetCharABCWidthsW: function() {return (Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPABC]], [['dllimport'], ['stdcall']]))('GetCharABCWidthsW');},
    GetCharABCWidthsFloatA: function() {return (Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPABCFLOAT]], [['dllimport'], ['stdcall']]))('GetCharABCWidthsFloatA');},
    GetCharABCWidthsFloatW: function() {return (Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPABCFLOAT]], [['dllimport'], ['stdcall']]))('GetCharABCWidthsFloatW');},
    GetCharABCWidthsI: function() {return (Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPWORD], [T.LPABC]], [['dllimport'], ['stdcall']]))('GetCharABCWidthsI');},
    GetCharacterPlacementA: function() {return (Fn(T.DWORD, [[T.HDC], [T.LPCSTR], [T.INT], [T.INT], [Pointer(T.GCP_RESULTSA)], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetCharacterPlacementA');},
    GetCharacterPlacementW: function() {return (Fn(T.DWORD, [[T.HDC], [T.LPCWSTR], [T.INT], [T.INT], [Pointer(T.GCP_RESULTSW)], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetCharacterPlacementW');},
    GetCharWidth32A: function() {return (Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPINT]], [['dllimport'], ['stdcall']]))('GetCharWidth32A');},
    GetCharWidth32W: function() {return (Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPINT]], [['dllimport'], ['stdcall']]))('GetCharWidth32W');},
    GetCharWidthA: function() {return (Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPINT]], [['dllimport'], ['stdcall']]))('GetCharWidthA');},
    GetCharWidthI: function() {return (Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPWORD], [T.LPINT]], [['dllimport'], ['stdcall']]))('GetCharWidthI');},
    GetCharWidthW: function() {return (Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPINT]], [['dllimport'], ['stdcall']]))('GetCharWidthW');},
    GetCharWidthFloatA: function() {return (Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.PFLOAT]], [['dllimport'], ['stdcall']]))('GetCharWidthFloatA');},
    GetCharWidthFloatW: function() {return (Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.PFLOAT]], [['dllimport'], ['stdcall']]))('GetCharWidthFloatW');},
    GetClipBox: function() {return (Fn(T.INT, [[T.HDC], [T.LPRECT]], [['dllimport'], ['stdcall']]))('GetClipBox');},
    GetClipRgn: function() {return (Fn(T.INT, [[T.HDC], [T.HRGN]], [['dllimport'], ['stdcall']]))('GetClipRgn');},
    GetColorAdjustment: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPCOLORADJUSTMENT]], [['dllimport'], ['stdcall']]))('GetColorAdjustment');},
    GetColorSpace: function() {return (Fn(T.HCOLORSPACE, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetColorSpace');},
    GetCurrentObject: function() {return (Fn(T.HGDIOBJ, [[T.HDC], [T.UINT]], [['dllimport'], ['stdcall']]))('GetCurrentObject');},
    GetCurrentPositionEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPPOINT]], [['dllimport'], ['stdcall']]))('GetCurrentPositionEx');},
    GetDeviceCaps: function() {return (Fn(T.INT, [[T.HDC], [T.INT]], [['dllimport'], ['stdcall']]))('GetDeviceCaps');},
    GetDeviceGammaRamp: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPVOID]], [['dllimport'], ['stdcall']]))('GetDeviceGammaRamp');},
    GetDCBrushColor: function() {return (Fn(T.COLORREF, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetDCBrushColor');},
    GetDCOrgEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPPOINT]], [['dllimport'], ['stdcall']]))('GetDCOrgEx');},
    GetDCPenColor: function() {return (Fn(T.COLORREF, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetDCPenColor');},
    GetDIBColorTable: function() {return (Fn(T.UINT, [[T.HDC], [T.UINT], [T.UINT], [Pointer(T.RGBQUAD)]], [['dllimport'], ['stdcall']]))('GetDIBColorTable');},
    GetDIBits: function() {return (Fn(T.INT, [[T.HDC], [T.HBITMAP], [T.UINT], [T.UINT], [T.LPVOID], [T.LPBITMAPINFO], [T.UINT]], [['dllimport'], ['stdcall']]))('GetDIBits');},
    GetEnhMetaFileA: function() {return (Fn(T.HENHMETAFILE, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('GetEnhMetaFileA');},
    GetEnhMetaFileW: function() {return (Fn(T.HENHMETAFILE, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('GetEnhMetaFileW');},
    GetEnhMetaFileBits: function() {return (Fn(T.UINT, [[T.HENHMETAFILE], [T.UINT], [T.LPBYTE]], [['dllimport'], ['stdcall']]))('GetEnhMetaFileBits');},
    GetEnhMetaFileDescriptionA: function() {return (Fn(T.UINT, [[T.HENHMETAFILE], [T.UINT], [T.LPSTR]], [['dllimport'], ['stdcall']]))('GetEnhMetaFileDescriptionA');},
    GetEnhMetaFileDescriptionW: function() {return (Fn(T.UINT, [[T.HENHMETAFILE], [T.UINT], [T.LPWSTR]], [['dllimport'], ['stdcall']]))('GetEnhMetaFileDescriptionW');},
    GetEnhMetaFileHeader: function() {return (Fn(T.UINT, [[T.HENHMETAFILE], [T.UINT], [T.LPENHMETAHEADER]], [['dllimport'], ['stdcall']]))('GetEnhMetaFileHeader');},
    GetEnhMetaFilePaletteEntries: function() {return (Fn(T.UINT, [[T.HENHMETAFILE], [T.UINT], [T.LPPALETTEENTRY]], [['dllimport'], ['stdcall']]))('GetEnhMetaFilePaletteEntries');},
    GetFontData: function() {return (Fn(T.DWORD, [[T.HDC], [T.DWORD], [T.DWORD], [T.LPVOID], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetFontData');},
    GetFontLanguageInfo: function() {return (Fn(T.DWORD, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetFontLanguageInfo');},
    GetFontUnicodeRanges: function() {return (Fn(T.DWORD, [[T.HDC], [T.LPGLYPHSET]], [['dllimport'], ['stdcall']]))('GetFontUnicodeRanges');},
    GetGlyphIndicesA: function() {return (Fn(T.DWORD, [[T.HDC], [T.LPCSTR], [T.INT], [T.LPWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetGlyphIndicesA');},
    GetGlyphIndicesW: function() {return (Fn(T.DWORD, [[T.HDC], [T.LPCWSTR], [T.INT], [T.LPWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetGlyphIndicesW');},
    GetGlyphOutlineA: function() {return (Fn(T.DWORD, [[T.HDC], [T.UINT], [T.UINT], [T.LPGLYPHMETRICS], [T.DWORD], [T.LPVOID], [Pointer(T.MAT2)]], [['dllimport'], ['stdcall']]))('GetGlyphOutlineA');},
    GetGlyphOutlineW: function() {return (Fn(T.DWORD, [[T.HDC], [T.UINT], [T.UINT], [T.LPGLYPHMETRICS], [T.DWORD], [T.LPVOID], [Pointer(T.MAT2)]], [['dllimport'], ['stdcall']]))('GetGlyphOutlineW');},
    GetGraphicsMode: function() {return (Fn(T.INT, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetGraphicsMode');},
    GetICMProfileA: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPDWORD], [T.LPSTR]], [['dllimport'], ['stdcall']]))('GetICMProfileA');},
    GetICMProfileW: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPDWORD], [T.LPWSTR]], [['dllimport'], ['stdcall']]))('GetICMProfileW');},
    GetKerningPairsA: function() {return (Fn(T.DWORD, [[T.HDC], [T.DWORD], [T.LPKERNINGPAIR]], [['dllimport'], ['stdcall']]))('GetKerningPairsA');},
    GetKerningPairsW: function() {return (Fn(T.DWORD, [[T.HDC], [T.DWORD], [T.LPKERNINGPAIR]], [['dllimport'], ['stdcall']]))('GetKerningPairsW');},
    GetLayout: function() {return (Fn(T.DWORD, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetLayout');},
    GetLogColorSpaceA: function() {return (Fn(T.BOOL, [[T.HCOLORSPACE], [T.LPLOGCOLORSPACEA], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetLogColorSpaceA');},
    GetLogColorSpaceW: function() {return (Fn(T.BOOL, [[T.HCOLORSPACE], [T.LPLOGCOLORSPACEW], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetLogColorSpaceW');},
    GetMapMode: function() {return (Fn(T.INT, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetMapMode');},
    GetMetaFileA: function() {return (Fn(T.HMETAFILE, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('GetMetaFileA');},
    GetMetaFileW: function() {return (Fn(T.HMETAFILE, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('GetMetaFileW');},
    GetMetaFileBitsEx: function() {return (Fn(T.UINT, [[T.HMETAFILE], [T.UINT], [T.LPVOID]], [['dllimport'], ['stdcall']]))('GetMetaFileBitsEx');},
    GetMetaRgn: function() {return (Fn(T.INT, [[T.HDC], [T.HRGN]], [['dllimport'], ['stdcall']]))('GetMetaRgn');},
    GetMiterLimit: function() {return (Fn(T.BOOL, [[T.HDC], [T.PFLOAT]], [['dllimport'], ['stdcall']]))('GetMiterLimit');},
    GetNearestColor: function() {return (Fn(T.DWORD, [[T.HDC], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetNearestColor');},
    GetNearestPaletteIndex: function() {return (Fn(T.UINT, [[T.HPALETTE], [T.COLORREF]], [['dllimport'], ['stdcall']]))('GetNearestPaletteIndex');},
    GetObjectA: function() {return (Fn(T.INT, [[T.HGDIOBJ], [T.INT], [T.LPVOID]], [['dllimport'], ['stdcall']]))('GetObjectA');},
    GetObjectW: function() {return (Fn(T.INT, [[T.HGDIOBJ], [T.INT], [T.LPVOID]], [['dllimport'], ['stdcall']]))('GetObjectW');},
    GetObjectType: function() {return (Fn(T.DWORD, [[T.HGDIOBJ]], [['dllimport'], ['stdcall']]))('GetObjectType');},
    GetOutlineTextMetricsA: function() {return (Fn(T.UINT, [[T.HDC], [T.UINT], [T.LPOUTLINETEXTMETRICA]], [['dllimport'], ['stdcall']]))('GetOutlineTextMetricsA');},
    GetOutlineTextMetricsW: function() {return (Fn(T.UINT, [[T.HDC], [T.UINT], [T.LPOUTLINETEXTMETRICW]], [['dllimport'], ['stdcall']]))('GetOutlineTextMetricsW');},
    GetPaletteEntries: function() {return (Fn(T.UINT, [[T.HPALETTE], [T.UINT], [T.UINT], [T.LPPALETTEENTRY]], [['dllimport'], ['stdcall']]))('GetPaletteEntries');},
    GetPath: function() {return (Fn(T.INT, [[T.HDC], [T.LPPOINT], [T.LPBYTE], [T.INT]], [['dllimport'], ['stdcall']]))('GetPath');},
    GetPixel: function() {return (Fn(T.COLORREF, [[T.HDC], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('GetPixel');},
    GetPixelFormat: function() {return (Fn(T.INT, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetPixelFormat');},
    GetPolyFillMode: function() {return (Fn(T.INT, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetPolyFillMode');},
    GetRandomRgn: function() {return (Fn(T.INT, [[T.HDC], [T.HRGN], [T.INT]], [['dllimport'], ['stdcall']]))('GetRandomRgn');},
    GetRasterizerCaps: function() {return (Fn(T.BOOL, [[T.LPRASTERIZER_STATUS], [T.UINT]], [['dllimport'], ['stdcall']]))('GetRasterizerCaps');},
    GetRegionData: function() {return (Fn(T.DWORD, [[T.HRGN], [T.DWORD], [T.LPRGNDATA]], [['dllimport'], ['stdcall']]))('GetRegionData');},
    GetRelAbs: function() {return (Fn(T.INT, [[T.HDC], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetRelAbs');},
    GetRgnBox: function() {return (Fn(T.INT, [[T.HRGN], [T.LPRECT]], [['dllimport'], ['stdcall']]))('GetRgnBox');},
    GetROP2: function() {return (Fn(T.INT, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetROP2');},
    GetStockObject: function() {return (Fn(T.HGDIOBJ, [[T.INT]], [['dllimport'], ['stdcall']]))('GetStockObject');},
    GetStretchBltMode: function() {return (Fn(T.INT, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetStretchBltMode');},
    GetSystemPaletteEntries: function() {return (Fn(T.UINT, [[T.HDC], [T.UINT], [T.UINT], [T.LPPALETTEENTRY]], [['dllimport'], ['stdcall']]))('GetSystemPaletteEntries');},
    GetSystemPaletteUse: function() {return (Fn(T.UINT, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetSystemPaletteUse');},
    GetTextAlign: function() {return (Fn(T.UINT, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetTextAlign');},
    GetTextCharacterExtra: function() {return (Fn(T.INT, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetTextCharacterExtra');},
    GetTextCharset: function() {return (Fn(T.UINT, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetTextCharset');},
    GetTextCharsetInfo: function() {return (Fn(T.UINT, [[T.HDC], [T.LPFONTSIGNATURE], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetTextCharsetInfo');},
    GetTextColor: function() {return (Fn(T.COLORREF, [[T.HDC]], [['dllimport'], ['stdcall']]))('GetTextColor');},
    GetTextExtentExPointA: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPCSTR], [T.INT], [T.INT], [T.LPINT], [T.LPINT], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('GetTextExtentExPointA');},
    GetTextExtentExPointW: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPCWSTR], [T.INT], [T.INT], [T.LPINT], [T.LPINT], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('GetTextExtentExPointW');},
    GetTextExtentPointA: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPCSTR], [T.INT], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('GetTextExtentPointA');},
    GetTextExtentPointW: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPCWSTR], [T.INT], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('GetTextExtentPointW');},
    GetTextExtentPoint32A: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPCSTR], [T.INT], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('GetTextExtentPoint32A');},
    GetTextExtentPoint32W: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPCWSTR], [T.INT], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('GetTextExtentPoint32W');},
    GetTextExtentExPointI: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.WORD)], [T.INT], [T.INT], [T.LPINT], [T.LPINT], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('GetTextExtentExPointI');},
    GetTextExtentPointI: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.WORD)], [T.INT], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('GetTextExtentPointI');},
    GetTextFaceA: function() {return (Fn(T.INT, [[T.HDC], [T.INT], [T.LPSTR]], [['dllimport'], ['stdcall']]))('GetTextFaceA');},
    GetTextFaceW: function() {return (Fn(T.INT, [[T.HDC], [T.INT], [T.LPWSTR]], [['dllimport'], ['stdcall']]))('GetTextFaceW');},
    GetTextMetricsA: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPTEXTMETRICA]], [['dllimport'], ['stdcall']]))('GetTextMetricsA');},
    GetTextMetricsW: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPTEXTMETRICW]], [['dllimport'], ['stdcall']]))('GetTextMetricsW');},
    GetTransform: function() {return (Fn(T.BOOL, [[T.HDC], [T.DWORD], [Pointer(T.XFORM)]], [['dllimport'], ['stdcall']]))('GetTransform');},
    GetViewportExtEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('GetViewportExtEx');},
    GetViewportOrgEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPPOINT]], [['dllimport'], ['stdcall']]))('GetViewportOrgEx');},
    GetWindowExtEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('GetWindowExtEx');},
    GetWindowOrgEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPPOINT]], [['dllimport'], ['stdcall']]))('GetWindowOrgEx');},
    GetWinMetaFileBits: function() {return (Fn(T.UINT, [[T.HENHMETAFILE], [T.UINT], [T.LPBYTE], [T.INT], [T.HDC]], [['dllimport'], ['stdcall']]))('GetWinMetaFileBits');},
    GetWorldTransform: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPXFORM]], [['dllimport'], ['stdcall']]))('GetWorldTransform');},
    GradientFill: function() {return (Fn(T.BOOL, [[T.HDC], [T.PTRIVERTEX], [T.ULONG], [T.PVOID], [T.ULONG], [T.ULONG]], [['dllimport'], ['stdcall']]))('GradientFill');},
    IntersectClipRect: function() {return (Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('IntersectClipRect');},
    InvertRgn: function() {return (Fn(T.BOOL, [[T.HDC], [T.HRGN]], [['dllimport'], ['stdcall']]))('InvertRgn');},
    LineDDA: function() {return (Fn(T.BOOL, [[T.INT], [T.INT], [T.INT], [T.INT], [T.LINEDDAPROC], [T.LPARAM]], [['dllimport'], ['stdcall']]))('LineDDA');},
    LineTo: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('LineTo');},
    LPtoDP: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPPOINT], [T.INT]], [['dllimport'], ['stdcall']]))('LPtoDP');},
    MaskBlt: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.HDC], [T.INT], [T.INT], [T.HBITMAP], [T.INT], [T.INT], [T.DWORD]], [['dllimport'], ['stdcall']]))('MaskBlt');},
    MirrorRgn: function() {return (Fn(T.BOOL, [[T.HWND], [T.HRGN]], [['dllimport'], ['stdcall']]))('MirrorRgn');},
    ModifyWorldTransform: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.XFORM)], [T.DWORD]], [['dllimport'], ['stdcall']]))('ModifyWorldTransform');},
    MoveToEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPPOINT]], [['dllimport'], ['stdcall']]))('MoveToEx');},
    OffsetClipRgn: function() {return (Fn(T.INT, [[T.HDC], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('OffsetClipRgn');},
    OffsetRgn: function() {return (Fn(T.INT, [[T.HRGN], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('OffsetRgn');},
    OffsetViewportOrgEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPPOINT]], [['dllimport'], ['stdcall']]))('OffsetViewportOrgEx');},
    OffsetWindowOrgEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPPOINT]], [['dllimport'], ['stdcall']]))('OffsetWindowOrgEx');},
    PaintRgn: function() {return (Fn(T.BOOL, [[T.HDC], [T.HRGN]], [['dllimport'], ['stdcall']]))('PaintRgn');},
    PatBlt: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.DWORD]], [['dllimport'], ['stdcall']]))('PatBlt');},
    PathToRegion: function() {return (Fn(T.HRGN, [[T.HDC]], [['dllimport'], ['stdcall']]))('PathToRegion');},
    Pie: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('Pie');},
    PlayEnhMetaFile: function() {return (Fn(T.BOOL, [[T.HDC], [T.HENHMETAFILE], [Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('PlayEnhMetaFile');},
    PlayEnhMetaFileRecord: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPHANDLETABLE], [Pointer(T.ENHMETARECORD)], [T.UINT]], [['dllimport'], ['stdcall']]))('PlayEnhMetaFileRecord');},
    PlayMetaFile: function() {return (Fn(T.BOOL, [[T.HDC], [T.HMETAFILE]], [['dllimport'], ['stdcall']]))('PlayMetaFile');},
    PlayMetaFileRecord: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPHANDLETABLE], [T.LPMETARECORD], [T.UINT]], [['dllimport'], ['stdcall']]))('PlayMetaFileRecord');},
    PlgBlt: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.HBITMAP], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('PlgBlt');},
    PolyBezier: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [T.DWORD]], [['dllimport'], ['stdcall']]))('PolyBezier');},
    PolyBezierTo: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [T.DWORD]], [['dllimport'], ['stdcall']]))('PolyBezierTo');},
    PolyDraw: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [Pointer(T.BYTE)], [T.DWORD]], [['dllimport'], ['stdcall']]))('PolyDraw');},
    PolyPolygon: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [Pointer(T.INT)], [T.UINT]], [['dllimport'], ['stdcall']]))('PolyPolygon');},
    PolyPolyline: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [Pointer(T.DWORD)], [T.DWORD]], [['dllimport'], ['stdcall']]))('PolyPolyline');},
    Polygon: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [T.INT]], [['dllimport'], ['stdcall']]))('Polygon');},
    Polyline: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [T.INT]], [['dllimport'], ['stdcall']]))('Polyline');},
    PolylineTo: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [T.DWORD]], [['dllimport'], ['stdcall']]))('PolylineTo');},
    PtInRegion: function() {return (Fn(T.BOOL, [[T.HRGN], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('PtInRegion');},
    PtVisible: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('PtVisible');},
    RealizePalette: function() {return (Fn(T.UINT, [[T.HDC]], [['dllimport'], ['stdcall']]))('RealizePalette');},
    Rectangle: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('Rectangle');},
    RectInRegion: function() {return (Fn(T.BOOL, [[T.HRGN], [Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('RectInRegion');},
    RectVisible: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('RectVisible');},
    RemoveFontMemResourceEx: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('RemoveFontMemResourceEx');},
    RemoveFontResourceA: function() {return (Fn(T.BOOL, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('RemoveFontResourceA');},
    RemoveFontResourceW: function() {return (Fn(T.BOOL, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('RemoveFontResourceW');},
    RemoveFontResourceExA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.DWORD], [T.PVOID]], [['dllimport'], ['stdcall']]))('RemoveFontResourceExA');},
    RemoveFontResourceExW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD], [T.PVOID]], [['dllimport'], ['stdcall']]))('RemoveFontResourceExW');},
    ResetDCA: function() {return (Fn(T.HDC, [[T.HDC], [Pointer(T.DEVMODEA)]], [['dllimport'], ['stdcall']]))('ResetDCA');},
    ResetDCW: function() {return (Fn(T.HDC, [[T.HDC], [Pointer(T.DEVMODEW)]], [['dllimport'], ['stdcall']]))('ResetDCW');},
    ResizePalette: function() {return (Fn(T.BOOL, [[T.HPALETTE], [T.UINT]], [['dllimport'], ['stdcall']]))('ResizePalette');},
    RestoreDC: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT]], [['dllimport'], ['stdcall']]))('RestoreDC');},
    RoundRect: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('RoundRect');},
    SaveDC: function() {return (Fn(T.INT, [[T.HDC]], [['dllimport'], ['stdcall']]))('SaveDC');},
    ScaleViewportExtEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('ScaleViewportExtEx');},
    ScaleWindowExtEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('ScaleWindowExtEx');},
    SelectClipPath: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT]], [['dllimport'], ['stdcall']]))('SelectClipPath');},
    SelectClipRgn: function() {return (Fn(T.INT, [[T.HDC], [T.HRGN]], [['dllimport'], ['stdcall']]))('SelectClipRgn');},
    SelectObject: function() {return (Fn(T.HGDIOBJ, [[T.HDC], [T.HGDIOBJ]], [['dllimport'], ['stdcall']]))('SelectObject');},
    SelectPalette: function() {return (Fn(T.HPALETTE, [[T.HDC], [T.HPALETTE], [T.BOOL]], [['dllimport'], ['stdcall']]))('SelectPalette');},
    SetAbortProc: function() {return (Fn(T.INT, [[T.HDC], [T.ABORTPROC]], [['dllimport'], ['stdcall']]))('SetAbortProc');},
    SetArcDirection: function() {return (Fn(T.INT, [[T.HDC], [T.INT]], [['dllimport'], ['stdcall']]))('SetArcDirection');},
    SetBitmapBits: function() {return (Fn(T.LONG, [[T.HBITMAP], [T.LONG], [T.LPCVOID]], [['dllimport'], ['stdcall']]))('SetBitmapBits');},
    SetBitmapDimensionEx: function() {return (Fn(T.BOOL, [[T.HBITMAP], [T.INT], [T.INT], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('SetBitmapDimensionEx');},
    SetBkColor: function() {return (Fn(T.COLORREF, [[T.HDC], [T.COLORREF]], [['dllimport'], ['stdcall']]))('SetBkColor');},
    SetBkMode: function() {return (Fn(T.INT, [[T.HDC], [T.INT]], [['dllimport'], ['stdcall']]))('SetBkMode');},
    SetBoundsRect: function() {return (Fn(T.UINT, [[T.HDC], [Pointer(T.RECT)], [T.UINT]], [['dllimport'], ['stdcall']]))('SetBoundsRect');},
    SetBrushOrgEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPPOINT]], [['dllimport'], ['stdcall']]))('SetBrushOrgEx');},
    SetColorAdjustment: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.COLORADJUSTMENT)]], [['dllimport'], ['stdcall']]))('SetColorAdjustment');},
    SetColorSpace: function() {return (Fn(T.HCOLORSPACE, [[T.HDC], [T.HCOLORSPACE]], [['dllimport'], ['stdcall']]))('SetColorSpace');},
    SetDeviceGammaRamp: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPVOID]], [['dllimport'], ['stdcall']]))('SetDeviceGammaRamp');},
    SetDCBrushColor: function() {return (Fn(T.COLORREF, [[T.HDC], [T.COLORREF]], [['dllimport'], ['stdcall']]))('SetDCBrushColor');},
    SetDCPenColor: function() {return (Fn(T.COLORREF, [[T.HDC], [T.COLORREF]], [['dllimport'], ['stdcall']]))('SetDCPenColor');},
    SetDIBColorTable: function() {return (Fn(T.UINT, [[T.HDC], [T.UINT], [T.UINT], [Pointer(T.RGBQUAD)]], [['dllimport'], ['stdcall']]))('SetDIBColorTable');},
    SetDIBits: function() {return (Fn(T.INT, [[T.HDC], [T.HBITMAP], [T.UINT], [T.UINT], [T.LPCVOID], [Pointer(T.BITMAPINFO)], [T.UINT]], [['dllimport'], ['stdcall']]))('SetDIBits');},
    SetDIBitsToDevice: function() {return (Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.DWORD], [T.DWORD], [T.INT], [T.INT], [T.UINT], [T.UINT], [T.LPCVOID], [Pointer(T.BITMAPINFO)], [T.UINT]], [['dllimport'], ['stdcall']]))('SetDIBitsToDevice');},
    SetEnhMetaFileBits: function() {return (Fn(T.HENHMETAFILE, [[T.UINT], [Pointer(T.BYTE)]], [['dllimport'], ['stdcall']]))('SetEnhMetaFileBits');},
    SetGraphicsMode: function() {return (Fn(T.INT, [[T.HDC], [T.INT]], [['dllimport'], ['stdcall']]))('SetGraphicsMode');},
    SetICMMode: function() {return (Fn(T.INT, [[T.HDC], [T.INT]], [['dllimport'], ['stdcall']]))('SetICMMode');},
    SetICMProfileA: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPSTR]], [['dllimport'], ['stdcall']]))('SetICMProfileA');},
    SetICMProfileW: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPWSTR]], [['dllimport'], ['stdcall']]))('SetICMProfileW');},
    SetLayout: function() {return (Fn(T.DWORD, [[T.HDC], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetLayout');},
    SetMapMode: function() {return (Fn(T.INT, [[T.HDC], [T.INT]], [['dllimport'], ['stdcall']]))('SetMapMode');},
    SetMapperFlags: function() {return (Fn(T.DWORD, [[T.HDC], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetMapperFlags');},
    SetMetaFileBitsEx: function() {return (Fn(T.HMETAFILE, [[T.UINT], [Pointer(T.BYTE)]], [['dllimport'], ['stdcall']]))('SetMetaFileBitsEx');},
    SetMetaRgn: function() {return (Fn(T.INT, [[T.HDC]], [['dllimport'], ['stdcall']]))('SetMetaRgn');},
    SetMiterLimit: function() {return (Fn(T.BOOL, [[T.HDC], [T.FLOAT], [T.PFLOAT]], [['dllimport'], ['stdcall']]))('SetMiterLimit');},
    SetPaletteEntries: function() {return (Fn(T.UINT, [[T.HPALETTE], [T.UINT], [T.UINT], [Pointer(T.PALETTEENTRY)]], [['dllimport'], ['stdcall']]))('SetPaletteEntries');},
    SetPixel: function() {return (Fn(T.COLORREF, [[T.HDC], [T.INT], [T.INT], [T.COLORREF]], [['dllimport'], ['stdcall']]))('SetPixel');},
    SetPixelV: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.COLORREF]], [['dllimport'], ['stdcall']]))('SetPixelV');},
    SetPixelFormat: function() {return (Fn(T.BOOL, [[T.HDC], [T.i32], [Pointer(T.PIXELFORMATDESCRIPTOR)]], [['dllimport'], ['stdcall']]))('SetPixelFormat');},
    SetPolyFillMode: function() {return (Fn(T.INT, [[T.HDC], [T.INT]], [['dllimport'], ['stdcall']]))('SetPolyFillMode');},
    SetRectRgn: function() {return (Fn(T.BOOL, [[T.HRGN], [T.INT], [T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('SetRectRgn');},
    SetRelAbs: function() {return (Fn(T.INT, [[T.HDC], [T.INT]], [['dllimport'], ['stdcall']]))('SetRelAbs');},
    SetROP2: function() {return (Fn(T.INT, [[T.HDC], [T.INT]], [['dllimport'], ['stdcall']]))('SetROP2');},
    SetStretchBltMode: function() {return (Fn(T.INT, [[T.HDC], [T.INT]], [['dllimport'], ['stdcall']]))('SetStretchBltMode');},
    SetSystemPaletteUse: function() {return (Fn(T.UINT, [[T.HDC], [T.UINT]], [['dllimport'], ['stdcall']]))('SetSystemPaletteUse');},
    SetTextAlign: function() {return (Fn(T.UINT, [[T.HDC], [T.UINT]], [['dllimport'], ['stdcall']]))('SetTextAlign');},
    SetTextCharacterExtra: function() {return (Fn(T.INT, [[T.HDC], [T.INT]], [['dllimport'], ['stdcall']]))('SetTextCharacterExtra');},
    SetTextColor: function() {return (Fn(T.COLORREF, [[T.HDC], [T.COLORREF]], [['dllimport'], ['stdcall']]))('SetTextColor');},
    SetTextJustification: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('SetTextJustification');},
    SetViewportExtEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('SetViewportExtEx');},
    SetViewportOrgEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPPOINT]], [['dllimport'], ['stdcall']]))('SetViewportOrgEx');},
    SetWindowExtEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPSIZE]], [['dllimport'], ['stdcall']]))('SetWindowExtEx');},
    SetWindowOrgEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPPOINT]], [['dllimport'], ['stdcall']]))('SetWindowOrgEx');},
    SetWinMetaFileBits: function() {return (Fn(T.HENHMETAFILE, [[T.UINT], [Pointer(T.BYTE)], [T.HDC], [Pointer(T.METAFILEPICT)]], [['dllimport'], ['stdcall']]))('SetWinMetaFileBits');},
    SetWorldTransform: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.XFORM)]], [['dllimport'], ['stdcall']]))('SetWorldTransform');},
    StartDocA: function() {return (Fn(T.INT, [[T.HDC], [Pointer(T.DOCINFOA)]], [['dllimport'], ['stdcall']]))('StartDocA');},
    StartDocW: function() {return (Fn(T.INT, [[T.HDC], [Pointer(T.DOCINFOW)]], [['dllimport'], ['stdcall']]))('StartDocW');},
    StartPage: function() {return (Fn(T.INT, [[T.HDC]], [['dllimport'], ['stdcall']]))('StartPage');},
    EndPage: function() {return (Fn(T.INT, [[T.HDC]], [['dllimport'], ['stdcall']]))('EndPage');},
    StretchBlt: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.DWORD]], [['dllimport'], ['stdcall']]))('StretchBlt');},
    StretchDIBits: function() {return (Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [Pointer(null)], [Pointer(T.BITMAPINFO)], [T.UINT], [T.DWORD]], [['dllimport'], ['stdcall']]))('StretchDIBits');},
    StrokeAndFillPath: function() {return (Fn(T.BOOL, [[T.HDC]], [['dllimport'], ['stdcall']]))('StrokeAndFillPath');},
    StrokePath: function() {return (Fn(T.BOOL, [[T.HDC]], [['dllimport'], ['stdcall']]))('StrokePath');},
    SwapBuffers: function() {return (Fn(T.BOOL, [[T.HDC]], [['dllimport'], ['stdcall']]))('SwapBuffers');},
    TextOutA: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPCSTR], [T.INT]], [['dllimport'], ['stdcall']]))('TextOutA');},
    TextOutW: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPCWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('TextOutW');},
    TranslateCharsetInfo: function() {return (Fn(T.BOOL, [[T.LPDWORD], [T.LPCHARSETINFO], [T.DWORD]], [['dllimport'], ['stdcall']]))('TranslateCharsetInfo');},
    TransparentBlt: function() {return (Fn(T.BOOL, [[T.HDC], [T.i32], [T.i32], [T.i32], [T.i32], [T.HDC], [T.i32], [T.i32], [T.i32], [T.i32], [T.UINT]], [['dllimport'], ['stdcall']]))('TransparentBlt');},
    UnrealizeObject: function() {return (Fn(T.BOOL, [[T.HGDIOBJ]], [['dllimport'], ['stdcall']]))('UnrealizeObject');},
    UpdateColors: function() {return (Fn(T.BOOL, [[T.HDC]], [['dllimport'], ['stdcall']]))('UpdateColors');},
    UpdateICMRegKeyA: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPSTR], [T.LPSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('UpdateICMRegKeyA');},
    UpdateICMRegKeyW: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPWSTR], [T.LPWSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('UpdateICMRegKeyW');},
    WidenPath: function() {return (Fn(T.BOOL, [[T.HDC]], [['dllimport'], ['stdcall']]))('WidenPath');},
    PolyTextOutA: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.POLYTEXTA)], [T.INT]], [['dllimport'], ['stdcall']]))('PolyTextOutA');},
    PolyTextOutW: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.POLYTEXTW)], [T.INT]], [['dllimport'], ['stdcall']]))('PolyTextOutW');},
    wglCreateContext: function() {return (Fn(T.HGLRC, [[T.HDC]], [['dllimport'], ['stdcall']]))('wglCreateContext');},
    wglCreateLayerContext: function() {return (Fn(T.HGLRC, [[T.HDC], [T.INT]], [['dllimport'], ['stdcall']]))('wglCreateLayerContext');},
    wglCopyContext: function() {return (Fn(T.BOOL, [[T.HGLRC], [T.HGLRC], [T.UINT]], [['dllimport'], ['stdcall']]))('wglCopyContext');},
    wglDeleteContext: function() {return (Fn(T.BOOL, [[T.HGLRC]], [['dllimport'], ['stdcall']]))('wglDeleteContext');},
    wglDescribeLayerPlane: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.UINT], [T.LPLAYERPLANEDESCRIPTOR]], [['dllimport'], ['stdcall']]))('wglDescribeLayerPlane');},
    wglGetCurrentContext: function() {return (Fn(T.HGLRC, [[null]], [['dllimport'], ['stdcall']]))('wglGetCurrentContext');},
    wglGetCurrentDC: function() {return (Fn(T.HDC, [[null]], [['dllimport'], ['stdcall']]))('wglGetCurrentDC');},
    wglGetLayerPaletteEntries: function() {return (Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.INT], [Pointer(T.COLORREF)]], [['dllimport'], ['stdcall']]))('wglGetLayerPaletteEntries');},
    wglGetProcAddress: function() {return (Fn(T.PROC, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('wglGetProcAddress');},
    wglMakeCurrent: function() {return (Fn(T.BOOL, [[T.HDC], [T.HGLRC]], [['dllimport'], ['stdcall']]))('wglMakeCurrent');},
    wglRealizeLayerPalette: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.BOOL]], [['dllimport'], ['stdcall']]))('wglRealizeLayerPalette');},
    wglSetLayerPaletteEntries: function() {return (Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.INT], [Pointer(T.COLORREF)]], [['dllimport'], ['stdcall']]))('wglSetLayerPaletteEntries');},
    wglShareLists: function() {return (Fn(T.BOOL, [[T.HGLRC], [T.HGLRC]], [['dllimport'], ['stdcall']]))('wglShareLists');},
    wglSwapLayerBuffers: function() {return (Fn(T.BOOL, [[T.HDC], [T.UINT]], [['dllimport'], ['stdcall']]))('wglSwapLayerBuffers');},
    wglUseFontBitmapsA: function() {return (Fn(T.BOOL, [[T.HDC], [T.DWORD], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('wglUseFontBitmapsA');},
    wglUseFontBitmapsW: function() {return (Fn(T.BOOL, [[T.HDC], [T.DWORD], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('wglUseFontBitmapsW');},
    wglUseFontOutlinesA: function() {return (Fn(T.BOOL, [[T.HDC], [T.DWORD], [T.DWORD], [T.DWORD], [T.FLOAT], [T.FLOAT], [T.INT], [T.LPGLYPHMETRICSFLOAT]], [['dllimport'], ['stdcall']]))('wglUseFontOutlinesA');},
    wglUseFontOutlinesW: function() {return (Fn(T.BOOL, [[T.HDC], [T.DWORD], [T.DWORD], [T.DWORD], [T.FLOAT], [T.FLOAT], [T.INT], [T.LPGLYPHMETRICSFLOAT]], [['dllimport'], ['stdcall']]))('wglUseFontOutlinesW');},
    GetSysColor: function() {return (Fn(T.COLORREF, [[T.INT]], [['dllimport'], ['stdcall']]))('GetSysColor');},
    SetSysColors: function() {return (Fn(T.BOOL, [[T.INT], [Pointer(T.INT)], [Pointer(T.COLORREF)]], [['dllimport'], ['stdcall']]))('SetSysColors');},
    ChangeDisplaySettingsA: function() {return (Fn(T.LONG, [[T.LPDEVMODEA], [T.DWORD]], [['dllimport'], ['stdcall']]))('ChangeDisplaySettingsA');},
    ChangeDisplaySettingsW: function() {return (Fn(T.LONG, [[T.LPDEVMODEW], [T.DWORD]], [['dllimport'], ['stdcall']]))('ChangeDisplaySettingsW');},
    ChangeDisplaySettingsExA: function() {return (Fn(T.LONG, [[T.LPCSTR], [T.LPDEVMODEA], [T.HWND], [T.DWORD], [T.LPVOID]], [['dllimport'], ['stdcall']]))('ChangeDisplaySettingsExA');},
    ChangeDisplaySettingsExW: function() {return (Fn(T.LONG, [[T.LPCWSTR], [T.LPDEVMODEW], [T.HWND], [T.DWORD], [T.LPVOID]], [['dllimport'], ['stdcall']]))('ChangeDisplaySettingsExW');},
    CreateDesktopA: function() {return (Fn(T.HDESK, [[T.LPCSTR], [T.LPCSTR], [T.LPDEVMODEA], [T.DWORD], [T.ACCESS_MASK], [T.LPSECURITY_ATTRIBUTES]], [['dllimport'], ['stdcall']]))('CreateDesktopA');},
    CreateDesktopW: function() {return (Fn(T.HDESK, [[T.LPCWSTR], [T.LPCWSTR], [T.LPDEVMODEW], [T.DWORD], [T.ACCESS_MASK], [T.LPSECURITY_ATTRIBUTES]], [['dllimport'], ['stdcall']]))('CreateDesktopW');},
    EnumDisplayDevicesA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.DWORD], [T.LPDISPLAY_DEVICEA], [T.DWORD]], [['dllimport'], ['stdcall']]))('EnumDisplayDevicesA');},
    EnumDisplayDevicesW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD], [T.LPDISPLAY_DEVICEW], [T.DWORD]], [['dllimport'], ['stdcall']]))('EnumDisplayDevicesW');},
    EnumDisplaySettingsA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.DWORD], [T.LPDEVMODEA]], [['dllimport'], ['stdcall']]))('EnumDisplaySettingsA');},
    EnumDisplaySettingsW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD], [T.LPDEVMODEW]], [['dllimport'], ['stdcall']]))('EnumDisplaySettingsW');},
    EnumDisplaySettingsExA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.DWORD], [T.LPDEVMODEA], [T.DWORD]], [['dllimport'], ['stdcall']]))('EnumDisplaySettingsExA');},
    EnumDisplaySettingsExW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD], [T.LPDEVMODEW], [T.DWORD]], [['dllimport'], ['stdcall']]))('EnumDisplaySettingsExW');},
    UpdateLayeredWindow: function() {return (Fn(T.BOOL, [[T.HWND], [T.HDC], [Pointer(T.POINT)], [Pointer(T.SIZE)], [T.HDC], [Pointer(T.POINT)], [T.COLORREF], [Pointer(T.BLENDFUNCTION)], [T.DWORD]], [['dllimport'], ['stdcall']]))('UpdateLayeredWindow');},
    UpdateLayeredWindowIndirect: function() {return (Fn(T.BOOL, [[T.HWND], [Pointer(T.UPDATELAYEREDWINDOWINFO)]], [['dllimport'], ['stdcall']]))('UpdateLayeredWindowIndirect');},
    ActivateKeyboardLayout: function() {return (Fn(T.HKL, [[T.HKL], [T.UINT]], [['dllimport'], ['stdcall']]))('ActivateKeyboardLayout');},
    AdjustWindowRect: function() {return (Fn(T.BOOL, [[T.LPRECT], [T.DWORD], [T.BOOL]], [['dllimport'], ['stdcall']]))('AdjustWindowRect');},
    AdjustWindowRectEx: function() {return (Fn(T.BOOL, [[T.LPRECT], [T.DWORD], [T.BOOL], [T.DWORD]], [['dllimport'], ['stdcall']]))('AdjustWindowRectEx');},
    AllowSetForegroundWindow: function() {return (Fn(T.BOOL, [[T.DWORD]], [['dllimport'], ['stdcall']]))('AllowSetForegroundWindow');},
    AnimateWindow: function() {return (Fn(T.BOOL, [[T.HWND], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('AnimateWindow');},
    AnyPopup: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('AnyPopup');},
    AppendMenuA: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT_PTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('AppendMenuA');},
    AppendMenuW: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT_PTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('AppendMenuW');},
    ArrangeIconicWindows: function() {return (Fn(T.UINT, [[T.HWND]], [['dllimport'], ['stdcall']]))('ArrangeIconicWindows');},
    AttachThreadInput: function() {return (Fn(T.BOOL, [[T.DWORD], [T.DWORD], [T.BOOL]], [['dllimport'], ['stdcall']]))('AttachThreadInput');},
    BeginDeferWindowPos: function() {return (Fn(T.HDWP, [[T.INT]], [['dllimport'], ['stdcall']]))('BeginDeferWindowPos');},
    BeginPaint: function() {return (Fn(T.HDC, [[T.HWND], [T.LPPAINTSTRUCT]], [['dllimport'], ['stdcall']]))('BeginPaint');},
    BringWindowToTop: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('BringWindowToTop');},
    BroadcastSystemMessageA: function() {return (Fn(T.LONG, [[T.DWORD], [T.LPDWORD], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('BroadcastSystemMessageA');},
    BroadcastSystemMessageW: function() {return (Fn(T.LONG, [[T.DWORD], [T.LPDWORD], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('BroadcastSystemMessageW');},
    BroadcastSystemMessageExA: function() {return (Fn(T.LONG, [[T.DWORD], [T.LPDWORD], [T.UINT], [T.WPARAM], [T.LPARAM], [T.PBSMINFO]], [['dllimport'], ['stdcall']]))('BroadcastSystemMessageExA');},
    BroadcastSystemMessageExW: function() {return (Fn(T.LONG, [[T.DWORD], [T.LPDWORD], [T.UINT], [T.WPARAM], [T.LPARAM], [T.PBSMINFO]], [['dllimport'], ['stdcall']]))('BroadcastSystemMessageExW');},
    CalcChildScroll: function() {return (Fn(null, [[T.HWND], [T.INT]], [['dllimport'], ['stdcall']]))('CalcChildScroll');},
    CallMsgFilterA: function() {return (Fn(T.BOOL, [[T.LPMSG], [T.INT]], [['dllimport'], ['stdcall']]))('CallMsgFilterA');},
    CallMsgFilterW: function() {return (Fn(T.BOOL, [[T.LPMSG], [T.INT]], [['dllimport'], ['stdcall']]))('CallMsgFilterW');},
    CallNextHookEx: function() {return (Fn(T.LRESULT, [[T.HHOOK], [T.INT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('CallNextHookEx');},
    CallWindowProcA: function() {return (Fn(T.LRESULT, [[T.WNDPROC], [T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('CallWindowProcA');},
    CallWindowProcW: function() {return (Fn(T.LRESULT, [[T.WNDPROC], [T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('CallWindowProcW');},
    CascadeWindows: function() {return (Fn(T.WORD, [[T.HWND], [T.UINT], [Pointer(T.RECT)], [T.UINT], [Pointer(T.HWND)]], [['dllimport'], ['stdcall']]))('CascadeWindows');},
    ChangeClipboardChain: function() {return (Fn(T.BOOL, [[T.HWND], [T.HWND]], [['dllimport'], ['stdcall']]))('ChangeClipboardChain');},
    ChangeMenuA: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.LPCSTR], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('ChangeMenuA');},
    ChangeMenuW: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.LPCWSTR], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('ChangeMenuW');},
    CharLowerA: function() {return (Fn(T.LPSTR, [[T.LPSTR]], [['dllimport'], ['stdcall']]))('CharLowerA');},
    CharLowerW: function() {return (Fn(T.LPWSTR, [[T.LPWSTR]], [['dllimport'], ['stdcall']]))('CharLowerW');},
    CharLowerBuffA: function() {return (Fn(T.DWORD, [[T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('CharLowerBuffA');},
    CharLowerBuffW: function() {return (Fn(T.DWORD, [[T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('CharLowerBuffW');},
    CharNextA: function() {return (Fn(T.LPSTR, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('CharNextA');},
    CharNextW: function() {return (Fn(T.LPWSTR, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('CharNextW');},
    CharNextExA: function() {return (Fn(T.LPSTR, [[T.WORD], [T.LPCSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('CharNextExA');},
    CharPrevA: function() {return (Fn(T.LPSTR, [[T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('CharPrevA');},
    CharPrevW: function() {return (Fn(T.LPWSTR, [[T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('CharPrevW');},
    CharPrevExA: function() {return (Fn(T.LPSTR, [[T.WORD], [T.LPCSTR], [T.LPCSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('CharPrevExA');},
    CharUpperA: function() {return (Fn(T.LPSTR, [[T.LPSTR]], [['dllimport'], ['stdcall']]))('CharUpperA');},
    CharUpperW: function() {return (Fn(T.LPWSTR, [[T.LPWSTR]], [['dllimport'], ['stdcall']]))('CharUpperW');},
    CharUpperBuffA: function() {return (Fn(T.DWORD, [[T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('CharUpperBuffA');},
    CharUpperBuffW: function() {return (Fn(T.DWORD, [[T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('CharUpperBuffW');},
    CharToOemA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR]], [['dllimport'], ['stdcall']]))('CharToOemA');},
    CharToOemW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPSTR]], [['dllimport'], ['stdcall']]))('CharToOemW');},
    CharToOemBuffA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('CharToOemBuffA');},
    CharToOemBuffW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('CharToOemBuffW');},
    CheckDlgButton: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('CheckDlgButton');},
    CheckMenuItem: function() {return (Fn(T.DWORD, [[T.HMENU], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('CheckMenuItem');},
    CheckMenuRadioItem: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('CheckMenuRadioItem');},
    CheckRadioButton: function() {return (Fn(T.BOOL, [[T.HWND], [T.i32], [T.i32], [T.i32]], [['dllimport'], ['stdcall']]))('CheckRadioButton');},
    ChildWindowFromPoint: function() {return (Fn(T.HWND, [[T.HWND], [T.POINT]], [['dllimport'], ['stdcall']]))('ChildWindowFromPoint');},
    ChildWindowFromPointEx: function() {return (Fn(T.HWND, [[T.HWND], [T.POINT], [T.UINT]], [['dllimport'], ['stdcall']]))('ChildWindowFromPointEx');},
    ClientToScreen: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPPOINT]], [['dllimport'], ['stdcall']]))('ClientToScreen');},
    ClipCursor: function() {return (Fn(T.BOOL, [[Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('ClipCursor');},
    CloseClipboard: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('CloseClipboard');},
    CloseDesktop: function() {return (Fn(T.BOOL, [[T.HDESK]], [['dllimport'], ['stdcall']]))('CloseDesktop');},
    CloseWindow: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('CloseWindow');},
    CloseWindowStation: function() {return (Fn(T.BOOL, [[T.HWINSTA]], [['dllimport'], ['stdcall']]))('CloseWindowStation');},
    CopyAcceleratorTableA: function() {return (Fn(T.INT, [[T.HACCEL], [T.LPACCEL], [T.INT]], [['dllimport'], ['stdcall']]))('CopyAcceleratorTableA');},
    CopyAcceleratorTableW: function() {return (Fn(T.INT, [[T.HACCEL], [T.LPACCEL], [T.INT]], [['dllimport'], ['stdcall']]))('CopyAcceleratorTableW');},
    CopyIcon: function() {return (Fn(T.HICON, [[T.HICON]], [['dllimport'], ['stdcall']]))('CopyIcon');},
    CopyImage: function() {return (Fn(T.HANDLE, [[T.HANDLE], [T.UINT], [T.INT], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('CopyImage');},
    CopyRect: function() {return (Fn(T.BOOL, [[Pointer(T.RECT)], [Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('CopyRect');},
    CountClipboardFormats: function() {return (Fn(T.INT, [[null]], [['dllimport'], ['stdcall']]))('CountClipboardFormats');},
    CreateAcceleratorTableA: function() {return (Fn(T.HACCEL, [[T.LPACCEL], [T.INT]], [['dllimport'], ['stdcall']]))('CreateAcceleratorTableA');},
    CreateAcceleratorTableW: function() {return (Fn(T.HACCEL, [[T.LPACCEL], [T.INT]], [['dllimport'], ['stdcall']]))('CreateAcceleratorTableW');},
    CreateIconIndirect: function() {return (Fn(T.HICON, [[T.PICONINFO]], [['dllimport'], ['stdcall']]))('CreateIconIndirect');},
    CreateCaret: function() {return (Fn(T.BOOL, [[T.HWND], [T.HBITMAP], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('CreateCaret');},
    CreateCursor: function() {return (Fn(T.HCURSOR, [[T.HINSTANCE], [T.INT], [T.INT], [T.INT], [T.INT], [T.LPCVOID], [T.LPCVOID]], [['dllimport'], ['stdcall']]))('CreateCursor');},
    CreateDialogIndirectParamA: function() {return (Fn(T.HWND, [[T.HINSTANCE], [T.LPCDLGTEMPLATEA], [T.HWND], [T.DLGPROC], [T.LPARAM]], [['dllimport'], ['stdcall']]))('CreateDialogIndirectParamA');},
    CreateDialogIndirectParamW: function() {return (Fn(T.HWND, [[T.HINSTANCE], [T.LPCDLGTEMPLATEW], [T.HWND], [T.DLGPROC], [T.LPARAM]], [['dllimport'], ['stdcall']]))('CreateDialogIndirectParamW');},
    CreateDialogParamA: function() {return (Fn(T.HWND, [[T.HINSTANCE], [T.LPCSTR], [T.HWND], [T.DLGPROC], [T.LPARAM]], [['dllimport'], ['stdcall']]))('CreateDialogParamA');},
    CreateDialogParamW: function() {return (Fn(T.HWND, [[T.HINSTANCE], [T.LPCWSTR], [T.HWND], [T.DLGPROC], [T.LPARAM]], [['dllimport'], ['stdcall']]))('CreateDialogParamW');},
    CreateIcon: function() {return (Fn(T.HICON, [[T.HINSTANCE], [T.INT], [T.INT], [T.BYTE], [T.BYTE], [T.LPCVOID], [T.LPCVOID]], [['dllimport'], ['stdcall']]))('CreateIcon');},
    CreateIconFromResource: function() {return (Fn(T.HICON, [[T.LPBYTE], [T.UINT], [T.BOOL], [T.DWORD]], [['dllimport'], ['stdcall']]))('CreateIconFromResource');},
    CreateIconFromResourceEx: function() {return (Fn(T.HICON, [[T.LPBYTE], [T.UINT], [T.BOOL], [T.DWORD], [T.INT], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('CreateIconFromResourceEx');},
    CreateMenu: function() {return (Fn(T.HMENU, [[null]], [['dllimport'], ['stdcall']]))('CreateMenu');},
    CreatePopupMenu: function() {return (Fn(T.HMENU, [[null]], [['dllimport'], ['stdcall']]))('CreatePopupMenu');},
    CreateWindowExA: function() {return (Fn(T.HWND, [[T.DWORD], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.INT], [T.INT], [T.INT], [T.INT], [T.HWND], [T.HMENU], [T.HINSTANCE], [T.LPVOID]], [['dllimport'], ['stdcall']]))('CreateWindowExA');},
    CreateWindowExW: function() {return (Fn(T.HWND, [[T.DWORD], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.INT], [T.INT], [T.INT], [T.INT], [T.HWND], [T.HMENU], [T.HINSTANCE], [T.LPVOID]], [['dllimport'], ['stdcall']]))('CreateWindowExW');},
    CreateWindowStationA: function() {return (Fn(T.HWINSTA, [[T.LPCSTR], [T.DWORD], [T.ACCESS_MASK], [T.LPSECURITY_ATTRIBUTES]], [['dllimport'], ['stdcall']]))('CreateWindowStationA');},
    CreateWindowStationW: function() {return (Fn(T.HWINSTA, [[T.LPCWSTR], [T.DWORD], [T.ACCESS_MASK], [T.LPSECURITY_ATTRIBUTES]], [['dllimport'], ['stdcall']]))('CreateWindowStationW');},
    CreateMDIWindowA: function() {return (Fn(T.HWND, [[T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.INT], [T.INT], [T.INT], [T.INT], [T.HWND], [T.HINSTANCE], [T.LPARAM]], [['dllimport'], ['stdcall']]))('CreateMDIWindowA');},
    CreateMDIWindowW: function() {return (Fn(T.HWND, [[T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.INT], [T.INT], [T.INT], [T.INT], [T.HWND], [T.HINSTANCE], [T.LPARAM]], [['dllimport'], ['stdcall']]))('CreateMDIWindowW');},
    DefDlgProcA: function() {return (Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('DefDlgProcA');},
    DefDlgProcW: function() {return (Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('DefDlgProcW');},
    DeferWindowPos: function() {return (Fn(T.HDWP, [[T.HDWP], [T.HWND], [T.HWND], [T.INT], [T.INT], [T.INT], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('DeferWindowPos');},
    DefFrameProcA: function() {return (Fn(T.LRESULT, [[T.HWND], [T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('DefFrameProcA');},
    DefFrameProcW: function() {return (Fn(T.LRESULT, [[T.HWND], [T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('DefFrameProcW');},
    DefMDIChildProcA: function() {return (Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('DefMDIChildProcA');},
    DefMDIChildProcW: function() {return (Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('DefMDIChildProcW');},
    DefRawInputProc: function() {return (Fn(T.LRESULT, [[Pointer(T.PRAWINPUT)], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('DefRawInputProc');},
    DefWindowProcA: function() {return (Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('DefWindowProcA');},
    DefWindowProcW: function() {return (Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('DefWindowProcW');},
    DeleteMenu: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('DeleteMenu');},
    DestroyAcceleratorTable: function() {return (Fn(T.BOOL, [[T.HACCEL]], [['dllimport'], ['stdcall']]))('DestroyAcceleratorTable');},
    DestroyCaret: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('DestroyCaret');},
    DestroyCursor: function() {return (Fn(T.BOOL, [[T.HCURSOR]], [['dllimport'], ['stdcall']]))('DestroyCursor');},
    DestroyIcon: function() {return (Fn(T.BOOL, [[T.HICON]], [['dllimport'], ['stdcall']]))('DestroyIcon');},
    DestroyMenu: function() {return (Fn(T.BOOL, [[T.HMENU]], [['dllimport'], ['stdcall']]))('DestroyMenu');},
    DestroyWindow: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('DestroyWindow');},
    DialogBoxIndirectParamA: function() {return (Fn(T.INT_PTR, [[T.HINSTANCE], [T.LPCDLGTEMPLATEA], [T.HWND], [T.DLGPROC], [T.LPARAM]], [['dllimport'], ['stdcall']]))('DialogBoxIndirectParamA');},
    DialogBoxIndirectParamW: function() {return (Fn(T.INT_PTR, [[T.HINSTANCE], [T.LPCDLGTEMPLATEW], [T.HWND], [T.DLGPROC], [T.LPARAM]], [['dllimport'], ['stdcall']]))('DialogBoxIndirectParamW');},
    DialogBoxParamA: function() {return (Fn(T.INT_PTR, [[T.HINSTANCE], [T.LPCSTR], [T.HWND], [T.DLGPROC], [T.LPARAM]], [['dllimport'], ['stdcall']]))('DialogBoxParamA');},
    DialogBoxParamW: function() {return (Fn(T.INT_PTR, [[T.HINSTANCE], [T.LPCWSTR], [T.HWND], [T.DLGPROC], [T.LPARAM]], [['dllimport'], ['stdcall']]))('DialogBoxParamW');},
    DispatchMessageA: function() {return (Fn(T.LRESULT, [[Pointer(T.MSG)]], [['dllimport'], ['stdcall']]))('DispatchMessageA');},
    DispatchMessageW: function() {return (Fn(T.LRESULT, [[Pointer(T.MSG)]], [['dllimport'], ['stdcall']]))('DispatchMessageW');},
    DlgDirListA: function() {return (Fn(T.INT, [[T.HWND], [T.LPSTR], [T.INT], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('DlgDirListA');},
    DlgDirListW: function() {return (Fn(T.INT, [[T.HWND], [T.LPWSTR], [T.INT], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('DlgDirListW');},
    DlgDirListComboBoxA: function() {return (Fn(T.INT, [[T.HWND], [T.LPSTR], [T.INT], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('DlgDirListComboBoxA');},
    DlgDirListComboBoxW: function() {return (Fn(T.INT, [[T.HWND], [T.LPWSTR], [T.INT], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('DlgDirListComboBoxW');},
    DlgDirSelectComboBoxExA: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPSTR], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('DlgDirSelectComboBoxExA');},
    DlgDirSelectComboBoxExW: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPWSTR], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('DlgDirSelectComboBoxExW');},
    DlgDirSelectExA: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPSTR], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('DlgDirSelectExA');},
    DlgDirSelectExW: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPWSTR], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('DlgDirSelectExW');},
    DragDetect: function() {return (Fn(T.BOOL, [[T.HWND], [T.POINT]], [['dllimport'], ['stdcall']]))('DragDetect');},
    DragObject: function() {return (Fn(T.DWORD, [[T.HWND], [T.HWND], [T.UINT], [T.ULONG_PTR], [T.HCURSOR]], [['dllimport'], ['stdcall']]))('DragObject');},
    DrawAnimatedRects: function() {return (Fn(T.BOOL, [[T.HWND], [T.i32], [Pointer(T.RECT)], [Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('DrawAnimatedRects');},
    DrawCaption: function() {return (Fn(T.BOOL, [[T.HWND], [T.HDC], [Pointer(T.RECT)], [T.UINT]], [['dllimport'], ['stdcall']]))('DrawCaption');},
    DrawCaptionTempA: function() {return (Fn(T.BOOL, [[T.HWND], [T.HDC], [Pointer(T.RECT)], [T.HFONT], [T.HICON], [T.LPCSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('DrawCaptionTempA');},
    DrawCaptionTempW: function() {return (Fn(T.BOOL, [[T.HWND], [T.HDC], [Pointer(T.RECT)], [T.HFONT], [T.HICON], [T.LPCWSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('DrawCaptionTempW');},
    DrawEdge: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPRECT], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('DrawEdge');},
    DrawFocusRect: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('DrawFocusRect');},
    DrawFrameControl: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPRECT], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('DrawFrameControl');},
    DrawIcon: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.HICON]], [['dllimport'], ['stdcall']]))('DrawIcon');},
    DrawIconEx: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.HICON], [T.INT], [T.INT], [T.UINT], [T.HBRUSH], [T.UINT]], [['dllimport'], ['stdcall']]))('DrawIconEx');},
    DrawMenuBar: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('DrawMenuBar');},
    DrawStateA: function() {return (Fn(T.BOOL, [[T.HDC], [T.HBRUSH], [T.DRAWSTATEPROC], [T.LPARAM], [T.WPARAM], [T.INT], [T.INT], [T.INT], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('DrawStateA');},
    DrawStateW: function() {return (Fn(T.BOOL, [[T.HDC], [T.HBRUSH], [T.DRAWSTATEPROC], [T.LPARAM], [T.WPARAM], [T.INT], [T.INT], [T.INT], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('DrawStateW');},
    DrawTextA: function() {return (Fn(T.INT, [[T.HDC], [T.LPCSTR], [T.INT], [T.LPRECT], [T.UINT]], [['dllimport'], ['stdcall']]))('DrawTextA');},
    DrawTextW: function() {return (Fn(T.INT, [[T.HDC], [T.LPCWSTR], [T.INT], [T.LPRECT], [T.UINT]], [['dllimport'], ['stdcall']]))('DrawTextW');},
    DrawTextExA: function() {return (Fn(T.INT, [[T.HDC], [T.LPSTR], [T.INT], [T.LPRECT], [T.UINT], [T.LPDRAWTEXTPARAMS]], [['dllimport'], ['stdcall']]))('DrawTextExA');},
    DrawTextExW: function() {return (Fn(T.INT, [[T.HDC], [T.LPWSTR], [T.INT], [T.LPRECT], [T.UINT], [T.LPDRAWTEXTPARAMS]], [['dllimport'], ['stdcall']]))('DrawTextExW');},
    EmptyClipboard: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('EmptyClipboard');},
    EnableMenuItem: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('EnableMenuItem');},
    EnableScrollBar: function() {return (Fn(T.BOOL, [[T.HWND], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('EnableScrollBar');},
    EnableWindow: function() {return (Fn(T.BOOL, [[T.HWND], [T.BOOL]], [['dllimport'], ['stdcall']]))('EnableWindow');},
    EndDeferWindowPos: function() {return (Fn(T.BOOL, [[T.HDWP]], [['dllimport'], ['stdcall']]))('EndDeferWindowPos');},
    EndDialog: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT_PTR]], [['dllimport'], ['stdcall']]))('EndDialog');},
    EndMenu: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('EndMenu');},
    EndPaint: function() {return (Fn(T.BOOL, [[T.HWND], [Pointer(T.PAINTSTRUCT)]], [['dllimport'], ['stdcall']]))('EndPaint');},
    EnumChildWindows: function() {return (Fn(T.BOOL, [[T.HWND], [T.WNDENUMPROC], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumChildWindows');},
    EnumClipboardFormats: function() {return (Fn(T.UINT, [[T.UINT]], [['dllimport'], ['stdcall']]))('EnumClipboardFormats');},
    EnumDesktopsA: function() {return (Fn(T.BOOL, [[T.HWINSTA], [T.DESKTOPENUMPROCA], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumDesktopsA');},
    EnumDesktopsW: function() {return (Fn(T.BOOL, [[T.HWINSTA], [T.DESKTOPENUMPROCW], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumDesktopsW');},
    EnumDesktopWindows: function() {return (Fn(T.BOOL, [[T.HDESK], [T.WNDENUMPROC], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumDesktopWindows');},
    EnumDisplayMonitors: function() {return (Fn(T.BOOL, [[T.HDC], [T.LPRECT], [T.MONITORENUMPROC], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumDisplayMonitors');},
    EnumPropsA: function() {return (Fn(T.INT, [[T.HWND], [T.PROPENUMPROCA]], [['dllimport'], ['stdcall']]))('EnumPropsA');},
    EnumPropsW: function() {return (Fn(T.INT, [[T.HWND], [T.PROPENUMPROCW]], [['dllimport'], ['stdcall']]))('EnumPropsW');},
    EnumPropsExA: function() {return (Fn(T.INT, [[T.HWND], [T.PROPENUMPROCEXA], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumPropsExA');},
    EnumPropsExW: function() {return (Fn(T.INT, [[T.HWND], [T.PROPENUMPROCEXW], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumPropsExW');},
    EnumThreadWindows: function() {return (Fn(T.BOOL, [[T.DWORD], [T.WNDENUMPROC], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumThreadWindows');},
    EnumWindows: function() {return (Fn(T.BOOL, [[T.WNDENUMPROC], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumWindows');},
    EnumWindowStationsA: function() {return (Fn(T.BOOL, [[T.WINSTAENUMPROCA], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumWindowStationsA');},
    EnumWindowStationsW: function() {return (Fn(T.BOOL, [[T.WINSTAENUMPROCW], [T.LPARAM]], [['dllimport'], ['stdcall']]))('EnumWindowStationsW');},
    EqualRect: function() {return (Fn(T.BOOL, [[Pointer(T.RECT)], [Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('EqualRect');},
    ExcludeUpdateRgn: function() {return (Fn(T.INT, [[T.HDC], [T.HWND]], [['dllimport'], ['stdcall']]))('ExcludeUpdateRgn');},
    ExitWindowsEx: function() {return (Fn(T.BOOL, [[T.UINT], [T.DWORD]], [['dllimport'], ['stdcall']]))('ExitWindowsEx');},
    FillRect: function() {return (Fn(T.INT, [[T.HDC], [Pointer(T.RECT)], [T.HBRUSH]], [['dllimport'], ['stdcall']]))('FillRect');},
    FindWindowA: function() {return (Fn(T.HWND, [[T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('FindWindowA');},
    FindWindowW: function() {return (Fn(T.HWND, [[T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('FindWindowW');},
    FindWindowExA: function() {return (Fn(T.HWND, [[T.HWND], [T.HWND], [T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('FindWindowExA');},
    FindWindowExW: function() {return (Fn(T.HWND, [[T.HWND], [T.HWND], [T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('FindWindowExW');},
    FlashWindow: function() {return (Fn(T.BOOL, [[T.HWND], [T.BOOL]], [['dllimport'], ['stdcall']]))('FlashWindow');},
    FlashWindowEx: function() {return (Fn(T.BOOL, [[T.PFLASHWINFO]], [['dllimport'], ['stdcall']]))('FlashWindowEx');},
    FrameRect: function() {return (Fn(T.INT, [[T.HDC], [Pointer(T.RECT)], [T.HBRUSH]], [['dllimport'], ['stdcall']]))('FrameRect');},
    GetActiveWindow: function() {return (Fn(T.HWND, [[null]], [['dllimport'], ['stdcall']]))('GetActiveWindow');},
    GetAltTabInfoA: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.PALTTABINFO], [T.LPSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('GetAltTabInfoA');},
    GetAltTabInfoW: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.PALTTABINFO], [T.LPWSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('GetAltTabInfoW');},
    GetAncestor: function() {return (Fn(T.HWND, [[T.HWND], [T.UINT]], [['dllimport'], ['stdcall']]))('GetAncestor');},
    GetAppCompatFlags: function() {return (Fn(T.DWORD, [[T.HTASK]], [['dllimport'], ['stdcall']]))('GetAppCompatFlags');},
    GetAsyncKeyState: function() {return (Fn(T.SHORT, [[T.INT]], [['dllimport'], ['stdcall']]))('GetAsyncKeyState');},
    GetCapture: function() {return (Fn(T.HWND, [[null]], [['dllimport'], ['stdcall']]))('GetCapture');},
    GetCaretBlinkTime: function() {return (Fn(T.UINT, [[null]], [['dllimport'], ['stdcall']]))('GetCaretBlinkTime');},
    GetCaretPos: function() {return (Fn(T.BOOL, [[T.LPPOINT]], [['dllimport'], ['stdcall']]))('GetCaretPos');},
    GetClassInfoA: function() {return (Fn(T.BOOL, [[T.HINSTANCE], [T.LPCSTR], [Pointer(T.WNDCLASSA)]], [['dllimport'], ['stdcall']]))('GetClassInfoA');},
    GetClassInfoW: function() {return (Fn(T.BOOL, [[T.HINSTANCE], [T.LPCWSTR], [Pointer(T.WNDCLASSW)]], [['dllimport'], ['stdcall']]))('GetClassInfoW');},
    GetClassInfoExA: function() {return (Fn(T.BOOL, [[T.HINSTANCE], [T.LPCSTR], [Pointer(T.WNDCLASSEXA)]], [['dllimport'], ['stdcall']]))('GetClassInfoExA');},
    GetClassInfoExW: function() {return (Fn(T.BOOL, [[T.HINSTANCE], [T.LPCWSTR], [Pointer(T.WNDCLASSEXW)]], [['dllimport'], ['stdcall']]))('GetClassInfoExW');},
    GetClassLongA: function() {return (Fn(T.DWORD, [[T.HWND], [T.INT]], [['dllimport'], ['stdcall']]))('GetClassLongA');},
    GetClassLongW: function() {return (Fn(T.DWORD, [[T.HWND], [T.INT]], [['dllimport'], ['stdcall']]))('GetClassLongW');},
    GetClassNameA: function() {return (Fn(T.INT, [[T.HWND], [T.LPSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetClassNameA');},
    GetClassNameW: function() {return (Fn(T.INT, [[T.HWND], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetClassNameW');},
    GetClassWord: function() {return (Fn(T.WORD, [[T.HWND], [T.INT]], [['dllimport'], ['stdcall']]))('GetClassWord');},
    GetClientRect: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPRECT]], [['dllimport'], ['stdcall']]))('GetClientRect');},
    GetClipboardData: function() {return (Fn(T.HANDLE, [[T.UINT]], [['dllimport'], ['stdcall']]))('GetClipboardData');},
    GetClipboardFormatNameA: function() {return (Fn(T.INT, [[T.UINT], [T.LPSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetClipboardFormatNameA');},
    GetClipboardFormatNameW: function() {return (Fn(T.INT, [[T.UINT], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetClipboardFormatNameW');},
    GetClipboardOwner: function() {return (Fn(T.HWND, [[null]], [['dllimport'], ['stdcall']]))('GetClipboardOwner');},
    GetClipboardSequenceNumber: function() {return (Fn(T.DWORD, [[null]], [['dllimport'], ['stdcall']]))('GetClipboardSequenceNumber');},
    GetClipboardViewer: function() {return (Fn(T.HWND, [[null]], [['dllimport'], ['stdcall']]))('GetClipboardViewer');},
    GetClipCursor: function() {return (Fn(T.BOOL, [[T.LPRECT]], [['dllimport'], ['stdcall']]))('GetClipCursor');},
    GetComboBoxInfo: function() {return (Fn(T.BOOL, [[T.HWND], [T.PCOMBOBOXINFO]], [['dllimport'], ['stdcall']]))('GetComboBoxInfo');},
    GetCursor: function() {return (Fn(T.HCURSOR, [[null]], [['dllimport'], ['stdcall']]))('GetCursor');},
    GetCursorInfo: function() {return (Fn(T.BOOL, [[T.PCURSORINFO]], [['dllimport'], ['stdcall']]))('GetCursorInfo');},
    GetCursorFrameInfo: function() {return (Fn(T.HCURSOR, [[T.HCURSOR], [T.DWORD], [T.DWORD], [Pointer(T.DWORD)], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('GetCursorFrameInfo');},
    GetCursorPos: function() {return (Fn(T.BOOL, [[T.LPPOINT]], [['dllimport'], ['stdcall']]))('GetCursorPos');},
    GetDC: function() {return (Fn(T.HDC, [[T.HWND]], [['dllimport'], ['stdcall']]))('GetDC');},
    GetDCEx: function() {return (Fn(T.HDC, [[T.HWND], [T.HRGN], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetDCEx');},
    GetDesktopWindow: function() {return (Fn(T.HWND, [[null]], [['dllimport'], ['stdcall']]))('GetDesktopWindow');},
    GetDialogBaseUnits: function() {return (Fn(T.DWORD, [[null]], [['dllimport'], ['stdcall']]))('GetDialogBaseUnits');},
    GetDlgCtrlID: function() {return (Fn(T.INT, [[T.HWND]], [['dllimport'], ['stdcall']]))('GetDlgCtrlID');},
    GetDlgItem: function() {return (Fn(T.HWND, [[T.HWND], [T.INT]], [['dllimport'], ['stdcall']]))('GetDlgItem');},
    GetDlgItemInt: function() {return (Fn(T.UINT, [[T.HWND], [T.INT], [Pointer(T.BOOL)], [T.BOOL]], [['dllimport'], ['stdcall']]))('GetDlgItemInt');},
    GetDlgItemTextA: function() {return (Fn(T.UINT, [[T.HWND], [T.INT], [T.LPSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetDlgItemTextA');},
    GetDlgItemTextW: function() {return (Fn(T.UINT, [[T.HWND], [T.INT], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetDlgItemTextW');},
    GetDoubleClickTime: function() {return (Fn(T.UINT, [[null]], [['dllimport'], ['stdcall']]))('GetDoubleClickTime');},
    GetFocus: function() {return (Fn(T.HWND, [[null]], [['dllimport'], ['stdcall']]))('GetFocus');},
    GetForegroundWindow: function() {return (Fn(T.HWND, [[null]], [['dllimport'], ['stdcall']]))('GetForegroundWindow');},
    GetGUIThreadInfo: function() {return (Fn(T.BOOL, [[T.DWORD], [Pointer(T.GUITHREADINFO)]], [['dllimport'], ['stdcall']]))('GetGUIThreadInfo');},
    GetIconInfo: function() {return (Fn(T.BOOL, [[T.HICON], [T.PICONINFO]], [['dllimport'], ['stdcall']]))('GetIconInfo');},
    GetIconInfoExA: function() {return (Fn(T.BOOL, [[T.HICON], [Pointer(T.ICONINFOEXA)]], [['dllimport'], ['stdcall']]))('GetIconInfoExA');},
    GetIconInfoExW: function() {return (Fn(T.BOOL, [[T.HICON], [Pointer(T.ICONINFOEXW)]], [['dllimport'], ['stdcall']]))('GetIconInfoExW');},
    GetInputState: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('GetInputState');},
    GetInternalWindowPos: function() {return (Fn(T.UINT, [[T.HWND], [T.LPRECT], [T.LPPOINT]], [['dllimport'], ['stdcall']]))('GetInternalWindowPos');},
    GetKBCodePage: function() {return (Fn(T.UINT, [[null]], [['dllimport'], ['stdcall']]))('GetKBCodePage');},
    GetKeyboardLayout: function() {return (Fn(T.HKL, [[T.DWORD]], [['dllimport'], ['stdcall']]))('GetKeyboardLayout');},
    GetKeyboardLayoutList: function() {return (Fn(T.UINT, [[T.INT], [Pointer(T.HKL)]], [['dllimport'], ['stdcall']]))('GetKeyboardLayoutList');},
    GetKeyboardState: function() {return (Fn(T.BOOL, [[T.LPBYTE]], [['dllimport'], ['stdcall']]))('GetKeyboardState');},
    GetKeyboardType: function() {return (Fn(T.INT, [[T.INT]], [['dllimport'], ['stdcall']]))('GetKeyboardType');},
    GetKeyNameTextA: function() {return (Fn(T.INT, [[T.LONG], [T.LPSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetKeyNameTextA');},
    GetKeyNameTextW: function() {return (Fn(T.INT, [[T.LONG], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetKeyNameTextW');},
    GetKeyboardLayoutNameA: function() {return (Fn(T.BOOL, [[T.LPSTR]], [['dllimport'], ['stdcall']]))('GetKeyboardLayoutNameA');},
    GetKeyboardLayoutNameW: function() {return (Fn(T.BOOL, [[T.LPWSTR]], [['dllimport'], ['stdcall']]))('GetKeyboardLayoutNameW');},
    GetKeyState: function() {return (Fn(T.SHORT, [[T.INT]], [['dllimport'], ['stdcall']]))('GetKeyState');},
    GetLastActivePopup: function() {return (Fn(T.HWND, [[T.HWND]], [['dllimport'], ['stdcall']]))('GetLastActivePopup');},
    GetLastInputInfo: function() {return (Fn(T.BOOL, [[T.PLASTINPUTINFO]], [['dllimport'], ['stdcall']]))('GetLastInputInfo');},
    GetRawInputBuffer: function() {return (Fn(T.UINT, [[T.PRAWINPUT], [T.PUINT], [T.UINT]], [['dllimport'], ['stdcall']]))('GetRawInputBuffer');},
    GetRawInputData: function() {return (Fn(T.UINT, [[T.HRAWINPUT], [T.UINT], [T.LPVOID], [T.PUINT], [T.UINT]], [['dllimport'], ['stdcall']]))('GetRawInputData');},
    GetRawInputDeviceInfoA: function() {return (Fn(T.UINT, [[T.HANDLE], [T.UINT], [T.LPVOID], [T.PUINT]], [['dllimport'], ['stdcall']]))('GetRawInputDeviceInfoA');},
    GetRawInputDeviceInfoW: function() {return (Fn(T.UINT, [[T.HANDLE], [T.UINT], [T.LPVOID], [T.PUINT]], [['dllimport'], ['stdcall']]))('GetRawInputDeviceInfoW');},
    GetRawInputDeviceList: function() {return (Fn(T.UINT, [[T.PRAWINPUTDEVICELIST], [T.PUINT], [T.UINT]], [['dllimport'], ['stdcall']]))('GetRawInputDeviceList');},
    GetLayeredWindowAttributes: function() {return (Fn(T.BOOL, [[T.HWND], [Pointer(T.COLORREF)], [Pointer(T.BYTE)], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('GetLayeredWindowAttributes');},
    GetMenu: function() {return (Fn(T.HMENU, [[T.HWND]], [['dllimport'], ['stdcall']]))('GetMenu');},
    GetMenuBarInfo: function() {return (Fn(T.BOOL, [[T.HWND], [T.LONG], [T.LONG], [T.PMENUBARINFO]], [['dllimport'], ['stdcall']]))('GetMenuBarInfo');},
    GetMenuCheckMarkDimensions: function() {return (Fn(T.DWORD, [[null]], [['dllimport'], ['stdcall']]))('GetMenuCheckMarkDimensions');},
    GetMenuContextHelpId: function() {return (Fn(T.DWORD, [[T.HMENU]], [['dllimport'], ['stdcall']]))('GetMenuContextHelpId');},
    GetMenuDefaultItem: function() {return (Fn(T.UINT, [[T.HMENU], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('GetMenuDefaultItem');},
    GetMenuInfo: function() {return (Fn(T.BOOL, [[T.HMENU], [T.LPMENUINFO]], [['dllimport'], ['stdcall']]))('GetMenuInfo');},
    GetMenuItemCount: function() {return (Fn(T.INT, [[T.HMENU]], [['dllimport'], ['stdcall']]))('GetMenuItemCount');},
    GetMenuItemID: function() {return (Fn(T.UINT, [[T.HMENU], [T.INT]], [['dllimport'], ['stdcall']]))('GetMenuItemID');},
    GetMenuItemInfoA: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.BOOL], [Pointer(T.MENUITEMINFOA)]], [['dllimport'], ['stdcall']]))('GetMenuItemInfoA');},
    GetMenuItemInfoW: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.BOOL], [Pointer(T.MENUITEMINFOW)]], [['dllimport'], ['stdcall']]))('GetMenuItemInfoW');},
    GetMenuItemRect: function() {return (Fn(T.BOOL, [[T.HWND], [T.HMENU], [T.UINT], [T.LPRECT]], [['dllimport'], ['stdcall']]))('GetMenuItemRect');},
    GetMenuState: function() {return (Fn(T.UINT, [[T.HMENU], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('GetMenuState');},
    GetMenuStringA: function() {return (Fn(T.INT, [[T.HMENU], [T.UINT], [T.LPSTR], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('GetMenuStringA');},
    GetMenuStringW: function() {return (Fn(T.INT, [[T.HMENU], [T.UINT], [T.LPWSTR], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('GetMenuStringW');},
    GetMessageA: function() {return (Fn(T.BOOL, [[T.LPMSG], [T.HWND], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('GetMessageA');},
    GetMessageW: function() {return (Fn(T.BOOL, [[T.LPMSG], [T.HWND], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('GetMessageW');},
    GetMessageExtraInfo: function() {return (Fn(T.LPARAM, [[null]], [['dllimport'], ['stdcall']]))('GetMessageExtraInfo');},
    GetMessagePos: function() {return (Fn(T.DWORD, [[null]], [['dllimport'], ['stdcall']]))('GetMessagePos');},
    GetMessageTime: function() {return (Fn(T.LONG, [[null]], [['dllimport'], ['stdcall']]))('GetMessageTime');},
    GetMonitorInfoA: function() {return (Fn(T.BOOL, [[T.HMONITOR], [T.LPMONITORINFO]], [['dllimport'], ['stdcall']]))('GetMonitorInfoA');},
    GetMonitorInfoW: function() {return (Fn(T.BOOL, [[T.HMONITOR], [T.LPMONITORINFO]], [['dllimport'], ['stdcall']]))('GetMonitorInfoW');},
    GetNextDlgGroupItem: function() {return (Fn(T.HWND, [[T.HWND], [T.HWND], [T.BOOL]], [['dllimport'], ['stdcall']]))('GetNextDlgGroupItem');},
    GetNextDlgTabItem: function() {return (Fn(T.HWND, [[T.HWND], [T.HWND], [T.BOOL]], [['dllimport'], ['stdcall']]))('GetNextDlgTabItem');},
    GetOpenClipboardWindow: function() {return (Fn(T.HWND, [[null]], [['dllimport'], ['stdcall']]))('GetOpenClipboardWindow');},
    GetParent: function() {return (Fn(T.HWND, [[T.HWND]], [['dllimport'], ['stdcall']]))('GetParent');},
    GetPriorityClipboardFormat: function() {return (Fn(T.INT, [[Pointer(T.UINT)], [T.INT]], [['dllimport'], ['stdcall']]))('GetPriorityClipboardFormat');},
    GetProcessDefaultLayout: function() {return (Fn(T.BOOL, [[Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('GetProcessDefaultLayout');},
    GetPropA: function() {return (Fn(T.HANDLE, [[T.HWND], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('GetPropA');},
    GetPropW: function() {return (Fn(T.HANDLE, [[T.HWND], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('GetPropW');},
    GetQueueStatus: function() {return (Fn(T.DWORD, [[T.UINT]], [['dllimport'], ['stdcall']]))('GetQueueStatus');},
    GetScrollInfo: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.LPSCROLLINFO]], [['dllimport'], ['stdcall']]))('GetScrollInfo');},
    GetScrollBarInfo: function() {return (Fn(T.BOOL, [[T.HWND], [T.LONG], [T.LPSCROLLBARINFO]], [['dllimport'], ['stdcall']]))('GetScrollBarInfo');},
    GetScrollPos: function() {return (Fn(T.INT, [[T.HWND], [T.INT]], [['dllimport'], ['stdcall']]))('GetScrollPos');},
    GetScrollRange: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.LPINT], [T.LPINT]], [['dllimport'], ['stdcall']]))('GetScrollRange');},
    GetShellWindow: function() {return (Fn(T.HWND, [[null]], [['dllimport'], ['stdcall']]))('GetShellWindow');},
    GetSubMenu: function() {return (Fn(T.HMENU, [[T.HMENU], [T.INT]], [['dllimport'], ['stdcall']]))('GetSubMenu');},
    GetSysColorBrush: function() {return (Fn(T.HBRUSH, [[T.INT]], [['dllimport'], ['stdcall']]))('GetSysColorBrush');},
    GetSystemMenu: function() {return (Fn(T.HMENU, [[T.HWND], [T.BOOL]], [['dllimport'], ['stdcall']]))('GetSystemMenu');},
    GetSystemMetrics: function() {return (Fn(T.INT, [[T.INT]], [['dllimport'], ['stdcall']]))('GetSystemMetrics');},
    GetTabbedTextExtentA: function() {return (Fn(T.DWORD, [[T.HDC], [T.LPCSTR], [T.INT], [T.INT], [Pointer(T.INT)]], [['dllimport'], ['stdcall']]))('GetTabbedTextExtentA');},
    GetTabbedTextExtentW: function() {return (Fn(T.DWORD, [[T.HDC], [T.LPCWSTR], [T.INT], [T.INT], [Pointer(T.INT)]], [['dllimport'], ['stdcall']]))('GetTabbedTextExtentW');},
    GetTitleBarInfo: function() {return (Fn(T.BOOL, [[T.HWND], [T.PTITLEBARINFO]], [['dllimport'], ['stdcall']]))('GetTitleBarInfo');},
    GetThreadDesktop: function() {return (Fn(T.HDESK, [[T.DWORD]], [['dllimport'], ['stdcall']]))('GetThreadDesktop');},
    GetTopWindow: function() {return (Fn(T.HWND, [[T.HWND]], [['dllimport'], ['stdcall']]))('GetTopWindow');},
    GetUpdateRect: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPRECT], [T.BOOL]], [['dllimport'], ['stdcall']]))('GetUpdateRect');},
    GetUpdateRgn: function() {return (Fn(T.INT, [[T.HWND], [T.HRGN], [T.BOOL]], [['dllimport'], ['stdcall']]))('GetUpdateRgn');},
    GetUserObjectInformationA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.INT], [T.LPVOID], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetUserObjectInformationA');},
    GetUserObjectInformationW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.INT], [T.LPVOID], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetUserObjectInformationW');},
    GetUserObjectSecurity: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PSECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetUserObjectSecurity');},
    GetWindow: function() {return (Fn(T.HWND, [[T.HWND], [T.UINT]], [['dllimport'], ['stdcall']]))('GetWindow');},
    GetWindowContextHelpId: function() {return (Fn(T.DWORD, [[T.HWND]], [['dllimport'], ['stdcall']]))('GetWindowContextHelpId');},
    GetWindowDC: function() {return (Fn(T.HDC, [[T.HWND]], [['dllimport'], ['stdcall']]))('GetWindowDC');},
    GetWindowInfo: function() {return (Fn(T.BOOL, [[T.HWND], [T.PWINDOWINFO]], [['dllimport'], ['stdcall']]))('GetWindowInfo');},
    GetWindowLongA: function() {return (Fn(T.LONG, [[T.HWND], [T.INT]], [['dllimport'], ['stdcall']]))('GetWindowLongA');},
    GetWindowLongW: function() {return (Fn(T.LONG, [[T.HWND], [T.INT]], [['dllimport'], ['stdcall']]))('GetWindowLongW');},
    GetWindowModuleFileNameA: function() {return (Fn(T.UINT, [[T.HWND], [T.LPSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('GetWindowModuleFileNameA');},
    GetWindowModuleFileNameW: function() {return (Fn(T.UINT, [[T.HWND], [T.LPWSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('GetWindowModuleFileNameW');},
    GetWindowPlacement: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPWINDOWPLACEMENT]], [['dllimport'], ['stdcall']]))('GetWindowPlacement');},
    GetWindowRect: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPRECT]], [['dllimport'], ['stdcall']]))('GetWindowRect');},
    GetWindowRgn: function() {return (Fn(T.INT, [[T.HWND], [T.HRGN]], [['dllimport'], ['stdcall']]))('GetWindowRgn');},
    GetProcessWindowStation: function() {return (Fn(T.HWINSTA, [[null]], [['dllimport'], ['stdcall']]))('GetProcessWindowStation');},
    GetWindowTextA: function() {return (Fn(T.INT, [[T.HWND], [T.LPSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetWindowTextA');},
    GetWindowTextW: function() {return (Fn(T.INT, [[T.HWND], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetWindowTextW');},
    GetWindowTextLengthA: function() {return (Fn(T.INT, [[T.HWND]], [['dllimport'], ['stdcall']]))('GetWindowTextLengthA');},
    GetWindowTextLengthW: function() {return (Fn(T.INT, [[T.HWND]], [['dllimport'], ['stdcall']]))('GetWindowTextLengthW');},
    GetWindowThreadProcessId: function() {return (Fn(T.DWORD, [[T.HWND], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetWindowThreadProcessId');},
    GetWindowWord: function() {return (Fn(T.WORD, [[T.HWND], [T.INT]], [['dllimport'], ['stdcall']]))('GetWindowWord');},
    GrayStringA: function() {return (Fn(T.BOOL, [[T.HDC], [T.HBRUSH], [T.GRAYSTRINGPROC], [T.LPARAM], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('GrayStringA');},
    GrayStringW: function() {return (Fn(T.BOOL, [[T.HDC], [T.HBRUSH], [T.GRAYSTRINGPROC], [T.LPARAM], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('GrayStringW');},
    HideCaret: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('HideCaret');},
    HiliteMenuItem: function() {return (Fn(T.BOOL, [[T.HWND], [T.HMENU], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('HiliteMenuItem');},
    InflateRect: function() {return (Fn(T.BOOL, [[T.LPRECT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('InflateRect');},
    InSendMessage: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('InSendMessage');},
    InSendMessageEx: function() {return (Fn(T.DWORD, [[T.LPVOID]], [['dllimport'], ['stdcall']]))('InSendMessageEx');},
    InsertMenuA: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT], [T.UINT_PTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('InsertMenuA');},
    InsertMenuW: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT], [T.UINT_PTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('InsertMenuW');},
    InsertMenuItemA: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.BOOL], [Pointer(T.MENUITEMINFOA)]], [['dllimport'], ['stdcall']]))('InsertMenuItemA');},
    InsertMenuItemW: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.BOOL], [Pointer(T.MENUITEMINFOW)]], [['dllimport'], ['stdcall']]))('InsertMenuItemW');},
    InternalGetWindowText: function() {return (Fn(T.INT, [[T.HWND], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('InternalGetWindowText');},
    IntersectRect: function() {return (Fn(T.BOOL, [[T.LPRECT], [Pointer(T.RECT)], [Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('IntersectRect');},
    InvalidateRect: function() {return (Fn(T.BOOL, [[T.HWND], [Pointer(T.RECT)], [T.BOOL]], [['dllimport'], ['stdcall']]))('InvalidateRect');},
    InvalidateRgn: function() {return (Fn(T.BOOL, [[T.HWND], [T.HRGN], [T.BOOL]], [['dllimport'], ['stdcall']]))('InvalidateRgn');},
    InvertRect: function() {return (Fn(T.BOOL, [[T.HDC], [Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('InvertRect');},
    IsCharAlphaA: function() {return (Fn(T.BOOL, [[T.CHAR]], [['dllimport'], ['stdcall']]))('IsCharAlphaA');},
    IsCharAlphaW: function() {return (Fn(T.BOOL, [[T.WCHAR]], [['dllimport'], ['stdcall']]))('IsCharAlphaW');},
    IsCharAlphaNumericA: function() {return (Fn(T.BOOL, [[T.CHAR]], [['dllimport'], ['stdcall']]))('IsCharAlphaNumericA');},
    IsCharAlphaNumericW: function() {return (Fn(T.BOOL, [[T.WCHAR]], [['dllimport'], ['stdcall']]))('IsCharAlphaNumericW');},
    IsCharLowerA: function() {return (Fn(T.BOOL, [[T.CHAR]], [['dllimport'], ['stdcall']]))('IsCharLowerA');},
    IsCharLowerW: function() {return (Fn(T.BOOL, [[T.WCHAR]], [['dllimport'], ['stdcall']]))('IsCharLowerW');},
    IsCharUpperA: function() {return (Fn(T.BOOL, [[T.CHAR]], [['dllimport'], ['stdcall']]))('IsCharUpperA');},
    IsCharUpperW: function() {return (Fn(T.BOOL, [[T.WCHAR]], [['dllimport'], ['stdcall']]))('IsCharUpperW');},
    IsChild: function() {return (Fn(T.BOOL, [[T.HWND], [T.HWND]], [['dllimport'], ['stdcall']]))('IsChild');},
    IsClipboardFormatAvailable: function() {return (Fn(T.BOOL, [[T.UINT]], [['dllimport'], ['stdcall']]))('IsClipboardFormatAvailable');},
    IsDialogMessageA: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPMSG]], [['dllimport'], ['stdcall']]))('IsDialogMessageA');},
    IsDialogMessageW: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPMSG]], [['dllimport'], ['stdcall']]))('IsDialogMessageW');},
    IsDlgButtonChecked: function() {return (Fn(T.UINT, [[T.HWND], [T.i32]], [['dllimport'], ['stdcall']]))('IsDlgButtonChecked');},
    IsGUIThread: function() {return (Fn(T.BOOL, [[T.BOOL]], [['dllimport'], ['stdcall']]))('IsGUIThread');},
    IsHungAppWindow: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('IsHungAppWindow');},
    IsIconic: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('IsIconic');},
    IsMenu: function() {return (Fn(T.BOOL, [[T.HMENU]], [['dllimport'], ['stdcall']]))('IsMenu');},
    IsRectEmpty: function() {return (Fn(T.BOOL, [[Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('IsRectEmpty');},
    IsWinEventHookInstalled: function() {return (Fn(T.BOOL, [[T.DWORD]], [['dllimport'], ['stdcall']]))('IsWinEventHookInstalled');},
    IsWindow: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('IsWindow');},
    IsWindowEnabled: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('IsWindowEnabled');},
    IsWindowUnicode: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('IsWindowUnicode');},
    IsWindowVisible: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('IsWindowVisible');},
    IsZoomed: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('IsZoomed');},
    KillSystemTimer: function() {return (Fn(T.BOOL, [[T.HWND], [T.UINT_PTR]], [['dllimport'], ['stdcall']]))('KillSystemTimer');},
    KillTimer: function() {return (Fn(T.BOOL, [[T.HWND], [T.UINT_PTR]], [['dllimport'], ['stdcall']]))('KillTimer');},
    LoadAcceleratorsA: function() {return (Fn(T.HACCEL, [[T.HINSTANCE], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('LoadAcceleratorsA');},
    LoadAcceleratorsW: function() {return (Fn(T.HACCEL, [[T.HINSTANCE], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('LoadAcceleratorsW');},
    LoadBitmapA: function() {return (Fn(T.HBITMAP, [[T.HINSTANCE], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('LoadBitmapA');},
    LoadBitmapW: function() {return (Fn(T.HBITMAP, [[T.HINSTANCE], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('LoadBitmapW');},
    LoadCursorA: function() {return (Fn(T.HCURSOR, [[T.HINSTANCE], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('LoadCursorA');},
    LoadCursorW: function() {return (Fn(T.HCURSOR, [[T.HINSTANCE], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('LoadCursorW');},
    LoadCursorFromFileA: function() {return (Fn(T.HCURSOR, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('LoadCursorFromFileA');},
    LoadCursorFromFileW: function() {return (Fn(T.HCURSOR, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('LoadCursorFromFileW');},
    LoadIconA: function() {return (Fn(T.HICON, [[T.HINSTANCE], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('LoadIconA');},
    LoadIconW: function() {return (Fn(T.HICON, [[T.HINSTANCE], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('LoadIconW');},
    LoadImageA: function() {return (Fn(T.HANDLE, [[T.HINSTANCE], [T.LPCSTR], [T.UINT], [T.INT], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('LoadImageA');},
    LoadImageW: function() {return (Fn(T.HANDLE, [[T.HINSTANCE], [T.LPCWSTR], [T.UINT], [T.INT], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('LoadImageW');},
    LoadKeyboardLayoutA: function() {return (Fn(T.HKL, [[T.LPCSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('LoadKeyboardLayoutA');},
    LoadKeyboardLayoutW: function() {return (Fn(T.HKL, [[T.LPCWSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('LoadKeyboardLayoutW');},
    LoadMenuA: function() {return (Fn(T.HMENU, [[T.HINSTANCE], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('LoadMenuA');},
    LoadMenuW: function() {return (Fn(T.HMENU, [[T.HINSTANCE], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('LoadMenuW');},
    LoadMenuIndirectA: function() {return (Fn(T.HMENU, [[T.LPCVOID]], [['dllimport'], ['stdcall']]))('LoadMenuIndirectA');},
    LoadMenuIndirectW: function() {return (Fn(T.HMENU, [[T.LPCVOID]], [['dllimport'], ['stdcall']]))('LoadMenuIndirectW');},
    LoadStringA: function() {return (Fn(T.INT, [[T.HINSTANCE], [T.UINT], [T.LPSTR], [T.INT]], [['dllimport'], ['stdcall']]))('LoadStringA');},
    LoadStringW: function() {return (Fn(T.INT, [[T.HINSTANCE], [T.UINT], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('LoadStringW');},
    LockSetForegroundWindow: function() {return (Fn(T.BOOL, [[T.UINT]], [['dllimport'], ['stdcall']]))('LockSetForegroundWindow');},
    LockWindowUpdate: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('LockWindowUpdate');},
    LookupIconIdFromDirectory: function() {return (Fn(T.INT, [[T.LPBYTE], [T.BOOL]], [['dllimport'], ['stdcall']]))('LookupIconIdFromDirectory');},
    LookupIconIdFromDirectoryEx: function() {return (Fn(T.INT, [[T.LPBYTE], [T.BOOL], [T.INT], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('LookupIconIdFromDirectoryEx');},
    MapVirtualKeyA: function() {return (Fn(T.UINT, [[T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('MapVirtualKeyA');},
    MapVirtualKeyW: function() {return (Fn(T.UINT, [[T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('MapVirtualKeyW');},
    MapVirtualKeyExA: function() {return (Fn(T.UINT, [[T.UINT], [T.UINT], [T.HKL]], [['dllimport'], ['stdcall']]))('MapVirtualKeyExA');},
    MapVirtualKeyExW: function() {return (Fn(T.UINT, [[T.UINT], [T.UINT], [T.HKL]], [['dllimport'], ['stdcall']]))('MapVirtualKeyExW');},
    MapDialogRect: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPRECT]], [['dllimport'], ['stdcall']]))('MapDialogRect');},
    MapWindowPoints: function() {return (Fn(T.INT, [[T.HWND], [T.HWND], [T.LPPOINT], [T.UINT]], [['dllimport'], ['stdcall']]))('MapWindowPoints');},
    MenuItemFromPoint: function() {return (Fn(T.INT, [[T.HWND], [T.HMENU], [T.POINT]], [['dllimport'], ['stdcall']]))('MenuItemFromPoint');},
    MessageBeep: function() {return (Fn(T.BOOL, [[T.UINT]], [['dllimport'], ['stdcall']]))('MessageBeep');},
    MessageBoxA: function() {return (Fn(T.INT, [[T.HWND], [T.LPCSTR], [T.LPCSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('MessageBoxA');},
    MessageBoxW: function() {return (Fn(T.INT, [[T.HWND], [T.LPCWSTR], [T.LPCWSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('MessageBoxW');},
    MessageBoxExA: function() {return (Fn(T.INT, [[T.HWND], [T.LPCSTR], [T.LPCSTR], [T.UINT], [T.WORD]], [['dllimport'], ['stdcall']]))('MessageBoxExA');},
    MessageBoxExW: function() {return (Fn(T.INT, [[T.HWND], [T.LPCWSTR], [T.LPCWSTR], [T.UINT], [T.WORD]], [['dllimport'], ['stdcall']]))('MessageBoxExW');},
    MessageBoxIndirectA: function() {return (Fn(T.INT, [[T.LPMSGBOXPARAMSA]], [['dllimport'], ['stdcall']]))('MessageBoxIndirectA');},
    MessageBoxIndirectW: function() {return (Fn(T.INT, [[T.LPMSGBOXPARAMSW]], [['dllimport'], ['stdcall']]))('MessageBoxIndirectW');},
    ModifyMenuA: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT], [T.UINT_PTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('ModifyMenuA');},
    ModifyMenuW: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT], [T.UINT_PTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('ModifyMenuW');},
    MonitorFromPoint: function() {return (Fn(T.HMONITOR, [[T.POINT], [T.DWORD]], [['dllimport'], ['stdcall']]))('MonitorFromPoint');},
    MonitorFromRect: function() {return (Fn(T.HMONITOR, [[T.LPRECT], [T.DWORD]], [['dllimport'], ['stdcall']]))('MonitorFromRect');},
    MonitorFromWindow: function() {return (Fn(T.HMONITOR, [[T.HWND], [T.DWORD]], [['dllimport'], ['stdcall']]))('MonitorFromWindow');},
    MoveWindow: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.INT], [T.INT], [T.INT], [T.BOOL]], [['dllimport'], ['stdcall']]))('MoveWindow');},
    MsgWaitForMultipleObjects: function() {return (Fn(T.DWORD, [[T.DWORD], [Pointer(T.HANDLE)], [T.BOOL], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('MsgWaitForMultipleObjects');},
    MsgWaitForMultipleObjectsEx: function() {return (Fn(T.DWORD, [[T.DWORD], [Pointer(T.HANDLE)], [T.DWORD], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('MsgWaitForMultipleObjectsEx');},
    NotifyWinEvent: function() {return (Fn(null, [[T.DWORD], [T.HWND], [T.LONG], [T.LONG]], [['dllimport'], ['stdcall']]))('NotifyWinEvent');},
    OemKeyScan: function() {return (Fn(T.DWORD, [[T.WORD]], [['dllimport'], ['stdcall']]))('OemKeyScan');},
    OemToCharA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR]], [['dllimport'], ['stdcall']]))('OemToCharA');},
    OemToCharW: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPWSTR]], [['dllimport'], ['stdcall']]))('OemToCharW');},
    OemToCharBuffA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('OemToCharBuffA');},
    OemToCharBuffW: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('OemToCharBuffW');},
    OffsetRect: function() {return (Fn(T.BOOL, [[T.LPRECT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('OffsetRect');},
    OpenClipboard: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('OpenClipboard');},
    OpenDesktopA: function() {return (Fn(T.HDESK, [[T.LPCSTR], [T.DWORD], [T.BOOL], [T.ACCESS_MASK]], [['dllimport'], ['stdcall']]))('OpenDesktopA');},
    OpenDesktopW: function() {return (Fn(T.HDESK, [[T.LPCWSTR], [T.DWORD], [T.BOOL], [T.ACCESS_MASK]], [['dllimport'], ['stdcall']]))('OpenDesktopW');},
    OpenIcon: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('OpenIcon');},
    OpenInputDesktop: function() {return (Fn(T.HDESK, [[T.DWORD], [T.BOOL], [T.ACCESS_MASK]], [['dllimport'], ['stdcall']]))('OpenInputDesktop');},
    OpenWindowStationA: function() {return (Fn(T.HWINSTA, [[T.LPCSTR], [T.BOOL], [T.ACCESS_MASK]], [['dllimport'], ['stdcall']]))('OpenWindowStationA');},
    OpenWindowStationW: function() {return (Fn(T.HWINSTA, [[T.LPCWSTR], [T.BOOL], [T.ACCESS_MASK]], [['dllimport'], ['stdcall']]))('OpenWindowStationW');},
    PaintDesktop: function() {return (Fn(T.BOOL, [[T.HDC]], [['dllimport'], ['stdcall']]))('PaintDesktop');},
    PeekMessageA: function() {return (Fn(T.BOOL, [[T.LPMSG], [T.HWND], [T.UINT], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('PeekMessageA');},
    PeekMessageW: function() {return (Fn(T.BOOL, [[T.LPMSG], [T.HWND], [T.UINT], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('PeekMessageW');},
    PostMessageA: function() {return (Fn(T.BOOL, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('PostMessageA');},
    PostMessageW: function() {return (Fn(T.BOOL, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('PostMessageW');},
    PostQuitMessage: function() {return (Fn(null, [[T.INT]], [['dllimport'], ['stdcall']]))('PostQuitMessage');},
    PostThreadMessageA: function() {return (Fn(T.BOOL, [[T.DWORD], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('PostThreadMessageA');},
    PostThreadMessageW: function() {return (Fn(T.BOOL, [[T.DWORD], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('PostThreadMessageW');},
    PrivateExtractIconExA: function() {return (Fn(T.UINT, [[T.LPCSTR], [T.i32], [Pointer(T.HICON)], [Pointer(T.HICON)], [T.UINT]], [['dllimport'], ['stdcall']]))('PrivateExtractIconExA');},
    PrivateExtractIconExW: function() {return (Fn(T.UINT, [[T.LPCWSTR], [T.i32], [Pointer(T.HICON)], [Pointer(T.HICON)], [T.UINT]], [['dllimport'], ['stdcall']]))('PrivateExtractIconExW');},
    PrivateExtractIconsA: function() {return (Fn(T.UINT, [[T.LPCSTR], [T.i32], [T.i32], [T.i32], [Pointer(T.HICON)], [Pointer(T.UINT)], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('PrivateExtractIconsA');},
    PrivateExtractIconsW: function() {return (Fn(T.UINT, [[T.LPCWSTR], [T.i32], [T.i32], [T.i32], [Pointer(T.HICON)], [Pointer(T.UINT)], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('PrivateExtractIconsW');},
    PtInRect: function() {return (Fn(T.BOOL, [[Pointer(T.RECT)], [T.POINT]], [['dllimport'], ['stdcall']]))('PtInRect');},
    RealChildWindowFromPoint: function() {return (Fn(T.HWND, [[T.HWND], [T.POINT]], [['dllimport'], ['stdcall']]))('RealChildWindowFromPoint');},
    RealGetWindowClassA: function() {return (Fn(T.UINT, [[T.HWND], [T.LPSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('RealGetWindowClassA');},
    RealGetWindowClassW: function() {return (Fn(T.UINT, [[T.HWND], [T.LPWSTR], [T.UINT]], [['dllimport'], ['stdcall']]))('RealGetWindowClassW');},
    RedrawWindow: function() {return (Fn(T.BOOL, [[T.HWND], [Pointer(T.RECT)], [T.HRGN], [T.UINT]], [['dllimport'], ['stdcall']]))('RedrawWindow');},
    RegisterClassA: function() {return (Fn(T.ATOM, [[Pointer(T.WNDCLASSA)]], [['dllimport'], ['stdcall']]))('RegisterClassA');},
    RegisterClassW: function() {return (Fn(T.ATOM, [[Pointer(T.WNDCLASSW)]], [['dllimport'], ['stdcall']]))('RegisterClassW');},
    RegisterClassExA: function() {return (Fn(T.ATOM, [[Pointer(T.WNDCLASSEXA)]], [['dllimport'], ['stdcall']]))('RegisterClassExA');},
    RegisterClassExW: function() {return (Fn(T.ATOM, [[Pointer(T.WNDCLASSEXW)]], [['dllimport'], ['stdcall']]))('RegisterClassExW');},
    RegisterClipboardFormatA: function() {return (Fn(T.UINT, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('RegisterClipboardFormatA');},
    RegisterClipboardFormatW: function() {return (Fn(T.UINT, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('RegisterClipboardFormatW');},
    RegisterDeviceNotificationA: function() {return (Fn(T.HDEVNOTIFY, [[T.HANDLE], [T.LPVOID], [T.DWORD]], [['dllimport'], ['stdcall']]))('RegisterDeviceNotificationA');},
    RegisterDeviceNotificationW: function() {return (Fn(T.HDEVNOTIFY, [[T.HANDLE], [T.LPVOID], [T.DWORD]], [['dllimport'], ['stdcall']]))('RegisterDeviceNotificationW');},
    RegisterHotKey: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('RegisterHotKey');},
    RegisterRawInputDevices: function() {return (Fn(T.BOOL, [[T.PRAWINPUTDEVICE], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('RegisterRawInputDevices');},
    RegisterWindowMessageA: function() {return (Fn(T.UINT, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('RegisterWindowMessageA');},
    RegisterWindowMessageW: function() {return (Fn(T.UINT, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('RegisterWindowMessageW');},
    ReleaseCapture: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('ReleaseCapture');},
    ReleaseDC: function() {return (Fn(T.INT, [[T.HWND], [T.HDC]], [['dllimport'], ['stdcall']]))('ReleaseDC');},
    RemoveMenu: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('RemoveMenu');},
    RemovePropA: function() {return (Fn(T.HANDLE, [[T.HWND], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('RemovePropA');},
    RemovePropW: function() {return (Fn(T.HANDLE, [[T.HWND], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('RemovePropW');},
    ReplyMessage: function() {return (Fn(T.BOOL, [[T.LRESULT]], [['dllimport'], ['stdcall']]))('ReplyMessage');},
    ScreenToClient: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPPOINT]], [['dllimport'], ['stdcall']]))('ScreenToClient');},
    ScrollChildren: function() {return (Fn(null, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('ScrollChildren');},
    ScrollDC: function() {return (Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [Pointer(T.RECT)], [Pointer(T.RECT)], [T.HRGN], [T.LPRECT]], [['dllimport'], ['stdcall']]))('ScrollDC');},
    ScrollWindow: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.INT], [Pointer(T.RECT)], [Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('ScrollWindow');},
    ScrollWindowEx: function() {return (Fn(T.INT, [[T.HWND], [T.INT], [T.INT], [Pointer(T.RECT)], [Pointer(T.RECT)], [T.HRGN], [T.LPRECT], [T.UINT]], [['dllimport'], ['stdcall']]))('ScrollWindowEx');},
    SendDlgItemMessageA: function() {return (Fn(T.LRESULT, [[T.HWND], [T.INT], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('SendDlgItemMessageA');},
    SendDlgItemMessageW: function() {return (Fn(T.LRESULT, [[T.HWND], [T.INT], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('SendDlgItemMessageW');},
    SendInput: function() {return (Fn(T.UINT, [[T.UINT], [T.LPINPUT], [T.i32]], [['dllimport'], ['stdcall']]))('SendInput');},
    SendMessageA: function() {return (Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('SendMessageA');},
    SendMessageW: function() {return (Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('SendMessageW');},
    SendMessageCallbackA: function() {return (Fn(T.BOOL, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM], [T.SENDASYNCPROC], [T.ULONG_PTR]], [['dllimport'], ['stdcall']]))('SendMessageCallbackA');},
    SendMessageCallbackW: function() {return (Fn(T.BOOL, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM], [T.SENDASYNCPROC], [T.ULONG_PTR]], [['dllimport'], ['stdcall']]))('SendMessageCallbackW');},
    SendMessageTimeoutA: function() {return (Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM], [T.UINT], [T.UINT], [T.PDWORD_PTR]], [['dllimport'], ['stdcall']]))('SendMessageTimeoutA');},
    SendMessageTimeoutW: function() {return (Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM], [T.UINT], [T.UINT], [T.PDWORD_PTR]], [['dllimport'], ['stdcall']]))('SendMessageTimeoutW');},
    SendNotifyMessageA: function() {return (Fn(T.BOOL, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('SendNotifyMessageA');},
    SendNotifyMessageW: function() {return (Fn(T.BOOL, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['dllimport'], ['stdcall']]))('SendNotifyMessageW');},
    SetActiveWindow: function() {return (Fn(T.HWND, [[T.HWND]], [['dllimport'], ['stdcall']]))('SetActiveWindow');},
    SetCapture: function() {return (Fn(T.HWND, [[T.HWND]], [['dllimport'], ['stdcall']]))('SetCapture');},
    SetCaretBlinkTime: function() {return (Fn(T.BOOL, [[T.UINT]], [['dllimport'], ['stdcall']]))('SetCaretBlinkTime');},
    SetCaretPos: function() {return (Fn(T.BOOL, [[T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('SetCaretPos');},
    SetClassLongA: function() {return (Fn(T.DWORD, [[T.HWND], [T.INT], [T.LONG]], [['dllimport'], ['stdcall']]))('SetClassLongA');},
    SetClassLongW: function() {return (Fn(T.DWORD, [[T.HWND], [T.INT], [T.LONG]], [['dllimport'], ['stdcall']]))('SetClassLongW');},
    SetClassWord: function() {return (Fn(T.WORD, [[T.HWND], [T.INT], [T.WORD]], [['dllimport'], ['stdcall']]))('SetClassWord');},
    SetClipboardData: function() {return (Fn(T.HANDLE, [[T.UINT], [T.HANDLE]], [['dllimport'], ['stdcall']]))('SetClipboardData');},
    SetClipboardViewer: function() {return (Fn(T.HWND, [[T.HWND]], [['dllimport'], ['stdcall']]))('SetClipboardViewer');},
    SetCursor: function() {return (Fn(T.HCURSOR, [[T.HCURSOR]], [['dllimport'], ['stdcall']]))('SetCursor');},
    SetCursorPos: function() {return (Fn(T.BOOL, [[T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('SetCursorPos');},
    SetDebugErrorLevel: function() {return (Fn(null, [[T.DWORD]], [['dllimport'], ['stdcall']]))('SetDebugErrorLevel');},
    SetDeskWallPaper: function() {return (Fn(T.BOOL, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('SetDeskWallPaper');},
    SetDlgItemInt: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.UINT], [T.BOOL]], [['dllimport'], ['stdcall']]))('SetDlgItemInt');},
    SetDlgItemTextA: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('SetDlgItemTextA');},
    SetDlgItemTextW: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('SetDlgItemTextW');},
    SetDoubleClickTime: function() {return (Fn(T.BOOL, [[T.UINT]], [['dllimport'], ['stdcall']]))('SetDoubleClickTime');},
    SetFocus: function() {return (Fn(T.HWND, [[T.HWND]], [['dllimport'], ['stdcall']]))('SetFocus');},
    SetForegroundWindow: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('SetForegroundWindow');},
    SetInternalWindowPos: function() {return (Fn(null, [[T.HWND], [T.UINT], [T.LPRECT], [T.LPPOINT]], [['dllimport'], ['stdcall']]))('SetInternalWindowPos');},
    SetKeyboardState: function() {return (Fn(T.BOOL, [[T.LPBYTE]], [['dllimport'], ['stdcall']]))('SetKeyboardState');},
    SetLastErrorEx: function() {return (Fn(null, [[T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetLastErrorEx');},
    SetLayeredWindowAttributes: function() {return (Fn(T.BOOL, [[T.HWND], [T.COLORREF], [T.BYTE], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetLayeredWindowAttributes');},
    SetMenu: function() {return (Fn(T.BOOL, [[T.HWND], [T.HMENU]], [['dllimport'], ['stdcall']]))('SetMenu');},
    SetMenuContextHelpId: function() {return (Fn(T.BOOL, [[T.HMENU], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetMenuContextHelpId');},
    SetMenuDefaultItem: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('SetMenuDefaultItem');},
    SetMenuInfo: function() {return (Fn(T.BOOL, [[T.HMENU], [T.LPCMENUINFO]], [['dllimport'], ['stdcall']]))('SetMenuInfo');},
    SetMenuItemBitmaps: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT], [T.HBITMAP], [T.HBITMAP]], [['dllimport'], ['stdcall']]))('SetMenuItemBitmaps');},
    SetMenuItemInfoA: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.BOOL], [Pointer(T.MENUITEMINFOA)]], [['dllimport'], ['stdcall']]))('SetMenuItemInfoA');},
    SetMenuItemInfoW: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.BOOL], [Pointer(T.MENUITEMINFOW)]], [['dllimport'], ['stdcall']]))('SetMenuItemInfoW');},
    SetMessageExtraInfo: function() {return (Fn(T.LPARAM, [[T.LPARAM]], [['dllimport'], ['stdcall']]))('SetMessageExtraInfo');},
    SetMessageQueue: function() {return (Fn(T.BOOL, [[T.INT]], [['dllimport'], ['stdcall']]))('SetMessageQueue');},
    SetProcessDefaultLayout: function() {return (Fn(T.BOOL, [[T.DWORD]], [['dllimport'], ['stdcall']]))('SetProcessDefaultLayout');},
    SetProcessWindowStation: function() {return (Fn(T.BOOL, [[T.HWINSTA]], [['dllimport'], ['stdcall']]))('SetProcessWindowStation');},
    SetParent: function() {return (Fn(T.HWND, [[T.HWND], [T.HWND]], [['dllimport'], ['stdcall']]))('SetParent');},
    SetPropA: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPCSTR], [T.HANDLE]], [['dllimport'], ['stdcall']]))('SetPropA');},
    SetPropW: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPCWSTR], [T.HANDLE]], [['dllimport'], ['stdcall']]))('SetPropW');},
    SetRect: function() {return (Fn(T.BOOL, [[T.LPRECT], [T.INT], [T.INT], [T.INT], [T.INT]], [['dllimport'], ['stdcall']]))('SetRect');},
    SetRectEmpty: function() {return (Fn(T.BOOL, [[T.LPRECT]], [['dllimport'], ['stdcall']]))('SetRectEmpty');},
    SetScrollInfo: function() {return (Fn(T.INT, [[T.HWND], [T.INT], [Pointer(T.SCROLLINFO)], [T.BOOL]], [['dllimport'], ['stdcall']]))('SetScrollInfo');},
    SetScrollPos: function() {return (Fn(T.INT, [[T.HWND], [T.INT], [T.INT], [T.BOOL]], [['dllimport'], ['stdcall']]))('SetScrollPos');},
    SetScrollRange: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.INT], [T.INT], [T.BOOL]], [['dllimport'], ['stdcall']]))('SetScrollRange');},
    SetSystemCursor: function() {return (Fn(T.BOOL, [[T.HCURSOR], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetSystemCursor');},
    SetSystemMenu: function() {return (Fn(T.BOOL, [[T.HWND], [T.HMENU]], [['dllimport'], ['stdcall']]))('SetSystemMenu');},
    SetSystemTimer: function() {return (Fn(T.UINT_PTR, [[T.HWND], [T.UINT_PTR], [T.UINT], [T.TIMERPROC]], [['dllimport'], ['stdcall']]))('SetSystemTimer');},
    SetThreadDesktop: function() {return (Fn(T.BOOL, [[T.HDESK]], [['dllimport'], ['stdcall']]))('SetThreadDesktop');},
    SetTimer: function() {return (Fn(T.UINT_PTR, [[T.HWND], [T.UINT_PTR], [T.UINT], [T.TIMERPROC]], [['dllimport'], ['stdcall']]))('SetTimer');},
    SetUserObjectInformationA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.INT], [T.LPVOID], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetUserObjectInformationA');},
    SetUserObjectInformationW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.INT], [T.LPVOID], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetUserObjectInformationW');},
    SetUserObjectSecurity: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PSECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR]], [['dllimport'], ['stdcall']]))('SetUserObjectSecurity');},
    SetWindowContextHelpId: function() {return (Fn(T.BOOL, [[T.HWND], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetWindowContextHelpId');},
    SetWindowLongA: function() {return (Fn(T.LONG, [[T.HWND], [T.INT], [T.LONG]], [['dllimport'], ['stdcall']]))('SetWindowLongA');},
    SetWindowLongW: function() {return (Fn(T.LONG, [[T.HWND], [T.INT], [T.LONG]], [['dllimport'], ['stdcall']]))('SetWindowLongW');},
    SetWindowPlacement: function() {return (Fn(T.BOOL, [[T.HWND], [Pointer(T.WINDOWPLACEMENT)]], [['dllimport'], ['stdcall']]))('SetWindowPlacement');},
    SetWindowsHookA: function() {return (Fn(T.HHOOK, [[T.INT], [T.HOOKPROC]], [['dllimport'], ['stdcall']]))('SetWindowsHookA');},
    SetWindowsHookW: function() {return (Fn(T.HHOOK, [[T.INT], [T.HOOKPROC]], [['dllimport'], ['stdcall']]))('SetWindowsHookW');},
    SetWindowsHookExA: function() {return (Fn(T.HHOOK, [[T.INT], [T.HOOKPROC], [T.HINSTANCE], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetWindowsHookExA');},
    SetWindowsHookExW: function() {return (Fn(T.HHOOK, [[T.INT], [T.HOOKPROC], [T.HINSTANCE], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetWindowsHookExW');},
    SetWindowPos: function() {return (Fn(T.BOOL, [[T.HWND], [T.HWND], [T.INT], [T.INT], [T.INT], [T.INT], [T.UINT]], [['dllimport'], ['stdcall']]))('SetWindowPos');},
    SetWindowRgn: function() {return (Fn(T.INT, [[T.HWND], [T.HRGN], [T.BOOL]], [['dllimport'], ['stdcall']]))('SetWindowRgn');},
    SetWindowTextA: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('SetWindowTextA');},
    SetWindowTextW: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('SetWindowTextW');},
    SetWindowWord: function() {return (Fn(T.WORD, [[T.HWND], [T.INT], [T.WORD]], [['dllimport'], ['stdcall']]))('SetWindowWord');},
    SetWinEventHook: function() {return (Fn(T.HWINEVENTHOOK, [[T.DWORD], [T.DWORD], [T.HMODULE], [T.WINEVENTPROC], [T.DWORD], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetWinEventHook');},
    ShowCaret: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('ShowCaret');},
    ShowCursor: function() {return (Fn(T.INT, [[T.BOOL]], [['dllimport'], ['stdcall']]))('ShowCursor');},
    ShowScrollBar: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.BOOL]], [['dllimport'], ['stdcall']]))('ShowScrollBar');},
    ShowOwnedPopups: function() {return (Fn(T.BOOL, [[T.HWND], [T.BOOL]], [['dllimport'], ['stdcall']]))('ShowOwnedPopups');},
    ShowWindow: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT]], [['dllimport'], ['stdcall']]))('ShowWindow');},
    ShowWindowAsync: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT]], [['dllimport'], ['stdcall']]))('ShowWindowAsync');},
    SubtractRect: function() {return (Fn(T.BOOL, [[T.LPRECT], [Pointer(T.RECT)], [Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('SubtractRect');},
    SwapMouseButton: function() {return (Fn(T.BOOL, [[T.BOOL]], [['dllimport'], ['stdcall']]))('SwapMouseButton');},
    SwitchDesktop: function() {return (Fn(T.BOOL, [[T.HDESK]], [['dllimport'], ['stdcall']]))('SwitchDesktop');},
    SwitchToThisWindow: function() {return (Fn(null, [[T.HWND], [T.BOOL]], [['dllimport'], ['stdcall']]))('SwitchToThisWindow');},
    SystemParametersInfoA: function() {return (Fn(T.BOOL, [[T.UINT], [T.UINT], [T.LPVOID], [T.UINT]], [['dllimport'], ['stdcall']]))('SystemParametersInfoA');},
    SystemParametersInfoW: function() {return (Fn(T.BOOL, [[T.UINT], [T.UINT], [T.LPVOID], [T.UINT]], [['dllimport'], ['stdcall']]))('SystemParametersInfoW');},
    TabbedTextOutA: function() {return (Fn(T.LONG, [[T.HDC], [T.INT], [T.INT], [T.LPCSTR], [T.INT], [T.INT], [Pointer(T.INT)], [T.INT]], [['dllimport'], ['stdcall']]))('TabbedTextOutA');},
    TabbedTextOutW: function() {return (Fn(T.LONG, [[T.HDC], [T.INT], [T.INT], [T.LPCWSTR], [T.INT], [T.INT], [Pointer(T.INT)], [T.INT]], [['dllimport'], ['stdcall']]))('TabbedTextOutW');},
    TileWindows: function() {return (Fn(T.WORD, [[T.HWND], [T.UINT], [Pointer(T.RECT)], [T.UINT], [Pointer(T.HWND)]], [['dllimport'], ['stdcall']]))('TileWindows');},
    ToAscii: function() {return (Fn(T.INT, [[T.UINT], [T.UINT], [Pointer(T.BYTE)], [T.LPWORD], [T.UINT]], [['dllimport'], ['stdcall']]))('ToAscii');},
    ToAsciiEx: function() {return (Fn(T.INT, [[T.UINT], [T.UINT], [Pointer(T.BYTE)], [T.LPWORD], [T.UINT], [T.HKL]], [['dllimport'], ['stdcall']]))('ToAsciiEx');},
    ToUnicode: function() {return (Fn(T.INT, [[T.UINT], [T.UINT], [Pointer(T.BYTE)], [T.LPWSTR], [T.i32], [T.UINT]], [['dllimport'], ['stdcall']]))('ToUnicode');},
    ToUnicodeEx: function() {return (Fn(T.INT, [[T.UINT], [T.UINT], [Pointer(T.BYTE)], [T.LPWSTR], [T.i32], [T.UINT], [T.HKL]], [['dllimport'], ['stdcall']]))('ToUnicodeEx');},
    TrackMouseEvent: function() {return (Fn(T.BOOL, [[T.LPTRACKMOUSEEVENT]], [['dllimport'], ['stdcall']]))('TrackMouseEvent');},
    TrackPopupMenu: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.INT], [T.INT], [T.INT], [T.HWND], [Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('TrackPopupMenu');},
    TrackPopupMenuEx: function() {return (Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.INT], [T.INT], [T.HWND], [T.LPTPMPARAMS]], [['dllimport'], ['stdcall']]))('TrackPopupMenuEx');},
    TranslateAcceleratorA: function() {return (Fn(T.INT, [[T.HWND], [T.HACCEL], [T.LPMSG]], [['dllimport'], ['stdcall']]))('TranslateAcceleratorA');},
    TranslateAcceleratorW: function() {return (Fn(T.INT, [[T.HWND], [T.HACCEL], [T.LPMSG]], [['dllimport'], ['stdcall']]))('TranslateAcceleratorW');},
    TranslateMDISysAccel: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPMSG]], [['dllimport'], ['stdcall']]))('TranslateMDISysAccel');},
    TranslateMessage: function() {return (Fn(T.BOOL, [[Pointer(T.MSG)]], [['dllimport'], ['stdcall']]))('TranslateMessage');},
    UnhookWinEvent: function() {return (Fn(T.BOOL, [[T.HWINEVENTHOOK]], [['dllimport'], ['stdcall']]))('UnhookWinEvent');},
    UnhookWindowsHook: function() {return (Fn(T.BOOL, [[T.INT], [T.HOOKPROC]], [['dllimport'], ['stdcall']]))('UnhookWindowsHook');},
    UnhookWindowsHookEx: function() {return (Fn(T.BOOL, [[T.HHOOK]], [['dllimport'], ['stdcall']]))('UnhookWindowsHookEx');},
    UnloadKeyboardLayout: function() {return (Fn(T.BOOL, [[T.HKL]], [['dllimport'], ['stdcall']]))('UnloadKeyboardLayout');},
    UnionRect: function() {return (Fn(T.BOOL, [[T.LPRECT], [Pointer(T.RECT)], [Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('UnionRect');},
    UnregisterClassA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.HINSTANCE]], [['dllimport'], ['stdcall']]))('UnregisterClassA');},
    UnregisterClassW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.HINSTANCE]], [['dllimport'], ['stdcall']]))('UnregisterClassW');},
    UnregisterDeviceNotification: function() {return (Fn(T.BOOL, [[T.HDEVNOTIFY]], [['dllimport'], ['stdcall']]))('UnregisterDeviceNotification');},
    UnregisterHotKey: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT]], [['dllimport'], ['stdcall']]))('UnregisterHotKey');},
    UpdateWindow: function() {return (Fn(T.BOOL, [[T.HWND]], [['dllimport'], ['stdcall']]))('UpdateWindow');},
    UserRealizePalette: function() {return (Fn(T.UINT, [[T.HDC]], [['dllimport'], ['stdcall']]))('UserRealizePalette');},
    ValidateRect: function() {return (Fn(T.BOOL, [[T.HWND], [Pointer(T.RECT)]], [['dllimport'], ['stdcall']]))('ValidateRect');},
    ValidateRgn: function() {return (Fn(T.BOOL, [[T.HWND], [T.HRGN]], [['dllimport'], ['stdcall']]))('ValidateRgn');},
    VkKeyScanA: function() {return (Fn(T.SHORT, [[T.CHAR]], [['dllimport'], ['stdcall']]))('VkKeyScanA');},
    VkKeyScanW: function() {return (Fn(T.SHORT, [[T.WCHAR]], [['dllimport'], ['stdcall']]))('VkKeyScanW');},
    VkKeyScanExA: function() {return (Fn(T.WORD, [[T.CHAR], [T.HKL]], [['dllimport'], ['stdcall']]))('VkKeyScanExA');},
    VkKeyScanExW: function() {return (Fn(T.WORD, [[T.WCHAR], [T.HKL]], [['dllimport'], ['stdcall']]))('VkKeyScanExW');},
    WaitForInputIdle: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.DWORD]], [['dllimport'], ['stdcall']]))('WaitForInputIdle');},
    WaitMessage: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('WaitMessage');},
    WindowFromDC: function() {return (Fn(T.HWND, [[T.HDC]], [['dllimport'], ['stdcall']]))('WindowFromDC');},
    WindowFromPoint: function() {return (Fn(T.HWND, [[T.POINT]], [['dllimport'], ['stdcall']]))('WindowFromPoint');},
    WinHelpA: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPCSTR], [T.UINT], [T.ULONG_PTR]], [['dllimport'], ['stdcall']]))('WinHelpA');},
    WinHelpW: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPCWSTR], [T.UINT], [T.ULONG_PTR]], [['dllimport'], ['stdcall']]))('WinHelpW');},
    keybd_event: function() {return (Fn(null, [[T.BYTE], [T.BYTE], [T.DWORD], [T.ULONG_PTR]], [['dllimport'], ['stdcall']]))('keybd_event');},
    mouse_event: function() {return (Fn(null, [[T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.ULONG_PTR]], [['dllimport'], ['stdcall']]))('mouse_event');},
    wsprintfA: function() {return (Fn(T.INT, [[T.LPSTR], [T.LPCSTR], '...'], [['dllimport'], ['cdecl']]))('wsprintfA');},
    wsprintfW: function() {return (Fn(T.INT, [[T.LPWSTR], [T.LPCWSTR], '...'], [['dllimport'], ['cdecl']]))('wsprintfW');},
    wvsprintfA: function() {return (Fn(T.INT, [[T.LPSTR], [T.LPCSTR], [T.va_list]], [['dllimport'], ['stdcall']]))('wvsprintfA');},
    wvsprintfW: function() {return (Fn(T.INT, [[T.LPWSTR], [T.LPCWSTR], [T.va_list]], [['dllimport'], ['stdcall']]))('wvsprintfW');},
    SYSTEM_KillSystemTimer: function() {return (Fn(T.WORD, [[T.WORD]], [['stdcall']]))('SYSTEM_KillSystemTimer');},
    CompareStringA: function() {return (Fn(T.INT, [[T.LCID], [T.DWORD], [T.LPCSTR], [T.INT], [T.LPCSTR], [T.INT]], [['dllimport'], ['stdcall']]))('CompareStringA');},
    CompareStringW: function() {return (Fn(T.INT, [[T.LCID], [T.DWORD], [T.LPCWSTR], [T.INT], [T.LPCWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('CompareStringW');},
    ConvertDefaultLocale: function() {return (Fn(T.LCID, [[T.LCID]], [['dllimport'], ['stdcall']]))('ConvertDefaultLocale');},
    EnumCalendarInfoA: function() {return (Fn(T.BOOL, [[T.CALINFO_ENUMPROCA], [T.LCID], [T.CALID], [T.CALTYPE]], [['dllimport'], ['stdcall']]))('EnumCalendarInfoA');},
    EnumCalendarInfoW: function() {return (Fn(T.BOOL, [[T.CALINFO_ENUMPROCW], [T.LCID], [T.CALID], [T.CALTYPE]], [['dllimport'], ['stdcall']]))('EnumCalendarInfoW');},
    EnumCalendarInfoExA: function() {return (Fn(T.BOOL, [[T.CALINFO_ENUMPROCEXA], [T.LCID], [T.CALID], [T.CALTYPE]], [['dllimport'], ['stdcall']]))('EnumCalendarInfoExA');},
    EnumCalendarInfoExW: function() {return (Fn(T.BOOL, [[T.CALINFO_ENUMPROCEXW], [T.LCID], [T.CALID], [T.CALTYPE]], [['dllimport'], ['stdcall']]))('EnumCalendarInfoExW');},
    EnumDateFormatsA: function() {return (Fn(T.BOOL, [[T.DATEFMT_ENUMPROCA], [T.LCID], [T.DWORD]], [['dllimport'], ['stdcall']]))('EnumDateFormatsA');},
    EnumDateFormatsW: function() {return (Fn(T.BOOL, [[T.DATEFMT_ENUMPROCW], [T.LCID], [T.DWORD]], [['dllimport'], ['stdcall']]))('EnumDateFormatsW');},
    EnumDateFormatsExA: function() {return (Fn(T.BOOL, [[T.DATEFMT_ENUMPROCEXA], [T.LCID], [T.DWORD]], [['dllimport'], ['stdcall']]))('EnumDateFormatsExA');},
    EnumDateFormatsExW: function() {return (Fn(T.BOOL, [[T.DATEFMT_ENUMPROCEXW], [T.LCID], [T.DWORD]], [['dllimport'], ['stdcall']]))('EnumDateFormatsExW');},
    EnumSystemCodePagesA: function() {return (Fn(T.BOOL, [[T.CODEPAGE_ENUMPROCA], [T.DWORD]], [['dllimport'], ['stdcall']]))('EnumSystemCodePagesA');},
    EnumSystemCodePagesW: function() {return (Fn(T.BOOL, [[T.CODEPAGE_ENUMPROCW], [T.DWORD]], [['dllimport'], ['stdcall']]))('EnumSystemCodePagesW');},
    EnumSystemGeoID: function() {return (Fn(T.BOOL, [[T.GEOCLASS], [T.GEOID], [T.GEO_ENUMPROC]], [['dllimport'], ['stdcall']]))('EnumSystemGeoID');},
    EnumSystemLocalesA: function() {return (Fn(T.BOOL, [[T.LOCALE_ENUMPROCA], [T.DWORD]], [['dllimport'], ['stdcall']]))('EnumSystemLocalesA');},
    EnumSystemLocalesW: function() {return (Fn(T.BOOL, [[T.LOCALE_ENUMPROCW], [T.DWORD]], [['dllimport'], ['stdcall']]))('EnumSystemLocalesW');},
    EnumSystemLocalesEx: function() {return (Fn(T.BOOL, [[T.LOCALE_ENUMPROCEX], [T.DWORD], [T.LPARAM], [T.LPVOID]], [['dllimport'], ['stdcall']]))('EnumSystemLocalesEx');},
    EnumSystemLanguageGroupsA: function() {return (Fn(T.BOOL, [[T.LANGUAGEGROUP_ENUMPROCA], [T.DWORD], [T.LONG_PTR]], [['dllimport'], ['stdcall']]))('EnumSystemLanguageGroupsA');},
    EnumSystemLanguageGroupsW: function() {return (Fn(T.BOOL, [[T.LANGUAGEGROUP_ENUMPROCW], [T.DWORD], [T.LONG_PTR]], [['dllimport'], ['stdcall']]))('EnumSystemLanguageGroupsW');},
    EnumLanguageGroupLocalesA: function() {return (Fn(T.BOOL, [[T.LANGGROUPLOCALE_ENUMPROCA], [T.LGRPID], [T.DWORD], [T.LONG_PTR]], [['dllimport'], ['stdcall']]))('EnumLanguageGroupLocalesA');},
    EnumLanguageGroupLocalesW: function() {return (Fn(T.BOOL, [[T.LANGGROUPLOCALE_ENUMPROCW], [T.LGRPID], [T.DWORD], [T.LONG_PTR]], [['dllimport'], ['stdcall']]))('EnumLanguageGroupLocalesW');},
    EnumTimeFormatsA: function() {return (Fn(T.BOOL, [[T.TIMEFMT_ENUMPROCA], [T.LCID], [T.DWORD]], [['dllimport'], ['stdcall']]))('EnumTimeFormatsA');},
    EnumTimeFormatsW: function() {return (Fn(T.BOOL, [[T.TIMEFMT_ENUMPROCW], [T.LCID], [T.DWORD]], [['dllimport'], ['stdcall']]))('EnumTimeFormatsW');},
    EnumUILanguagesA: function() {return (Fn(T.BOOL, [[T.UILANGUAGE_ENUMPROCA], [T.DWORD], [T.LONG_PTR]], [['dllimport'], ['stdcall']]))('EnumUILanguagesA');},
    EnumUILanguagesW: function() {return (Fn(T.BOOL, [[T.UILANGUAGE_ENUMPROCW], [T.DWORD], [T.LONG_PTR]], [['dllimport'], ['stdcall']]))('EnumUILanguagesW');},
    FoldStringA: function() {return (Fn(T.INT, [[T.DWORD], [T.LPCSTR], [T.INT], [T.LPSTR], [T.INT]], [['dllimport'], ['stdcall']]))('FoldStringA');},
    FoldStringW: function() {return (Fn(T.INT, [[T.DWORD], [T.LPCWSTR], [T.INT], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('FoldStringW');},
    GetACP: function() {return (Fn(T.UINT, [[null]], [['dllimport'], ['stdcall']]))('GetACP');},
    GetCPInfo: function() {return (Fn(T.BOOL, [[T.UINT], [T.LPCPINFO]], [['dllimport'], ['stdcall']]))('GetCPInfo');},
    GetCPInfoExA: function() {return (Fn(T.BOOL, [[T.UINT], [T.DWORD], [T.LPCPINFOEXA]], [['dllimport'], ['stdcall']]))('GetCPInfoExA');},
    GetCPInfoExW: function() {return (Fn(T.BOOL, [[T.UINT], [T.DWORD], [T.LPCPINFOEXW]], [['dllimport'], ['stdcall']]))('GetCPInfoExW');},
    GetCalendarInfoA: function() {return (Fn(T.INT, [[T.LCID], [T.DWORD], [T.DWORD], [T.LPSTR], [T.INT], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetCalendarInfoA');},
    GetCalendarInfoW: function() {return (Fn(T.INT, [[T.LCID], [T.DWORD], [T.DWORD], [T.LPWSTR], [T.INT], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetCalendarInfoW');},
    GetCurrencyFormatA: function() {return (Fn(T.INT, [[T.LCID], [T.DWORD], [T.LPCSTR], [Pointer(T.CURRENCYFMTA)], [T.LPSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetCurrencyFormatA');},
    GetCurrencyFormatW: function() {return (Fn(T.INT, [[T.LCID], [T.DWORD], [T.LPCWSTR], [Pointer(T.CURRENCYFMTW)], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetCurrencyFormatW');},
    GetDateFormatA: function() {return (Fn(T.INT, [[T.LCID], [T.DWORD], [Pointer(T.SYSTEMTIME)], [T.LPCSTR], [T.LPSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetDateFormatA');},
    GetDateFormatW: function() {return (Fn(T.INT, [[T.LCID], [T.DWORD], [Pointer(T.SYSTEMTIME)], [T.LPCWSTR], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetDateFormatW');},
    GetGeoInfoA: function() {return (Fn(T.INT, [[T.GEOID], [T.GEOTYPE], [T.LPSTR], [T.INT], [T.LANGID]], [['dllimport'], ['stdcall']]))('GetGeoInfoA');},
    GetGeoInfoW: function() {return (Fn(T.INT, [[T.GEOID], [T.GEOTYPE], [T.LPWSTR], [T.INT], [T.LANGID]], [['dllimport'], ['stdcall']]))('GetGeoInfoW');},
    GetLocaleInfoA: function() {return (Fn(T.INT, [[T.LCID], [T.LCTYPE], [T.LPSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetLocaleInfoA');},
    GetLocaleInfoW: function() {return (Fn(T.INT, [[T.LCID], [T.LCTYPE], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetLocaleInfoW');},
    GetNumberFormatA: function() {return (Fn(T.INT, [[T.LCID], [T.DWORD], [T.LPCSTR], [Pointer(T.NUMBERFMTA)], [T.LPSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetNumberFormatA');},
    GetNumberFormatW: function() {return (Fn(T.INT, [[T.LCID], [T.DWORD], [T.LPCWSTR], [Pointer(T.NUMBERFMTW)], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetNumberFormatW');},
    GetOEMCP: function() {return (Fn(T.UINT, [[null]], [['dllimport'], ['stdcall']]))('GetOEMCP');},
    GetStringTypeA: function() {return (Fn(T.BOOL, [[T.LCID], [T.DWORD], [T.LPCSTR], [T.INT], [T.LPWORD]], [['dllimport'], ['stdcall']]))('GetStringTypeA');},
    GetStringTypeW: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPCWSTR], [T.INT], [T.LPWORD]], [['dllimport'], ['stdcall']]))('GetStringTypeW');},
    GetStringTypeExA: function() {return (Fn(T.BOOL, [[T.LCID], [T.DWORD], [T.LPCSTR], [T.INT], [T.LPWORD]], [['dllimport'], ['stdcall']]))('GetStringTypeExA');},
    GetStringTypeExW: function() {return (Fn(T.BOOL, [[T.LCID], [T.DWORD], [T.LPCWSTR], [T.INT], [T.LPWORD]], [['dllimport'], ['stdcall']]))('GetStringTypeExW');},
    GetSystemDefaultLangID: function() {return (Fn(T.LANGID, [[null]], [['dllimport'], ['stdcall']]))('GetSystemDefaultLangID');},
    GetSystemDefaultLCID: function() {return (Fn(T.LCID, [[null]], [['dllimport'], ['stdcall']]))('GetSystemDefaultLCID');},
    GetSystemDefaultUILanguage: function() {return (Fn(T.LANGID, [[null]], [['dllimport'], ['stdcall']]))('GetSystemDefaultUILanguage');},
    GetThreadLocale: function() {return (Fn(T.LCID, [[null]], [['dllimport'], ['stdcall']]))('GetThreadLocale');},
    GetTimeFormatA: function() {return (Fn(T.INT, [[T.LCID], [T.DWORD], [Pointer(T.SYSTEMTIME)], [T.LPCSTR], [T.LPSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetTimeFormatA');},
    GetTimeFormatW: function() {return (Fn(T.INT, [[T.LCID], [T.DWORD], [Pointer(T.SYSTEMTIME)], [T.LPCWSTR], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('GetTimeFormatW');},
    GetUserDefaultLangID: function() {return (Fn(T.LANGID, [[null]], [['dllimport'], ['stdcall']]))('GetUserDefaultLangID');},
    GetUserDefaultLCID: function() {return (Fn(T.LCID, [[null]], [['dllimport'], ['stdcall']]))('GetUserDefaultLCID');},
    GetUserDefaultLocaleName: function() {return (Fn(T.INT, [[T.LPWSTR], [T.i32]], [['dllimport'], ['stdcall']]))('GetUserDefaultLocaleName');},
    GetUserDefaultUILanguage: function() {return (Fn(T.LANGID, [[null]], [['dllimport'], ['stdcall']]))('GetUserDefaultUILanguage');},
    GetUserGeoID: function() {return (Fn(T.GEOID, [[T.GEOCLASS]], [['dllimport'], ['stdcall']]))('GetUserGeoID');},
    IdnToAscii: function() {return (Fn(T.INT, [[T.DWORD], [T.LPCWSTR], [T.INT], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('IdnToAscii');},
    IdnToNameprepUnicode: function() {return (Fn(T.INT, [[T.DWORD], [T.LPCWSTR], [T.INT], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('IdnToNameprepUnicode');},
    IdnToUnicode: function() {return (Fn(T.INT, [[T.DWORD], [T.LPCWSTR], [T.INT], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('IdnToUnicode');},
    IsDBCSLeadByte: function() {return (Fn(T.BOOL, [[T.BYTE]], [['dllimport'], ['stdcall']]))('IsDBCSLeadByte');},
    IsDBCSLeadByteEx: function() {return (Fn(T.BOOL, [[T.UINT], [T.BYTE]], [['dllimport'], ['stdcall']]))('IsDBCSLeadByteEx');},
    IsNormalizedString: function() {return (Fn(T.BOOL, [[T.NORM_FORM], [T.LPCWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('IsNormalizedString');},
    IsValidCodePage: function() {return (Fn(T.BOOL, [[T.UINT]], [['dllimport'], ['stdcall']]))('IsValidCodePage');},
    IsValidLocale: function() {return (Fn(T.BOOL, [[T.LCID], [T.DWORD]], [['dllimport'], ['stdcall']]))('IsValidLocale');},
    IsValidLanguageGroup: function() {return (Fn(T.BOOL, [[T.LGRPID], [T.DWORD]], [['dllimport'], ['stdcall']]))('IsValidLanguageGroup');},
    LCIDToLocaleName: function() {return (Fn(T.INT, [[T.LCID], [T.LPWSTR], [T.INT], [T.DWORD]], [['dllimport'], ['stdcall']]))('LCIDToLocaleName');},
    LCMapStringA: function() {return (Fn(T.INT, [[T.LCID], [T.DWORD], [T.LPCSTR], [T.INT], [T.LPSTR], [T.INT]], [['dllimport'], ['stdcall']]))('LCMapStringA');},
    LCMapStringW: function() {return (Fn(T.INT, [[T.LCID], [T.DWORD], [T.LPCWSTR], [T.INT], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('LCMapStringW');},
    LocaleNameToLCID: function() {return (Fn(T.LCID, [[T.LPCWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('LocaleNameToLCID');},
    MultiByteToWideChar: function() {return (Fn(T.INT, [[T.UINT], [T.DWORD], [T.LPCSTR], [T.INT], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('MultiByteToWideChar');},
    NormalizeString: function() {return (Fn(T.INT, [[T.NORM_FORM], [T.LPCWSTR], [T.INT], [T.LPWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('NormalizeString');},
    SetCalendarInfoA: function() {return (Fn(T.INT, [[T.LCID], [T.CALID], [T.CALTYPE], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('SetCalendarInfoA');},
    SetCalendarInfoW: function() {return (Fn(T.INT, [[T.LCID], [T.CALID], [T.CALTYPE], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('SetCalendarInfoW');},
    SetLocaleInfoA: function() {return (Fn(T.BOOL, [[T.LCID], [T.LCTYPE], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('SetLocaleInfoA');},
    SetLocaleInfoW: function() {return (Fn(T.BOOL, [[T.LCID], [T.LCTYPE], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('SetLocaleInfoW');},
    SetThreadLocale: function() {return (Fn(T.BOOL, [[T.LCID]], [['dllimport'], ['stdcall']]))('SetThreadLocale');},
    SetUserGeoID: function() {return (Fn(T.BOOL, [[T.GEOID]], [['dllimport'], ['stdcall']]))('SetUserGeoID');},
    WideCharToMultiByte: function() {return (Fn(T.INT, [[T.UINT], [T.DWORD], [T.LPCWSTR], [T.INT], [T.LPSTR], [T.INT], [T.LPCSTR], [T.LPBOOL]], [['dllimport'], ['stdcall']]))('WideCharToMultiByte');},
    GetLargestConsoleWindowSize: function() {return (Fn(T.DWORD, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('GetLargestConsoleWindowSize');},
    AddConsoleAliasA: function() {return (Fn(T.BOOL, [[T.LPSTR], [T.LPSTR], [T.LPSTR]], [['dllimport'], ['stdcall']]))('AddConsoleAliasA');},
    AddConsoleAliasW: function() {return (Fn(T.BOOL, [[T.LPWSTR], [T.LPWSTR], [T.LPWSTR]], [['dllimport'], ['stdcall']]))('AddConsoleAliasW');},
    AllocConsole: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('AllocConsole');},
    AttachConsole: function() {return (Fn(T.BOOL, [[T.DWORD]], [['dllimport'], ['stdcall']]))('AttachConsole');},
    CreateConsoleScreenBuffer: function() {return (Fn(T.HANDLE, [[T.DWORD], [T.DWORD], [T.LPSECURITY_ATTRIBUTES], [T.DWORD], [T.LPVOID]], [['dllimport'], ['stdcall']]))('CreateConsoleScreenBuffer');},
    FillConsoleOutputAttribute: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.WORD], [T.DWORD], [T.COORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('FillConsoleOutputAttribute');},
    FillConsoleOutputCharacterA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.CHAR], [T.DWORD], [T.COORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('FillConsoleOutputCharacterA');},
    FillConsoleOutputCharacterW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.WCHAR], [T.DWORD], [T.COORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('FillConsoleOutputCharacterW');},
    FlushConsoleInputBuffer: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('FlushConsoleInputBuffer');},
    FreeConsole: function() {return (Fn(T.BOOL, [[null]], [['dllimport'], ['stdcall']]))('FreeConsole');},
    GenerateConsoleCtrlEvent: function() {return (Fn(T.BOOL, [[T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('GenerateConsoleCtrlEvent');},
    GetConsoleAliasA: function() {return (Fn(T.DWORD, [[T.LPSTR], [T.LPSTR], [T.DWORD], [T.LPSTR]], [['dllimport'], ['stdcall']]))('GetConsoleAliasA');},
    GetConsoleAliasW: function() {return (Fn(T.DWORD, [[T.LPWSTR], [T.LPWSTR], [T.DWORD], [T.LPWSTR]], [['dllimport'], ['stdcall']]))('GetConsoleAliasW');},
    GetConsoleAliasesA: function() {return (Fn(T.DWORD, [[T.LPSTR], [T.DWORD], [T.LPSTR]], [['dllimport'], ['stdcall']]))('GetConsoleAliasesA');},
    GetConsoleAliasesW: function() {return (Fn(T.DWORD, [[T.LPWSTR], [T.DWORD], [T.LPWSTR]], [['dllimport'], ['stdcall']]))('GetConsoleAliasesW');},
    GetConsoleAliasesLengthA: function() {return (Fn(T.DWORD, [[T.LPSTR]], [['dllimport'], ['stdcall']]))('GetConsoleAliasesLengthA');},
    GetConsoleAliasesLengthW: function() {return (Fn(T.DWORD, [[T.LPWSTR]], [['dllimport'], ['stdcall']]))('GetConsoleAliasesLengthW');},
    GetConsoleAliasExesA: function() {return (Fn(T.DWORD, [[T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetConsoleAliasExesA');},
    GetConsoleAliasExesW: function() {return (Fn(T.DWORD, [[T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetConsoleAliasExesW');},
    GetConsoleAliasExesLengthA: function() {return (Fn(T.DWORD, [[null]], [['dllimport'], ['stdcall']]))('GetConsoleAliasExesLengthA');},
    GetConsoleAliasExesLengthW: function() {return (Fn(T.DWORD, [[null]], [['dllimport'], ['stdcall']]))('GetConsoleAliasExesLengthW');},
    GetConsoleCP: function() {return (Fn(T.UINT, [[null]], [['dllimport'], ['stdcall']]))('GetConsoleCP');},
    GetConsoleCursorInfo: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCONSOLE_CURSOR_INFO]], [['dllimport'], ['stdcall']]))('GetConsoleCursorInfo');},
    GetConsoleDisplayMode: function() {return (Fn(T.BOOL, [[T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetConsoleDisplayMode');},
    GetConsoleFontSize: function() {return (Fn(T.COORD, [[T.HANDLE], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetConsoleFontSize');},
    GetConsoleHistoryInfo: function() {return (Fn(T.BOOL, [[T.LPCONSOLE_HISTORY_INFO]], [['dllimport'], ['stdcall']]))('GetConsoleHistoryInfo');},
    GetConsoleInputExeNameA: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPSTR]], [['dllimport'], ['stdcall']]))('GetConsoleInputExeNameA');},
    GetConsoleInputExeNameW: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPWSTR]], [['dllimport'], ['stdcall']]))('GetConsoleInputExeNameW');},
    GetConsoleMode: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetConsoleMode');},
    GetConsoleOriginalTitleA: function() {return (Fn(T.DWORD, [[T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetConsoleOriginalTitleA');},
    GetConsoleOriginalTitleW: function() {return (Fn(T.DWORD, [[T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetConsoleOriginalTitleW');},
    GetConsoleOutputCP: function() {return (Fn(T.UINT, [[null]], [['dllimport'], ['stdcall']]))('GetConsoleOutputCP');},
    GetConsoleProcessList: function() {return (Fn(T.DWORD, [[T.LPDWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetConsoleProcessList');},
    GetConsoleScreenBufferInfo: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCONSOLE_SCREEN_BUFFER_INFO]], [['dllimport'], ['stdcall']]))('GetConsoleScreenBufferInfo');},
    GetConsoleScreenBufferInfoEx: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCONSOLE_SCREEN_BUFFER_INFOEX]], [['dllimport'], ['stdcall']]))('GetConsoleScreenBufferInfoEx');},
    GetConsoleTitleA: function() {return (Fn(T.DWORD, [[T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetConsoleTitleA');},
    GetConsoleTitleW: function() {return (Fn(T.DWORD, [[T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('GetConsoleTitleW');},
    GetConsoleWindow: function() {return (Fn(T.HWND, [[null]], [['dllimport'], ['stdcall']]))('GetConsoleWindow');},
    GetCurrentConsoleFont: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.BOOL], [T.LPCONSOLE_FONT_INFO]], [['dllimport'], ['stdcall']]))('GetCurrentConsoleFont');},
    GetCurrentConsoleFontEx: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.BOOL], [T.LPCONSOLE_FONT_INFOEX]], [['dllimport'], ['stdcall']]))('GetCurrentConsoleFontEx');},
    GetNumberOfConsoleInputEvents: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetNumberOfConsoleInputEvents');},
    GetNumberOfConsoleMouseButtons: function() {return (Fn(T.BOOL, [[T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetNumberOfConsoleMouseButtons');},
    PeekConsoleInputA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PINPUT_RECORD], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('PeekConsoleInputA');},
    PeekConsoleInputW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PINPUT_RECORD], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('PeekConsoleInputW');},
    ReadConsoleA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.LPVOID]], [['dllimport'], ['stdcall']]))('ReadConsoleA');},
    ReadConsoleW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.LPVOID]], [['dllimport'], ['stdcall']]))('ReadConsoleW');},
    ReadConsoleInputA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PINPUT_RECORD], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('ReadConsoleInputA');},
    ReadConsoleInputW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.PINPUT_RECORD], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('ReadConsoleInputW');},
    ReadConsoleOutputA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCHAR_INFO], [T.COORD], [T.COORD], [T.LPSMALL_RECT]], [['dllimport'], ['stdcall']]))('ReadConsoleOutputA');},
    ReadConsoleOutputW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCHAR_INFO], [T.COORD], [T.COORD], [T.LPSMALL_RECT]], [['dllimport'], ['stdcall']]))('ReadConsoleOutputW');},
    ReadConsoleOutputAttribute: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPWORD], [T.DWORD], [T.COORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('ReadConsoleOutputAttribute');},
    ReadConsoleOutputCharacterA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPSTR], [T.DWORD], [T.COORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('ReadConsoleOutputCharacterA');},
    ReadConsoleOutputCharacterW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPWSTR], [T.DWORD], [T.COORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('ReadConsoleOutputCharacterW');},
    ScrollConsoleScreenBufferA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPSMALL_RECT], [T.LPSMALL_RECT], [T.COORD], [T.LPCHAR_INFO]], [['dllimport'], ['stdcall']]))('ScrollConsoleScreenBufferA');},
    ScrollConsoleScreenBufferW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPSMALL_RECT], [T.LPSMALL_RECT], [T.COORD], [T.LPCHAR_INFO]], [['dllimport'], ['stdcall']]))('ScrollConsoleScreenBufferW');},
    SetConsoleActiveScreenBuffer: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['dllimport'], ['stdcall']]))('SetConsoleActiveScreenBuffer');},
    SetConsoleCP: function() {return (Fn(T.BOOL, [[T.UINT]], [['dllimport'], ['stdcall']]))('SetConsoleCP');},
    SetConsoleCtrlHandler: function() {return (Fn(T.BOOL, [[T.PHANDLER_ROUTINE], [T.BOOL]], [['dllimport'], ['stdcall']]))('SetConsoleCtrlHandler');},
    SetConsoleCursorInfo: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCONSOLE_CURSOR_INFO]], [['dllimport'], ['stdcall']]))('SetConsoleCursorInfo');},
    SetConsoleCursorPosition: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.COORD]], [['dllimport'], ['stdcall']]))('SetConsoleCursorPosition');},
    SetConsoleDisplayMode: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPCOORD]], [['dllimport'], ['stdcall']]))('SetConsoleDisplayMode');},
    SetConsoleHistoryInfo: function() {return (Fn(T.BOOL, [[T.LPCONSOLE_HISTORY_INFO]], [['dllimport'], ['stdcall']]))('SetConsoleHistoryInfo');},
    SetConsoleMode: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.DWORD]], [['dllimport'], ['stdcall']]))('SetConsoleMode');},
    SetConsoleOutputCP: function() {return (Fn(T.BOOL, [[T.UINT]], [['dllimport'], ['stdcall']]))('SetConsoleOutputCP');},
    SetConsoleScreenBufferInfoEx: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCONSOLE_SCREEN_BUFFER_INFOEX]], [['dllimport'], ['stdcall']]))('SetConsoleScreenBufferInfoEx');},
    SetConsoleScreenBufferSize: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.COORD]], [['dllimport'], ['stdcall']]))('SetConsoleScreenBufferSize');},
    SetConsoleTextAttribute: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.WORD]], [['dllimport'], ['stdcall']]))('SetConsoleTextAttribute');},
    SetConsoleTitleA: function() {return (Fn(T.BOOL, [[T.LPCSTR]], [['dllimport'], ['stdcall']]))('SetConsoleTitleA');},
    SetConsoleTitleW: function() {return (Fn(T.BOOL, [[T.LPCWSTR]], [['dllimport'], ['stdcall']]))('SetConsoleTitleW');},
    SetConsoleWindowInfo: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.BOOL], [T.LPSMALL_RECT]], [['dllimport'], ['stdcall']]))('SetConsoleWindowInfo');},
    SetCurrentConsoleFontEx: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.BOOL], [T.LPCONSOLE_FONT_INFOEX]], [['dllimport'], ['stdcall']]))('SetCurrentConsoleFontEx');},
    WriteConsoleA: function() {return (Fn(T.BOOL, [[T.HANDLE], [Pointer(null)], [T.DWORD], [T.LPDWORD], [T.LPVOID]], [['dllimport'], ['stdcall']]))('WriteConsoleA');},
    WriteConsoleW: function() {return (Fn(T.BOOL, [[T.HANDLE], [Pointer(null)], [T.DWORD], [T.LPDWORD], [T.LPVOID]], [['dllimport'], ['stdcall']]))('WriteConsoleW');},
    WriteConsoleInputA: function() {return (Fn(T.BOOL, [[T.HANDLE], [Pointer(T.INPUT_RECORD)], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('WriteConsoleInputA');},
    WriteConsoleInputW: function() {return (Fn(T.BOOL, [[T.HANDLE], [Pointer(T.INPUT_RECORD)], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('WriteConsoleInputW');},
    WriteConsoleOutputA: function() {return (Fn(T.BOOL, [[T.HANDLE], [Pointer(T.CHAR_INFO)], [T.COORD], [T.COORD], [T.LPSMALL_RECT]], [['dllimport'], ['stdcall']]))('WriteConsoleOutputA');},
    WriteConsoleOutputW: function() {return (Fn(T.BOOL, [[T.HANDLE], [Pointer(T.CHAR_INFO)], [T.COORD], [T.COORD], [T.LPSMALL_RECT]], [['dllimport'], ['stdcall']]))('WriteConsoleOutputW');},
    WriteConsoleOutputAttribute: function() {return (Fn(T.BOOL, [[T.HANDLE], [Pointer(T.WORD)], [T.DWORD], [T.COORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('WriteConsoleOutputAttribute');},
    WriteConsoleOutputCharacterA: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCSTR], [T.DWORD], [T.COORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('WriteConsoleOutputCharacterA');},
    WriteConsoleOutputCharacterW: function() {return (Fn(T.BOOL, [[T.HANDLE], [T.LPCWSTR], [T.DWORD], [T.COORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('WriteConsoleOutputCharacterW');},
    VerFindFileA: function() {return (Fn(T.DWORD, [[T.DWORD], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPSTR], [T.PUINT], [T.LPSTR], [T.PUINT]], [['stdcall']]))('VerFindFileA');},
    VerFindFileW: function() {return (Fn(T.DWORD, [[T.DWORD], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPWSTR], [T.PUINT], [T.LPWSTR], [T.PUINT]], [['stdcall']]))('VerFindFileW');},
    VerInstallFileA: function() {return (Fn(T.DWORD, [[T.DWORD], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPSTR], [T.PUINT]], [['stdcall']]))('VerInstallFileA');},
    VerInstallFileW: function() {return (Fn(T.DWORD, [[T.DWORD], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPWSTR], [T.PUINT]], [['stdcall']]))('VerInstallFileW');},
    VerLanguageNameA: function() {return (Fn(T.DWORD, [[T.DWORD], [T.LPSTR], [T.DWORD]], [['stdcall']]))('VerLanguageNameA');},
    VerLanguageNameW: function() {return (Fn(T.DWORD, [[T.DWORD], [T.LPWSTR], [T.DWORD]], [['stdcall']]))('VerLanguageNameW');},
    VerQueryValueA: function() {return (Fn(T.BOOL, [[T.LPCVOID], [T.LPCSTR], [Pointer(T.LPVOID)], [T.PUINT]], [['stdcall']]))('VerQueryValueA');},
    VerQueryValueW: function() {return (Fn(T.BOOL, [[T.LPCVOID], [T.LPCWSTR], [Pointer(T.LPVOID)], [T.PUINT]], [['stdcall']]))('VerQueryValueW');},
    GetFileVersionInfoSizeA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.LPDWORD]], [['stdcall']]))('GetFileVersionInfoSizeA');},
    GetFileVersionInfoSizeW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.LPDWORD]], [['stdcall']]))('GetFileVersionInfoSizeW');},
    GetFileVersionInfoA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.DWORD], [T.DWORD], [T.LPVOID]], [['stdcall']]))('GetFileVersionInfoA');},
    GetFileVersionInfoW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD], [T.DWORD], [T.LPVOID]], [['stdcall']]))('GetFileVersionInfoW');},
    AbortSystemShutdownA: function() {return (Fn(T.BOOL, [[T.LPSTR]], [['dllimport'], ['stdcall']]))('AbortSystemShutdownA');},
    AbortSystemShutdownW: function() {return (Fn(T.BOOL, [[T.LPWSTR]], [['dllimport'], ['stdcall']]))('AbortSystemShutdownW');},
    InitiateSystemShutdownA: function() {return (Fn(T.BOOL, [[T.LPSTR], [T.LPSTR], [T.DWORD], [T.BOOL], [T.BOOL]], [['dllimport'], ['stdcall']]))('InitiateSystemShutdownA');},
    InitiateSystemShutdownW: function() {return (Fn(T.BOOL, [[T.LPWSTR], [T.LPWSTR], [T.DWORD], [T.BOOL], [T.BOOL]], [['dllimport'], ['stdcall']]))('InitiateSystemShutdownW');},
    InitiateSystemShutdownExA: function() {return (Fn(T.BOOL, [[T.LPSTR], [T.LPSTR], [T.DWORD], [T.BOOL], [T.BOOL], [T.DWORD]], [['dllimport'], ['stdcall']]))('InitiateSystemShutdownExA');},
    InitiateSystemShutdownExW: function() {return (Fn(T.BOOL, [[T.LPWSTR], [T.LPWSTR], [T.DWORD], [T.BOOL], [T.BOOL], [T.DWORD]], [['dllimport'], ['stdcall']]))('InitiateSystemShutdownExW');},
    RegCloseKey: function() {return (Fn(T.LSTATUS, [[T.HKEY]], [['dllimport'], ['stdcall']]))('RegCloseKey');},
    RegConnectRegistryA: function() {return (Fn(T.LSTATUS, [[T.LPCSTR], [T.HKEY], [T.PHKEY]], [['dllimport'], ['stdcall']]))('RegConnectRegistryA');},
    RegConnectRegistryW: function() {return (Fn(T.LSTATUS, [[T.LPCWSTR], [T.HKEY], [T.PHKEY]], [['dllimport'], ['stdcall']]))('RegConnectRegistryW');},
    RegCreateKeyA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.PHKEY]], [['dllimport'], ['stdcall']]))('RegCreateKeyA');},
    RegCreateKeyW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.PHKEY]], [['dllimport'], ['stdcall']]))('RegCreateKeyW');},
    RegCreateKeyExA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.DWORD], [T.LPSTR], [T.DWORD], [T.REGSAM], [T.LPSECURITY_ATTRIBUTES], [T.PHKEY], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('RegCreateKeyExA');},
    RegCreateKeyExW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.DWORD], [T.LPWSTR], [T.DWORD], [T.REGSAM], [T.LPSECURITY_ATTRIBUTES], [T.PHKEY], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('RegCreateKeyExW');},
    RegDeleteKeyA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('RegDeleteKeyA');},
    RegDeleteKeyW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('RegDeleteKeyW');},
    RegDeleteKeyExA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.REGSAM], [T.DWORD]], [['dllimport'], ['stdcall']]))('RegDeleteKeyExA');},
    RegDeleteKeyExW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.REGSAM], [T.DWORD]], [['dllimport'], ['stdcall']]))('RegDeleteKeyExW');},
    RegDeleteKeyValueA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('RegDeleteKeyValueA');},
    RegDeleteKeyValueW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('RegDeleteKeyValueW');},
    RegDeleteTreeA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('RegDeleteTreeA');},
    RegDeleteTreeW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('RegDeleteTreeW');},
    RegDeleteValueA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('RegDeleteValueA');},
    RegDeleteValueW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('RegDeleteValueW');},
    RegDisablePredefinedCache: function() {return (Fn(T.LSTATUS, [[null]], [['dllimport'], ['stdcall']]))('RegDisablePredefinedCache');},
    RegEnumKeyA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.DWORD], [T.LPSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('RegEnumKeyA');},
    RegEnumKeyW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.DWORD], [T.LPWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('RegEnumKeyW');},
    RegEnumKeyExA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.DWORD], [T.LPSTR], [T.LPDWORD], [T.LPDWORD], [T.LPSTR], [T.LPDWORD], [T.LPFILETIME]], [['dllimport'], ['stdcall']]))('RegEnumKeyExA');},
    RegEnumKeyExW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.DWORD], [T.LPWSTR], [T.LPDWORD], [T.LPDWORD], [T.LPWSTR], [T.LPDWORD], [T.LPFILETIME]], [['dllimport'], ['stdcall']]))('RegEnumKeyExW');},
    RegEnumValueA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.DWORD], [T.LPSTR], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPBYTE], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('RegEnumValueA');},
    RegEnumValueW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.DWORD], [T.LPWSTR], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPBYTE], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('RegEnumValueW');},
    RegFlushKey: function() {return (Fn(T.LSTATUS, [[T.HKEY]], [['dllimport'], ['stdcall']]))('RegFlushKey');},
    RegGetKeySecurity: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('RegGetKeySecurity');},
    RegGetValueA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.LPDWORD], [T.PVOID], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('RegGetValueA');},
    RegGetValueW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.LPDWORD], [T.PVOID], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('RegGetValueW');},
    RegLoadKeyA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('RegLoadKeyA');},
    RegLoadKeyW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('RegLoadKeyW');},
    RegLoadMUIStringA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.LPSTR], [T.DWORD], [T.LPDWORD], [T.DWORD], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('RegLoadMUIStringA');},
    RegLoadMUIStringW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.LPWSTR], [T.DWORD], [T.LPDWORD], [T.DWORD], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('RegLoadMUIStringW');},
    RegNotifyChangeKeyValue: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.BOOL], [T.DWORD], [T.HANDLE], [T.BOOL]], [['dllimport'], ['stdcall']]))('RegNotifyChangeKeyValue');},
    RegOpenCurrentUser: function() {return (Fn(T.LSTATUS, [[T.REGSAM], [T.PHKEY]], [['dllimport'], ['stdcall']]))('RegOpenCurrentUser');},
    RegOpenKeyA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.PHKEY]], [['dllimport'], ['stdcall']]))('RegOpenKeyA');},
    RegOpenKeyW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.PHKEY]], [['dllimport'], ['stdcall']]))('RegOpenKeyW');},
    RegOpenKeyExW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.DWORD], [T.REGSAM], [T.PHKEY]], [['dllimport'], ['stdcall']]))('RegOpenKeyExW');},
    RegOpenKeyExA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.DWORD], [T.REGSAM], [T.PHKEY]], [['dllimport'], ['stdcall']]))('RegOpenKeyExA');},
    RegOpenUserClassesRoot: function() {return (Fn(T.LSTATUS, [[T.HANDLE], [T.DWORD], [T.REGSAM], [T.PHKEY]], [['dllimport'], ['stdcall']]))('RegOpenUserClassesRoot');},
    RegOverridePredefKey: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.HKEY]], [['dllimport'], ['stdcall']]))('RegOverridePredefKey');},
    RegQueryInfoKeyW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPWSTR], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPFILETIME]], [['dllimport'], ['stdcall']]))('RegQueryInfoKeyW');},
    RegQueryInfoKeyA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPSTR], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPFILETIME]], [['dllimport'], ['stdcall']]))('RegQueryInfoKeyA');},
    RegQueryMultipleValuesA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.PVALENTA], [T.DWORD], [T.LPSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('RegQueryMultipleValuesA');},
    RegQueryMultipleValuesW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.PVALENTW], [T.DWORD], [T.LPWSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('RegQueryMultipleValuesW');},
    RegQueryValueA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.LPSTR], [T.LPLONG]], [['dllimport'], ['stdcall']]))('RegQueryValueA');},
    RegQueryValueW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.LPWSTR], [T.LPLONG]], [['dllimport'], ['stdcall']]))('RegQueryValueW');},
    RegQueryValueExA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.LPDWORD], [T.LPDWORD], [T.LPBYTE], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('RegQueryValueExA');},
    RegQueryValueExW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.LPDWORD], [T.LPDWORD], [T.LPBYTE], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('RegQueryValueExW');},
    RegReplaceKeyA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('RegReplaceKeyA');},
    RegReplaceKeyW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('RegReplaceKeyW');},
    RegRestoreKeyA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('RegRestoreKeyA');},
    RegRestoreKeyW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('RegRestoreKeyW');},
    RegSaveKeyA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.LPSECURITY_ATTRIBUTES]], [['dllimport'], ['stdcall']]))('RegSaveKeyA');},
    RegSaveKeyW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.LPSECURITY_ATTRIBUTES]], [['dllimport'], ['stdcall']]))('RegSaveKeyW');},
    RegSetKeySecurity: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR]], [['dllimport'], ['stdcall']]))('RegSetKeySecurity');},
    RegSetValueA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.DWORD], [T.LPCSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('RegSetValueA');},
    RegSetValueW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.DWORD], [T.LPCWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('RegSetValueW');},
    RegSetValueExA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.DWORD], [T.DWORD], [Pointer(T.BYTE)], [T.DWORD]], [['dllimport'], ['stdcall']]))('RegSetValueExA');},
    RegSetValueExW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.DWORD], [T.DWORD], [Pointer(T.BYTE)], [T.DWORD]], [['dllimport'], ['stdcall']]))('RegSetValueExW');},
    RegUnLoadKeyA: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('RegUnLoadKeyA');},
    RegUnLoadKeyW: function() {return (Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('RegUnLoadKeyW');},
    WNetAddConnectionA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR]], [['stdcall']]))('WNetAddConnectionA');},
    WNetAddConnectionW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR]], [['stdcall']]))('WNetAddConnectionW');},
    WNetAddConnection2A: function() {return (Fn(T.DWORD, [[T.LPNETRESOURCEA], [T.LPCSTR], [T.LPCSTR], [T.DWORD]], [['stdcall']]))('WNetAddConnection2A');},
    WNetAddConnection2W: function() {return (Fn(T.DWORD, [[T.LPNETRESOURCEW], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD]], [['stdcall']]))('WNetAddConnection2W');},
    WNetAddConnection3A: function() {return (Fn(T.DWORD, [[T.HWND], [T.LPNETRESOURCEA], [T.LPCSTR], [T.LPCSTR], [T.DWORD]], [['stdcall']]))('WNetAddConnection3A');},
    WNetAddConnection3W: function() {return (Fn(T.DWORD, [[T.HWND], [T.LPNETRESOURCEW], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD]], [['stdcall']]))('WNetAddConnection3W');},
    WNetCancelConnectionA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.BOOL]], [['stdcall']]))('WNetCancelConnectionA');},
    WNetCancelConnectionW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.BOOL]], [['stdcall']]))('WNetCancelConnectionW');},
    WNetCancelConnection2A: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.DWORD], [T.BOOL]], [['stdcall']]))('WNetCancelConnection2A');},
    WNetCancelConnection2W: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.DWORD], [T.BOOL]], [['stdcall']]))('WNetCancelConnection2W');},
    WNetGetConnectionA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.LPSTR], [T.LPDWORD]], [['stdcall']]))('WNetGetConnectionA');},
    WNetGetConnectionW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.LPWSTR], [T.LPDWORD]], [['stdcall']]))('WNetGetConnectionW');},
    WNetGetLastErrorA: function() {return (Fn(T.DWORD, [[T.LPDWORD], [T.LPSTR], [T.DWORD], [T.LPSTR], [T.DWORD]], [['stdcall']]))('WNetGetLastErrorA');},
    WNetGetLastErrorW: function() {return (Fn(T.DWORD, [[T.LPDWORD], [T.LPWSTR], [T.DWORD], [T.LPWSTR], [T.DWORD]], [['stdcall']]))('WNetGetLastErrorW');},
    WNetRestoreConnectionA: function() {return (Fn(T.DWORD, [[T.HWND], [T.LPCSTR]], [['stdcall']]))('WNetRestoreConnectionA');},
    WNetRestoreConnectionW: function() {return (Fn(T.DWORD, [[T.HWND], [T.LPCWSTR]], [['stdcall']]))('WNetRestoreConnectionW');},
    WNetUseConnectionA: function() {return (Fn(T.DWORD, [[T.HWND], [T.LPNETRESOURCEA], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.LPSTR], [T.LPDWORD], [T.LPDWORD]], [['stdcall']]))('WNetUseConnectionA');},
    WNetUseConnectionW: function() {return (Fn(T.DWORD, [[T.HWND], [T.LPNETRESOURCEW], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.LPWSTR], [T.LPDWORD], [T.LPDWORD]], [['stdcall']]))('WNetUseConnectionW');},
    WNetSetConnectionA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.DWORD], [T.LPVOID]], [['stdcall']]))('WNetSetConnectionA');},
    WNetSetConnectionW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.DWORD], [T.LPVOID]], [['stdcall']]))('WNetSetConnectionW');},
    WNetConnectionDialog: function() {return (Fn(T.DWORD, [[T.HWND], [T.DWORD]], [['stdcall']]))('WNetConnectionDialog');},
    WNetDisconnectDialog: function() {return (Fn(T.DWORD, [[T.HWND], [T.DWORD]], [['stdcall']]))('WNetDisconnectDialog');},
    WNetConnectionDialog1A: function() {return (Fn(T.DWORD, [[T.LPCONNECTDLGSTRUCTA]], [['stdcall']]))('WNetConnectionDialog1A');},
    WNetConnectionDialog1W: function() {return (Fn(T.DWORD, [[T.LPCONNECTDLGSTRUCTW]], [['stdcall']]))('WNetConnectionDialog1W');},
    WNetDisconnectDialog1A: function() {return (Fn(T.DWORD, [[T.LPDISCDLGSTRUCTA]], [['stdcall']]))('WNetDisconnectDialog1A');},
    WNetDisconnectDialog1W: function() {return (Fn(T.DWORD, [[T.LPDISCDLGSTRUCTW]], [['stdcall']]))('WNetDisconnectDialog1W');},
    WNetOpenEnumA: function() {return (Fn(T.DWORD, [[T.DWORD], [T.DWORD], [T.DWORD], [T.LPNETRESOURCEA], [T.LPHANDLE]], [['stdcall']]))('WNetOpenEnumA');},
    WNetOpenEnumW: function() {return (Fn(T.DWORD, [[T.DWORD], [T.DWORD], [T.DWORD], [T.LPNETRESOURCEW], [T.LPHANDLE]], [['stdcall']]))('WNetOpenEnumW');},
    WNetEnumResourceA: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.LPDWORD], [T.LPVOID], [T.LPDWORD]], [['stdcall']]))('WNetEnumResourceA');},
    WNetEnumResourceW: function() {return (Fn(T.DWORD, [[T.HANDLE], [T.LPDWORD], [T.LPVOID], [T.LPDWORD]], [['stdcall']]))('WNetEnumResourceW');},
    WNetGetResourceInformationA: function() {return (Fn(T.DWORD, [[T.LPNETRESOURCEA], [T.LPVOID], [T.LPDWORD], [Pointer(T.LPSTR)]], [['stdcall']]))('WNetGetResourceInformationA');},
    WNetGetResourceInformationW: function() {return (Fn(T.DWORD, [[T.LPNETRESOURCEW], [T.LPVOID], [T.LPDWORD], [Pointer(T.LPWSTR)]], [['stdcall']]))('WNetGetResourceInformationW');},
    WNetGetResourceParentA: function() {return (Fn(T.DWORD, [[T.LPNETRESOURCEA], [T.LPVOID], [T.LPDWORD]], [['stdcall']]))('WNetGetResourceParentA');},
    WNetGetResourceParentW: function() {return (Fn(T.DWORD, [[T.LPNETRESOURCEW], [T.LPVOID], [T.LPDWORD]], [['stdcall']]))('WNetGetResourceParentW');},
    WNetCloseEnum: function() {return (Fn(T.DWORD, [[T.HANDLE]], [['stdcall']]))('WNetCloseEnum');},
    WNetGetUniversalNameA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.DWORD], [T.LPVOID], [T.LPDWORD]], [['stdcall']]))('WNetGetUniversalNameA');},
    WNetGetUniversalNameW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.DWORD], [T.LPVOID], [T.LPDWORD]], [['stdcall']]))('WNetGetUniversalNameW');},
    WNetGetUserA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.LPSTR], [T.LPDWORD]], [['stdcall']]))('WNetGetUserA');},
    WNetGetUserW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.LPWSTR], [T.LPDWORD]], [['stdcall']]))('WNetGetUserW');},
    WNetGetProviderNameA: function() {return (Fn(T.DWORD, [[T.DWORD], [T.LPSTR], [T.LPDWORD]], [['stdcall']]))('WNetGetProviderNameA');},
    WNetGetProviderNameW: function() {return (Fn(T.DWORD, [[T.DWORD], [T.LPWSTR], [T.LPDWORD]], [['stdcall']]))('WNetGetProviderNameW');},
    WNetGetNetworkInformationA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.LPNETINFOSTRUCT]], [['stdcall']]))('WNetGetNetworkInformationA');},
    WNetGetNetworkInformationW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.LPNETINFOSTRUCT]], [['stdcall']]))('WNetGetNetworkInformationW');},
    MultinetGetConnectionPerformanceA: function() {return (Fn(T.DWORD, [[T.LPNETRESOURCEA], [T.LPNETCONNECTINFOSTRUCT]], [['stdcall']]))('MultinetGetConnectionPerformanceA');},
    MultinetGetConnectionPerformanceW: function() {return (Fn(T.DWORD, [[T.LPNETRESOURCEW], [T.LPNETCONNECTINFOSTRUCT]], [['stdcall']]))('MultinetGetConnectionPerformanceW');},
    MultinetGetErrorTextA: function() {return (Fn(T.DWORD, [[T.DWORD], [T.DWORD], [T.DWORD]], [['stdcall']]))('MultinetGetErrorTextA');},
    MultinetGetErrorTextW: function() {return (Fn(T.DWORD, [[T.DWORD], [T.DWORD], [T.DWORD]], [['stdcall']]))('MultinetGetErrorTextW');},
    WNetEnumCachedPasswords: function() {return (Fn(T.UINT, [[T.LPSTR], [T.WORD], [T.BYTE], [T.ENUMPASSWORDPROC], [T.DWORD]], [['stdcall']]))('WNetEnumCachedPasswords');},
    WNetGetCachedPassword: function() {return (Fn(T.DWORD, [[T.LPSTR], [T.WORD], [T.LPSTR], [T.LPWORD], [T.BYTE]], [['stdcall']]))('WNetGetCachedPassword');},
    WNetCachePassword: function() {return (Fn(T.DWORD, [[T.LPSTR], [T.WORD], [T.LPSTR], [T.WORD], [T.BYTE], [T.WORD]], [['stdcall']]))('WNetCachePassword');},
    DdeSetQualityOfService: function() {return (Fn(T.BOOL, [[T.HWND], [Pointer(T.SECURITY_QUALITY_OF_SERVICE)], [T.PSECURITY_QUALITY_OF_SERVICE]], [['dllimport'], ['stdcall']]))('DdeSetQualityOfService');},
    FreeDDElParam: function() {return (Fn(T.BOOL, [[T.UINT], [T.LPARAM]], [['dllimport'], ['stdcall']]))('FreeDDElParam');},
    ImpersonateDdeClientWindow: function() {return (Fn(T.BOOL, [[T.HWND], [T.HWND]], [['dllimport'], ['stdcall']]))('ImpersonateDdeClientWindow');},
    PackDDElParam: function() {return (Fn(T.LPARAM, [[T.UINT], [T.UINT_PTR], [T.UINT_PTR]], [['dllimport'], ['stdcall']]))('PackDDElParam');},
    ReuseDDElParam: function() {return (Fn(T.LPARAM, [[T.LPARAM], [T.UINT], [T.UINT], [T.UINT_PTR], [T.UINT_PTR]], [['dllimport'], ['stdcall']]))('ReuseDDElParam');},
    UnpackDDElParam: function() {return (Fn(T.BOOL, [[T.UINT], [T.LPARAM], [T.PUINT_PTR], [T.PUINT_PTR]], [['dllimport'], ['stdcall']]))('UnpackDDElParam');},
    DdeAbandonTransaction: function() {return (Fn(T.BOOL, [[T.DWORD, 'idInst'], [T.HCONV, 'hConv'], [T.DWORD, 'idTransaction']], [['dllimport'], ['stdcall']]))('DdeAbandonTransaction');},
    DdeAccessData: function() {return (Fn(T.LPBYTE, [[T.HDDEDATA], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('DdeAccessData');},
    DdeAddData: function() {return (Fn(T.HDDEDATA, [[T.HDDEDATA], [T.LPBYTE], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('DdeAddData');},
    DdeClientTransaction: function() {return (Fn(T.HDDEDATA, [[T.LPBYTE], [T.DWORD], [T.HCONV], [T.HSZ], [T.UINT], [T.UINT], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('DdeClientTransaction');},
    DdeCmpStringHandles: function() {return (Fn(T.INT, [[T.HSZ], [T.HSZ]], [['dllimport'], ['stdcall']]))('DdeCmpStringHandles');},
    DdeConnect: function() {return (Fn(T.HCONV, [[T.DWORD], [T.HSZ], [T.HSZ], [T.PCONVCONTEXT]], [['dllimport'], ['stdcall']]))('DdeConnect');},
    DdeConnectList: function() {return (Fn(T.HCONVLIST, [[T.DWORD], [T.HSZ], [T.HSZ], [T.HCONVLIST], [T.PCONVCONTEXT]], [['dllimport'], ['stdcall']]))('DdeConnectList');},
    DdeCreateDataHandle: function() {return (Fn(T.HDDEDATA, [[T.DWORD], [T.LPBYTE], [T.DWORD], [T.DWORD], [T.HSZ], [T.UINT], [T.UINT]], [['dllimport'], ['stdcall']]))('DdeCreateDataHandle');},
    DdeCreateStringHandleA: function() {return (Fn(T.HSZ, [[T.DWORD], [T.LPCSTR], [T.INT]], [['dllimport'], ['stdcall']]))('DdeCreateStringHandleA');},
    DdeCreateStringHandleW: function() {return (Fn(T.HSZ, [[T.DWORD], [T.LPCWSTR], [T.INT]], [['dllimport'], ['stdcall']]))('DdeCreateStringHandleW');},
    DdeDisconnect: function() {return (Fn(T.BOOL, [[T.HCONV]], [['dllimport'], ['stdcall']]))('DdeDisconnect');},
    DdeDisconnectList: function() {return (Fn(T.BOOL, [[T.HCONVLIST]], [['dllimport'], ['stdcall']]))('DdeDisconnectList');},
    DdeEnableCallback: function() {return (Fn(T.BOOL, [[T.DWORD], [T.HCONV], [T.UINT]], [['dllimport'], ['stdcall']]))('DdeEnableCallback');},
    DdeFreeDataHandle: function() {return (Fn(T.BOOL, [[T.HDDEDATA]], [['dllimport'], ['stdcall']]))('DdeFreeDataHandle');},
    DdeFreeStringHandle: function() {return (Fn(T.BOOL, [[T.DWORD], [T.HSZ]], [['dllimport'], ['stdcall']]))('DdeFreeStringHandle');},
    DdeGetData: function() {return (Fn(T.DWORD, [[T.HDDEDATA], [T.LPBYTE], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('DdeGetData');},
    DdeGetLastError: function() {return (Fn(T.UINT, [[T.DWORD]], [['dllimport'], ['stdcall']]))('DdeGetLastError');},
    DdeImpersonateClient: function() {return (Fn(T.BOOL, [[T.HCONV]], [['dllimport'], ['stdcall']]))('DdeImpersonateClient');},
    DdeInitializeA: function() {return (Fn(T.UINT, [[T.LPDWORD], [T.PFNCALLBACK], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('DdeInitializeA');},
    DdeInitializeW: function() {return (Fn(T.UINT, [[T.LPDWORD], [T.PFNCALLBACK], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('DdeInitializeW');},
    DdeKeepStringHandle: function() {return (Fn(T.BOOL, [[T.DWORD], [T.HSZ]], [['dllimport'], ['stdcall']]))('DdeKeepStringHandle');},
    DdeNameService: function() {return (Fn(T.HDDEDATA, [[T.DWORD], [T.HSZ], [T.HSZ], [T.UINT]], [['dllimport'], ['stdcall']]))('DdeNameService');},
    DdePostAdvise: function() {return (Fn(T.BOOL, [[T.DWORD], [T.HSZ], [T.HSZ]], [['dllimport'], ['stdcall']]))('DdePostAdvise');},
    DdeQueryConvInfo: function() {return (Fn(T.UINT, [[T.HCONV], [T.DWORD], [T.PCONVINFO]], [['dllimport'], ['stdcall']]))('DdeQueryConvInfo');},
    DdeQueryNextServer: function() {return (Fn(T.HCONV, [[T.HCONVLIST], [T.HCONV]], [['dllimport'], ['stdcall']]))('DdeQueryNextServer');},
    DdeQueryStringA: function() {return (Fn(T.DWORD, [[T.DWORD], [T.HSZ], [T.LPSTR], [T.DWORD], [T.INT]], [['dllimport'], ['stdcall']]))('DdeQueryStringA');},
    DdeQueryStringW: function() {return (Fn(T.DWORD, [[T.DWORD], [T.HSZ], [T.LPWSTR], [T.DWORD], [T.INT]], [['dllimport'], ['stdcall']]))('DdeQueryStringW');},
    DdeReconnect: function() {return (Fn(T.HCONV, [[T.HCONV]], [['dllimport'], ['stdcall']]))('DdeReconnect');},
    DdeSetUserHandle: function() {return (Fn(T.BOOL, [[T.HCONV], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('DdeSetUserHandle');},
    DdeUnaccessData: function() {return (Fn(T.BOOL, [[T.HDDEDATA]], [['dllimport'], ['stdcall']]))('DdeUnaccessData');},
    DdeUninitialize: function() {return (Fn(T.BOOL, [[T.DWORD]], [['dllimport'], ['stdcall']]))('DdeUninitialize');},
    LZDone: function() {return (Fn(null, [[null]], [['stdcall']]))('LZDone');},
    CopyLZFile: function() {return (Fn(T.LONG, [[T.HFILE], [T.HFILE]], [['stdcall']]))('CopyLZFile');},
    LZOpenFileA: function() {return (Fn(T.HFILE, [[T.LPSTR], [T.LPOFSTRUCT], [T.WORD]], [['stdcall']]))('LZOpenFileA');},
    LZOpenFileW: function() {return (Fn(T.HFILE, [[T.LPWSTR], [T.LPOFSTRUCT], [T.WORD]], [['stdcall']]))('LZOpenFileW');},
    LZRead: function() {return (Fn(T.INT, [[T.INT], [T.LPSTR], [T.INT]], [['stdcall']]))('LZRead');},
    LZStart: function() {return (Fn(T.INT, [[null]], [['stdcall']]))('LZStart');},
    LZClose: function() {return (Fn(null, [[T.HFILE]], [['stdcall']]))('LZClose');},
    LZCopy: function() {return (Fn(T.LONG, [[T.HFILE], [T.HFILE]], [['stdcall']]))('LZCopy');},
    LZInit: function() {return (Fn(T.HFILE, [[T.HFILE]], [['stdcall']]))('LZInit');},
    LZSeek: function() {return (Fn(T.LONG, [[T.HFILE], [T.LONG], [T.INT]], [['stdcall']]))('LZSeek');},
    GetExpandedNameA: function() {return (Fn(T.INT, [[T.LPSTR], [T.LPSTR]], [['stdcall']]))('GetExpandedNameA');},
    GetExpandedNameW: function() {return (Fn(T.INT, [[T.LPWSTR], [T.LPWSTR]], [['stdcall']]))('GetExpandedNameW');},
    DefDriverProc: function() {return (Fn(T.LRESULT, [[T.DWORD_PTR], [T.HDRVR], [T.UINT], [T.LPARAM], [T.LPARAM]], [['stdcall']]))('DefDriverProc');},
    OpenDriverA: function() {return (Fn(T.HDRVR, [[T.LPCSTR, 'szDriverName'], [T.LPCSTR, 'szSectionName'], [T.LPARAM, 'lParam2']], [['stdcall']]))('OpenDriverA');},
    OpenDriver: function() {return (Fn(T.HDRVR, [[T.LPCWSTR, 'szDriverName'], [T.LPCWSTR, 'szSectionName'], [T.LPARAM, 'lParam2']], [['stdcall']]))('OpenDriver');},
    CloseDriver: function() {return (Fn(T.LRESULT, [[T.HDRVR, 'hDriver'], [T.LPARAM, 'lParam1'], [T.LPARAM, 'lParam2']], [['stdcall']]))('CloseDriver');},
    SendDriverMessage: function() {return (Fn(T.LRESULT, [[T.HDRVR, 'hDriver'], [T.UINT, 'message'], [T.LPARAM, 'lParam1'], [T.LPARAM, 'lParam2']], [['stdcall']]))('SendDriverMessage');},
    GetDriverModuleHandle: function() {return (Fn(T.HMODULE, [[T.HDRVR, 'hDriver']], [['stdcall']]))('GetDriverModuleHandle');},
    GetDriverFlags: function() {return (Fn(T.DWORD, [[T.HDRVR, 'hDriver']], [['stdcall']]))('GetDriverFlags');},
    mmsystemGetVersion: function() {return (Fn(T.UINT, [[null]], [['stdcall']]))('mmsystemGetVersion');},
    sndPlaySoundA: function() {return (Fn(T.BOOL, [[T.LPCSTR, 'lpszSound'], [T.UINT, 'fuSound']], [['stdcall']]))('sndPlaySoundA');},
    sndPlaySoundW: function() {return (Fn(T.BOOL, [[T.LPCWSTR, 'lpszSound'], [T.UINT, 'fuSound']], [['stdcall']]))('sndPlaySoundW');},
    PlaySoundA: function() {return (Fn(T.BOOL, [[T.LPCSTR, 'pszSound'], [T.HMODULE, 'hmod'], [T.DWORD, 'fdwSound']], [['stdcall']]))('PlaySoundA');},
    PlaySoundW: function() {return (Fn(T.BOOL, [[T.LPCWSTR, 'pszSound'], [T.HMODULE, 'hmod'], [T.DWORD, 'fdwSound']], [['stdcall']]))('PlaySoundW');},
    waveOutGetNumDevs: function() {return (Fn(T.UINT, [[null]], [['stdcall']]))('waveOutGetNumDevs');},
    waveOutGetDevCapsA: function() {return (Fn(T.UINT, [[T.UINT_PTR], [T.LPWAVEOUTCAPSA], [T.UINT]], [['stdcall']]))('waveOutGetDevCapsA');},
    waveOutGetDevCapsW: function() {return (Fn(T.UINT, [[T.UINT_PTR], [T.LPWAVEOUTCAPSW], [T.UINT]], [['stdcall']]))('waveOutGetDevCapsW');},
    waveOutGetVolume: function() {return (Fn(T.UINT, [[T.HWAVEOUT], [Pointer(T.DWORD)]], [['stdcall']]))('waveOutGetVolume');},
    waveOutSetVolume: function() {return (Fn(T.UINT, [[T.HWAVEOUT], [T.DWORD]], [['stdcall']]))('waveOutSetVolume');},
    waveOutGetErrorTextA: function() {return (Fn(T.UINT, [[T.UINT], [T.LPSTR], [T.UINT]], [['stdcall']]))('waveOutGetErrorTextA');},
    waveOutGetErrorTextW: function() {return (Fn(T.UINT, [[T.UINT], [T.LPWSTR], [T.UINT]], [['stdcall']]))('waveOutGetErrorTextW');},
    waveOutOpen: function() {return (Fn(T.MMRESULT, [[Pointer(T.HWAVEOUT)], [T.UINT], [T.LPCWAVEFORMATEX], [T.DWORD_PTR], [T.DWORD_PTR], [T.DWORD]], [['stdcall']]))('waveOutOpen');},
    waveOutClose: function() {return (Fn(T.UINT, [[T.HWAVEOUT]], [['stdcall']]))('waveOutClose');},
    waveOutPrepareHeader: function() {return (Fn(T.UINT, [[T.HWAVEOUT], [Pointer(T.WAVEHDR)], [T.UINT]], [['stdcall']]))('waveOutPrepareHeader');},
    waveOutUnprepareHeader: function() {return (Fn(T.UINT, [[T.HWAVEOUT], [Pointer(T.WAVEHDR)], [T.UINT]], [['stdcall']]))('waveOutUnprepareHeader');},
    waveOutWrite: function() {return (Fn(T.UINT, [[T.HWAVEOUT], [Pointer(T.WAVEHDR)], [T.UINT]], [['stdcall']]))('waveOutWrite');},
    waveOutPause: function() {return (Fn(T.UINT, [[T.HWAVEOUT]], [['stdcall']]))('waveOutPause');},
    waveOutRestart: function() {return (Fn(T.UINT, [[T.HWAVEOUT]], [['stdcall']]))('waveOutRestart');},
    waveOutReset: function() {return (Fn(T.UINT, [[T.HWAVEOUT]], [['stdcall']]))('waveOutReset');},
    waveOutBreakLoop: function() {return (Fn(T.UINT, [[T.HWAVEOUT]], [['stdcall']]))('waveOutBreakLoop');},
    waveOutGetPosition: function() {return (Fn(T.UINT, [[T.HWAVEOUT], [T.LPMMTIME], [T.UINT]], [['stdcall']]))('waveOutGetPosition');},
    waveOutGetPitch: function() {return (Fn(T.UINT, [[T.HWAVEOUT], [Pointer(T.DWORD)]], [['stdcall']]))('waveOutGetPitch');},
    waveOutSetPitch: function() {return (Fn(T.UINT, [[T.HWAVEOUT], [T.DWORD]], [['stdcall']]))('waveOutSetPitch');},
    waveOutGetPlaybackRate: function() {return (Fn(T.UINT, [[T.HWAVEOUT], [Pointer(T.DWORD)]], [['stdcall']]))('waveOutGetPlaybackRate');},
    waveOutSetPlaybackRate: function() {return (Fn(T.UINT, [[T.HWAVEOUT], [T.DWORD]], [['stdcall']]))('waveOutSetPlaybackRate');},
    waveOutGetID: function() {return (Fn(T.UINT, [[T.HWAVEOUT], [Pointer(T.UINT)]], [['stdcall']]))('waveOutGetID');},
    waveOutMessage: function() {return (Fn(T.UINT, [[T.HWAVEOUT], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR]], [['stdcall']]))('waveOutMessage');},
    waveInGetNumDevs: function() {return (Fn(T.UINT, [[null]], [['stdcall']]))('waveInGetNumDevs');},
    waveInGetDevCapsA: function() {return (Fn(T.UINT, [[T.UINT_PTR], [T.LPWAVEINCAPSA], [T.UINT]], [['stdcall']]))('waveInGetDevCapsA');},
    waveInGetDevCapsW: function() {return (Fn(T.UINT, [[T.UINT_PTR], [T.LPWAVEINCAPSW], [T.UINT]], [['stdcall']]))('waveInGetDevCapsW');},
    waveInGetErrorTextA: function() {return (Fn(T.UINT, [[T.UINT], [T.LPSTR], [T.UINT]], [['stdcall']]))('waveInGetErrorTextA');},
    waveInGetErrorTextW: function() {return (Fn(T.UINT, [[T.UINT], [T.LPWSTR], [T.UINT]], [['stdcall']]))('waveInGetErrorTextW');},
    waveInOpen: function() {return (Fn(T.MMRESULT, [[Pointer(T.HWAVEIN)], [T.UINT], [T.LPCWAVEFORMATEX], [T.DWORD_PTR], [T.DWORD_PTR], [T.DWORD]], [['stdcall']]))('waveInOpen');},
    waveInClose: function() {return (Fn(T.UINT, [[T.HWAVEIN]], [['stdcall']]))('waveInClose');},
    waveInPrepareHeader: function() {return (Fn(T.UINT, [[T.HWAVEIN], [Pointer(T.WAVEHDR)], [T.UINT]], [['stdcall']]))('waveInPrepareHeader');},
    waveInUnprepareHeader: function() {return (Fn(T.UINT, [[T.HWAVEIN], [Pointer(T.WAVEHDR)], [T.UINT]], [['stdcall']]))('waveInUnprepareHeader');},
    waveInAddBuffer: function() {return (Fn(T.UINT, [[T.HWAVEIN], [Pointer(T.WAVEHDR)], [T.UINT]], [['stdcall']]))('waveInAddBuffer');},
    waveInStart: function() {return (Fn(T.UINT, [[T.HWAVEIN]], [['stdcall']]))('waveInStart');},
    waveInStop: function() {return (Fn(T.UINT, [[T.HWAVEIN]], [['stdcall']]))('waveInStop');},
    waveInReset: function() {return (Fn(T.UINT, [[T.HWAVEIN]], [['stdcall']]))('waveInReset');},
    waveInGetPosition: function() {return (Fn(T.UINT, [[T.HWAVEIN], [T.LPMMTIME], [T.UINT]], [['stdcall']]))('waveInGetPosition');},
    waveInGetID: function() {return (Fn(T.UINT, [[T.HWAVEIN], [Pointer(T.UINT)]], [['stdcall']]))('waveInGetID');},
    waveInMessage: function() {return (Fn(T.UINT, [[T.HWAVEIN], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR]], [['stdcall']]))('waveInMessage');},
    midiOutGetNumDevs: function() {return (Fn(T.UINT, [[null]], [['stdcall']]))('midiOutGetNumDevs');},
    midiOutGetDevCapsA: function() {return (Fn(T.UINT, [[T.UINT_PTR], [T.LPMIDIOUTCAPSA], [T.UINT]], [['stdcall']]))('midiOutGetDevCapsA');},
    midiOutGetDevCapsW: function() {return (Fn(T.UINT, [[T.UINT_PTR], [T.LPMIDIOUTCAPSW], [T.UINT]], [['stdcall']]))('midiOutGetDevCapsW');},
    midiOutGetVolume: function() {return (Fn(T.UINT, [[T.HMIDIOUT], [Pointer(T.DWORD)]], [['stdcall']]))('midiOutGetVolume');},
    midiOutSetVolume: function() {return (Fn(T.UINT, [[T.HMIDIOUT], [T.DWORD]], [['stdcall']]))('midiOutSetVolume');},
    midiOutGetErrorTextA: function() {return (Fn(T.UINT, [[T.UINT], [T.LPSTR], [T.UINT]], [['stdcall']]))('midiOutGetErrorTextA');},
    midiOutGetErrorTextW: function() {return (Fn(T.UINT, [[T.UINT], [T.LPWSTR], [T.UINT]], [['stdcall']]))('midiOutGetErrorTextW');},
    midiOutOpen: function() {return (Fn(T.UINT, [[T.LPHMIDIOUT], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR], [T.DWORD]], [['stdcall']]))('midiOutOpen');},
    midiOutClose: function() {return (Fn(T.UINT, [[T.HMIDIOUT]], [['stdcall']]))('midiOutClose');},
    midiOutPrepareHeader: function() {return (Fn(T.UINT, [[T.HMIDIOUT], [Pointer(T.MIDIHDR)], [T.UINT]], [['stdcall']]))('midiOutPrepareHeader');},
    midiOutUnprepareHeader: function() {return (Fn(T.UINT, [[T.HMIDIOUT], [Pointer(T.MIDIHDR)], [T.UINT]], [['stdcall']]))('midiOutUnprepareHeader');},
    midiOutShortMsg: function() {return (Fn(T.UINT, [[T.HMIDIOUT], [T.DWORD]], [['stdcall']]))('midiOutShortMsg');},
    midiOutLongMsg: function() {return (Fn(T.UINT, [[T.HMIDIOUT], [Pointer(T.MIDIHDR)], [T.UINT]], [['stdcall']]))('midiOutLongMsg');},
    midiOutReset: function() {return (Fn(T.UINT, [[T.HMIDIOUT]], [['stdcall']]))('midiOutReset');},
    midiOutCachePatches: function() {return (Fn(T.UINT, [[T.HMIDIOUT], [T.UINT], [Pointer(T.WORD)], [T.UINT]], [['stdcall']]))('midiOutCachePatches');},
    midiOutCacheDrumPatches: function() {return (Fn(T.UINT, [[T.HMIDIOUT], [T.UINT], [Pointer(T.WORD)], [T.UINT]], [['stdcall']]))('midiOutCacheDrumPatches');},
    midiOutGetID: function() {return (Fn(T.UINT, [[T.HMIDIOUT], [Pointer(T.UINT)]], [['stdcall']]))('midiOutGetID');},
    midiOutMessage: function() {return (Fn(T.UINT, [[T.HMIDIOUT], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR]], [['stdcall']]))('midiOutMessage');},
    midiInGetNumDevs: function() {return (Fn(T.UINT, [[null]], [['stdcall']]))('midiInGetNumDevs');},
    midiInGetDevCapsA: function() {return (Fn(T.UINT, [[T.UINT_PTR], [T.LPMIDIINCAPSA], [T.UINT]], [['stdcall']]))('midiInGetDevCapsA');},
    midiInGetDevCapsW: function() {return (Fn(T.UINT, [[T.UINT_PTR], [T.LPMIDIINCAPSW], [T.UINT]], [['stdcall']]))('midiInGetDevCapsW');},
    midiInGetErrorTextA: function() {return (Fn(T.UINT, [[T.UINT], [T.LPSTR], [T.UINT]], [['stdcall']]))('midiInGetErrorTextA');},
    midiInGetErrorTextW: function() {return (Fn(T.UINT, [[T.UINT], [T.LPWSTR], [T.UINT]], [['stdcall']]))('midiInGetErrorTextW');},
    midiInOpen: function() {return (Fn(T.UINT, [[T.LPHMIDIIN], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR], [T.DWORD]], [['stdcall']]))('midiInOpen');},
    midiInClose: function() {return (Fn(T.UINT, [[T.HMIDIIN]], [['stdcall']]))('midiInClose');},
    midiInPrepareHeader: function() {return (Fn(T.UINT, [[T.HMIDIIN], [Pointer(T.MIDIHDR)], [T.UINT]], [['stdcall']]))('midiInPrepareHeader');},
    midiInUnprepareHeader: function() {return (Fn(T.UINT, [[T.HMIDIIN], [Pointer(T.MIDIHDR)], [T.UINT]], [['stdcall']]))('midiInUnprepareHeader');},
    midiInAddBuffer: function() {return (Fn(T.UINT, [[T.HMIDIIN], [Pointer(T.MIDIHDR)], [T.UINT]], [['stdcall']]))('midiInAddBuffer');},
    midiInStart: function() {return (Fn(T.UINT, [[T.HMIDIIN]], [['stdcall']]))('midiInStart');},
    midiInStop: function() {return (Fn(T.UINT, [[T.HMIDIIN]], [['stdcall']]))('midiInStop');},
    midiInReset: function() {return (Fn(T.UINT, [[T.HMIDIIN]], [['stdcall']]))('midiInReset');},
    midiInGetID: function() {return (Fn(T.UINT, [[T.HMIDIIN], [Pointer(T.UINT)]], [['stdcall']]))('midiInGetID');},
    midiInMessage: function() {return (Fn(T.UINT, [[T.HMIDIIN], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR]], [['stdcall']]))('midiInMessage');},
    midiStreamClose: function() {return (Fn(T.MMRESULT, [[T.HMIDISTRM, 'hms']], [['stdcall']]))('midiStreamClose');},
    midiStreamOpen: function() {return (Fn(T.MMRESULT, [[T.LPHMIDISTRM], [T.LPUINT], [T.DWORD], [T.DWORD_PTR], [T.DWORD_PTR], [T.DWORD]], [['stdcall']]))('midiStreamOpen');},
    midiStreamOut: function() {return (Fn(T.MMRESULT, [[T.HMIDISTRM, 'hms'], [T.LPMIDIHDR, 'lpMidiHdr'], [T.UINT, 'cbMidiHdr']], [['stdcall']]))('midiStreamOut');},
    midiStreamPause: function() {return (Fn(T.MMRESULT, [[T.HMIDISTRM, 'hms']], [['stdcall']]))('midiStreamPause');},
    midiStreamPosition: function() {return (Fn(T.MMRESULT, [[T.HMIDISTRM, 'hms'], [T.LPMMTIME, 'lpmmt'], [T.UINT, 'cbmmt']], [['stdcall']]))('midiStreamPosition');},
    midiStreamProperty: function() {return (Fn(T.MMRESULT, [[T.HMIDISTRM, 'hms'], [T.LPBYTE, 'lpPropData'], [T.DWORD, 'dwProperty']], [['stdcall']]))('midiStreamProperty');},
    midiStreamRestart: function() {return (Fn(T.MMRESULT, [[T.HMIDISTRM, 'hms']], [['stdcall']]))('midiStreamRestart');},
    midiStreamStop: function() {return (Fn(T.MMRESULT, [[T.HMIDISTRM, 'hms']], [['stdcall']]))('midiStreamStop');},
    auxGetNumDevs: function() {return (Fn(T.UINT, [[null]], [['stdcall']]))('auxGetNumDevs');},
    auxGetDevCapsA: function() {return (Fn(T.UINT, [[T.UINT_PTR], [T.LPAUXCAPSA], [T.UINT]], [['stdcall']]))('auxGetDevCapsA');},
    auxGetDevCapsW: function() {return (Fn(T.UINT, [[T.UINT_PTR], [T.LPAUXCAPSW], [T.UINT]], [['stdcall']]))('auxGetDevCapsW');},
    auxSetVolume: function() {return (Fn(T.UINT, [[T.UINT], [T.DWORD]], [['stdcall']]))('auxSetVolume');},
    auxGetVolume: function() {return (Fn(T.UINT, [[T.UINT], [T.LPDWORD]], [['stdcall']]))('auxGetVolume');},
    auxOutMessage: function() {return (Fn(T.UINT, [[T.UINT], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR]], [['stdcall']]))('auxOutMessage');},
    timeGetSystemTime: function() {return (Fn(T.MMRESULT, [[T.LPMMTIME], [T.UINT]], [['stdcall']]))('timeGetSystemTime');},
    timeGetTime: function() {return (Fn(T.DWORD, [[null]], [['stdcall']]))('timeGetTime');},
    timeSetEvent: function() {return (Fn(T.MMRESULT, [[T.UINT], [T.UINT], [T.LPTIMECALLBACK], [T.DWORD_PTR], [T.UINT]], [['stdcall']]))('timeSetEvent');},
    timeKillEvent: function() {return (Fn(T.MMRESULT, [[T.UINT]], [['stdcall']]))('timeKillEvent');},
    timeGetDevCaps: function() {return (Fn(T.MMRESULT, [[T.LPTIMECAPS], [T.UINT]], [['stdcall']]))('timeGetDevCaps');},
    timeBeginPeriod: function() {return (Fn(T.MMRESULT, [[T.UINT]], [['stdcall']]))('timeBeginPeriod');},
    timeEndPeriod: function() {return (Fn(T.MMRESULT, [[T.UINT]], [['stdcall']]))('timeEndPeriod');},
    joyGetDevCapsA: function() {return (Fn(T.MMRESULT, [[T.UINT_PTR], [T.LPJOYCAPSA], [T.UINT]], [['stdcall']]))('joyGetDevCapsA');},
    joyGetDevCapsW: function() {return (Fn(T.MMRESULT, [[T.UINT_PTR], [T.LPJOYCAPSW], [T.UINT]], [['stdcall']]))('joyGetDevCapsW');},
    joyGetNumDevs: function() {return (Fn(T.UINT, [[null]], [['stdcall']]))('joyGetNumDevs');},
    joyGetPos: function() {return (Fn(T.MMRESULT, [[T.UINT], [T.LPJOYINFO]], [['stdcall']]))('joyGetPos');},
    joyGetPosEx: function() {return (Fn(T.MMRESULT, [[T.UINT], [T.LPJOYINFOEX]], [['stdcall']]))('joyGetPosEx');},
    joyGetThreshold: function() {return (Fn(T.MMRESULT, [[T.UINT], [Pointer(T.UINT)]], [['stdcall']]))('joyGetThreshold');},
    joyReleaseCapture: function() {return (Fn(T.MMRESULT, [[T.UINT]], [['stdcall']]))('joyReleaseCapture');},
    joySetCapture: function() {return (Fn(T.MMRESULT, [[T.HWND], [T.UINT], [T.UINT], [T.BOOL]], [['stdcall']]))('joySetCapture');},
    joySetThreshold: function() {return (Fn(T.MMRESULT, [[T.UINT], [T.UINT]], [['stdcall']]))('joySetThreshold');},
    mixerGetNumDevs: function() {return (Fn(T.UINT, [[null]], [['stdcall']]))('mixerGetNumDevs');},
    mixerOpen: function() {return (Fn(T.UINT, [[T.LPHMIXER], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR], [T.DWORD]], [['stdcall']]))('mixerOpen');},
    mixerClose: function() {return (Fn(T.UINT, [[T.HMIXER]], [['stdcall']]))('mixerClose');},
    mixerMessage: function() {return (Fn(T.DWORD, [[T.HMIXER], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR]], [['stdcall']]))('mixerMessage');},
    mixerGetDevCapsA: function() {return (Fn(T.UINT, [[T.UINT_PTR], [T.LPMIXERCAPSA], [T.UINT]], [['stdcall']]))('mixerGetDevCapsA');},
    mixerGetDevCapsW: function() {return (Fn(T.UINT, [[T.UINT_PTR], [T.LPMIXERCAPSW], [T.UINT]], [['stdcall']]))('mixerGetDevCapsW');},
    mixerGetLineInfoA: function() {return (Fn(T.UINT, [[T.HMIXEROBJ], [T.LPMIXERLINEA], [T.DWORD]], [['stdcall']]))('mixerGetLineInfoA');},
    mixerGetLineInfoW: function() {return (Fn(T.UINT, [[T.HMIXEROBJ], [T.LPMIXERLINEW], [T.DWORD]], [['stdcall']]))('mixerGetLineInfoW');},
    mixerGetID: function() {return (Fn(T.UINT, [[T.HMIXEROBJ], [T.LPUINT], [T.DWORD]], [['stdcall']]))('mixerGetID');},
    mixerGetLineControlsA: function() {return (Fn(T.UINT, [[T.HMIXEROBJ], [T.LPMIXERLINECONTROLSA], [T.DWORD]], [['stdcall']]))('mixerGetLineControlsA');},
    mixerGetLineControlsW: function() {return (Fn(T.UINT, [[T.HMIXEROBJ], [T.LPMIXERLINECONTROLSW], [T.DWORD]], [['stdcall']]))('mixerGetLineControlsW');},
    mixerGetControlDetailsA: function() {return (Fn(T.UINT, [[T.HMIXEROBJ], [T.LPMIXERCONTROLDETAILS], [T.DWORD]], [['stdcall']]))('mixerGetControlDetailsA');},
    mixerGetControlDetailsW: function() {return (Fn(T.UINT, [[T.HMIXEROBJ], [T.LPMIXERCONTROLDETAILS], [T.DWORD]], [['stdcall']]))('mixerGetControlDetailsW');},
    mixerSetControlDetails: function() {return (Fn(T.UINT, [[T.HMIXEROBJ], [T.LPMIXERCONTROLDETAILS], [T.DWORD]], [['stdcall']]))('mixerSetControlDetails');},
    mmioInstallIOProcA: function() {return (Fn(T.LPMMIOPROC, [[T.FOURCC], [T.LPMMIOPROC], [T.DWORD]], [['stdcall']]))('mmioInstallIOProcA');},
    mmioInstallIOProcW: function() {return (Fn(T.LPMMIOPROC, [[T.FOURCC], [T.LPMMIOPROC], [T.DWORD]], [['stdcall']]))('mmioInstallIOProcW');},
    mmioStringToFOURCCA: function() {return (Fn(T.FOURCC, [[T.LPCSTR], [T.UINT]], [['stdcall']]))('mmioStringToFOURCCA');},
    mmioStringToFOURCCW: function() {return (Fn(T.FOURCC, [[T.LPCWSTR], [T.UINT]], [['stdcall']]))('mmioStringToFOURCCW');},
    mmioOpenA: function() {return (Fn(T.HMMIO, [[T.LPSTR], [Pointer(T.MMIOINFO)], [T.DWORD]], [['stdcall']]))('mmioOpenA');},
    mmioOpenW: function() {return (Fn(T.HMMIO, [[T.LPWSTR], [Pointer(T.MMIOINFO)], [T.DWORD]], [['stdcall']]))('mmioOpenW');},
    mmioRenameA: function() {return (Fn(T.MMRESULT, [[T.LPCSTR, 'szFileName'], [T.LPCSTR, 'szNewFileName'], [Pointer(T.MMIOINFO), 'lpmmioinfo'], [T.DWORD, 'dwRenameFlags']], [['stdcall']]))('mmioRenameA');},
    mmioRenameW: function() {return (Fn(T.MMRESULT, [[T.LPCWSTR, 'szFileName'], [T.LPCWSTR, 'szNewFileName'], [Pointer(T.MMIOINFO), 'lpmmioinfo'], [T.DWORD, 'dwRenameFlags']], [['stdcall']]))('mmioRenameW');},
    mmioClose: function() {return (Fn(T.MMRESULT, [[T.HMMIO], [T.UINT]], [['stdcall']]))('mmioClose');},
    mmioRead: function() {return (Fn(T.LONG, [[T.HMMIO], [T.HPSTR], [T.LONG]], [['stdcall']]))('mmioRead');},
    mmioWrite: function() {return (Fn(T.LONG, [[T.HMMIO], [T.HPCSTR], [T.LONG]], [['stdcall']]))('mmioWrite');},
    mmioSeek: function() {return (Fn(T.LONG, [[T.HMMIO], [T.LONG], [T.INT]], [['stdcall']]))('mmioSeek');},
    mmioGetInfo: function() {return (Fn(T.MMRESULT, [[T.HMMIO], [Pointer(T.MMIOINFO)], [T.UINT]], [['stdcall']]))('mmioGetInfo');},
    mmioSetInfo: function() {return (Fn(T.MMRESULT, [[T.HMMIO], [Pointer(T.MMIOINFO)], [T.UINT]], [['stdcall']]))('mmioSetInfo');},
    mmioSetBuffer: function() {return (Fn(T.MMRESULT, [[T.HMMIO], [T.LPSTR], [T.LONG], [T.UINT]], [['stdcall']]))('mmioSetBuffer');},
    mmioFlush: function() {return (Fn(T.MMRESULT, [[T.HMMIO], [T.UINT]], [['stdcall']]))('mmioFlush');},
    mmioAdvance: function() {return (Fn(T.MMRESULT, [[T.HMMIO], [Pointer(T.MMIOINFO)], [T.UINT]], [['stdcall']]))('mmioAdvance');},
    mmioSendMessage: function() {return (Fn(T.LRESULT, [[T.HMMIO], [T.UINT], [T.LPARAM], [T.LPARAM]], [['stdcall']]))('mmioSendMessage');},
    mmioDescend: function() {return (Fn(T.MMRESULT, [[T.HMMIO], [Pointer(T.MMCKINFO)], [Pointer(T.MMCKINFO)], [T.UINT]], [['stdcall']]))('mmioDescend');},
    mmioAscend: function() {return (Fn(T.MMRESULT, [[T.HMMIO], [Pointer(T.MMCKINFO)], [T.UINT]], [['stdcall']]))('mmioAscend');},
    mmioCreateChunk: function() {return (Fn(T.MMRESULT, [[T.HMMIO], [Pointer(T.MMCKINFO)], [T.UINT]], [['stdcall']]))('mmioCreateChunk');},
    mciExecute: function() {return (Fn(T.BOOL, [[T.LPCSTR]], [['stdcall']]))('mciExecute');},
    mciSendCommandA: function() {return (Fn(T.DWORD, [[T.MCIDEVICEID], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR]], [['stdcall']]))('mciSendCommandA');},
    mciSendCommandW: function() {return (Fn(T.DWORD, [[T.MCIDEVICEID], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR]], [['stdcall']]))('mciSendCommandW');},
    mciSendStringA: function() {return (Fn(T.DWORD, [[T.LPCSTR], [T.LPSTR], [T.UINT], [T.HWND]], [['stdcall']]))('mciSendStringA');},
    mciSendStringW: function() {return (Fn(T.DWORD, [[T.LPCWSTR], [T.LPWSTR], [T.UINT], [T.HWND]], [['stdcall']]))('mciSendStringW');},
    mciGetDeviceIDA: function() {return (Fn(T.MCIDEVICEID, [[T.LPCSTR]], [['stdcall']]))('mciGetDeviceIDA');},
    mciGetDeviceIDW: function() {return (Fn(T.MCIDEVICEID, [[T.LPCWSTR]], [['stdcall']]))('mciGetDeviceIDW');},
    mciGetDeviceIDFromElementIDA: function() {return (Fn(T.MCIDEVICEID, [[T.DWORD], [T.LPCSTR]], [['stdcall']]))('mciGetDeviceIDFromElementIDA');},
    mciGetDeviceIDFromElementIDW: function() {return (Fn(T.MCIDEVICEID, [[T.DWORD], [T.LPCWSTR]], [['stdcall']]))('mciGetDeviceIDFromElementIDW');},
    mciGetErrorStringA: function() {return (Fn(T.BOOL, [[T.MCIERROR], [T.LPSTR], [T.UINT]], [['stdcall']]))('mciGetErrorStringA');},
    mciGetErrorStringW: function() {return (Fn(T.BOOL, [[T.MCIERROR], [T.LPWSTR], [T.UINT]], [['stdcall']]))('mciGetErrorStringW');},
    mciSetYieldProc: function() {return (Fn(T.BOOL, [[T.MCIDEVICEID], [T.YIELDPROC], [T.DWORD]], [['stdcall']]))('mciSetYieldProc');},
    mciGetCreatorTask: function() {return (Fn(T.HTASK, [[T.MCIDEVICEID]], [['stdcall']]))('mciGetCreatorTask');},
    mciGetYieldProc: function() {return (Fn(T.YIELDPROC, [[T.MCIDEVICEID], [Pointer(T.DWORD)]], [['stdcall']]))('mciGetYieldProc');},
    Netbios: function() {return (Fn(T.UCHAR, [[T.PNCB, 'pncb']], [['stdcall']]))('Netbios');},
    DceErrorInqTextA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_STATUS, 'e'], [T.RPC_CSTR, 'buffer']], [['stdcall']]))('DceErrorInqTextA');},
    DceErrorInqTextW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_STATUS, 'e'], [T.RPC_WSTR, 'buffer']], [['stdcall']]))('DceErrorInqTextW');},
    RpcRaiseException: function() {return (Fn(null, [[T.RPC_STATUS, 'exception']], [['noreturn'], ['stdcall']]))('RpcRaiseException');},
    RpcBindingCopy: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'SourceBinding'], [Pointer(T.RPC_BINDING_HANDLE), 'DestinationBinding']], [['stdcall']]))('RpcBindingCopy');},
    RpcBindingFree: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_BINDING_HANDLE), 'Binding']], [['stdcall']]))('RpcBindingFree');},
    RpcBindingInqObject: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.UUID), 'ObjectUuid']], [['stdcall']]))('RpcBindingInqObject');},
    RpcBindingInqOption: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [T.ULONG, 'Option'], [Pointer(T.ULONG_PTR), 'OptionValue']], [['stdcall']]))('RpcBindingInqOption');},
    RpcBindingReset: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding']], [['stdcall']]))('RpcBindingReset');},
    RpcBindingSetObject: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.UUID), 'ObjectUuid']], [['stdcall']]))('RpcBindingSetObject');},
    RpcBindingSetOption: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [T.ULONG, 'Option'], [T.ULONG_PTR, 'OptionValue']], [['stdcall']]))('RpcBindingSetOption');},
    RpcObjectSetType: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.UUID), 'ObjUuid'], [Pointer(T.UUID), 'TypeUuid']], [['stdcall']]))('RpcObjectSetType');},
    RpcBindingFromStringBindingA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'StringBinding'], [Pointer(T.RPC_BINDING_HANDLE), 'Binding']], [['stdcall']]))('RpcBindingFromStringBindingA');},
    RpcBindingFromStringBindingW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'StringBinding'], [Pointer(T.RPC_BINDING_HANDLE), 'Binding']], [['stdcall']]))('RpcBindingFromStringBindingW');},
    RpcBindingToStringBindingA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.RPC_CSTR), 'StringBinding']], [['stdcall']]))('RpcBindingToStringBindingA');},
    RpcBindingToStringBindingW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.RPC_WSTR), 'StringBinding']], [['stdcall']]))('RpcBindingToStringBindingW');},
    RpcBindingVectorFree: function() {return (Fn(T.RPC_STATUS, [[Pointer(Pointer(T.RPC_BINDING_VECTOR)), 'BindingVector']], [['stdcall']]))('RpcBindingVectorFree');},
    RpcStringBindingComposeA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'ObjUuid'], [T.RPC_CSTR, 'Protseq'], [T.RPC_CSTR, 'NetworkAddr'], [T.RPC_CSTR, 'Endpoint'], [T.RPC_CSTR, 'Options'], [Pointer(T.RPC_CSTR), 'StringBinding']], [['stdcall']]))('RpcStringBindingComposeA');},
    RpcStringBindingComposeW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'ObjUuid'], [T.RPC_WSTR, 'Protseq'], [T.RPC_WSTR, 'NetworkAddr'], [T.RPC_WSTR, 'Endpoint'], [T.RPC_WSTR, 'Options'], [Pointer(T.RPC_WSTR), 'StringBinding']], [['stdcall']]))('RpcStringBindingComposeW');},
    RpcStringBindingParseA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'StringBinding'], [Pointer(T.RPC_CSTR), 'ObjUuid'], [Pointer(T.RPC_CSTR), 'Protseq'], [Pointer(T.RPC_CSTR), 'NetworkAddr'], [Pointer(T.RPC_CSTR), 'Endpoint'], [Pointer(T.RPC_CSTR), 'NetworkOptions']], [['stdcall']]))('RpcStringBindingParseA');},
    RpcStringBindingParseW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'StringBinding'], [Pointer(T.RPC_WSTR), 'ObjUuid'], [Pointer(T.RPC_WSTR), 'Protseq'], [Pointer(T.RPC_WSTR), 'NetworkAddr'], [Pointer(T.RPC_WSTR), 'Endpoint'], [Pointer(T.RPC_WSTR), 'NetworkOptions']], [['stdcall']]))('RpcStringBindingParseW');},
    RpcEpResolveBinding: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [T.RPC_IF_HANDLE, 'IfSpec']], [['stdcall']]))('RpcEpResolveBinding');},
    RpcEpRegisterA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.RPC_BINDING_VECTOR), 'BindingVector'], [Pointer(T.UUID_VECTOR), 'UuidVector'], [T.RPC_CSTR, 'Annotation']], [['stdcall']]))('RpcEpRegisterA');},
    RpcEpRegisterW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.RPC_BINDING_VECTOR), 'BindingVector'], [Pointer(T.UUID_VECTOR), 'UuidVector'], [T.RPC_WSTR, 'Annotation']], [['stdcall']]))('RpcEpRegisterW');},
    RpcEpRegisterNoReplaceA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.RPC_BINDING_VECTOR), 'BindingVector'], [Pointer(T.UUID_VECTOR), 'UuidVector'], [T.RPC_CSTR, 'Annotation']], [['stdcall']]))('RpcEpRegisterNoReplaceA');},
    RpcEpRegisterNoReplaceW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.RPC_BINDING_VECTOR), 'BindingVector'], [Pointer(T.UUID_VECTOR), 'UuidVector'], [T.RPC_WSTR, 'Annotation']], [['stdcall']]))('RpcEpRegisterNoReplaceW');},
    RpcEpUnregister: function() {return (Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.RPC_BINDING_VECTOR), 'BindingVector'], [Pointer(T.UUID_VECTOR), 'UuidVector']], [['stdcall']]))('RpcEpUnregister');},
    RpcServerInqBindings: function() {return (Fn(T.RPC_STATUS, [[Pointer(Pointer(T.RPC_BINDING_VECTOR)), 'BindingVector']], [['stdcall']]))('RpcServerInqBindings');},
    RpcServerListen: function() {return (Fn(T.RPC_STATUS, [[T.u32, 'MinimumCallThreads'], [T.u32, 'MaxCalls'], [T.u32, 'DontWait']], [['stdcall']]))('RpcServerListen');},
    RpcMgmtEnableIdleCleanup: function() {return (Fn(T.RPC_STATUS, [[null]], [['stdcall']]))('RpcMgmtEnableIdleCleanup');},
    RpcMgmtSetAuthorizationFn: function() {return (Fn(T.RPC_STATUS, [[T.RPC_MGMT_AUTHORIZATION_FN]], [['stdcall']]))('RpcMgmtSetAuthorizationFn');},
    RpcMgmtSetCancelTimeout: function() {return (Fn(T.RPC_STATUS, [[T.LONG]], [['stdcall']]))('RpcMgmtSetCancelTimeout');},
    RpcMgmtWaitServerListen: function() {return (Fn(T.RPC_STATUS, [[null]], [['stdcall']]))('RpcMgmtWaitServerListen');},
    RpcMgmtInqStats: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(Pointer(T.RPC_STATS_VECTOR)), 'Statistics']], [['stdcall']]))('RpcMgmtInqStats');},
    RpcMgmtStopServerListening: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding']], [['stdcall']]))('RpcMgmtStopServerListening');},
    RpcMgmtIsServerListening: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding']], [['stdcall']]))('RpcMgmtIsServerListening');},
    RpcMgmtInqIfIds: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(Pointer(T.RPC_IF_ID_VECTOR)), 'IfIdVector']], [['stdcall']]))('RpcMgmtInqIfIds');},
    RpcMgmtEpEltInqBegin: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'EpBinding'], [T.ULONG, 'InquiryType'], [Pointer(T.RPC_IF_ID), 'IfId'], [T.ULONG, 'VersOption'], [Pointer(T.UUID), 'ObjectUuid'], [Pointer(T.RPC_EP_INQ_HANDLE), 'InquiryContext']], [['stdcall']]))('RpcMgmtEpEltInqBegin');},
    RpcMgmtSetComTimeout: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [T.u32, 'Timeout']], [['stdcall']]))('RpcMgmtSetComTimeout');},
    RpcMgmtSetServerStackSize: function() {return (Fn(T.RPC_STATUS, [[T.ULONG, 'ThreadStackSize']], [['stdcall']]))('RpcMgmtSetServerStackSize');},
    RpcMgmtStatsVectorFree: function() {return (Fn(T.RPC_STATUS, [[Pointer(Pointer(T.RPC_STATS_VECTOR)), 'StatsVector']], [['stdcall']]))('RpcMgmtStatsVectorFree');},
    RpcServerRegisterIf: function() {return (Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.UUID), 'MgrTypeUuid'], [Pointer(null), 'MgrEpv']], [['stdcall']]))('RpcServerRegisterIf');},
    RpcServerRegisterIfEx: function() {return (Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.UUID), 'MgrTypeUuid'], [Pointer(null), 'MgrEpv'], [T.u32, 'Flags'], [T.u32, 'MaxCalls'], [Pointer(T.RPC_IF_CALLBACK_FN), 'IfCallbackFn']], [['stdcall']]))('RpcServerRegisterIfEx');},
    RpcServerRegisterIf2: function() {return (Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.UUID), 'MgrTypeUuid'], [Pointer(null), 'MgrEpv'], [T.u32, 'Flags'], [T.u32, 'MaxCalls'], [T.u32, 'MaxRpcSize'], [Pointer(T.RPC_IF_CALLBACK_FN), 'IfCallbackFn']], [['stdcall']]))('RpcServerRegisterIf2');},
    RpcServerUnregisterIf: function() {return (Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.UUID), 'MgrTypeUuid'], [T.u32, 'WaitForCallsToComplete']], [['stdcall']]))('RpcServerUnregisterIf');},
    RpcServerUnregisterIfEx: function() {return (Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.UUID), 'MgrTypeUuid'], [T.i32, 'RundownContextHandles']], [['stdcall']]))('RpcServerUnregisterIfEx');},
    RpcServerUseProtseqA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'Protseq'], [T.u32, 'MaxCalls'], [Pointer(null), 'SecurityDescriptor']], [['stdcall']]))('RpcServerUseProtseqA');},
    RpcServerUseProtseqW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'Protseq'], [T.u32, 'MaxCalls'], [Pointer(null), 'SecurityDescriptor']], [['stdcall']]))('RpcServerUseProtseqW');},
    RpcServerUseProtseqEpA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'Protseq'], [T.u32, 'MaxCalls'], [T.RPC_CSTR, 'Endpoint'], [Pointer(null), 'SecurityDescriptor']], [['stdcall']]))('RpcServerUseProtseqEpA');},
    RpcServerUseProtseqEpW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'Protseq'], [T.u32, 'MaxCalls'], [T.RPC_WSTR, 'Endpoint'], [Pointer(null), 'SecurityDescriptor']], [['stdcall']]))('RpcServerUseProtseqEpW');},
    RpcServerUseProtseqEpExA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'Protseq'], [T.u32, 'MaxCalls'], [T.RPC_CSTR, 'Endpoint'], [Pointer(null), 'SecurityDescriptor'], [T.PRPC_POLICY, 'Policy']], [['stdcall']]))('RpcServerUseProtseqEpExA');},
    RpcServerUseProtseqEpExW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'Protseq'], [T.u32, 'MaxCalls'], [T.RPC_WSTR, 'Endpoint'], [Pointer(null), 'SecurityDescriptor'], [T.PRPC_POLICY, 'Policy']], [['stdcall']]))('RpcServerUseProtseqEpExW');},
    RpcServerRegisterAuthInfoA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'ServerPrincName'], [T.ULONG, 'AuthnSvc'], [T.RPC_AUTH_KEY_RETRIEVAL_FN, 'GetKeyFn'], [Pointer(null), 'Arg']], [['stdcall']]))('RpcServerRegisterAuthInfoA');},
    RpcServerRegisterAuthInfoW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'ServerPrincName'], [T.ULONG, 'AuthnSvc'], [T.RPC_AUTH_KEY_RETRIEVAL_FN, 'GetKeyFn'], [Pointer(null), 'Arg']], [['stdcall']]))('RpcServerRegisterAuthInfoW');},
    RpcBindingSetAuthInfoExA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [T.RPC_CSTR, 'ServerPrincName'], [T.ULONG, 'AuthnLevel'], [T.ULONG, 'AuthnSvc'], [T.RPC_AUTH_IDENTITY_HANDLE, 'AuthIdentity'], [T.ULONG, 'AuthzSvr'], [Pointer(T.RPC_SECURITY_QOS), 'SecurityQos']], [['stdcall']]))('RpcBindingSetAuthInfoExA');},
    RpcBindingSetAuthInfoExW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [T.RPC_WSTR, 'ServerPrincName'], [T.ULONG, 'AuthnLevel'], [T.ULONG, 'AuthnSvc'], [T.RPC_AUTH_IDENTITY_HANDLE, 'AuthIdentity'], [T.ULONG, 'AuthzSvr'], [Pointer(T.RPC_SECURITY_QOS), 'SecurityQos']], [['stdcall']]))('RpcBindingSetAuthInfoExW');},
    RpcBindingSetAuthInfoA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [T.RPC_CSTR, 'ServerPrincName'], [T.ULONG, 'AuthnLevel'], [T.ULONG, 'AuthnSvc'], [T.RPC_AUTH_IDENTITY_HANDLE, 'AuthIdentity'], [T.ULONG, 'AuthzSvr']], [['stdcall']]))('RpcBindingSetAuthInfoA');},
    RpcBindingSetAuthInfoW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [T.RPC_WSTR, 'ServerPrincName'], [T.ULONG, 'AuthnLevel'], [T.ULONG, 'AuthnSvc'], [T.RPC_AUTH_IDENTITY_HANDLE, 'AuthIdentity'], [T.ULONG, 'AuthzSvr']], [['stdcall']]))('RpcBindingSetAuthInfoW');},
    RpcBindingInqAuthInfoExA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.RPC_CSTR), 'ServerPrincName'], [Pointer(T.ULONG), 'AuthnLevel'], [Pointer(T.ULONG), 'AuthnSvc'], [Pointer(T.RPC_AUTH_IDENTITY_HANDLE), 'AuthIdentity'], [Pointer(T.ULONG), 'AuthzSvc'], [T.ULONG, 'RpcQosVersion'], [Pointer(T.RPC_SECURITY_QOS), 'SecurityQOS']], [['stdcall']]))('RpcBindingInqAuthInfoExA');},
    RpcBindingInqAuthInfoExW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.RPC_WSTR), 'ServerPrincName'], [Pointer(T.ULONG), 'AuthnLevel'], [Pointer(T.ULONG), 'AuthnSvc'], [Pointer(T.RPC_AUTH_IDENTITY_HANDLE), 'AuthIdentity'], [Pointer(T.ULONG), 'AuthzSvc'], [T.ULONG, 'RpcQosVersion'], [Pointer(T.RPC_SECURITY_QOS), 'SecurityQOS']], [['stdcall']]))('RpcBindingInqAuthInfoExW');},
    RpcBindingInqAuthInfoA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.RPC_CSTR), 'ServerPrincName'], [Pointer(T.ULONG), 'AuthnLevel'], [Pointer(T.ULONG), 'AuthnSvc'], [Pointer(T.RPC_AUTH_IDENTITY_HANDLE), 'AuthIdentity'], [Pointer(T.ULONG), 'AuthzSvc']], [['stdcall']]))('RpcBindingInqAuthInfoA');},
    RpcBindingInqAuthInfoW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.RPC_WSTR), 'ServerPrincName'], [Pointer(T.ULONG), 'AuthnLevel'], [Pointer(T.ULONG), 'AuthnSvc'], [Pointer(T.RPC_AUTH_IDENTITY_HANDLE), 'AuthIdentity'], [Pointer(T.ULONG), 'AuthzSvc']], [['stdcall']]))('RpcBindingInqAuthInfoW');},
    RpcBindingInqAuthClientA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'ClientBinding'], [Pointer(T.RPC_AUTHZ_HANDLE), 'Privs'], [Pointer(T.RPC_CSTR), 'ServerPrincName'], [Pointer(T.ULONG), 'AuthnLevel'], [Pointer(T.ULONG), 'AuthnSvc'], [Pointer(T.ULONG), 'AuthzSvc']], [['stdcall']]))('RpcBindingInqAuthClientA');},
    RpcBindingInqAuthClientW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'ClientBinding'], [Pointer(T.RPC_AUTHZ_HANDLE), 'Privs'], [Pointer(T.RPC_WSTR), 'ServerPrincName'], [Pointer(T.ULONG), 'AuthnLevel'], [Pointer(T.ULONG), 'AuthnSvc'], [Pointer(T.ULONG), 'AuthzSvc']], [['stdcall']]))('RpcBindingInqAuthClientW');},
    RpcBindingInqAuthClientExA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'ClientBinding'], [Pointer(T.RPC_AUTHZ_HANDLE), 'Privs'], [Pointer(T.RPC_CSTR), 'ServerPrincName'], [Pointer(T.ULONG), 'AuthnLevel'], [Pointer(T.ULONG), 'AuthnSvc'], [Pointer(T.ULONG), 'AuthzSvc'], [T.ULONG, 'Flags']], [['stdcall']]))('RpcBindingInqAuthClientExA');},
    RpcBindingInqAuthClientExW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'ClientBinding'], [Pointer(T.RPC_AUTHZ_HANDLE), 'Privs'], [Pointer(T.RPC_WSTR), 'ServerPrincName'], [Pointer(T.ULONG), 'AuthnLevel'], [Pointer(T.ULONG), 'AuthnSvc'], [Pointer(T.ULONG), 'AuthzSvc'], [T.ULONG, 'Flags']], [['stdcall']]))('RpcBindingInqAuthClientExW');},
    RpcCancelThread: function() {return (Fn(T.RPC_STATUS, [[Pointer(null)]], [['stdcall']]))('RpcCancelThread');},
    RpcCancelThreadEx: function() {return (Fn(T.RPC_STATUS, [[Pointer(null)], [T.LONG]], [['stdcall']]))('RpcCancelThreadEx');},
    RpcImpersonateClient: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding']], [['stdcall']]))('RpcImpersonateClient');},
    RpcNetworkIsProtseqValidA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'protseq']], [['stdcall']]))('RpcNetworkIsProtseqValidA');},
    RpcNetworkIsProtseqValidW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'protseq']], [['stdcall']]))('RpcNetworkIsProtseqValidW');},
    RpcRevertToSelf: function() {return (Fn(T.RPC_STATUS, [[null]], [['stdcall']]))('RpcRevertToSelf');},
    RpcRevertToSelfEx: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding']], [['stdcall']]))('RpcRevertToSelfEx');},
    RpcStringFreeA: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_CSTR), 'String']], [['stdcall']]))('RpcStringFreeA');},
    RpcStringFreeW: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_WSTR), 'String']], [['stdcall']]))('RpcStringFreeW');},
    UuidToStringA: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.UUID), 'Uuid'], [Pointer(T.RPC_CSTR), 'StringUuid']], [['stdcall']]))('UuidToStringA');},
    UuidToStringW: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.UUID), 'Uuid'], [Pointer(T.RPC_WSTR), 'StringUuid']], [['stdcall']]))('UuidToStringW');},
    UuidFromStringA: function() {return (Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'StringUuid'], [Pointer(T.UUID), 'Uuid']], [['stdcall']]))('UuidFromStringA');},
    UuidFromStringW: function() {return (Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'StringUuid'], [Pointer(T.UUID), 'Uuid']], [['stdcall']]))('UuidFromStringW');},
    UuidCreate: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.UUID), 'Uuid']], [['stdcall']]))('UuidCreate');},
    UuidCreateSequential: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.UUID), 'Uuid']], [['stdcall']]))('UuidCreateSequential');},
    UuidCreateNil: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.UUID), 'Uuid']], [['stdcall']]))('UuidCreateNil');},
    UuidCompare: function() {return (Fn(T.i32, [[Pointer(T.UUID), 'Uuid1'], [Pointer(T.UUID), 'Uuid2'], [Pointer(T.RPC_STATUS), 'Status_']], [['stdcall']]))('UuidCompare');},
    UuidEqual: function() {return (Fn(T.i32, [[Pointer(T.UUID), 'Uuid1'], [Pointer(T.UUID), 'Uuid2'], [Pointer(T.RPC_STATUS), 'Status_']], [['stdcall']]))('UuidEqual');},
    UuidHash: function() {return (Fn(T.u16, [[Pointer(T.UUID), 'Uuid'], [Pointer(T.RPC_STATUS), 'Status_']], [['stdcall']]))('UuidHash');},
    UuidIsNil: function() {return (Fn(T.i32, [[Pointer(T.UUID), 'Uuid'], [Pointer(T.RPC_STATUS), 'Status_']], [['stdcall']]))('UuidIsNil');},
    I_RpcNegotiateTransferSyntax: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_MESSAGE), 'Message']], [['stdcall']]))('I_RpcNegotiateTransferSyntax');},
    I_RpcGetBuffer: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_MESSAGE), 'Message']], [['stdcall']]))('I_RpcGetBuffer');},
    I_RpcGetBufferWithObject: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_MESSAGE), 'Message'], [Pointer(T.UUID), 'ObjectUuid']], [['stdcall']]))('I_RpcGetBufferWithObject');},
    I_RpcSendReceive: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_MESSAGE), 'Message']], [['stdcall']]))('I_RpcSendReceive');},
    I_RpcFreeBuffer: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_MESSAGE), 'Message']], [['stdcall']]))('I_RpcFreeBuffer');},
    I_RpcSend: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_MESSAGE), 'Message']], [['stdcall']]))('I_RpcSend');},
    I_RpcReceive: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_MESSAGE), 'Message']], [['stdcall']]))('I_RpcReceive');},
    I_RpcAllocate: function() {return (Fn(Pointer(null), [[T.u32, 'Size']], [['stdcall']]))('I_RpcAllocate');},
    I_RpcFree: function() {return (Fn(null, [[Pointer(null), 'Object']], [['stdcall']]))('I_RpcFree');},
    I_RpcGetCurrentCallHandle: function() {return (Fn(T.RPC_BINDING_HANDLE, [[null]], [['stdcall']]))('I_RpcGetCurrentCallHandle');},
    I_RpcBindingInqTransportType: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.u32), 'Type']], [['stdcall']]))('I_RpcBindingInqTransportType');},
    I_RpcMapWin32Status: function() {return (Fn(T.LONG, [[T.RPC_STATUS]], [['stdcall']]))('I_RpcMapWin32Status');},
    RpcAsyncInitializeHandle: function() {return (Fn(T.RPC_STATUS, [[T.PRPC_ASYNC_STATE], [T.u32]], [['stdcall']]))('RpcAsyncInitializeHandle');},
    RpcAsyncRegisterInfo: function() {return (Fn(T.RPC_STATUS, [[T.PRPC_ASYNC_STATE]], [['stdcall']]))('RpcAsyncRegisterInfo');},
    RpcAsyncGetCallStatus: function() {return (Fn(T.RPC_STATUS, [[T.PRPC_ASYNC_STATE]], [['stdcall']]))('RpcAsyncGetCallStatus');},
    RpcAsyncCompleteCall: function() {return (Fn(T.RPC_STATUS, [[T.PRPC_ASYNC_STATE], [Pointer(null)]], [['stdcall']]))('RpcAsyncCompleteCall');},
    RpcAsyncAbortCall: function() {return (Fn(T.RPC_STATUS, [[T.PRPC_ASYNC_STATE], [T.ULONG]], [['stdcall']]))('RpcAsyncAbortCall');},
    RpcAsyncCancelCall: function() {return (Fn(T.RPC_STATUS, [[T.PRPC_ASYNC_STATE], [T.BOOL]], [['stdcall']]))('RpcAsyncCancelCall');},
    RpcAsyncCleanupThread: function() {return (Fn(T.RPC_STATUS, [[T.DWORD]], [['stdcall']]))('RpcAsyncCleanupThread');},
    RpcErrorStartEnumeration: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_ERROR_ENUM_HANDLE)]], [['stdcall']]))('RpcErrorStartEnumeration');},
    RpcErrorGetNextRecord: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_ERROR_ENUM_HANDLE)], [T.BOOL], [Pointer(T.RPC_EXTENDED_ERROR_INFO)]], [['stdcall']]))('RpcErrorGetNextRecord');},
    RpcErrorEndEnumeration: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_ERROR_ENUM_HANDLE)]], [['stdcall']]))('RpcErrorEndEnumeration');},
    RpcErrorResetEnumeration: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_ERROR_ENUM_HANDLE)]], [['stdcall']]))('RpcErrorResetEnumeration');},
    RpcErrorGetNumberOfRecords: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_ERROR_ENUM_HANDLE)], [Pointer(T.i32)]], [['stdcall']]))('RpcErrorGetNumberOfRecords');},
    RpcErrorSaveErrorInfo: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_ERROR_ENUM_HANDLE)], [Pointer(T.PVOID)], [Pointer(T.SIZE_T)]], [['stdcall']]))('RpcErrorSaveErrorInfo');},
    RpcErrorLoadErrorInfo: function() {return (Fn(T.RPC_STATUS, [[T.PVOID], [T.SIZE_T], [Pointer(T.RPC_ERROR_ENUM_HANDLE)]], [['stdcall']]))('RpcErrorLoadErrorInfo');},
    RpcErrorAddRecord: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.RPC_EXTENDED_ERROR_INFO)]], [['stdcall']]))('RpcErrorAddRecord');},
    RpcErrorClearInformation: function() {return (Fn(T.RPC_STATUS, [[null]], [['stdcall']]))('RpcErrorClearInformation');},
    RpcGetAuthorizationContextForClient: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE], [T.BOOL], [T.LPVOID], [T.PLARGE_INTEGER], [T.LUID], [T.DWORD], [T.PVOID], [Pointer(T.PVOID)]], [['stdcall']]))('RpcGetAuthorizationContextForClient');},
    RpcFreeAuthorizationContext: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.PVOID)]], [['stdcall']]))('RpcFreeAuthorizationContext');},
    RpcSsContextLockExclusive: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE], [T.PVOID]], [['stdcall']]))('RpcSsContextLockExclusive');},
    RpcSsContextLockShared: function() {return (Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE], [T.PVOID]], [['stdcall']]))('RpcSsContextLockShared');},
    I_RpcAsyncSetHandle: function() {return (Fn(T.RPC_STATUS, [[T.PRPC_MESSAGE], [T.PRPC_ASYNC_STATE]], [['stdcall']]))('I_RpcAsyncSetHandle');},
    I_RpcAsyncAbortCall: function() {return (Fn(T.RPC_STATUS, [[T.PRPC_ASYNC_STATE], [T.ULONG]], [['stdcall']]))('I_RpcAsyncAbortCall');},
    I_RpcExceptionFilter: function() {return (Fn(T.i32, [[T.ULONG]], [['stdcall']]))('I_RpcExceptionFilter');},
    DragAcceptFiles: function() {return (Fn(null, [[T.HWND, 'hWnd'], [T.BOOL, 'b']], [['stdcall']]))('DragAcceptFiles');},
    DragQueryFileA: function() {return (Fn(T.UINT, [[T.HDROP, 'hDrop'], [T.UINT, 'lFile'], [T.LPSTR, 'lpszFile'], [T.UINT, 'lLength']], [['stdcall']]))('DragQueryFileA');},
    DragQueryFileW: function() {return (Fn(T.UINT, [[T.HDROP, 'hDrop'], [T.UINT, 'lFile'], [T.LPWSTR, 'lpszFile'], [T.UINT, 'lLength']], [['stdcall']]))('DragQueryFileW');},
    DragFinish: function() {return (Fn(null, [[T.HDROP, 'h']], [['stdcall']]))('DragFinish');},
    DragQueryPoint: function() {return (Fn(T.BOOL, [[T.HDROP, 'hDrop'], [Pointer(T.POINT), 'p']], [['stdcall']]))('DragQueryPoint');},
    SHAppBarMessage: function() {return (Fn(T.UINT_PTR, [[T.DWORD], [T.PAPPBARDATA]], [['stdcall']]))('SHAppBarMessage');},
    SHGetFileInfoA: function() {return (Fn(T.DWORD_PTR, [[T.LPCSTR], [T.DWORD], [Pointer(T.SHFILEINFOA)], [T.UINT], [T.UINT]], [['stdcall']]))('SHGetFileInfoA');},
    SHGetFileInfoW: function() {return (Fn(T.DWORD_PTR, [[T.LPCWSTR], [T.DWORD], [Pointer(T.SHFILEINFOW)], [T.UINT], [T.UINT]], [['stdcall']]))('SHGetFileInfoW');},
    SHGetImageList: function() {return (Fn(T.HRESULT, [[T.INT], [Pointer(T.IID)], [Pointer(Pointer(null))]], [['stdcall']]))('SHGetImageList');},
    SHFileOperationA: function() {return (Fn(T.i32, [[T.LPSHFILEOPSTRUCTA, 'lpFileOp']], [['stdcall']]))('SHFileOperationA');},
    SHFileOperationW: function() {return (Fn(T.i32, [[T.LPSHFILEOPSTRUCTW, 'lpFileOp']], [['stdcall']]))('SHFileOperationW');},
    SHFreeNameMappings: function() {return (Fn(null, [[T.HANDLE, 'hNameMappings']], [['stdcall']]))('SHFreeNameMappings');},
    ShellExecuteA: function() {return (Fn(T.HINSTANCE, [[T.HWND], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.INT]], [['stdcall']]))('ShellExecuteA');},
    ShellExecuteW: function() {return (Fn(T.HINSTANCE, [[T.HWND], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.INT]], [['stdcall']]))('ShellExecuteW');},
    ShellExecuteExA: function() {return (Fn(T.BOOL, [[T.LPSHELLEXECUTEINFOA, 'lpExecInfo']], [['stdcall']]))('ShellExecuteExA');},
    ShellExecuteExW: function() {return (Fn(T.BOOL, [[T.LPSHELLEXECUTEINFOW, 'lpExecInfo']], [['stdcall']]))('ShellExecuteExW');},
    WinExecErrorA: function() {return (Fn(null, [[T.HWND, 'hwnd'], [T.INT, 'error'], [T.LPCSTR, 'lpstrFileName'], [T.LPCSTR, 'lpstrTitle']], [['stdcall']]))('WinExecErrorA');},
    WinExecErrorW: function() {return (Fn(null, [[T.HWND, 'hwnd'], [T.INT, 'error'], [T.LPCWSTR, 'lpstrFileName'], [T.LPCWSTR, 'lpstrTitle']], [['stdcall']]))('WinExecErrorW');},
    Shell_NotifyIconA: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwMessage'], [T.PNOTIFYICONDATAA, 'lpData']], [['stdcall']]))('Shell_NotifyIconA');},
    Shell_NotifyIconW: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwMessage'], [T.PNOTIFYICONDATAW, 'lpData']], [['stdcall']]))('Shell_NotifyIconW');},
    SHGetNewLinkInfoA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPSTR], [Pointer(T.BOOL)], [T.UINT]], [['stdcall']]))('SHGetNewLinkInfoA');},
    SHGetNewLinkInfoW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPWSTR], [Pointer(T.BOOL)], [T.UINT]], [['stdcall']]))('SHGetNewLinkInfoW');},
    SHEmptyRecycleBinA: function() {return (Fn(T.HRESULT, [[T.HWND], [T.LPCSTR], [T.DWORD]], [['stdcall']]))('SHEmptyRecycleBinA');},
    SHEmptyRecycleBinW: function() {return (Fn(T.HRESULT, [[T.HWND], [T.LPCWSTR], [T.DWORD]], [['stdcall']]))('SHEmptyRecycleBinW');},
    SHQueryRecycleBinA: function() {return (Fn(T.HRESULT, [[T.LPCSTR], [T.LPSHQUERYRBINFO]], [['stdcall']]))('SHQueryRecycleBinA');},
    SHQueryRecycleBinW: function() {return (Fn(T.HRESULT, [[T.LPCWSTR], [T.LPSHQUERYRBINFO]], [['stdcall']]))('SHQueryRecycleBinW');},
    CommandLineToArgvW: function() {return (Fn(Pointer(T.LPWSTR), [[T.LPCWSTR], [Pointer(T.i32)]], [['stdcall']]))('CommandLineToArgvW');},
    ExtractIconA: function() {return (Fn(T.HICON, [[T.HINSTANCE], [T.LPCSTR], [T.UINT]], [['stdcall']]))('ExtractIconA');},
    ExtractIconW: function() {return (Fn(T.HICON, [[T.HINSTANCE], [T.LPCWSTR], [T.UINT]], [['stdcall']]))('ExtractIconW');},
    ExtractAssociatedIconA: function() {return (Fn(T.HICON, [[T.HINSTANCE], [T.LPSTR], [T.LPWORD]], [['stdcall']]))('ExtractAssociatedIconA');},
    ExtractAssociatedIconW: function() {return (Fn(T.HICON, [[T.HINSTANCE], [T.LPWSTR], [T.LPWORD]], [['stdcall']]))('ExtractAssociatedIconW');},
    ExtractAssociatedIconExA: function() {return (Fn(T.HICON, [[T.HINSTANCE], [T.LPSTR], [T.LPWORD], [T.LPWORD]], [['stdcall']]))('ExtractAssociatedIconExA');},
    ExtractAssociatedIconExW: function() {return (Fn(T.HICON, [[T.HINSTANCE], [T.LPWSTR], [T.LPWORD], [T.LPWORD]], [['stdcall']]))('ExtractAssociatedIconExW');},
    ExtractIconExA: function() {return (Fn(T.UINT, [[T.LPCSTR], [T.INT], [Pointer(T.HICON)], [Pointer(T.HICON)], [T.UINT]], [['stdcall']]))('ExtractIconExA');},
    ExtractIconExW: function() {return (Fn(T.UINT, [[T.LPCWSTR], [T.INT], [Pointer(T.HICON)], [Pointer(T.HICON)], [T.UINT]], [['stdcall']]))('ExtractIconExW');},
    FindExecutableA: function() {return (Fn(T.HINSTANCE, [[T.LPCSTR], [T.LPCSTR], [T.LPSTR]], [['stdcall']]))('FindExecutableA');},
    FindExecutableW: function() {return (Fn(T.HINSTANCE, [[T.LPCWSTR], [T.LPCWSTR], [T.LPWSTR]], [['stdcall']]))('FindExecutableW');},
    ShellAboutA: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPCSTR], [T.LPCSTR], [T.HICON]], [['stdcall']]))('ShellAboutA');},
    ShellAboutW: function() {return (Fn(T.BOOL, [[T.HWND], [T.LPCWSTR], [T.LPCWSTR], [T.HICON]], [['stdcall']]))('ShellAboutW');},
    ShellMessageBoxA: function() {return (Fn(T.i32, [[T.HINSTANCE], [T.HWND], [T.LPCSTR], [T.LPCSTR], [T.UINT], '...'], [['cdecl']]))('ShellMessageBoxA');},
    ShellMessageBoxW: function() {return (Fn(T.i32, [[T.HINSTANCE], [T.HWND], [T.LPCWSTR], [T.LPCWSTR], [T.UINT], '...'], [['cdecl']]))('ShellMessageBoxW');},
    DoEnvironmentSubstA: function() {return (Fn(T.DWORD, [[T.LPSTR], [T.UINT]], [['stdcall']]))('DoEnvironmentSubstA');},
    DoEnvironmentSubstW: function() {return (Fn(T.DWORD, [[T.LPWSTR], [T.UINT]], [['stdcall']]))('DoEnvironmentSubstW');},
    _daylight: function() {return (T.i32)('_daylight');},
    _dstbias: function() {return (T.i32)('_dstbias');},
    _timezone: function() {return (T.i32)('_timezone');},
    _tzname: function() {return (ArrayType(Pointer(T.char), 2, [['dllimport']]))('_tzname');},
    _get_daylight: function() {return (Fn(T.errno_t, [[Pointer(T.i32), '_Daylight']], [['dllimport'], ['cdecl']]))('_get_daylight');},
    _get_dstbias: function() {return (Fn(T.errno_t, [[Pointer(T.i32), '_Daylight_savings_bias']], [['dllimport'], ['cdecl']]))('_get_dstbias');},
    _get_timezone: function() {return (Fn(T.errno_t, [[Pointer(T.i32), '_Timezone']], [['dllimport'], ['cdecl']]))('_get_timezone');},
    _get_tzname: function() {return (Fn(T.errno_t, [[Pointer(T.size_t), '_ReturnValue'], [Pointer(T.char), '_Buffer'], [T.size_t, '_SizeInBytes'], [T.i32, '_Index']], [['dllimport'], ['cdecl']]))('_get_tzname');},
    asctime: function() {return (Fn(Pointer(T.char), [[Pointer(Struct('tm', null)), '_Tm']], [['cdecl']]))('asctime');},
    _ctime32: function() {return (Fn(Pointer(T.char), [[Pointer(T.__time32_t), '_Time']], [['cdecl']]))('_ctime32');},
    clock: function() {return (Fn(T.clock_t, [[null]], [['cdecl']]))('clock');},
    _difftime32: function() {return (Fn(T.f64, [[T.__time32_t, '_Time1'], [T.__time32_t, '_Time2']], [['cdecl']]))('_difftime32');},
    _gmtime32: function() {return (Fn(Pointer(Struct('tm', null)), [[Pointer(T.__time32_t), '_Time']], [['cdecl']]))('_gmtime32');},
    _localtime32: function() {return (Fn(Pointer(Struct('tm', null)), [[Pointer(T.__time32_t), '_Time']], [['cdecl']]))('_localtime32');},
    strftime: function() {return (Fn(T.size_t, [[Pointer(T.char), '_Buf'], [T.size_t, '_SizeInBytes'], [Pointer(T.char), '_Format'], [Pointer(Struct('tm', null)), '_Tm']], [['cdecl']]))('strftime');},
    _strftime_l: function() {return (Fn(T.size_t, [[Pointer(T.char), '_Buf'], [T.size_t, '_Max_size'], [Pointer(T.char), '_Format'], [Pointer(Struct('tm', null)), '_Tm'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_strftime_l');},
    _strdate: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Buffer']], [['dllimport'], ['cdecl']]))('_strdate');},
    _strtime: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Buffer']], [['dllimport'], ['cdecl']]))('_strtime');},
    _time32: function() {return (Fn(T.__time32_t, [[Pointer(T.__time32_t), '_Time']], [['cdecl']]))('_time32');},
    _mktime32: function() {return (Fn(T.__time32_t, [[Pointer(Struct('tm', null)), '_Tm']], [['cdecl']]))('_mktime32');},
    _mkgmtime32: function() {return (Fn(T.__time32_t, [[Pointer(Struct('tm', null)), '_Tm']], [['cdecl']]))('_mkgmtime32');},
    tzset: function() {return (Fn(null, [[null]], [['cdecl']]))('tzset');},
    _tzset: function() {return (Fn(null, [[null]], [['dllimport'], ['cdecl']]))('_tzset');},
    _difftime64: function() {return (Fn(T.f64, [[T.__time64_t, '_Time1'], [T.__time64_t, '_Time2']], [['cdecl']]))('_difftime64');},
    _ctime64: function() {return (Fn(Pointer(T.char), [[Pointer(T.__time64_t), '_Time']], [['dllimport'], ['cdecl']]))('_ctime64');},
    _gmtime64: function() {return (Fn(Pointer(Struct('tm', null)), [[Pointer(T.__time64_t), '_Time']], [['dllimport'], ['cdecl']]))('_gmtime64');},
    _localtime64: function() {return (Fn(Pointer(Struct('tm', null)), [[Pointer(T.__time64_t), '_Time']], [['dllimport'], ['cdecl']]))('_localtime64');},
    _mktime64: function() {return (Fn(T.__time64_t, [[Pointer(Struct('tm', null)), '_Tm']], [['dllimport'], ['cdecl']]))('_mktime64');},
    _mkgmtime64: function() {return (Fn(T.__time64_t, [[Pointer(Struct('tm', null)), '_Tm']], [['dllimport'], ['cdecl']]))('_mkgmtime64');},
    _time64: function() {return (Fn(T.__time64_t, [[Pointer(T.__time64_t), '_Time']], [['dllimport'], ['cdecl']]))('_time64');},
    _getsystime: function() {return (Fn(T.u32, [[Pointer(Struct('tm', null)), '_Tm']], [['cdecl']]))('_getsystime');},
    _setsystime: function() {return (Fn(T.u32, [[Pointer(Struct('tm', null)), '_Tm'], [T.u32, '_MilliSec']], [['cdecl']]))('_setsystime');},
    _wasctime: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(Struct('tm', null)), '_Tm']], [['dllimport'], ['cdecl']]))('_wasctime');},
    _wctime32: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.__time32_t), '_Time']], [['cdecl']]))('_wctime32');},
    wcsftime: function() {return (Fn(T.size_t, [[Pointer(T.wchar_t), '_Buf'], [T.size_t, '_SizeInWords'], [Pointer(T.wchar_t), '_Format'], [Pointer(Struct('tm', null)), '_Tm']], [['cdecl']]))('wcsftime');},
    _wcsftime_l: function() {return (Fn(T.size_t, [[Pointer(T.wchar_t), '_Buf'], [T.size_t, '_SizeInWords'], [Pointer(T.wchar_t), '_Format'], [Pointer(Struct('tm', null)), '_Tm'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wcsftime_l');},
    _wstrdate: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Buffer']], [['dllimport'], ['cdecl']]))('_wstrdate');},
    _wstrtime: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Buffer']], [['dllimport'], ['cdecl']]))('_wstrtime');},
    _wctime64: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.__time64_t), '_Time']], [['dllimport'], ['cdecl']]))('_wctime64');},
    _wctime: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.time_t)]], [['cdecl']]))('_wctime');},
    difftime: function() {return (Fn(T.f64, [[T.time_t, '_Time1'], [T.time_t, '_Time2']], [['cdecl']]))('difftime');},
    ctime: function() {return (Fn(Pointer(T.char), [[Pointer(T.time_t), '_Time']], [['cdecl']]))('ctime');},
    gmtime: function() {return (Fn(Pointer(Struct('tm', null)), [[Pointer(T.time_t), '_Time']], [['cdecl']]))('gmtime');},
    localtime: function() {return (Fn(Pointer(Struct('tm', null)), [[Pointer(T.time_t), '_Time']], [['cdecl']]))('localtime');},
    mktime: function() {return (Fn(T.time_t, [[Pointer(Struct('tm', null)), '_Tm']], [['cdecl']]))('mktime');},
    _mkgmtime: function() {return (Fn(T.time_t, [[Pointer(Struct('tm', null)), '_Tm']], [['cdecl']]))('_mkgmtime');},
    time: function() {return (Fn(T.time_t, [[Pointer(T.time_t), '_Time']], [['cdecl']]))('time');},
    daylight: function() {return (T.i32)('daylight');},
    timezone: function() {return (T.i32)('timezone');},
    tzname: function() {return (ArrayType(Pointer(T.char), 2, [['dllimport']]))('tzname');},
    mingw_gettimeofday: function() {return (Fn(T.i32, [[Pointer(Struct('unix_timeval', null)), 'p'], [Pointer(Struct('timezone', null)), 'z']], [['cdecl']]))('mingw_gettimeofday');},
    _ftime64: function() {return (Fn(null, [[Pointer(Struct('__timeb64', null)), '_Time']], [['dllimport'], ['cdecl']]))('_ftime64');},
    _ftime: function() {return (Fn(null, [[Pointer(Struct('__timeb32', null))]], [['dllimport'], ['cdecl']]))('_ftime');},
    ftime: function() {return (Fn(null, [[Pointer(Struct('timeb', null))]], [['cdecl']]))('ftime');},
    _set_purecall_handler: function() {return (Fn(T._purecall_handler, [[T._purecall_handler, '_Handler']], [['dllimport'], ['cdecl']]))('_set_purecall_handler');},
    _get_purecall_handler: function() {return (Fn(T._purecall_handler, [[null]], [['dllimport'], ['cdecl']]))('_get_purecall_handler');},
    _set_invalid_parameter_handler: function() {return (Fn(T._invalid_parameter_handler, [[T._invalid_parameter_handler, '_Handler']], [['cdecl']]))('_set_invalid_parameter_handler');},
    _get_invalid_parameter_handler: function() {return (Fn(T._invalid_parameter_handler, [[null]], [['cdecl']]))('_get_invalid_parameter_handler');},
    __doserrno: function() {return (Fn(Pointer(T.u32), [[null]], [['dllimport'], ['cdecl']]))('__doserrno');},
    _set_doserrno: function() {return (Fn(T.errno_t, [[T.u32, '_Value']], [['cdecl']]))('_set_doserrno');},
    _get_doserrno: function() {return (Fn(T.errno_t, [[Pointer(T.u32), '_Value']], [['cdecl']]))('_get_doserrno');},
    _sys_errlist: function() {return (ArrayType(Pointer(T.char), 1, [['dllimport']]))('_sys_errlist');},
    _sys_nerr: function() {return (T.i32)('_sys_nerr');},
    __p___argc: function() {return (Fn(Pointer(T.i32), [[null]]))('__p___argc');},
    __p___argv: function() {return (Fn(Pointer(Pointer(Pointer(T.char))), [[null]]))('__p___argv');},
    __p___wargv: function() {return (Fn(Pointer(Pointer(Pointer(T.wchar_t))), [[null]]))('__p___wargv');},
    __p__environ: function() {return (Fn(Pointer(Pointer(Pointer(T.char))), [[null]]))('__p__environ');},
    __p__wenviron: function() {return (Fn(Pointer(Pointer(Pointer(T.wchar_t))), [[null]]))('__p__wenviron');},
    __p__pgmptr: function() {return (Fn(Pointer(Pointer(T.char)), [[null]]))('__p__pgmptr');},
    __p__wpgmptr: function() {return (Fn(Pointer(Pointer(T.wchar_t)), [[null]], [['dllimport'], ['cdecl']]))('__p__wpgmptr');},
    _imp____argc: function() {return (Pointer(T.i32))('_imp____argc');},
    _imp____argv: function() {return (Pointer(Pointer(Pointer(T.char))))('_imp____argv');},
    _imp____wargv: function() {return (Pointer(Pointer(Pointer(T.wchar_t))))('_imp____wargv');},
    _imp___environ: function() {return (Pointer(Pointer(Pointer(T.char))))('_imp___environ');},
    _imp___wenviron: function() {return (Pointer(Pointer(Pointer(T.wchar_t))))('_imp___wenviron');},
    _imp___pgmptr: function() {return (Pointer(Pointer(T.char)))('_imp___pgmptr');},
    _imp___wpgmptr: function() {return (Pointer(Pointer(T.wchar_t)))('_imp___wpgmptr');},
    _get_pgmptr: function() {return (Fn(T.errno_t, [[Pointer(Pointer(T.char)), '_Value']], [['cdecl']]))('_get_pgmptr');},
    _get_wpgmptr: function() {return (Fn(T.errno_t, [[Pointer(Pointer(T.wchar_t)), '_Value']], [['cdecl']]))('_get_wpgmptr');},
    _imp___fmode: function() {return (Pointer(T.i32))('_imp___fmode');},
    _set_fmode: function() {return (Fn(T.errno_t, [[T.i32, '_Mode']], [['dllimport'], ['cdecl']]))('_set_fmode');},
    _get_fmode: function() {return (Fn(T.errno_t, [[Pointer(T.i32), '_PMode']], [['dllimport'], ['cdecl']]))('_get_fmode');},
    _imp___osplatform: function() {return (Pointer(T.u32))('_imp___osplatform');},
    _imp___osver: function() {return (Pointer(T.u32))('_imp___osver');},
    _imp___winver: function() {return (Pointer(T.u32))('_imp___winver');},
    _imp___winmajor: function() {return (Pointer(T.u32))('_imp___winmajor');},
    _imp___winminor: function() {return (Pointer(T.u32))('_imp___winminor');},
    _get_osplatform: function() {return (Fn(T.errno_t, [[Pointer(T.u32), '_Value']], [['cdecl']]))('_get_osplatform');},
    _get_osver: function() {return (Fn(T.errno_t, [[Pointer(T.u32), '_Value']], [['cdecl']]))('_get_osver');},
    _get_winver: function() {return (Fn(T.errno_t, [[Pointer(T.u32), '_Value']], [['cdecl']]))('_get_winver');},
    _get_winmajor: function() {return (Fn(T.errno_t, [[Pointer(T.u32), '_Value']], [['cdecl']]))('_get_winmajor');},
    _get_winminor: function() {return (Fn(T.errno_t, [[Pointer(T.u32), '_Value']], [['cdecl']]))('_get_winminor');},
    exit: function() {return (Fn(null, [[T.i32, '_Code']], [['cdecl'], ['nothrow'], ['noreturn']]))('exit');},
    _exit: function() {return (Fn(null, [[T.i32, '_Code']], [['dllimport'], ['cdecl'], ['nothrow'], ['noreturn']]))('_exit');},
    _Exit: function() {return (Fn(null, [[T.i32]], [['cdecl'], ['noreturn']]))('_Exit');},
    abort: function() {return (Fn(null, [[null]], [['cdecl'], ['noreturn']]))('abort');},
    _set_abort_behavior: function() {return (Fn(T.u32, [[T.u32, '_Flags'], [T.u32, '_Mask']], [['dllimport'], ['cdecl']]))('_set_abort_behavior');},
    abs: function() {return (Fn(T.i32, [[T.i32, '_X']], [['cdecl']]))('abs');},
    labs: function() {return (Fn(T.i32, [[T.i32, '_X']], [['cdecl']]))('labs');},
    _abs64: function() {return (Fn(T.i64, [[T.i64]], [['cdecl']]))('_abs64');},
    atexit: function() {return (Fn(T.i32, [[Pointer(Fn(null, [[null]]))]], [['cdecl']]))('atexit');},
    atof: function() {return (Fn(T.f64, [[Pointer(T.char), '_String']], [['cdecl']]))('atof');},
    _atof_l: function() {return (Fn(T.f64, [[Pointer(T.char), '_String'], [T._locale_t, '_Locale']], [['cdecl']]))('_atof_l');},
    atoi: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str']], [['cdecl']]))('atoi');},
    _atoi_l: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_atoi_l');},
    atol: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str']], [['cdecl']]))('atol');},
    _atol_l: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_atol_l');},
    bsearch: function() {return (Fn(Pointer(null), [[Pointer(null), '_Key'], [Pointer(null), '_Base'], [T.size_t, '_NumOfElements'], [T.size_t, '_SizeOfElements'], [Pointer(Fn(T.i32, [[Pointer(null)], [Pointer(null)]])), '_PtFuncCompare']], [['cdecl']]))('bsearch');},
    qsort: function() {return (Fn(null, [[Pointer(null), '_Base'], [T.size_t, '_NumOfElements'], [T.size_t, '_SizeOfElements'], [Pointer(Fn(T.i32, [[Pointer(null)], [Pointer(null)]])), '_PtFuncCompare']], [['cdecl']]))('qsort');},
    _byteswap_ushort: function() {return (Fn(T.u16, [[T.u16, '_Short']], [['cdecl']]))('_byteswap_ushort');},
    _byteswap_uint64: function() {return (Fn(T.u64, [[T.u64, '_Int64']], [['cdecl']]))('_byteswap_uint64');},
    div: function() {return (Fn(T.div_t, [[T.i32, '_Numerator'], [T.i32, '_Denominator']], [['cdecl']]))('div');},
    getenv: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_VarName']], [['cdecl']]))('getenv');},
    _itoa: function() {return (Fn(Pointer(T.char), [[T.i32, '_Value'], [Pointer(T.char), '_Dest'], [T.i32, '_Radix']], [['dllimport'], ['cdecl']]))('_itoa');},
    _i64toa: function() {return (Fn(Pointer(T.char), [[T.i64, '_Val'], [Pointer(T.char), '_DstBuf'], [T.i32, '_Radix']], [['dllimport'], ['cdecl']]))('_i64toa');},
    _ui64toa: function() {return (Fn(Pointer(T.char), [[T.u64, '_Val'], [Pointer(T.char), '_DstBuf'], [T.i32, '_Radix']], [['dllimport'], ['cdecl']]))('_ui64toa');},
    _atoi64: function() {return (Fn(T.i64, [[Pointer(T.char), '_String']], [['dllimport'], ['cdecl']]))('_atoi64');},
    _atoi64_l: function() {return (Fn(T.i64, [[Pointer(T.char), '_String'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_atoi64_l');},
    _strtoi64: function() {return (Fn(T.i64, [[Pointer(T.char), '_String'], [Pointer(Pointer(T.char)), '_EndPtr'], [T.i32, '_Radix']], [['dllimport'], ['cdecl']]))('_strtoi64');},
    _strtoi64_l: function() {return (Fn(T.i64, [[Pointer(T.char), '_String'], [Pointer(Pointer(T.char)), '_EndPtr'], [T.i32, '_Radix'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_strtoi64_l');},
    _strtoui64: function() {return (Fn(T.u64, [[Pointer(T.char), '_String'], [Pointer(Pointer(T.char)), '_EndPtr'], [T.i32, '_Radix']], [['dllimport'], ['cdecl']]))('_strtoui64');},
    _strtoui64_l: function() {return (Fn(T.u64, [[Pointer(T.char), '_String'], [Pointer(Pointer(T.char)), '_EndPtr'], [T.i32, '_Radix'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_strtoui64_l');},
    ldiv: function() {return (Fn(T.ldiv_t, [[T.i32, '_Numerator'], [T.i32, '_Denominator']], [['cdecl']]))('ldiv');},
    _ltoa: function() {return (Fn(Pointer(T.char), [[T.i32, '_Value'], [Pointer(T.char), '_Dest'], [T.i32, '_Radix']], [['dllimport'], ['cdecl']]))('_ltoa');},
    mblen: function() {return (Fn(T.i32, [[Pointer(T.char), '_Ch'], [T.size_t, '_MaxCount']], [['cdecl']]))('mblen');},
    _mblen_l: function() {return (Fn(T.i32, [[Pointer(T.char), '_Ch'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_mblen_l');},
    _mbstrlen: function() {return (Fn(T.size_t, [[Pointer(T.char), '_Str']], [['dllimport'], ['cdecl']]))('_mbstrlen');},
    _mbstrlen_l: function() {return (Fn(T.size_t, [[Pointer(T.char), '_Str'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_mbstrlen_l');},
    _mbstrnlen: function() {return (Fn(T.size_t, [[Pointer(T.char), '_Str'], [T.size_t, '_MaxCount']], [['dllimport'], ['cdecl']]))('_mbstrnlen');},
    _mbstrnlen_l: function() {return (Fn(T.size_t, [[Pointer(T.char), '_Str'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_mbstrnlen_l');},
    mbtowc: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_DstCh'], [Pointer(T.char), '_SrcCh'], [T.size_t, '_SrcSizeInBytes']], [['cdecl']]))('mbtowc');},
    _mbtowc_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_DstCh'], [Pointer(T.char), '_SrcCh'], [T.size_t, '_SrcSizeInBytes'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_mbtowc_l');},
    mbstowcs: function() {return (Fn(T.size_t, [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.char), '_Source'], [T.size_t, '_MaxCount']], [['cdecl']]))('mbstowcs');},
    _mbstowcs_l: function() {return (Fn(T.size_t, [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.char), '_Source'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_mbstowcs_l');},
    rand: function() {return (Fn(T.i32, [[null]], [['cdecl']]))('rand');},
    _set_error_mode: function() {return (Fn(T.i32, [[T.i32, '_Mode']], [['dllimport'], ['cdecl']]))('_set_error_mode');},
    srand: function() {return (Fn(null, [[T.u32, '_Seed']], [['cdecl']]))('srand');},
    strtod: function() {return (Fn(T.f64, [[Pointer(T.char), '_Str'], [Pointer(Pointer(T.char)), '_EndPtr']], [['cdecl'], ['nothrow']]))('strtod');},
    strtof: function() {return (Fn(T.f32, [[Pointer(T.char), 'nptr'], [Pointer(Pointer(T.char)), 'endptr']], [['cdecl'], ['nothrow']]))('strtof');},
    strtold: function() {return (Fn(T.f128, [[Pointer(T.char)], [Pointer(Pointer(T.char))]], [['cdecl'], ['nothrow']]))('strtold');},
    __strtod: function() {return (Fn(T.f64, [[Pointer(T.char)], [Pointer(Pointer(T.char))]], [['cdecl'], ['nothrow']]))('__strtod');},
    __mingw_strtof: function() {return (Fn(T.f32, [[Pointer(T.char)], [Pointer(Pointer(T.char))]], [['cdecl']]))('__mingw_strtof');},
    __mingw_strtold: function() {return (Fn(T.f128, [[Pointer(T.char)], [Pointer(Pointer(T.char))]], [['cdecl']]))('__mingw_strtold');},
    _strtod_l: function() {return (Fn(T.f64, [[Pointer(T.char), '_Str'], [Pointer(Pointer(T.char)), '_EndPtr'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_strtod_l');},
    strtol: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str'], [Pointer(Pointer(T.char)), '_EndPtr'], [T.i32, '_Radix']], [['cdecl']]))('strtol');},
    _strtol_l: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str'], [Pointer(Pointer(T.char)), '_EndPtr'], [T.i32, '_Radix'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_strtol_l');},
    strtoul: function() {return (Fn(T.u32, [[Pointer(T.char), '_Str'], [Pointer(Pointer(T.char)), '_EndPtr'], [T.i32, '_Radix']], [['cdecl']]))('strtoul');},
    _strtoul_l: function() {return (Fn(T.u32, [[Pointer(T.char), '_Str'], [Pointer(Pointer(T.char)), '_EndPtr'], [T.i32, '_Radix'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_strtoul_l');},
    system: function() {return (Fn(T.i32, [[Pointer(T.char), '_Command']], [['cdecl']]))('system');},
    _ultoa: function() {return (Fn(Pointer(T.char), [[T.u32, '_Value'], [Pointer(T.char), '_Dest'], [T.i32, '_Radix']], [['dllimport'], ['cdecl']]))('_ultoa');},
    wctomb: function() {return (Fn(T.i32, [[Pointer(T.char), '_MbCh'], [T.wchar_t, '_WCh']], [['cdecl']]))('wctomb');},
    _wctomb_l: function() {return (Fn(T.i32, [[Pointer(T.char), '_MbCh'], [T.wchar_t, '_WCh'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wctomb_l');},
    wcstombs: function() {return (Fn(T.size_t, [[Pointer(T.char), '_Dest'], [Pointer(T.wchar_t), '_Source'], [T.size_t, '_MaxCount']], [['cdecl']]))('wcstombs');},
    _wcstombs_l: function() {return (Fn(T.size_t, [[Pointer(T.char), '_Dest'], [Pointer(T.wchar_t), '_Source'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wcstombs_l');},
    calloc: function() {return (Fn(Pointer(null), [[T.size_t, '_NumOfElements'], [T.size_t, '_SizeOfElements']], [['cdecl']]))('calloc');},
    free: function() {return (Fn(null, [[Pointer(null), '_Memory']], [['cdecl']]))('free');},
    malloc: function() {return (Fn(Pointer(null), [[T.size_t, '_Size']], [['cdecl']]))('malloc');},
    realloc: function() {return (Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_NewSize']], [['cdecl']]))('realloc');},
    _recalloc: function() {return (Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_Count'], [T.size_t, '_Size']], [['dllimport'], ['cdecl']]))('_recalloc');},
    _aligned_free: function() {return (Fn(null, [[Pointer(null), '_Memory']], [['dllimport'], ['cdecl']]))('_aligned_free');},
    _aligned_malloc: function() {return (Fn(Pointer(null), [[T.size_t, '_Size'], [T.size_t, '_Alignment']], [['dllimport'], ['cdecl']]))('_aligned_malloc');},
    _aligned_offset_malloc: function() {return (Fn(Pointer(null), [[T.size_t, '_Size'], [T.size_t, '_Alignment'], [T.size_t, '_Offset']], [['dllimport'], ['cdecl']]))('_aligned_offset_malloc');},
    _aligned_realloc: function() {return (Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_Size'], [T.size_t, '_Alignment']], [['dllimport'], ['cdecl']]))('_aligned_realloc');},
    _aligned_recalloc: function() {return (Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_Count'], [T.size_t, '_Size'], [T.size_t, '_Alignment']], [['dllimport'], ['cdecl']]))('_aligned_recalloc');},
    _aligned_offset_realloc: function() {return (Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_Size'], [T.size_t, '_Alignment'], [T.size_t, '_Offset']], [['dllimport'], ['cdecl']]))('_aligned_offset_realloc');},
    _aligned_offset_recalloc: function() {return (Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_Count'], [T.size_t, '_Size'], [T.size_t, '_Alignment'], [T.size_t, '_Offset']], [['dllimport'], ['cdecl']]))('_aligned_offset_recalloc');},
    _itow: function() {return (Fn(Pointer(T.wchar_t), [[T.i32, '_Value'], [Pointer(T.wchar_t), '_Dest'], [T.i32, '_Radix']], [['dllimport'], ['cdecl']]))('_itow');},
    _ltow: function() {return (Fn(Pointer(T.wchar_t), [[T.i32, '_Value'], [Pointer(T.wchar_t), '_Dest'], [T.i32, '_Radix']], [['dllimport'], ['cdecl']]))('_ltow');},
    _ultow: function() {return (Fn(Pointer(T.wchar_t), [[T.u32, '_Value'], [Pointer(T.wchar_t), '_Dest'], [T.i32, '_Radix']], [['dllimport'], ['cdecl']]))('_ultow');},
    wcstod: function() {return (Fn(T.f64, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr']], [['cdecl']]))('wcstod');},
    wcstof: function() {return (Fn(T.f32, [[Pointer(T.wchar_t)], [Pointer(Pointer(T.wchar_t))]], [['cdecl']]))('wcstof');},
    __mingw_wcstod: function() {return (Fn(T.f64, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr']], [['cdecl']]))('__mingw_wcstod');},
    __mingw_wcstof: function() {return (Fn(T.f32, [[Pointer(T.wchar_t), 'nptr'], [Pointer(Pointer(T.wchar_t)), 'endptr']], [['cdecl']]))('__mingw_wcstof');},
    __mingw_wcstold: function() {return (Fn(T.f128, [[Pointer(T.wchar_t)], [Pointer(Pointer(T.wchar_t))]], [['cdecl']]))('__mingw_wcstold');},
    wcstold: function() {return (Fn(T.f128, [[Pointer(T.wchar_t)], [Pointer(Pointer(T.wchar_t))]], [['cdecl']]))('wcstold');},
    _wcstod_l: function() {return (Fn(T.f64, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wcstod_l');},
    wcstol: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T.i32, '_Radix']], [['cdecl']]))('wcstol');},
    _wcstol_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T.i32, '_Radix'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wcstol_l');},
    wcstoul: function() {return (Fn(T.u32, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T.i32, '_Radix']], [['cdecl']]))('wcstoul');},
    _wcstoul_l: function() {return (Fn(T.u32, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T.i32, '_Radix'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wcstoul_l');},
    _wgetenv: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_VarName']], [['dllimport'], ['cdecl']]))('_wgetenv');},
    _wsystem: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Command']], [['dllimport'], ['cdecl']]))('_wsystem');},
    _wtof: function() {return (Fn(T.f64, [[Pointer(T.wchar_t), '_Str']], [['dllimport'], ['cdecl']]))('_wtof');},
    _wtof_l: function() {return (Fn(T.f64, [[Pointer(T.wchar_t), '_Str'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wtof_l');},
    _wtoi: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str']], [['dllimport'], ['cdecl']]))('_wtoi');},
    _wtoi_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wtoi_l');},
    _wtol: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str']], [['dllimport'], ['cdecl']]))('_wtol');},
    _wtol_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wtol_l');},
    _i64tow: function() {return (Fn(Pointer(T.wchar_t), [[T.i64, '_Val'], [Pointer(T.wchar_t), '_DstBuf'], [T.i32, '_Radix']], [['dllimport'], ['cdecl']]))('_i64tow');},
    _ui64tow: function() {return (Fn(Pointer(T.wchar_t), [[T.u64, '_Val'], [Pointer(T.wchar_t), '_DstBuf'], [T.i32, '_Radix']], [['dllimport'], ['cdecl']]))('_ui64tow');},
    _wtoi64: function() {return (Fn(T.i64, [[Pointer(T.wchar_t), '_Str']], [['dllimport'], ['cdecl']]))('_wtoi64');},
    _wtoi64_l: function() {return (Fn(T.i64, [[Pointer(T.wchar_t), '_Str'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wtoi64_l');},
    _wcstoi64: function() {return (Fn(T.i64, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T.i32, '_Radix']], [['dllimport'], ['cdecl']]))('_wcstoi64');},
    _wcstoi64_l: function() {return (Fn(T.i64, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T.i32, '_Radix'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wcstoi64_l');},
    _wcstoui64: function() {return (Fn(T.u64, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T.i32, '_Radix']], [['dllimport'], ['cdecl']]))('_wcstoui64');},
    _wcstoui64_l: function() {return (Fn(T.u64, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T.i32, '_Radix'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_wcstoui64_l');},
    _fullpath: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_FullPath'], [Pointer(T.char), '_Path'], [T.size_t, '_SizeInBytes']], [['dllimport'], ['cdecl']]))('_fullpath');},
    _ecvt: function() {return (Fn(Pointer(T.char), [[T.f64, '_Val'], [T.i32, '_NumOfDigits'], [Pointer(T.i32), '_PtDec'], [Pointer(T.i32), '_PtSign']], [['dllimport'], ['cdecl']]))('_ecvt');},
    _fcvt: function() {return (Fn(Pointer(T.char), [[T.f64, '_Val'], [T.i32, '_NumOfDec'], [Pointer(T.i32), '_PtDec'], [Pointer(T.i32), '_PtSign']], [['dllimport'], ['cdecl']]))('_fcvt');},
    _gcvt: function() {return (Fn(Pointer(T.char), [[T.f64, '_Val'], [T.i32, '_NumOfDigits'], [Pointer(T.char), '_DstBuf']], [['dllimport'], ['cdecl']]))('_gcvt');},
    _atodbl: function() {return (Fn(T.i32, [[Pointer(T._CRT_DOUBLE), '_Result'], [Pointer(T.char), '_Str']], [['dllimport'], ['cdecl']]))('_atodbl');},
    _atoldbl: function() {return (Fn(T.i32, [[Pointer(T._LDOUBLE), '_Result'], [Pointer(T.char), '_Str']], [['dllimport'], ['cdecl']]))('_atoldbl');},
    _atoflt: function() {return (Fn(T.i32, [[Pointer(T._CRT_FLOAT), '_Result'], [Pointer(T.char), '_Str']], [['dllimport'], ['cdecl']]))('_atoflt');},
    _atodbl_l: function() {return (Fn(T.i32, [[Pointer(T._CRT_DOUBLE), '_Result'], [Pointer(T.char), '_Str'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_atodbl_l');},
    _atoldbl_l: function() {return (Fn(T.i32, [[Pointer(T._LDOUBLE), '_Result'], [Pointer(T.char), '_Str'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_atoldbl_l');},
    _atoflt_l: function() {return (Fn(T.i32, [[Pointer(T._CRT_FLOAT), '_Result'], [Pointer(T.char), '_Str'], [T._locale_t, '_Locale']], [['dllimport'], ['cdecl']]))('_atoflt_l');},
    _lrotl: function() {return (Fn(T.u32, [[T.u32, '_Val'], [T.i32, '_Shift']], [['cdecl']]))('_lrotl');},
    _lrotr: function() {return (Fn(T.u32, [[T.u32, '_Val'], [T.i32, '_Shift']], [['cdecl']]))('_lrotr');},
    _makepath: function() {return (Fn(null, [[Pointer(T.char), '_Path'], [Pointer(T.char), '_Drive'], [Pointer(T.char), '_Dir'], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_Ext']], [['dllimport'], ['cdecl']]))('_makepath');},
    _onexit: function() {return (Fn(T._onexit_t, [[T._onexit_t, '_Func']], [['cdecl']]))('_onexit');},
    perror: function() {return (Fn(null, [[Pointer(T.char), '_ErrMsg']], [['cdecl']]))('perror');},
    _putenv: function() {return (Fn(T.i32, [[Pointer(T.char), '_EnvString']], [['dllimport'], ['cdecl']]))('_putenv');},
    _rotl64: function() {return (Fn(T.u64, [[T.u64, '_Val'], [T.i32, '_Shift']], [['cdecl']]))('_rotl64');},
    _rotr64: function() {return (Fn(T.u64, [[T.u64, '_Val'], [T.i32, '_Shift']], [['cdecl']]))('_rotr64');},
    _rotr: function() {return (Fn(T.u32, [[T.u32, '_Val'], [T.i32, '_Shift']], [['cdecl']]))('_rotr');},
    _rotl: function() {return (Fn(T.u32, [[T.u32, '_Val'], [T.i32, '_Shift']], [['cdecl']]))('_rotl');},
    _searchenv: function() {return (Fn(null, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_EnvVar'], [Pointer(T.char), '_ResultPath']], [['dllimport'], ['cdecl']]))('_searchenv');},
    _splitpath: function() {return (Fn(null, [[Pointer(T.char), '_FullPath'], [Pointer(T.char), '_Drive'], [Pointer(T.char), '_Dir'], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_Ext']], [['dllimport'], ['cdecl']]))('_splitpath');},
    _swab: function() {return (Fn(null, [[Pointer(T.char), '_Buf1'], [Pointer(T.char), '_Buf2'], [T.i32, '_SizeInBytes']], [['dllimport'], ['cdecl']]))('_swab');},
    _wfullpath: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_FullPath'], [Pointer(T.wchar_t), '_Path'], [T.size_t, '_SizeInWords']], [['dllimport'], ['cdecl']]))('_wfullpath');},
    _wmakepath: function() {return (Fn(null, [[Pointer(T.wchar_t), '_ResultPath'], [Pointer(T.wchar_t), '_Drive'], [Pointer(T.wchar_t), '_Dir'], [Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_Ext']], [['dllimport'], ['cdecl']]))('_wmakepath');},
    _wperror: function() {return (Fn(null, [[Pointer(T.wchar_t), '_ErrMsg']], [['dllimport'], ['cdecl']]))('_wperror');},
    _wputenv: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_EnvString']], [['dllimport'], ['cdecl']]))('_wputenv');},
    _wsearchenv: function() {return (Fn(null, [[Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_EnvVar'], [Pointer(T.wchar_t), '_ResultPath']], [['dllimport'], ['cdecl']]))('_wsearchenv');},
    _wsplitpath: function() {return (Fn(null, [[Pointer(T.wchar_t), '_FullPath'], [Pointer(T.wchar_t), '_Drive'], [Pointer(T.wchar_t), '_Dir'], [Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_Ext']], [['dllimport'], ['cdecl']]))('_wsplitpath');},
    _beep: function() {return (Fn(null, [[T.u32, '_Frequency'], [T.u32, '_Duration']], [['dllimport'], ['cdecl'], ['deprecated']]))('_beep');},
    _seterrormode: function() {return (Fn(null, [[T.i32, '_Mode']], [['dllimport'], ['cdecl'], ['deprecated']]))('_seterrormode');},
    _sleep: function() {return (Fn(null, [[T.u32, '_Duration']], [['dllimport'], ['cdecl'], ['deprecated']]))('_sleep');},
    ecvt: function() {return (Fn(Pointer(T.char), [[T.f64, '_Val'], [T.i32, '_NumOfDigits'], [Pointer(T.i32), '_PtDec'], [Pointer(T.i32), '_PtSign']], [['cdecl']]))('ecvt');},
    fcvt: function() {return (Fn(Pointer(T.char), [[T.f64, '_Val'], [T.i32, '_NumOfDec'], [Pointer(T.i32), '_PtDec'], [Pointer(T.i32), '_PtSign']], [['cdecl']]))('fcvt');},
    gcvt: function() {return (Fn(Pointer(T.char), [[T.f64, '_Val'], [T.i32, '_NumOfDigits'], [Pointer(T.char), '_DstBuf']], [['cdecl']]))('gcvt');},
    itoa: function() {return (Fn(Pointer(T.char), [[T.i32, '_Val'], [Pointer(T.char), '_DstBuf'], [T.i32, '_Radix']], [['cdecl']]))('itoa');},
    ltoa: function() {return (Fn(Pointer(T.char), [[T.i32, '_Val'], [Pointer(T.char), '_DstBuf'], [T.i32, '_Radix']], [['cdecl']]))('ltoa');},
    putenv: function() {return (Fn(T.i32, [[Pointer(T.char), '_EnvString']], [['cdecl']]))('putenv');},
    swab: function() {return (Fn(null, [[Pointer(T.char), '_Buf1'], [Pointer(T.char), '_Buf2'], [T.i32, '_SizeInBytes']], [['cdecl']]))('swab');},
    ultoa: function() {return (Fn(Pointer(T.char), [[T.u32, '_Val'], [Pointer(T.char), '_Dstbuf'], [T.i32, '_Radix']], [['cdecl']]))('ultoa');},
    onexit: function() {return (Fn(T._onexit_t, [[T._onexit_t, '_Func']], [['cdecl']]))('onexit');},
    lldiv: function() {return (Fn(T.lldiv_t, [[T.i64], [T.i64]], [['cdecl']]))('lldiv');},
    llabs: function() {return (Fn(T.i64, [[T.i64]], [['cdecl']]))('llabs');},
    strtoll: function() {return (Fn(T.i64, [[Pointer(T.char)], [Pointer(Pointer(T.char)), '__restrict'], [T.i32]], [['cdecl']]))('strtoll');},
    strtoull: function() {return (Fn(T.u64, [[Pointer(T.char)], [Pointer(Pointer(T.char))], [T.i32]], [['cdecl']]))('strtoull');},
    atoll: function() {return (Fn(T.i64, [[Pointer(T.char)]], [['cdecl']]))('atoll');},
    wtoll: function() {return (Fn(T.i64, [[Pointer(T.wchar_t)]], [['cdecl']]))('wtoll');},
    lltoa: function() {return (Fn(Pointer(T.char), [[T.i64], [Pointer(T.char)], [T.i32]], [['cdecl']]))('lltoa');},
    ulltoa: function() {return (Fn(Pointer(T.char), [[T.u64], [Pointer(T.char)], [T.i32]], [['cdecl']]))('ulltoa');},
    lltow: function() {return (Fn(Pointer(T.wchar_t), [[T.i64], [Pointer(T.wchar_t)], [T.i32]], [['cdecl']]))('lltow');},
    ulltow: function() {return (Fn(Pointer(T.wchar_t), [[T.u64], [Pointer(T.wchar_t)], [T.i32]], [['cdecl']]))('ulltow');},
    _amblksiz: function() {return (T.u32)('_amblksiz');},
    __mingw_aligned_malloc: function() {return (Fn(Pointer(null), [[T.size_t, '_Size'], [T.size_t, '_Alignment']]))('__mingw_aligned_malloc');},
    __mingw_aligned_free: function() {return (Fn(null, [[Pointer(null), '_Memory']]))('__mingw_aligned_free');},
    __mingw_aligned_offset_realloc: function() {return (Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_Size'], [T.size_t, '_Alignment'], [T.size_t, '_Offset']]))('__mingw_aligned_offset_realloc');},
    __mingw_aligned_realloc: function() {return (Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_Size'], [T.size_t, '_Offset']]))('__mingw_aligned_realloc');},
    _resetstkoflw: function() {return (Fn(T.i32, [[null]], [['dllimport'], ['cdecl']]))('_resetstkoflw');},
    _set_malloc_crt_max_wait: function() {return (Fn(T.u32, [[T.u32, '_NewValue']], [['dllimport'], ['cdecl']]))('_set_malloc_crt_max_wait');},
    _expand: function() {return (Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_NewSize']], [['dllimport'], ['cdecl']]))('_expand');},
    _msize: function() {return (Fn(T.size_t, [[Pointer(null), '_Memory']], [['dllimport'], ['cdecl']]))('_msize');},
    _get_sbh_threshold: function() {return (Fn(T.size_t, [[null]], [['dllimport'], ['cdecl']]))('_get_sbh_threshold');},
    _set_sbh_threshold: function() {return (Fn(T.i32, [[T.size_t, '_NewValue']], [['dllimport'], ['cdecl']]))('_set_sbh_threshold');},
    _set_amblksiz: function() {return (Fn(T.errno_t, [[T.size_t, '_Value']], [['dllimport'], ['cdecl']]))('_set_amblksiz');},
    _get_amblksiz: function() {return (Fn(T.errno_t, [[Pointer(T.size_t), '_Value']], [['dllimport'], ['cdecl']]))('_get_amblksiz');},
    _heapadd: function() {return (Fn(T.i32, [[Pointer(null), '_Memory'], [T.size_t, '_Size']], [['dllimport'], ['cdecl']]))('_heapadd');},
    _heapchk: function() {return (Fn(T.i32, [[null]], [['dllimport'], ['cdecl']]))('_heapchk');},
    _heapmin: function() {return (Fn(T.i32, [[null]], [['dllimport'], ['cdecl']]))('_heapmin');},
    _heapset: function() {return (Fn(T.i32, [[T.u32, '_Fill']], [['dllimport'], ['cdecl']]))('_heapset');},
    _heapwalk: function() {return (Fn(T.i32, [[Pointer(T._HEAPINFO), '_EntryInfo']], [['dllimport'], ['cdecl']]))('_heapwalk');},
    _heapused: function() {return (Fn(T.size_t, [[Pointer(T.size_t), '_Used'], [Pointer(T.size_t), '_Commit']], [['dllimport'], ['cdecl']]))('_heapused');},
    _get_heap_handle: function() {return (Fn(T.intptr_t, [[null]], [['dllimport'], ['cdecl']]))('_get_heap_handle');},
    __WSAFDIsSet: function() {return (Fn(T.i32, [[T.SOCKET], [Pointer(T.fd_set)]], [['stdcall']]))('__WSAFDIsSet');},
    WSAAsyncGetHostByAddr: function() {return (Fn(T.HANDLE, [[T.HWND], [T.u_int], [Pointer(T.char)], [T.i32], [T.i32], [Pointer(T.char)], [T.i32]], [['stdcall']]))('WSAAsyncGetHostByAddr');},
    WSAAsyncGetHostByName: function() {return (Fn(T.HANDLE, [[T.HWND], [T.u_int], [Pointer(T.char)], [Pointer(T.char)], [T.i32]], [['stdcall']]))('WSAAsyncGetHostByName');},
    WSAAsyncGetProtoByName: function() {return (Fn(T.HANDLE, [[T.HWND], [T.u_int], [Pointer(T.char)], [Pointer(T.char)], [T.i32]], [['stdcall']]))('WSAAsyncGetProtoByName');},
    WSAAsyncGetProtoByNumber: function() {return (Fn(T.HANDLE, [[T.HWND], [T.u_int], [T.i32], [Pointer(T.char)], [T.i32]], [['stdcall']]))('WSAAsyncGetProtoByNumber');},
    WSAAsyncGetServByName: function() {return (Fn(T.HANDLE, [[T.HWND], [T.u_int], [Pointer(T.char)], [Pointer(T.char)], [Pointer(T.char)], [T.i32]], [['stdcall']]))('WSAAsyncGetServByName');},
    WSAAsyncGetServByPort: function() {return (Fn(T.HANDLE, [[T.HWND], [T.u_int], [T.i32], [Pointer(T.char)], [Pointer(T.char)], [T.i32]], [['stdcall']]))('WSAAsyncGetServByPort');},
    WSAAsyncSelect: function() {return (Fn(T.i32, [[T.SOCKET], [T.HWND], [T.u_int], [T.LONG]], [['stdcall']]))('WSAAsyncSelect');},
    WSACancelAsyncRequest: function() {return (Fn(T.i32, [[T.HANDLE]], [['stdcall']]))('WSACancelAsyncRequest');},
    WSACancelBlockingCall: function() {return (Fn(T.i32, [[null]], [['stdcall']]))('WSACancelBlockingCall');},
    WSACleanup: function() {return (Fn(T.i32, [[null]], [['stdcall']]))('WSACleanup');},
    WSAGetLastError: function() {return (Fn(T.i32, [[null]], [['stdcall']]))('WSAGetLastError');},
    WSAIsBlocking: function() {return (Fn(T.BOOL, [[null]], [['stdcall']]))('WSAIsBlocking');},
    WSASetBlockingHook: function() {return (Fn(T.FARPROC, [[T.FARPROC]], [['stdcall']]))('WSASetBlockingHook');},
    WSASetLastError: function() {return (Fn(null, [[T.i32]], [['stdcall']]))('WSASetLastError');},
    WSAStartup: function() {return (Fn(T.i32, [[T.WORD], [T.LPWSADATA]], [['stdcall']]))('WSAStartup');},
    WSAUnhookBlockingHook: function() {return (Fn(T.i32, [[null]], [['stdcall']]))('WSAUnhookBlockingHook');},
    accept: function() {return (Fn(T.SOCKET, [[T.SOCKET], [Pointer(Struct('sockaddr', null))], [Pointer(T.i32)]], [['stdcall']]))('accept');},
    bind: function() {return (Fn(T.i32, [[T.SOCKET], [Pointer(Struct('sockaddr', null))], [T.i32]], [['stdcall']]))('bind');},
    closesocket: function() {return (Fn(T.i32, [[T.SOCKET]], [['stdcall']]))('closesocket');},
    connect: function() {return (Fn(T.i32, [[T.SOCKET], [Pointer(Struct('sockaddr', null))], [T.i32]], [['stdcall']]))('connect');},
    gethostbyaddr: function() {return (Fn(Pointer(Struct('hostent', null)), [[Pointer(T.char)], [T.i32], [T.i32]], [['stdcall']]))('gethostbyaddr');},
    gethostbyname: function() {return (Fn(Pointer(Struct('hostent', null)), [[Pointer(T.char)]], [['stdcall']]))('gethostbyname');},
    getpeername: function() {return (Fn(T.i32, [[T.SOCKET], [Pointer(Struct('sockaddr', null))], [Pointer(T.i32)]], [['stdcall']]))('getpeername');},
    getprotobyname: function() {return (Fn(Pointer(Struct('protoent', null)), [[Pointer(T.char)]], [['stdcall']]))('getprotobyname');},
    getprotobynumber: function() {return (Fn(Pointer(Struct('protoent', null)), [[T.i32]], [['stdcall']]))('getprotobynumber');},
    select: function() {return (Fn(T.i32, [[T.i32], [Pointer(T.fd_set)], [Pointer(T.fd_set)], [Pointer(T.fd_set)], [Pointer(Struct('timeval', null))]], [['stdcall']]))('select');},
    getservbyname: function() {return (Fn(Pointer(Struct('servent', null)), [[Pointer(T.char)], [Pointer(T.char)]], [['stdcall']]))('getservbyname');},
    getservbyport: function() {return (Fn(Pointer(Struct('servent', null)), [[T.i32], [Pointer(T.char)]], [['stdcall']]))('getservbyport');},
    getsockname: function() {return (Fn(T.i32, [[T.SOCKET], [Pointer(Struct('sockaddr', null))], [Pointer(T.i32)]], [['stdcall']]))('getsockname');},
    getsockopt: function() {return (Fn(T.i32, [[T.SOCKET], [T.i32], [T.i32], [Pointer(T.char)], [Pointer(T.i32)]], [['stdcall']]))('getsockopt');},
    inet_addr: function() {return (Fn(T.ULONG, [[Pointer(T.char)]], [['stdcall']]))('inet_addr');},
    inet_ntoa: function() {return (Fn(Pointer(T.char), [[Struct('in_addr', null)]], [['stdcall']]))('inet_ntoa');},
    ioctlsocket: function() {return (Fn(T.i32, [[T.SOCKET], [T.LONG], [Pointer(T.ULONG)]], [['stdcall']]))('ioctlsocket');},
    listen: function() {return (Fn(T.i32, [[T.SOCKET], [T.i32]], [['stdcall']]))('listen');},
    recv: function() {return (Fn(T.i32, [[T.SOCKET], [Pointer(T.char)], [T.i32], [T.i32]], [['stdcall']]))('recv');},
    recvfrom: function() {return (Fn(T.i32, [[T.SOCKET], [Pointer(T.char)], [T.i32], [T.i32], [Pointer(Struct('sockaddr', null))], [Pointer(T.i32)]], [['stdcall']]))('recvfrom');},
    send: function() {return (Fn(T.i32, [[T.SOCKET], [Pointer(T.char)], [T.i32], [T.i32]], [['stdcall']]))('send');},
    sendto: function() {return (Fn(T.i32, [[T.SOCKET], [Pointer(T.char)], [T.i32], [T.i32], [Pointer(Struct('sockaddr', null))], [T.i32]], [['stdcall']]))('sendto');},
    setsockopt: function() {return (Fn(T.i32, [[T.SOCKET], [T.i32], [T.i32], [Pointer(T.char)], [T.i32]], [['stdcall']]))('setsockopt');},
    shutdown: function() {return (Fn(T.i32, [[T.SOCKET], [T.i32]], [['stdcall']]))('shutdown');},
    socket: function() {return (Fn(T.SOCKET, [[T.i32], [T.i32], [T.i32]], [['stdcall']]))('socket');},
    WSAAccept: function() {return (Fn(T.SOCKET, [[T.SOCKET], [Pointer(Struct('sockaddr', null))], [T.LPINT], [T.LPCONDITIONPROC], [T.DWORD]], [['stdcall']]))('WSAAccept');},
    WSAAddressToStringA: function() {return (Fn(T.INT, [[T.LPSOCKADDR], [T.DWORD], [T.LPWSAPROTOCOL_INFOA], [T.LPSTR], [T.LPDWORD]], [['stdcall']]))('WSAAddressToStringA');},
    WSAAddressToStringW: function() {return (Fn(T.INT, [[T.LPSOCKADDR], [T.DWORD], [T.LPWSAPROTOCOL_INFOW], [T.LPWSTR], [T.LPDWORD]], [['stdcall']]))('WSAAddressToStringW');},
    WSACloseEvent: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['stdcall']]))('WSACloseEvent');},
    WSAConnect: function() {return (Fn(T.i32, [[T.SOCKET], [Pointer(Struct('sockaddr', null))], [T.i32], [T.LPWSABUF], [T.LPWSABUF], [T.LPQOS], [T.LPQOS]], [['stdcall']]))('WSAConnect');},
    WSACreateEvent: function() {return (Fn(T.HANDLE, [[null]], [['stdcall']]))('WSACreateEvent');},
    WSADuplicateSocketA: function() {return (Fn(T.INT, [[T.SOCKET], [T.DWORD], [T.LPWSAPROTOCOL_INFOA]], [['stdcall']]))('WSADuplicateSocketA');},
    WSADuplicateSocketW: function() {return (Fn(T.INT, [[T.SOCKET], [T.DWORD], [T.LPWSAPROTOCOL_INFOW]], [['stdcall']]))('WSADuplicateSocketW');},
    WSAEnumNameSpaceProvidersA: function() {return (Fn(T.INT, [[T.LPDWORD], [T.LPWSANAMESPACE_INFOA]], [['stdcall']]))('WSAEnumNameSpaceProvidersA');},
    WSAEnumNameSpaceProvidersW: function() {return (Fn(T.INT, [[T.LPDWORD], [T.LPWSANAMESPACE_INFOW]], [['stdcall']]))('WSAEnumNameSpaceProvidersW');},
    WSAEnumNetworkEvents: function() {return (Fn(T.i32, [[T.SOCKET], [T.HANDLE], [T.LPWSANETWORKEVENTS]], [['stdcall']]))('WSAEnumNetworkEvents');},
    WSAEnumProtocolsA: function() {return (Fn(T.i32, [[T.LPINT], [T.LPWSAPROTOCOL_INFOA], [T.LPDWORD]], [['stdcall']]))('WSAEnumProtocolsA');},
    WSAEnumProtocolsW: function() {return (Fn(T.i32, [[T.LPINT], [T.LPWSAPROTOCOL_INFOW], [T.LPDWORD]], [['stdcall']]))('WSAEnumProtocolsW');},
    WSAEventSelect: function() {return (Fn(T.i32, [[T.SOCKET], [T.HANDLE], [T.LONG]], [['stdcall']]))('WSAEventSelect');},
    WSAGetOverlappedResult: function() {return (Fn(T.BOOL, [[T.SOCKET], [T.LPWSAOVERLAPPED], [T.LPDWORD], [T.BOOL], [T.LPDWORD]], [['stdcall']]))('WSAGetOverlappedResult');},
    WSAGetQOSByName: function() {return (Fn(T.BOOL, [[T.SOCKET], [T.LPWSABUF], [T.LPQOS]], [['stdcall']]))('WSAGetQOSByName');},
    WSAGetServiceClassInfoA: function() {return (Fn(T.INT, [[T.LPGUID], [T.LPGUID], [T.LPDWORD], [T.LPWSASERVICECLASSINFOA]], [['stdcall']]))('WSAGetServiceClassInfoA');},
    WSAGetServiceClassInfoW: function() {return (Fn(T.INT, [[T.LPGUID], [T.LPGUID], [T.LPDWORD], [T.LPWSASERVICECLASSINFOW]], [['stdcall']]))('WSAGetServiceClassInfoW');},
    WSAGetServiceClassNameByClassIdA: function() {return (Fn(T.INT, [[T.LPGUID], [T.LPSTR], [T.LPDWORD]], [['stdcall']]))('WSAGetServiceClassNameByClassIdA');},
    WSAGetServiceClassNameByClassIdW: function() {return (Fn(T.INT, [[T.LPGUID], [T.LPWSTR], [T.LPDWORD]], [['stdcall']]))('WSAGetServiceClassNameByClassIdW');},
    WSAHtonl: function() {return (Fn(T.i32, [[T.SOCKET], [T.ULONG], [Pointer(T.ULONG)]], [['stdcall']]))('WSAHtonl');},
    WSAHtons: function() {return (Fn(T.i32, [[T.SOCKET], [T.u_short], [Pointer(T.u_short)]], [['stdcall']]))('WSAHtons');},
    WSAInstallServiceClassA: function() {return (Fn(T.i32, [[T.LPWSASERVICECLASSINFOA]], [['stdcall']]))('WSAInstallServiceClassA');},
    WSAInstallServiceClassW: function() {return (Fn(T.i32, [[T.LPWSASERVICECLASSINFOW]], [['stdcall']]))('WSAInstallServiceClassW');},
    WSAIoctl: function() {return (Fn(T.i32, [[T.SOCKET], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.LPWSAOVERLAPPED], [T.LPWSAOVERLAPPED_COMPLETION_ROUTINE]], [['stdcall']]))('WSAIoctl');},
    WSAJoinLeaf: function() {return (Fn(T.SOCKET, [[T.SOCKET], [Pointer(Struct('sockaddr', null))], [T.i32], [T.LPWSABUF], [T.LPWSABUF], [T.LPQOS], [T.LPQOS], [T.DWORD]], [['stdcall']]))('WSAJoinLeaf');},
    WSALookupServiceBeginA: function() {return (Fn(T.INT, [[T.LPWSAQUERYSETA], [T.DWORD], [T.LPHANDLE]], [['stdcall']]))('WSALookupServiceBeginA');},
    WSALookupServiceBeginW: function() {return (Fn(T.INT, [[T.LPWSAQUERYSETW], [T.DWORD], [T.LPHANDLE]], [['stdcall']]))('WSALookupServiceBeginW');},
    WSALookupServiceEnd: function() {return (Fn(T.INT, [[T.HANDLE]], [['stdcall']]))('WSALookupServiceEnd');},
    WSALookupServiceNextA: function() {return (Fn(T.INT, [[T.HANDLE], [T.DWORD], [T.LPDWORD], [T.LPWSAQUERYSETA]], [['stdcall']]))('WSALookupServiceNextA');},
    WSALookupServiceNextW: function() {return (Fn(T.INT, [[T.HANDLE], [T.DWORD], [T.LPDWORD], [T.LPWSAQUERYSETW]], [['stdcall']]))('WSALookupServiceNextW');},
    WSANSPIoctl: function() {return (Fn(T.i32, [[T.HANDLE], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.LPWSACOMPLETION]], [['stdcall']]))('WSANSPIoctl');},
    WSANtohl: function() {return (Fn(T.i32, [[T.SOCKET], [T.ULONG], [Pointer(T.ULONG)]], [['stdcall']]))('WSANtohl');},
    WSANtohs: function() {return (Fn(T.i32, [[T.SOCKET], [T.u_short], [Pointer(T.u_short)]], [['stdcall']]))('WSANtohs');},
    WSAProviderConfigChange: function() {return (Fn(T.INT, [[T.LPHANDLE], [T.LPWSAOVERLAPPED], [T.LPWSAOVERLAPPED_COMPLETION_ROUTINE]], [['stdcall']]))('WSAProviderConfigChange');},
    WSARecv: function() {return (Fn(T.i32, [[T.SOCKET], [T.LPWSABUF], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [T.LPWSAOVERLAPPED], [T.LPWSAOVERLAPPED_COMPLETION_ROUTINE]], [['stdcall']]))('WSARecv');},
    WSARecvDisconnect: function() {return (Fn(T.i32, [[T.SOCKET], [T.LPWSABUF]], [['stdcall']]))('WSARecvDisconnect');},
    WSARecvFrom: function() {return (Fn(T.i32, [[T.SOCKET], [T.LPWSABUF], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [Pointer(Struct('sockaddr', null))], [T.LPINT], [T.LPWSAOVERLAPPED], [T.LPWSAOVERLAPPED_COMPLETION_ROUTINE]], [['stdcall']]))('WSARecvFrom');},
    WSARemoveServiceClass: function() {return (Fn(T.INT, [[T.LPGUID]], [['stdcall']]))('WSARemoveServiceClass');},
    WSAResetEvent: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['stdcall']]))('WSAResetEvent');},
    WSASend: function() {return (Fn(T.i32, [[T.SOCKET], [T.LPWSABUF], [T.DWORD], [T.LPDWORD], [T.DWORD], [T.LPWSAOVERLAPPED], [T.LPWSAOVERLAPPED_COMPLETION_ROUTINE]], [['stdcall']]))('WSASend');},
    WSASendDisconnect: function() {return (Fn(T.i32, [[T.SOCKET], [T.LPWSABUF]], [['stdcall']]))('WSASendDisconnect');},
    WSASendTo: function() {return (Fn(T.i32, [[T.SOCKET], [T.LPWSABUF], [T.DWORD], [T.LPDWORD], [T.DWORD], [Pointer(Struct('sockaddr', null))], [T.i32], [T.LPWSAOVERLAPPED], [T.LPWSAOVERLAPPED_COMPLETION_ROUTINE]], [['stdcall']]))('WSASendTo');},
    WSASetEvent: function() {return (Fn(T.BOOL, [[T.HANDLE]], [['stdcall']]))('WSASetEvent');},
    WSASetServiceA: function() {return (Fn(T.INT, [[T.LPWSAQUERYSETA], [T.WSAESETSERVICEOP], [T.DWORD]], [['stdcall']]))('WSASetServiceA');},
    WSASetServiceW: function() {return (Fn(T.INT, [[T.LPWSAQUERYSETW], [T.WSAESETSERVICEOP], [T.DWORD]], [['stdcall']]))('WSASetServiceW');},
    WSASocketA: function() {return (Fn(T.SOCKET, [[T.i32], [T.i32], [T.i32], [T.LPWSAPROTOCOL_INFOA], [T.GROUP], [T.DWORD]], [['stdcall']]))('WSASocketA');},
    WSASocketW: function() {return (Fn(T.SOCKET, [[T.i32], [T.i32], [T.i32], [T.LPWSAPROTOCOL_INFOW], [T.GROUP], [T.DWORD]], [['stdcall']]))('WSASocketW');},
    WSAStringToAddressA: function() {return (Fn(T.INT, [[T.LPSTR], [T.INT], [T.LPWSAPROTOCOL_INFOA], [T.LPSOCKADDR], [T.LPINT]], [['stdcall']]))('WSAStringToAddressA');},
    WSAStringToAddressW: function() {return (Fn(T.INT, [[T.LPWSTR], [T.INT], [T.LPWSAPROTOCOL_INFOW], [T.LPSOCKADDR], [T.LPINT]], [['stdcall']]))('WSAStringToAddressW');},
    WSAWaitForMultipleEvents: function() {return (Fn(T.DWORD, [[T.DWORD], [Pointer(T.HANDLE)], [T.BOOL], [T.DWORD], [T.BOOL]], [['stdcall']]))('WSAWaitForMultipleEvents');},
    CryptAcquireContextA: function() {return (Fn(T.BOOL, [[Pointer(T.HCRYPTPROV)], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptAcquireContextA');},
    CryptAcquireContextW: function() {return (Fn(T.BOOL, [[Pointer(T.HCRYPTPROV)], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptAcquireContextW');},
    CryptGenRandom: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV], [T.DWORD], [Pointer(T.BYTE)]], [['dllimport'], ['stdcall']]))('CryptGenRandom');},
    CryptContextAddRef: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV], [Pointer(T.DWORD)], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptContextAddRef');},
    CryptCreateHash: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV], [T.ALG_ID], [T.HCRYPTKEY], [T.DWORD], [Pointer(T.HCRYPTHASH)]], [['dllimport'], ['stdcall']]))('CryptCreateHash');},
    CryptDecrypt: function() {return (Fn(T.BOOL, [[T.HCRYPTKEY], [T.HCRYPTHASH], [T.BOOL], [T.DWORD], [Pointer(T.BYTE)], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('CryptDecrypt');},
    CryptDeriveKey: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV], [T.ALG_ID], [T.HCRYPTHASH], [T.DWORD], [Pointer(T.HCRYPTKEY)]], [['dllimport'], ['stdcall']]))('CryptDeriveKey');},
    CryptDestroyHash: function() {return (Fn(T.BOOL, [[T.HCRYPTHASH]], [['dllimport'], ['stdcall']]))('CryptDestroyHash');},
    CryptDestroyKey: function() {return (Fn(T.BOOL, [[T.HCRYPTKEY]], [['dllimport'], ['stdcall']]))('CryptDestroyKey');},
    CryptDuplicateKey: function() {return (Fn(T.BOOL, [[T.HCRYPTKEY], [Pointer(T.DWORD)], [T.DWORD], [Pointer(T.HCRYPTKEY)]], [['dllimport'], ['stdcall']]))('CryptDuplicateKey');},
    CryptDuplicateHash: function() {return (Fn(T.BOOL, [[T.HCRYPTHASH], [Pointer(T.DWORD)], [T.DWORD], [Pointer(T.HCRYPTHASH)]], [['dllimport'], ['stdcall']]))('CryptDuplicateHash');},
    CryptEncrypt: function() {return (Fn(T.BOOL, [[T.HCRYPTKEY], [T.HCRYPTHASH], [T.BOOL], [T.DWORD], [Pointer(T.BYTE)], [Pointer(T.DWORD)], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptEncrypt');},
    CryptEnumProvidersA: function() {return (Fn(T.BOOL, [[T.DWORD], [Pointer(T.DWORD)], [T.DWORD], [Pointer(T.DWORD)], [T.LPSTR], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('CryptEnumProvidersA');},
    CryptEnumProvidersW: function() {return (Fn(T.BOOL, [[T.DWORD], [Pointer(T.DWORD)], [T.DWORD], [Pointer(T.DWORD)], [T.LPWSTR], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('CryptEnumProvidersW');},
    CryptEnumProviderTypesA: function() {return (Fn(T.BOOL, [[T.DWORD], [Pointer(T.DWORD)], [T.DWORD], [Pointer(T.DWORD)], [T.LPSTR], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('CryptEnumProviderTypesA');},
    CryptEnumProviderTypesW: function() {return (Fn(T.BOOL, [[T.DWORD], [Pointer(T.DWORD)], [T.DWORD], [Pointer(T.DWORD)], [T.LPWSTR], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('CryptEnumProviderTypesW');},
    CryptExportKey: function() {return (Fn(T.BOOL, [[T.HCRYPTKEY], [T.HCRYPTKEY], [T.DWORD], [T.DWORD], [Pointer(T.BYTE)], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('CryptExportKey');},
    CryptGenKey: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV], [T.ALG_ID], [T.DWORD], [Pointer(T.HCRYPTKEY)]], [['dllimport'], ['stdcall']]))('CryptGenKey');},
    CryptGetKeyParam: function() {return (Fn(T.BOOL, [[T.HCRYPTKEY], [T.DWORD], [Pointer(T.BYTE)], [Pointer(T.DWORD)], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptGetKeyParam');},
    CryptGetHashParam: function() {return (Fn(T.BOOL, [[T.HCRYPTHASH], [T.DWORD], [Pointer(T.BYTE)], [Pointer(T.DWORD)], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptGetHashParam');},
    CryptGetProvParam: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV], [T.DWORD], [Pointer(T.BYTE)], [Pointer(T.DWORD)], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptGetProvParam');},
    CryptGetDefaultProviderA: function() {return (Fn(T.BOOL, [[T.DWORD], [Pointer(T.DWORD)], [T.DWORD], [T.LPSTR], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('CryptGetDefaultProviderA');},
    CryptGetDefaultProviderW: function() {return (Fn(T.BOOL, [[T.DWORD], [Pointer(T.DWORD)], [T.DWORD], [T.LPWSTR], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('CryptGetDefaultProviderW');},
    CryptGetUserKey: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV], [T.DWORD], [Pointer(T.HCRYPTKEY)]], [['dllimport'], ['stdcall']]))('CryptGetUserKey');},
    CryptHashData: function() {return (Fn(T.BOOL, [[T.HCRYPTHASH], [Pointer(T.BYTE)], [T.DWORD], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptHashData');},
    CryptHashSessionKey: function() {return (Fn(T.BOOL, [[T.HCRYPTHASH], [T.HCRYPTKEY], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptHashSessionKey');},
    CryptImportKey: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV], [Pointer(T.BYTE)], [T.DWORD], [T.HCRYPTKEY], [T.DWORD], [Pointer(T.HCRYPTKEY)]], [['dllimport'], ['stdcall']]))('CryptImportKey');},
    CryptReleaseContext: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV], [T.ULONG_PTR]], [['dllimport'], ['stdcall']]))('CryptReleaseContext');},
    CryptSetHashParam: function() {return (Fn(T.BOOL, [[T.HCRYPTHASH], [T.DWORD], [Pointer(T.BYTE)], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptSetHashParam');},
    CryptSetKeyParam: function() {return (Fn(T.BOOL, [[T.HCRYPTKEY], [T.DWORD], [Pointer(T.BYTE)], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptSetKeyParam');},
    CryptSetProviderA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptSetProviderA');},
    CryptSetProviderW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptSetProviderW');},
    CryptSetProviderExA: function() {return (Fn(T.BOOL, [[T.LPCSTR], [T.DWORD], [Pointer(T.DWORD)], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptSetProviderExA');},
    CryptSetProviderExW: function() {return (Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD], [Pointer(T.DWORD)], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptSetProviderExW');},
    CryptSetProvParam: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV], [T.DWORD], [Pointer(T.BYTE)], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptSetProvParam');},
    CryptSignHashA: function() {return (Fn(T.BOOL, [[T.HCRYPTHASH], [T.DWORD], [T.LPCSTR], [T.DWORD], [Pointer(T.BYTE)], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('CryptSignHashA');},
    CryptSignHashW: function() {return (Fn(T.BOOL, [[T.HCRYPTHASH], [T.DWORD], [T.LPCWSTR], [T.DWORD], [Pointer(T.BYTE)], [Pointer(T.DWORD)]], [['dllimport'], ['stdcall']]))('CryptSignHashW');},
    CryptVerifySignatureA: function() {return (Fn(T.BOOL, [[T.HCRYPTHASH], [Pointer(T.BYTE)], [T.DWORD], [T.HCRYPTKEY], [T.LPCSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptVerifySignatureA');},
    CryptVerifySignatureW: function() {return (Fn(T.BOOL, [[T.HCRYPTHASH], [Pointer(T.BYTE)], [T.DWORD], [T.HCRYPTKEY], [T.LPCWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('CryptVerifySignatureW');},
    CryptMemAlloc: function() {return (Fn(T.LPVOID, [[T.ULONG, 'cbSize']], [['stdcall'], ['alloc_size', {"__rule":"constant","_0":"1"}]]))('CryptMemAlloc');},
    CryptMemRealloc: function() {return (Fn(T.LPVOID, [[T.LPVOID, 'pv'], [T.ULONG, 'cbSize']], [['stdcall'], ['alloc_size', {"__rule":"constant","_0":"2"}]]))('CryptMemRealloc');},
    CryptMemFree: function() {return (Fn(null, [[T.LPVOID, 'pv']], [['stdcall']]))('CryptMemFree');},
    CryptBinaryToStringA: function() {return (Fn(T.BOOL, [[Pointer(T.BYTE), 'pbBinary'], [T.DWORD, 'cbBinary'], [T.DWORD, 'dwFlags'], [T.LPSTR, 'pszString'], [Pointer(T.DWORD), 'pcchString']], [['stdcall']]))('CryptBinaryToStringA');},
    CryptBinaryToStringW: function() {return (Fn(T.BOOL, [[Pointer(T.BYTE), 'pbBinary'], [T.DWORD, 'cbBinary'], [T.DWORD, 'dwFlags'], [T.LPWSTR, 'pszString'], [Pointer(T.DWORD), 'pcchString']], [['stdcall']]))('CryptBinaryToStringW');},
    CryptStringToBinaryA: function() {return (Fn(T.BOOL, [[T.LPCSTR, 'pszString'], [T.DWORD, 'cchString'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbBinary'], [Pointer(T.DWORD), 'pcbBinary'], [Pointer(T.DWORD), 'pdwSkip'], [Pointer(T.DWORD), 'pdwFlags']], [['stdcall']]))('CryptStringToBinaryA');},
    CryptStringToBinaryW: function() {return (Fn(T.BOOL, [[T.LPCWSTR, 'pszString'], [T.DWORD, 'cchString'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbBinary'], [Pointer(T.DWORD), 'pcbBinary'], [Pointer(T.DWORD), 'pdwSkip'], [Pointer(T.DWORD), 'pdwFlags']], [['stdcall']]))('CryptStringToBinaryW');},
    CryptCreateAsyncHandle: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwFlags'], [T.PHCRYPTASYNC, 'phAsync']], [['stdcall']]))('CryptCreateAsyncHandle');},
    CryptSetAsyncParam: function() {return (Fn(T.BOOL, [[T.HCRYPTASYNC, 'hAsync'], [T.LPSTR, 'pszParamOid'], [T.LPVOID, 'pvParam'], [T.PFN_CRYPT_ASYNC_PARAM_FREE_FUNC, 'pfnFree']], [['stdcall']]))('CryptSetAsyncParam');},
    CryptGetAsyncParam: function() {return (Fn(T.BOOL, [[T.HCRYPTASYNC, 'hAsync'], [T.LPSTR, 'pszParamOid'], [Pointer(T.LPVOID), 'ppvParam'], [Pointer(T.PFN_CRYPT_ASYNC_PARAM_FREE_FUNC), 'ppfnFree']], [['stdcall']]))('CryptGetAsyncParam');},
    CryptCloseAsyncHandle: function() {return (Fn(T.BOOL, [[T.HCRYPTASYNC, 'hAsync']], [['stdcall']]))('CryptCloseAsyncHandle');},
    CryptRegisterDefaultOIDFunction: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPCSTR], [T.DWORD], [T.LPCWSTR]], [['stdcall']]))('CryptRegisterDefaultOIDFunction');},
    CryptRegisterOIDFunction: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPCSTR], [T.LPCSTR], [T.LPCWSTR], [T.LPCSTR]], [['stdcall']]))('CryptRegisterOIDFunction');},
    CryptGetOIDFunctionValue: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwEncodingType'], [T.LPCSTR, 'pszFuncName'], [T.LPCSTR, 'pszOID'], [T.LPCWSTR, 'szValueName'], [Pointer(T.DWORD), 'pdwValueType'], [Pointer(T.BYTE), 'pbValueData'], [Pointer(T.DWORD), 'pcbValueData']], [['stdcall']]))('CryptGetOIDFunctionValue');},
    CryptSetOIDFunctionValue: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwEncodingType'], [T.LPCSTR, 'pszFuncName'], [T.LPCSTR, 'pszOID'], [T.LPCWSTR, 'pwszValueName'], [T.DWORD, 'dwValueType'], [Pointer(T.BYTE), 'pbValueData'], [T.DWORD, 'cbValueData']], [['stdcall']]))('CryptSetOIDFunctionValue');},
    CryptUnregisterDefaultOIDFunction: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPCSTR], [T.LPCWSTR]], [['stdcall']]))('CryptUnregisterDefaultOIDFunction');},
    CryptUnregisterOIDFunction: function() {return (Fn(T.BOOL, [[T.DWORD], [T.LPCSTR], [T.LPCSTR]], [['stdcall']]))('CryptUnregisterOIDFunction');},
    CryptEnumOIDFunction: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwEncodingType'], [T.LPCSTR, 'pszFuncName'], [T.LPCSTR, 'pszOID'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvArg'], [T.PFN_CRYPT_ENUM_OID_FUNC, 'pfnEnumOIDFunc']], [['stdcall']]))('CryptEnumOIDFunction');},
    CryptInitOIDFunctionSet: function() {return (Fn(T.HCRYPTOIDFUNCSET, [[T.LPCSTR], [T.DWORD]], [['stdcall']]))('CryptInitOIDFunctionSet');},
    CryptGetDefaultOIDDllList: function() {return (Fn(T.BOOL, [[T.HCRYPTOIDFUNCSET, 'hFuncSet'], [T.DWORD, 'dwEncodingType'], [T.LPWSTR, 'pwszDllList'], [Pointer(T.DWORD), 'pcchDllList']], [['stdcall']]))('CryptGetDefaultOIDDllList');},
    CryptGetDefaultOIDFunctionAddress: function() {return (Fn(T.BOOL, [[T.HCRYPTOIDFUNCSET, 'hFuncSet'], [T.DWORD, 'dwEncodingType'], [T.LPCWSTR, 'pwszDll'], [T.DWORD, 'dwFlags'], [Pointer(Pointer(null)), 'ppvFuncAddr'], [Pointer(T.HCRYPTOIDFUNCADDR), 'phFuncAddr']], [['stdcall']]))('CryptGetDefaultOIDFunctionAddress');},
    CryptGetOIDFunctionAddress: function() {return (Fn(T.BOOL, [[T.HCRYPTOIDFUNCSET, 'hFuncSet'], [T.DWORD, 'dwEncodingType'], [T.LPCSTR, 'pszOID'], [T.DWORD, 'dwFlags'], [Pointer(Pointer(null)), 'ppvFuncAddr'], [Pointer(T.HCRYPTOIDFUNCADDR), 'phFuncAddr']], [['stdcall']]))('CryptGetOIDFunctionAddress');},
    CryptFreeOIDFunctionAddress: function() {return (Fn(T.BOOL, [[T.HCRYPTOIDFUNCADDR, 'hFuncAddr'], [T.DWORD, 'dwFlags']], [['stdcall']]))('CryptFreeOIDFunctionAddress');},
    CryptInstallOIDFunctionAddress: function() {return (Fn(T.BOOL, [[T.HMODULE, 'hModule'], [T.DWORD, 'dwEncodingType'], [T.LPCSTR, 'pszFuncName'], [T.DWORD, 'cFuncEntry'], [Pointer(T.CRYPT_OID_FUNC_ENTRY), 'rgFuncEntry'], [T.DWORD, 'dwFlags']], [['stdcall']]))('CryptInstallOIDFunctionAddress');},
    CryptInstallDefaultContext: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV, 'hCryptProv'], [T.DWORD, 'dwDefaultType'], [Pointer(null), 'pvDefaultPara'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved'], [Pointer(T.HCRYPTDEFAULTCONTEXT), 'phDefaultContext']], [['stdcall']]))('CryptInstallDefaultContext');},
    CryptUninstallDefaultContext: function() {return (Fn(T.BOOL, [[T.HCRYPTDEFAULTCONTEXT, 'hDefaultContext'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']], [['stdcall']]))('CryptUninstallDefaultContext');},
    CryptEnumOIDInfo: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwGroupId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvArg'], [T.PFN_CRYPT_ENUM_OID_INFO, 'pfnEnumOIDInfo']], [['stdcall']]))('CryptEnumOIDInfo');},
    CryptFindOIDInfo: function() {return (Fn(T.PCCRYPT_OID_INFO, [[T.DWORD, 'dwKeyType'], [Pointer(null), 'pvKey'], [T.DWORD, 'dwGroupId']], [['stdcall']]))('CryptFindOIDInfo');},
    CryptRegisterOIDInfo: function() {return (Fn(T.BOOL, [[T.PCCRYPT_OID_INFO, 'pInfo'], [T.DWORD, 'dwFlags']], [['stdcall']]))('CryptRegisterOIDInfo');},
    CryptUnregisterOIDInfo: function() {return (Fn(T.BOOL, [[T.PCCRYPT_OID_INFO, 'pInfo']], [['stdcall']]))('CryptUnregisterOIDInfo');},
    CryptFindLocalizedName: function() {return (Fn(T.LPCWSTR, [[T.LPCWSTR, 'pwszCryptName']], [['stdcall']]))('CryptFindLocalizedName');},
    CertAlgIdToOID: function() {return (Fn(T.LPCSTR, [[T.DWORD, 'dwAlgId']], [['stdcall']]))('CertAlgIdToOID');},
    CertOIDToAlgId: function() {return (Fn(T.DWORD, [[T.LPCSTR, 'pszObjId']], [['stdcall']]))('CertOIDToAlgId');},
    CertOpenStore: function() {return (Fn(T.HCERTSTORE, [[T.LPCSTR, 'lpszStoreProvider'], [T.DWORD, 'dwEncodingType'], [T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvPara']], [['stdcall']]))('CertOpenStore');},
    CertOpenSystemStoreA: function() {return (Fn(T.HCERTSTORE, [[T.HCRYPTPROV_LEGACY, 'hProv'], [T.LPCSTR, 'szSubSystemProtocol']], [['stdcall']]))('CertOpenSystemStoreA');},
    CertOpenSystemStoreW: function() {return (Fn(T.HCERTSTORE, [[T.HCRYPTPROV_LEGACY, 'hProv'], [T.LPCWSTR, 'szSubSystemProtocol']], [['stdcall']]))('CertOpenSystemStoreW');},
    CertEnumCertificatesInStore: function() {return (Fn(T.PCCERT_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.PCCERT_CONTEXT, 'pPrev']], [['stdcall']]))('CertEnumCertificatesInStore');},
    CertEnumCRLsInStore: function() {return (Fn(T.PCCRL_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.PCCRL_CONTEXT, 'pPrev']], [['stdcall']]))('CertEnumCRLsInStore');},
    CertEnumCTLsInStore: function() {return (Fn(T.PCCTL_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.PCCTL_CONTEXT, 'pPrev']], [['stdcall']]))('CertEnumCTLsInStore');},
    CertEnumSystemStoreLocation: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwFlags'], [Pointer(null), 'pvArg'], [T.PFN_CERT_ENUM_SYSTEM_STORE_LOCATION, 'pfnEnum']], [['stdcall']]))('CertEnumSystemStoreLocation');},
    CertEnumSystemStore: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwFlags'], [Pointer(null), 'pvSystemStoreLocationPara'], [Pointer(null), 'pvArg'], [T.PFN_CERT_ENUM_SYSTEM_STORE, 'pfnEnum']], [['stdcall']]))('CertEnumSystemStore');},
    CertEnumPhysicalStore: function() {return (Fn(T.BOOL, [[Pointer(null), 'pvSystemStore'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvArg'], [T.PFN_CERT_ENUM_PHYSICAL_STORE, 'pfnEnum']], [['stdcall']]))('CertEnumPhysicalStore');},
    CertRegisterPhysicalStore: function() {return (Fn(T.BOOL, [[Pointer(null), 'pvSystemStore'], [T.DWORD, 'dwFlags'], [T.LPCWSTR, 'pwszStoreName'], [T.PCERT_PHYSICAL_STORE_INFO, 'pStoreInfo'], [Pointer(null), 'pvReserved']], [['stdcall']]))('CertRegisterPhysicalStore');},
    CertSaveStore: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwMsgAndCertEncodingType'], [T.DWORD, 'dwSaveAs'], [T.DWORD, 'dwSaveTo'], [Pointer(null), 'pvSaveToPara'], [T.DWORD, 'dwFlags']], [['stdcall']]))('CertSaveStore');},
    CertAddStoreToCollection: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hCollectionStore'], [T.HCERTSTORE, 'hSiblingStore'], [T.DWORD, 'dwUpdateFlags'], [T.DWORD, 'dwPriority']], [['stdcall']]))('CertAddStoreToCollection');},
    CertRemoveStoreFromCollection: function() {return (Fn(null, [[T.HCERTSTORE, 'hCollectionStore'], [T.HCERTSTORE, 'hSiblingStore']], [['stdcall']]))('CertRemoveStoreFromCollection');},
    CertCreateCertificateChainEngine: function() {return (Fn(T.BOOL, [[T.PCERT_CHAIN_ENGINE_CONFIG, 'pConfig'], [Pointer(T.HCERTCHAINENGINE), 'phChainEngine']], [['stdcall']]))('CertCreateCertificateChainEngine');},
    CertResyncCertificateChainEngine: function() {return (Fn(T.BOOL, [[T.HCERTCHAINENGINE, 'hChainEngine']], [['stdcall']]))('CertResyncCertificateChainEngine');},
    CertFreeCertificateChainEngine: function() {return (Fn(null, [[T.HCERTCHAINENGINE, 'hChainEngine']], [['stdcall']]))('CertFreeCertificateChainEngine');},
    CertGetCertificateChain: function() {return (Fn(T.BOOL, [[T.HCERTCHAINENGINE, 'hChainEngine'], [T.PCCERT_CONTEXT, 'pCertContext'], [T.LPFILETIME, 'pTime'], [T.HCERTSTORE, 'hAdditionalStore'], [T.PCERT_CHAIN_PARA, 'pChainPara'], [T.DWORD, 'dwFlags'], [T.LPVOID, 'pvReserved'], [Pointer(T.PCCERT_CHAIN_CONTEXT), 'ppChainContext']], [['stdcall']]))('CertGetCertificateChain');},
    CertDuplicateCertificateChain: function() {return (Fn(T.PCCERT_CHAIN_CONTEXT, [[T.PCCERT_CHAIN_CONTEXT, 'pChainContext']], [['stdcall']]))('CertDuplicateCertificateChain');},
    CertFreeCertificateChain: function() {return (Fn(null, [[T.PCCERT_CHAIN_CONTEXT, 'pChainContext']], [['stdcall']]))('CertFreeCertificateChain');},
    CertFindChainInStore: function() {return (Fn(T.PCCERT_CHAIN_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwCertEncodingType'], [T.DWORD, 'dwFindFlags'], [T.DWORD, 'dwFindType'], [Pointer(null), 'pvFindPara'], [T.PCCERT_CHAIN_CONTEXT, 'pPrevChainContext']], [['stdcall']]))('CertFindChainInStore');},
    CertVerifyCertificateChainPolicy: function() {return (Fn(T.BOOL, [[T.LPCSTR, 'szPolicyOID'], [T.PCCERT_CHAIN_CONTEXT, 'pChainContext'], [T.PCERT_CHAIN_POLICY_PARA, 'pPolicyPara'], [T.PCERT_CHAIN_POLICY_STATUS, 'pPolicyStatus']], [['stdcall']]))('CertVerifyCertificateChainPolicy');},
    CertEnumCertificateContextProperties: function() {return (Fn(T.DWORD, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwPropId']], [['stdcall']]))('CertEnumCertificateContextProperties');},
    CertGetCertificateContextProperty: function() {return (Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwPropId'], [Pointer(null), 'pvData'], [Pointer(T.DWORD), 'pcbData']], [['stdcall']]))('CertGetCertificateContextProperty');},
    CertSetCertificateContextProperty: function() {return (Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData']], [['stdcall']]))('CertSetCertificateContextProperty');},
    CertEnumCRLContextProperties: function() {return (Fn(T.DWORD, [[T.PCCRL_CONTEXT, 'pCRLContext'], [T.DWORD, 'dwPropId']], [['stdcall']]))('CertEnumCRLContextProperties');},
    CertGetCRLContextProperty: function() {return (Fn(T.BOOL, [[T.PCCRL_CONTEXT, 'pCRLContext'], [T.DWORD, 'dwPropId'], [Pointer(null), 'pvData'], [Pointer(T.DWORD), 'pcbData']], [['stdcall']]))('CertGetCRLContextProperty');},
    CertSetCRLContextProperty: function() {return (Fn(T.BOOL, [[T.PCCRL_CONTEXT, 'pCRLContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData']], [['stdcall']]))('CertSetCRLContextProperty');},
    CertEnumCTLContextProperties: function() {return (Fn(T.DWORD, [[T.PCCTL_CONTEXT, 'pCTLContext'], [T.DWORD, 'dwPropId']], [['stdcall']]))('CertEnumCTLContextProperties');},
    CertEnumSubjectInSortedCTL: function() {return (Fn(T.BOOL, [[T.PCCTL_CONTEXT, 'pCTLContext'], [Pointer(Pointer(null)), 'ppvNextSubject'], [T.PCRYPT_DER_BLOB, 'pSubjectIdentifier'], [T.PCRYPT_DER_BLOB, 'pEncodedAttributes']], [['stdcall']]))('CertEnumSubjectInSortedCTL');},
    CertGetCTLContextProperty: function() {return (Fn(T.BOOL, [[T.PCCTL_CONTEXT, 'pCTLContext'], [T.DWORD, 'dwPropId'], [Pointer(null), 'pvData'], [Pointer(T.DWORD), 'pcbData']], [['stdcall']]))('CertGetCTLContextProperty');},
    CertSetCTLContextProperty: function() {return (Fn(T.BOOL, [[T.PCCTL_CONTEXT, 'pCTLContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData']], [['stdcall']]))('CertSetCTLContextProperty');},
    CertGetStoreProperty: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwPropId'], [Pointer(null), 'pvData'], [Pointer(T.DWORD), 'pcbData']], [['stdcall']]))('CertGetStoreProperty');},
    CertSetStoreProperty: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData']], [['stdcall']]))('CertSetStoreProperty');},
    CertControlStore: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwCtrlType'], [Pointer(null), 'pvCtrlPara']], [['stdcall']]))('CertControlStore');},
    CertDuplicateStore: function() {return (Fn(T.HCERTSTORE, [[T.HCERTSTORE, 'hCertStore']], [['stdcall']]))('CertDuplicateStore');},
    CertCloseStore: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwFlags']], [['stdcall']]))('CertCloseStore');},
    CertFreeCertificateContext: function() {return (Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext']], [['stdcall']]))('CertFreeCertificateContext');},
    CertFreeCRLContext: function() {return (Fn(T.BOOL, [[T.PCCRL_CONTEXT, 'pCrlContext']], [['stdcall']]))('CertFreeCRLContext');},
    CertFreeCTLContext: function() {return (Fn(T.BOOL, [[T.PCCTL_CONTEXT, 'pCtlContext']], [['stdcall']]))('CertFreeCTLContext');},
    CertAddCertificateContextToStore: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCERT_CONTEXT), 'ppStoreContext']], [['stdcall']]))('CertAddCertificateContextToStore');},
    CertAddCRLContextToStore: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.PCCRL_CONTEXT, 'pCrlContext'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCRL_CONTEXT), 'ppStoreContext']], [['stdcall']]))('CertAddCRLContextToStore');},
    CertAddCTLContextToStore: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.PCCTL_CONTEXT, 'pCtlContext'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCTL_CONTEXT), 'ppStoreContext']], [['stdcall']]))('CertAddCTLContextToStore');},
    CertAddCertificateLinkToStore: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCERT_CONTEXT), 'ppStoreContext']], [['stdcall']]))('CertAddCertificateLinkToStore');},
    CertAddCRLLinkToStore: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.PCCRL_CONTEXT, 'pCrlContext'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCRL_CONTEXT), 'ppStoreContext']], [['stdcall']]))('CertAddCRLLinkToStore');},
    CertAddCTLLinkToStore: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.PCCTL_CONTEXT, 'pCtlContext'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCTL_CONTEXT), 'ppStoreContext']], [['stdcall']]))('CertAddCTLLinkToStore');},
    CertAddEncodedCertificateToStore: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwCertEncodingType'], [Pointer(T.BYTE), 'pbCertEncoded'], [T.DWORD, 'cbCertEncoded'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCERT_CONTEXT), 'ppCertContext']], [['stdcall']]))('CertAddEncodedCertificateToStore');},
    CertAddEncodedCertificateToSystemStoreA: function() {return (Fn(T.BOOL, [[T.LPCSTR, 'pszCertStoreName'], [Pointer(T.BYTE), 'pbCertEncoded'], [T.DWORD, 'cbCertEncoded']], [['stdcall']]))('CertAddEncodedCertificateToSystemStoreA');},
    CertAddEncodedCertificateToSystemStoreW: function() {return (Fn(T.BOOL, [[T.LPCWSTR, 'pszCertStoreName'], [Pointer(T.BYTE), 'pbCertEncoded'], [T.DWORD, 'cbCertEncoded']], [['stdcall']]))('CertAddEncodedCertificateToSystemStoreW');},
    CertAddEncodedCRLToStore: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwCertEncodingType'], [Pointer(T.BYTE), 'pbCrlEncoded'], [T.DWORD, 'cbCrlEncoded'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCRL_CONTEXT), 'ppCrlContext']], [['stdcall']]))('CertAddEncodedCRLToStore');},
    CertAddEncodedCTLToStore: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwMsgAndCertEncodingType'], [Pointer(T.BYTE), 'pbCtlEncoded'], [T.DWORD, 'cbCtlEncoded'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCTL_CONTEXT), 'ppCtlContext']], [['stdcall']]))('CertAddEncodedCTLToStore');},
    CertAddSerializedElementToStore: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [Pointer(T.BYTE), 'pbElement'], [T.DWORD, 'cbElement'], [T.DWORD, 'dwAddDisposition'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwContextTypeFlags'], [Pointer(T.DWORD), 'pdwContentType'], [Pointer(Pointer(null)), 'ppvContext']], [['stdcall']]))('CertAddSerializedElementToStore');},
    CertCompareCertificate: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.PCERT_INFO, 'pCertId1'], [T.PCERT_INFO, 'pCertId2']], [['stdcall']]))('CertCompareCertificate');},
    CertCompareCertificateName: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.PCERT_NAME_BLOB, 'pCertName1'], [T.PCERT_NAME_BLOB, 'pCertName2']], [['stdcall']]))('CertCompareCertificateName');},
    CertCompareIntegerBlob: function() {return (Fn(T.BOOL, [[T.PCRYPT_INTEGER_BLOB, 'pInt1'], [T.PCRYPT_INTEGER_BLOB, 'pInt2']], [['stdcall']]))('CertCompareIntegerBlob');},
    CertComparePublicKeyInfo: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.PCERT_PUBLIC_KEY_INFO, 'pPublicKey1'], [T.PCERT_PUBLIC_KEY_INFO, 'pPublicKey2']], [['stdcall']]))('CertComparePublicKeyInfo');},
    CertGetPublicKeyLength: function() {return (Fn(T.DWORD, [[T.DWORD, 'dwCertEncodingType'], [T.PCERT_PUBLIC_KEY_INFO, 'pPublicKey']], [['stdcall']]))('CertGetPublicKeyLength');},
    CertCreateContext: function() {return (Fn(Pointer(null), [[T.DWORD, 'dwContextType'], [T.DWORD, 'dwEncodingType'], [Pointer(T.BYTE), 'pbEncoded'], [T.DWORD, 'cbEncoded'], [T.DWORD, 'dwFlags'], [T.PCERT_CREATE_CONTEXT_PARA, 'pCreatePara']], [['const'], ['stdcall']]))('CertCreateContext');},
    CertCreateCertificateContext: function() {return (Fn(T.PCCERT_CONTEXT, [[T.DWORD, 'dwCertEncodingType'], [Pointer(T.BYTE), 'pbCertEncoded'], [T.DWORD, 'cbCertEncoded']], [['stdcall']]))('CertCreateCertificateContext');},
    CertCreateCRLContext: function() {return (Fn(T.PCCRL_CONTEXT, [[T.DWORD, 'dwCertEncodingType'], [Pointer(T.BYTE), 'pbCrlEncoded'], [T.DWORD, 'cbCrlEncoded']], [['stdcall']]))('CertCreateCRLContext');},
    CertCreateCTLContext: function() {return (Fn(T.PCCTL_CONTEXT, [[T.DWORD, 'dwMsgAndCertEncodingType'], [Pointer(T.BYTE), 'pbCtlEncoded'], [T.DWORD, 'cbCtlEncoded']], [['stdcall']]))('CertCreateCTLContext');},
    CertCreateSelfSignCertificate: function() {return (Fn(T.PCCERT_CONTEXT, [[T.HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, 'hProv'], [T.PCERT_NAME_BLOB, 'pSubjectIssuerBlob'], [T.DWORD, 'dwFlags'], [T.PCRYPT_KEY_PROV_INFO, 'pKeyProvInfo'], [T.PCRYPT_ALGORITHM_IDENTIFIER, 'pSignatureAlgorithm'], [T.PSYSTEMTIME, 'pStartTime'], [T.PSYSTEMTIME, 'pEndTime'], [T.PCERT_EXTENSIONS, 'pExtensions']], [['stdcall']]))('CertCreateSelfSignCertificate');},
    CertDeleteCertificateFromStore: function() {return (Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext']], [['stdcall']]))('CertDeleteCertificateFromStore');},
    CertDeleteCRLFromStore: function() {return (Fn(T.BOOL, [[T.PCCRL_CONTEXT, 'pCrlContext']], [['stdcall']]))('CertDeleteCRLFromStore');},
    CertDeleteCTLFromStore: function() {return (Fn(T.BOOL, [[T.PCCTL_CONTEXT, 'pCtlContext']], [['stdcall']]))('CertDeleteCTLFromStore');},
    CertDuplicateCertificateContext: function() {return (Fn(T.PCCERT_CONTEXT, [[T.PCCERT_CONTEXT, 'pCertContext']], [['stdcall']]))('CertDuplicateCertificateContext');},
    CertDuplicateCRLContext: function() {return (Fn(T.PCCRL_CONTEXT, [[T.PCCRL_CONTEXT, 'pCrlContext']], [['stdcall']]))('CertDuplicateCRLContext');},
    CertDuplicateCTLContext: function() {return (Fn(T.PCCTL_CONTEXT, [[T.PCCTL_CONTEXT, 'pCtlContext']], [['stdcall']]))('CertDuplicateCTLContext');},
    CertFindCertificateInStore: function() {return (Fn(T.PCCERT_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwCertEncodingType'], [T.DWORD, 'dwFindFlags'], [T.DWORD, 'dwFindType'], [Pointer(null), 'pvFindPara'], [T.PCCERT_CONTEXT, 'pPrevCertContext']], [['stdcall']]))('CertFindCertificateInStore');},
    CertFindCRLInStore: function() {return (Fn(T.PCCRL_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwCertEncodingType'], [T.DWORD, 'dwFindFlags'], [T.DWORD, 'dwFindType'], [Pointer(null), 'pvFindPara'], [T.PCCRL_CONTEXT, 'pPrevCrlContext']], [['stdcall']]))('CertFindCRLInStore');},
    CertFindCTLInStore: function() {return (Fn(T.PCCTL_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwCertEncodingType'], [T.DWORD, 'dwFindFlags'], [T.DWORD, 'dwFindType'], [Pointer(null), 'pvFindPara'], [T.PCCTL_CONTEXT, 'pPrevCtlContext']], [['stdcall']]))('CertFindCTLInStore');},
    CertGetIssuerCertificateFromStore: function() {return (Fn(T.PCCERT_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.PCCERT_CONTEXT, 'pSubjectContext'], [T.PCCERT_CONTEXT, 'pPrevIssuerContext'], [Pointer(T.DWORD), 'pdwFlags']], [['stdcall']]))('CertGetIssuerCertificateFromStore');},
    CertGetSubjectCertificateFromStore: function() {return (Fn(T.PCCERT_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwCertEncodingType'], [T.PCERT_INFO, 'pCertId']], [['stdcall']]))('CertGetSubjectCertificateFromStore');},
    CertGetCRLFromStore: function() {return (Fn(T.PCCRL_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.PCCERT_CONTEXT, 'pIssuerContext'], [T.PCCRL_CONTEXT, 'pPrevCrlContext'], [Pointer(T.DWORD), 'pdwFlags']], [['stdcall']]))('CertGetCRLFromStore');},
    CertSerializeCertificateStoreElement: function() {return (Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbElement'], [Pointer(T.DWORD), 'pcbElement']], [['stdcall']]))('CertSerializeCertificateStoreElement');},
    CertSerializeCRLStoreElement: function() {return (Fn(T.BOOL, [[T.PCCRL_CONTEXT, 'pCrlContext'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbElement'], [Pointer(T.DWORD), 'pcbElement']], [['stdcall']]))('CertSerializeCRLStoreElement');},
    CertSerializeCTLStoreElement: function() {return (Fn(T.BOOL, [[T.PCCTL_CONTEXT, 'pCtlContext'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbElement'], [Pointer(T.DWORD), 'pcbElement']], [['stdcall']]))('CertSerializeCTLStoreElement');},
    CertGetIntendedKeyUsage: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.PCERT_INFO, 'pCertInfo'], [Pointer(T.BYTE), 'pbKeyUsage'], [T.DWORD, 'cbKeyUsage']], [['stdcall']]))('CertGetIntendedKeyUsage');},
    CertGetEnhancedKeyUsage: function() {return (Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwFlags'], [T.PCERT_ENHKEY_USAGE, 'pUsage'], [Pointer(T.DWORD), 'pcbUsage']], [['stdcall']]))('CertGetEnhancedKeyUsage');},
    CertSetEnhancedKeyUsage: function() {return (Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.PCERT_ENHKEY_USAGE, 'pUsage']], [['stdcall']]))('CertSetEnhancedKeyUsage');},
    CertAddEnhancedKeyUsageIdentifier: function() {return (Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.LPCSTR, 'pszUsageIdentifer']], [['stdcall']]))('CertAddEnhancedKeyUsageIdentifier');},
    CertRemoveEnhancedKeyUsageIdentifier: function() {return (Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.LPCSTR, 'pszUsageIdentifer']], [['stdcall']]))('CertRemoveEnhancedKeyUsageIdentifier');},
    CertGetValidUsages: function() {return (Fn(T.BOOL, [[T.DWORD, 'cCerts'], [Pointer(T.PCCERT_CONTEXT), 'rghCerts'], [Pointer(T.i32), 'cNumOIDs'], [Pointer(T.LPSTR), 'rghOIDs'], [Pointer(T.DWORD), 'pcbOIDs']], [['stdcall']]))('CertGetValidUsages');},
    CryptEncodeObject: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.LPCSTR, 'lpszStructType'], [Pointer(null), 'pvStructInfo'], [Pointer(T.BYTE), 'pbEncoded'], [Pointer(T.DWORD), 'pcbEncoded']], [['stdcall']]))('CryptEncodeObject');},
    CryptEncodeObjectEx: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.LPCSTR, 'lpszStructType'], [Pointer(null), 'pvStructInfo'], [T.DWORD, 'dwFlags'], [T.PCRYPT_ENCODE_PARA, 'pEncodePara'], [Pointer(null), 'pvEncoded'], [Pointer(T.DWORD), 'pcbEncoded']], [['stdcall']]))('CryptEncodeObjectEx');},
    CryptDecodeObject: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.LPCSTR, 'lpszStructType'], [Pointer(T.BYTE), 'pbEncoded'], [T.DWORD, 'cbEncoded'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvStructInfo'], [Pointer(T.DWORD), 'pcbStructInfo']], [['stdcall']]))('CryptDecodeObject');},
    CryptDecodeObjectEx: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.LPCSTR, 'lpszStructType'], [Pointer(T.BYTE), 'pbEncoded'], [T.DWORD, 'cbEncoded'], [T.DWORD, 'dwFlags'], [T.PCRYPT_DECODE_PARA, 'pDecodePara'], [Pointer(null), 'pvStructInfo'], [Pointer(T.DWORD), 'pcbStructInfo']], [['stdcall']]))('CryptDecodeObjectEx');},
    CryptFormatObject: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.DWORD, 'dwFormatType'], [T.DWORD, 'dwFormatStrType'], [Pointer(null), 'pFormatStruct'], [T.LPCSTR, 'lpszStructType'], [Pointer(T.BYTE), 'pbEncoded'], [T.DWORD, 'cbEncoded'], [Pointer(null), 'pbFormat'], [Pointer(T.DWORD), 'pcbFormat']], [['stdcall']]))('CryptFormatObject');},
    CryptHashCertificate: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.ALG_ID, 'Algid'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbEncoded'], [T.DWORD, 'cbEncoded'], [Pointer(T.BYTE), 'pbComputedHash'], [Pointer(T.DWORD), 'pcbComputedHash']], [['stdcall']]))('CryptHashCertificate');},
    CryptHashPublicKeyInfo: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.ALG_ID, 'Algid'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwCertEncodingType'], [T.PCERT_PUBLIC_KEY_INFO, 'pInfo'], [Pointer(T.BYTE), 'pbComputedHash'], [Pointer(T.DWORD), 'pcbComputedHash']], [['stdcall']]))('CryptHashPublicKeyInfo');},
    CryptHashToBeSigned: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.DWORD, 'dwCertEncodingType'], [Pointer(T.BYTE), 'pbEncoded'], [T.DWORD, 'cbEncoded'], [Pointer(T.BYTE), 'pbComputedHash'], [Pointer(T.DWORD), 'pcbComputedHash']], [['stdcall']]))('CryptHashToBeSigned');},
    CryptQueryObject: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwObjectType'], [Pointer(null), 'pvObject'], [T.DWORD, 'dwExpectedContentTypeFlags'], [T.DWORD, 'dwExpectedFormatTypeFlags'], [T.DWORD, 'dwFlags'], [Pointer(T.DWORD), 'pdwMsgAndCertEncodingType'], [Pointer(T.DWORD), 'pdwContentType'], [Pointer(T.DWORD), 'pdwFormatType'], [Pointer(T.HCERTSTORE), 'phCertStore'], [Pointer(T.HCRYPTMSG), 'phMsg'], [Pointer(Pointer(null)), 'ppvContext']], [['stdcall']]))('CryptQueryObject');},
    CryptSignCertificate: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, 'hCryptProv'], [T.DWORD, 'dwKeySpec'], [T.DWORD, 'dwCertEncodingType'], [Pointer(T.BYTE), 'pbEncodedToBeSigned'], [T.DWORD, 'cbEncodedToBeSigned'], [T.PCRYPT_ALGORITHM_IDENTIFIER, 'pSignatureAlgorithm'], [Pointer(null), 'pvHashAuxInfo'], [Pointer(T.BYTE), 'pbSignature'], [Pointer(T.DWORD), 'pcbSignature']], [['stdcall']]))('CryptSignCertificate');},
    CryptSignAndEncodeCertificate: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, 'hCryptProv'], [T.DWORD, 'dwKeySpec'], [T.DWORD, 'dwCertEncodingType'], [T.LPCSTR, 'lpszStructType'], [Pointer(null), 'pvStructInfo'], [T.PCRYPT_ALGORITHM_IDENTIFIER, 'pSignatureAlgorithm'], [Pointer(null), 'pvHashAuxInfo'], [Pointer(T.BYTE), 'pbEncoded'], [Pointer(T.DWORD), 'pcbEncoded']], [['stdcall']]))('CryptSignAndEncodeCertificate');},
    CryptVerifyCertificateSignature: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.DWORD, 'dwCertEncodingType'], [Pointer(T.BYTE), 'pbEncoded'], [T.DWORD, 'cbEncoded'], [T.PCERT_PUBLIC_KEY_INFO, 'pPublicKey']], [['stdcall']]))('CryptVerifyCertificateSignature');},
    CryptVerifyCertificateSignatureEx: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.DWORD, 'dwCertEncodingType'], [T.DWORD, 'dwSubjectType'], [Pointer(null), 'pvSubject'], [T.DWORD, 'dwIssuerType'], [Pointer(null), 'pvIssuer'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']], [['stdcall']]))('CryptVerifyCertificateSignatureEx');},
    CertFindAttribute: function() {return (Fn(T.PCRYPT_ATTRIBUTE, [[T.LPCSTR, 'pszObjId'], [T.DWORD, 'cAttr'], [Pointer(T.CRYPT_ATTRIBUTE), 'rgAttr']], [['stdcall']]))('CertFindAttribute');},
    CertFindExtension: function() {return (Fn(T.PCERT_EXTENSION, [[T.LPCSTR, 'pszObjId'], [T.DWORD, 'cExtensions'], [Pointer(T.CERT_EXTENSION), 'rgExtensions']], [['stdcall']]))('CertFindExtension');},
    CertFindRDNAttr: function() {return (Fn(T.PCERT_RDN_ATTR, [[T.LPCSTR, 'pszObjId'], [T.PCERT_NAME_INFO, 'pName']], [['stdcall']]))('CertFindRDNAttr');},
    CertFindSubjectInSortedCTL: function() {return (Fn(T.BOOL, [[T.PCRYPT_DATA_BLOB, 'pSubjectIdentifier'], [T.PCCTL_CONTEXT, 'pCtlContext'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved'], [T.PCRYPT_DER_BLOB, 'pEncodedAttributes']], [['stdcall']]))('CertFindSubjectInSortedCTL');},
    CertIsRDNAttrsInCertificateName: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.DWORD, 'dwFlags'], [T.PCERT_NAME_BLOB, 'pCertName'], [T.PCERT_RDN, 'pRDN']], [['stdcall']]))('CertIsRDNAttrsInCertificateName');},
    CertIsValidCRLForCertificate: function() {return (Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCert'], [T.PCCRL_CONTEXT, 'pCrl'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']], [['stdcall']]))('CertIsValidCRLForCertificate');},
    CertFindCertificateInCRL: function() {return (Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCert'], [T.PCCRL_CONTEXT, 'pCrlContext'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved'], [Pointer(T.PCRL_ENTRY), 'ppCrlEntry']], [['stdcall']]))('CertFindCertificateInCRL');},
    CertVerifyCRLRevocation: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.PCERT_INFO, 'pCertId'], [T.DWORD, 'cCrlInfo'], [Pointer(T.PCRL_INFO), 'rgpCrlInfo']], [['stdcall']]))('CertVerifyCRLRevocation');},
    CertVerifySubjectCertificateContext: function() {return (Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pSubject'], [T.PCCERT_CONTEXT, 'pIssuer'], [Pointer(T.DWORD), 'pdwFlags']], [['stdcall']]))('CertVerifySubjectCertificateContext');},
    CertVerifyCRLTimeValidity: function() {return (Fn(T.LONG, [[T.LPFILETIME, 'pTimeToVerify'], [T.PCRL_INFO, 'pCrlInfo']], [['stdcall']]))('CertVerifyCRLTimeValidity');},
    CertVerifyTimeValidity: function() {return (Fn(T.LONG, [[T.LPFILETIME, 'pTimeToVerify'], [T.PCERT_INFO, 'pCertInfo']], [['stdcall']]))('CertVerifyTimeValidity');},
    CertVerifyValidityNesting: function() {return (Fn(T.BOOL, [[T.PCERT_INFO, 'pSubjectInfo'], [T.PCERT_INFO, 'pIssuerInfo']], [['stdcall']]))('CertVerifyValidityNesting');},
    CertVerifyCTLUsage: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwEncodingType'], [T.DWORD, 'dwSubjectType'], [Pointer(null), 'pvSubject'], [T.PCTL_USAGE, 'pSubjectUsage'], [T.DWORD, 'dwFlags'], [T.PCTL_VERIFY_USAGE_PARA, 'pVerifyUsagePara'], [T.PCTL_VERIFY_USAGE_STATUS, 'pVerifyUsageStatus']], [['stdcall']]))('CertVerifyCTLUsage');},
    CertVerifyRevocation: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwEncodingType'], [T.DWORD, 'dwRevType'], [T.DWORD, 'cContext'], [Pointer(T.PVOID), 'rgpvContext'], [T.DWORD, 'dwFlags'], [T.PCERT_REVOCATION_PARA, 'pRevPara'], [T.PCERT_REVOCATION_STATUS, 'pRevStatus']], [['stdcall']]))('CertVerifyRevocation');},
    CryptExportPublicKeyInfo: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, 'hCryptProv'], [T.DWORD, 'dwKeySpec'], [T.DWORD, 'dwCertEncodingType'], [T.PCERT_PUBLIC_KEY_INFO, 'pInfo'], [Pointer(T.DWORD), 'pcbInfo']], [['stdcall']]))('CryptExportPublicKeyInfo');},
    CryptExportPublicKeyInfoEx: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, 'hCryptProv'], [T.DWORD, 'dwKeySpec'], [T.DWORD, 'dwCertEncodingType'], [T.LPSTR, 'pszPublicKeyObjId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvAuxInfo'], [T.PCERT_PUBLIC_KEY_INFO, 'pInfo'], [Pointer(T.DWORD), 'pcbInfo']], [['stdcall']]))('CryptExportPublicKeyInfoEx');},
    CryptImportPublicKeyInfo: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV, 'hCryptProv'], [T.DWORD, 'dwCertEncodingType'], [T.PCERT_PUBLIC_KEY_INFO, 'pInfo'], [Pointer(T.HCRYPTKEY), 'phKey']], [['stdcall']]))('CryptImportPublicKeyInfo');},
    CryptImportPublicKeyInfoEx: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV, 'hCryptProv'], [T.DWORD, 'dwCertEncodingType'], [T.PCERT_PUBLIC_KEY_INFO, 'pInfo'], [T.ALG_ID, 'aiKeyAlg'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvAuxInfo'], [Pointer(T.HCRYPTKEY), 'phKey']], [['stdcall']]))('CryptImportPublicKeyInfoEx');},
    CryptAcquireCertificatePrivateKey: function() {return (Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCert'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved'], [Pointer(T.HCRYPTPROV_OR_NCRYPT_KEY_HANDLE), 'phCryptProv'], [Pointer(T.DWORD), 'pdwKeySpec'], [Pointer(T.BOOL), 'pfCallerFreeProv']], [['stdcall']]))('CryptAcquireCertificatePrivateKey');},
    CryptFindCertificateKeyProvInfo: function() {return (Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCert'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']], [['stdcall']]))('CryptFindCertificateKeyProvInfo');},
    CryptProtectData: function() {return (Fn(T.BOOL, [[Pointer(T.DATA_BLOB), 'pDataIn'], [T.LPCWSTR, 'szDataDescr'], [Pointer(T.DATA_BLOB), 'pOptionalEntropy'], [T.PVOID, 'pvReserved'], [Pointer(T.CRYPTPROTECT_PROMPTSTRUCT), 'pPromptStruct'], [T.DWORD, 'dwFlags'], [Pointer(T.DATA_BLOB), 'pDataOut']], [['stdcall']]))('CryptProtectData');},
    CryptUnprotectData: function() {return (Fn(T.BOOL, [[Pointer(T.DATA_BLOB), 'pDataIn'], [Pointer(T.LPWSTR), 'ppszDataDescr'], [Pointer(T.DATA_BLOB), 'pOptionalEntropy'], [T.PVOID, 'pvReserved'], [Pointer(T.CRYPTPROTECT_PROMPTSTRUCT), 'pPromptStruct'], [T.DWORD, 'dwFlags'], [Pointer(T.DATA_BLOB), 'pDataOut']], [['stdcall']]))('CryptUnprotectData');},
    CertGetNameStringA: function() {return (Fn(T.DWORD, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwType'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvTypePara'], [T.LPSTR, 'pszNameString'], [T.DWORD, 'cchNameString']], [['stdcall']]))('CertGetNameStringA');},
    CertGetNameStringW: function() {return (Fn(T.DWORD, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwType'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvTypePara'], [T.LPWSTR, 'pszNameString'], [T.DWORD, 'cchNameString']], [['stdcall']]))('CertGetNameStringW');},
    CertRDNValueToStrA: function() {return (Fn(T.DWORD, [[T.DWORD, 'dwValueType'], [T.PCERT_RDN_VALUE_BLOB, 'pValue'], [T.LPSTR, 'psz'], [T.DWORD, 'csz']], [['stdcall']]))('CertRDNValueToStrA');},
    CertRDNValueToStrW: function() {return (Fn(T.DWORD, [[T.DWORD, 'dwValueType'], [T.PCERT_RDN_VALUE_BLOB, 'pValue'], [T.LPWSTR, 'psz'], [T.DWORD, 'csz']], [['stdcall']]))('CertRDNValueToStrW');},
    CertNameToStrA: function() {return (Fn(T.DWORD, [[T.DWORD, 'dwCertEncodingType'], [T.PCERT_NAME_BLOB, 'pName'], [T.DWORD, 'dwStrType'], [T.LPSTR, 'psz'], [T.DWORD, 'csz']], [['stdcall']]))('CertNameToStrA');},
    CertNameToStrW: function() {return (Fn(T.DWORD, [[T.DWORD, 'dwCertEncodingType'], [T.PCERT_NAME_BLOB, 'pName'], [T.DWORD, 'dwStrType'], [T.LPWSTR, 'psz'], [T.DWORD, 'csz']], [['stdcall']]))('CertNameToStrW');},
    CertStrToNameA: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.LPCSTR, 'pszX500'], [T.DWORD, 'dwStrType'], [Pointer(null), 'pvReserved'], [Pointer(T.BYTE), 'pbEncoded'], [Pointer(T.DWORD), 'pcbEncoded'], [Pointer(T.LPCSTR), 'ppszError']], [['stdcall']]))('CertStrToNameA');},
    CertStrToNameW: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.LPCWSTR, 'pszX500'], [T.DWORD, 'dwStrType'], [Pointer(null), 'pvReserved'], [Pointer(T.BYTE), 'pbEncoded'], [Pointer(T.DWORD), 'pcbEncoded'], [Pointer(T.LPCWSTR), 'ppszError']], [['stdcall']]))('CertStrToNameW');},
    CryptMsgCalculateEncodedLength: function() {return (Fn(T.DWORD, [[T.DWORD, 'dwMsgEncodingType'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwMsgType'], [Pointer(null), 'pvMsgEncodeInfo'], [T.LPSTR, 'pszInnerContentObjID'], [T.DWORD, 'cbData']], [['stdcall']]))('CryptMsgCalculateEncodedLength');},
    CryptMsgClose: function() {return (Fn(T.BOOL, [[T.HCRYPTMSG, 'hCryptMsg']], [['stdcall']]))('CryptMsgClose');},
    CryptMsgControl: function() {return (Fn(T.BOOL, [[T.HCRYPTMSG, 'hCryptMsg'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwCtrlType'], [Pointer(null), 'pvCtrlPara']], [['stdcall']]))('CryptMsgControl');},
    CryptMsgCountersign: function() {return (Fn(T.BOOL, [[T.HCRYPTMSG, 'hCryptMsg'], [T.DWORD, 'dwIndex'], [T.DWORD, 'dwCountersigners'], [T.PCMSG_SIGNER_ENCODE_INFO, 'rgCountersigners']], [['stdcall']]))('CryptMsgCountersign');},
    CryptMsgCountersignEncoded: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwEncodingType'], [T.PBYTE, 'pbSignerInfo'], [T.DWORD, 'cbSignerInfo'], [T.DWORD, 'cCountersigners'], [T.PCMSG_SIGNER_ENCODE_INFO, 'rgCountersigners'], [T.PBYTE, 'pbCountersignature'], [T.PDWORD, 'pcbCountersignature']], [['stdcall']]))('CryptMsgCountersignEncoded');},
    CryptMsgDuplicate: function() {return (Fn(T.HCRYPTMSG, [[T.HCRYPTMSG, 'hCryptMsg']], [['stdcall']]))('CryptMsgDuplicate');},
    CryptMsgEncodeAndSignCTL: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwMsgEncodingType'], [T.PCTL_INFO, 'pCtlInfo'], [T.PCMSG_SIGNED_ENCODE_INFO, 'pSignInfo'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbEncoded'], [Pointer(T.DWORD), 'pcbEncoded']], [['stdcall']]))('CryptMsgEncodeAndSignCTL');},
    CryptMsgGetAndVerifySigner: function() {return (Fn(T.BOOL, [[T.HCRYPTMSG, 'hCryptMsg'], [T.DWORD, 'cSignerStore'], [Pointer(T.HCERTSTORE), 'rghSignerStore'], [T.DWORD, 'dwFlags'], [Pointer(T.PCCERT_CONTEXT), 'ppSigner'], [Pointer(T.DWORD), 'pdwSignerIndex']], [['stdcall']]))('CryptMsgGetAndVerifySigner');},
    CryptMsgGetParam: function() {return (Fn(T.BOOL, [[T.HCRYPTMSG, 'hCryptMsg'], [T.DWORD, 'dwParamType'], [T.DWORD, 'dwIndex'], [Pointer(null), 'pvData'], [Pointer(T.DWORD), 'pcbData']], [['stdcall']]))('CryptMsgGetParam');},
    CryptMsgOpenToDecode: function() {return (Fn(T.HCRYPTMSG, [[T.DWORD, 'dwMsgEncodingType'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwMsgType'], [T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.PCERT_INFO, 'pRecipientInfo'], [T.PCMSG_STREAM_INFO, 'pStreamInfo']], [['stdcall']]))('CryptMsgOpenToDecode');},
    CryptMsgOpenToEncode: function() {return (Fn(T.HCRYPTMSG, [[T.DWORD, 'dwMsgEncodingType'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwMsgType'], [Pointer(null), 'pvMsgEncodeInfo'], [T.LPSTR, 'pszInnerContentObjID'], [T.PCMSG_STREAM_INFO, 'pStreamInfo']], [['stdcall']]))('CryptMsgOpenToEncode');},
    CryptMsgSignCTL: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwMsgEncodingType'], [Pointer(T.BYTE), 'pbCtlContent'], [T.DWORD, 'cbCtlContent'], [T.PCMSG_SIGNED_ENCODE_INFO, 'pSignInfo'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbEncoded'], [Pointer(T.DWORD), 'pcbEncoded']], [['stdcall']]))('CryptMsgSignCTL');},
    CryptMsgUpdate: function() {return (Fn(T.BOOL, [[T.HCRYPTMSG, 'hCryptMsg'], [Pointer(T.BYTE), 'pbData'], [T.DWORD, 'cbData'], [T.BOOL, 'fFinal']], [['stdcall']]))('CryptMsgUpdate');},
    CryptMsgVerifyCountersignatureEncoded: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.DWORD, 'dwEncodingType'], [T.PBYTE, 'pbSignerInfo'], [T.DWORD, 'cbSignerInfo'], [T.PBYTE, 'pbSignerInfoCountersignature'], [T.DWORD, 'cbSignerInfoCountersignature'], [T.PCERT_INFO, 'pciCountersigner']], [['stdcall']]))('CryptMsgVerifyCountersignatureEncoded');},
    CryptMsgVerifyCountersignatureEncodedEx: function() {return (Fn(T.BOOL, [[T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.DWORD, 'dwEncodingType'], [T.PBYTE, 'pbSignerInfo'], [T.DWORD, 'cbSignerInfo'], [T.PBYTE, 'pbSignerInfoCountersignature'], [T.DWORD, 'cbSignerInfoCountersignature'], [T.DWORD, 'dwSignerType'], [Pointer(null), 'pvSigner'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']], [['stdcall']]))('CryptMsgVerifyCountersignatureEncodedEx');},
    CryptSignMessage: function() {return (Fn(T.BOOL, [[T.PCRYPT_SIGN_MESSAGE_PARA, 'pSignPara'], [T.BOOL, 'fDetachedSignature'], [T.DWORD, 'cToBeSigned'], [Pointer(Pointer(T.BYTE)), 'rgpbToBeSigned'], [Pointer(T.DWORD), 'rgcbToBeSigned'], [Pointer(T.BYTE), 'pbSignedBlob'], [Pointer(T.DWORD), 'pcbSignedBlob']], [['stdcall']]))('CryptSignMessage');},
    CryptSignMessageWithKey: function() {return (Fn(T.BOOL, [[T.PCRYPT_KEY_SIGN_MESSAGE_PARA, 'pSignPara'], [Pointer(T.BYTE), 'pbToBeSigned'], [T.DWORD, 'cbToBeSigned'], [Pointer(T.BYTE), 'pbSignedBlob'], [Pointer(T.DWORD), 'pcbSignedBlob']], [['stdcall']]))('CryptSignMessageWithKey');},
    CryptVerifyMessageSignature: function() {return (Fn(T.BOOL, [[T.PCRYPT_VERIFY_MESSAGE_PARA, 'pVerifyPara'], [T.DWORD, 'dwSignerIndex'], [Pointer(T.BYTE), 'pbSignedBlob'], [T.DWORD, 'cbSignedBlob'], [Pointer(T.BYTE), 'pbDecoded'], [Pointer(T.DWORD), 'pcbDecoded'], [Pointer(T.PCCERT_CONTEXT), 'ppSignerCert']], [['stdcall']]))('CryptVerifyMessageSignature');},
    CryptVerifyMessageSignatureWithKey: function() {return (Fn(T.BOOL, [[T.PCRYPT_KEY_VERIFY_MESSAGE_PARA, 'pVerifyPara'], [T.PCERT_PUBLIC_KEY_INFO, 'pPublicKeyInfo'], [Pointer(T.BYTE), 'pbSignedBlob'], [T.DWORD, 'cbSignedBlob'], [Pointer(T.BYTE), 'pbDecoded'], [Pointer(T.DWORD), 'pcbDecoded']], [['stdcall']]))('CryptVerifyMessageSignatureWithKey');},
    CryptVerifyDetachedMessageSignature: function() {return (Fn(T.BOOL, [[T.PCRYPT_VERIFY_MESSAGE_PARA, 'pVerifyPara'], [T.DWORD, 'dwSignerIndex'], [Pointer(T.BYTE), 'pbDetachedSignBlob'], [T.DWORD, 'cbDetachedSignBlob'], [T.DWORD, 'cToBeSigned'], [Pointer(Pointer(T.BYTE)), 'rgpbToBeSigned'], [Pointer(T.DWORD), 'rgcbToBeSigned'], [Pointer(T.PCCERT_CONTEXT), 'ppSignerCert']], [['stdcall']]))('CryptVerifyDetachedMessageSignature');},
    CryptGetMessageSignerCount: function() {return (Fn(T.LONG, [[T.DWORD, 'dwMsgEncodingType'], [Pointer(T.BYTE), 'pbSignedBlob'], [T.DWORD, 'cbSignedBlob']], [['stdcall']]))('CryptGetMessageSignerCount');},
    CryptEncryptMessage: function() {return (Fn(T.BOOL, [[T.PCRYPT_ENCRYPT_MESSAGE_PARA, 'pEncryptPara'], [T.DWORD, 'cRecipientCert'], [Pointer(T.PCCERT_CONTEXT), 'rgpRecipientCert'], [Pointer(T.BYTE), 'pbToBeEncrypted'], [T.DWORD, 'cbToBeEncrypted'], [Pointer(T.BYTE), 'pbEncryptedBlob'], [Pointer(T.DWORD), 'pcbEncryptedBlob']], [['stdcall']]))('CryptEncryptMessage');},
    CryptDecryptMessage: function() {return (Fn(T.BOOL, [[T.PCRYPT_DECRYPT_MESSAGE_PARA, 'pDecryptPara'], [Pointer(T.BYTE), 'pbEncryptedBlob'], [T.DWORD, 'cbEncryptedBlob'], [Pointer(T.BYTE), 'pbDecrypted'], [Pointer(T.DWORD), 'pcbDecrypted'], [Pointer(T.PCCERT_CONTEXT), 'ppXchgCert']], [['stdcall']]))('CryptDecryptMessage');},
    CryptSignAndEncryptMessage: function() {return (Fn(T.BOOL, [[T.PCRYPT_SIGN_MESSAGE_PARA, 'pSignPara'], [T.PCRYPT_ENCRYPT_MESSAGE_PARA, 'pEncryptPara'], [T.DWORD, 'cRecipientCert'], [Pointer(T.PCCERT_CONTEXT), 'rgpRecipientCert'], [Pointer(T.BYTE), 'pbToBeSignedAndEncrypted'], [T.DWORD, 'cbToBeSignedAndEncrypted'], [Pointer(T.BYTE), 'pbSignedAndEncryptedBlob'], [Pointer(T.DWORD), 'pcbSignedAndEncryptedBlob']], [['stdcall']]))('CryptSignAndEncryptMessage');},
    CryptDecryptAndVerifyMessageSignature: function() {return (Fn(T.BOOL, [[T.PCRYPT_DECRYPT_MESSAGE_PARA, 'pDecryptPara'], [T.PCRYPT_VERIFY_MESSAGE_PARA, 'pVerifyPara'], [T.DWORD, 'dwSignerIndex'], [Pointer(T.BYTE), 'pbEncryptedBlob'], [T.DWORD, 'cbEncryptedBlob'], [Pointer(T.BYTE), 'pbDecrypted'], [Pointer(T.DWORD), 'pcbDecrypted'], [Pointer(T.PCCERT_CONTEXT), 'ppXchgCert'], [Pointer(T.PCCERT_CONTEXT), 'ppSignerCert']], [['stdcall']]))('CryptDecryptAndVerifyMessageSignature');},
    CryptGetMessageCertificates: function() {return (Fn(T.HCERTSTORE, [[T.DWORD, 'dwMsgAndCertEncodingType'], [T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbSignedBlob'], [T.DWORD, 'cbSignedBlob']], [['stdcall']]))('CryptGetMessageCertificates');},
    CryptDecodeMessage: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwMsgTypeFlags'], [T.PCRYPT_DECRYPT_MESSAGE_PARA, 'pDecryptPara'], [T.PCRYPT_VERIFY_MESSAGE_PARA, 'pVerifyPara'], [T.DWORD, 'dwSignerIndex'], [Pointer(T.BYTE), 'pbEncodedBlob'], [T.DWORD, 'cbEncodedBlob'], [T.DWORD, 'dwPrevInnerContentType'], [Pointer(T.DWORD), 'pdwMsgType'], [Pointer(T.DWORD), 'pdwInnerContentType'], [Pointer(T.BYTE), 'pbDecoded'], [Pointer(T.DWORD), 'pcbDecoded'], [Pointer(T.PCCERT_CONTEXT), 'ppXchgCert'], [Pointer(T.PCCERT_CONTEXT), 'ppSignerCert']], [['stdcall']]))('CryptDecodeMessage');},
    CryptHashMessage: function() {return (Fn(T.BOOL, [[T.PCRYPT_HASH_MESSAGE_PARA, 'pHashPara'], [T.BOOL, 'fDetachedHash'], [T.DWORD, 'cToBeHashed'], [Pointer(Pointer(T.BYTE)), 'rgpbToBeHashed'], [Pointer(T.DWORD), 'rgcbToBeHashed'], [Pointer(T.BYTE), 'pbHashedBlob'], [Pointer(T.DWORD), 'pcbHashedBlob'], [Pointer(T.BYTE), 'pbComputedHash'], [Pointer(T.DWORD), 'pcbComputedHash']], [['stdcall']]))('CryptHashMessage');},
    CryptVerifyMessageHash: function() {return (Fn(T.BOOL, [[T.PCRYPT_HASH_MESSAGE_PARA, 'pHashPara'], [Pointer(T.BYTE), 'pbHashedBlob'], [T.DWORD, 'cbHashedBlob'], [Pointer(T.BYTE), 'pbToBeHashed'], [Pointer(T.DWORD), 'pcbToBeHashed'], [Pointer(T.BYTE), 'pbComputedHash'], [Pointer(T.DWORD), 'pcbComputedHash']], [['stdcall']]))('CryptVerifyMessageHash');},
    CryptVerifyDetachedMessageHash: function() {return (Fn(T.BOOL, [[T.PCRYPT_HASH_MESSAGE_PARA, 'pHashPara'], [Pointer(T.BYTE), 'pbDetachedHashBlob'], [T.DWORD, 'cbDetachedHashBlob'], [T.DWORD, 'cToBeHashed'], [Pointer(Pointer(T.BYTE)), 'rgpbToBeHashed'], [Pointer(T.DWORD), 'rgcbToBeHashed'], [Pointer(T.BYTE), 'pbComputedHash'], [Pointer(T.DWORD), 'pcbComputedHash']], [['stdcall']]))('CryptVerifyDetachedMessageHash');},
    PFXImportCertStore: function() {return (Fn(T.HCERTSTORE, [[Pointer(T.CRYPT_DATA_BLOB), 'pPFX'], [T.LPCWSTR, 'szPassword'], [T.DWORD, 'dwFlags']], [['stdcall']]))('PFXImportCertStore');},
    PFXIsPFXBlob: function() {return (Fn(T.BOOL, [[Pointer(T.CRYPT_DATA_BLOB), 'pPFX']], [['stdcall']]))('PFXIsPFXBlob');},
    PFXVerifyPassword: function() {return (Fn(T.BOOL, [[Pointer(T.CRYPT_DATA_BLOB), 'pPFX'], [T.LPCWSTR, 'szPassword'], [T.DWORD, 'dwFlags']], [['stdcall']]))('PFXVerifyPassword');},
    PFXExportCertStoreEx: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hStore'], [Pointer(T.CRYPT_DATA_BLOB), 'pPFX'], [T.LPCWSTR, 'szPassword'], [Pointer(null), 'pvReserved'], [T.DWORD, 'dwFlags']], [['stdcall']]))('PFXExportCertStoreEx');},
    PFXExportCertStore: function() {return (Fn(T.BOOL, [[T.HCERTSTORE, 'hStore'], [Pointer(T.CRYPT_DATA_BLOB), 'pPFX'], [T.LPCWSTR, 'szPassword'], [T.DWORD, 'dwFlags']], [['stdcall']]))('PFXExportCertStore');},
    CryptCancelAsyncRetrieval: function() {return (Fn(T.BOOL, [[T.HCRYPTASYNC, 'hAsyncRetrieval']], [['stdcall']]))('CryptCancelAsyncRetrieval');},
    CryptGetObjectUrl: function() {return (Fn(T.BOOL, [[T.LPCSTR, 'pszUrlOid'], [T.LPVOID, 'pvPara'], [T.DWORD, 'dwFlags'], [T.PCRYPT_URL_ARRAY, 'pUrlArray'], [Pointer(T.DWORD), 'pcbUrlArray'], [T.PCRYPT_URL_INFO, 'pUrlInfo'], [Pointer(T.DWORD), 'pcbUrlInfo'], [T.LPVOID, 'pvReserved']], [['stdcall']]))('CryptGetObjectUrl');},
    CryptGetTimeValidObject: function() {return (Fn(T.BOOL, [[T.LPCSTR, 'pszTimeValidOid'], [Pointer(null), 'pvPara'], [T.PCCERT_CONTEXT, 'pIssuer'], [T.LPFILETIME, 'pftValidFor'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwTimeout'], [Pointer(Pointer(null)), 'ppvObject'], [T.PCRYPT_CREDENTIALS, 'pCredentials'], [Pointer(null), 'pvReserved']], [['stdcall']]))('CryptGetTimeValidObject');},
    CryptFlushTimeValidObject: function() {return (Fn(T.BOOL, [[T.LPCSTR, 'pszFlushTimeValidOid'], [Pointer(null), 'pvPara'], [T.PCCERT_CONTEXT, 'pIssuer'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']], [['stdcall']]))('CryptFlushTimeValidObject');},
    CryptInstallCancelRetrieval: function() {return (Fn(T.BOOL, [[T.PFN_CRYPT_CANCEL_RETRIEVAL, 'pfnCancel'], [Pointer(null), 'pvArg'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']], [['stdcall']]))('CryptInstallCancelRetrieval');},
    CryptUninstallCancelRetrieval: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']], [['stdcall']]))('CryptUninstallCancelRetrieval');},
    CryptRetrieveObjectByUrlA: function() {return (Fn(T.BOOL, [[T.LPCSTR, 'pszURL'], [T.LPCSTR, 'pszObjectOid'], [T.DWORD, 'dwRetrievalFlags'], [T.DWORD, 'dwTimeout'], [Pointer(T.LPVOID), 'ppvObject'], [T.HCRYPTASYNC, 'hAsyncRetrieve'], [T.PCRYPT_CREDENTIALS, 'pCredentials'], [T.LPVOID, 'pvVerify'], [T.PCRYPT_RETRIEVE_AUX_INFO, 'pAuxInfo']], [['stdcall']]))('CryptRetrieveObjectByUrlA');},
    CryptRetrieveObjectByUrlW: function() {return (Fn(T.BOOL, [[T.LPCWSTR, 'pszURL'], [T.LPCSTR, 'pszObjectOid'], [T.DWORD, 'dwRetrievalFlags'], [T.DWORD, 'dwTimeout'], [Pointer(T.LPVOID), 'ppvObject'], [T.HCRYPTASYNC, 'hAsyncRetrieve'], [T.PCRYPT_CREDENTIALS, 'pCredentials'], [T.LPVOID, 'pvVerify'], [T.PCRYPT_RETRIEVE_AUX_INFO, 'pAuxInfo']], [['stdcall']]))('CryptRetrieveObjectByUrlW');},
    DeviceCapabilitiesA: function() {return (Fn(T.INT, [[T.LPCSTR, 'pDevice'], [T.LPCSTR, 'pPort'], [T.WORD, 'fwCapability'], [T.LPSTR, 'pOutput'], [T.LPDEVMODEA, 'pDevMode']], [['stdcall']]))('DeviceCapabilitiesA');},
    DeviceCapabilitiesW: function() {return (Fn(T.INT, [[T.LPCWSTR, 'pDevice'], [T.LPCWSTR, 'pPort'], [T.WORD, 'fwCapability'], [T.LPWSTR, 'pOutput'], [Pointer(T.DEVMODEW), 'pDevMode']], [['stdcall']]))('DeviceCapabilitiesW');},
    DocumentPropertiesA: function() {return (Fn(T.LONG, [[T.HWND, 'hWnd'], [T.HANDLE, 'hPrinter'], [T.LPSTR, 'pDeviceName'], [T.LPDEVMODEA, 'pDevModeOutput'], [T.LPDEVMODEA, 'pDevModeInput'], [T.DWORD, 'fMode']], [['stdcall']]))('DocumentPropertiesA');},
    DocumentPropertiesW: function() {return (Fn(T.LONG, [[T.HWND, 'hWnd'], [T.HANDLE, 'hPrinter'], [T.LPWSTR, 'pDeviceName'], [T.LPDEVMODEW, 'pDevModeOutput'], [T.LPDEVMODEW, 'pDevModeInput'], [T.DWORD, 'fMode']], [['stdcall']]))('DocumentPropertiesW');},
    OpenPrinterA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'lpPrinterName'], [Pointer(T.HANDLE), 'phPrinter'], [T.LPPRINTER_DEFAULTSA, 'pDefault']], [['stdcall']]))('OpenPrinterA');},
    OpenPrinterW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'lpPrinterName'], [Pointer(T.HANDLE), 'phPrinter'], [T.LPPRINTER_DEFAULTSW, 'pDefault']], [['stdcall']]))('OpenPrinterW');},
    ResetPrinterA: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPPRINTER_DEFAULTSA, 'pDefault']], [['stdcall']]))('ResetPrinterA');},
    ResetPrinterW: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPPRINTER_DEFAULTSW, 'pDefault']], [['stdcall']]))('ResetPrinterW');},
    ClosePrinter: function() {return (Fn(T.BOOL, [[T.HANDLE, 'phPrinter']], [['stdcall']]))('ClosePrinter');},
    EnumJobsA: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'FirstJob'], [T.DWORD, 'NoJobs'], [T.DWORD, 'Level'], [T.LPBYTE, 'pJob'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcReturned']], [['stdcall']]))('EnumJobsA');},
    EnumJobsW: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'FirstJob'], [T.DWORD, 'NoJobs'], [T.DWORD, 'Level'], [T.LPBYTE, 'pJob'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcReturned']], [['stdcall']]))('EnumJobsW');},
    EnumPrintersA: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwType'], [T.LPSTR, 'lpszName'], [T.DWORD, 'dwLevel'], [T.LPBYTE, 'lpbPrinters'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'lpdwNeeded'], [T.LPDWORD, 'lpdwReturned']], [['stdcall']]))('EnumPrintersA');},
    EnumPrintersW: function() {return (Fn(T.BOOL, [[T.DWORD, 'dwType'], [T.LPWSTR, 'lpszName'], [T.DWORD, 'dwLevel'], [T.LPBYTE, 'lpbPrinters'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'lpdwNeeded'], [T.LPDWORD, 'lpdwReturned']], [['stdcall']]))('EnumPrintersW');},
    PrinterProperties: function() {return (Fn(T.BOOL, [[T.HWND, 'hWnd'], [T.HANDLE, 'hPrinter']], [['stdcall']]))('PrinterProperties');},
    GetPrinterDriverDirectoryA: function() {return (Fn(T.BOOL, [[T.LPSTR], [T.LPSTR], [T.DWORD], [T.LPBYTE], [T.DWORD], [T.LPDWORD]], [['stdcall']]))('GetPrinterDriverDirectoryA');},
    GetPrinterDriverDirectoryW: function() {return (Fn(T.BOOL, [[T.LPWSTR], [T.LPWSTR], [T.DWORD], [T.LPBYTE], [T.DWORD], [T.LPDWORD]], [['stdcall']]))('GetPrinterDriverDirectoryW');},
    GetPrinterDriverA: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPSTR, 'pEnvironment'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDriverInfo'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']], [['stdcall']]))('GetPrinterDriverA');},
    GetPrinterDriverW: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPWSTR, 'pEnvironment'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDriverInfo'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']], [['stdcall']]))('GetPrinterDriverW');},
    SetJobA: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'JobID'], [T.DWORD, 'Level'], [T.LPBYTE, 'pJob'], [T.DWORD, 'Command']], [['stdcall']]))('SetJobA');},
    SetJobW: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'JobID'], [T.DWORD, 'Level'], [T.LPBYTE, 'pJob'], [T.DWORD, 'Command']], [['stdcall']]))('SetJobW');},
    GetJobA: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'JobID'], [T.DWORD, 'Level'], [T.LPBYTE, 'pJob'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']], [['stdcall']]))('GetJobA');},
    GetJobW: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'JobID'], [T.DWORD, 'Level'], [T.LPBYTE, 'pJob'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']], [['stdcall']]))('GetJobW');},
    AddPrinterA: function() {return (Fn(T.HANDLE, [[T.LPSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrinter']], [['stdcall']]))('AddPrinterA');},
    AddPrinterW: function() {return (Fn(T.HANDLE, [[T.LPWSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrinter']], [['stdcall']]))('AddPrinterW');},
    DeletePrinter: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter']], [['stdcall']]))('DeletePrinter');},
    SetPrinterA: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrinter'], [T.DWORD, 'Command']], [['stdcall']]))('SetPrinterA');},
    SetPrinterW: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrinter'], [T.DWORD, 'Command']], [['stdcall']]))('SetPrinterW');},
    GetPrinterA: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrinter'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']], [['stdcall']]))('GetPrinterA');},
    GetPrinterW: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrinter'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']], [['stdcall']]))('GetPrinterW');},
    AddPrinterDriverA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDriverInfo']], [['stdcall']]))('AddPrinterDriverA');},
    AddPrinterDriverW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDriverInfo']], [['stdcall']]))('AddPrinterDriverW');},
    AddPrinterDriverExA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDriverInfo'], [T.DWORD, 'dwFileCopyFlags']], [['stdcall']]))('AddPrinterDriverExA');},
    AddPrinterDriverExW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDriverInfo'], [T.DWORD, 'dwFileCopyFlags']], [['stdcall']]))('AddPrinterDriverExW');},
    EnumPrinterDriversA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDriverInfo'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcbReturned']], [['stdcall']]))('EnumPrinterDriversA');},
    EnumPrinterDriversW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDriverInfo'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcbReturned']], [['stdcall']]))('EnumPrinterDriversW');},
    GetDefaultPrinterA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPDWORD, 'pcbNameSize']], [['stdcall']]))('GetDefaultPrinterA');},
    GetDefaultPrinterW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPDWORD, 'pcbNameSize']], [['stdcall']]))('GetDefaultPrinterW');},
    SetDefaultPrinterA: function() {return (Fn(T.BOOL, [[T.LPCSTR]], [['stdcall']]))('SetDefaultPrinterA');},
    SetDefaultPrinterW: function() {return (Fn(T.BOOL, [[T.LPCWSTR]], [['stdcall']]))('SetDefaultPrinterW');},
    DeletePrinterDriverA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.LPSTR, 'pDriverName']], [['stdcall']]))('DeletePrinterDriverA');},
    DeletePrinterDriverW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.LPWSTR, 'pDriverName']], [['stdcall']]))('DeletePrinterDriverW');},
    DeletePrinterDriverExA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.LPSTR, 'pDriverName'], [T.DWORD, 'dwDeleteFlag'], [T.DWORD, 'dwVersionFlag']], [['stdcall']]))('DeletePrinterDriverExA');},
    DeletePrinterDriverExW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.LPWSTR, 'pDriverName'], [T.DWORD, 'dwDeleteFlag'], [T.DWORD, 'dwVersionFlag']], [['stdcall']]))('DeletePrinterDriverExW');},
    AddPrintProcessorA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.LPSTR, 'pPathName'], [T.LPSTR, 'pPrintProcessorName']], [['stdcall']]))('AddPrintProcessorA');},
    AddPrintProcessorW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.LPWSTR, 'pPathName'], [T.LPWSTR, 'pPrintProcessorName']], [['stdcall']]))('AddPrintProcessorW');},
    EnumPrintProcessorsA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrintProcessorInfo'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcbReturned']], [['stdcall']]))('EnumPrintProcessorsA');},
    EnumPrintProcessorsW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrintProcessorInfo'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcbReturned']], [['stdcall']]))('EnumPrintProcessorsW');},
    GetPrintProcessorDirectoryA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrintProcessorInfo'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']], [['stdcall']]))('GetPrintProcessorDirectoryA');},
    GetPrintProcessorDirectoryW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrintProcessorInfo'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']], [['stdcall']]))('GetPrintProcessorDirectoryW');},
    EnumPrintProcessorDatatypesA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pPrintProcessorName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDatatypes'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcbReturned']], [['stdcall']]))('EnumPrintProcessorDatatypesA');},
    EnumPrintProcessorDatatypesW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pPrintProcessorName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDatatypes'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcbReturned']], [['stdcall']]))('EnumPrintProcessorDatatypesW');},
    DeletePrintProcessorA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.LPSTR, 'pPrintProcessorName']], [['stdcall']]))('DeletePrintProcessorA');},
    DeletePrintProcessorW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.LPWSTR, 'pPrintProcessorName']], [['stdcall']]))('DeletePrintProcessorW');},
    StartDocPrinterA: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDocInfo']], [['stdcall']]))('StartDocPrinterA');},
    StartDocPrinterW: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDocInfo']], [['stdcall']]))('StartDocPrinterW');},
    StartPagePrinter: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter']], [['stdcall']]))('StartPagePrinter');},
    WritePrinter: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPVOID, 'pBuf'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcWritten']], [['stdcall']]))('WritePrinter');},
    EndPagePrinter: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter']], [['stdcall']]))('EndPagePrinter');},
    AbortPrinter: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter']], [['stdcall']]))('AbortPrinter');},
    ReadPrinter: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPVOID, 'pBuf'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pNoBytesRead']], [['stdcall']]))('ReadPrinter');},
    EndDocPrinter: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter']], [['stdcall']]))('EndDocPrinter');},
    AddJobA: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pData'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']], [['stdcall']]))('AddJobA');},
    AddJobW: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pData'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']], [['stdcall']]))('AddJobW');},
    ScheduleJob: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'JobID']], [['stdcall']]))('ScheduleJob');},
    AdvancedDocumentPropertiesA: function() {return (Fn(T.LONG, [[T.HWND, 'hWnd'], [T.HANDLE, 'hPrinter'], [T.LPSTR, 'pDeviceName'], [T.PDEVMODEA, 'pDevModeOutput'], [T.PDEVMODEA, 'pDevModeInput']], [['stdcall']]))('AdvancedDocumentPropertiesA');},
    AdvancedDocumentPropertiesW: function() {return (Fn(T.LONG, [[T.HWND, 'hWnd'], [T.HANDLE, 'hPrinter'], [T.LPWSTR, 'pDeviceName'], [T.PDEVMODEW, 'pDevModeOutput'], [T.PDEVMODEW, 'pDevModeInput']], [['stdcall']]))('AdvancedDocumentPropertiesW');},
    GetPrinterDataA: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPSTR, 'pValueName'], [T.LPDWORD, 'pType'], [T.LPBYTE, 'pData'], [T.DWORD, 'nSize'], [T.LPDWORD, 'pcbNeeded']], [['stdcall']]))('GetPrinterDataA');},
    GetPrinterDataW: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPWSTR, 'pValueName'], [T.LPDWORD, 'pType'], [T.LPBYTE, 'pData'], [T.DWORD, 'nSize'], [T.LPDWORD, 'pcbNeeded']], [['stdcall']]))('GetPrinterDataW');},
    GetPrinterDataExA: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPCSTR, 'pKeyName'], [T.LPCSTR, 'pValueName'], [T.LPDWORD, 'pType'], [T.LPBYTE, 'pData'], [T.DWORD, 'nSize'], [T.LPDWORD, 'pcbNeeded']], [['stdcall']]))('GetPrinterDataExA');},
    GetPrinterDataExW: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPCWSTR, 'pKeyName'], [T.LPCWSTR, 'pValueName'], [T.LPDWORD, 'pType'], [T.LPBYTE, 'pData'], [T.DWORD, 'nSize'], [T.LPDWORD, 'pcbNeeded']], [['stdcall']]))('GetPrinterDataExW');},
    DeletePrinterDataExA: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPCSTR, 'pKeyName'], [T.LPCSTR, 'pValueName']], [['stdcall']]))('DeletePrinterDataExA');},
    DeletePrinterDataExW: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPCWSTR, 'pKeyName'], [T.LPCWSTR, 'pValueName']], [['stdcall']]))('DeletePrinterDataExW');},
    SetPrinterDataA: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPSTR, 'pValueName'], [T.DWORD, 'Type'], [T.LPBYTE, 'pData'], [T.DWORD, 'cbData']], [['stdcall']]))('SetPrinterDataA');},
    SetPrinterDataW: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPWSTR, 'pValueName'], [T.DWORD, 'Type'], [T.LPBYTE, 'pData'], [T.DWORD, 'cbData']], [['stdcall']]))('SetPrinterDataW');},
    SetPrinterDataExA: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPCSTR, 'pKeyName'], [T.LPCSTR, 'pValueName'], [T.DWORD, 'Type'], [T.LPBYTE, 'pData'], [T.DWORD, 'cbData']], [['stdcall']]))('SetPrinterDataExA');},
    SetPrinterDataExW: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPCWSTR, 'pKeyName'], [T.LPCWSTR, 'pValueName'], [T.DWORD, 'Type'], [T.LPBYTE, 'pData'], [T.DWORD, 'cbData']], [['stdcall']]))('SetPrinterDataExW');},
    WaitForPrinterChange: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Flags']], [['stdcall']]))('WaitForPrinterChange');},
    FindFirstPrinterChangeNotification: function() {return (Fn(T.HANDLE, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'fdwFlags'], [T.DWORD, 'fdwOptions'], [T.LPVOID, 'pPrinterNotifyOptions']], [['stdcall']]))('FindFirstPrinterChangeNotification');},
    FindNextPrinterChangeNotification: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hChange'], [T.PDWORD, 'pdwChange'], [T.LPVOID, 'pvReserved'], [Pointer(T.LPVOID), 'ppPrinterNotifyInfo']], [['stdcall']]))('FindNextPrinterChangeNotification');},
    FreePrinterNotifyInfo: function() {return (Fn(T.BOOL, [[T.PPRINTER_NOTIFY_INFO, 'pPrinterNotifyInfo']], [['stdcall']]))('FreePrinterNotifyInfo');},
    FindClosePrinterChangeNotification: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hChange']], [['stdcall']]))('FindClosePrinterChangeNotification');},
    PrinterMessageBoxA: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Error'], [T.HWND, 'hWnd'], [T.LPSTR, 'pText'], [T.LPSTR, 'pCaption'], [T.DWORD, 'dwType']], [['stdcall']]))('PrinterMessageBoxA');},
    PrinterMessageBoxW: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Error'], [T.HWND, 'hWnd'], [T.LPWSTR, 'pText'], [T.LPWSTR, 'pCaption'], [T.DWORD, 'dwType']], [['stdcall']]))('PrinterMessageBoxW');},
    AddFormA: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pForm']], [['stdcall']]))('AddFormA');},
    AddFormW: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pForm']], [['stdcall']]))('AddFormW');},
    DeleteFormA: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPSTR, 'pFormName']], [['stdcall']]))('DeleteFormA');},
    DeleteFormW: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPWSTR, 'pFormName']], [['stdcall']]))('DeleteFormW');},
    GetFormA: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPSTR, 'pFormName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pForm'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']], [['stdcall']]))('GetFormA');},
    GetFormW: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPWSTR, 'pFormName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pForm'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']], [['stdcall']]))('GetFormW');},
    SetFormA: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPSTR, 'pFormName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pForm']], [['stdcall']]))('SetFormA');},
    SetFormW: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPWSTR, 'pFormName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pForm']], [['stdcall']]))('SetFormW');},
    EnumFormsA: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pForm'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcReturned']], [['stdcall']]))('EnumFormsA');},
    EnumFormsW: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pForm'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcReturned']], [['stdcall']]))('EnumFormsW');},
    EnumMonitorsA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pMonitors'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcReturned']], [['stdcall']]))('EnumMonitorsA');},
    EnumMonitorsW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pMonitors'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcReturned']], [['stdcall']]))('EnumMonitorsW');},
    EnumPrinterDataA: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'dwIndex'], [T.LPSTR, 'pValueName'], [T.DWORD, 'cbValueName'], [T.LPDWORD, 'pcbValueName'], [T.LPDWORD, 'pType'], [T.LPBYTE, 'pData'], [T.DWORD, 'cbData'], [T.LPDWORD, 'pcbData']], [['stdcall']]))('EnumPrinterDataA');},
    EnumPrinterDataW: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'dwIndex'], [T.LPWSTR, 'pValueName'], [T.DWORD, 'cbValueName'], [T.LPDWORD, 'pcbValueName'], [T.LPDWORD, 'pType'], [T.LPBYTE, 'pData'], [T.DWORD, 'cbData'], [T.LPDWORD, 'pcbData']], [['stdcall']]))('EnumPrinterDataW');},
    AddMonitorA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pMonitors']], [['stdcall']]))('AddMonitorA');},
    AddMonitorW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pMonitors']], [['stdcall']]))('AddMonitorW');},
    DeleteMonitorA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.LPSTR, 'pMonitorName']], [['stdcall']]))('DeleteMonitorA');},
    DeleteMonitorW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.LPWSTR, 'pMonitorName']], [['stdcall']]))('DeleteMonitorW');},
    EnumPortsA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPorts'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcReturned']], [['stdcall']]))('EnumPortsA');},
    EnumPortsW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPorts'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcReturned']], [['stdcall']]))('EnumPortsW');},
    AddPortA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.HWND, 'hWnd'], [T.LPSTR, 'pMonitorName']], [['stdcall']]))('AddPortA');},
    AddPortW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.HWND, 'hWnd'], [T.LPWSTR, 'pMonitorName']], [['stdcall']]))('AddPortW');},
    AddPortExA: function() {return (Fn(T.BOOL, [[T.LPSTR], [T.DWORD], [T.LPBYTE], [T.LPSTR]], [['stdcall']]))('AddPortExA');},
    AddPortExW: function() {return (Fn(T.BOOL, [[T.LPWSTR], [T.DWORD], [T.LPBYTE], [T.LPWSTR]], [['stdcall']]))('AddPortExW');},
    ConfigurePortA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.HWND, 'hWnd'], [T.LPSTR, 'pPortName']], [['stdcall']]))('ConfigurePortA');},
    ConfigurePortW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.HWND, 'hWnd'], [T.LPWSTR, 'pPortName']], [['stdcall']]))('ConfigurePortW');},
    DeletePortA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.HWND, 'hWnd'], [T.LPSTR, 'pPortName']], [['stdcall']]))('DeletePortA');},
    DeletePortW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.HWND, 'hWnd'], [T.LPWSTR, 'pPortName']], [['stdcall']]))('DeletePortW');},
    SetPortA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pPortName'], [T.DWORD, 'dwLevel'], [T.LPBYTE, 'pPortInfo']], [['stdcall']]))('SetPortA');},
    SetPortW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pPortName'], [T.DWORD, 'dwLevel'], [T.LPBYTE, 'pPortInfo']], [['stdcall']]))('SetPortW');},
    AddPrinterConnectionA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName']], [['stdcall']]))('AddPrinterConnectionA');},
    AddPrinterConnectionW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName']], [['stdcall']]))('AddPrinterConnectionW');},
    DeletePrinterConnectionA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName']], [['stdcall']]))('DeletePrinterConnectionA');},
    DeletePrinterConnectionW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName']], [['stdcall']]))('DeletePrinterConnectionW');},
    ConnectToPrinterDlg: function() {return (Fn(T.HANDLE, [[T.HWND, 'hwnd'], [T.DWORD, 'Flags']], [['stdcall']]))('ConnectToPrinterDlg');},
    AddPrintProvidorA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pProvidorInfo']], [['stdcall']]))('AddPrintProvidorA');},
    AddPrintProvidorW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pProvidorInfo']], [['stdcall']]))('AddPrintProvidorW');},
    DeletePrintProvidorA: function() {return (Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.LPSTR, 'pPrintProvidorName']], [['stdcall']]))('DeletePrintProvidorA');},
    DeletePrintProvidorW: function() {return (Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.LPWSTR, 'pPrintProvidorName']], [['stdcall']]))('DeletePrintProvidorW');},
    EnumPrinterDataExA: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPCSTR, 'pKeyName'], [T.LPBYTE, 'pEnumValues'], [T.DWORD, 'cbEnumValues'], [T.LPDWORD, 'pcbEnumValues'], [T.LPDWORD, 'pnEnumValues']], [['stdcall']]))('EnumPrinterDataExA');},
    EnumPrinterDataExW: function() {return (Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPCWSTR, 'pKeyName'], [T.LPBYTE, 'pEnumValues'], [T.DWORD, 'cbEnumValues'], [T.LPDWORD, 'pcbEnumValues'], [T.LPDWORD, 'pnEnumValues']], [['stdcall']]))('EnumPrinterDataExW');},
    ExtDeviceMode: function() {return (Fn(T.LONG, [[T.HWND, 'hWnd'], [T.HANDLE, 'hInst'], [T.LPDEVMODEA, 'pDevModeOutput'], [T.LPSTR, 'pDeviceName'], [T.LPSTR, 'pPort'], [T.LPDEVMODEA, 'pDevModeInput'], [T.LPSTR, 'pProfile'], [T.DWORD, 'fMode']], [['stdcall']]))('ExtDeviceMode');},
    StartDocDlgA: function() {return (Fn(T.LPSTR, [[T.HANDLE, 'hPrinter'], [Pointer(T.DOCINFOA), 'doc']], [['stdcall']]))('StartDocDlgA');},
    StartDocDlgW: function() {return (Fn(T.LPWSTR, [[T.HANDLE, 'hPrinter'], [Pointer(T.DOCINFOW), 'doc']], [['stdcall']]))('StartDocDlgW');},
    XcvDataW: function() {return (Fn(T.BOOL, [[T.HANDLE, 'hXcv'], [T.LPCWSTR, 'pszDataName'], [T.PBYTE, 'pInputData'], [T.DWORD, 'cbInputData'], [T.PBYTE, 'pOutputData'], [T.DWORD, 'cbOutputData'], [T.PDWORD, 'pcbOutputNeeded'], [T.PDWORD, 'pdwStatus']], [['stdcall']]))('XcvDataW');},
    MIDL_user_allocate: function() {return (Fn(Pointer(null), [[T.SIZE_T]], [['stdcall']]))('MIDL_user_allocate');},
    MIDL_user_free: function() {return (Fn(null, [[Pointer(null)]], [['stdcall']]))('MIDL_user_free');},
    NDRCContextBinding: function() {return (Fn(T.RPC_BINDING_HANDLE, [[T.NDR_CCONTEXT, 'CContext']], [['stdcall']]))('NDRCContextBinding');},
    NDRCContextMarshall: function() {return (Fn(null, [[T.NDR_CCONTEXT, 'CContext'], [Pointer(null), 'pBuff']], [['stdcall']]))('NDRCContextMarshall');},
    NDRCContextUnmarshall: function() {return (Fn(null, [[Pointer(T.NDR_CCONTEXT), 'pCContext'], [T.RPC_BINDING_HANDLE, 'hBinding'], [Pointer(null), 'pBuff'], [T.ULONG, 'DataRepresentation']], [['stdcall']]))('NDRCContextUnmarshall');},
    NDRSContextMarshall: function() {return (Fn(null, [[T.NDR_SCONTEXT, 'CContext'], [Pointer(null), 'pBuff'], [T.NDR_RUNDOWN, 'userRunDownIn']], [['stdcall']]))('NDRSContextMarshall');},
    NDRSContextUnmarshall: function() {return (Fn(T.NDR_SCONTEXT, [[Pointer(null), 'pBuff'], [T.ULONG, 'DataRepresentation']], [['stdcall']]))('NDRSContextUnmarshall');},
    NDRSContextMarshallEx: function() {return (Fn(null, [[T.RPC_BINDING_HANDLE, 'BindingHandle'], [T.NDR_SCONTEXT, 'CContext'], [Pointer(null), 'pBuff'], [T.NDR_RUNDOWN, 'userRunDownIn']], [['stdcall']]))('NDRSContextMarshallEx');},
    NDRSContextMarshall2: function() {return (Fn(null, [[T.RPC_BINDING_HANDLE, 'BindingHandle'], [T.NDR_SCONTEXT, 'CContext'], [Pointer(null), 'pBuff'], [T.NDR_RUNDOWN, 'userRunDownIn'], [Pointer(null), 'CtxGuard'], [T.ULONG, 'Flags']], [['stdcall']]))('NDRSContextMarshall2');},
    NDRSContextUnmarshallEx: function() {return (Fn(T.NDR_SCONTEXT, [[T.RPC_BINDING_HANDLE, 'BindingHandle'], [Pointer(null), 'pBuff'], [T.ULONG, 'DataRepresentation']], [['stdcall']]))('NDRSContextUnmarshallEx');},
    NDRSContextUnmarshall2: function() {return (Fn(T.NDR_SCONTEXT, [[T.RPC_BINDING_HANDLE, 'BindingHandle'], [Pointer(null), 'pBuff'], [T.ULONG, 'DataRepresentation'], [Pointer(null), 'CtxGuard'], [T.ULONG, 'Flags']], [['stdcall']]))('NDRSContextUnmarshall2');},
    NdrClientContextMarshall: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.NDR_CCONTEXT, 'ContextHandle'], [T.i32, 'fCheck']], [['stdcall']]))('NdrClientContextMarshall');},
    NdrClientContextUnmarshall: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.NDR_CCONTEXT), 'pContextHandle'], [T.RPC_BINDING_HANDLE, 'BindHandle']], [['stdcall']]))('NdrClientContextUnmarshall');},
    NdrServerContextMarshall: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.NDR_SCONTEXT, 'ContextHandle'], [T.NDR_RUNDOWN, 'RundownRoutine']], [['stdcall']]))('NdrServerContextMarshall');},
    NdrServerContextUnmarshall: function() {return (Fn(T.NDR_SCONTEXT, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg']], [['stdcall']]))('NdrServerContextUnmarshall');},
    NdrContextHandleSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrContextHandleSize');},
    NdrContextHandleInitialize: function() {return (Fn(T.NDR_SCONTEXT, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrContextHandleInitialize');},
    NdrServerContextNewMarshall: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.NDR_SCONTEXT, 'ContextHandle'], [T.NDR_RUNDOWN, 'RundownRoutine'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrServerContextNewMarshall');},
    NdrServerContextNewUnmarshall: function() {return (Fn(T.NDR_SCONTEXT, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrServerContextNewUnmarshall');},
    RpcSmDestroyClientContext: function() {return (Fn(T.RPC_STATUS, [[Pointer(Pointer(null)), 'ContextHandle']], [['stdcall']]))('RpcSmDestroyClientContext');},
    RpcSsDestroyClientContext: function() {return (Fn(null, [[Pointer(Pointer(null)), 'ContextHandle']], [['stdcall']]))('RpcSsDestroyClientContext');},
    NdrSimpleTypeMarshall: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.u8, 'FormatChar']], [['stdcall']]))('NdrSimpleTypeMarshall');},
    NdrSimpleTypeUnmarshall: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.u8, 'FormatChar']], [['stdcall']]))('NdrSimpleTypeUnmarshall');},
    NdrByteCountPointerMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrByteCountPointerMarshall');},
    NdrByteCountPointerUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrByteCountPointerUnmarshall');},
    NdrByteCountPointerBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrByteCountPointerBufferSize');},
    NdrByteCountPointerFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrByteCountPointerFree');},
    NdrRangeUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrRangeUnmarshall');},
    NdrPointerMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrPointerMarshall');},
    NdrPointerUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrPointerUnmarshall');},
    NdrPointerBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrPointerBufferSize');},
    NdrPointerMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrPointerMemorySize');},
    NdrPointerFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrPointerFree');},
    NdrSimpleStructMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrSimpleStructMarshall');},
    NdrSimpleStructUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrSimpleStructUnmarshall');},
    NdrSimpleStructBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrSimpleStructBufferSize');},
    NdrSimpleStructMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrSimpleStructMemorySize');},
    NdrSimpleStructFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrSimpleStructFree');},
    NdrConformantStructMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantStructMarshall');},
    NdrConformantStructUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrConformantStructUnmarshall');},
    NdrConformantStructBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantStructBufferSize');},
    NdrConformantStructMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantStructMemorySize');},
    NdrConformantStructFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantStructFree');},
    NdrConformantVaryingStructMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantVaryingStructMarshall');},
    NdrConformantVaryingStructUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrConformantVaryingStructUnmarshall');},
    NdrConformantVaryingStructBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantVaryingStructBufferSize');},
    NdrConformantVaryingStructMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantVaryingStructMemorySize');},
    NdrConformantVaryingStructFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantVaryingStructFree');},
    NdrComplexStructMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrComplexStructMarshall');},
    NdrComplexStructUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrComplexStructUnmarshall');},
    NdrComplexStructBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrComplexStructBufferSize');},
    NdrComplexStructMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrComplexStructMemorySize');},
    NdrComplexStructFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrComplexStructFree');},
    NdrFixedArrayMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrFixedArrayMarshall');},
    NdrFixedArrayUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrFixedArrayUnmarshall');},
    NdrFixedArrayBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrFixedArrayBufferSize');},
    NdrFixedArrayMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrFixedArrayMemorySize');},
    NdrFixedArrayFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrFixedArrayFree');},
    NdrConformantArrayMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantArrayMarshall');},
    NdrConformantArrayUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrConformantArrayUnmarshall');},
    NdrConformantArrayBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantArrayBufferSize');},
    NdrConformantArrayMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantArrayMemorySize');},
    NdrConformantArrayFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantArrayFree');},
    NdrConformantVaryingArrayMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantVaryingArrayMarshall');},
    NdrConformantVaryingArrayUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrConformantVaryingArrayUnmarshall');},
    NdrConformantVaryingArrayBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantVaryingArrayBufferSize');},
    NdrConformantVaryingArrayMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantVaryingArrayMemorySize');},
    NdrConformantVaryingArrayFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantVaryingArrayFree');},
    NdrVaryingArrayMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrVaryingArrayMarshall');},
    NdrVaryingArrayUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrVaryingArrayUnmarshall');},
    NdrVaryingArrayBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrVaryingArrayBufferSize');},
    NdrVaryingArrayMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrVaryingArrayMemorySize');},
    NdrVaryingArrayFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrVaryingArrayFree');},
    NdrComplexArrayMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrComplexArrayMarshall');},
    NdrComplexArrayUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrComplexArrayUnmarshall');},
    NdrComplexArrayBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrComplexArrayBufferSize');},
    NdrComplexArrayMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrComplexArrayMemorySize');},
    NdrComplexArrayFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrComplexArrayFree');},
    NdrEncapsulatedUnionMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrEncapsulatedUnionMarshall');},
    NdrEncapsulatedUnionUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrEncapsulatedUnionUnmarshall');},
    NdrEncapsulatedUnionBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrEncapsulatedUnionBufferSize');},
    NdrEncapsulatedUnionMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrEncapsulatedUnionMemorySize');},
    NdrEncapsulatedUnionFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrEncapsulatedUnionFree');},
    NdrNonEncapsulatedUnionMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrNonEncapsulatedUnionMarshall');},
    NdrNonEncapsulatedUnionUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrNonEncapsulatedUnionUnmarshall');},
    NdrNonEncapsulatedUnionBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrNonEncapsulatedUnionBufferSize');},
    NdrNonEncapsulatedUnionMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrNonEncapsulatedUnionMemorySize');},
    NdrNonEncapsulatedUnionFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrNonEncapsulatedUnionFree');},
    NdrXmitOrRepAsMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrXmitOrRepAsMarshall');},
    NdrXmitOrRepAsUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrXmitOrRepAsUnmarshall');},
    NdrXmitOrRepAsBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrXmitOrRepAsBufferSize');},
    NdrXmitOrRepAsMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrXmitOrRepAsMemorySize');},
    NdrXmitOrRepAsFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrXmitOrRepAsFree');},
    NdrUserMarshalMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrUserMarshalMarshall');},
    NdrUserMarshalUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrUserMarshalUnmarshall');},
    NdrUserMarshalBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrUserMarshalBufferSize');},
    NdrUserMarshalMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrUserMarshalMemorySize');},
    NdrUserMarshalFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrUserMarshalFree');},
    NdrInterfacePointerMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrInterfacePointerMarshall');},
    NdrInterfacePointerUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrInterfacePointerUnmarshall');},
    NdrInterfacePointerBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrInterfacePointerBufferSize');},
    NdrInterfacePointerMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrInterfacePointerMemorySize');},
    NdrInterfacePointerFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrInterfacePointerFree');},
    NdrConformantStringMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantStringMarshall');},
    NdrConformantStringUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrConformantStringUnmarshall');},
    NdrConformantStringBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantStringBufferSize');},
    NdrConformantStringMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConformantStringMemorySize');},
    NdrNonConformantStringMarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrNonConformantStringMarshall');},
    NdrNonConformantStringUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']], [['stdcall']]))('NdrNonConformantStringUnmarshall');},
    NdrNonConformantStringBufferSize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrNonConformantStringBufferSize');},
    NdrNonConformantStringMemorySize: function() {return (Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrNonConformantStringMemorySize');},
    NdrCorrelationInitialize: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(null), 'pMemory'], [T.ULONG, 'CacheSize'], [T.ULONG, 'flags']], [['stdcall']]))('NdrCorrelationInitialize');},
    NdrCorrelationPass: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg']], [['stdcall']]))('NdrCorrelationPass');},
    NdrCorrelationFree: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg']], [['stdcall']]))('NdrCorrelationFree');},
    NdrConvert2: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat'], [T.LONG, 'NumberParams']], [['stdcall']]))('NdrConvert2');},
    NdrConvert: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrConvert');},
    NdrUserMarshalSimpleTypeConvert: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG), 'pFlags'], [Pointer(T.u8), 'pBuffer'], [T.u8, 'FormatChar']], [['stdcall']]))('NdrUserMarshalSimpleTypeConvert');},
    NdrClientCall2: function() {return (Fn(T.LONG_PTR, [[T.PMIDL_STUB_DESC, 'pStubDescriptor'], [T.PFORMAT_STRING, 'pFormat'], '...'], [['cdecl']]))('NdrClientCall2');},
    NdrClientCall: function() {return (Fn(T.LONG_PTR, [[T.PMIDL_STUB_DESC, 'pStubDescriptor'], [T.PFORMAT_STRING, 'pFormat'], '...'], [['cdecl']]))('NdrClientCall');},
    NdrAsyncClientCall: function() {return (Fn(T.LONG_PTR, [[T.PMIDL_STUB_DESC, 'pStubDescriptor'], [T.PFORMAT_STRING, 'pFormat'], '...'], [['cdecl']]))('NdrAsyncClientCall');},
    NdrDcomAsyncClientCall: function() {return (Fn(T.LONG_PTR, [[T.PMIDL_STUB_DESC, 'pStubDescriptor'], [T.PFORMAT_STRING, 'pFormat'], '...'], [['cdecl']]))('NdrDcomAsyncClientCall');},
    NdrServerCall2: function() {return (Fn(null, [[T.PRPC_MESSAGE, 'pRpcMsg']], [['stdcall']]))('NdrServerCall2');},
    NdrServerCall: function() {return (Fn(null, [[T.PRPC_MESSAGE, 'pRpcMsg']], [['stdcall']]))('NdrServerCall');},
    NdrAsyncServerCall: function() {return (Fn(null, [[T.PRPC_MESSAGE, 'pRpcMsg']], [['stdcall']]))('NdrAsyncServerCall');},
    NdrStubCall2: function() {return (Fn(T.LONG, [[Pointer(Struct('IRpcStubBuffer', null)), 'pThis'], [Pointer(Struct('IRpcChannelBuffer', null)), 'pChannel'], [T.PRPC_MESSAGE, 'pRpcMsg'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('NdrStubCall2');},
    NdrStubCall: function() {return (Fn(T.LONG, [[Pointer(Struct('IRpcStubBuffer', null)), 'pThis'], [Pointer(Struct('IRpcChannelBuffer', null)), 'pChannel'], [T.PRPC_MESSAGE, 'pRpcMsg'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('NdrStubCall');},
    NdrAsyncStubCall: function() {return (Fn(T.LONG, [[Pointer(Struct('IRpcStubBuffer', null)), 'pThis'], [Pointer(Struct('IRpcChannelBuffer', null)), 'pChannel'], [T.PRPC_MESSAGE, 'pRpcMsg'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('NdrAsyncStubCall');},
    NdrDcomAsyncStubCall: function() {return (Fn(T.LONG, [[Pointer(Struct('IRpcStubBuffer', null)), 'pThis'], [Pointer(Struct('IRpcChannelBuffer', null)), 'pChannel'], [T.PRPC_MESSAGE, 'pRpcMsg'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('NdrDcomAsyncStubCall');},
    NdrAllocate: function() {return (Fn(Pointer(null), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.SIZE_T, 'Len']], [['stdcall']]))('NdrAllocate');},
    NdrClearOutParameters: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat'], [Pointer(null), 'ArgAddr']], [['stdcall']]))('NdrClearOutParameters');},
    NdrMapCommAndFaultStatus: function() {return (Fn(T.RPC_STATUS, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.ULONG), 'pCommStatus'], [Pointer(T.ULONG), 'pFaultStatus'], [T.RPC_STATUS, 'Status_']], [['stdcall']]))('NdrMapCommAndFaultStatus');},
    NdrOleAllocate: function() {return (Fn(Pointer(null), [[T.SIZE_T, 'Size']], [['stdcall']]))('NdrOleAllocate');},
    NdrOleFree: function() {return (Fn(null, [[Pointer(null), 'NodeToFree']], [['stdcall']]))('NdrOleFree');},
    NdrClientInitialize: function() {return (Fn(null, [[T.PRPC_MESSAGE, 'pRpcMessage'], [T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PMIDL_STUB_DESC, 'pStubDesc'], [T.u32, 'ProcNum']], [['stdcall']]))('NdrClientInitialize');},
    NdrClientInitializeNew: function() {return (Fn(null, [[T.PRPC_MESSAGE, 'pRpcMessage'], [T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PMIDL_STUB_DESC, 'pStubDesc'], [T.u32, 'ProcNum']], [['stdcall']]))('NdrClientInitializeNew');},
    NdrServerInitialize: function() {return (Fn(Pointer(T.u8), [[T.PRPC_MESSAGE, 'pRpcMsg'], [T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PMIDL_STUB_DESC, 'pStubDesc']], [['stdcall']]))('NdrServerInitialize');},
    NdrServerInitializeNew: function() {return (Fn(Pointer(T.u8), [[T.PRPC_MESSAGE, 'pRpcMsg'], [T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PMIDL_STUB_DESC, 'pStubDesc']], [['stdcall']]))('NdrServerInitializeNew');},
    NdrServerInitializeUnmarshall: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PMIDL_STUB_DESC, 'pStubDesc'], [T.PRPC_MESSAGE, 'pRpcMsg']], [['stdcall']]))('NdrServerInitializeUnmarshall');},
    NdrServerInitializeMarshall: function() {return (Fn(null, [[T.PRPC_MESSAGE, 'pRpcMsg'], [T.PMIDL_STUB_MESSAGE, 'pStubMsg']], [['stdcall']]))('NdrServerInitializeMarshall');},
    NdrServerMarshall: function() {return (Fn(null, [[Pointer(Struct('IRpcStubBuffer', null)), 'pThis'], [Pointer(Struct('IRpcChannelBuffer', null)), 'pChannel'], [T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']], [['stdcall']]))('NdrServerMarshall');},
    NdrServerUnmarshall: function() {return (Fn(null, [[Pointer(Struct('IRpcChannelBuffer', null)), 'pChannel'], [T.PRPC_MESSAGE, 'pRpcMsg'], [T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PMIDL_STUB_DESC, 'pStubDesc'], [T.PFORMAT_STRING, 'pFormat'], [Pointer(null), 'pParamList']], [['stdcall']]))('NdrServerUnmarshall');},
    NdrGetBuffer: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'stubmsg'], [T.ULONG, 'buflen'], [T.RPC_BINDING_HANDLE, 'handle']], [['stdcall']]))('NdrGetBuffer');},
    NdrFreeBuffer: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg']], [['stdcall']]))('NdrFreeBuffer');},
    NdrSendReceive: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'stubmsg'], [Pointer(T.u8), 'buffer']], [['stdcall']]))('NdrSendReceive');},
    NdrNsGetBuffer: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.ULONG, 'BufferLength'], [T.RPC_BINDING_HANDLE, 'Handle']], [['stdcall']]))('NdrNsGetBuffer');},
    NdrNsSendReceive: function() {return (Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pBufferEnd'], [Pointer(T.RPC_BINDING_HANDLE), 'pAutoHandle']], [['stdcall']]))('NdrNsSendReceive');},
    NdrGetDcomProtocolVersion: function() {return (Fn(T.RPC_STATUS, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.RPC_VERSION), 'pVersion']], [['stdcall']]))('NdrGetDcomProtocolVersion');},
    NdrFullPointerXlatInit: function() {return (Fn(T.PFULL_PTR_XLAT_TABLES, [[T.ULONG, 'NumberOfPointers'], [T.XLAT_SIDE, 'XlatSide']], [['stdcall']]))('NdrFullPointerXlatInit');},
    NdrFullPointerXlatFree: function() {return (Fn(null, [[T.PFULL_PTR_XLAT_TABLES, 'pXlatTables']], [['stdcall']]))('NdrFullPointerXlatFree');},
    NdrFullPointerQueryPointer: function() {return (Fn(T.i32, [[T.PFULL_PTR_XLAT_TABLES, 'pXlatTables'], [Pointer(null), 'pPointer'], [T.u8, 'QueryType'], [Pointer(T.ULONG), 'pRefId']], [['stdcall']]))('NdrFullPointerQueryPointer');},
    NdrFullPointerQueryRefId: function() {return (Fn(T.i32, [[T.PFULL_PTR_XLAT_TABLES, 'pXlatTables'], [T.ULONG, 'RefId'], [T.u8, 'QueryType'], [Pointer(Pointer(null)), 'ppPointer']], [['stdcall']]))('NdrFullPointerQueryRefId');},
    NdrFullPointerInsertRefId: function() {return (Fn(null, [[T.PFULL_PTR_XLAT_TABLES, 'pXlatTables'], [T.ULONG, 'RefId'], [Pointer(null), 'pPointer']], [['stdcall']]))('NdrFullPointerInsertRefId');},
    NdrFullPointerFree: function() {return (Fn(T.i32, [[T.PFULL_PTR_XLAT_TABLES, 'pXlatTables'], [Pointer(null), 'Pointer']], [['stdcall']]))('NdrFullPointerFree');},
    NdrRpcSsEnableAllocate: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pMessage']], [['stdcall']]))('NdrRpcSsEnableAllocate');},
    NdrRpcSsDisableAllocate: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pMessage']], [['stdcall']]))('NdrRpcSsDisableAllocate');},
    NdrRpcSmSetClientToOsf: function() {return (Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pMessage']], [['stdcall']]))('NdrRpcSmSetClientToOsf');},
    NdrRpcSmClientAllocate: function() {return (Fn(Pointer(null), [[T.SIZE_T, 'Size']], [['stdcall']]))('NdrRpcSmClientAllocate');},
    NdrRpcSmClientFree: function() {return (Fn(null, [[Pointer(null), 'NodeToFree']], [['stdcall']]))('NdrRpcSmClientFree');},
    NdrRpcSsDefaultAllocate: function() {return (Fn(Pointer(null), [[T.SIZE_T, 'Size']], [['stdcall']]))('NdrRpcSsDefaultAllocate');},
    NdrRpcSsDefaultFree: function() {return (Fn(null, [[Pointer(null), 'NodeToFree']], [['stdcall']]))('NdrRpcSsDefaultFree');},
    NdrGetUserMarshalInfo: function() {return (Fn(T.RPC_STATUS, [[Pointer(T.ULONG), 'pFlags'], [T.ULONG, 'InformationLevel'], [Pointer(T.NDR_USER_MARSHAL_INFO), 'pMarshalInfo']], [['stdcall']]))('NdrGetUserMarshalInfo');},
    IWinTypes_v0_1_c_ifspec: function() {return (T.RPC_IF_HANDLE)('IWinTypes_v0_1_c_ifspec');},
    IWinTypes_v0_1_s_ifspec: function() {return (T.RPC_IF_HANDLE)('IWinTypes_v0_1_s_ifspec');},
    IID_IUnknown: function() {return (T.GUID)('IID_IUnknown');},
    IUnknown_QueryInterface_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUnknown), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']], [['stdcall']]))('IUnknown_QueryInterface_Proxy');},
    IUnknown_QueryInterface_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUnknown_QueryInterface_Stub');},
    IUnknown_AddRef_Proxy: function() {return (Fn(T.ULONG, [[Pointer(T.IUnknown), 'This']], [['stdcall']]))('IUnknown_AddRef_Proxy');},
    IUnknown_AddRef_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUnknown_AddRef_Stub');},
    IUnknown_Release_Proxy: function() {return (Fn(T.ULONG, [[Pointer(T.IUnknown), 'This']], [['stdcall']]))('IUnknown_Release_Proxy');},
    IUnknown_Release_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUnknown_Release_Stub');},
    IID_IClassFactory: function() {return (T.GUID)('IID_IClassFactory');},
    IClassFactory_RemoteCreateInstance_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObject']], [['stdcall']]))('IClassFactory_RemoteCreateInstance_Proxy');},
    IClassFactory_RemoteCreateInstance_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IClassFactory_RemoteCreateInstance_Stub');},
    IClassFactory_RemoteLockServer_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [T.BOOL, 'fLock']], [['stdcall']]))('IClassFactory_RemoteLockServer_Proxy');},
    IClassFactory_RemoteLockServer_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IClassFactory_RemoteLockServer_Stub');},
    IClassFactory_CreateInstance_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']], [['stdcall']]))('IClassFactory_CreateInstance_Proxy');},
    IClassFactory_CreateInstance_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObject']], [['stdcall']]))('IClassFactory_CreateInstance_Stub');},
    IClassFactory_LockServer_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [T.BOOL, 'fLock']], [['stdcall']]))('IClassFactory_LockServer_Proxy');},
    IClassFactory_LockServer_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [T.BOOL, 'fLock']], [['stdcall']]))('IClassFactory_LockServer_Stub');},
    IID_IMarshal: function() {return (T.GUID)('IID_IMarshal');},
    IMarshal_GetUnmarshalClass_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags'], [Pointer(T.CLSID), 'pCid']], [['stdcall']]))('IMarshal_GetUnmarshalClass_Proxy');},
    IMarshal_GetUnmarshalClass_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMarshal_GetUnmarshalClass_Stub');},
    IMarshal_GetMarshalSizeMax_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags'], [Pointer(T.DWORD), 'pSize']], [['stdcall']]))('IMarshal_GetMarshalSizeMax_Proxy');},
    IMarshal_GetMarshalSizeMax_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMarshal_GetMarshalSizeMax_Stub');},
    IMarshal_MarshalInterface_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IStream), 'pStm'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags']], [['stdcall']]))('IMarshal_MarshalInterface_Proxy');},
    IMarshal_MarshalInterface_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMarshal_MarshalInterface_Stub');},
    IMarshal_UnmarshalInterface_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IStream), 'pStm'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']], [['stdcall']]))('IMarshal_UnmarshalInterface_Proxy');},
    IMarshal_UnmarshalInterface_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMarshal_UnmarshalInterface_Stub');},
    IMarshal_ReleaseMarshalData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IStream), 'pStm']], [['stdcall']]))('IMarshal_ReleaseMarshalData_Proxy');},
    IMarshal_ReleaseMarshalData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMarshal_ReleaseMarshalData_Stub');},
    IMarshal_DisconnectObject_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [T.DWORD, 'dwReserved']], [['stdcall']]))('IMarshal_DisconnectObject_Proxy');},
    IMarshal_DisconnectObject_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMarshal_DisconnectObject_Stub');},
    IID_IMarshal2: function() {return (T.GUID)('IID_IMarshal2');},
    IID_IStdMarshalInfo: function() {return (T.GUID)('IID_IStdMarshalInfo');},
    IStdMarshalInfo_GetClassForHandler_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStdMarshalInfo), 'This'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [Pointer(T.CLSID), 'pClsid']], [['stdcall']]))('IStdMarshalInfo_GetClassForHandler_Proxy');},
    IStdMarshalInfo_GetClassForHandler_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStdMarshalInfo_GetClassForHandler_Stub');},
    IID_IExternalConnection: function() {return (T.GUID)('IID_IExternalConnection');},
    IExternalConnection_AddConnection_Proxy: function() {return (Fn(T.DWORD, [[Pointer(T.IExternalConnection), 'This'], [T.DWORD, 'extconn'], [T.DWORD, 'reserved']], [['stdcall']]))('IExternalConnection_AddConnection_Proxy');},
    IExternalConnection_AddConnection_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IExternalConnection_AddConnection_Stub');},
    IExternalConnection_ReleaseConnection_Proxy: function() {return (Fn(T.DWORD, [[Pointer(T.IExternalConnection), 'This'], [T.DWORD, 'extconn'], [T.DWORD, 'reserved'], [T.BOOL, 'fLastReleaseCloses']], [['stdcall']]))('IExternalConnection_ReleaseConnection_Proxy');},
    IExternalConnection_ReleaseConnection_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IExternalConnection_ReleaseConnection_Stub');},
    IID_IMultiQI: function() {return (T.GUID)('IID_IMultiQI');},
    IMultiQI_QueryMultipleInterfaces_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMultiQI), 'This'], [T.ULONG, 'cMQIs'], [Pointer(T.MULTI_QI), 'pMQIs']], [['stdcall']]))('IMultiQI_QueryMultipleInterfaces_Proxy');},
    IMultiQI_QueryMultipleInterfaces_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMultiQI_QueryMultipleInterfaces_Stub');},
    IID_IMalloc: function() {return (T.GUID)('IID_IMalloc');},
    IMalloc_Alloc_Proxy: function() {return (Fn(T.LPVOID, [[Pointer(T.IMalloc), 'This'], [T.ULONG, 'cb']], [['stdcall']]))('IMalloc_Alloc_Proxy');},
    IMalloc_Alloc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMalloc_Alloc_Stub');},
    IMalloc_Realloc_Proxy: function() {return (Fn(T.LPVOID, [[Pointer(T.IMalloc), 'This'], [T.LPVOID, 'pv'], [T.ULONG, 'cb']], [['stdcall']]))('IMalloc_Realloc_Proxy');},
    IMalloc_Realloc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMalloc_Realloc_Stub');},
    IMalloc_Free_Proxy: function() {return (Fn(null, [[Pointer(T.IMalloc), 'This'], [T.LPVOID, 'pv']], [['stdcall']]))('IMalloc_Free_Proxy');},
    IMalloc_Free_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMalloc_Free_Stub');},
    IMalloc_GetSize_Proxy: function() {return (Fn(T.ULONG, [[Pointer(T.IMalloc), 'This'], [T.LPVOID, 'pv']], [['stdcall']]))('IMalloc_GetSize_Proxy');},
    IMalloc_GetSize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMalloc_GetSize_Stub');},
    IMalloc_DidAlloc_Proxy: function() {return (Fn(T.i32, [[Pointer(T.IMalloc), 'This'], [T.LPVOID, 'pv']], [['stdcall']]))('IMalloc_DidAlloc_Proxy');},
    IMalloc_DidAlloc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMalloc_DidAlloc_Stub');},
    IMalloc_HeapMinimize_Proxy: function() {return (Fn(null, [[Pointer(T.IMalloc), 'This']], [['stdcall']]))('IMalloc_HeapMinimize_Proxy');},
    IMalloc_HeapMinimize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMalloc_HeapMinimize_Stub');},
    IID_IMallocSpy: function() {return (T.GUID)('IID_IMallocSpy');},
    IMallocSpy_PreAlloc_Proxy: function() {return (Fn(T.ULONG, [[Pointer(T.IMallocSpy), 'This'], [T.ULONG, 'cbRequest']], [['stdcall']]))('IMallocSpy_PreAlloc_Proxy');},
    IMallocSpy_PreAlloc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMallocSpy_PreAlloc_Stub');},
    IMallocSpy_PostAlloc_Proxy: function() {return (Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pActual']], [['stdcall']]))('IMallocSpy_PostAlloc_Proxy');},
    IMallocSpy_PostAlloc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMallocSpy_PostAlloc_Stub');},
    IMallocSpy_PreFree_Proxy: function() {return (Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.BOOL, 'fSpyed']], [['stdcall']]))('IMallocSpy_PreFree_Proxy');},
    IMallocSpy_PreFree_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMallocSpy_PreFree_Stub');},
    IMallocSpy_PostFree_Proxy: function() {return (Fn(null, [[Pointer(T.IMallocSpy), 'This'], [T.BOOL, 'fSpyed']], [['stdcall']]))('IMallocSpy_PostFree_Proxy');},
    IMallocSpy_PostFree_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMallocSpy_PostFree_Stub');},
    IMallocSpy_PreRealloc_Proxy: function() {return (Fn(T.ULONG, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.ULONG, 'cbRequest'], [Pointer(T.LPVOID), 'ppNewRequest'], [T.BOOL, 'fSpyed']], [['stdcall']]))('IMallocSpy_PreRealloc_Proxy');},
    IMallocSpy_PreRealloc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMallocSpy_PreRealloc_Stub');},
    IMallocSpy_PostRealloc_Proxy: function() {return (Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pActual'], [T.BOOL, 'fSpyed']], [['stdcall']]))('IMallocSpy_PostRealloc_Proxy');},
    IMallocSpy_PostRealloc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMallocSpy_PostRealloc_Stub');},
    IMallocSpy_PreGetSize_Proxy: function() {return (Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.BOOL, 'fSpyed']], [['stdcall']]))('IMallocSpy_PreGetSize_Proxy');},
    IMallocSpy_PreGetSize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMallocSpy_PreGetSize_Stub');},
    IMallocSpy_PostGetSize_Proxy: function() {return (Fn(T.ULONG, [[Pointer(T.IMallocSpy), 'This'], [T.ULONG, 'cbActual'], [T.BOOL, 'fSpyed']], [['stdcall']]))('IMallocSpy_PostGetSize_Proxy');},
    IMallocSpy_PostGetSize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMallocSpy_PostGetSize_Stub');},
    IMallocSpy_PreDidAlloc_Proxy: function() {return (Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.BOOL, 'fSpyed']], [['stdcall']]))('IMallocSpy_PreDidAlloc_Proxy');},
    IMallocSpy_PreDidAlloc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMallocSpy_PreDidAlloc_Stub');},
    IMallocSpy_PostDidAlloc_Proxy: function() {return (Fn(T.i32, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.BOOL, 'fSpyed'], [T.i32, 'fActual']], [['stdcall']]))('IMallocSpy_PostDidAlloc_Proxy');},
    IMallocSpy_PostDidAlloc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMallocSpy_PostDidAlloc_Stub');},
    IMallocSpy_PreHeapMinimize_Proxy: function() {return (Fn(null, [[Pointer(T.IMallocSpy), 'This']], [['stdcall']]))('IMallocSpy_PreHeapMinimize_Proxy');},
    IMallocSpy_PreHeapMinimize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMallocSpy_PreHeapMinimize_Stub');},
    IMallocSpy_PostHeapMinimize_Proxy: function() {return (Fn(null, [[Pointer(T.IMallocSpy), 'This']], [['stdcall']]))('IMallocSpy_PostHeapMinimize_Proxy');},
    IMallocSpy_PostHeapMinimize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMallocSpy_PostHeapMinimize_Stub');},
    IID_IInternalUnknown: function() {return (T.GUID)('IID_IInternalUnknown');},
    IInternalUnknown_QueryInternalInterface_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternalUnknown), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']], [['stdcall']]))('IInternalUnknown_QueryInternalInterface_Proxy');},
    IInternalUnknown_QueryInternalInterface_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternalUnknown_QueryInternalInterface_Stub');},
    IID_IEnumUnknown: function() {return (T.GUID)('IID_IEnumUnknown');},
    IEnumUnknown_RemoteNext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [T.ULONG, 'celt'], [Pointer(Pointer(T.IUnknown)), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumUnknown_RemoteNext_Proxy');},
    IEnumUnknown_RemoteNext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumUnknown_RemoteNext_Stub');},
    IEnumUnknown_Skip_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [T.ULONG, 'celt']], [['stdcall']]))('IEnumUnknown_Skip_Proxy');},
    IEnumUnknown_Skip_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumUnknown_Skip_Stub');},
    IEnumUnknown_Reset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This']], [['stdcall']]))('IEnumUnknown_Reset_Proxy');},
    IEnumUnknown_Reset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumUnknown_Reset_Stub');},
    IEnumUnknown_Clone_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [Pointer(Pointer(T.IEnumUnknown)), 'ppenum']], [['stdcall']]))('IEnumUnknown_Clone_Proxy');},
    IEnumUnknown_Clone_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumUnknown_Clone_Stub');},
    IEnumUnknown_Next_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [T.ULONG, 'celt'], [Pointer(Pointer(T.IUnknown)), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumUnknown_Next_Proxy');},
    IEnumUnknown_Next_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [T.ULONG, 'celt'], [Pointer(Pointer(T.IUnknown)), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumUnknown_Next_Stub');},
    IID_ISurrogate: function() {return (T.GUID)('IID_ISurrogate');},
    ISurrogate_LoadDllServer_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISurrogate), 'This'], [Pointer(T.CLSID), 'Clsid']], [['stdcall']]))('ISurrogate_LoadDllServer_Proxy');},
    ISurrogate_LoadDllServer_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISurrogate_LoadDllServer_Stub');},
    ISurrogate_FreeSurrogate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISurrogate), 'This']], [['stdcall']]))('ISurrogate_FreeSurrogate_Proxy');},
    ISurrogate_FreeSurrogate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISurrogate_FreeSurrogate_Stub');},
    IID_IGlobalInterfaceTable: function() {return (T.GUID)('IID_IGlobalInterfaceTable');},
    IGlobalInterfaceTable_RegisterInterfaceInGlobal_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IGlobalInterfaceTable), 'This'], [Pointer(T.IUnknown), 'pUnk'], [Pointer(T.IID), 'riid'], [Pointer(T.DWORD), 'pdwCookie']], [['stdcall']]))('IGlobalInterfaceTable_RegisterInterfaceInGlobal_Proxy');},
    IGlobalInterfaceTable_RegisterInterfaceInGlobal_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IGlobalInterfaceTable_RegisterInterfaceInGlobal_Stub');},
    IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IGlobalInterfaceTable), 'This'], [T.DWORD, 'dwCookie']], [['stdcall']]))('IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Proxy');},
    IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Stub');},
    IGlobalInterfaceTable_GetInterfaceFromGlobal_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IGlobalInterfaceTable), 'This'], [T.DWORD, 'dwCookie'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']], [['stdcall']]))('IGlobalInterfaceTable_GetInterfaceFromGlobal_Proxy');},
    IGlobalInterfaceTable_GetInterfaceFromGlobal_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IGlobalInterfaceTable_GetInterfaceFromGlobal_Stub');},
    IID_IBindCtx: function() {return (T.GUID)('IID_IBindCtx');},
    IBindCtx_RegisterObjectBound_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.IUnknown), 'punk']], [['stdcall']]))('IBindCtx_RegisterObjectBound_Proxy');},
    IBindCtx_RegisterObjectBound_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindCtx_RegisterObjectBound_Stub');},
    IBindCtx_RevokeObjectBound_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.IUnknown), 'punk']], [['stdcall']]))('IBindCtx_RevokeObjectBound_Proxy');},
    IBindCtx_RevokeObjectBound_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindCtx_RevokeObjectBound_Stub');},
    IBindCtx_ReleaseBoundObjects_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This']], [['stdcall']]))('IBindCtx_ReleaseBoundObjects_Proxy');},
    IBindCtx_ReleaseBoundObjects_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindCtx_ReleaseBoundObjects_Stub');},
    IBindCtx_RemoteSetBindOptions_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.BIND_OPTS2), 'pbindopts']], [['stdcall']]))('IBindCtx_RemoteSetBindOptions_Proxy');},
    IBindCtx_RemoteSetBindOptions_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindCtx_RemoteSetBindOptions_Stub');},
    IBindCtx_RemoteGetBindOptions_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.BIND_OPTS2), 'pbindopts']], [['stdcall']]))('IBindCtx_RemoteGetBindOptions_Proxy');},
    IBindCtx_RemoteGetBindOptions_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindCtx_RemoteGetBindOptions_Stub');},
    IBindCtx_GetRunningObjectTable_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(Pointer(T.IRunningObjectTable)), 'pprot']], [['stdcall']]))('IBindCtx_GetRunningObjectTable_Proxy');},
    IBindCtx_GetRunningObjectTable_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindCtx_GetRunningObjectTable_Stub');},
    IBindCtx_RegisterObjectParam_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [T.LPOLESTR, 'pszKey'], [Pointer(T.IUnknown), 'punk']], [['stdcall']]))('IBindCtx_RegisterObjectParam_Proxy');},
    IBindCtx_RegisterObjectParam_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindCtx_RegisterObjectParam_Stub');},
    IBindCtx_GetObjectParam_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [T.LPOLESTR, 'pszKey'], [Pointer(Pointer(T.IUnknown)), 'ppunk']], [['stdcall']]))('IBindCtx_GetObjectParam_Proxy');},
    IBindCtx_GetObjectParam_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindCtx_GetObjectParam_Stub');},
    IBindCtx_EnumObjectParam_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(Pointer(T.IEnumString)), 'ppenum']], [['stdcall']]))('IBindCtx_EnumObjectParam_Proxy');},
    IBindCtx_EnumObjectParam_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindCtx_EnumObjectParam_Stub');},
    IBindCtx_RevokeObjectParam_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [T.LPOLESTR, 'pszKey']], [['stdcall']]))('IBindCtx_RevokeObjectParam_Proxy');},
    IBindCtx_RevokeObjectParam_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindCtx_RevokeObjectParam_Stub');},
    IBindCtx_SetBindOptions_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.BIND_OPTS), 'pbindopts']], [['stdcall']]))('IBindCtx_SetBindOptions_Proxy');},
    IBindCtx_SetBindOptions_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.BIND_OPTS2), 'pbindopts']], [['stdcall']]))('IBindCtx_SetBindOptions_Stub');},
    IBindCtx_GetBindOptions_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.BIND_OPTS), 'pbindopts']], [['stdcall']]))('IBindCtx_GetBindOptions_Proxy');},
    IBindCtx_GetBindOptions_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.BIND_OPTS2), 'pbindopts']], [['stdcall']]))('IBindCtx_GetBindOptions_Stub');},
    IID_IEnumMoniker: function() {return (T.GUID)('IID_IEnumMoniker');},
    IEnumMoniker_RemoteNext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [T.ULONG, 'celt'], [Pointer(Pointer(T.IMoniker)), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumMoniker_RemoteNext_Proxy');},
    IEnumMoniker_RemoteNext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumMoniker_RemoteNext_Stub');},
    IEnumMoniker_Skip_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [T.ULONG, 'celt']], [['stdcall']]))('IEnumMoniker_Skip_Proxy');},
    IEnumMoniker_Skip_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumMoniker_Skip_Stub');},
    IEnumMoniker_Reset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This']], [['stdcall']]))('IEnumMoniker_Reset_Proxy');},
    IEnumMoniker_Reset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumMoniker_Reset_Stub');},
    IEnumMoniker_Clone_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [Pointer(Pointer(T.IEnumMoniker)), 'ppenum']], [['stdcall']]))('IEnumMoniker_Clone_Proxy');},
    IEnumMoniker_Clone_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumMoniker_Clone_Stub');},
    IEnumMoniker_Next_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [T.ULONG, 'celt'], [Pointer(Pointer(T.IMoniker)), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumMoniker_Next_Proxy');},
    IEnumMoniker_Next_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [T.ULONG, 'celt'], [Pointer(Pointer(T.IMoniker)), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumMoniker_Next_Stub');},
    IID_IRunnableObject: function() {return (T.GUID)('IID_IRunnableObject');},
    IRunnableObject_GetRunningClass_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [T.LPCLSID, 'lpClsid']], [['stdcall']]))('IRunnableObject_GetRunningClass_Proxy');},
    IRunnableObject_GetRunningClass_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRunnableObject_GetRunningClass_Stub');},
    IRunnableObject_Run_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [T.LPBINDCTX, 'pbc']], [['stdcall']]))('IRunnableObject_Run_Proxy');},
    IRunnableObject_Run_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRunnableObject_Run_Stub');},
    IRunnableObject_RemoteIsRunning_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This']], [['stdcall']]))('IRunnableObject_RemoteIsRunning_Proxy');},
    IRunnableObject_RemoteIsRunning_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRunnableObject_RemoteIsRunning_Stub');},
    IRunnableObject_LockRunning_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [T.BOOL, 'fLock'], [T.BOOL, 'fLastUnlockCloses']], [['stdcall']]))('IRunnableObject_LockRunning_Proxy');},
    IRunnableObject_LockRunning_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRunnableObject_LockRunning_Stub');},
    IRunnableObject_SetContainedObject_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [T.BOOL, 'fContained']], [['stdcall']]))('IRunnableObject_SetContainedObject_Proxy');},
    IRunnableObject_SetContainedObject_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRunnableObject_SetContainedObject_Stub');},
    IRunnableObject_IsRunning_Proxy: function() {return (Fn(T.BOOL, [[Pointer(T.IRunnableObject), 'This']], [['stdcall']]))('IRunnableObject_IsRunning_Proxy');},
    IRunnableObject_IsRunning_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This']], [['stdcall']]))('IRunnableObject_IsRunning_Stub');},
    IID_IRunningObjectTable: function() {return (T.GUID)('IID_IRunningObjectTable');},
    IRunningObjectTable_Register_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [T.DWORD, 'grfFlags'], [Pointer(T.IUnknown), 'punkObject'], [Pointer(T.IMoniker), 'pmkObjectName'], [Pointer(T.DWORD), 'pdwRegister']], [['stdcall']]))('IRunningObjectTable_Register_Proxy');},
    IRunningObjectTable_Register_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRunningObjectTable_Register_Stub');},
    IRunningObjectTable_Revoke_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [T.DWORD, 'dwRegister']], [['stdcall']]))('IRunningObjectTable_Revoke_Proxy');},
    IRunningObjectTable_Revoke_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRunningObjectTable_Revoke_Stub');},
    IRunningObjectTable_IsRunning_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(T.IMoniker), 'pmkObjectName']], [['stdcall']]))('IRunningObjectTable_IsRunning_Proxy');},
    IRunningObjectTable_IsRunning_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRunningObjectTable_IsRunning_Stub');},
    IRunningObjectTable_GetObject_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(T.IMoniker), 'pmkObjectName'], [Pointer(Pointer(T.IUnknown)), 'ppunkObject']], [['stdcall']]))('IRunningObjectTable_GetObject_Proxy');},
    IRunningObjectTable_GetObject_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRunningObjectTable_GetObject_Stub');},
    IRunningObjectTable_NoteChangeTime_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [T.DWORD, 'dwRegister'], [Pointer(T.FILETIME), 'pfiletime']], [['stdcall']]))('IRunningObjectTable_NoteChangeTime_Proxy');},
    IRunningObjectTable_NoteChangeTime_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRunningObjectTable_NoteChangeTime_Stub');},
    IRunningObjectTable_GetTimeOfLastChange_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(T.IMoniker), 'pmkObjectName'], [Pointer(T.FILETIME), 'pfiletime']], [['stdcall']]))('IRunningObjectTable_GetTimeOfLastChange_Proxy');},
    IRunningObjectTable_GetTimeOfLastChange_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRunningObjectTable_GetTimeOfLastChange_Stub');},
    IRunningObjectTable_EnumRunning_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(Pointer(T.IEnumMoniker)), 'ppenumMoniker']], [['stdcall']]))('IRunningObjectTable_EnumRunning_Proxy');},
    IRunningObjectTable_EnumRunning_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRunningObjectTable_EnumRunning_Stub');},
    IID_IPersist: function() {return (T.GUID)('IID_IPersist');},
    IPersist_GetClassID_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersist), 'This'], [Pointer(T.CLSID), 'pClassID']], [['stdcall']]))('IPersist_GetClassID_Proxy');},
    IPersist_GetClassID_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersist_GetClassID_Stub');},
    IID_IPersistStream: function() {return (T.GUID)('IID_IPersistStream');},
    IPersistStream_IsDirty_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This']], [['stdcall']]))('IPersistStream_IsDirty_Proxy');},
    IPersistStream_IsDirty_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistStream_IsDirty_Stub');},
    IPersistStream_Load_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This'], [Pointer(T.IStream), 'pStm']], [['stdcall']]))('IPersistStream_Load_Proxy');},
    IPersistStream_Load_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistStream_Load_Stub');},
    IPersistStream_Save_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This'], [Pointer(T.IStream), 'pStm'], [T.BOOL, 'fClearDirty']], [['stdcall']]))('IPersistStream_Save_Proxy');},
    IPersistStream_Save_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistStream_Save_Stub');},
    IPersistStream_GetSizeMax_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This'], [Pointer(T.ULARGE_INTEGER), 'pcbSize']], [['stdcall']]))('IPersistStream_GetSizeMax_Proxy');},
    IPersistStream_GetSizeMax_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistStream_GetSizeMax_Stub');},
    IID_IMoniker: function() {return (T.GUID)('IID_IMoniker');},
    IMoniker_RemoteBindToObject_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IID), 'riidResult'], [Pointer(Pointer(T.IUnknown)), 'ppvResult']], [['stdcall']]))('IMoniker_RemoteBindToObject_Proxy');},
    IMoniker_RemoteBindToObject_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMoniker_RemoteBindToObject_Stub');},
    IMoniker_RemoteBindToStorage_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObj']], [['stdcall']]))('IMoniker_RemoteBindToStorage_Proxy');},
    IMoniker_RemoteBindToStorage_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMoniker_RemoteBindToStorage_Stub');},
    IMoniker_Reduce_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [T.DWORD, 'dwReduceHowFar'], [Pointer(Pointer(T.IMoniker)), 'ppmkToLeft'], [Pointer(Pointer(T.IMoniker)), 'ppmkReduced']], [['stdcall']]))('IMoniker_Reduce_Proxy');},
    IMoniker_Reduce_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMoniker_Reduce_Stub');},
    IMoniker_ComposeWith_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IMoniker), 'pmkRight'], [T.BOOL, 'fOnlyIfNotGeneric'], [Pointer(Pointer(T.IMoniker)), 'ppmkComposite']], [['stdcall']]))('IMoniker_ComposeWith_Proxy');},
    IMoniker_ComposeWith_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMoniker_ComposeWith_Stub');},
    IMoniker_Enum_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [T.BOOL, 'fForward'], [Pointer(Pointer(T.IEnumMoniker)), 'ppenumMoniker']], [['stdcall']]))('IMoniker_Enum_Proxy');},
    IMoniker_Enum_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMoniker_Enum_Stub');},
    IMoniker_IsEqual_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IMoniker), 'pmkOtherMoniker']], [['stdcall']]))('IMoniker_IsEqual_Proxy');},
    IMoniker_IsEqual_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMoniker_IsEqual_Stub');},
    IMoniker_Hash_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.DWORD), 'pdwHash']], [['stdcall']]))('IMoniker_Hash_Proxy');},
    IMoniker_Hash_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMoniker_Hash_Stub');},
    IMoniker_IsRunning_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IMoniker), 'pmkNewlyRunning']], [['stdcall']]))('IMoniker_IsRunning_Proxy');},
    IMoniker_IsRunning_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMoniker_IsRunning_Stub');},
    IMoniker_GetTimeOfLastChange_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.FILETIME), 'pFileTime']], [['stdcall']]))('IMoniker_GetTimeOfLastChange_Proxy');},
    IMoniker_GetTimeOfLastChange_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMoniker_GetTimeOfLastChange_Stub');},
    IMoniker_Inverse_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(Pointer(T.IMoniker)), 'ppmk']], [['stdcall']]))('IMoniker_Inverse_Proxy');},
    IMoniker_Inverse_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMoniker_Inverse_Stub');},
    IMoniker_CommonPrefixWith_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IMoniker), 'pmkOther'], [Pointer(Pointer(T.IMoniker)), 'ppmkPrefix']], [['stdcall']]))('IMoniker_CommonPrefixWith_Proxy');},
    IMoniker_CommonPrefixWith_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMoniker_CommonPrefixWith_Stub');},
    IMoniker_RelativePathTo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IMoniker), 'pmkOther'], [Pointer(Pointer(T.IMoniker)), 'ppmkRelPath']], [['stdcall']]))('IMoniker_RelativePathTo_Proxy');},
    IMoniker_RelativePathTo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMoniker_RelativePathTo_Stub');},
    IMoniker_GetDisplayName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.LPOLESTR), 'ppszDisplayName']], [['stdcall']]))('IMoniker_GetDisplayName_Proxy');},
    IMoniker_GetDisplayName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMoniker_GetDisplayName_Stub');},
    IMoniker_ParseDisplayName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [T.LPOLESTR, 'pszDisplayName'], [Pointer(T.ULONG), 'pchEaten'], [Pointer(Pointer(T.IMoniker)), 'ppmkOut']], [['stdcall']]))('IMoniker_ParseDisplayName_Proxy');},
    IMoniker_ParseDisplayName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMoniker_ParseDisplayName_Stub');},
    IMoniker_IsSystemMoniker_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.DWORD), 'pdwMksys']], [['stdcall']]))('IMoniker_IsSystemMoniker_Proxy');},
    IMoniker_IsSystemMoniker_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMoniker_IsSystemMoniker_Stub');},
    IMoniker_BindToObject_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IID), 'riidResult'], [Pointer(Pointer(null)), 'ppvResult']], [['stdcall']]))('IMoniker_BindToObject_Proxy');},
    IMoniker_BindToObject_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IID), 'riidResult'], [Pointer(Pointer(T.IUnknown)), 'ppvResult']], [['stdcall']]))('IMoniker_BindToObject_Stub');},
    IMoniker_BindToStorage_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObj']], [['stdcall']]))('IMoniker_BindToStorage_Proxy');},
    IMoniker_BindToStorage_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObj']], [['stdcall']]))('IMoniker_BindToStorage_Stub');},
    IID_IROTData: function() {return (T.GUID)('IID_IROTData');},
    IROTData_GetComparisonData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IROTData), 'This'], [Pointer(T.byte), 'pbData'], [T.ULONG, 'cbMax'], [Pointer(T.ULONG), 'pcbData']], [['stdcall']]))('IROTData_GetComparisonData_Proxy');},
    IROTData_GetComparisonData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IROTData_GetComparisonData_Stub');},
    IID_IEnumString: function() {return (T.GUID)('IID_IEnumString');},
    IEnumString_RemoteNext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [T.ULONG, 'celt'], [Pointer(T.LPOLESTR), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumString_RemoteNext_Proxy');},
    IEnumString_RemoteNext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumString_RemoteNext_Stub');},
    IEnumString_Skip_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [T.ULONG, 'celt']], [['stdcall']]))('IEnumString_Skip_Proxy');},
    IEnumString_Skip_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumString_Skip_Stub');},
    IEnumString_Reset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This']], [['stdcall']]))('IEnumString_Reset_Proxy');},
    IEnumString_Reset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumString_Reset_Stub');},
    IEnumString_Clone_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [Pointer(Pointer(T.IEnumString)), 'ppenum']], [['stdcall']]))('IEnumString_Clone_Proxy');},
    IEnumString_Clone_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumString_Clone_Stub');},
    IEnumString_Next_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [T.ULONG, 'celt'], [Pointer(T.LPOLESTR), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumString_Next_Proxy');},
    IEnumString_Next_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [T.ULONG, 'celt'], [Pointer(T.LPOLESTR), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumString_Next_Stub');},
    IID_IClassActivator: function() {return (T.GUID)('IID_IClassActivator');},
    IClassActivator_GetClassObject_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IClassActivator), 'This'], [Pointer(T.CLSID), 'rclsid'], [T.DWORD, 'dwClassContext'], [T.LCID, 'locale'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']], [['stdcall']]))('IClassActivator_GetClassObject_Proxy');},
    IClassActivator_GetClassObject_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IClassActivator_GetClassObject_Stub');},
    IID_ISequentialStream: function() {return (T.GUID)('IID_ISequentialStream');},
    ISequentialStream_RemoteRead_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']], [['stdcall']]))('ISequentialStream_RemoteRead_Proxy');},
    ISequentialStream_RemoteRead_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISequentialStream_RemoteRead_Stub');},
    ISequentialStream_RemoteWrite_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']], [['stdcall']]))('ISequentialStream_RemoteWrite_Proxy');},
    ISequentialStream_RemoteWrite_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISequentialStream_RemoteWrite_Stub');},
    ISequentialStream_Read_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']], [['stdcall']]))('ISequentialStream_Read_Proxy');},
    ISequentialStream_Read_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']], [['stdcall']]))('ISequentialStream_Read_Stub');},
    ISequentialStream_Write_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']], [['stdcall']]))('ISequentialStream_Write_Proxy');},
    ISequentialStream_Write_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']], [['stdcall']]))('ISequentialStream_Write_Stub');},
    IID_IStream: function() {return (T.GUID)('IID_IStream');},
    IStream_RemoteSeek_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.LARGE_INTEGER, 'dlibMove'], [T.DWORD, 'dwOrigin'], [Pointer(T.ULARGE_INTEGER), 'plibNewPosition']], [['stdcall']]))('IStream_RemoteSeek_Proxy');},
    IStream_RemoteSeek_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStream_RemoteSeek_Stub');},
    IStream_SetSize_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.ULARGE_INTEGER, 'libNewSize']], [['stdcall']]))('IStream_SetSize_Proxy');},
    IStream_SetSize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStream_SetSize_Stub');},
    IStream_RemoteCopyTo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(T.IStream), 'pstm'], [T.ULARGE_INTEGER, 'cb'], [Pointer(T.ULARGE_INTEGER), 'pcbRead'], [Pointer(T.ULARGE_INTEGER), 'pcbWritten']], [['stdcall']]))('IStream_RemoteCopyTo_Proxy');},
    IStream_RemoteCopyTo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStream_RemoteCopyTo_Stub');},
    IStream_Commit_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.DWORD, 'grfCommitFlags']], [['stdcall']]))('IStream_Commit_Proxy');},
    IStream_Commit_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStream_Commit_Stub');},
    IStream_Revert_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStream), 'This']], [['stdcall']]))('IStream_Revert_Proxy');},
    IStream_Revert_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStream_Revert_Stub');},
    IStream_LockRegion_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.ULARGE_INTEGER, 'libOffset'], [T.ULARGE_INTEGER, 'cb'], [T.DWORD, 'dwLockType']], [['stdcall']]))('IStream_LockRegion_Proxy');},
    IStream_LockRegion_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStream_LockRegion_Stub');},
    IStream_UnlockRegion_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.ULARGE_INTEGER, 'libOffset'], [T.ULARGE_INTEGER, 'cb'], [T.DWORD, 'dwLockType']], [['stdcall']]))('IStream_UnlockRegion_Proxy');},
    IStream_UnlockRegion_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStream_UnlockRegion_Stub');},
    IStream_Stat_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(T.STATSTG), 'pstatstg'], [T.DWORD, 'grfStatFlag']], [['stdcall']]))('IStream_Stat_Proxy');},
    IStream_Stat_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStream_Stat_Stub');},
    IStream_Clone_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(Pointer(T.IStream)), 'ppstm']], [['stdcall']]))('IStream_Clone_Proxy');},
    IStream_Clone_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStream_Clone_Stub');},
    IStream_Seek_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.LARGE_INTEGER, 'dlibMove'], [T.DWORD, 'dwOrigin'], [Pointer(T.ULARGE_INTEGER), 'plibNewPosition']], [['stdcall']]))('IStream_Seek_Proxy');},
    IStream_Seek_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.LARGE_INTEGER, 'dlibMove'], [T.DWORD, 'dwOrigin'], [Pointer(T.ULARGE_INTEGER), 'plibNewPosition']], [['stdcall']]))('IStream_Seek_Stub');},
    IStream_CopyTo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(T.IStream), 'pstm'], [T.ULARGE_INTEGER, 'cb'], [Pointer(T.ULARGE_INTEGER), 'pcbRead'], [Pointer(T.ULARGE_INTEGER), 'pcbWritten']], [['stdcall']]))('IStream_CopyTo_Proxy');},
    IStream_CopyTo_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(T.IStream), 'pstm'], [T.ULARGE_INTEGER, 'cb'], [Pointer(T.ULARGE_INTEGER), 'pcbRead'], [Pointer(T.ULARGE_INTEGER), 'pcbWritten']], [['stdcall']]))('IStream_CopyTo_Stub');},
    IID_IEnumSTATSTG: function() {return (T.GUID)('IID_IEnumSTATSTG');},
    IEnumSTATSTG_RemoteNext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumSTATSTG_RemoteNext_Proxy');},
    IEnumSTATSTG_RemoteNext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumSTATSTG_RemoteNext_Stub');},
    IEnumSTATSTG_Skip_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [T.ULONG, 'celt']], [['stdcall']]))('IEnumSTATSTG_Skip_Proxy');},
    IEnumSTATSTG_Skip_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumSTATSTG_Skip_Stub');},
    IEnumSTATSTG_Reset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This']], [['stdcall']]))('IEnumSTATSTG_Reset_Proxy');},
    IEnumSTATSTG_Reset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumSTATSTG_Reset_Stub');},
    IEnumSTATSTG_Clone_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [Pointer(Pointer(T.IEnumSTATSTG)), 'ppenum']], [['stdcall']]))('IEnumSTATSTG_Clone_Proxy');},
    IEnumSTATSTG_Clone_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumSTATSTG_Clone_Stub');},
    IEnumSTATSTG_Next_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumSTATSTG_Next_Proxy');},
    IEnumSTATSTG_Next_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumSTATSTG_Next_Stub');},
    IID_IStorage: function() {return (T.GUID)('IID_IStorage');},
    IStorage_CreateStream_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'reserved1'], [T.DWORD, 'reserved2'], [Pointer(Pointer(T.IStream)), 'ppstm']], [['stdcall']]))('IStorage_CreateStream_Proxy');},
    IStorage_CreateStream_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStorage_CreateStream_Stub');},
    IStorage_RemoteOpenStream_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [T.ULONG, 'cbReserved1'], [Pointer(T.byte), 'reserved1'], [T.DWORD, 'grfMode'], [T.DWORD, 'reserved2'], [Pointer(Pointer(T.IStream)), 'ppstm']], [['stdcall']]))('IStorage_RemoteOpenStream_Proxy');},
    IStorage_RemoteOpenStream_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStorage_RemoteOpenStream_Stub');},
    IStorage_CreateStorage_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'dwStgFmt'], [T.DWORD, 'reserved2'], [Pointer(Pointer(T.IStorage)), 'ppstg']], [['stdcall']]))('IStorage_CreateStorage_Proxy');},
    IStorage_CreateStorage_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStorage_CreateStorage_Stub');},
    IStorage_OpenStorage_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [Pointer(T.IStorage), 'pstgPriority'], [T.DWORD, 'grfMode'], [T.SNB, 'snbExclude'], [T.DWORD, 'reserved'], [Pointer(Pointer(T.IStorage)), 'ppstg']], [['stdcall']]))('IStorage_OpenStorage_Proxy');},
    IStorage_OpenStorage_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStorage_OpenStorage_Stub');},
    IStorage_CopyTo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'ciidExclude'], [Pointer(T.IID), 'rgiidExclude'], [T.SNB, 'snbExclude'], [Pointer(T.IStorage), 'pstgDest']], [['stdcall']]))('IStorage_CopyTo_Proxy');},
    IStorage_CopyTo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStorage_CopyTo_Stub');},
    IStorage_MoveElementTo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [Pointer(T.IStorage), 'pstgDest'], [T.LPCOLESTR, 'pwcsNewName'], [T.DWORD, 'grfFlags']], [['stdcall']]))('IStorage_MoveElementTo_Proxy');},
    IStorage_MoveElementTo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStorage_MoveElementTo_Stub');},
    IStorage_Commit_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'grfCommitFlags']], [['stdcall']]))('IStorage_Commit_Proxy');},
    IStorage_Commit_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStorage_Commit_Stub');},
    IStorage_Revert_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This']], [['stdcall']]))('IStorage_Revert_Proxy');},
    IStorage_Revert_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStorage_Revert_Stub');},
    IStorage_RemoteEnumElements_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'reserved1'], [T.ULONG, 'cbReserved2'], [Pointer(T.byte), 'reserved2'], [T.DWORD, 'reserved3'], [Pointer(Pointer(T.IEnumSTATSTG)), 'ppenum']], [['stdcall']]))('IStorage_RemoteEnumElements_Proxy');},
    IStorage_RemoteEnumElements_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStorage_RemoteEnumElements_Stub');},
    IStorage_DestroyElement_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName']], [['stdcall']]))('IStorage_DestroyElement_Proxy');},
    IStorage_DestroyElement_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStorage_DestroyElement_Stub');},
    IStorage_RenameElement_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsOldName'], [T.LPCOLESTR, 'pwcsNewName']], [['stdcall']]))('IStorage_RenameElement_Proxy');},
    IStorage_RenameElement_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStorage_RenameElement_Stub');},
    IStorage_SetElementTimes_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [Pointer(T.FILETIME), 'pctime'], [Pointer(T.FILETIME), 'patime'], [Pointer(T.FILETIME), 'pmtime']], [['stdcall']]))('IStorage_SetElementTimes_Proxy');},
    IStorage_SetElementTimes_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStorage_SetElementTimes_Stub');},
    IStorage_SetClass_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [Pointer(T.CLSID), 'clsid']], [['stdcall']]))('IStorage_SetClass_Proxy');},
    IStorage_SetClass_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStorage_SetClass_Stub');},
    IStorage_SetStateBits_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'grfStateBits'], [T.DWORD, 'grfMask']], [['stdcall']]))('IStorage_SetStateBits_Proxy');},
    IStorage_SetStateBits_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStorage_SetStateBits_Stub');},
    IStorage_Stat_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [Pointer(T.STATSTG), 'pstatstg'], [T.DWORD, 'grfStatFlag']], [['stdcall']]))('IStorage_Stat_Proxy');},
    IStorage_Stat_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IStorage_Stat_Stub');},
    IStorage_OpenStream_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [Pointer(null), 'reserved1'], [T.DWORD, 'grfMode'], [T.DWORD, 'reserved2'], [Pointer(Pointer(T.IStream)), 'ppstm']], [['stdcall']]))('IStorage_OpenStream_Proxy');},
    IStorage_OpenStream_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [T.ULONG, 'cbReserved1'], [Pointer(T.byte), 'reserved1'], [T.DWORD, 'grfMode'], [T.DWORD, 'reserved2'], [Pointer(Pointer(T.IStream)), 'ppstm']], [['stdcall']]))('IStorage_OpenStream_Stub');},
    IStorage_EnumElements_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'reserved1'], [Pointer(null), 'reserved2'], [T.DWORD, 'reserved3'], [Pointer(Pointer(T.IEnumSTATSTG)), 'ppenum']], [['stdcall']]))('IStorage_EnumElements_Proxy');},
    IStorage_EnumElements_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'reserved1'], [T.ULONG, 'cbReserved2'], [Pointer(T.byte), 'reserved2'], [T.DWORD, 'reserved3'], [Pointer(Pointer(T.IEnumSTATSTG)), 'ppenum']], [['stdcall']]))('IStorage_EnumElements_Stub');},
    IID_IPersistFile: function() {return (T.GUID)('IID_IPersistFile');},
    IPersistFile_IsDirty_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This']], [['stdcall']]))('IPersistFile_IsDirty_Proxy');},
    IPersistFile_IsDirty_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistFile_IsDirty_Stub');},
    IPersistFile_Load_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [T.LPCOLESTR, 'pszFileName'], [T.DWORD, 'dwMode']], [['stdcall']]))('IPersistFile_Load_Proxy');},
    IPersistFile_Load_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistFile_Load_Stub');},
    IPersistFile_Save_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [T.LPCOLESTR, 'pszFileName'], [T.BOOL, 'fRemember']], [['stdcall']]))('IPersistFile_Save_Proxy');},
    IPersistFile_Save_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistFile_Save_Stub');},
    IPersistFile_SaveCompleted_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [T.LPCOLESTR, 'pszFileName']], [['stdcall']]))('IPersistFile_SaveCompleted_Proxy');},
    IPersistFile_SaveCompleted_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistFile_SaveCompleted_Stub');},
    IPersistFile_GetCurFile_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [Pointer(T.LPOLESTR), 'ppszFileName']], [['stdcall']]))('IPersistFile_GetCurFile_Proxy');},
    IPersistFile_GetCurFile_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistFile_GetCurFile_Stub');},
    IID_IPersistStorage: function() {return (T.GUID)('IID_IPersistStorage');},
    IPersistStorage_IsDirty_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This']], [['stdcall']]))('IPersistStorage_IsDirty_Proxy');},
    IPersistStorage_IsDirty_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistStorage_IsDirty_Stub');},
    IPersistStorage_InitNew_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IStorage), 'pStg']], [['stdcall']]))('IPersistStorage_InitNew_Proxy');},
    IPersistStorage_InitNew_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistStorage_InitNew_Stub');},
    IPersistStorage_Load_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IStorage), 'pStg']], [['stdcall']]))('IPersistStorage_Load_Proxy');},
    IPersistStorage_Load_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistStorage_Load_Stub');},
    IPersistStorage_Save_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IStorage), 'pStgSave'], [T.BOOL, 'fSameAsLoad']], [['stdcall']]))('IPersistStorage_Save_Proxy');},
    IPersistStorage_Save_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistStorage_Save_Stub');},
    IPersistStorage_SaveCompleted_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IStorage), 'pStgNew']], [['stdcall']]))('IPersistStorage_SaveCompleted_Proxy');},
    IPersistStorage_SaveCompleted_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistStorage_SaveCompleted_Stub');},
    IPersistStorage_HandsOffStorage_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This']], [['stdcall']]))('IPersistStorage_HandsOffStorage_Proxy');},
    IPersistStorage_HandsOffStorage_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistStorage_HandsOffStorage_Stub');},
    IID_IRootStorage: function() {return (T.GUID)('IID_IRootStorage');},
    IRootStorage_SwitchToFile_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRootStorage), 'This'], [T.LPOLESTR, 'pszFile']], [['stdcall']]))('IRootStorage_SwitchToFile_Proxy');},
    IRootStorage_SwitchToFile_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRootStorage_SwitchToFile_Stub');},
    IID_ILockBytes: function() {return (T.GUID)('IID_ILockBytes');},
    ILockBytes_RemoteReadAt_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']], [['stdcall']]))('ILockBytes_RemoteReadAt_Proxy');},
    ILockBytes_RemoteReadAt_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ILockBytes_RemoteReadAt_Stub');},
    ILockBytes_RemoteWriteAt_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']], [['stdcall']]))('ILockBytes_RemoteWriteAt_Proxy');},
    ILockBytes_RemoteWriteAt_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ILockBytes_RemoteWriteAt_Stub');},
    ILockBytes_Flush_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This']], [['stdcall']]))('ILockBytes_Flush_Proxy');},
    ILockBytes_Flush_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ILockBytes_Flush_Stub');},
    ILockBytes_SetSize_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'cb']], [['stdcall']]))('ILockBytes_SetSize_Proxy');},
    ILockBytes_SetSize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ILockBytes_SetSize_Stub');},
    ILockBytes_LockRegion_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'libOffset'], [T.ULARGE_INTEGER, 'cb'], [T.DWORD, 'dwLockType']], [['stdcall']]))('ILockBytes_LockRegion_Proxy');},
    ILockBytes_LockRegion_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ILockBytes_LockRegion_Stub');},
    ILockBytes_UnlockRegion_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'libOffset'], [T.ULARGE_INTEGER, 'cb'], [T.DWORD, 'dwLockType']], [['stdcall']]))('ILockBytes_UnlockRegion_Proxy');},
    ILockBytes_UnlockRegion_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ILockBytes_UnlockRegion_Stub');},
    ILockBytes_Stat_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [Pointer(T.STATSTG), 'pstatstg'], [T.DWORD, 'grfStatFlag']], [['stdcall']]))('ILockBytes_Stat_Proxy');},
    ILockBytes_Stat_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ILockBytes_Stat_Stub');},
    ILockBytes_ReadAt_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']], [['stdcall']]))('ILockBytes_ReadAt_Proxy');},
    ILockBytes_ReadAt_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']], [['stdcall']]))('ILockBytes_ReadAt_Stub');},
    ILockBytes_WriteAt_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']], [['stdcall']]))('ILockBytes_WriteAt_Proxy');},
    ILockBytes_WriteAt_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']], [['stdcall']]))('ILockBytes_WriteAt_Stub');},
    IID_IFillLockBytes: function() {return (T.GUID)('IID_IFillLockBytes');},
    IFillLockBytes_RemoteFillAppend_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']], [['stdcall']]))('IFillLockBytes_RemoteFillAppend_Proxy');},
    IFillLockBytes_RemoteFillAppend_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IFillLockBytes_RemoteFillAppend_Stub');},
    IFillLockBytes_RemoteFillAt_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']], [['stdcall']]))('IFillLockBytes_RemoteFillAt_Proxy');},
    IFillLockBytes_RemoteFillAt_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IFillLockBytes_RemoteFillAt_Stub');},
    IFillLockBytes_SetFillSize_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [T.ULARGE_INTEGER, 'ulSize']], [['stdcall']]))('IFillLockBytes_SetFillSize_Proxy');},
    IFillLockBytes_SetFillSize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IFillLockBytes_SetFillSize_Stub');},
    IFillLockBytes_Terminate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [T.BOOL, 'bCanceled']], [['stdcall']]))('IFillLockBytes_Terminate_Proxy');},
    IFillLockBytes_Terminate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IFillLockBytes_Terminate_Stub');},
    IFillLockBytes_FillAppend_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']], [['stdcall']]))('IFillLockBytes_FillAppend_Proxy');},
    IFillLockBytes_FillAppend_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']], [['stdcall']]))('IFillLockBytes_FillAppend_Stub');},
    IFillLockBytes_FillAt_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']], [['stdcall']]))('IFillLockBytes_FillAt_Proxy');},
    IFillLockBytes_FillAt_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']], [['stdcall']]))('IFillLockBytes_FillAt_Stub');},
    IID_IProgressNotify: function() {return (T.GUID)('IID_IProgressNotify');},
    IProgressNotify_OnProgress_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IProgressNotify), 'This'], [T.DWORD, 'dwProgressCurrent'], [T.DWORD, 'dwProgressMaximum'], [T.BOOL, 'fAccurate'], [T.BOOL, 'fOwner']], [['stdcall']]))('IProgressNotify_OnProgress_Proxy');},
    IProgressNotify_OnProgress_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IProgressNotify_OnProgress_Stub');},
    IID_ILayoutStorage: function() {return (T.GUID)('IID_ILayoutStorage');},
    ILayoutStorage_LayoutScript_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This'], [Pointer(T.StorageLayout), 'pStorageLayout'], [T.DWORD, 'nEntries'], [T.DWORD, 'glfInterleavedFlag']], [['stdcall']]))('ILayoutStorage_LayoutScript_Proxy');},
    ILayoutStorage_LayoutScript_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ILayoutStorage_LayoutScript_Stub');},
    ILayoutStorage_BeginMonitor_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This']], [['stdcall']]))('ILayoutStorage_BeginMonitor_Proxy');},
    ILayoutStorage_BeginMonitor_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ILayoutStorage_BeginMonitor_Stub');},
    ILayoutStorage_EndMonitor_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This']], [['stdcall']]))('ILayoutStorage_EndMonitor_Proxy');},
    ILayoutStorage_EndMonitor_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ILayoutStorage_EndMonitor_Stub');},
    ILayoutStorage_ReLayoutDocfile_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This'], [Pointer(T.OLECHAR), 'pwcsNewDfName']], [['stdcall']]))('ILayoutStorage_ReLayoutDocfile_Proxy');},
    ILayoutStorage_ReLayoutDocfile_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ILayoutStorage_ReLayoutDocfile_Stub');},
    ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This'], [Pointer(T.ILockBytes), 'pILockBytes']], [['stdcall']]))('ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy');},
    ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub');},
    IID_IBlockingLock: function() {return (T.GUID)('IID_IBlockingLock');},
    IBlockingLock_Lock_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBlockingLock), 'This'], [T.DWORD, 'dwTimeout']], [['stdcall']]))('IBlockingLock_Lock_Proxy');},
    IBlockingLock_Lock_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBlockingLock_Lock_Stub');},
    IBlockingLock_Unlock_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBlockingLock), 'This']], [['stdcall']]))('IBlockingLock_Unlock_Proxy');},
    IBlockingLock_Unlock_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBlockingLock_Unlock_Stub');},
    IID_ITimeAndNoticeControl: function() {return (T.GUID)('IID_ITimeAndNoticeControl');},
    ITimeAndNoticeControl_SuppressChanges_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITimeAndNoticeControl), 'This'], [T.DWORD, 'res1'], [T.DWORD, 'res2']], [['stdcall']]))('ITimeAndNoticeControl_SuppressChanges_Proxy');},
    ITimeAndNoticeControl_SuppressChanges_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITimeAndNoticeControl_SuppressChanges_Stub');},
    IID_IOplockStorage: function() {return (T.GUID)('IID_IOplockStorage');},
    IOplockStorage_CreateStorageEx_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOplockStorage), 'This'], [T.LPCWSTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'stgfmt'], [T.DWORD, 'grfAttrs'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppstgOpen']], [['stdcall']]))('IOplockStorage_CreateStorageEx_Proxy');},
    IOplockStorage_CreateStorageEx_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOplockStorage_CreateStorageEx_Stub');},
    IOplockStorage_OpenStorageEx_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOplockStorage), 'This'], [T.LPCWSTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'stgfmt'], [T.DWORD, 'grfAttrs'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppstgOpen']], [['stdcall']]))('IOplockStorage_OpenStorageEx_Proxy');},
    IOplockStorage_OpenStorageEx_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOplockStorage_OpenStorageEx_Stub');},
    IID_IEnumFORMATETC: function() {return (T.GUID)('IID_IEnumFORMATETC');},
    IEnumFORMATETC_RemoteNext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [T.ULONG, 'celt'], [Pointer(T.FORMATETC), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumFORMATETC_RemoteNext_Proxy');},
    IEnumFORMATETC_RemoteNext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumFORMATETC_RemoteNext_Stub');},
    IEnumFORMATETC_Skip_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [T.ULONG, 'celt']], [['stdcall']]))('IEnumFORMATETC_Skip_Proxy');},
    IEnumFORMATETC_Skip_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumFORMATETC_Skip_Stub');},
    IEnumFORMATETC_Reset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This']], [['stdcall']]))('IEnumFORMATETC_Reset_Proxy');},
    IEnumFORMATETC_Reset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumFORMATETC_Reset_Stub');},
    IEnumFORMATETC_Clone_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [Pointer(Pointer(T.IEnumFORMATETC)), 'ppenum']], [['stdcall']]))('IEnumFORMATETC_Clone_Proxy');},
    IEnumFORMATETC_Clone_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumFORMATETC_Clone_Stub');},
    IEnumFORMATETC_Next_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [T.ULONG, 'celt'], [Pointer(T.FORMATETC), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumFORMATETC_Next_Proxy');},
    IEnumFORMATETC_Next_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [T.ULONG, 'celt'], [Pointer(T.FORMATETC), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumFORMATETC_Next_Stub');},
    IID_IEnumSTATDATA: function() {return (T.GUID)('IID_IEnumSTATDATA');},
    IEnumSTATDATA_RemoteNext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATDATA), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumSTATDATA_RemoteNext_Proxy');},
    IEnumSTATDATA_RemoteNext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumSTATDATA_RemoteNext_Stub');},
    IEnumSTATDATA_Skip_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [T.ULONG, 'celt']], [['stdcall']]))('IEnumSTATDATA_Skip_Proxy');},
    IEnumSTATDATA_Skip_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumSTATDATA_Skip_Stub');},
    IEnumSTATDATA_Reset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This']], [['stdcall']]))('IEnumSTATDATA_Reset_Proxy');},
    IEnumSTATDATA_Reset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumSTATDATA_Reset_Stub');},
    IEnumSTATDATA_Clone_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenum']], [['stdcall']]))('IEnumSTATDATA_Clone_Proxy');},
    IEnumSTATDATA_Clone_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumSTATDATA_Clone_Stub');},
    IEnumSTATDATA_Next_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATDATA), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumSTATDATA_Next_Proxy');},
    IEnumSTATDATA_Next_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATDATA), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumSTATDATA_Next_Stub');},
    IID_IAdviseSink: function() {return (T.GUID)('IID_IAdviseSink');},
    IAdviseSink_RemoteOnDataChange_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.FORMATETC), 'pFormatetc'], [Pointer(T.ASYNC_STGMEDIUM), 'pStgmed']], [['stdcall']]))('IAdviseSink_RemoteOnDataChange_Proxy');},
    IAdviseSink_RemoteOnDataChange_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAdviseSink_RemoteOnDataChange_Stub');},
    IAdviseSink_RemoteOnViewChange_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This'], [T.DWORD, 'dwAspect'], [T.LONG, 'lindex']], [['stdcall']]))('IAdviseSink_RemoteOnViewChange_Proxy');},
    IAdviseSink_RemoteOnViewChange_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAdviseSink_RemoteOnViewChange_Stub');},
    IAdviseSink_RemoteOnRename_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.IMoniker), 'pmk']], [['stdcall']]))('IAdviseSink_RemoteOnRename_Proxy');},
    IAdviseSink_RemoteOnRename_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAdviseSink_RemoteOnRename_Stub');},
    IAdviseSink_RemoteOnSave_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This']], [['stdcall']]))('IAdviseSink_RemoteOnSave_Proxy');},
    IAdviseSink_RemoteOnSave_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAdviseSink_RemoteOnSave_Stub');},
    IAdviseSink_RemoteOnClose_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This']], [['stdcall']]))('IAdviseSink_RemoteOnClose_Proxy');},
    IAdviseSink_RemoteOnClose_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAdviseSink_RemoteOnClose_Stub');},
    IAdviseSink_OnDataChange_Proxy: function() {return (Fn(null, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.FORMATETC), 'pFormatetc'], [Pointer(T.STGMEDIUM), 'pStgmed']], [['stdcall']]))('IAdviseSink_OnDataChange_Proxy');},
    IAdviseSink_OnDataChange_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.FORMATETC), 'pFormatetc'], [Pointer(T.ASYNC_STGMEDIUM), 'pStgmed']], [['stdcall']]))('IAdviseSink_OnDataChange_Stub');},
    IAdviseSink_OnViewChange_Proxy: function() {return (Fn(null, [[Pointer(T.IAdviseSink), 'This'], [T.DWORD, 'dwAspect'], [T.LONG, 'lindex']], [['stdcall']]))('IAdviseSink_OnViewChange_Proxy');},
    IAdviseSink_OnViewChange_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This'], [T.DWORD, 'dwAspect'], [T.LONG, 'lindex']], [['stdcall']]))('IAdviseSink_OnViewChange_Stub');},
    IAdviseSink_OnRename_Proxy: function() {return (Fn(null, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.IMoniker), 'pmk']], [['stdcall']]))('IAdviseSink_OnRename_Proxy');},
    IAdviseSink_OnRename_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.IMoniker), 'pmk']], [['stdcall']]))('IAdviseSink_OnRename_Stub');},
    IAdviseSink_OnSave_Proxy: function() {return (Fn(null, [[Pointer(T.IAdviseSink), 'This']], [['stdcall']]))('IAdviseSink_OnSave_Proxy');},
    IAdviseSink_OnSave_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This']], [['stdcall']]))('IAdviseSink_OnSave_Stub');},
    IAdviseSink_OnClose_Proxy: function() {return (Fn(null, [[Pointer(T.IAdviseSink), 'This']], [['stdcall']]))('IAdviseSink_OnClose_Proxy');},
    IAdviseSink_OnClose_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This']], [['stdcall']]))('IAdviseSink_OnClose_Stub');},
    IID_IAdviseSink2: function() {return (T.GUID)('IID_IAdviseSink2');},
    IAdviseSink2_RemoteOnLinkSrcChange_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAdviseSink2), 'This'], [Pointer(T.IMoniker), 'pmk']], [['stdcall']]))('IAdviseSink2_RemoteOnLinkSrcChange_Proxy');},
    IAdviseSink2_RemoteOnLinkSrcChange_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAdviseSink2_RemoteOnLinkSrcChange_Stub');},
    IAdviseSink2_OnLinkSrcChange_Proxy: function() {return (Fn(null, [[Pointer(T.IAdviseSink2), 'This'], [Pointer(T.IMoniker), 'pmk']], [['stdcall']]))('IAdviseSink2_OnLinkSrcChange_Proxy');},
    IAdviseSink2_OnLinkSrcChange_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IAdviseSink2), 'This'], [Pointer(T.IMoniker), 'pmk']], [['stdcall']]))('IAdviseSink2_OnLinkSrcChange_Stub');},
    IID_IDataObject: function() {return (T.GUID)('IID_IDataObject');},
    IDataObject_RemoteGetData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetcIn'], [Pointer(T.STGMEDIUM), 'pRemoteMedium']], [['stdcall']]))('IDataObject_RemoteGetData_Proxy');},
    IDataObject_RemoteGetData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDataObject_RemoteGetData_Stub');},
    IDataObject_RemoteGetDataHere_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pRemoteMedium']], [['stdcall']]))('IDataObject_RemoteGetDataHere_Proxy');},
    IDataObject_RemoteGetDataHere_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDataObject_RemoteGetDataHere_Stub');},
    IDataObject_QueryGetData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc']], [['stdcall']]))('IDataObject_QueryGetData_Proxy');},
    IDataObject_QueryGetData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDataObject_QueryGetData_Stub');},
    IDataObject_GetCanonicalFormatEtc_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatectIn'], [Pointer(T.FORMATETC), 'pformatetcOut']], [['stdcall']]))('IDataObject_GetCanonicalFormatEtc_Proxy');},
    IDataObject_GetCanonicalFormatEtc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDataObject_GetCanonicalFormatEtc_Stub');},
    IDataObject_RemoteSetData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.FLAG_STGMEDIUM), 'pmedium'], [T.BOOL, 'fRelease']], [['stdcall']]))('IDataObject_RemoteSetData_Proxy');},
    IDataObject_RemoteSetData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDataObject_RemoteSetData_Stub');},
    IDataObject_EnumFormatEtc_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [T.DWORD, 'dwDirection'], [Pointer(Pointer(T.IEnumFORMATETC)), 'ppenumFormatEtc']], [['stdcall']]))('IDataObject_EnumFormatEtc_Proxy');},
    IDataObject_EnumFormatEtc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDataObject_EnumFormatEtc_Stub');},
    IDataObject_DAdvise_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [T.DWORD, 'advf'], [Pointer(T.IAdviseSink), 'pAdvSink'], [Pointer(T.DWORD), 'pdwConnection']], [['stdcall']]))('IDataObject_DAdvise_Proxy');},
    IDataObject_DAdvise_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDataObject_DAdvise_Stub');},
    IDataObject_DUnadvise_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [T.DWORD, 'dwConnection']], [['stdcall']]))('IDataObject_DUnadvise_Proxy');},
    IDataObject_DUnadvise_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDataObject_DUnadvise_Stub');},
    IDataObject_EnumDAdvise_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumAdvise']], [['stdcall']]))('IDataObject_EnumDAdvise_Proxy');},
    IDataObject_EnumDAdvise_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDataObject_EnumDAdvise_Stub');},
    IDataObject_GetData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetcIn'], [Pointer(T.STGMEDIUM), 'pmedium']], [['stdcall']]))('IDataObject_GetData_Proxy');},
    IDataObject_GetData_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetcIn'], [Pointer(T.STGMEDIUM), 'pRemoteMedium']], [['stdcall']]))('IDataObject_GetData_Stub');},
    IDataObject_GetDataHere_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pmedium']], [['stdcall']]))('IDataObject_GetDataHere_Proxy');},
    IDataObject_GetDataHere_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pRemoteMedium']], [['stdcall']]))('IDataObject_GetDataHere_Stub');},
    IDataObject_SetData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pmedium'], [T.BOOL, 'fRelease']], [['stdcall']]))('IDataObject_SetData_Proxy');},
    IDataObject_SetData_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.FLAG_STGMEDIUM), 'pmedium'], [T.BOOL, 'fRelease']], [['stdcall']]))('IDataObject_SetData_Stub');},
    IID_IDataAdviseHolder: function() {return (T.GUID)('IID_IDataAdviseHolder');},
    IDataAdviseHolder_Advise_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [Pointer(T.IDataObject), 'pDataObject'], [Pointer(T.FORMATETC), 'pFetc'], [T.DWORD, 'advf'], [Pointer(T.IAdviseSink), 'pAdvise'], [Pointer(T.DWORD), 'pdwConnection']], [['stdcall']]))('IDataAdviseHolder_Advise_Proxy');},
    IDataAdviseHolder_Advise_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDataAdviseHolder_Advise_Stub');},
    IDataAdviseHolder_Unadvise_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [T.DWORD, 'dwConnection']], [['stdcall']]))('IDataAdviseHolder_Unadvise_Proxy');},
    IDataAdviseHolder_Unadvise_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDataAdviseHolder_Unadvise_Stub');},
    IDataAdviseHolder_EnumAdvise_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumAdvise']], [['stdcall']]))('IDataAdviseHolder_EnumAdvise_Proxy');},
    IDataAdviseHolder_EnumAdvise_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDataAdviseHolder_EnumAdvise_Stub');},
    IDataAdviseHolder_SendOnDataChange_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [Pointer(T.IDataObject), 'pDataObject'], [T.DWORD, 'dwReserved'], [T.DWORD, 'advf']], [['stdcall']]))('IDataAdviseHolder_SendOnDataChange_Proxy');},
    IDataAdviseHolder_SendOnDataChange_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDataAdviseHolder_SendOnDataChange_Stub');},
    IID_IMessageFilter: function() {return (T.GUID)('IID_IMessageFilter');},
    IMessageFilter_HandleInComingCall_Proxy: function() {return (Fn(T.DWORD, [[Pointer(T.IMessageFilter), 'This'], [T.DWORD, 'dwCallType'], [T.HTASK, 'htaskCaller'], [T.DWORD, 'dwTickCount'], [T.LPINTERFACEINFO, 'lpInterfaceInfo']], [['stdcall']]))('IMessageFilter_HandleInComingCall_Proxy');},
    IMessageFilter_HandleInComingCall_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMessageFilter_HandleInComingCall_Stub');},
    IMessageFilter_RetryRejectedCall_Proxy: function() {return (Fn(T.DWORD, [[Pointer(T.IMessageFilter), 'This'], [T.HTASK, 'htaskCallee'], [T.DWORD, 'dwTickCount'], [T.DWORD, 'dwRejectType']], [['stdcall']]))('IMessageFilter_RetryRejectedCall_Proxy');},
    IMessageFilter_RetryRejectedCall_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMessageFilter_RetryRejectedCall_Stub');},
    IMessageFilter_MessagePending_Proxy: function() {return (Fn(T.DWORD, [[Pointer(T.IMessageFilter), 'This'], [T.HTASK, 'htaskCallee'], [T.DWORD, 'dwTickCount'], [T.DWORD, 'dwPendingType']], [['stdcall']]))('IMessageFilter_MessagePending_Proxy');},
    IMessageFilter_MessagePending_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMessageFilter_MessagePending_Stub');},
    IID_IRpcChannelBuffer: function() {return (T.GUID)('IID_IRpcChannelBuffer');},
    IRpcChannelBuffer_GetBuffer_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.IID), 'riid']], [['stdcall']]))('IRpcChannelBuffer_GetBuffer_Proxy');},
    IRpcChannelBuffer_GetBuffer_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcChannelBuffer_GetBuffer_Stub');},
    IRpcChannelBuffer_SendReceive_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.ULONG), 'pStatus']], [['stdcall']]))('IRpcChannelBuffer_SendReceive_Proxy');},
    IRpcChannelBuffer_SendReceive_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcChannelBuffer_SendReceive_Stub');},
    IRpcChannelBuffer_FreeBuffer_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage']], [['stdcall']]))('IRpcChannelBuffer_FreeBuffer_Proxy');},
    IRpcChannelBuffer_FreeBuffer_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcChannelBuffer_FreeBuffer_Stub');},
    IRpcChannelBuffer_GetDestCtx_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']], [['stdcall']]))('IRpcChannelBuffer_GetDestCtx_Proxy');},
    IRpcChannelBuffer_GetDestCtx_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcChannelBuffer_GetDestCtx_Stub');},
    IRpcChannelBuffer_IsConnected_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This']], [['stdcall']]))('IRpcChannelBuffer_IsConnected_Proxy');},
    IRpcChannelBuffer_IsConnected_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcChannelBuffer_IsConnected_Stub');},
    IID_IRpcChannelBuffer2: function() {return (T.GUID)('IID_IRpcChannelBuffer2');},
    IRpcChannelBuffer2_GetProtocolVersion_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer2), 'This'], [Pointer(T.DWORD), 'pdwVersion']], [['stdcall']]))('IRpcChannelBuffer2_GetProtocolVersion_Proxy');},
    IRpcChannelBuffer2_GetProtocolVersion_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcChannelBuffer2_GetProtocolVersion_Stub');},
    IID_IRpcChannelBuffer3: function() {return (T.GUID)('IID_IRpcChannelBuffer3');},
    IRpcChannelBuffer3_Send_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.ULONG), 'pulStatus']], [['stdcall']]))('IRpcChannelBuffer3_Send_Proxy');},
    IRpcChannelBuffer3_Send_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcChannelBuffer3_Send_Stub');},
    IRpcChannelBuffer3_Receive_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [T.ULONG, 'ulSize'], [Pointer(T.ULONG), 'pulStatus']], [['stdcall']]))('IRpcChannelBuffer3_Receive_Proxy');},
    IRpcChannelBuffer3_Receive_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcChannelBuffer3_Receive_Stub');},
    IRpcChannelBuffer3_Cancel_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg']], [['stdcall']]))('IRpcChannelBuffer3_Cancel_Proxy');},
    IRpcChannelBuffer3_Cancel_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcChannelBuffer3_Cancel_Stub');},
    IRpcChannelBuffer3_GetCallContext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'pInterface']], [['stdcall']]))('IRpcChannelBuffer3_GetCallContext_Proxy');},
    IRpcChannelBuffer3_GetCallContext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcChannelBuffer3_GetCallContext_Stub');},
    IRpcChannelBuffer3_GetDestCtxEx_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']], [['stdcall']]))('IRpcChannelBuffer3_GetDestCtxEx_Proxy');},
    IRpcChannelBuffer3_GetDestCtxEx_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcChannelBuffer3_GetDestCtxEx_Stub');},
    IRpcChannelBuffer3_GetState_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.DWORD), 'pState']], [['stdcall']]))('IRpcChannelBuffer3_GetState_Proxy');},
    IRpcChannelBuffer3_GetState_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcChannelBuffer3_GetState_Stub');},
    IRpcChannelBuffer3_RegisterAsync_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.IAsyncManager), 'pAsyncMgr']], [['stdcall']]))('IRpcChannelBuffer3_RegisterAsync_Proxy');},
    IRpcChannelBuffer3_RegisterAsync_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcChannelBuffer3_RegisterAsync_Stub');},
    IID_IAsyncRpcChannelBuffer: function() {return (T.GUID)('IID_IAsyncRpcChannelBuffer');},
    IAsyncRpcChannelBuffer_Send_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.ISynchronize), 'pSync'], [Pointer(T.ULONG), 'pulStatus']], [['stdcall']]))('IAsyncRpcChannelBuffer_Send_Proxy');},
    IAsyncRpcChannelBuffer_Send_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAsyncRpcChannelBuffer_Send_Stub');},
    IAsyncRpcChannelBuffer_Receive_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.ULONG), 'pulStatus']], [['stdcall']]))('IAsyncRpcChannelBuffer_Receive_Proxy');},
    IAsyncRpcChannelBuffer_Receive_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAsyncRpcChannelBuffer_Receive_Stub');},
    IAsyncRpcChannelBuffer_GetDestCtxEx_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']], [['stdcall']]))('IAsyncRpcChannelBuffer_GetDestCtxEx_Proxy');},
    IAsyncRpcChannelBuffer_GetDestCtxEx_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAsyncRpcChannelBuffer_GetDestCtxEx_Stub');},
    IID_IRpcSyntaxNegotiate: function() {return (T.GUID)('IID_IRpcSyntaxNegotiate');},
    IRpcSyntaxNegotiate_NegotiateSyntax_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcSyntaxNegotiate), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg']], [['stdcall']]))('IRpcSyntaxNegotiate_NegotiateSyntax_Proxy');},
    IRpcSyntaxNegotiate_NegotiateSyntax_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcSyntaxNegotiate_NegotiateSyntax_Stub');},
    IID_IRpcProxyBuffer: function() {return (T.GUID)('IID_IRpcProxyBuffer');},
    IRpcProxyBuffer_Connect_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcProxyBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer']], [['stdcall']]))('IRpcProxyBuffer_Connect_Proxy');},
    IRpcProxyBuffer_Connect_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcProxyBuffer_Connect_Stub');},
    IRpcProxyBuffer_Disconnect_Proxy: function() {return (Fn(null, [[Pointer(T.IRpcProxyBuffer), 'This']], [['stdcall']]))('IRpcProxyBuffer_Disconnect_Proxy');},
    IRpcProxyBuffer_Disconnect_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcProxyBuffer_Disconnect_Stub');},
    IID_IRpcStubBuffer: function() {return (T.GUID)('IID_IRpcStubBuffer');},
    IRpcStubBuffer_Connect_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IUnknown), 'pUnkServer']], [['stdcall']]))('IRpcStubBuffer_Connect_Proxy');},
    IRpcStubBuffer_Connect_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcStubBuffer_Connect_Stub');},
    IRpcStubBuffer_Disconnect_Proxy: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This']], [['stdcall']]))('IRpcStubBuffer_Disconnect_Proxy');},
    IRpcStubBuffer_Disconnect_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcStubBuffer_Disconnect_Stub');},
    IRpcStubBuffer_Invoke_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), '_prpcmsg'], [Pointer(T.IRpcChannelBuffer), '_pRpcChannelBuffer']], [['stdcall']]))('IRpcStubBuffer_Invoke_Proxy');},
    IRpcStubBuffer_Invoke_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcStubBuffer_Invoke_Stub');},
    IRpcStubBuffer_IsIIDSupported_Proxy: function() {return (Fn(Pointer(T.IRpcStubBuffer), [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IID), 'riid']], [['stdcall']]))('IRpcStubBuffer_IsIIDSupported_Proxy');},
    IRpcStubBuffer_IsIIDSupported_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcStubBuffer_IsIIDSupported_Stub');},
    IRpcStubBuffer_CountRefs_Proxy: function() {return (Fn(T.ULONG, [[Pointer(T.IRpcStubBuffer), 'This']], [['stdcall']]))('IRpcStubBuffer_CountRefs_Proxy');},
    IRpcStubBuffer_CountRefs_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcStubBuffer_CountRefs_Stub');},
    IRpcStubBuffer_DebugServerQueryInterface_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(Pointer(null)), 'ppv']], [['stdcall']]))('IRpcStubBuffer_DebugServerQueryInterface_Proxy');},
    IRpcStubBuffer_DebugServerQueryInterface_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcStubBuffer_DebugServerQueryInterface_Stub');},
    IRpcStubBuffer_DebugServerRelease_Proxy: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(null), 'pv']], [['stdcall']]))('IRpcStubBuffer_DebugServerRelease_Proxy');},
    IRpcStubBuffer_DebugServerRelease_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcStubBuffer_DebugServerRelease_Stub');},
    IID_IPSFactoryBuffer: function() {return (T.GUID)('IID_IPSFactoryBuffer');},
    IPSFactoryBuffer_CreateProxy_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPSFactoryBuffer), 'This'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IRpcProxyBuffer)), 'ppProxy'], [Pointer(Pointer(null)), 'ppv']], [['stdcall']]))('IPSFactoryBuffer_CreateProxy_Proxy');},
    IPSFactoryBuffer_CreateProxy_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPSFactoryBuffer_CreateProxy_Stub');},
    IPSFactoryBuffer_CreateStub_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPSFactoryBuffer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'pUnkServer'], [Pointer(Pointer(T.IRpcStubBuffer)), 'ppStub']], [['stdcall']]))('IPSFactoryBuffer_CreateStub_Proxy');},
    IPSFactoryBuffer_CreateStub_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPSFactoryBuffer_CreateStub_Stub');},
    IID_IChannelHook: function() {return (T.GUID)('IID_IChannelHook');},
    IChannelHook_ClientGetSize_Proxy: function() {return (Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [Pointer(T.ULONG), 'pDataSize']], [['stdcall']]))('IChannelHook_ClientGetSize_Proxy');},
    IChannelHook_ClientGetSize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IChannelHook_ClientGetSize_Stub');},
    IChannelHook_ClientFillBuffer_Proxy: function() {return (Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [Pointer(T.ULONG), 'pDataSize'], [Pointer(null), 'pDataBuffer']], [['stdcall']]))('IChannelHook_ClientFillBuffer_Proxy');},
    IChannelHook_ClientFillBuffer_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IChannelHook_ClientFillBuffer_Stub');},
    IChannelHook_ClientNotify_Proxy: function() {return (Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [T.ULONG, 'cbDataSize'], [Pointer(null), 'pDataBuffer'], [T.DWORD, 'lDataRep'], [T.HRESULT, 'hrFault']], [['stdcall']]))('IChannelHook_ClientNotify_Proxy');},
    IChannelHook_ClientNotify_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IChannelHook_ClientNotify_Stub');},
    IChannelHook_ServerNotify_Proxy: function() {return (Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [T.ULONG, 'cbDataSize'], [Pointer(null), 'pDataBuffer'], [T.DWORD, 'lDataRep']], [['stdcall']]))('IChannelHook_ServerNotify_Proxy');},
    IChannelHook_ServerNotify_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IChannelHook_ServerNotify_Stub');},
    IChannelHook_ServerGetSize_Proxy: function() {return (Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [T.HRESULT, 'hrFault'], [Pointer(T.ULONG), 'pDataSize']], [['stdcall']]))('IChannelHook_ServerGetSize_Proxy');},
    IChannelHook_ServerGetSize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IChannelHook_ServerGetSize_Stub');},
    IChannelHook_ServerFillBuffer_Proxy: function() {return (Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [Pointer(T.ULONG), 'pDataSize'], [Pointer(null), 'pDataBuffer'], [T.HRESULT, 'hrFault']], [['stdcall']]))('IChannelHook_ServerFillBuffer_Proxy');},
    IChannelHook_ServerFillBuffer_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IChannelHook_ServerFillBuffer_Stub');},
    FMTID_SummaryInformation: function() {return (T.FMTID)('FMTID_SummaryInformation');},
    FMTID_DocSummaryInformation: function() {return (T.FMTID)('FMTID_DocSummaryInformation');},
    FMTID_UserDefinedProperties: function() {return (T.FMTID)('FMTID_UserDefinedProperties');},
    IID_IClientSecurity: function() {return (T.GUID)('IID_IClientSecurity');},
    IClientSecurity_QueryBlanket_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IClientSecurity), 'This'], [Pointer(T.IUnknown), 'pProxy'], [Pointer(T.DWORD), 'pAuthnSvc'], [Pointer(T.DWORD), 'pAuthzSvc'], [Pointer(Pointer(T.OLECHAR)), 'pServerPrincName'], [Pointer(T.DWORD), 'pAuthnLevel'], [Pointer(T.DWORD), 'pImpLevel'], [Pointer(Pointer(null)), 'pAuthInfo'], [Pointer(T.DWORD), 'pCapabilities']], [['stdcall']]))('IClientSecurity_QueryBlanket_Proxy');},
    IClientSecurity_QueryBlanket_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IClientSecurity_QueryBlanket_Stub');},
    IClientSecurity_SetBlanket_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IClientSecurity), 'This'], [Pointer(T.IUnknown), 'pProxy'], [T.DWORD, 'AuthnSvc'], [T.DWORD, 'AuthzSvc'], [Pointer(T.OLECHAR), 'pServerPrincName'], [T.DWORD, 'AuthnLevel'], [T.DWORD, 'ImpLevel'], [Pointer(null), 'pAuthInfo'], [T.DWORD, 'Capabilities']], [['stdcall']]))('IClientSecurity_SetBlanket_Proxy');},
    IClientSecurity_SetBlanket_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IClientSecurity_SetBlanket_Stub');},
    IClientSecurity_CopyProxy_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IClientSecurity), 'This'], [Pointer(T.IUnknown), 'pProxy'], [Pointer(Pointer(T.IUnknown)), 'ppCopy']], [['stdcall']]))('IClientSecurity_CopyProxy_Proxy');},
    IClientSecurity_CopyProxy_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IClientSecurity_CopyProxy_Stub');},
    IID_IServerSecurity: function() {return (T.GUID)('IID_IServerSecurity');},
    IServerSecurity_QueryBlanket_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IServerSecurity), 'This'], [Pointer(T.DWORD), 'pAuthnSvc'], [Pointer(T.DWORD), 'pAuthzSvc'], [Pointer(Pointer(T.OLECHAR)), 'pServerPrincName'], [Pointer(T.DWORD), 'pAuthnLevel'], [Pointer(T.DWORD), 'pImpLevel'], [Pointer(Pointer(null)), 'pPrivs'], [Pointer(T.DWORD), 'pCapabilities']], [['stdcall']]))('IServerSecurity_QueryBlanket_Proxy');},
    IServerSecurity_QueryBlanket_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IServerSecurity_QueryBlanket_Stub');},
    IServerSecurity_ImpersonateClient_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IServerSecurity), 'This']], [['stdcall']]))('IServerSecurity_ImpersonateClient_Proxy');},
    IServerSecurity_ImpersonateClient_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IServerSecurity_ImpersonateClient_Stub');},
    IServerSecurity_RevertToSelf_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IServerSecurity), 'This']], [['stdcall']]))('IServerSecurity_RevertToSelf_Proxy');},
    IServerSecurity_RevertToSelf_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IServerSecurity_RevertToSelf_Stub');},
    IServerSecurity_IsImpersonating_Proxy: function() {return (Fn(T.BOOL, [[Pointer(T.IServerSecurity), 'This']], [['stdcall']]))('IServerSecurity_IsImpersonating_Proxy');},
    IServerSecurity_IsImpersonating_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IServerSecurity_IsImpersonating_Stub');},
    IID_IAsyncSetup: function() {return (T.GUID)('IID_IAsyncSetup');},
    IAsyncSetup_GetAsyncManager_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAsyncSetup), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'pOuter'], [T.DWORD, 'dwFlags'], [Pointer(Pointer(T.IUnknown)), 'ppInner'], [Pointer(Pointer(T.IAsyncManager)), 'ppAsyncMgr']], [['stdcall']]))('IAsyncSetup_GetAsyncManager_Proxy');},
    IAsyncSetup_GetAsyncManager_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAsyncSetup_GetAsyncManager_Stub');},
    IID_IDirectWriterLock: function() {return (T.GUID)('IID_IDirectWriterLock');},
    IDirectWriterLock_WaitForWriteAccess_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDirectWriterLock), 'This'], [T.DWORD, 'dwTimeout']], [['stdcall']]))('IDirectWriterLock_WaitForWriteAccess_Proxy');},
    IDirectWriterLock_WaitForWriteAccess_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDirectWriterLock_WaitForWriteAccess_Stub');},
    IDirectWriterLock_ReleaseWriteAccess_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDirectWriterLock), 'This']], [['stdcall']]))('IDirectWriterLock_ReleaseWriteAccess_Proxy');},
    IDirectWriterLock_ReleaseWriteAccess_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDirectWriterLock_ReleaseWriteAccess_Stub');},
    IDirectWriterLock_HaveWriteAccess_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDirectWriterLock), 'This']], [['stdcall']]))('IDirectWriterLock_HaveWriteAccess_Proxy');},
    IDirectWriterLock_HaveWriteAccess_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDirectWriterLock_HaveWriteAccess_Stub');},
    IID_ISynchronize: function() {return (T.GUID)('IID_ISynchronize');},
    ISynchronize_Wait_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISynchronize), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwMilliseconds']], [['stdcall']]))('ISynchronize_Wait_Proxy');},
    ISynchronize_Wait_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISynchronize_Wait_Stub');},
    ISynchronize_Signal_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISynchronize), 'This']], [['stdcall']]))('ISynchronize_Signal_Proxy');},
    ISynchronize_Signal_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISynchronize_Signal_Stub');},
    ISynchronize_Reset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISynchronize), 'This']], [['stdcall']]))('ISynchronize_Reset_Proxy');},
    ISynchronize_Reset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISynchronize_Reset_Stub');},
    IID_ISynchronizeHandle: function() {return (T.GUID)('IID_ISynchronizeHandle');},
    ISynchronizeHandle_GetHandle_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISynchronizeHandle), 'This'], [Pointer(T.HANDLE), 'ph']], [['stdcall']]))('ISynchronizeHandle_GetHandle_Proxy');},
    ISynchronizeHandle_GetHandle_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISynchronizeHandle_GetHandle_Stub');},
    IID_ISynchronizeEvent: function() {return (T.GUID)('IID_ISynchronizeEvent');},
    ISynchronizeEvent_SetEventHandle_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISynchronizeEvent), 'This'], [Pointer(T.HANDLE), 'ph']], [['stdcall']]))('ISynchronizeEvent_SetEventHandle_Proxy');},
    ISynchronizeEvent_SetEventHandle_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISynchronizeEvent_SetEventHandle_Stub');},
    IID_ISynchronizeContainer: function() {return (T.GUID)('IID_ISynchronizeContainer');},
    ISynchronizeContainer_AddSynchronize_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISynchronizeContainer), 'This'], [Pointer(T.ISynchronize), 'pSync']], [['stdcall']]))('ISynchronizeContainer_AddSynchronize_Proxy');},
    ISynchronizeContainer_AddSynchronize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISynchronizeContainer_AddSynchronize_Stub');},
    ISynchronizeContainer_WaitMultiple_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISynchronizeContainer), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwTimeOut'], [Pointer(Pointer(T.ISynchronize)), 'ppSync']], [['stdcall']]))('ISynchronizeContainer_WaitMultiple_Proxy');},
    ISynchronizeContainer_WaitMultiple_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISynchronizeContainer_WaitMultiple_Stub');},
    IID_ISynchronizeMutex: function() {return (T.GUID)('IID_ISynchronizeMutex');},
    ISynchronizeMutex_ReleaseMutex_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISynchronizeMutex), 'This']], [['stdcall']]))('ISynchronizeMutex_ReleaseMutex_Proxy');},
    ISynchronizeMutex_ReleaseMutex_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISynchronizeMutex_ReleaseMutex_Stub');},
    IID_ICancelMethodCalls: function() {return (T.GUID)('IID_ICancelMethodCalls');},
    ICancelMethodCalls_Cancel_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICancelMethodCalls), 'This'], [T.ULONG, 'ulSeconds']], [['stdcall']]))('ICancelMethodCalls_Cancel_Proxy');},
    ICancelMethodCalls_Cancel_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICancelMethodCalls_Cancel_Stub');},
    ICancelMethodCalls_TestCancel_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICancelMethodCalls), 'This']], [['stdcall']]))('ICancelMethodCalls_TestCancel_Proxy');},
    ICancelMethodCalls_TestCancel_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICancelMethodCalls_TestCancel_Stub');},
    IID_IAsyncManager: function() {return (T.GUID)('IID_IAsyncManager');},
    IAsyncManager_CompleteCall_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAsyncManager), 'This'], [T.HRESULT, 'Result']], [['stdcall']]))('IAsyncManager_CompleteCall_Proxy');},
    IAsyncManager_CompleteCall_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAsyncManager_CompleteCall_Stub');},
    IAsyncManager_GetCallContext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAsyncManager), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'pInterface']], [['stdcall']]))('IAsyncManager_GetCallContext_Proxy');},
    IAsyncManager_GetCallContext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAsyncManager_GetCallContext_Stub');},
    IAsyncManager_GetState_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAsyncManager), 'This'], [Pointer(T.ULONG), 'pulStateFlags']], [['stdcall']]))('IAsyncManager_GetState_Proxy');},
    IAsyncManager_GetState_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAsyncManager_GetState_Stub');},
    IID_ICallFactory: function() {return (T.GUID)('IID_ICallFactory');},
    ICallFactory_CreateCall_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICallFactory), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'pCtrlUnk'], [Pointer(T.IID), 'riid2'], [Pointer(Pointer(T.IUnknown)), 'ppv']], [['stdcall']]))('ICallFactory_CreateCall_Proxy');},
    ICallFactory_CreateCall_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICallFactory_CreateCall_Stub');},
    IID_IRpcOptions: function() {return (T.GUID)('IID_IRpcOptions');},
    IRpcOptions_Set_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcOptions), 'This'], [Pointer(T.IUnknown), 'pPrx'], [T.DWORD, 'dwProperty'], [T.ULONG_PTR, 'dwValue']], [['stdcall']]))('IRpcOptions_Set_Proxy');},
    IRpcOptions_Set_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcOptions_Set_Stub');},
    IRpcOptions_Query_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcOptions), 'This'], [Pointer(T.IUnknown), 'pPrx'], [T.DWORD, 'dwProperty'], [Pointer(T.ULONG_PTR), 'pdwValue']], [['stdcall']]))('IRpcOptions_Query_Proxy');},
    IRpcOptions_Query_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcOptions_Query_Stub');},
    IID_IRpcHelper: function() {return (T.GUID)('IID_IRpcHelper');},
    IRpcHelper_GetDCOMProtocolVersion_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcHelper), 'This'], [Pointer(T.DWORD), 'pComVersion']], [['stdcall']]))('IRpcHelper_GetDCOMProtocolVersion_Proxy');},
    IRpcHelper_GetDCOMProtocolVersion_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcHelper_GetDCOMProtocolVersion_Stub');},
    IRpcHelper_GetIIDFromOBJREF_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRpcHelper), 'This'], [Pointer(null), 'pObjRef'], [Pointer(Pointer(T.IID)), 'piid']], [['stdcall']]))('IRpcHelper_GetIIDFromOBJREF_Proxy');},
    IRpcHelper_GetIIDFromOBJREF_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRpcHelper_GetIIDFromOBJREF_Stub');},
    IID_IReleaseMarshalBuffers: function() {return (T.GUID)('IID_IReleaseMarshalBuffers');},
    IReleaseMarshalBuffers_ReleaseMarshalBuffer_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IReleaseMarshalBuffers), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [T.DWORD, 'dwFlags'], [Pointer(T.IUnknown), 'pChnl']], [['stdcall']]))('IReleaseMarshalBuffers_ReleaseMarshalBuffer_Proxy');},
    IReleaseMarshalBuffers_ReleaseMarshalBuffer_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IReleaseMarshalBuffers_ReleaseMarshalBuffer_Stub');},
    IID_IWaitMultiple: function() {return (T.GUID)('IID_IWaitMultiple');},
    IWaitMultiple_WaitMultiple_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IWaitMultiple), 'This'], [T.DWORD, 'timeout'], [Pointer(Pointer(T.ISynchronize)), 'pSync']], [['stdcall']]))('IWaitMultiple_WaitMultiple_Proxy');},
    IWaitMultiple_WaitMultiple_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IWaitMultiple_WaitMultiple_Stub');},
    IWaitMultiple_AddSynchronize_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IWaitMultiple), 'This'], [Pointer(T.ISynchronize), 'pSync']], [['stdcall']]))('IWaitMultiple_AddSynchronize_Proxy');},
    IWaitMultiple_AddSynchronize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IWaitMultiple_AddSynchronize_Stub');},
    IID_IUrlMon: function() {return (T.GUID)('IID_IUrlMon');},
    IUrlMon_AsyncGetClassBits_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUrlMon), 'This'], [Pointer(T.CLSID), 'rclsid'], [T.LPCWSTR, 'pszTYPE'], [T.LPCWSTR, 'pszExt'], [T.DWORD, 'dwFileVersionMS'], [T.DWORD, 'dwFileVersionLS'], [T.LPCWSTR, 'pszCodeBase'], [Pointer(T.IBindCtx), 'pbc'], [T.DWORD, 'dwClassContext'], [Pointer(T.IID), 'riid'], [T.DWORD, 'flags']], [['stdcall']]))('IUrlMon_AsyncGetClassBits_Proxy');},
    IUrlMon_AsyncGetClassBits_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUrlMon_AsyncGetClassBits_Stub');},
    IID_IForegroundTransfer: function() {return (T.GUID)('IID_IForegroundTransfer');},
    IForegroundTransfer_AllowForegroundTransfer_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IForegroundTransfer), 'This'], [Pointer(null), 'lpvReserved']], [['stdcall']]))('IForegroundTransfer_AllowForegroundTransfer_Proxy');},
    IForegroundTransfer_AllowForegroundTransfer_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IForegroundTransfer_AllowForegroundTransfer_Stub');},
    IID_IAddrTrackingControl: function() {return (T.GUID)('IID_IAddrTrackingControl');},
    IAddrTrackingControl_EnableCOMDynamicAddrTracking_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAddrTrackingControl), 'This']], [['stdcall']]))('IAddrTrackingControl_EnableCOMDynamicAddrTracking_Proxy');},
    IAddrTrackingControl_EnableCOMDynamicAddrTracking_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAddrTrackingControl_EnableCOMDynamicAddrTracking_Stub');},
    IAddrTrackingControl_DisableCOMDynamicAddrTracking_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAddrTrackingControl), 'This']], [['stdcall']]))('IAddrTrackingControl_DisableCOMDynamicAddrTracking_Proxy');},
    IAddrTrackingControl_DisableCOMDynamicAddrTracking_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAddrTrackingControl_DisableCOMDynamicAddrTracking_Stub');},
    IID_IAddrExclusionControl: function() {return (T.GUID)('IID_IAddrExclusionControl');},
    IAddrExclusionControl_GetCurrentAddrExclusionList_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAddrExclusionControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppEnumerator']], [['stdcall']]))('IAddrExclusionControl_GetCurrentAddrExclusionList_Proxy');},
    IAddrExclusionControl_GetCurrentAddrExclusionList_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAddrExclusionControl_GetCurrentAddrExclusionList_Stub');},
    IAddrExclusionControl_UpdateAddrExclusionList_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAddrExclusionControl), 'This'], [Pointer(T.IUnknown), 'pEnumerator']], [['stdcall']]))('IAddrExclusionControl_UpdateAddrExclusionList_Proxy');},
    IAddrExclusionControl_UpdateAddrExclusionList_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAddrExclusionControl_UpdateAddrExclusionList_Stub');},
    IID_IComThreadingInfo: function() {return (T.GUID)('IID_IComThreadingInfo');},
    IComThreadingInfo_GetCurrentApartmentType_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.APTTYPE), 'pAptType']], [['stdcall']]))('IComThreadingInfo_GetCurrentApartmentType_Proxy');},
    IComThreadingInfo_GetCurrentApartmentType_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IComThreadingInfo_GetCurrentApartmentType_Stub');},
    IComThreadingInfo_GetCurrentThreadType_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.THDTYPE), 'pThreadType']], [['stdcall']]))('IComThreadingInfo_GetCurrentThreadType_Proxy');},
    IComThreadingInfo_GetCurrentThreadType_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IComThreadingInfo_GetCurrentThreadType_Stub');},
    IComThreadingInfo_GetCurrentLogicalThreadId_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.GUID), 'pguidLogicalThreadId']], [['stdcall']]))('IComThreadingInfo_GetCurrentLogicalThreadId_Proxy');},
    IComThreadingInfo_GetCurrentLogicalThreadId_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IComThreadingInfo_GetCurrentLogicalThreadId_Stub');},
    IComThreadingInfo_SetCurrentLogicalThreadId_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.GUID), 'rguid']], [['stdcall']]))('IComThreadingInfo_SetCurrentLogicalThreadId_Proxy');},
    IComThreadingInfo_SetCurrentLogicalThreadId_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IComThreadingInfo_SetCurrentLogicalThreadId_Stub');},
    IID_IProcessInitControl: function() {return (T.GUID)('IID_IProcessInitControl');},
    IProcessInitControl_ResetInitializerTimeout_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IProcessInitControl), 'This'], [T.DWORD, 'dwSecondsRemaining']], [['stdcall']]))('IProcessInitControl_ResetInitializerTimeout_Proxy');},
    IProcessInitControl_ResetInitializerTimeout_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IProcessInitControl_ResetInitializerTimeout_Stub');},
    IID_IInitializeSpy: function() {return (T.GUID)('IID_IInitializeSpy');},
    IInitializeSpy_PreInitialize_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [T.DWORD, 'dwCoInit'], [T.DWORD, 'dwCurThreadAptRefs']], [['stdcall']]))('IInitializeSpy_PreInitialize_Proxy');},
    IInitializeSpy_PreInitialize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInitializeSpy_PreInitialize_Stub');},
    IInitializeSpy_PostInitialize_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [T.HRESULT, 'hrCoInit'], [T.DWORD, 'dwCoInit'], [T.DWORD, 'dwNewThreadAptRefs']], [['stdcall']]))('IInitializeSpy_PostInitialize_Proxy');},
    IInitializeSpy_PostInitialize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInitializeSpy_PostInitialize_Stub');},
    IInitializeSpy_PreUninitialize_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [T.DWORD, 'dwCurThreadAptRefs']], [['stdcall']]))('IInitializeSpy_PreUninitialize_Proxy');},
    IInitializeSpy_PreUninitialize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInitializeSpy_PreUninitialize_Stub');},
    IInitializeSpy_PostUninitialize_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [T.DWORD, 'dwNewThreadAptRefs']], [['stdcall']]))('IInitializeSpy_PostUninitialize_Proxy');},
    IInitializeSpy_PostUninitialize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInitializeSpy_PostUninitialize_Stub');},
    IID_IThumbnailExtractor: function() {return (T.GUID)('IID_IThumbnailExtractor');},
    IThumbnailExtractor_ExtractThumbnail_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IThumbnailExtractor), 'This'], [Pointer(T.IStorage), 'pStg'], [T.ULONG, 'ulLength'], [T.ULONG, 'ulHeight'], [Pointer(T.ULONG), 'pulOutputLength'], [Pointer(T.ULONG), 'pulOutputHeight'], [Pointer(T.HBITMAP), 'phOutputBitmap']], [['stdcall']]))('IThumbnailExtractor_ExtractThumbnail_Proxy');},
    IThumbnailExtractor_ExtractThumbnail_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IThumbnailExtractor_ExtractThumbnail_Stub');},
    IThumbnailExtractor_OnFileUpdated_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IThumbnailExtractor), 'This'], [Pointer(T.IStorage), 'pStg']], [['stdcall']]))('IThumbnailExtractor_OnFileUpdated_Proxy');},
    IThumbnailExtractor_OnFileUpdated_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IThumbnailExtractor_OnFileUpdated_Stub');},
    SNB_UserSize: function() {return (Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.SNB)]], [['stdcall']]))('SNB_UserSize');},
    SNB_UserMarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.SNB)]], [['stdcall']]))('SNB_UserMarshal');},
    SNB_UserUnmarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.SNB)]], [['stdcall']]))('SNB_UserUnmarshal');},
    SNB_UserFree: function() {return (Fn(null, [[Pointer(T.ULONG)], [Pointer(T.SNB)]], [['stdcall']]))('SNB_UserFree');},
    CLIPFORMAT_UserSize: function() {return (Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.CLIPFORMAT)]], [['stdcall']]))('CLIPFORMAT_UserSize');},
    CLIPFORMAT_UserMarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.CLIPFORMAT)]], [['stdcall']]))('CLIPFORMAT_UserMarshal');},
    CLIPFORMAT_UserUnmarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.CLIPFORMAT)]], [['stdcall']]))('CLIPFORMAT_UserUnmarshal');},
    CLIPFORMAT_UserFree: function() {return (Fn(null, [[Pointer(T.ULONG)], [Pointer(T.CLIPFORMAT)]], [['stdcall']]))('CLIPFORMAT_UserFree');},
    STGMEDIUM_UserSize: function() {return (Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.STGMEDIUM)]], [['stdcall']]))('STGMEDIUM_UserSize');},
    STGMEDIUM_UserMarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.STGMEDIUM)]], [['stdcall']]))('STGMEDIUM_UserMarshal');},
    STGMEDIUM_UserUnmarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.STGMEDIUM)]], [['stdcall']]))('STGMEDIUM_UserUnmarshal');},
    STGMEDIUM_UserFree: function() {return (Fn(null, [[Pointer(T.ULONG)], [Pointer(T.STGMEDIUM)]], [['stdcall']]))('STGMEDIUM_UserFree');},
    ASYNC_STGMEDIUM_UserSize: function() {return (Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.ASYNC_STGMEDIUM)]], [['stdcall']]))('ASYNC_STGMEDIUM_UserSize');},
    ASYNC_STGMEDIUM_UserMarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.ASYNC_STGMEDIUM)]], [['stdcall']]))('ASYNC_STGMEDIUM_UserMarshal');},
    ASYNC_STGMEDIUM_UserUnmarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.ASYNC_STGMEDIUM)]], [['stdcall']]))('ASYNC_STGMEDIUM_UserUnmarshal');},
    ASYNC_STGMEDIUM_UserFree: function() {return (Fn(null, [[Pointer(T.ULONG)], [Pointer(T.ASYNC_STGMEDIUM)]], [['stdcall']]))('ASYNC_STGMEDIUM_UserFree');},
    FLAG_STGMEDIUM_UserSize: function() {return (Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.FLAG_STGMEDIUM)]], [['stdcall']]))('FLAG_STGMEDIUM_UserSize');},
    FLAG_STGMEDIUM_UserMarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.FLAG_STGMEDIUM)]], [['stdcall']]))('FLAG_STGMEDIUM_UserMarshal');},
    FLAG_STGMEDIUM_UserUnmarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.FLAG_STGMEDIUM)]], [['stdcall']]))('FLAG_STGMEDIUM_UserUnmarshal');},
    FLAG_STGMEDIUM_UserFree: function() {return (Fn(null, [[Pointer(T.ULONG)], [Pointer(T.FLAG_STGMEDIUM)]], [['stdcall']]))('FLAG_STGMEDIUM_UserFree');},
    HBITMAP_UserSize: function() {return (Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.HBITMAP)]], [['stdcall']]))('HBITMAP_UserSize');},
    HBITMAP_UserMarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HBITMAP)]], [['stdcall']]))('HBITMAP_UserMarshal');},
    HBITMAP_UserUnmarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HBITMAP)]], [['stdcall']]))('HBITMAP_UserUnmarshal');},
    HBITMAP_UserFree: function() {return (Fn(null, [[Pointer(T.ULONG)], [Pointer(T.HBITMAP)]], [['stdcall']]))('HBITMAP_UserFree');},
    IID_IRpcChannel: function() {return (T.IID)('IID_IRpcChannel');},
    IID_IRpcStub: function() {return (T.IID)('IID_IRpcStub');},
    IID_IStubManager: function() {return (T.IID)('IID_IStubManager');},
    IID_IRpcProxy: function() {return (T.IID)('IID_IRpcProxy');},
    IID_IProxyManager: function() {return (T.IID)('IID_IProxyManager');},
    IID_IPSFactory: function() {return (T.IID)('IID_IPSFactory');},
    IID_IInternalMoniker: function() {return (T.IID)('IID_IInternalMoniker');},
    IID_IDfReserved1: function() {return (T.IID)('IID_IDfReserved1');},
    IID_IDfReserved2: function() {return (T.IID)('IID_IDfReserved2');},
    IID_IDfReserved3: function() {return (T.IID)('IID_IDfReserved3');},
    CLSID_StdMarshal: function() {return (T.CLSID)('CLSID_StdMarshal');},
    CLSID_AggStdMarshal: function() {return (T.CLSID)('CLSID_AggStdMarshal');},
    CLSID_StdAsyncActManager: function() {return (T.CLSID)('CLSID_StdAsyncActManager');},
    IID_IStub: function() {return (T.IID)('IID_IStub');},
    IID_IProxy: function() {return (T.IID)('IID_IProxy');},
    IID_IEnumGeneric: function() {return (T.IID)('IID_IEnumGeneric');},
    IID_IEnumHolder: function() {return (T.IID)('IID_IEnumHolder');},
    IID_IEnumCallback: function() {return (T.IID)('IID_IEnumCallback');},
    IID_IOleManager: function() {return (T.IID)('IID_IOleManager');},
    IID_IOlePresObj: function() {return (T.IID)('IID_IOlePresObj');},
    IID_IDebug: function() {return (T.IID)('IID_IDebug');},
    IID_IDebugStream: function() {return (T.IID)('IID_IDebugStream');},
    CLSID_PSGenObject: function() {return (T.CLSID)('CLSID_PSGenObject');},
    CLSID_PSClientSite: function() {return (T.CLSID)('CLSID_PSClientSite');},
    CLSID_PSClassObject: function() {return (T.CLSID)('CLSID_PSClassObject');},
    CLSID_PSInPlaceActive: function() {return (T.CLSID)('CLSID_PSInPlaceActive');},
    CLSID_PSInPlaceFrame: function() {return (T.CLSID)('CLSID_PSInPlaceFrame');},
    CLSID_PSDragDrop: function() {return (T.CLSID)('CLSID_PSDragDrop');},
    CLSID_PSBindCtx: function() {return (T.CLSID)('CLSID_PSBindCtx');},
    CLSID_PSEnumerators: function() {return (T.CLSID)('CLSID_PSEnumerators');},
    CLSID_StaticMetafile: function() {return (T.CLSID)('CLSID_StaticMetafile');},
    CLSID_StaticDib: function() {return (T.CLSID)('CLSID_StaticDib');},
    CID_CDfsVolume: function() {return (T.CLSID)('CID_CDfsVolume');},
    CLSID_DCOMAccessControl: function() {return (T.CLSID)('CLSID_DCOMAccessControl');},
    CLSID_StdGlobalInterfaceTable: function() {return (T.CLSID)('CLSID_StdGlobalInterfaceTable');},
    CLSID_ComBinding: function() {return (T.CLSID)('CLSID_ComBinding');},
    CLSID_StdEvent: function() {return (T.CLSID)('CLSID_StdEvent');},
    CLSID_ManualResetEvent: function() {return (T.CLSID)('CLSID_ManualResetEvent');},
    CLSID_SynchronizeContainer: function() {return (T.CLSID)('CLSID_SynchronizeContainer');},
    CLSID_CCDFormKrnl: function() {return (T.CLSID)('CLSID_CCDFormKrnl');},
    CLSID_CCDPropertyPage: function() {return (T.CLSID)('CLSID_CCDPropertyPage');},
    CLSID_CCDFormDialog: function() {return (T.CLSID)('CLSID_CCDFormDialog');},
    CLSID_CCDCommandButton: function() {return (T.CLSID)('CLSID_CCDCommandButton');},
    CLSID_CCDComboBox: function() {return (T.CLSID)('CLSID_CCDComboBox');},
    CLSID_CCDTextBox: function() {return (T.CLSID)('CLSID_CCDTextBox');},
    CLSID_CCDCheckBox: function() {return (T.CLSID)('CLSID_CCDCheckBox');},
    CLSID_CCDLabel: function() {return (T.CLSID)('CLSID_CCDLabel');},
    CLSID_CCDOptionButton: function() {return (T.CLSID)('CLSID_CCDOptionButton');},
    CLSID_CCDListBox: function() {return (T.CLSID)('CLSID_CCDListBox');},
    CLSID_CCDScrollBar: function() {return (T.CLSID)('CLSID_CCDScrollBar');},
    CLSID_CCDGroupBox: function() {return (T.CLSID)('CLSID_CCDGroupBox');},
    CLSID_CCDGeneralPropertyPage: function() {return (T.CLSID)('CLSID_CCDGeneralPropertyPage');},
    CLSID_CCDGenericPropertyPage: function() {return (T.CLSID)('CLSID_CCDGenericPropertyPage');},
    CLSID_CCDFontPropertyPage: function() {return (T.CLSID)('CLSID_CCDFontPropertyPage');},
    CLSID_CCDColorPropertyPage: function() {return (T.CLSID)('CLSID_CCDColorPropertyPage');},
    CLSID_CCDLabelPropertyPage: function() {return (T.CLSID)('CLSID_CCDLabelPropertyPage');},
    CLSID_CCDCheckBoxPropertyPage: function() {return (T.CLSID)('CLSID_CCDCheckBoxPropertyPage');},
    CLSID_CCDTextBoxPropertyPage: function() {return (T.CLSID)('CLSID_CCDTextBoxPropertyPage');},
    CLSID_CCDOptionButtonPropertyPage: function() {return (T.CLSID)('CLSID_CCDOptionButtonPropertyPage');},
    CLSID_CCDListBoxPropertyPage: function() {return (T.CLSID)('CLSID_CCDListBoxPropertyPage');},
    CLSID_CCDCommandButtonPropertyPage: function() {return (T.CLSID)('CLSID_CCDCommandButtonPropertyPage');},
    CLSID_CCDComboBoxPropertyPage: function() {return (T.CLSID)('CLSID_CCDComboBoxPropertyPage');},
    CLSID_CCDScrollBarPropertyPage: function() {return (T.CLSID)('CLSID_CCDScrollBarPropertyPage');},
    CLSID_CCDGroupBoxPropertyPage: function() {return (T.CLSID)('CLSID_CCDGroupBoxPropertyPage');},
    CLSID_CCDXObjectPropertyPage: function() {return (T.CLSID)('CLSID_CCDXObjectPropertyPage');},
    CLSID_CStdPropertyFrame: function() {return (T.CLSID)('CLSID_CStdPropertyFrame');},
    CLSID_CFormPropertyPage: function() {return (T.CLSID)('CLSID_CFormPropertyPage');},
    CLSID_CGridPropertyPage: function() {return (T.CLSID)('CLSID_CGridPropertyPage');},
    CLSID_CWSJArticlePage: function() {return (T.CLSID)('CLSID_CWSJArticlePage');},
    CLSID_CSystemPage: function() {return (T.CLSID)('CLSID_CSystemPage');},
    CLSID_IdentityUnmarshal: function() {return (T.CLSID)('CLSID_IdentityUnmarshal');},
    CLSID_InProcFreeMarshaler: function() {return (T.CLSID)('CLSID_InProcFreeMarshaler');},
    CLSID_Picture_Metafile: function() {return (T.CLSID)('CLSID_Picture_Metafile');},
    CLSID_Picture_EnhMetafile: function() {return (T.CLSID)('CLSID_Picture_EnhMetafile');},
    CLSID_Picture_Dib: function() {return (T.CLSID)('CLSID_Picture_Dib');},
    GUID_TRISTATE: function() {return (T.GUID)('GUID_TRISTATE');},
    CoBuildVersion: function() {return (Fn(T.DWORD, [[null]], [['stdcall']]))('CoBuildVersion');},
    CoInitialize: function() {return (Fn(T.HRESULT, [[T.LPVOID, 'lpReserved']], [['stdcall']]))('CoInitialize');},
    CoInitializeEx: function() {return (Fn(T.HRESULT, [[T.LPVOID, 'lpReserved'], [T.DWORD, 'dwCoInit']], [['stdcall']]))('CoInitializeEx');},
    CoUninitialize: function() {return (Fn(null, [[null]], [['stdcall']]))('CoUninitialize');},
    CoGetCurrentProcess: function() {return (Fn(T.DWORD, [[null]], [['stdcall']]))('CoGetCurrentProcess');},
    CoLoadLibrary: function() {return (Fn(T.HINSTANCE, [[T.LPOLESTR, 'lpszLibName'], [T.BOOL, 'bAutoFree']], [['stdcall']]))('CoLoadLibrary');},
    CoFreeAllLibraries: function() {return (Fn(null, [[null]], [['stdcall']]))('CoFreeAllLibraries');},
    CoFreeLibrary: function() {return (Fn(null, [[T.HINSTANCE, 'hLibrary']], [['stdcall']]))('CoFreeLibrary');},
    CoFreeUnusedLibraries: function() {return (Fn(null, [[null]], [['stdcall']]))('CoFreeUnusedLibraries');},
    CoFreeUnusedLibrariesEx: function() {return (Fn(null, [[T.DWORD, 'dwUnloadDelay'], [T.DWORD, 'dwReserved']], [['stdcall']]))('CoFreeUnusedLibrariesEx');},
    CoCreateInstance: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'rclsid'], [T.LPUNKNOWN, 'pUnkOuter'], [T.DWORD, 'dwClsContext'], [Pointer(T.IID), 'iid'], [Pointer(T.LPVOID), 'ppv']], [['stdcall']]))('CoCreateInstance');},
    CoCreateInstanceEx: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'rclsid'], [T.LPUNKNOWN, 'pUnkOuter'], [T.DWORD, 'dwClsContext'], [Pointer(T.COSERVERINFO), 'pServerInfo'], [T.ULONG, 'cmq'], [Pointer(T.MULTI_QI), 'pResults']], [['stdcall']]))('CoCreateInstanceEx');},
    CoGetInstanceFromFile: function() {return (Fn(T.HRESULT, [[Pointer(T.COSERVERINFO), 'pServerInfo'], [Pointer(T.CLSID), 'pClsid'], [Pointer(T.IUnknown), 'punkOuter'], [T.DWORD, 'dwClsCtx'], [T.DWORD, 'grfMode'], [Pointer(T.OLECHAR), 'pwszName'], [T.DWORD, 'dwCount'], [Pointer(T.MULTI_QI), 'pResults']], [['stdcall']]))('CoGetInstanceFromFile');},
    CoGetInstanceFromIStorage: function() {return (Fn(T.HRESULT, [[Pointer(T.COSERVERINFO), 'pServerInfo'], [Pointer(T.CLSID), 'pClsid'], [Pointer(T.IUnknown), 'punkOuter'], [T.DWORD, 'dwClsCtx'], [Pointer(T.IStorage), 'pstg'], [T.DWORD, 'dwCount'], [Pointer(T.MULTI_QI), 'pResults']], [['stdcall']]))('CoGetInstanceFromIStorage');},
    CoGetMalloc: function() {return (Fn(T.HRESULT, [[T.DWORD, 'dwMemContext'], [Pointer(T.LPMALLOC), 'lpMalloc']], [['stdcall']]))('CoGetMalloc');},
    CoTaskMemAlloc: function() {return (Fn(T.LPVOID, [[T.ULONG, 'size']], [['stdcall'], ['alloc_size', {"__rule":"constant","_0":"1"}]]))('CoTaskMemAlloc');},
    CoTaskMemFree: function() {return (Fn(null, [[T.LPVOID, 'ptr']], [['stdcall']]))('CoTaskMemFree');},
    CoTaskMemRealloc: function() {return (Fn(T.LPVOID, [[T.LPVOID, 'ptr'], [T.ULONG, 'size']], [['stdcall']]))('CoTaskMemRealloc');},
    CoRegisterMallocSpy: function() {return (Fn(T.HRESULT, [[T.LPMALLOCSPY, 'pMallocSpy']], [['stdcall']]))('CoRegisterMallocSpy');},
    CoRevokeMallocSpy: function() {return (Fn(T.HRESULT, [[null]], [['stdcall']]))('CoRevokeMallocSpy');},
    CoGetContextToken: function() {return (Fn(T.HRESULT, [[Pointer(T.ULONG_PTR), 'token']], [['stdcall']]))('CoGetContextToken');},
    CoGetClassObject: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'rclsid'], [T.DWORD, 'dwClsContext'], [Pointer(T.COSERVERINFO), 'pServerInfo'], [Pointer(T.IID), 'iid'], [Pointer(T.LPVOID), 'ppv']], [['stdcall']]))('CoGetClassObject');},
    CoRegisterClassObject: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'rclsid'], [T.LPUNKNOWN, 'pUnk'], [T.DWORD, 'dwClsContext'], [T.DWORD, 'flags'], [T.LPDWORD, 'lpdwRegister']], [['stdcall']]))('CoRegisterClassObject');},
    CoRevokeClassObject: function() {return (Fn(T.HRESULT, [[T.DWORD, 'dwRegister']], [['stdcall']]))('CoRevokeClassObject');},
    CoGetPSClsid: function() {return (Fn(T.HRESULT, [[Pointer(T.IID), 'riid'], [Pointer(T.CLSID), 'pclsid']], [['stdcall']]))('CoGetPSClsid');},
    CoRegisterPSClsid: function() {return (Fn(T.HRESULT, [[Pointer(T.IID), 'riid'], [Pointer(T.CLSID), 'rclsid']], [['stdcall']]))('CoRegisterPSClsid');},
    CoRegisterSurrogate: function() {return (Fn(T.HRESULT, [[T.LPSURROGATE, 'pSurrogate']], [['stdcall']]))('CoRegisterSurrogate');},
    CoSuspendClassObjects: function() {return (Fn(T.HRESULT, [[null]], [['stdcall']]))('CoSuspendClassObjects');},
    CoResumeClassObjects: function() {return (Fn(T.HRESULT, [[null]], [['stdcall']]))('CoResumeClassObjects');},
    CoAddRefServerProcess: function() {return (Fn(T.ULONG, [[null]], [['stdcall']]))('CoAddRefServerProcess');},
    CoReleaseServerProcess: function() {return (Fn(T.ULONG, [[null]], [['stdcall']]))('CoReleaseServerProcess');},
    CoCreateFreeThreadedMarshaler: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN, 'punkOuter'], [Pointer(T.LPUNKNOWN), 'ppunkMarshal']], [['stdcall']]))('CoCreateFreeThreadedMarshaler');},
    CoGetInterfaceAndReleaseStream: function() {return (Fn(T.HRESULT, [[T.LPSTREAM, 'pStm'], [Pointer(T.IID), 'iid'], [Pointer(T.LPVOID), 'ppv']], [['stdcall']]))('CoGetInterfaceAndReleaseStream');},
    CoGetMarshalSizeMax: function() {return (Fn(T.HRESULT, [[Pointer(T.ULONG), 'pulSize'], [Pointer(T.IID), 'riid'], [T.LPUNKNOWN, 'pUnk'], [T.DWORD, 'dwDestContext'], [T.LPVOID, 'pvDestContext'], [T.DWORD, 'mshlflags']], [['stdcall']]))('CoGetMarshalSizeMax');},
    CoGetStandardMarshal: function() {return (Fn(T.HRESULT, [[Pointer(T.IID), 'riid'], [T.LPUNKNOWN, 'pUnk'], [T.DWORD, 'dwDestContext'], [T.LPVOID, 'pvDestContext'], [T.DWORD, 'mshlflags'], [Pointer(T.LPMARSHAL), 'ppMarshal']], [['stdcall']]))('CoGetStandardMarshal');},
    CoMarshalHresult: function() {return (Fn(T.HRESULT, [[T.LPSTREAM, 'pstm'], [T.HRESULT, 'hresult']], [['stdcall']]))('CoMarshalHresult');},
    CoMarshalInterface: function() {return (Fn(T.HRESULT, [[T.LPSTREAM, 'pStm'], [Pointer(T.IID), 'riid'], [T.LPUNKNOWN, 'pUnk'], [T.DWORD, 'dwDestContext'], [T.LPVOID, 'pvDestContext'], [T.DWORD, 'mshlflags']], [['stdcall']]))('CoMarshalInterface');},
    CoMarshalInterThreadInterfaceInStream: function() {return (Fn(T.HRESULT, [[Pointer(T.IID), 'riid'], [T.LPUNKNOWN, 'pUnk'], [Pointer(T.LPSTREAM), 'ppStm']], [['stdcall']]))('CoMarshalInterThreadInterfaceInStream');},
    CoReleaseMarshalData: function() {return (Fn(T.HRESULT, [[T.LPSTREAM, 'pStm']], [['stdcall']]))('CoReleaseMarshalData');},
    CoDisconnectObject: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN, 'lpUnk'], [T.DWORD, 'reserved']], [['stdcall']]))('CoDisconnectObject');},
    CoUnmarshalHresult: function() {return (Fn(T.HRESULT, [[T.LPSTREAM, 'pstm'], [Pointer(T.HRESULT), 'phresult']], [['stdcall']]))('CoUnmarshalHresult');},
    CoUnmarshalInterface: function() {return (Fn(T.HRESULT, [[T.LPSTREAM, 'pStm'], [Pointer(T.IID), 'riid'], [Pointer(T.LPVOID), 'ppv']], [['stdcall']]))('CoUnmarshalInterface');},
    CoLockObjectExternal: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN, 'pUnk'], [T.BOOL, 'fLock'], [T.BOOL, 'fLastUnlockReleases']], [['stdcall']]))('CoLockObjectExternal');},
    CoIsHandlerConnected: function() {return (Fn(T.BOOL, [[T.LPUNKNOWN, 'pUnk']], [['stdcall']]))('CoIsHandlerConnected');},
    CoInitializeSecurity: function() {return (Fn(T.HRESULT, [[T.PSECURITY_DESCRIPTOR, 'pSecDesc'], [T.LONG, 'cAuthSvc'], [Pointer(T.SOLE_AUTHENTICATION_SERVICE), 'asAuthSvc'], [Pointer(null), 'pReserved1'], [T.DWORD, 'dwAuthnLevel'], [T.DWORD, 'dwImpLevel'], [Pointer(null), 'pReserved2'], [T.DWORD, 'dwCapabilities'], [Pointer(null), 'pReserved3']], [['stdcall']]))('CoInitializeSecurity');},
    CoGetCallContext: function() {return (Fn(T.HRESULT, [[Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppInterface']], [['stdcall']]))('CoGetCallContext');},
    CoSwitchCallContext: function() {return (Fn(T.HRESULT, [[Pointer(T.IUnknown), 'pContext'], [Pointer(Pointer(T.IUnknown)), 'ppOldContext']], [['stdcall']]))('CoSwitchCallContext');},
    CoQueryAuthenticationServices: function() {return (Fn(T.HRESULT, [[Pointer(T.DWORD), 'pcAuthSvc'], [Pointer(Pointer(T.SOLE_AUTHENTICATION_SERVICE)), 'asAuthSvc']], [['stdcall']]))('CoQueryAuthenticationServices');},
    CoQueryProxyBlanket: function() {return (Fn(T.HRESULT, [[Pointer(T.IUnknown), 'pProxy'], [Pointer(T.DWORD), 'pwAuthnSvc'], [Pointer(T.DWORD), 'pAuthzSvc'], [Pointer(Pointer(T.OLECHAR)), 'pServerPrincName'], [Pointer(T.DWORD), 'pAuthnLevel'], [Pointer(T.DWORD), 'pImpLevel'], [Pointer(T.RPC_AUTH_IDENTITY_HANDLE), 'pAuthInfo'], [Pointer(T.DWORD), 'pCapabilities']], [['stdcall']]))('CoQueryProxyBlanket');},
    CoSetProxyBlanket: function() {return (Fn(T.HRESULT, [[Pointer(T.IUnknown), 'pProxy'], [T.DWORD, 'dwAuthnSvc'], [T.DWORD, 'dwAuthzSvc'], [Pointer(T.OLECHAR), 'pServerPrincName'], [T.DWORD, 'dwAuthnLevel'], [T.DWORD, 'dwImpLevel'], [T.RPC_AUTH_IDENTITY_HANDLE, 'pAuthInfo'], [T.DWORD, 'dwCapabilities']], [['stdcall']]))('CoSetProxyBlanket');},
    CoCopyProxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUnknown), 'pProxy'], [Pointer(Pointer(T.IUnknown)), 'ppCopy']], [['stdcall']]))('CoCopyProxy');},
    CoImpersonateClient: function() {return (Fn(T.HRESULT, [[null]], [['stdcall']]))('CoImpersonateClient');},
    CoQueryClientBlanket: function() {return (Fn(T.HRESULT, [[Pointer(T.DWORD), 'pAuthnSvc'], [Pointer(T.DWORD), 'pAuthzSvc'], [Pointer(Pointer(T.OLECHAR)), 'pServerPrincName'], [Pointer(T.DWORD), 'pAuthnLevel'], [Pointer(T.DWORD), 'pImpLevel'], [Pointer(T.RPC_AUTHZ_HANDLE), 'pPrivs'], [Pointer(T.DWORD), 'pCapabilities']], [['stdcall']]))('CoQueryClientBlanket');},
    CoRevertToSelf: function() {return (Fn(T.HRESULT, [[null]], [['stdcall']]))('CoRevertToSelf');},
    CoGetTreatAsClass: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsidOld'], [T.LPCLSID, 'pClsidNew']], [['stdcall']]))('CoGetTreatAsClass');},
    CoTreatAsClass: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsidOld'], [Pointer(T.CLSID), 'clsidNew']], [['stdcall']]))('CoTreatAsClass');},
    CoAllowSetForegroundWindow: function() {return (Fn(T.HRESULT, [[Pointer(T.IUnknown), 'pUnk'], [T.LPVOID, 'lpvReserved']], [['stdcall']]))('CoAllowSetForegroundWindow');},
    CoGetObjectContext: function() {return (Fn(T.HRESULT, [[Pointer(T.IID), 'riid'], [Pointer(T.LPVOID), 'ppv']], [['stdcall']]))('CoGetObjectContext');},
    CoCreateGuid: function() {return (Fn(T.HRESULT, [[Pointer(T.GUID), 'pguid']], [['stdcall']]))('CoCreateGuid');},
    CoIsOle1Class: function() {return (Fn(T.BOOL, [[Pointer(T.CLSID), 'rclsid']], [['stdcall']]))('CoIsOle1Class');},
    CoDosDateTimeToFileTime: function() {return (Fn(T.BOOL, [[T.WORD, 'nDosDate'], [T.WORD, 'nDosTime'], [Pointer(T.FILETIME), 'lpFileTime']], [['stdcall']]))('CoDosDateTimeToFileTime');},
    CoFileTimeToDosDateTime: function() {return (Fn(T.BOOL, [[Pointer(T.FILETIME), 'lpFileTime'], [Pointer(T.WORD), 'lpDosDate'], [Pointer(T.WORD), 'lpDosTime']], [['stdcall']]))('CoFileTimeToDosDateTime');},
    CoFileTimeNow: function() {return (Fn(T.HRESULT, [[Pointer(T.FILETIME), 'lpFileTime']], [['stdcall']]))('CoFileTimeNow');},
    CoRegisterMessageFilter: function() {return (Fn(T.HRESULT, [[T.LPMESSAGEFILTER, 'lpMessageFilter'], [Pointer(T.LPMESSAGEFILTER), 'lplpMessageFilter']], [['stdcall']]))('CoRegisterMessageFilter');},
    CoRegisterChannelHook: function() {return (Fn(T.HRESULT, [[Pointer(T.GUID), 'ExtensionGuid'], [Pointer(T.IChannelHook), 'pChannelHook']], [['stdcall']]))('CoRegisterChannelHook');},
    CoWaitForMultipleHandles: function() {return (Fn(T.HRESULT, [[T.DWORD, 'dwFlags'], [T.DWORD, 'dwTimeout'], [T.ULONG, 'cHandles'], [T.LPHANDLE, 'pHandles'], [T.LPDWORD, 'lpdwindex']], [['stdcall']]))('CoWaitForMultipleHandles');},
    StringFromCLSID: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'id'], [Pointer(T.LPOLESTR)]], [['stdcall']]))('StringFromCLSID');},
    CLSIDFromString: function() {return (Fn(T.HRESULT, [[T.LPCOLESTR], [T.LPCLSID]], [['stdcall']]))('CLSIDFromString');},
    CLSIDFromProgID: function() {return (Fn(T.HRESULT, [[T.LPCOLESTR, 'progid'], [T.LPCLSID, 'riid']], [['stdcall']]))('CLSIDFromProgID');},
    ProgIDFromCLSID: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsid'], [Pointer(T.LPOLESTR), 'lplpszProgID']], [['stdcall']]))('ProgIDFromCLSID');},
    StringFromGUID2: function() {return (Fn(T.INT, [[Pointer(T.GUID), 'id'], [T.LPOLESTR, 'str'], [T.INT, 'cmax']], [['stdcall']]))('StringFromGUID2');},
    DllGetClassObject: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'rclsid'], [Pointer(T.IID), 'riid'], [Pointer(T.LPVOID), 'ppv']], [['stdcall']]))('DllGetClassObject');},
    DllCanUnloadNow: function() {return (Fn(T.HRESULT, [[null]], [['stdcall']]))('DllCanUnloadNow');},
    CreateDataAdviseHolder: function() {return (Fn(T.HRESULT, [[Pointer(T.LPDATAADVISEHOLDER), 'ppDAHolder']], [['stdcall']]))('CreateDataAdviseHolder');},
    CreateDataCache: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN, 'pUnkOuter'], [Pointer(T.CLSID), 'rclsid'], [Pointer(T.IID), 'iid'], [Pointer(T.LPVOID), 'ppv']], [['stdcall']]))('CreateDataCache');},
    BindMoniker: function() {return (Fn(T.HRESULT, [[T.LPMONIKER, 'pmk'], [T.DWORD, 'grfOpt'], [Pointer(T.IID), 'iidResult'], [Pointer(T.LPVOID), 'ppvResult']], [['stdcall']]))('BindMoniker');},
    CoGetObject: function() {return (Fn(T.HRESULT, [[T.LPCWSTR, 'pszName'], [Pointer(T.BIND_OPTS), 'pBindOptions'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']], [['stdcall']]))('CoGetObject');},
    CreateAntiMoniker: function() {return (Fn(T.HRESULT, [[Pointer(T.LPMONIKER), 'ppmk']], [['stdcall']]))('CreateAntiMoniker');},
    CreateBindCtx: function() {return (Fn(T.HRESULT, [[T.DWORD, 'reserved'], [Pointer(T.LPBC), 'ppbc']], [['stdcall']]))('CreateBindCtx');},
    CreateClassMoniker: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'rclsid'], [Pointer(T.LPMONIKER), 'ppmk']], [['stdcall']]))('CreateClassMoniker');},
    CreateFileMoniker: function() {return (Fn(T.HRESULT, [[T.LPCOLESTR, 'lpszPathName'], [Pointer(T.LPMONIKER), 'ppmk']], [['stdcall']]))('CreateFileMoniker');},
    CreateGenericComposite: function() {return (Fn(T.HRESULT, [[T.LPMONIKER, 'pmkFirst'], [T.LPMONIKER, 'pmkRest'], [Pointer(T.LPMONIKER), 'ppmkComposite']], [['stdcall']]))('CreateGenericComposite');},
    CreateItemMoniker: function() {return (Fn(T.HRESULT, [[T.LPCOLESTR, 'lpszDelim'], [T.LPCOLESTR, 'lpszItem'], [Pointer(T.LPMONIKER), 'ppmk']], [['stdcall']]))('CreateItemMoniker');},
    CreateObjrefMoniker: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN, 'punk'], [Pointer(T.LPMONIKER), 'ppmk']], [['stdcall']]))('CreateObjrefMoniker');},
    CreatePointerMoniker: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN, 'punk'], [Pointer(T.LPMONIKER), 'ppmk']], [['stdcall']]))('CreatePointerMoniker');},
    GetClassFile: function() {return (Fn(T.HRESULT, [[T.LPCOLESTR, 'filePathName'], [Pointer(T.CLSID), 'pclsid']], [['stdcall']]))('GetClassFile');},
    GetRunningObjectTable: function() {return (Fn(T.HRESULT, [[T.DWORD, 'reserved'], [Pointer(T.LPRUNNINGOBJECTTABLE), 'pprot']], [['stdcall']]))('GetRunningObjectTable');},
    MkParseDisplayName: function() {return (Fn(T.HRESULT, [[T.LPBC, 'pbc'], [T.LPCOLESTR, 'szUserName'], [Pointer(T.ULONG), 'pchEaten'], [Pointer(T.LPMONIKER), 'ppmk']], [['stdcall']]))('MkParseDisplayName');},
    MonikerCommonPrefixWith: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'pmkThis'], [Pointer(T.IMoniker), 'pmkOther'], [Pointer(Pointer(T.IMoniker)), 'ppmkCommon']], [['stdcall']]))('MonikerCommonPrefixWith');},
    MonikerRelativePathTo: function() {return (Fn(T.HRESULT, [[T.LPMONIKER, 'pmkSrc'], [T.LPMONIKER, 'pmkDest'], [Pointer(T.LPMONIKER), 'ppmkRelPath'], [T.BOOL, 'dwReserved']], [['stdcall']]))('MonikerRelativePathTo');},
    StgCreateDocfile: function() {return (Fn(T.HRESULT, [[T.LPCOLESTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'reserved'], [Pointer(Pointer(T.IStorage)), 'ppstgOpen']], [['stdcall']]))('StgCreateDocfile');},
    StgCreateStorageEx: function() {return (Fn(T.HRESULT, [[Pointer(T.WCHAR)], [T.DWORD], [T.DWORD], [T.DWORD], [Pointer(T.STGOPTIONS)], [Pointer(null)], [Pointer(T.IID)], [Pointer(Pointer(null))]], [['stdcall']]))('StgCreateStorageEx');},
    StgIsStorageFile: function() {return (Fn(T.HRESULT, [[T.LPCOLESTR, 'fn']], [['stdcall']]))('StgIsStorageFile');},
    StgIsStorageILockBytes: function() {return (Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'plkbyt']], [['stdcall']]))('StgIsStorageILockBytes');},
    StgOpenStorage: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR), 'pwcsName'], [Pointer(T.IStorage), 'pstgPriority'], [T.DWORD, 'grfMode'], [T.SNB, 'snbExclude'], [T.DWORD, 'reserved'], [Pointer(Pointer(T.IStorage)), 'ppstgOpen']], [['stdcall']]))('StgOpenStorage');},
    StgOpenStorageEx: function() {return (Fn(T.HRESULT, [[Pointer(T.WCHAR), 'pwcwName'], [T.DWORD, 'grfMode'], [T.DWORD, 'stgfmt'], [T.DWORD, 'grfAttrs'], [Pointer(T.STGOPTIONS), 'pStgOptions'], [Pointer(null), 'reserved'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppObjectOpen']], [['stdcall']]))('StgOpenStorageEx');},
    StgCreateDocfileOnILockBytes: function() {return (Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'plkbyt'], [T.DWORD, 'grfMode'], [T.DWORD, 'reserved'], [Pointer(Pointer(T.IStorage)), 'ppstgOpen']], [['stdcall']]))('StgCreateDocfileOnILockBytes');},
    StgOpenStorageOnILockBytes: function() {return (Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'plkbyt'], [Pointer(T.IStorage), 'pstgPriority'], [T.DWORD, 'grfMode'], [T.SNB, 'snbExclude'], [T.DWORD, 'reserved'], [Pointer(Pointer(T.IStorage)), 'ppstgOpen']], [['stdcall']]))('StgOpenStorageOnILockBytes');},
    StgSetTimes: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR), 'lpszName'], [Pointer(T.FILETIME), 'pctime'], [Pointer(T.FILETIME), 'patime'], [Pointer(T.FILETIME), 'pmtime']], [['stdcall']]))('StgSetTimes');},
    IOLETypes_v0_0_c_ifspec: function() {return (T.RPC_IF_HANDLE)('IOLETypes_v0_0_c_ifspec');},
    IOLETypes_v0_0_s_ifspec: function() {return (T.RPC_IF_HANDLE)('IOLETypes_v0_0_s_ifspec');},
    IID_IOleWindow: function() {return (T.GUID)('IID_IOleWindow');},
    IOleWindow_GetWindow_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleWindow), 'This'], [Pointer(T.HWND), 'phwnd']], [['stdcall']]))('IOleWindow_GetWindow_Proxy');},
    IOleWindow_GetWindow_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleWindow_GetWindow_Stub');},
    IOleWindow_ContextSensitiveHelp_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleWindow), 'This'], [T.BOOL, 'fEnterMode']], [['stdcall']]))('IOleWindow_ContextSensitiveHelp_Proxy');},
    IOleWindow_ContextSensitiveHelp_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleWindow_ContextSensitiveHelp_Stub');},
    IID_IOleInPlaceObject: function() {return (T.GUID)('IID_IOleInPlaceObject');},
    IOleInPlaceObject_InPlaceDeactivate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This']], [['stdcall']]))('IOleInPlaceObject_InPlaceDeactivate_Proxy');},
    IOleInPlaceObject_InPlaceDeactivate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceObject_InPlaceDeactivate_Stub');},
    IOleInPlaceObject_UIDeactivate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This']], [['stdcall']]))('IOleInPlaceObject_UIDeactivate_Proxy');},
    IOleInPlaceObject_UIDeactivate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceObject_UIDeactivate_Stub');},
    IOleInPlaceObject_SetObjectRects_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This'], [T.LPCRECT, 'lprcPosRect'], [T.LPCRECT, 'lprcClipRect']], [['stdcall']]))('IOleInPlaceObject_SetObjectRects_Proxy');},
    IOleInPlaceObject_SetObjectRects_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceObject_SetObjectRects_Stub');},
    IOleInPlaceObject_ReactivateAndUndo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This']], [['stdcall']]))('IOleInPlaceObject_ReactivateAndUndo_Proxy');},
    IOleInPlaceObject_ReactivateAndUndo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceObject_ReactivateAndUndo_Stub');},
    IID_IOleInPlaceUIWindow: function() {return (T.GUID)('IID_IOleInPlaceUIWindow');},
    IOleInPlaceUIWindow_GetBorder_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [T.LPRECT, 'lprectBorder']], [['stdcall']]))('IOleInPlaceUIWindow_GetBorder_Proxy');},
    IOleInPlaceUIWindow_GetBorder_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceUIWindow_GetBorder_Stub');},
    IOleInPlaceUIWindow_RequestBorderSpace_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [T.LPCBORDERWIDTHS, 'pborderwidths']], [['stdcall']]))('IOleInPlaceUIWindow_RequestBorderSpace_Proxy');},
    IOleInPlaceUIWindow_RequestBorderSpace_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceUIWindow_RequestBorderSpace_Stub');},
    IOleInPlaceUIWindow_SetBorderSpace_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [T.LPCBORDERWIDTHS, 'pborderwidths']], [['stdcall']]))('IOleInPlaceUIWindow_SetBorderSpace_Proxy');},
    IOleInPlaceUIWindow_SetBorderSpace_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceUIWindow_SetBorderSpace_Stub');},
    IOleInPlaceUIWindow_SetActiveObject_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [Pointer(T.IOleInPlaceActiveObject), 'pActiveObject'], [T.LPCOLESTR, 'pszObjName']], [['stdcall']]))('IOleInPlaceUIWindow_SetActiveObject_Proxy');},
    IOleInPlaceUIWindow_SetActiveObject_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceUIWindow_SetActiveObject_Stub');},
    IID_IOleInPlaceFrame: function() {return (T.GUID)('IID_IOleInPlaceFrame');},
    IOleInPlaceFrame_InsertMenus_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.HMENU, 'hmenuShared'], [T.LPOLEMENUGROUPWIDTHS, 'lpMenuWidths']], [['stdcall']]))('IOleInPlaceFrame_InsertMenus_Proxy');},
    IOleInPlaceFrame_InsertMenus_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceFrame_InsertMenus_Stub');},
    IOleInPlaceFrame_SetMenu_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.HMENU, 'hmenuShared'], [T.HOLEMENU, 'holemenu'], [T.HWND, 'hwndActiveObject']], [['stdcall']]))('IOleInPlaceFrame_SetMenu_Proxy');},
    IOleInPlaceFrame_SetMenu_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceFrame_SetMenu_Stub');},
    IOleInPlaceFrame_RemoveMenus_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.HMENU, 'hmenuShared']], [['stdcall']]))('IOleInPlaceFrame_RemoveMenus_Proxy');},
    IOleInPlaceFrame_RemoveMenus_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceFrame_RemoveMenus_Stub');},
    IOleInPlaceFrame_SetStatusText_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.LPCOLESTR, 'pszStatusText']], [['stdcall']]))('IOleInPlaceFrame_SetStatusText_Proxy');},
    IOleInPlaceFrame_SetStatusText_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceFrame_SetStatusText_Stub');},
    IOleInPlaceFrame_EnableModeless_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.BOOL, 'fEnable']], [['stdcall']]))('IOleInPlaceFrame_EnableModeless_Proxy');},
    IOleInPlaceFrame_EnableModeless_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceFrame_EnableModeless_Stub');},
    IOleInPlaceFrame_TranslateAccelerator_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.LPMSG, 'lpmsg'], [T.WORD, 'wID']], [['stdcall']]))('IOleInPlaceFrame_TranslateAccelerator_Proxy');},
    IOleInPlaceFrame_TranslateAccelerator_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceFrame_TranslateAccelerator_Stub');},
    IID_IOleInPlaceActiveObject: function() {return (T.GUID)('IID_IOleInPlaceActiveObject');},
    IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This']], [['stdcall']]))('IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy');},
    IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub');},
    IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.BOOL, 'fActivate']], [['stdcall']]))('IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy');},
    IOleInPlaceActiveObject_OnFrameWindowActivate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceActiveObject_OnFrameWindowActivate_Stub');},
    IOleInPlaceActiveObject_OnDocWindowActivate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.BOOL, 'fActivate']], [['stdcall']]))('IOleInPlaceActiveObject_OnDocWindowActivate_Proxy');},
    IOleInPlaceActiveObject_OnDocWindowActivate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceActiveObject_OnDocWindowActivate_Stub');},
    IOleInPlaceActiveObject_RemoteResizeBorder_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.LPCRECT, 'prcBorder'], [Pointer(T.IID), 'riid'], [Pointer(T.IOleInPlaceUIWindow), 'pUIWindow'], [T.BOOL, 'fFrameWindow']], [['stdcall']]))('IOleInPlaceActiveObject_RemoteResizeBorder_Proxy');},
    IOleInPlaceActiveObject_RemoteResizeBorder_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceActiveObject_RemoteResizeBorder_Stub');},
    IOleInPlaceActiveObject_EnableModeless_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.BOOL, 'fEnable']], [['stdcall']]))('IOleInPlaceActiveObject_EnableModeless_Proxy');},
    IOleInPlaceActiveObject_EnableModeless_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceActiveObject_EnableModeless_Stub');},
    IOleInPlaceActiveObject_TranslateAccelerator_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.LPMSG, 'lpmsg']], [['stdcall']]))('IOleInPlaceActiveObject_TranslateAccelerator_Proxy');},
    IOleInPlaceActiveObject_TranslateAccelerator_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This']], [['stdcall']]))('IOleInPlaceActiveObject_TranslateAccelerator_Stub');},
    IOleInPlaceActiveObject_ResizeBorder_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.LPCRECT, 'prcBorder'], [Pointer(T.IOleInPlaceUIWindow), 'pUIWindow'], [T.BOOL, 'fFrameWindow']], [['stdcall']]))('IOleInPlaceActiveObject_ResizeBorder_Proxy');},
    IOleInPlaceActiveObject_ResizeBorder_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.LPCRECT, 'prcBorder'], [Pointer(T.IID), 'riid'], [Pointer(T.IOleInPlaceUIWindow), 'pUIWindow'], [T.BOOL, 'fFrameWindow']], [['stdcall']]))('IOleInPlaceActiveObject_ResizeBorder_Stub');},
    IID_IOleInPlaceSite: function() {return (T.GUID)('IID_IOleInPlaceSite');},
    IOleInPlaceSite_CanInPlaceActivate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']], [['stdcall']]))('IOleInPlaceSite_CanInPlaceActivate_Proxy');},
    IOleInPlaceSite_CanInPlaceActivate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceSite_CanInPlaceActivate_Stub');},
    IOleInPlaceSite_OnInPlaceActivate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']], [['stdcall']]))('IOleInPlaceSite_OnInPlaceActivate_Proxy');},
    IOleInPlaceSite_OnInPlaceActivate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceSite_OnInPlaceActivate_Stub');},
    IOleInPlaceSite_OnUIActivate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']], [['stdcall']]))('IOleInPlaceSite_OnUIActivate_Proxy');},
    IOleInPlaceSite_OnUIActivate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceSite_OnUIActivate_Stub');},
    IOleInPlaceSite_GetWindowContext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [Pointer(Pointer(T.IOleInPlaceFrame)), 'ppFrame'], [Pointer(Pointer(T.IOleInPlaceUIWindow)), 'ppDoc'], [T.LPRECT, 'lprcPosRect'], [T.LPRECT, 'lprcClipRect'], [T.LPOLEINPLACEFRAMEINFO, 'lpFrameInfo']], [['stdcall']]))('IOleInPlaceSite_GetWindowContext_Proxy');},
    IOleInPlaceSite_GetWindowContext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceSite_GetWindowContext_Stub');},
    IOleInPlaceSite_Scroll_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [T.SIZE, 'scrollExtent']], [['stdcall']]))('IOleInPlaceSite_Scroll_Proxy');},
    IOleInPlaceSite_Scroll_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceSite_Scroll_Stub');},
    IOleInPlaceSite_OnUIDeactivate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [T.BOOL, 'fUndoable']], [['stdcall']]))('IOleInPlaceSite_OnUIDeactivate_Proxy');},
    IOleInPlaceSite_OnUIDeactivate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceSite_OnUIDeactivate_Stub');},
    IOleInPlaceSite_OnInPlaceDeactivate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']], [['stdcall']]))('IOleInPlaceSite_OnInPlaceDeactivate_Proxy');},
    IOleInPlaceSite_OnInPlaceDeactivate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceSite_OnInPlaceDeactivate_Stub');},
    IOleInPlaceSite_DiscardUndoState_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']], [['stdcall']]))('IOleInPlaceSite_DiscardUndoState_Proxy');},
    IOleInPlaceSite_DiscardUndoState_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceSite_DiscardUndoState_Stub');},
    IOleInPlaceSite_DeactivateAndUndo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']], [['stdcall']]))('IOleInPlaceSite_DeactivateAndUndo_Proxy');},
    IOleInPlaceSite_DeactivateAndUndo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceSite_DeactivateAndUndo_Stub');},
    IOleInPlaceSite_OnPosRectChange_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [T.LPCRECT, 'lprcPosRect']], [['stdcall']]))('IOleInPlaceSite_OnPosRectChange_Proxy');},
    IOleInPlaceSite_OnPosRectChange_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleInPlaceSite_OnPosRectChange_Stub');},
    IID_IParseDisplayName: function() {return (T.GUID)('IID_IParseDisplayName');},
    IParseDisplayName_ParseDisplayName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IParseDisplayName), 'This'], [Pointer(T.IBindCtx), 'pbc'], [T.LPOLESTR, 'pszDisplayName'], [Pointer(T.ULONG), 'pchEaten'], [Pointer(Pointer(T.IMoniker)), 'ppmkOut']], [['stdcall']]))('IParseDisplayName_ParseDisplayName_Proxy');},
    IParseDisplayName_ParseDisplayName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IParseDisplayName_ParseDisplayName_Stub');},
    IID_IOleContainer: function() {return (T.GUID)('IID_IOleContainer');},
    IOleContainer_EnumObjects_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleContainer), 'This'], [T.DWORD, 'grfFlags'], [Pointer(Pointer(T.IEnumUnknown)), 'ppenum']], [['stdcall']]))('IOleContainer_EnumObjects_Proxy');},
    IOleContainer_EnumObjects_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleContainer_EnumObjects_Stub');},
    IOleContainer_LockContainer_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleContainer), 'This'], [T.BOOL, 'fLock']], [['stdcall']]))('IOleContainer_LockContainer_Proxy');},
    IOleContainer_LockContainer_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleContainer_LockContainer_Stub');},
    IID_IOleItemContainer: function() {return (T.GUID)('IID_IOleItemContainer');},
    IOleItemContainer_GetObject_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [T.LPOLESTR, 'pszItem'], [T.DWORD, 'dwSpeedNeeded'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']], [['stdcall']]))('IOleItemContainer_GetObject_Proxy');},
    IOleItemContainer_GetObject_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleItemContainer_GetObject_Stub');},
    IOleItemContainer_GetObjectStorage_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [T.LPOLESTR, 'pszItem'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvStorage']], [['stdcall']]))('IOleItemContainer_GetObjectStorage_Proxy');},
    IOleItemContainer_GetObjectStorage_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleItemContainer_GetObjectStorage_Stub');},
    IOleItemContainer_IsRunning_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [T.LPOLESTR, 'pszItem']], [['stdcall']]))('IOleItemContainer_IsRunning_Proxy');},
    IOleItemContainer_IsRunning_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleItemContainer_IsRunning_Stub');},
    IID_IOleLink: function() {return (T.GUID)('IID_IOleLink');},
    IOleLink_SetUpdateOptions_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [T.DWORD, 'dwUpdateOpt']], [['stdcall']]))('IOleLink_SetUpdateOptions_Proxy');},
    IOleLink_SetUpdateOptions_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleLink_SetUpdateOptions_Stub');},
    IOleLink_GetUpdateOptions_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.DWORD), 'pdwUpdateOpt']], [['stdcall']]))('IOleLink_GetUpdateOptions_Proxy');},
    IOleLink_GetUpdateOptions_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleLink_GetUpdateOptions_Stub');},
    IOleLink_SetSourceMoniker_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.IMoniker), 'pmk'], [Pointer(T.CLSID), 'rclsid']], [['stdcall']]))('IOleLink_SetSourceMoniker_Proxy');},
    IOleLink_SetSourceMoniker_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleLink_SetSourceMoniker_Stub');},
    IOleLink_GetSourceMoniker_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(Pointer(T.IMoniker)), 'ppmk']], [['stdcall']]))('IOleLink_GetSourceMoniker_Proxy');},
    IOleLink_GetSourceMoniker_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleLink_GetSourceMoniker_Stub');},
    IOleLink_SetSourceDisplayName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [T.LPCOLESTR, 'pszStatusText']], [['stdcall']]))('IOleLink_SetSourceDisplayName_Proxy');},
    IOleLink_SetSourceDisplayName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleLink_SetSourceDisplayName_Stub');},
    IOleLink_GetSourceDisplayName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.LPOLESTR), 'ppszDisplayName']], [['stdcall']]))('IOleLink_GetSourceDisplayName_Proxy');},
    IOleLink_GetSourceDisplayName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleLink_GetSourceDisplayName_Stub');},
    IOleLink_BindToSource_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [T.DWORD, 'bindflags'], [Pointer(T.IBindCtx), 'pbc']], [['stdcall']]))('IOleLink_BindToSource_Proxy');},
    IOleLink_BindToSource_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleLink_BindToSource_Stub');},
    IOleLink_BindIfRunning_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This']], [['stdcall']]))('IOleLink_BindIfRunning_Proxy');},
    IOleLink_BindIfRunning_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleLink_BindIfRunning_Stub');},
    IOleLink_GetBoundSource_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(Pointer(T.IUnknown)), 'ppunk']], [['stdcall']]))('IOleLink_GetBoundSource_Proxy');},
    IOleLink_GetBoundSource_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleLink_GetBoundSource_Stub');},
    IOleLink_UnbindSource_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This']], [['stdcall']]))('IOleLink_UnbindSource_Proxy');},
    IOleLink_UnbindSource_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleLink_UnbindSource_Stub');},
    IOleLink_Update_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.IBindCtx), 'pbc']], [['stdcall']]))('IOleLink_Update_Proxy');},
    IOleLink_Update_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleLink_Update_Stub');},
    IID_IOleClientSite: function() {return (T.GUID)('IID_IOleClientSite');},
    IOleClientSite_SaveObject_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This']], [['stdcall']]))('IOleClientSite_SaveObject_Proxy');},
    IOleClientSite_SaveObject_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleClientSite_SaveObject_Stub');},
    IOleClientSite_GetMoniker_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This'], [T.DWORD, 'dwAssign'], [T.DWORD, 'dwWhichMoniker'], [Pointer(Pointer(T.IMoniker)), 'ppmk']], [['stdcall']]))('IOleClientSite_GetMoniker_Proxy');},
    IOleClientSite_GetMoniker_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleClientSite_GetMoniker_Stub');},
    IOleClientSite_GetContainer_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This'], [Pointer(Pointer(T.IOleContainer)), 'ppContainer']], [['stdcall']]))('IOleClientSite_GetContainer_Proxy');},
    IOleClientSite_GetContainer_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleClientSite_GetContainer_Stub');},
    IOleClientSite_ShowObject_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This']], [['stdcall']]))('IOleClientSite_ShowObject_Proxy');},
    IOleClientSite_ShowObject_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleClientSite_ShowObject_Stub');},
    IOleClientSite_OnShowWindow_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This'], [T.BOOL, 'fShow']], [['stdcall']]))('IOleClientSite_OnShowWindow_Proxy');},
    IOleClientSite_OnShowWindow_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleClientSite_OnShowWindow_Stub');},
    IOleClientSite_RequestNewObjectLayout_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This']], [['stdcall']]))('IOleClientSite_RequestNewObjectLayout_Proxy');},
    IOleClientSite_RequestNewObjectLayout_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleClientSite_RequestNewObjectLayout_Stub');},
    IID_IOleCache: function() {return (T.GUID)('IID_IOleCache');},
    IOleCache_Cache_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [T.DWORD, 'advf'], [Pointer(T.DWORD), 'pdwConnection']], [['stdcall']]))('IOleCache_Cache_Proxy');},
    IOleCache_Cache_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleCache_Cache_Stub');},
    IOleCache_Uncache_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [T.DWORD, 'dwConnection']], [['stdcall']]))('IOleCache_Uncache_Proxy');},
    IOleCache_Uncache_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleCache_Uncache_Stub');},
    IOleCache_EnumCache_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumSTATDATA']], [['stdcall']]))('IOleCache_EnumCache_Proxy');},
    IOleCache_EnumCache_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleCache_EnumCache_Stub');},
    IOleCache_InitCache_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(T.IDataObject), 'pDataObject']], [['stdcall']]))('IOleCache_InitCache_Proxy');},
    IOleCache_InitCache_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleCache_InitCache_Stub');},
    IOleCache_SetData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pmedium'], [T.BOOL, 'fRelease']], [['stdcall']]))('IOleCache_SetData_Proxy');},
    IOleCache_SetData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleCache_SetData_Stub');},
    IID_IOleCache2: function() {return (T.GUID)('IID_IOleCache2');},
    IOleCache2_RemoteUpdateCache_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [T.LPDATAOBJECT, 'pDataObject'], [T.DWORD, 'grfUpdf'], [T.LONG_PTR, 'pReserved']], [['stdcall']]))('IOleCache2_RemoteUpdateCache_Proxy');},
    IOleCache2_RemoteUpdateCache_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleCache2_RemoteUpdateCache_Stub');},
    IOleCache2_DiscardCache_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [T.DWORD, 'dwDiscardOptions']], [['stdcall']]))('IOleCache2_DiscardCache_Proxy');},
    IOleCache2_DiscardCache_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleCache2_DiscardCache_Stub');},
    IOleCache2_UpdateCache_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [T.LPDATAOBJECT, 'pDataObject'], [T.DWORD, 'grfUpdf'], [T.LPVOID, 'pReserved']], [['stdcall']]))('IOleCache2_UpdateCache_Proxy');},
    IOleCache2_UpdateCache_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [T.LPDATAOBJECT, 'pDataObject'], [T.DWORD, 'grfUpdf'], [T.LONG_PTR, 'pReserved']], [['stdcall']]))('IOleCache2_UpdateCache_Stub');},
    IID_IOleCacheControl: function() {return (T.GUID)('IID_IOleCacheControl');},
    IOleCacheControl_OnRun_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleCacheControl), 'This'], [T.LPDATAOBJECT, 'pDataObject']], [['stdcall']]))('IOleCacheControl_OnRun_Proxy');},
    IOleCacheControl_OnRun_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleCacheControl_OnRun_Stub');},
    IOleCacheControl_OnStop_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleCacheControl), 'This']], [['stdcall']]))('IOleCacheControl_OnStop_Proxy');},
    IOleCacheControl_OnStop_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleCacheControl_OnStop_Stub');},
    IID_IEnumOLEVERB: function() {return (T.GUID)('IID_IEnumOLEVERB');},
    IEnumOLEVERB_RemoteNext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [T.ULONG, 'celt'], [T.LPOLEVERB, 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumOLEVERB_RemoteNext_Proxy');},
    IEnumOLEVERB_RemoteNext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumOLEVERB_RemoteNext_Stub');},
    IEnumOLEVERB_Skip_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [T.ULONG, 'celt']], [['stdcall']]))('IEnumOLEVERB_Skip_Proxy');},
    IEnumOLEVERB_Skip_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumOLEVERB_Skip_Stub');},
    IEnumOLEVERB_Reset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This']], [['stdcall']]))('IEnumOLEVERB_Reset_Proxy');},
    IEnumOLEVERB_Reset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumOLEVERB_Reset_Stub');},
    IEnumOLEVERB_Clone_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [Pointer(Pointer(T.IEnumOLEVERB)), 'ppenum']], [['stdcall']]))('IEnumOLEVERB_Clone_Proxy');},
    IEnumOLEVERB_Clone_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumOLEVERB_Clone_Stub');},
    IEnumOLEVERB_Next_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [T.ULONG, 'celt'], [T.LPOLEVERB, 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumOLEVERB_Next_Proxy');},
    IEnumOLEVERB_Next_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [T.ULONG, 'celt'], [T.LPOLEVERB, 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumOLEVERB_Next_Stub');},
    IID_IOleObject: function() {return (T.GUID)('IID_IOleObject');},
    IOleObject_SetClientSite_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.IOleClientSite), 'pClientSite']], [['stdcall']]))('IOleObject_SetClientSite_Proxy');},
    IOleObject_SetClientSite_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_SetClientSite_Stub');},
    IOleObject_GetClientSite_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(Pointer(T.IOleClientSite)), 'ppClientSite']], [['stdcall']]))('IOleObject_GetClientSite_Proxy');},
    IOleObject_GetClientSite_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_GetClientSite_Stub');},
    IOleObject_SetHostNames_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.LPCOLESTR, 'szContainerApp'], [T.LPCOLESTR, 'szContainerObj']], [['stdcall']]))('IOleObject_SetHostNames_Proxy');},
    IOleObject_SetHostNames_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_SetHostNames_Stub');},
    IOleObject_Close_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwSaveOption']], [['stdcall']]))('IOleObject_Close_Proxy');},
    IOleObject_Close_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_Close_Stub');},
    IOleObject_SetMoniker_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwWhichMoniker'], [Pointer(T.IMoniker), 'pmk']], [['stdcall']]))('IOleObject_SetMoniker_Proxy');},
    IOleObject_SetMoniker_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_SetMoniker_Stub');},
    IOleObject_GetMoniker_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwAssign'], [T.DWORD, 'dwWhichMoniker'], [Pointer(Pointer(T.IMoniker)), 'ppmk']], [['stdcall']]))('IOleObject_GetMoniker_Proxy');},
    IOleObject_GetMoniker_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_GetMoniker_Stub');},
    IOleObject_InitFromData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.IDataObject), 'pDataObject'], [T.BOOL, 'fCreation'], [T.DWORD, 'dwReserved']], [['stdcall']]))('IOleObject_InitFromData_Proxy');},
    IOleObject_InitFromData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_InitFromData_Stub');},
    IOleObject_GetClipboardData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwReserved'], [Pointer(Pointer(T.IDataObject)), 'ppDataObject']], [['stdcall']]))('IOleObject_GetClipboardData_Proxy');},
    IOleObject_GetClipboardData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_GetClipboardData_Stub');},
    IOleObject_DoVerb_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.LONG, 'iVerb'], [T.LPMSG, 'lpmsg'], [Pointer(T.IOleClientSite), 'pActiveSite'], [T.LONG, 'lindex'], [T.HWND, 'hwndParent'], [T.LPCRECT, 'lprcPosRect']], [['stdcall']]))('IOleObject_DoVerb_Proxy');},
    IOleObject_DoVerb_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_DoVerb_Stub');},
    IOleObject_EnumVerbs_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(Pointer(T.IEnumOLEVERB)), 'ppEnumOleVerb']], [['stdcall']]))('IOleObject_EnumVerbs_Proxy');},
    IOleObject_EnumVerbs_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_EnumVerbs_Stub');},
    IOleObject_Update_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This']], [['stdcall']]))('IOleObject_Update_Proxy');},
    IOleObject_Update_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_Update_Stub');},
    IOleObject_IsUpToDate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This']], [['stdcall']]))('IOleObject_IsUpToDate_Proxy');},
    IOleObject_IsUpToDate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_IsUpToDate_Stub');},
    IOleObject_GetUserClassID_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.CLSID), 'pClsid']], [['stdcall']]))('IOleObject_GetUserClassID_Proxy');},
    IOleObject_GetUserClassID_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_GetUserClassID_Stub');},
    IOleObject_GetUserType_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwFormOfType'], [Pointer(T.LPOLESTR), 'pszUserType']], [['stdcall']]))('IOleObject_GetUserType_Proxy');},
    IOleObject_GetUserType_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_GetUserType_Stub');},
    IOleObject_SetExtent_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwDrawAspect'], [Pointer(T.SIZEL), 'psizel']], [['stdcall']]))('IOleObject_SetExtent_Proxy');},
    IOleObject_SetExtent_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_SetExtent_Stub');},
    IOleObject_GetExtent_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwDrawAspect'], [Pointer(T.SIZEL), 'psizel']], [['stdcall']]))('IOleObject_GetExtent_Proxy');},
    IOleObject_GetExtent_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_GetExtent_Stub');},
    IOleObject_Advise_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.IAdviseSink), 'pAdvSink'], [Pointer(T.DWORD), 'pdwConnection']], [['stdcall']]))('IOleObject_Advise_Proxy');},
    IOleObject_Advise_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_Advise_Stub');},
    IOleObject_Unadvise_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwConnection']], [['stdcall']]))('IOleObject_Unadvise_Proxy');},
    IOleObject_Unadvise_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_Unadvise_Stub');},
    IOleObject_EnumAdvise_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumAdvise']], [['stdcall']]))('IOleObject_EnumAdvise_Proxy');},
    IOleObject_EnumAdvise_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_EnumAdvise_Stub');},
    IOleObject_GetMiscStatus_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwAspect'], [Pointer(T.DWORD), 'pdwStatus']], [['stdcall']]))('IOleObject_GetMiscStatus_Proxy');},
    IOleObject_GetMiscStatus_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_GetMiscStatus_Stub');},
    IOleObject_SetColorScheme_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.LOGPALETTE), 'pLogpal']], [['stdcall']]))('IOleObject_SetColorScheme_Proxy');},
    IOleObject_SetColorScheme_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleObject_SetColorScheme_Stub');},
    IID_IOleAdviseHolder: function() {return (T.GUID)('IID_IOleAdviseHolder');},
    IOleAdviseHolder_Advise_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [Pointer(T.IAdviseSink), 'pAdvise'], [Pointer(T.DWORD), 'pdwConnection']], [['stdcall']]))('IOleAdviseHolder_Advise_Proxy');},
    IOleAdviseHolder_Advise_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleAdviseHolder_Advise_Stub');},
    IOleAdviseHolder_Unadvise_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [T.DWORD, 'dwConnection']], [['stdcall']]))('IOleAdviseHolder_Unadvise_Proxy');},
    IOleAdviseHolder_Unadvise_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleAdviseHolder_Unadvise_Stub');},
    IOleAdviseHolder_EnumAdvise_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumAdvise']], [['stdcall']]))('IOleAdviseHolder_EnumAdvise_Proxy');},
    IOleAdviseHolder_EnumAdvise_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleAdviseHolder_EnumAdvise_Stub');},
    IOleAdviseHolder_SendOnRename_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [Pointer(T.IMoniker), 'pmk']], [['stdcall']]))('IOleAdviseHolder_SendOnRename_Proxy');},
    IOleAdviseHolder_SendOnRename_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleAdviseHolder_SendOnRename_Stub');},
    IOleAdviseHolder_SendOnSave_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This']], [['stdcall']]))('IOleAdviseHolder_SendOnSave_Proxy');},
    IOleAdviseHolder_SendOnSave_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleAdviseHolder_SendOnSave_Stub');},
    IOleAdviseHolder_SendOnClose_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This']], [['stdcall']]))('IOleAdviseHolder_SendOnClose_Proxy');},
    IOleAdviseHolder_SendOnClose_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IOleAdviseHolder_SendOnClose_Stub');},
    IID_IContinue: function() {return (T.GUID)('IID_IContinue');},
    IContinue_FContinue_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IContinue), 'This']], [['stdcall']]))('IContinue_FContinue_Proxy');},
    IContinue_FContinue_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IContinue_FContinue_Stub');},
    IID_IViewObject: function() {return (T.GUID)('IID_IViewObject');},
    IViewObject_RemoteDraw_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [T.ULONG_PTR, 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.ULONG_PTR, 'hdcTargetDev'], [T.ULONG_PTR, 'hdcDraw'], [T.LPCRECTL, 'lprcBounds'], [T.LPCRECTL, 'lprcWBounds'], [Pointer(T.IContinue), 'pContinue']], [['stdcall']]))('IViewObject_RemoteDraw_Proxy');},
    IViewObject_RemoteDraw_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IViewObject_RemoteDraw_Stub');},
    IViewObject_RemoteGetColorSet_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [T.ULONG_PTR, 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.ULONG_PTR, 'hicTargetDev'], [Pointer(Pointer(T.LOGPALETTE)), 'ppColorSet']], [['stdcall']]))('IViewObject_RemoteGetColorSet_Proxy');},
    IViewObject_RemoteGetColorSet_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IViewObject_RemoteGetColorSet_Stub');},
    IViewObject_RemoteFreeze_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [T.ULONG_PTR, 'pvAspect'], [Pointer(T.DWORD), 'pdwFreeze']], [['stdcall']]))('IViewObject_RemoteFreeze_Proxy');},
    IViewObject_RemoteFreeze_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IViewObject_RemoteFreeze_Stub');},
    IViewObject_Unfreeze_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwFreeze']], [['stdcall']]))('IViewObject_Unfreeze_Proxy');},
    IViewObject_Unfreeze_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IViewObject_Unfreeze_Stub');},
    IViewObject_SetAdvise_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'aspects'], [T.DWORD, 'advf'], [Pointer(T.IAdviseSink), 'pAdvSink']], [['stdcall']]))('IViewObject_SetAdvise_Proxy');},
    IViewObject_SetAdvise_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IViewObject_SetAdvise_Stub');},
    IViewObject_RemoteGetAdvise_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [Pointer(T.DWORD), 'pAspects'], [Pointer(T.DWORD), 'pAdvf'], [Pointer(Pointer(T.IAdviseSink)), 'ppAdvSink']], [['stdcall']]))('IViewObject_RemoteGetAdvise_Proxy');},
    IViewObject_RemoteGetAdvise_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IViewObject_RemoteGetAdvise_Stub');},
    IViewObject_Draw_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.HDC, 'hdcTargetDev'], [T.HDC, 'hdcDraw'], [T.LPCRECTL, 'lprcBounds'], [T.LPCRECTL, 'lprcWBounds'], [Pointer(Fn(T.BOOL, [[T.ULONG_PTR, 'dwContinue']])), 'pfnContinue'], [T.ULONG_PTR, 'dwContinue']], [['stdcall']]))('IViewObject_Draw_Proxy');},
    IViewObject_Draw_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [T.ULONG_PTR, 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.ULONG_PTR, 'hdcTargetDev'], [T.ULONG_PTR, 'hdcDraw'], [T.LPCRECTL, 'lprcBounds'], [T.LPCRECTL, 'lprcWBounds'], [Pointer(T.IContinue), 'pContinue']], [['stdcall']]))('IViewObject_Draw_Stub');},
    IViewObject_GetColorSet_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.HDC, 'hicTargetDev'], [Pointer(Pointer(T.LOGPALETTE)), 'ppColorSet']], [['stdcall']]))('IViewObject_GetColorSet_Proxy');},
    IViewObject_GetColorSet_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [T.ULONG_PTR, 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.ULONG_PTR, 'hicTargetDev'], [Pointer(Pointer(T.LOGPALETTE)), 'ppColorSet']], [['stdcall']]))('IViewObject_GetColorSet_Stub');},
    IViewObject_Freeze_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DWORD), 'pdwFreeze']], [['stdcall']]))('IViewObject_Freeze_Proxy');},
    IViewObject_Freeze_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [T.ULONG_PTR, 'pvAspect'], [Pointer(T.DWORD), 'pdwFreeze']], [['stdcall']]))('IViewObject_Freeze_Stub');},
    IViewObject_GetAdvise_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [Pointer(T.DWORD), 'pAspects'], [Pointer(T.DWORD), 'pAdvf'], [Pointer(Pointer(T.IAdviseSink)), 'ppAdvSink']], [['stdcall']]))('IViewObject_GetAdvise_Proxy');},
    IViewObject_GetAdvise_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [Pointer(T.DWORD), 'pAspects'], [Pointer(T.DWORD), 'pAdvf'], [Pointer(Pointer(T.IAdviseSink)), 'ppAdvSink']], [['stdcall']]))('IViewObject_GetAdvise_Stub');},
    IID_IViewObject2: function() {return (T.GUID)('IID_IViewObject2');},
    IViewObject2_GetExtent_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.LPSIZEL, 'lpsizel']], [['stdcall']]))('IViewObject2_GetExtent_Proxy');},
    IViewObject2_GetExtent_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IViewObject2_GetExtent_Stub');},
    IID_IDropSource: function() {return (T.GUID)('IID_IDropSource');},
    IDropSource_QueryContinueDrag_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDropSource), 'This'], [T.BOOL, 'fEscapePressed'], [T.DWORD, 'grfKeyState']], [['stdcall']]))('IDropSource_QueryContinueDrag_Proxy');},
    IDropSource_QueryContinueDrag_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDropSource_QueryContinueDrag_Stub');},
    IDropSource_GiveFeedback_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDropSource), 'This'], [T.DWORD, 'dwEffect']], [['stdcall']]))('IDropSource_GiveFeedback_Proxy');},
    IDropSource_GiveFeedback_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDropSource_GiveFeedback_Stub');},
    IID_IDropTarget: function() {return (T.GUID)('IID_IDropTarget');},
    IDropTarget_DragEnter_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This'], [Pointer(T.IDataObject), 'pDataObj'], [T.DWORD, 'grfKeyState'], [T.POINTL, 'pt'], [Pointer(T.DWORD), 'pdwEffect']], [['stdcall']]))('IDropTarget_DragEnter_Proxy');},
    IDropTarget_DragEnter_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDropTarget_DragEnter_Stub');},
    IDropTarget_DragOver_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This'], [T.DWORD, 'grfKeyState'], [T.POINTL, 'pt'], [Pointer(T.DWORD), 'pdwEffect']], [['stdcall']]))('IDropTarget_DragOver_Proxy');},
    IDropTarget_DragOver_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDropTarget_DragOver_Stub');},
    IDropTarget_DragLeave_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This']], [['stdcall']]))('IDropTarget_DragLeave_Proxy');},
    IDropTarget_DragLeave_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDropTarget_DragLeave_Stub');},
    IDropTarget_Drop_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This'], [Pointer(T.IDataObject), 'pDataObj'], [T.DWORD, 'grfKeyState'], [T.POINTL, 'pt'], [Pointer(T.DWORD), 'pdwEffect']], [['stdcall']]))('IDropTarget_Drop_Proxy');},
    IDropTarget_Drop_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDropTarget_Drop_Stub');},
    HWND_UserSize: function() {return (Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.HWND)]], [['stdcall']]))('HWND_UserSize');},
    HWND_UserMarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HWND)]], [['stdcall']]))('HWND_UserMarshal');},
    HWND_UserUnmarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HWND)]], [['stdcall']]))('HWND_UserUnmarshal');},
    HWND_UserFree: function() {return (Fn(null, [[Pointer(T.ULONG)], [Pointer(T.HWND)]], [['stdcall']]))('HWND_UserFree');},
    HMENU_UserSize: function() {return (Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.HMENU)]], [['stdcall']]))('HMENU_UserSize');},
    HMENU_UserMarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HMENU)]], [['stdcall']]))('HMENU_UserMarshal');},
    HMENU_UserUnmarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HMENU)]], [['stdcall']]))('HMENU_UserUnmarshal');},
    HMENU_UserFree: function() {return (Fn(null, [[Pointer(T.ULONG)], [Pointer(T.HMENU)]], [['stdcall']]))('HMENU_UserFree');},
    HGLOBAL_UserSize: function() {return (Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.HGLOBAL)]], [['stdcall']]))('HGLOBAL_UserSize');},
    HGLOBAL_UserMarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HGLOBAL)]], [['stdcall']]))('HGLOBAL_UserMarshal');},
    HGLOBAL_UserUnmarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HGLOBAL)]], [['stdcall']]))('HGLOBAL_UserUnmarshal');},
    HGLOBAL_UserFree: function() {return (Fn(null, [[Pointer(T.ULONG)], [Pointer(T.HGLOBAL)]], [['stdcall']]))('HGLOBAL_UserFree');},
    HACCEL_UserSize: function() {return (Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.HACCEL)]], [['stdcall']]))('HACCEL_UserSize');},
    HACCEL_UserMarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HACCEL)]], [['stdcall']]))('HACCEL_UserMarshal');},
    HACCEL_UserUnmarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HACCEL)]], [['stdcall']]))('HACCEL_UserUnmarshal');},
    HACCEL_UserFree: function() {return (Fn(null, [[Pointer(T.ULONG)], [Pointer(T.HACCEL)]], [['stdcall']]))('HACCEL_UserFree');},
    HDC_UserSize: function() {return (Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.HDC)]], [['stdcall']]))('HDC_UserSize');},
    HDC_UserMarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HDC)]], [['stdcall']]))('HDC_UserMarshal');},
    HDC_UserUnmarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HDC)]], [['stdcall']]))('HDC_UserUnmarshal');},
    HDC_UserFree: function() {return (Fn(null, [[Pointer(T.ULONG)], [Pointer(T.HDC)]], [['stdcall']]))('HDC_UserFree');},
    IID_IServiceProvider: function() {return (T.GUID)('IID_IServiceProvider');},
    IServiceProvider_RemoteQueryService_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IServiceProvider), 'This'], [Pointer(T.GUID), 'guidService'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObject']], [['stdcall']]))('IServiceProvider_RemoteQueryService_Proxy');},
    IServiceProvider_RemoteQueryService_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IServiceProvider_RemoteQueryService_Stub');},
    IServiceProvider_QueryService_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IServiceProvider), 'This'], [Pointer(T.GUID), 'guidService'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']], [['stdcall']]))('IServiceProvider_QueryService_Proxy');},
    IServiceProvider_QueryService_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IServiceProvider), 'This'], [Pointer(T.GUID), 'guidService'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObject']], [['stdcall']]))('IServiceProvider_QueryService_Stub');},
    IOleAutomationTypes_v1_0_c_ifspec: function() {return (T.RPC_IF_HANDLE)('IOleAutomationTypes_v1_0_c_ifspec');},
    IOleAutomationTypes_v1_0_s_ifspec: function() {return (T.RPC_IF_HANDLE)('IOleAutomationTypes_v1_0_s_ifspec');},
    IID_IDispatch: function() {return (T.GUID)('IID_IDispatch');},
    IDispatch_GetTypeInfoCount_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [Pointer(T.UINT), 'pctinfo']], [['stdcall']]))('IDispatch_GetTypeInfoCount_Proxy');},
    IDispatch_GetTypeInfoCount_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDispatch_GetTypeInfoCount_Stub');},
    IDispatch_GetTypeInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']], [['stdcall']]))('IDispatch_GetTypeInfo_Proxy');},
    IDispatch_GetTypeInfo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDispatch_GetTypeInfo_Stub');},
    IDispatch_GetIDsOfNames_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']], [['stdcall']]))('IDispatch_GetIDsOfNames_Proxy');},
    IDispatch_GetIDsOfNames_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDispatch_GetIDsOfNames_Stub');},
    IDispatch_RemoteInvoke_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.DWORD, 'dwFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'pArgErr'], [T.UINT, 'cVarRef'], [Pointer(T.UINT), 'rgVarRefIdx'], [Pointer(T.VARIANTARG), 'rgVarRef']], [['stdcall']]))('IDispatch_RemoteInvoke_Proxy');},
    IDispatch_RemoteInvoke_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IDispatch_RemoteInvoke_Stub');},
    IDispatch_Invoke_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']], [['stdcall']]))('IDispatch_Invoke_Proxy');},
    IDispatch_Invoke_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.DWORD, 'dwFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'pArgErr'], [T.UINT, 'cVarRef'], [Pointer(T.UINT), 'rgVarRefIdx'], [Pointer(T.VARIANTARG), 'rgVarRef']], [['stdcall']]))('IDispatch_Invoke_Stub');},
    IID_IEnumVARIANT: function() {return (T.GUID)('IID_IEnumVARIANT');},
    IEnumVARIANT_RemoteNext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [T.ULONG, 'celt'], [Pointer(T.VARIANT), 'rgVar'], [Pointer(T.ULONG), 'pCeltFetched']], [['stdcall']]))('IEnumVARIANT_RemoteNext_Proxy');},
    IEnumVARIANT_RemoteNext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumVARIANT_RemoteNext_Stub');},
    IEnumVARIANT_Skip_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [T.ULONG, 'celt']], [['stdcall']]))('IEnumVARIANT_Skip_Proxy');},
    IEnumVARIANT_Skip_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumVARIANT_Skip_Stub');},
    IEnumVARIANT_Reset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This']], [['stdcall']]))('IEnumVARIANT_Reset_Proxy');},
    IEnumVARIANT_Reset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumVARIANT_Reset_Stub');},
    IEnumVARIANT_Clone_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [Pointer(Pointer(T.IEnumVARIANT)), 'ppEnum']], [['stdcall']]))('IEnumVARIANT_Clone_Proxy');},
    IEnumVARIANT_Clone_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumVARIANT_Clone_Stub');},
    IEnumVARIANT_Next_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [T.ULONG, 'celt'], [Pointer(T.VARIANT), 'rgVar'], [Pointer(T.ULONG), 'pCeltFetched']], [['stdcall']]))('IEnumVARIANT_Next_Proxy');},
    IEnumVARIANT_Next_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [T.ULONG, 'celt'], [Pointer(T.VARIANT), 'rgVar'], [Pointer(T.ULONG), 'pCeltFetched']], [['stdcall']]))('IEnumVARIANT_Next_Stub');},
    IID_ITypeComp: function() {return (T.GUID)('IID_ITypeComp');},
    ITypeComp_RemoteBind_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [T.LPOLESTR, 'szName'], [T.ULONG, 'lHashVal'], [T.WORD, 'wFlags'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.DESCKIND), 'pDescKind'], [Pointer(T.LPFUNCDESC), 'ppFuncDesc'], [Pointer(T.LPVARDESC), 'ppVarDesc'], [Pointer(Pointer(T.ITypeComp)), 'ppTypeComp'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']], [['stdcall']]))('ITypeComp_RemoteBind_Proxy');},
    ITypeComp_RemoteBind_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeComp_RemoteBind_Stub');},
    ITypeComp_RemoteBindType_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [T.LPOLESTR, 'szName'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']], [['stdcall']]))('ITypeComp_RemoteBindType_Proxy');},
    ITypeComp_RemoteBindType_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeComp_RemoteBindType_Stub');},
    ITypeComp_Bind_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [T.LPOLESTR, 'szName'], [T.ULONG, 'lHashVal'], [T.WORD, 'wFlags'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.DESCKIND), 'pDescKind'], [Pointer(T.BINDPTR), 'pBindPtr']], [['stdcall']]))('ITypeComp_Bind_Proxy');},
    ITypeComp_Bind_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [T.LPOLESTR, 'szName'], [T.ULONG, 'lHashVal'], [T.WORD, 'wFlags'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.DESCKIND), 'pDescKind'], [Pointer(T.LPFUNCDESC), 'ppFuncDesc'], [Pointer(T.LPVARDESC), 'ppVarDesc'], [Pointer(Pointer(T.ITypeComp)), 'ppTypeComp'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']], [['stdcall']]))('ITypeComp_Bind_Stub');},
    ITypeComp_BindType_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [T.LPOLESTR, 'szName'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(Pointer(T.ITypeComp)), 'ppTComp']], [['stdcall']]))('ITypeComp_BindType_Proxy');},
    ITypeComp_BindType_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [T.LPOLESTR, 'szName'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']], [['stdcall']]))('ITypeComp_BindType_Stub');},
    IID_ITypeInfo: function() {return (T.GUID)('IID_ITypeInfo');},
    ITypeInfo_RemoteGetTypeAttr_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.LPTYPEATTR), 'ppTypeAttr'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']], [['stdcall']]))('ITypeInfo_RemoteGetTypeAttr_Proxy');},
    ITypeInfo_RemoteGetTypeAttr_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_RemoteGetTypeAttr_Stub');},
    ITypeInfo_GetTypeComp_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(Pointer(T.ITypeComp)), 'ppTComp']], [['stdcall']]))('ITypeInfo_GetTypeComp_Proxy');},
    ITypeInfo_GetTypeComp_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_GetTypeComp_Stub');},
    ITypeInfo_RemoteGetFuncDesc_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.LPFUNCDESC), 'ppFuncDesc'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']], [['stdcall']]))('ITypeInfo_RemoteGetFuncDesc_Proxy');},
    ITypeInfo_RemoteGetFuncDesc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_RemoteGetFuncDesc_Stub');},
    ITypeInfo_RemoteGetVarDesc_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.LPVARDESC), 'ppVarDesc'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']], [['stdcall']]))('ITypeInfo_RemoteGetVarDesc_Proxy');},
    ITypeInfo_RemoteGetVarDesc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_RemoteGetVarDesc_Stub');},
    ITypeInfo_RemoteGetNames_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'rgBstrNames'], [T.UINT, 'cMaxNames'], [Pointer(T.UINT), 'pcNames']], [['stdcall']]))('ITypeInfo_RemoteGetNames_Proxy');},
    ITypeInfo_RemoteGetNames_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_RemoteGetNames_Stub');},
    ITypeInfo_GetRefTypeOfImplType_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.HREFTYPE), 'pRefType']], [['stdcall']]))('ITypeInfo_GetRefTypeOfImplType_Proxy');},
    ITypeInfo_GetRefTypeOfImplType_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_GetRefTypeOfImplType_Stub');},
    ITypeInfo_GetImplTypeFlags_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.INT), 'pImplTypeFlags']], [['stdcall']]))('ITypeInfo_GetImplTypeFlags_Proxy');},
    ITypeInfo_GetImplTypeFlags_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_GetImplTypeFlags_Stub');},
    ITypeInfo_LocalGetIDsOfNames_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']], [['stdcall']]))('ITypeInfo_LocalGetIDsOfNames_Proxy');},
    ITypeInfo_LocalGetIDsOfNames_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_LocalGetIDsOfNames_Stub');},
    ITypeInfo_LocalInvoke_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']], [['stdcall']]))('ITypeInfo_LocalInvoke_Proxy');},
    ITypeInfo_LocalInvoke_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_LocalInvoke_Stub');},
    ITypeInfo_RemoteGetDocumentation_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']], [['stdcall']]))('ITypeInfo_RemoteGetDocumentation_Proxy');},
    ITypeInfo_RemoteGetDocumentation_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_RemoteGetDocumentation_Stub');},
    ITypeInfo_RemoteGetDllEntry_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pBstrDllName'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.WORD), 'pwOrdinal']], [['stdcall']]))('ITypeInfo_RemoteGetDllEntry_Proxy');},
    ITypeInfo_RemoteGetDllEntry_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_RemoteGetDllEntry_Stub');},
    ITypeInfo_GetRefTypeInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.HREFTYPE, 'hRefType'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']], [['stdcall']]))('ITypeInfo_GetRefTypeInfo_Proxy');},
    ITypeInfo_GetRefTypeInfo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_GetRefTypeInfo_Stub');},
    ITypeInfo_LocalAddressOfMember_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']], [['stdcall']]))('ITypeInfo_LocalAddressOfMember_Proxy');},
    ITypeInfo_LocalAddressOfMember_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_LocalAddressOfMember_Stub');},
    ITypeInfo_RemoteCreateInstance_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObj']], [['stdcall']]))('ITypeInfo_RemoteCreateInstance_Proxy');},
    ITypeInfo_RemoteCreateInstance_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_RemoteCreateInstance_Stub');},
    ITypeInfo_GetMops_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'pBstrMops']], [['stdcall']]))('ITypeInfo_GetMops_Proxy');},
    ITypeInfo_GetMops_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_GetMops_Stub');},
    ITypeInfo_RemoteGetContainingTypeLib_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(Pointer(T.ITypeLib)), 'ppTLib'], [Pointer(T.UINT), 'pIndex']], [['stdcall']]))('ITypeInfo_RemoteGetContainingTypeLib_Proxy');},
    ITypeInfo_RemoteGetContainingTypeLib_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_RemoteGetContainingTypeLib_Stub');},
    ITypeInfo_LocalReleaseTypeAttr_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']], [['stdcall']]))('ITypeInfo_LocalReleaseTypeAttr_Proxy');},
    ITypeInfo_LocalReleaseTypeAttr_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_LocalReleaseTypeAttr_Stub');},
    ITypeInfo_LocalReleaseFuncDesc_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']], [['stdcall']]))('ITypeInfo_LocalReleaseFuncDesc_Proxy');},
    ITypeInfo_LocalReleaseFuncDesc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_LocalReleaseFuncDesc_Stub');},
    ITypeInfo_LocalReleaseVarDesc_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']], [['stdcall']]))('ITypeInfo_LocalReleaseVarDesc_Proxy');},
    ITypeInfo_LocalReleaseVarDesc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo_LocalReleaseVarDesc_Stub');},
    ITypeInfo_GetTypeAttr_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(Pointer(T.TYPEATTR)), 'ppTypeAttr']], [['stdcall']]))('ITypeInfo_GetTypeAttr_Proxy');},
    ITypeInfo_GetTypeAttr_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.LPTYPEATTR), 'ppTypeAttr'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']], [['stdcall']]))('ITypeInfo_GetTypeAttr_Stub');},
    ITypeInfo_GetFuncDesc_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.FUNCDESC)), 'ppFuncDesc']], [['stdcall']]))('ITypeInfo_GetFuncDesc_Proxy');},
    ITypeInfo_GetFuncDesc_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.LPFUNCDESC), 'ppFuncDesc'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']], [['stdcall']]))('ITypeInfo_GetFuncDesc_Stub');},
    ITypeInfo_GetVarDesc_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.VARDESC)), 'ppVarDesc']], [['stdcall']]))('ITypeInfo_GetVarDesc_Proxy');},
    ITypeInfo_GetVarDesc_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.LPVARDESC), 'ppVarDesc'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']], [['stdcall']]))('ITypeInfo_GetVarDesc_Stub');},
    ITypeInfo_GetNames_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'rgBstrNames'], [T.UINT, 'cMaxNames'], [Pointer(T.UINT), 'pcNames']], [['stdcall']]))('ITypeInfo_GetNames_Proxy');},
    ITypeInfo_GetNames_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'rgBstrNames'], [T.UINT, 'cMaxNames'], [Pointer(T.UINT), 'pcNames']], [['stdcall']]))('ITypeInfo_GetNames_Stub');},
    ITypeInfo_GetIDsOfNames_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [Pointer(T.MEMBERID), 'pMemId']], [['stdcall']]))('ITypeInfo_GetIDsOfNames_Proxy');},
    ITypeInfo_GetIDsOfNames_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']], [['stdcall']]))('ITypeInfo_GetIDsOfNames_Stub');},
    ITypeInfo_Invoke_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.PVOID, 'pvInstance'], [T.MEMBERID, 'memid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']], [['stdcall']]))('ITypeInfo_Invoke_Proxy');},
    ITypeInfo_Invoke_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']], [['stdcall']]))('ITypeInfo_Invoke_Stub');},
    ITypeInfo_GetDocumentation_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']], [['stdcall']]))('ITypeInfo_GetDocumentation_Proxy');},
    ITypeInfo_GetDocumentation_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']], [['stdcall']]))('ITypeInfo_GetDocumentation_Stub');},
    ITypeInfo_GetDllEntry_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [Pointer(T.BSTR), 'pBstrDllName'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.WORD), 'pwOrdinal']], [['stdcall']]))('ITypeInfo_GetDllEntry_Proxy');},
    ITypeInfo_GetDllEntry_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pBstrDllName'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.WORD), 'pwOrdinal']], [['stdcall']]))('ITypeInfo_GetDllEntry_Stub');},
    ITypeInfo_AddressOfMember_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [Pointer(T.PVOID), 'ppv']], [['stdcall']]))('ITypeInfo_AddressOfMember_Proxy');},
    ITypeInfo_AddressOfMember_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']], [['stdcall']]))('ITypeInfo_AddressOfMember_Stub');},
    ITypeInfo_CreateInstance_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(T.IID), 'riid'], [Pointer(T.PVOID), 'ppvObj']], [['stdcall']]))('ITypeInfo_CreateInstance_Proxy');},
    ITypeInfo_CreateInstance_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObj']], [['stdcall']]))('ITypeInfo_CreateInstance_Stub');},
    ITypeInfo_GetContainingTypeLib_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(Pointer(T.ITypeLib)), 'ppTLib'], [Pointer(T.UINT), 'pIndex']], [['stdcall']]))('ITypeInfo_GetContainingTypeLib_Proxy');},
    ITypeInfo_GetContainingTypeLib_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(Pointer(T.ITypeLib)), 'ppTLib'], [Pointer(T.UINT), 'pIndex']], [['stdcall']]))('ITypeInfo_GetContainingTypeLib_Stub');},
    ITypeInfo_ReleaseTypeAttr_Proxy: function() {return (Fn(null, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.TYPEATTR), 'pTypeAttr']], [['stdcall']]))('ITypeInfo_ReleaseTypeAttr_Proxy');},
    ITypeInfo_ReleaseTypeAttr_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']], [['stdcall']]))('ITypeInfo_ReleaseTypeAttr_Stub');},
    ITypeInfo_ReleaseFuncDesc_Proxy: function() {return (Fn(null, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.FUNCDESC), 'pFuncDesc']], [['stdcall']]))('ITypeInfo_ReleaseFuncDesc_Proxy');},
    ITypeInfo_ReleaseFuncDesc_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']], [['stdcall']]))('ITypeInfo_ReleaseFuncDesc_Stub');},
    ITypeInfo_ReleaseVarDesc_Proxy: function() {return (Fn(null, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.VARDESC), 'pVarDesc']], [['stdcall']]))('ITypeInfo_ReleaseVarDesc_Proxy');},
    ITypeInfo_ReleaseVarDesc_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']], [['stdcall']]))('ITypeInfo_ReleaseVarDesc_Stub');},
    IID_ITypeInfo2: function() {return (T.GUID)('IID_ITypeInfo2');},
    ITypeInfo2_GetTypeKind_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.TYPEKIND), 'pTypeKind']], [['stdcall']]))('ITypeInfo2_GetTypeKind_Proxy');},
    ITypeInfo2_GetTypeKind_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo2_GetTypeKind_Stub');},
    ITypeInfo2_GetTypeFlags_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.ULONG), 'pTypeFlags']], [['stdcall']]))('ITypeInfo2_GetTypeFlags_Proxy');},
    ITypeInfo2_GetTypeFlags_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo2_GetTypeFlags_Stub');},
    ITypeInfo2_GetFuncIndexOfMemId_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [Pointer(T.UINT), 'pFuncIndex']], [['stdcall']]))('ITypeInfo2_GetFuncIndexOfMemId_Proxy');},
    ITypeInfo2_GetFuncIndexOfMemId_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo2_GetFuncIndexOfMemId_Stub');},
    ITypeInfo2_GetVarIndexOfMemId_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.UINT), 'pVarIndex']], [['stdcall']]))('ITypeInfo2_GetVarIndexOfMemId_Proxy');},
    ITypeInfo2_GetVarIndexOfMemId_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo2_GetVarIndexOfMemId_Stub');},
    ITypeInfo2_GetCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']], [['stdcall']]))('ITypeInfo2_GetCustData_Proxy');},
    ITypeInfo2_GetCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo2_GetCustData_Stub');},
    ITypeInfo2_GetFuncCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']], [['stdcall']]))('ITypeInfo2_GetFuncCustData_Proxy');},
    ITypeInfo2_GetFuncCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo2_GetFuncCustData_Stub');},
    ITypeInfo2_GetParamCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'indexFunc'], [T.UINT, 'indexParam'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']], [['stdcall']]))('ITypeInfo2_GetParamCustData_Proxy');},
    ITypeInfo2_GetParamCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo2_GetParamCustData_Stub');},
    ITypeInfo2_GetVarCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']], [['stdcall']]))('ITypeInfo2_GetVarCustData_Proxy');},
    ITypeInfo2_GetVarCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo2_GetVarCustData_Stub');},
    ITypeInfo2_GetImplTypeCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']], [['stdcall']]))('ITypeInfo2_GetImplTypeCustData_Proxy');},
    ITypeInfo2_GetImplTypeCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo2_GetImplTypeCustData_Stub');},
    ITypeInfo2_RemoteGetDocumentation2_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.LCID, 'lcid'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pbstrHelpString'], [Pointer(T.DWORD), 'pdwHelpStringContext'], [Pointer(T.BSTR), 'pbstrHelpStringDll']], [['stdcall']]))('ITypeInfo2_RemoteGetDocumentation2_Proxy');},
    ITypeInfo2_RemoteGetDocumentation2_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo2_RemoteGetDocumentation2_Stub');},
    ITypeInfo2_GetAllCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.CUSTDATA), 'pCustData']], [['stdcall']]))('ITypeInfo2_GetAllCustData_Proxy');},
    ITypeInfo2_GetAllCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo2_GetAllCustData_Stub');},
    ITypeInfo2_GetAllFuncCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.CUSTDATA), 'pCustData']], [['stdcall']]))('ITypeInfo2_GetAllFuncCustData_Proxy');},
    ITypeInfo2_GetAllFuncCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo2_GetAllFuncCustData_Stub');},
    ITypeInfo2_GetAllParamCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'indexFunc'], [T.UINT, 'indexParam'], [Pointer(T.CUSTDATA), 'pCustData']], [['stdcall']]))('ITypeInfo2_GetAllParamCustData_Proxy');},
    ITypeInfo2_GetAllParamCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo2_GetAllParamCustData_Stub');},
    ITypeInfo2_GetAllVarCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.CUSTDATA), 'pCustData']], [['stdcall']]))('ITypeInfo2_GetAllVarCustData_Proxy');},
    ITypeInfo2_GetAllVarCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo2_GetAllVarCustData_Stub');},
    ITypeInfo2_GetAllImplTypeCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.CUSTDATA), 'pCustData']], [['stdcall']]))('ITypeInfo2_GetAllImplTypeCustData_Proxy');},
    ITypeInfo2_GetAllImplTypeCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeInfo2_GetAllImplTypeCustData_Stub');},
    ITypeInfo2_GetDocumentation2_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.LCID, 'lcid'], [Pointer(T.BSTR), 'pbstrHelpString'], [Pointer(T.DWORD), 'pdwHelpStringContext'], [Pointer(T.BSTR), 'pbstrHelpStringDll']], [['stdcall']]))('ITypeInfo2_GetDocumentation2_Proxy');},
    ITypeInfo2_GetDocumentation2_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.LCID, 'lcid'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pbstrHelpString'], [Pointer(T.DWORD), 'pdwHelpStringContext'], [Pointer(T.BSTR), 'pbstrHelpStringDll']], [['stdcall']]))('ITypeInfo2_GetDocumentation2_Stub');},
    IID_ITypeLib: function() {return (T.GUID)('IID_ITypeLib');},
    ITypeLib_RemoteGetTypeInfoCount_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.UINT), 'pcTInfo']], [['stdcall']]))('ITypeLib_RemoteGetTypeInfoCount_Proxy');},
    ITypeLib_RemoteGetTypeInfoCount_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeLib_RemoteGetTypeInfoCount_Stub');},
    ITypeLib_GetTypeInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']], [['stdcall']]))('ITypeLib_GetTypeInfo_Proxy');},
    ITypeLib_GetTypeInfo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeLib_GetTypeInfo_Stub');},
    ITypeLib_GetTypeInfoType_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.UINT, 'index'], [Pointer(T.TYPEKIND), 'pTKind']], [['stdcall']]))('ITypeLib_GetTypeInfoType_Proxy');},
    ITypeLib_GetTypeInfoType_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeLib_GetTypeInfoType_Stub');},
    ITypeLib_GetTypeInfoOfGuid_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTinfo']], [['stdcall']]))('ITypeLib_GetTypeInfoOfGuid_Proxy');},
    ITypeLib_GetTypeInfoOfGuid_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeLib_GetTypeInfoOfGuid_Stub');},
    ITypeLib_RemoteGetLibAttr_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.LPTLIBATTR), 'ppTLibAttr'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']], [['stdcall']]))('ITypeLib_RemoteGetLibAttr_Proxy');},
    ITypeLib_RemoteGetLibAttr_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeLib_RemoteGetLibAttr_Stub');},
    ITypeLib_GetTypeComp_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(Pointer(T.ITypeComp)), 'ppTComp']], [['stdcall']]))('ITypeLib_GetTypeComp_Proxy');},
    ITypeLib_GetTypeComp_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeLib_GetTypeComp_Stub');},
    ITypeLib_RemoteGetDocumentation_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.INT, 'index'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']], [['stdcall']]))('ITypeLib_RemoteGetDocumentation_Proxy');},
    ITypeLib_RemoteGetDocumentation_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeLib_RemoteGetDocumentation_Stub');},
    ITypeLib_RemoteIsName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(T.BOOL), 'pfName'], [Pointer(T.BSTR), 'pBstrLibName']], [['stdcall']]))('ITypeLib_RemoteIsName_Proxy');},
    ITypeLib_RemoteIsName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeLib_RemoteIsName_Stub');},
    ITypeLib_RemoteFindName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.MEMBERID), 'rgMemId'], [Pointer(T.USHORT), 'pcFound'], [Pointer(T.BSTR), 'pBstrLibName']], [['stdcall']]))('ITypeLib_RemoteFindName_Proxy');},
    ITypeLib_RemoteFindName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeLib_RemoteFindName_Stub');},
    ITypeLib_LocalReleaseTLibAttr_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This']], [['stdcall']]))('ITypeLib_LocalReleaseTLibAttr_Proxy');},
    ITypeLib_LocalReleaseTLibAttr_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeLib_LocalReleaseTLibAttr_Stub');},
    ITypeLib_GetTypeInfoCount_Proxy: function() {return (Fn(T.UINT, [[Pointer(T.ITypeLib), 'This']], [['stdcall']]))('ITypeLib_GetTypeInfoCount_Proxy');},
    ITypeLib_GetTypeInfoCount_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.UINT), 'pcTInfo']], [['stdcall']]))('ITypeLib_GetTypeInfoCount_Stub');},
    ITypeLib_GetLibAttr_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(Pointer(T.TLIBATTR)), 'ppTLibAttr']], [['stdcall']]))('ITypeLib_GetLibAttr_Proxy');},
    ITypeLib_GetLibAttr_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.LPTLIBATTR), 'ppTLibAttr'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']], [['stdcall']]))('ITypeLib_GetLibAttr_Stub');},
    ITypeLib_GetDocumentation_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.INT, 'index'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']], [['stdcall']]))('ITypeLib_GetDocumentation_Proxy');},
    ITypeLib_GetDocumentation_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.INT, 'index'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']], [['stdcall']]))('ITypeLib_GetDocumentation_Stub');},
    ITypeLib_IsName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(T.BOOL), 'pfName']], [['stdcall']]))('ITypeLib_IsName_Proxy');},
    ITypeLib_IsName_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(T.BOOL), 'pfName'], [Pointer(T.BSTR), 'pBstrLibName']], [['stdcall']]))('ITypeLib_IsName_Stub');},
    ITypeLib_FindName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.MEMBERID), 'rgMemId'], [Pointer(T.USHORT), 'pcFound']], [['stdcall']]))('ITypeLib_FindName_Proxy');},
    ITypeLib_FindName_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.MEMBERID), 'rgMemId'], [Pointer(T.USHORT), 'pcFound'], [Pointer(T.BSTR), 'pBstrLibName']], [['stdcall']]))('ITypeLib_FindName_Stub');},
    ITypeLib_ReleaseTLibAttr_Proxy: function() {return (Fn(null, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.TLIBATTR), 'pTLibAttr']], [['stdcall']]))('ITypeLib_ReleaseTLibAttr_Proxy');},
    ITypeLib_ReleaseTLibAttr_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This']], [['stdcall']]))('ITypeLib_ReleaseTLibAttr_Stub');},
    IID_ITypeLib2: function() {return (T.GUID)('IID_ITypeLib2');},
    ITypeLib2_GetCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']], [['stdcall']]))('ITypeLib2_GetCustData_Proxy');},
    ITypeLib2_GetCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeLib2_GetCustData_Stub');},
    ITypeLib2_RemoteGetLibStatistics_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.ULONG), 'pcUniqueNames'], [Pointer(T.ULONG), 'pcchUniqueNames']], [['stdcall']]))('ITypeLib2_RemoteGetLibStatistics_Proxy');},
    ITypeLib2_RemoteGetLibStatistics_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeLib2_RemoteGetLibStatistics_Stub');},
    ITypeLib2_RemoteGetDocumentation2_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.INT, 'index'], [T.LCID, 'lcid'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pbstrHelpString'], [Pointer(T.DWORD), 'pdwHelpStringContext'], [Pointer(T.BSTR), 'pbstrHelpStringDll']], [['stdcall']]))('ITypeLib2_RemoteGetDocumentation2_Proxy');},
    ITypeLib2_RemoteGetDocumentation2_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeLib2_RemoteGetDocumentation2_Stub');},
    ITypeLib2_GetAllCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.CUSTDATA), 'pCustData']], [['stdcall']]))('ITypeLib2_GetAllCustData_Proxy');},
    ITypeLib2_GetAllCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeLib2_GetAllCustData_Stub');},
    ITypeLib2_GetLibStatistics_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.ULONG), 'pcUniqueNames'], [Pointer(T.ULONG), 'pcchUniqueNames']], [['stdcall']]))('ITypeLib2_GetLibStatistics_Proxy');},
    ITypeLib2_GetLibStatistics_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.ULONG), 'pcUniqueNames'], [Pointer(T.ULONG), 'pcchUniqueNames']], [['stdcall']]))('ITypeLib2_GetLibStatistics_Stub');},
    ITypeLib2_GetDocumentation2_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.INT, 'index'], [T.LCID, 'lcid'], [Pointer(T.BSTR), 'pbstrHelpString'], [Pointer(T.DWORD), 'pdwHelpStringContext'], [Pointer(T.BSTR), 'pbstrHelpStringDll']], [['stdcall']]))('ITypeLib2_GetDocumentation2_Proxy');},
    ITypeLib2_GetDocumentation2_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.INT, 'index'], [T.LCID, 'lcid'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pbstrHelpString'], [Pointer(T.DWORD), 'pdwHelpStringContext'], [Pointer(T.BSTR), 'pbstrHelpStringDll']], [['stdcall']]))('ITypeLib2_GetDocumentation2_Stub');},
    IID_ITypeChangeEvents: function() {return (T.GUID)('IID_ITypeChangeEvents');},
    ITypeChangeEvents_RequestTypeChange_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeChangeEvents), 'This'], [T.CHANGEKIND, 'changeKind'], [Pointer(T.ITypeInfo), 'pTInfoBefore'], [T.LPOLESTR, 'pStrName'], [Pointer(T.INT), 'pfCancel']], [['stdcall']]))('ITypeChangeEvents_RequestTypeChange_Proxy');},
    ITypeChangeEvents_RequestTypeChange_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeChangeEvents_RequestTypeChange_Stub');},
    ITypeChangeEvents_AfterTypeChange_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeChangeEvents), 'This'], [T.CHANGEKIND, 'changeKind'], [Pointer(T.ITypeInfo), 'pTInfoAfter'], [T.LPOLESTR, 'pStrName']], [['stdcall']]))('ITypeChangeEvents_AfterTypeChange_Proxy');},
    ITypeChangeEvents_AfterTypeChange_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeChangeEvents_AfterTypeChange_Stub');},
    IID_IErrorInfo: function() {return (T.GUID)('IID_IErrorInfo');},
    IErrorInfo_GetGUID_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.GUID), 'pGUID']], [['stdcall']]))('IErrorInfo_GetGUID_Proxy');},
    IErrorInfo_GetGUID_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IErrorInfo_GetGUID_Stub');},
    IErrorInfo_GetSource_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.BSTR), 'pBstrSource']], [['stdcall']]))('IErrorInfo_GetSource_Proxy');},
    IErrorInfo_GetSource_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IErrorInfo_GetSource_Stub');},
    IErrorInfo_GetDescription_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.BSTR), 'pBstrDescription']], [['stdcall']]))('IErrorInfo_GetDescription_Proxy');},
    IErrorInfo_GetDescription_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IErrorInfo_GetDescription_Stub');},
    IErrorInfo_GetHelpFile_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.BSTR), 'pBstrHelpFile']], [['stdcall']]))('IErrorInfo_GetHelpFile_Proxy');},
    IErrorInfo_GetHelpFile_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IErrorInfo_GetHelpFile_Stub');},
    IErrorInfo_GetHelpContext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.DWORD), 'pdwHelpContext']], [['stdcall']]))('IErrorInfo_GetHelpContext_Proxy');},
    IErrorInfo_GetHelpContext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IErrorInfo_GetHelpContext_Stub');},
    IID_ICreateErrorInfo: function() {return (T.GUID)('IID_ICreateErrorInfo');},
    ICreateErrorInfo_SetGUID_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [Pointer(T.GUID), 'rguid']], [['stdcall']]))('ICreateErrorInfo_SetGUID_Proxy');},
    ICreateErrorInfo_SetGUID_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateErrorInfo_SetGUID_Stub');},
    ICreateErrorInfo_SetSource_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [T.LPOLESTR, 'szSource']], [['stdcall']]))('ICreateErrorInfo_SetSource_Proxy');},
    ICreateErrorInfo_SetSource_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateErrorInfo_SetSource_Stub');},
    ICreateErrorInfo_SetDescription_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [T.LPOLESTR, 'szDescription']], [['stdcall']]))('ICreateErrorInfo_SetDescription_Proxy');},
    ICreateErrorInfo_SetDescription_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateErrorInfo_SetDescription_Stub');},
    ICreateErrorInfo_SetHelpFile_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [T.LPOLESTR, 'szHelpFile']], [['stdcall']]))('ICreateErrorInfo_SetHelpFile_Proxy');},
    ICreateErrorInfo_SetHelpFile_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateErrorInfo_SetHelpFile_Stub');},
    ICreateErrorInfo_SetHelpContext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [T.DWORD, 'dwHelpContext']], [['stdcall']]))('ICreateErrorInfo_SetHelpContext_Proxy');},
    ICreateErrorInfo_SetHelpContext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateErrorInfo_SetHelpContext_Stub');},
    IID_ISupportErrorInfo: function() {return (T.GUID)('IID_ISupportErrorInfo');},
    ISupportErrorInfo_InterfaceSupportsErrorInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISupportErrorInfo), 'This'], [Pointer(T.IID), 'riid']], [['stdcall']]))('ISupportErrorInfo_InterfaceSupportsErrorInfo_Proxy');},
    ISupportErrorInfo_InterfaceSupportsErrorInfo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISupportErrorInfo_InterfaceSupportsErrorInfo_Stub');},
    IID_ITypeFactory: function() {return (T.GUID)('IID_ITypeFactory');},
    ITypeFactory_CreateFromTypeInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeFactory), 'This'], [Pointer(T.ITypeInfo), 'pTypeInfo'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppv']], [['stdcall']]))('ITypeFactory_CreateFromTypeInfo_Proxy');},
    ITypeFactory_CreateFromTypeInfo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeFactory_CreateFromTypeInfo_Stub');},
    IID_ITypeMarshal: function() {return (T.GUID)('IID_ITypeMarshal');},
    ITypeMarshal_Size_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [T.PVOID, 'pvType'], [T.DWORD, 'dwDestContext'], [T.PVOID, 'pvDestContext'], [Pointer(T.ULONG), 'pSize']], [['stdcall']]))('ITypeMarshal_Size_Proxy');},
    ITypeMarshal_Size_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeMarshal_Size_Stub');},
    ITypeMarshal_Marshal_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [T.PVOID, 'pvType'], [T.DWORD, 'dwDestContext'], [T.PVOID, 'pvDestContext'], [T.ULONG, 'cbBufferLength'], [Pointer(T.BYTE), 'pBuffer'], [Pointer(T.ULONG), 'pcbWritten']], [['stdcall']]))('ITypeMarshal_Marshal_Proxy');},
    ITypeMarshal_Marshal_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeMarshal_Marshal_Stub');},
    ITypeMarshal_Unmarshal_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [T.PVOID, 'pvType'], [T.DWORD, 'dwFlags'], [T.ULONG, 'cbBufferLength'], [Pointer(T.BYTE), 'pBuffer'], [Pointer(T.ULONG), 'pcbRead']], [['stdcall']]))('ITypeMarshal_Unmarshal_Proxy');},
    ITypeMarshal_Unmarshal_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeMarshal_Unmarshal_Stub');},
    ITypeMarshal_Free_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [T.PVOID, 'pvType']], [['stdcall']]))('ITypeMarshal_Free_Proxy');},
    ITypeMarshal_Free_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ITypeMarshal_Free_Stub');},
    IID_IRecordInfo: function() {return (T.GUID)('IID_IRecordInfo');},
    IRecordInfo_RecordInit_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvNew']], [['stdcall']]))('IRecordInfo_RecordInit_Proxy');},
    IRecordInfo_RecordInit_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRecordInfo_RecordInit_Stub');},
    IRecordInfo_RecordClear_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvExisting']], [['stdcall']]))('IRecordInfo_RecordClear_Proxy');},
    IRecordInfo_RecordClear_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRecordInfo_RecordClear_Stub');},
    IRecordInfo_RecordCopy_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvExisting'], [T.PVOID, 'pvNew']], [['stdcall']]))('IRecordInfo_RecordCopy_Proxy');},
    IRecordInfo_RecordCopy_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRecordInfo_RecordCopy_Stub');},
    IRecordInfo_GetGuid_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.GUID), 'pguid']], [['stdcall']]))('IRecordInfo_GetGuid_Proxy');},
    IRecordInfo_GetGuid_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRecordInfo_GetGuid_Stub');},
    IRecordInfo_GetName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.BSTR), 'pbstrName']], [['stdcall']]))('IRecordInfo_GetName_Proxy');},
    IRecordInfo_GetName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRecordInfo_GetName_Stub');},
    IRecordInfo_GetSize_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.ULONG), 'pcbSize']], [['stdcall']]))('IRecordInfo_GetSize_Proxy');},
    IRecordInfo_GetSize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRecordInfo_GetSize_Stub');},
    IRecordInfo_GetTypeInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(Pointer(T.ITypeInfo)), 'ppTypeInfo']], [['stdcall']]))('IRecordInfo_GetTypeInfo_Proxy');},
    IRecordInfo_GetTypeInfo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRecordInfo_GetTypeInfo_Stub');},
    IRecordInfo_GetField_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvData'], [T.LPCOLESTR, 'szFieldName'], [Pointer(T.VARIANT), 'pvarField']], [['stdcall']]))('IRecordInfo_GetField_Proxy');},
    IRecordInfo_GetField_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRecordInfo_GetField_Stub');},
    IRecordInfo_GetFieldNoCopy_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvData'], [T.LPCOLESTR, 'szFieldName'], [Pointer(T.VARIANT), 'pvarField'], [Pointer(T.PVOID), 'ppvDataCArray']], [['stdcall']]))('IRecordInfo_GetFieldNoCopy_Proxy');},
    IRecordInfo_GetFieldNoCopy_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRecordInfo_GetFieldNoCopy_Stub');},
    IRecordInfo_PutField_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.ULONG, 'wFlags'], [T.PVOID, 'pvData'], [T.LPCOLESTR, 'szFieldName'], [Pointer(T.VARIANT), 'pvarField']], [['stdcall']]))('IRecordInfo_PutField_Proxy');},
    IRecordInfo_PutField_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRecordInfo_PutField_Stub');},
    IRecordInfo_PutFieldNoCopy_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.ULONG, 'wFlags'], [T.PVOID, 'pvData'], [T.LPCOLESTR, 'szFieldName'], [Pointer(T.VARIANT), 'pvarField']], [['stdcall']]))('IRecordInfo_PutFieldNoCopy_Proxy');},
    IRecordInfo_PutFieldNoCopy_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRecordInfo_PutFieldNoCopy_Stub');},
    IRecordInfo_GetFieldNames_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.ULONG), 'pcNames'], [Pointer(T.BSTR), 'rgBstrNames']], [['stdcall']]))('IRecordInfo_GetFieldNames_Proxy');},
    IRecordInfo_GetFieldNames_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRecordInfo_GetFieldNames_Stub');},
    IRecordInfo_IsMatchingType_Proxy: function() {return (Fn(T.BOOL, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.IRecordInfo), 'pRecordInfo']], [['stdcall']]))('IRecordInfo_IsMatchingType_Proxy');},
    IRecordInfo_IsMatchingType_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRecordInfo_IsMatchingType_Stub');},
    IRecordInfo_RecordCreate_Proxy: function() {return (Fn(T.PVOID, [[Pointer(T.IRecordInfo), 'This']], [['stdcall']]))('IRecordInfo_RecordCreate_Proxy');},
    IRecordInfo_RecordCreate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRecordInfo_RecordCreate_Stub');},
    IRecordInfo_RecordCreateCopy_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvSource'], [Pointer(T.PVOID), 'ppvDest']], [['stdcall']]))('IRecordInfo_RecordCreateCopy_Proxy');},
    IRecordInfo_RecordCreateCopy_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRecordInfo_RecordCreateCopy_Stub');},
    IRecordInfo_RecordDestroy_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvRecord']], [['stdcall']]))('IRecordInfo_RecordDestroy_Proxy');},
    IRecordInfo_RecordDestroy_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IRecordInfo_RecordDestroy_Stub');},
    IID_ICreateTypeInfo: function() {return (T.GUID)('IID_ICreateTypeInfo');},
    ICreateTypeInfo_SetGuid_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.GUID), 'guid']], [['stdcall']]))('ICreateTypeInfo_SetGuid_Proxy');},
    ICreateTypeInfo_SetGuid_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetGuid_Stub');},
    ICreateTypeInfo_SetTypeFlags_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'uTypeFlags']], [['stdcall']]))('ICreateTypeInfo_SetTypeFlags_Proxy');},
    ICreateTypeInfo_SetTypeFlags_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetTypeFlags_Stub');},
    ICreateTypeInfo_SetDocString_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.LPOLESTR, 'pStrDoc']], [['stdcall']]))('ICreateTypeInfo_SetDocString_Proxy');},
    ICreateTypeInfo_SetDocString_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetDocString_Stub');},
    ICreateTypeInfo_SetHelpContext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.DWORD, 'dwHelpContext']], [['stdcall']]))('ICreateTypeInfo_SetHelpContext_Proxy');},
    ICreateTypeInfo_SetHelpContext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetHelpContext_Stub');},
    ICreateTypeInfo_SetVersion_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.WORD, 'wMajorVerNum'], [T.WORD, 'wMinorVerNum']], [['stdcall']]))('ICreateTypeInfo_SetVersion_Proxy');},
    ICreateTypeInfo_SetVersion_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetVersion_Stub');},
    ICreateTypeInfo_AddRefTypeInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.ITypeInfo), 'pTInfo'], [Pointer(T.HREFTYPE), 'phRefType']], [['stdcall']]))('ICreateTypeInfo_AddRefTypeInfo_Proxy');},
    ICreateTypeInfo_AddRefTypeInfo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_AddRefTypeInfo_Stub');},
    ICreateTypeInfo_AddFuncDesc_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.FUNCDESC), 'pFuncDesc']], [['stdcall']]))('ICreateTypeInfo_AddFuncDesc_Proxy');},
    ICreateTypeInfo_AddFuncDesc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_AddFuncDesc_Stub');},
    ICreateTypeInfo_AddImplType_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.HREFTYPE, 'hRefType']], [['stdcall']]))('ICreateTypeInfo_AddImplType_Proxy');},
    ICreateTypeInfo_AddImplType_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_AddImplType_Stub');},
    ICreateTypeInfo_SetImplTypeFlags_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.INT, 'implTypeFlags']], [['stdcall']]))('ICreateTypeInfo_SetImplTypeFlags_Proxy');},
    ICreateTypeInfo_SetImplTypeFlags_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetImplTypeFlags_Stub');},
    ICreateTypeInfo_SetAlignment_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.WORD, 'cbAlignment']], [['stdcall']]))('ICreateTypeInfo_SetAlignment_Proxy');},
    ICreateTypeInfo_SetAlignment_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetAlignment_Stub');},
    ICreateTypeInfo_SetSchema_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.LPOLESTR, 'pStrSchema']], [['stdcall']]))('ICreateTypeInfo_SetSchema_Proxy');},
    ICreateTypeInfo_SetSchema_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetSchema_Stub');},
    ICreateTypeInfo_AddVarDesc_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.VARDESC), 'pVarDesc']], [['stdcall']]))('ICreateTypeInfo_AddVarDesc_Proxy');},
    ICreateTypeInfo_AddVarDesc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_AddVarDesc_Stub');},
    ICreateTypeInfo_SetFuncAndParamNames_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames']], [['stdcall']]))('ICreateTypeInfo_SetFuncAndParamNames_Proxy');},
    ICreateTypeInfo_SetFuncAndParamNames_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetFuncAndParamNames_Stub');},
    ICreateTypeInfo_SetVarName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szName']], [['stdcall']]))('ICreateTypeInfo_SetVarName_Proxy');},
    ICreateTypeInfo_SetVarName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetVarName_Stub');},
    ICreateTypeInfo_SetTypeDescAlias_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.TYPEDESC), 'pTDescAlias']], [['stdcall']]))('ICreateTypeInfo_SetTypeDescAlias_Proxy');},
    ICreateTypeInfo_SetTypeDescAlias_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetTypeDescAlias_Stub');},
    ICreateTypeInfo_DefineFuncAsDllEntry_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDllName'], [T.LPOLESTR, 'szProcName']], [['stdcall']]))('ICreateTypeInfo_DefineFuncAsDllEntry_Proxy');},
    ICreateTypeInfo_DefineFuncAsDllEntry_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_DefineFuncAsDllEntry_Stub');},
    ICreateTypeInfo_SetFuncDocString_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDocString']], [['stdcall']]))('ICreateTypeInfo_SetFuncDocString_Proxy');},
    ICreateTypeInfo_SetFuncDocString_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetFuncDocString_Stub');},
    ICreateTypeInfo_SetVarDocString_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDocString']], [['stdcall']]))('ICreateTypeInfo_SetVarDocString_Proxy');},
    ICreateTypeInfo_SetVarDocString_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetVarDocString_Stub');},
    ICreateTypeInfo_SetFuncHelpContext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.DWORD, 'dwHelpContext']], [['stdcall']]))('ICreateTypeInfo_SetFuncHelpContext_Proxy');},
    ICreateTypeInfo_SetFuncHelpContext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetFuncHelpContext_Stub');},
    ICreateTypeInfo_SetVarHelpContext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.DWORD, 'dwHelpContext']], [['stdcall']]))('ICreateTypeInfo_SetVarHelpContext_Proxy');},
    ICreateTypeInfo_SetVarHelpContext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetVarHelpContext_Stub');},
    ICreateTypeInfo_SetMops_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.BSTR, 'bstrMops']], [['stdcall']]))('ICreateTypeInfo_SetMops_Proxy');},
    ICreateTypeInfo_SetMops_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetMops_Stub');},
    ICreateTypeInfo_SetTypeIdldesc_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.IDLDESC), 'pIdlDesc']], [['stdcall']]))('ICreateTypeInfo_SetTypeIdldesc_Proxy');},
    ICreateTypeInfo_SetTypeIdldesc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_SetTypeIdldesc_Stub');},
    ICreateTypeInfo_LayOut_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This']], [['stdcall']]))('ICreateTypeInfo_LayOut_Proxy');},
    ICreateTypeInfo_LayOut_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo_LayOut_Stub');},
    IID_ICreateTypeInfo2: function() {return (T.GUID)('IID_ICreateTypeInfo2');},
    ICreateTypeInfo2_DeleteFuncDesc_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index']], [['stdcall']]))('ICreateTypeInfo2_DeleteFuncDesc_Proxy');},
    ICreateTypeInfo2_DeleteFuncDesc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo2_DeleteFuncDesc_Stub');},
    ICreateTypeInfo2_DeleteFuncDescByMemId_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind']], [['stdcall']]))('ICreateTypeInfo2_DeleteFuncDescByMemId_Proxy');},
    ICreateTypeInfo2_DeleteFuncDescByMemId_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo2_DeleteFuncDescByMemId_Stub');},
    ICreateTypeInfo2_DeleteVarDesc_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index']], [['stdcall']]))('ICreateTypeInfo2_DeleteVarDesc_Proxy');},
    ICreateTypeInfo2_DeleteVarDesc_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo2_DeleteVarDesc_Stub');},
    ICreateTypeInfo2_DeleteVarDescByMemId_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.MEMBERID, 'memid']], [['stdcall']]))('ICreateTypeInfo2_DeleteVarDescByMemId_Proxy');},
    ICreateTypeInfo2_DeleteVarDescByMemId_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo2_DeleteVarDescByMemId_Stub');},
    ICreateTypeInfo2_DeleteImplType_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index']], [['stdcall']]))('ICreateTypeInfo2_DeleteImplType_Proxy');},
    ICreateTypeInfo2_DeleteImplType_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo2_DeleteImplType_Stub');},
    ICreateTypeInfo2_SetCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']], [['stdcall']]))('ICreateTypeInfo2_SetCustData_Proxy');},
    ICreateTypeInfo2_SetCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo2_SetCustData_Stub');},
    ICreateTypeInfo2_SetFuncCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']], [['stdcall']]))('ICreateTypeInfo2_SetFuncCustData_Proxy');},
    ICreateTypeInfo2_SetFuncCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo2_SetFuncCustData_Stub');},
    ICreateTypeInfo2_SetParamCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'indexFunc'], [T.UINT, 'indexParam'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']], [['stdcall']]))('ICreateTypeInfo2_SetParamCustData_Proxy');},
    ICreateTypeInfo2_SetParamCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo2_SetParamCustData_Stub');},
    ICreateTypeInfo2_SetVarCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']], [['stdcall']]))('ICreateTypeInfo2_SetVarCustData_Proxy');},
    ICreateTypeInfo2_SetVarCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo2_SetVarCustData_Stub');},
    ICreateTypeInfo2_SetImplTypeCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']], [['stdcall']]))('ICreateTypeInfo2_SetImplTypeCustData_Proxy');},
    ICreateTypeInfo2_SetImplTypeCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo2_SetImplTypeCustData_Stub');},
    ICreateTypeInfo2_SetHelpStringContext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.ULONG, 'dwHelpStringContext']], [['stdcall']]))('ICreateTypeInfo2_SetHelpStringContext_Proxy');},
    ICreateTypeInfo2_SetHelpStringContext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo2_SetHelpStringContext_Stub');},
    ICreateTypeInfo2_SetFuncHelpStringContext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.ULONG, 'dwHelpStringContext']], [['stdcall']]))('ICreateTypeInfo2_SetFuncHelpStringContext_Proxy');},
    ICreateTypeInfo2_SetFuncHelpStringContext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo2_SetFuncHelpStringContext_Stub');},
    ICreateTypeInfo2_SetVarHelpStringContext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.ULONG, 'dwHelpStringContext']], [['stdcall']]))('ICreateTypeInfo2_SetVarHelpStringContext_Proxy');},
    ICreateTypeInfo2_SetVarHelpStringContext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo2_SetVarHelpStringContext_Stub');},
    ICreateTypeInfo2_Invalidate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This']], [['stdcall']]))('ICreateTypeInfo2_Invalidate_Proxy');},
    ICreateTypeInfo2_Invalidate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo2_Invalidate_Stub');},
    ICreateTypeInfo2_SetName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.LPOLESTR, 'szName']], [['stdcall']]))('ICreateTypeInfo2_SetName_Proxy');},
    ICreateTypeInfo2_SetName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeInfo2_SetName_Stub');},
    IID_ICreateTypeLib: function() {return (T.GUID)('IID_ICreateTypeLib');},
    ICreateTypeLib_CreateTypeInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LPOLESTR, 'szName'], [T.TYPEKIND, 'tkind'], [Pointer(Pointer(T.ICreateTypeInfo)), 'ppCTInfo']], [['stdcall']]))('ICreateTypeLib_CreateTypeInfo_Proxy');},
    ICreateTypeLib_CreateTypeInfo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeLib_CreateTypeInfo_Stub');},
    ICreateTypeLib_SetName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LPOLESTR, 'szName']], [['stdcall']]))('ICreateTypeLib_SetName_Proxy');},
    ICreateTypeLib_SetName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeLib_SetName_Stub');},
    ICreateTypeLib_SetVersion_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.WORD, 'wMajorVerNum'], [T.WORD, 'wMinorVerNum']], [['stdcall']]))('ICreateTypeLib_SetVersion_Proxy');},
    ICreateTypeLib_SetVersion_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeLib_SetVersion_Stub');},
    ICreateTypeLib_SetGuid_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [Pointer(T.GUID), 'guid']], [['stdcall']]))('ICreateTypeLib_SetGuid_Proxy');},
    ICreateTypeLib_SetGuid_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeLib_SetGuid_Stub');},
    ICreateTypeLib_SetDocString_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LPOLESTR, 'szDoc']], [['stdcall']]))('ICreateTypeLib_SetDocString_Proxy');},
    ICreateTypeLib_SetDocString_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeLib_SetDocString_Stub');},
    ICreateTypeLib_SetHelpFileName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LPOLESTR, 'szHelpFileName']], [['stdcall']]))('ICreateTypeLib_SetHelpFileName_Proxy');},
    ICreateTypeLib_SetHelpFileName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeLib_SetHelpFileName_Stub');},
    ICreateTypeLib_SetHelpContext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.DWORD, 'dwHelpContext']], [['stdcall']]))('ICreateTypeLib_SetHelpContext_Proxy');},
    ICreateTypeLib_SetHelpContext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeLib_SetHelpContext_Stub');},
    ICreateTypeLib_SetLcid_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LCID, 'lcid']], [['stdcall']]))('ICreateTypeLib_SetLcid_Proxy');},
    ICreateTypeLib_SetLcid_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeLib_SetLcid_Stub');},
    ICreateTypeLib_SetLibFlags_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.UINT, 'uLibFlags']], [['stdcall']]))('ICreateTypeLib_SetLibFlags_Proxy');},
    ICreateTypeLib_SetLibFlags_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeLib_SetLibFlags_Stub');},
    ICreateTypeLib_SaveAllChanges_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This']], [['stdcall']]))('ICreateTypeLib_SaveAllChanges_Proxy');},
    ICreateTypeLib_SaveAllChanges_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeLib_SaveAllChanges_Stub');},
    IID_ICreateTypeLib2: function() {return (T.GUID)('IID_ICreateTypeLib2');},
    ICreateTypeLib2_DeleteTypeInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LPOLESTR, 'szName']], [['stdcall']]))('ICreateTypeLib2_DeleteTypeInfo_Proxy');},
    ICreateTypeLib2_DeleteTypeInfo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeLib2_DeleteTypeInfo_Stub');},
    ICreateTypeLib2_SetCustData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']], [['stdcall']]))('ICreateTypeLib2_SetCustData_Proxy');},
    ICreateTypeLib2_SetCustData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeLib2_SetCustData_Stub');},
    ICreateTypeLib2_SetHelpStringContext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.ULONG, 'dwHelpStringContext']], [['stdcall']]))('ICreateTypeLib2_SetHelpStringContext_Proxy');},
    ICreateTypeLib2_SetHelpStringContext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeLib2_SetHelpStringContext_Stub');},
    ICreateTypeLib2_SetHelpStringDll_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LPOLESTR, 'szFileName']], [['stdcall']]))('ICreateTypeLib2_SetHelpStringDll_Proxy');},
    ICreateTypeLib2_SetHelpStringDll_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ICreateTypeLib2_SetHelpStringDll_Stub');},
    IID_IErrorLog: function() {return (T.GUID)('IID_IErrorLog');},
    IErrorLog_AddError_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IErrorLog), 'This'], [T.LPCOLESTR, 'pszPropName'], [Pointer(T.EXCEPINFO), 'pExcepInfo']], [['stdcall']]))('IErrorLog_AddError_Proxy');},
    IErrorLog_AddError_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IErrorLog_AddError_Stub');},
    IID_IPropertyBag: function() {return (T.GUID)('IID_IPropertyBag');},
    IPropertyBag_RemoteRead_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertyBag), 'This'], [T.LPCOLESTR, 'pszPropName'], [Pointer(T.VARIANT), 'pVar'], [Pointer(T.IErrorLog), 'pErrorLog'], [T.DWORD, 'varType'], [Pointer(T.IUnknown), 'pUnkObj']], [['stdcall']]))('IPropertyBag_RemoteRead_Proxy');},
    IPropertyBag_RemoteRead_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertyBag_RemoteRead_Stub');},
    IPropertyBag_Write_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertyBag), 'This'], [T.LPCOLESTR, 'pszPropName'], [Pointer(T.VARIANT), 'pVar']], [['stdcall']]))('IPropertyBag_Write_Proxy');},
    IPropertyBag_Write_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertyBag_Write_Stub');},
    IPropertyBag_Read_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertyBag), 'This'], [T.LPCOLESTR, 'pszPropName'], [Pointer(T.VARIANT), 'pVar'], [Pointer(T.IErrorLog), 'pErrorLog']], [['stdcall']]))('IPropertyBag_Read_Proxy');},
    IPropertyBag_Read_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertyBag), 'This'], [T.LPCOLESTR, 'pszPropName'], [Pointer(T.VARIANT), 'pVar'], [Pointer(T.IErrorLog), 'pErrorLog'], [T.DWORD, 'varType'], [Pointer(T.IUnknown), 'pUnkObj']], [['stdcall']]))('IPropertyBag_Read_Stub');},
    VARIANT_UserSize: function() {return (Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.VARIANT)]], [['stdcall']]))('VARIANT_UserSize');},
    VARIANT_UserMarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.VARIANT)]], [['stdcall']]))('VARIANT_UserMarshal');},
    VARIANT_UserUnmarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.VARIANT)]], [['stdcall']]))('VARIANT_UserUnmarshal');},
    VARIANT_UserFree: function() {return (Fn(null, [[Pointer(T.ULONG)], [Pointer(T.VARIANT)]], [['stdcall']]))('VARIANT_UserFree');},
    BSTR_UserSize: function() {return (Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('BSTR_UserSize');},
    BSTR_UserMarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.BSTR)]], [['stdcall']]))('BSTR_UserMarshal');},
    BSTR_UserUnmarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.BSTR)]], [['stdcall']]))('BSTR_UserUnmarshal');},
    BSTR_UserFree: function() {return (Fn(null, [[Pointer(T.ULONG)], [Pointer(T.BSTR)]], [['stdcall']]))('BSTR_UserFree');},
    CLEANLOCALSTORAGE_UserSize: function() {return (Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.CLEANLOCALSTORAGE)]], [['stdcall']]))('CLEANLOCALSTORAGE_UserSize');},
    CLEANLOCALSTORAGE_UserMarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.CLEANLOCALSTORAGE)]], [['stdcall']]))('CLEANLOCALSTORAGE_UserMarshal');},
    CLEANLOCALSTORAGE_UserUnmarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.CLEANLOCALSTORAGE)]], [['stdcall']]))('CLEANLOCALSTORAGE_UserUnmarshal');},
    CLEANLOCALSTORAGE_UserFree: function() {return (Fn(null, [[Pointer(T.ULONG)], [Pointer(T.CLEANLOCALSTORAGE)]], [['stdcall']]))('CLEANLOCALSTORAGE_UserFree');},
    LIBID_MSXML: function() {return (T.GUID)('LIBID_MSXML');},
    IID_IXMLDOMNode: function() {return (T.GUID)('IID_IXMLDOMNode');},
    IXMLDOMNode_get_nodeName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'name']], [['stdcall']]))('IXMLDOMNode_get_nodeName_Proxy');},
    IXMLDOMNode_get_nodeName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_nodeName_Stub');},
    IXMLDOMNode_get_nodeValue_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT), 'value']], [['stdcall']]))('IXMLDOMNode_get_nodeValue_Proxy');},
    IXMLDOMNode_get_nodeValue_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_nodeValue_Stub');},
    IXMLDOMNode_put_nodeValue_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.VARIANT, 'value']], [['stdcall']]))('IXMLDOMNode_put_nodeValue_Proxy');},
    IXMLDOMNode_put_nodeValue_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_put_nodeValue_Stub');},
    IXMLDOMNode_get_nodeType_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.DOMNodeType), 'type']], [['stdcall']]))('IXMLDOMNode_get_nodeType_Proxy');},
    IXMLDOMNode_get_nodeType_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_nodeType_Stub');},
    IXMLDOMNode_get_parentNode_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']], [['stdcall']]))('IXMLDOMNode_get_parentNode_Proxy');},
    IXMLDOMNode_get_parentNode_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_parentNode_Stub');},
    IXMLDOMNode_get_childNodes_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']], [['stdcall']]))('IXMLDOMNode_get_childNodes_Proxy');},
    IXMLDOMNode_get_childNodes_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_childNodes_Stub');},
    IXMLDOMNode_get_firstChild_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']], [['stdcall']]))('IXMLDOMNode_get_firstChild_Proxy');},
    IXMLDOMNode_get_firstChild_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_firstChild_Stub');},
    IXMLDOMNode_get_lastChild_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']], [['stdcall']]))('IXMLDOMNode_get_lastChild_Proxy');},
    IXMLDOMNode_get_lastChild_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_lastChild_Stub');},
    IXMLDOMNode_get_previousSibling_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']], [['stdcall']]))('IXMLDOMNode_get_previousSibling_Proxy');},
    IXMLDOMNode_get_previousSibling_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_previousSibling_Stub');},
    IXMLDOMNode_get_nextSibling_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']], [['stdcall']]))('IXMLDOMNode_get_nextSibling_Proxy');},
    IXMLDOMNode_get_nextSibling_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_nextSibling_Stub');},
    IXMLDOMNode_get_attributes_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']], [['stdcall']]))('IXMLDOMNode_get_attributes_Proxy');},
    IXMLDOMNode_get_attributes_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_attributes_Stub');},
    IXMLDOMNode_insertBefore_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']], [['stdcall']]))('IXMLDOMNode_insertBefore_Proxy');},
    IXMLDOMNode_insertBefore_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_insertBefore_Stub');},
    IXMLDOMNode_replaceChild_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']], [['stdcall']]))('IXMLDOMNode_replaceChild_Proxy');},
    IXMLDOMNode_replaceChild_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_replaceChild_Stub');},
    IXMLDOMNode_removeChild_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']], [['stdcall']]))('IXMLDOMNode_removeChild_Proxy');},
    IXMLDOMNode_removeChild_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_removeChild_Stub');},
    IXMLDOMNode_appendChild_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']], [['stdcall']]))('IXMLDOMNode_appendChild_Proxy');},
    IXMLDOMNode_appendChild_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_appendChild_Stub');},
    IXMLDOMNode_hasChildNodes_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']], [['stdcall']]))('IXMLDOMNode_hasChildNodes_Proxy');},
    IXMLDOMNode_hasChildNodes_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_hasChildNodes_Stub');},
    IXMLDOMNode_get_ownerDocument_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']], [['stdcall']]))('IXMLDOMNode_get_ownerDocument_Proxy');},
    IXMLDOMNode_get_ownerDocument_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_ownerDocument_Stub');},
    IXMLDOMNode_cloneNode_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']], [['stdcall']]))('IXMLDOMNode_cloneNode_Proxy');},
    IXMLDOMNode_cloneNode_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_cloneNode_Stub');},
    IXMLDOMNode_get_nodeTypeString_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'nodeType']], [['stdcall']]))('IXMLDOMNode_get_nodeTypeString_Proxy');},
    IXMLDOMNode_get_nodeTypeString_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_nodeTypeString_Stub');},
    IXMLDOMNode_get_text_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'text']], [['stdcall']]))('IXMLDOMNode_get_text_Proxy');},
    IXMLDOMNode_get_text_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_text_Stub');},
    IXMLDOMNode_put_text_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.BSTR, 'text']], [['stdcall']]))('IXMLDOMNode_put_text_Proxy');},
    IXMLDOMNode_put_text_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_put_text_Stub');},
    IXMLDOMNode_get_specified_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']], [['stdcall']]))('IXMLDOMNode_get_specified_Proxy');},
    IXMLDOMNode_get_specified_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_specified_Stub');},
    IXMLDOMNode_get_definition_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']], [['stdcall']]))('IXMLDOMNode_get_definition_Proxy');},
    IXMLDOMNode_get_definition_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_definition_Stub');},
    IXMLDOMNode_get_nodeTypedValue_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT), 'typedValue']], [['stdcall']]))('IXMLDOMNode_get_nodeTypedValue_Proxy');},
    IXMLDOMNode_get_nodeTypedValue_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_nodeTypedValue_Stub');},
    IXMLDOMNode_put_nodeTypedValue_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.VARIANT, 'typedValue']], [['stdcall']]))('IXMLDOMNode_put_nodeTypedValue_Proxy');},
    IXMLDOMNode_put_nodeTypedValue_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_put_nodeTypedValue_Stub');},
    IXMLDOMNode_get_dataType_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT), 'dataTypeName']], [['stdcall']]))('IXMLDOMNode_get_dataType_Proxy');},
    IXMLDOMNode_get_dataType_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_dataType_Stub');},
    IXMLDOMNode_put_dataType_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.BSTR, 'dataTypeName']], [['stdcall']]))('IXMLDOMNode_put_dataType_Proxy');},
    IXMLDOMNode_put_dataType_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_put_dataType_Stub');},
    IXMLDOMNode_get_xml_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'xmlString']], [['stdcall']]))('IXMLDOMNode_get_xml_Proxy');},
    IXMLDOMNode_get_xml_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_xml_Stub');},
    IXMLDOMNode_transformNode_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']], [['stdcall']]))('IXMLDOMNode_transformNode_Proxy');},
    IXMLDOMNode_transformNode_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_transformNode_Stub');},
    IXMLDOMNode_selectNodes_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']], [['stdcall']]))('IXMLDOMNode_selectNodes_Proxy');},
    IXMLDOMNode_selectNodes_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_selectNodes_Stub');},
    IXMLDOMNode_selectSingleNode_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']], [['stdcall']]))('IXMLDOMNode_selectSingleNode_Proxy');},
    IXMLDOMNode_selectSingleNode_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_selectSingleNode_Stub');},
    IXMLDOMNode_get_parsed_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']], [['stdcall']]))('IXMLDOMNode_get_parsed_Proxy');},
    IXMLDOMNode_get_parsed_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_parsed_Stub');},
    IXMLDOMNode_get_namespaceURI_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'namespaceURI']], [['stdcall']]))('IXMLDOMNode_get_namespaceURI_Proxy');},
    IXMLDOMNode_get_namespaceURI_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_namespaceURI_Stub');},
    IXMLDOMNode_get_prefix_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'prefixString']], [['stdcall']]))('IXMLDOMNode_get_prefix_Proxy');},
    IXMLDOMNode_get_prefix_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_prefix_Stub');},
    IXMLDOMNode_get_baseName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'nameString']], [['stdcall']]))('IXMLDOMNode_get_baseName_Proxy');},
    IXMLDOMNode_get_baseName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_get_baseName_Stub');},
    IXMLDOMNode_transformNodeToObject_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']], [['stdcall']]))('IXMLDOMNode_transformNodeToObject_Proxy');},
    IXMLDOMNode_transformNodeToObject_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNode_transformNodeToObject_Stub');},
    IID_IXMLDOMDocument: function() {return (T.GUID)('IID_IXMLDOMDocument');},
    IXMLDOMDocument_get_doctype_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMDocumentType)), 'documentType']], [['stdcall']]))('IXMLDOMDocument_get_doctype_Proxy');},
    IXMLDOMDocument_get_doctype_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_get_doctype_Stub');},
    IXMLDOMDocument_get_implementation_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMImplementation)), 'impl']], [['stdcall']]))('IXMLDOMDocument_get_implementation_Proxy');},
    IXMLDOMDocument_get_implementation_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_get_implementation_Stub');},
    IXMLDOMDocument_get_documentElement_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMElement)), 'DOMElement']], [['stdcall']]))('IXMLDOMDocument_get_documentElement_Proxy');},
    IXMLDOMDocument_get_documentElement_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_get_documentElement_Stub');},
    IXMLDOMDocument_putref_documentElement_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IXMLDOMElement), 'DOMElement']], [['stdcall']]))('IXMLDOMDocument_putref_documentElement_Proxy');},
    IXMLDOMDocument_putref_documentElement_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_putref_documentElement_Stub');},
    IXMLDOMDocument_createElement_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'tagname'], [Pointer(Pointer(T.IXMLDOMElement)), 'element']], [['stdcall']]))('IXMLDOMDocument_createElement_Proxy');},
    IXMLDOMDocument_createElement_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_createElement_Stub');},
    IXMLDOMDocument_createDocumentFragment_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMDocumentFragment)), 'docFrag']], [['stdcall']]))('IXMLDOMDocument_createDocumentFragment_Proxy');},
    IXMLDOMDocument_createDocumentFragment_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_createDocumentFragment_Stub');},
    IXMLDOMDocument_createTextNode_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'data'], [Pointer(Pointer(T.IXMLDOMText)), 'text']], [['stdcall']]))('IXMLDOMDocument_createTextNode_Proxy');},
    IXMLDOMDocument_createTextNode_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_createTextNode_Stub');},
    IXMLDOMDocument_createComment_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'data'], [Pointer(Pointer(T.IXMLDOMComment)), 'comment']], [['stdcall']]))('IXMLDOMDocument_createComment_Proxy');},
    IXMLDOMDocument_createComment_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_createComment_Stub');},
    IXMLDOMDocument_createCDATASection_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'data'], [Pointer(Pointer(T.IXMLDOMCDATASection)), 'cdata']], [['stdcall']]))('IXMLDOMDocument_createCDATASection_Proxy');},
    IXMLDOMDocument_createCDATASection_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_createCDATASection_Stub');},
    IXMLDOMDocument_createProcessingInstruction_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'target'], [T.BSTR, 'data'], [Pointer(Pointer(T.IXMLDOMProcessingInstruction)), 'pi']], [['stdcall']]))('IXMLDOMDocument_createProcessingInstruction_Proxy');},
    IXMLDOMDocument_createProcessingInstruction_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_createProcessingInstruction_Stub');},
    IXMLDOMDocument_createAttribute_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMAttribute)), 'attribute']], [['stdcall']]))('IXMLDOMDocument_createAttribute_Proxy');},
    IXMLDOMDocument_createAttribute_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_createAttribute_Stub');},
    IXMLDOMDocument_createEntityReference_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMEntityReference)), 'entityRef']], [['stdcall']]))('IXMLDOMDocument_createEntityReference_Proxy');},
    IXMLDOMDocument_createEntityReference_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_createEntityReference_Stub');},
    IXMLDOMDocument_getElementsByTagName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'tagName'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']], [['stdcall']]))('IXMLDOMDocument_getElementsByTagName_Proxy');},
    IXMLDOMDocument_getElementsByTagName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_getElementsByTagName_Stub');},
    IXMLDOMDocument_createNode_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'Type'], [T.BSTR, 'name'], [T.BSTR, 'namespaceURI'], [Pointer(Pointer(T.IXMLDOMNode)), 'node']], [['stdcall']]))('IXMLDOMDocument_createNode_Proxy');},
    IXMLDOMDocument_createNode_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_createNode_Stub');},
    IXMLDOMDocument_nodeFromID_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'idString'], [Pointer(Pointer(T.IXMLDOMNode)), 'node']], [['stdcall']]))('IXMLDOMDocument_nodeFromID_Proxy');},
    IXMLDOMDocument_nodeFromID_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_nodeFromID_Stub');},
    IXMLDOMDocument_load_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'xmlSource'], [Pointer(T.VARIANT_BOOL), 'isSuccessful']], [['stdcall']]))('IXMLDOMDocument_load_Proxy');},
    IXMLDOMDocument_load_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_load_Stub');},
    IXMLDOMDocument_get_readyState_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.LONG), 'value']], [['stdcall']]))('IXMLDOMDocument_get_readyState_Proxy');},
    IXMLDOMDocument_get_readyState_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_get_readyState_Stub');},
    IXMLDOMDocument_get_parseError_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMParseError)), 'errorObj']], [['stdcall']]))('IXMLDOMDocument_get_parseError_Proxy');},
    IXMLDOMDocument_get_parseError_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_get_parseError_Stub');},
    IXMLDOMDocument_get_url_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'urlString']], [['stdcall']]))('IXMLDOMDocument_get_url_Proxy');},
    IXMLDOMDocument_get_url_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_get_url_Stub');},
    IXMLDOMDocument_get_async_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isAsync']], [['stdcall']]))('IXMLDOMDocument_get_async_Proxy');},
    IXMLDOMDocument_get_async_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_get_async_Stub');},
    IXMLDOMDocument_put_async_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'isAsync']], [['stdcall']]))('IXMLDOMDocument_put_async_Proxy');},
    IXMLDOMDocument_put_async_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_put_async_Stub');},
    IXMLDOMDocument_abort_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This']], [['stdcall']]))('IXMLDOMDocument_abort_Proxy');},
    IXMLDOMDocument_abort_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_abort_Stub');},
    IXMLDOMDocument_loadXML_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'bstrXML'], [Pointer(T.VARIANT_BOOL), 'isSuccessful']], [['stdcall']]))('IXMLDOMDocument_loadXML_Proxy');},
    IXMLDOMDocument_loadXML_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_loadXML_Stub');},
    IXMLDOMDocument_save_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'destination']], [['stdcall']]))('IXMLDOMDocument_save_Proxy');},
    IXMLDOMDocument_save_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_save_Stub');},
    IXMLDOMDocument_get_validateOnParse_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isValidating']], [['stdcall']]))('IXMLDOMDocument_get_validateOnParse_Proxy');},
    IXMLDOMDocument_get_validateOnParse_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_get_validateOnParse_Stub');},
    IXMLDOMDocument_put_validateOnParse_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'isValidating']], [['stdcall']]))('IXMLDOMDocument_put_validateOnParse_Proxy');},
    IXMLDOMDocument_put_validateOnParse_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_put_validateOnParse_Stub');},
    IXMLDOMDocument_get_resolveExternals_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isResolving']], [['stdcall']]))('IXMLDOMDocument_get_resolveExternals_Proxy');},
    IXMLDOMDocument_get_resolveExternals_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_get_resolveExternals_Stub');},
    IXMLDOMDocument_put_resolveExternals_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'isValidating']], [['stdcall']]))('IXMLDOMDocument_put_resolveExternals_Proxy');},
    IXMLDOMDocument_put_resolveExternals_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_put_resolveExternals_Stub');},
    IXMLDOMDocument_get_preserveWhiteSpace_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isPreserving']], [['stdcall']]))('IXMLDOMDocument_get_preserveWhiteSpace_Proxy');},
    IXMLDOMDocument_get_preserveWhiteSpace_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_get_preserveWhiteSpace_Stub');},
    IXMLDOMDocument_put_preserveWhiteSpace_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'isPreserving']], [['stdcall']]))('IXMLDOMDocument_put_preserveWhiteSpace_Proxy');},
    IXMLDOMDocument_put_preserveWhiteSpace_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_put_preserveWhiteSpace_Stub');},
    IXMLDOMDocument_put_onreadystatechange_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'readystatechangeSink']], [['stdcall']]))('IXMLDOMDocument_put_onreadystatechange_Proxy');},
    IXMLDOMDocument_put_onreadystatechange_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_put_onreadystatechange_Stub');},
    IXMLDOMDocument_put_ondataavailable_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'ondataavailableSink']], [['stdcall']]))('IXMLDOMDocument_put_ondataavailable_Proxy');},
    IXMLDOMDocument_put_ondataavailable_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_put_ondataavailable_Stub');},
    IXMLDOMDocument_put_ontransformnode_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'ontransformnodeSink']], [['stdcall']]))('IXMLDOMDocument_put_ontransformnode_Proxy');},
    IXMLDOMDocument_put_ontransformnode_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocument_put_ontransformnode_Stub');},
    IID_IXMLDOMNodeList: function() {return (T.GUID)('IID_IXMLDOMNodeList');},
    IXMLDOMNodeList_get_item_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [T.LONG, 'index'], [Pointer(Pointer(T.IXMLDOMNode)), 'listItem']], [['stdcall']]))('IXMLDOMNodeList_get_item_Proxy');},
    IXMLDOMNodeList_get_item_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNodeList_get_item_Stub');},
    IXMLDOMNodeList_get_length_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(T.LONG), 'listLength']], [['stdcall']]))('IXMLDOMNodeList_get_length_Proxy');},
    IXMLDOMNodeList_get_length_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNodeList_get_length_Stub');},
    IXMLDOMNodeList_nextNode_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextItem']], [['stdcall']]))('IXMLDOMNodeList_nextNode_Proxy');},
    IXMLDOMNodeList_nextNode_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNodeList_nextNode_Stub');},
    IXMLDOMNodeList_reset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This']], [['stdcall']]))('IXMLDOMNodeList_reset_Proxy');},
    IXMLDOMNodeList_reset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNodeList_reset_Stub');},
    IXMLDOMNodeList__newEnum_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(Pointer(T.IUnknown)), 'ppUnk']], [['stdcall']]))('IXMLDOMNodeList__newEnum_Proxy');},
    IXMLDOMNodeList__newEnum_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNodeList__newEnum_Stub');},
    IID_IXMLDOMNamedNodeMap: function() {return (T.GUID)('IID_IXMLDOMNamedNodeMap');},
    IXMLDOMNamedNodeMap_getNamedItem_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMNode)), 'namedItem']], [['stdcall']]))('IXMLDOMNamedNodeMap_getNamedItem_Proxy');},
    IXMLDOMNamedNodeMap_getNamedItem_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNamedNodeMap_getNamedItem_Stub');},
    IXMLDOMNamedNodeMap_setNamedItem_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(T.IXMLDOMNode), 'newItem'], [Pointer(Pointer(T.IXMLDOMNode)), 'namedItem']], [['stdcall']]))('IXMLDOMNamedNodeMap_setNamedItem_Proxy');},
    IXMLDOMNamedNodeMap_setNamedItem_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNamedNodeMap_setNamedItem_Stub');},
    IXMLDOMNamedNodeMap_removeNamedItem_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMNode)), 'namedItem']], [['stdcall']]))('IXMLDOMNamedNodeMap_removeNamedItem_Proxy');},
    IXMLDOMNamedNodeMap_removeNamedItem_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNamedNodeMap_removeNamedItem_Stub');},
    IXMLDOMNamedNodeMap_get_item_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.LONG, 'index'], [Pointer(Pointer(T.IXMLDOMNode)), 'listItem']], [['stdcall']]))('IXMLDOMNamedNodeMap_get_item_Proxy');},
    IXMLDOMNamedNodeMap_get_item_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNamedNodeMap_get_item_Stub');},
    IXMLDOMNamedNodeMap_get_length_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(T.LONG), 'listLength']], [['stdcall']]))('IXMLDOMNamedNodeMap_get_length_Proxy');},
    IXMLDOMNamedNodeMap_get_length_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNamedNodeMap_get_length_Stub');},
    IXMLDOMNamedNodeMap_getQualifiedItem_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.BSTR, 'baseName'], [T.BSTR, 'namespaceURI'], [Pointer(Pointer(T.IXMLDOMNode)), 'qualifiedItem']], [['stdcall']]))('IXMLDOMNamedNodeMap_getQualifiedItem_Proxy');},
    IXMLDOMNamedNodeMap_getQualifiedItem_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNamedNodeMap_getQualifiedItem_Stub');},
    IXMLDOMNamedNodeMap_removeQualifiedItem_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.BSTR, 'baseName'], [T.BSTR, 'namespaceURI'], [Pointer(Pointer(T.IXMLDOMNode)), 'qualifiedItem']], [['stdcall']]))('IXMLDOMNamedNodeMap_removeQualifiedItem_Proxy');},
    IXMLDOMNamedNodeMap_removeQualifiedItem_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNamedNodeMap_removeQualifiedItem_Stub');},
    IXMLDOMNamedNodeMap_nextNode_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextItem']], [['stdcall']]))('IXMLDOMNamedNodeMap_nextNode_Proxy');},
    IXMLDOMNamedNodeMap_nextNode_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNamedNodeMap_nextNode_Stub');},
    IXMLDOMNamedNodeMap_reset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This']], [['stdcall']]))('IXMLDOMNamedNodeMap_reset_Proxy');},
    IXMLDOMNamedNodeMap_reset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNamedNodeMap_reset_Stub');},
    IXMLDOMNamedNodeMap__newEnum_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(Pointer(T.IUnknown)), 'ppUnk']], [['stdcall']]))('IXMLDOMNamedNodeMap__newEnum_Proxy');},
    IXMLDOMNamedNodeMap__newEnum_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNamedNodeMap__newEnum_Stub');},
    IID_IXMLDOMDocumentFragment: function() {return (T.GUID)('IID_IXMLDOMDocumentFragment');},
    IID_IXMLDOMCharacterData: function() {return (T.GUID)('IID_IXMLDOMCharacterData');},
    IXMLDOMCharacterData_get_data_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'data']], [['stdcall']]))('IXMLDOMCharacterData_get_data_Proxy');},
    IXMLDOMCharacterData_get_data_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMCharacterData_get_data_Stub');},
    IXMLDOMCharacterData_put_data_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.BSTR, 'data']], [['stdcall']]))('IXMLDOMCharacterData_put_data_Proxy');},
    IXMLDOMCharacterData_put_data_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMCharacterData_put_data_Stub');},
    IXMLDOMCharacterData_get_length_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.LONG), 'dataLength']], [['stdcall']]))('IXMLDOMCharacterData_get_length_Proxy');},
    IXMLDOMCharacterData_get_length_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMCharacterData_get_length_Stub');},
    IXMLDOMCharacterData_substringData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [Pointer(T.BSTR), 'data']], [['stdcall']]))('IXMLDOMCharacterData_substringData_Proxy');},
    IXMLDOMCharacterData_substringData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMCharacterData_substringData_Stub');},
    IXMLDOMCharacterData_appendData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.BSTR, 'data']], [['stdcall']]))('IXMLDOMCharacterData_appendData_Proxy');},
    IXMLDOMCharacterData_appendData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMCharacterData_appendData_Stub');},
    IXMLDOMCharacterData_insertData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.LONG, 'offset'], [T.BSTR, 'data']], [['stdcall']]))('IXMLDOMCharacterData_insertData_Proxy');},
    IXMLDOMCharacterData_insertData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMCharacterData_insertData_Stub');},
    IXMLDOMCharacterData_deleteData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.LONG, 'offset'], [T.LONG, 'count']], [['stdcall']]))('IXMLDOMCharacterData_deleteData_Proxy');},
    IXMLDOMCharacterData_deleteData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMCharacterData_deleteData_Stub');},
    IXMLDOMCharacterData_replaceData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [T.BSTR, 'data']], [['stdcall']]))('IXMLDOMCharacterData_replaceData_Proxy');},
    IXMLDOMCharacterData_replaceData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMCharacterData_replaceData_Stub');},
    IID_IXMLDOMAttribute: function() {return (T.GUID)('IID_IXMLDOMAttribute');},
    IXMLDOMAttribute_get_name_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'attributeName']], [['stdcall']]))('IXMLDOMAttribute_get_name_Proxy');},
    IXMLDOMAttribute_get_name_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMAttribute_get_name_Stub');},
    IXMLDOMAttribute_get_value_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.VARIANT), 'attributeValue']], [['stdcall']]))('IXMLDOMAttribute_get_value_Proxy');},
    IXMLDOMAttribute_get_value_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMAttribute_get_value_Stub');},
    IXMLDOMAttribute_put_value_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.VARIANT, 'attributeValue']], [['stdcall']]))('IXMLDOMAttribute_put_value_Proxy');},
    IXMLDOMAttribute_put_value_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMAttribute_put_value_Stub');},
    IID_IXMLDOMElement: function() {return (T.GUID)('IID_IXMLDOMElement');},
    IXMLDOMElement_get_tagName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'tagName']], [['stdcall']]))('IXMLDOMElement_get_tagName_Proxy');},
    IXMLDOMElement_get_tagName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMElement_get_tagName_Stub');},
    IXMLDOMElement_getAttribute_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'name'], [Pointer(T.VARIANT), 'value']], [['stdcall']]))('IXMLDOMElement_getAttribute_Proxy');},
    IXMLDOMElement_getAttribute_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMElement_getAttribute_Stub');},
    IXMLDOMElement_setAttribute_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'name'], [T.VARIANT, 'value']], [['stdcall']]))('IXMLDOMElement_setAttribute_Proxy');},
    IXMLDOMElement_setAttribute_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMElement_setAttribute_Stub');},
    IXMLDOMElement_removeAttribute_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'name']], [['stdcall']]))('IXMLDOMElement_removeAttribute_Proxy');},
    IXMLDOMElement_removeAttribute_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMElement_removeAttribute_Stub');},
    IXMLDOMElement_getAttributeNode_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMAttribute)), 'attributeNode']], [['stdcall']]))('IXMLDOMElement_getAttributeNode_Proxy');},
    IXMLDOMElement_getAttributeNode_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMElement_getAttributeNode_Stub');},
    IXMLDOMElement_setAttributeNode_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMAttribute), 'DOMAttribute'], [Pointer(Pointer(T.IXMLDOMAttribute)), 'attributeNode']], [['stdcall']]))('IXMLDOMElement_setAttributeNode_Proxy');},
    IXMLDOMElement_setAttributeNode_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMElement_setAttributeNode_Stub');},
    IXMLDOMElement_removeAttributeNode_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMAttribute), 'DOMAttribute'], [Pointer(Pointer(T.IXMLDOMAttribute)), 'attributeNode']], [['stdcall']]))('IXMLDOMElement_removeAttributeNode_Proxy');},
    IXMLDOMElement_removeAttributeNode_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMElement_removeAttributeNode_Stub');},
    IXMLDOMElement_getElementsByTagName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'tagName'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']], [['stdcall']]))('IXMLDOMElement_getElementsByTagName_Proxy');},
    IXMLDOMElement_getElementsByTagName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMElement_getElementsByTagName_Stub');},
    IXMLDOMElement_normalize_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This']], [['stdcall']]))('IXMLDOMElement_normalize_Proxy');},
    IXMLDOMElement_normalize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMElement_normalize_Stub');},
    IID_IXMLDOMText: function() {return (T.GUID)('IID_IXMLDOMText');},
    IXMLDOMText_splitText_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.LONG, 'offset'], [Pointer(Pointer(T.IXMLDOMText)), 'rightHandTextNode']], [['stdcall']]))('IXMLDOMText_splitText_Proxy');},
    IXMLDOMText_splitText_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMText_splitText_Stub');},
    IID_IXMLDOMComment: function() {return (T.GUID)('IID_IXMLDOMComment');},
    IID_IXMLDOMProcessingInstruction: function() {return (T.GUID)('IID_IXMLDOMProcessingInstruction');},
    IXMLDOMProcessingInstruction_get_target_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'name']], [['stdcall']]))('IXMLDOMProcessingInstruction_get_target_Proxy');},
    IXMLDOMProcessingInstruction_get_target_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMProcessingInstruction_get_target_Stub');},
    IXMLDOMProcessingInstruction_get_data_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'value']], [['stdcall']]))('IXMLDOMProcessingInstruction_get_data_Proxy');},
    IXMLDOMProcessingInstruction_get_data_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMProcessingInstruction_get_data_Stub');},
    IXMLDOMProcessingInstruction_put_data_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.BSTR, 'value']], [['stdcall']]))('IXMLDOMProcessingInstruction_put_data_Proxy');},
    IXMLDOMProcessingInstruction_put_data_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMProcessingInstruction_put_data_Stub');},
    IID_IXMLDOMCDATASection: function() {return (T.GUID)('IID_IXMLDOMCDATASection');},
    IID_IXMLDOMDocumentType: function() {return (T.GUID)('IID_IXMLDOMDocumentType');},
    IXMLDOMDocumentType_get_name_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'rootName']], [['stdcall']]))('IXMLDOMDocumentType_get_name_Proxy');},
    IXMLDOMDocumentType_get_name_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocumentType_get_name_Stub');},
    IXMLDOMDocumentType_get_entities_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'entityMap']], [['stdcall']]))('IXMLDOMDocumentType_get_entities_Proxy');},
    IXMLDOMDocumentType_get_entities_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocumentType_get_entities_Stub');},
    IXMLDOMDocumentType_get_notations_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'notationMap']], [['stdcall']]))('IXMLDOMDocumentType_get_notations_Proxy');},
    IXMLDOMDocumentType_get_notations_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMDocumentType_get_notations_Stub');},
    IID_IXMLDOMNotation: function() {return (T.GUID)('IID_IXMLDOMNotation');},
    IXMLDOMNotation_get_publicId_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT), 'publicId']], [['stdcall']]))('IXMLDOMNotation_get_publicId_Proxy');},
    IXMLDOMNotation_get_publicId_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNotation_get_publicId_Stub');},
    IXMLDOMNotation_get_systemId_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT), 'systemId']], [['stdcall']]))('IXMLDOMNotation_get_systemId_Proxy');},
    IXMLDOMNotation_get_systemId_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMNotation_get_systemId_Stub');},
    IID_IXMLDOMEntity: function() {return (T.GUID)('IID_IXMLDOMEntity');},
    IXMLDOMEntity_get_publicId_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT), 'publicId']], [['stdcall']]))('IXMLDOMEntity_get_publicId_Proxy');},
    IXMLDOMEntity_get_publicId_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMEntity_get_publicId_Stub');},
    IXMLDOMEntity_get_systemId_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT), 'systemId']], [['stdcall']]))('IXMLDOMEntity_get_systemId_Proxy');},
    IXMLDOMEntity_get_systemId_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMEntity_get_systemId_Stub');},
    IXMLDOMEntity_get_notationName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'name']], [['stdcall']]))('IXMLDOMEntity_get_notationName_Proxy');},
    IXMLDOMEntity_get_notationName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMEntity_get_notationName_Stub');},
    IID_IXMLDOMEntityReference: function() {return (T.GUID)('IID_IXMLDOMEntityReference');},
    IID_IXMLDOMImplementation: function() {return (T.GUID)('IID_IXMLDOMImplementation');},
    IXMLDOMImplementation_hasFeature_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMImplementation), 'This'], [T.BSTR, 'feature'], [T.BSTR, 'version'], [Pointer(T.VARIANT_BOOL), 'pbool']], [['stdcall']]))('IXMLDOMImplementation_hasFeature_Proxy');},
    IXMLDOMImplementation_hasFeature_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMImplementation_hasFeature_Stub');},
    IID_IXMLDOMParseError: function() {return (T.GUID)('IID_IXMLDOMParseError');},
    IXMLDOMParseError_get_errorCode_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.LONG), 'errCode']], [['stdcall']]))('IXMLDOMParseError_get_errorCode_Proxy');},
    IXMLDOMParseError_get_errorCode_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMParseError_get_errorCode_Stub');},
    IXMLDOMParseError_get_url_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDOMParseError_get_url_Proxy');},
    IXMLDOMParseError_get_url_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMParseError_get_url_Stub');},
    IXMLDOMParseError_get_reason_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDOMParseError_get_reason_Proxy');},
    IXMLDOMParseError_get_reason_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMParseError_get_reason_Stub');},
    IXMLDOMParseError_get_srcText_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDOMParseError_get_srcText_Proxy');},
    IXMLDOMParseError_get_srcText_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMParseError_get_srcText_Stub');},
    IXMLDOMParseError_get_line_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.LONG), 'lineNo']], [['stdcall']]))('IXMLDOMParseError_get_line_Proxy');},
    IXMLDOMParseError_get_line_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMParseError_get_line_Stub');},
    IXMLDOMParseError_get_linepos_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.LONG), 'linePos']], [['stdcall']]))('IXMLDOMParseError_get_linepos_Proxy');},
    IXMLDOMParseError_get_linepos_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMParseError_get_linepos_Stub');},
    IXMLDOMParseError_get_filepos_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.LONG), 'filePos']], [['stdcall']]))('IXMLDOMParseError_get_filepos_Proxy');},
    IXMLDOMParseError_get_filepos_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDOMParseError_get_filepos_Stub');},
    DIID_XMLDOMDocumentEvents: function() {return (T.GUID)('DIID_XMLDOMDocumentEvents');},
    CLSID_DOMDocument: function() {return (T.GUID)('CLSID_DOMDocument');},
    CLSID_DOMFreeThreadedDocument: function() {return (T.GUID)('CLSID_DOMFreeThreadedDocument');},
    IID_IXMLHttpRequest: function() {return (T.GUID)('IID_IXMLHttpRequest');},
    IXMLHttpRequest_open_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.BSTR, 'bstrMethod'], [T.BSTR, 'bstrUrl'], [T.VARIANT, 'varAsync'], [T.VARIANT, 'varUser'], [T.VARIANT, 'varPassword']], [['stdcall']]))('IXMLHttpRequest_open_Proxy');},
    IXMLHttpRequest_open_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLHttpRequest_open_Stub');},
    IXMLHttpRequest_setRequestHeader_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.BSTR, 'bstrHeader'], [T.BSTR, 'bstrValue']], [['stdcall']]))('IXMLHttpRequest_setRequestHeader_Proxy');},
    IXMLHttpRequest_setRequestHeader_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLHttpRequest_setRequestHeader_Stub');},
    IXMLHttpRequest_getResponseHeader_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.BSTR, 'bstrHeader'], [Pointer(T.BSTR), 'pbstrValue']], [['stdcall']]))('IXMLHttpRequest_getResponseHeader_Proxy');},
    IXMLHttpRequest_getResponseHeader_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLHttpRequest_getResponseHeader_Stub');},
    IXMLHttpRequest_getAllResponseHeaders_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.BSTR), 'pbstrHeaders']], [['stdcall']]))('IXMLHttpRequest_getAllResponseHeaders_Proxy');},
    IXMLHttpRequest_getAllResponseHeaders_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLHttpRequest_getAllResponseHeaders_Stub');},
    IXMLHttpRequest_send_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.VARIANT, 'varBody']], [['stdcall']]))('IXMLHttpRequest_send_Proxy');},
    IXMLHttpRequest_send_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLHttpRequest_send_Stub');},
    IXMLHttpRequest_abort_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This']], [['stdcall']]))('IXMLHttpRequest_abort_Proxy');},
    IXMLHttpRequest_abort_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLHttpRequest_abort_Stub');},
    IXMLHttpRequest_get_status_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.LONG), 'plStatus']], [['stdcall']]))('IXMLHttpRequest_get_status_Proxy');},
    IXMLHttpRequest_get_status_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLHttpRequest_get_status_Stub');},
    IXMLHttpRequest_get_statusText_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.BSTR), 'bstrStatus']], [['stdcall']]))('IXMLHttpRequest_get_statusText_Proxy');},
    IXMLHttpRequest_get_statusText_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLHttpRequest_get_statusText_Stub');},
    IXMLHttpRequest_get_responseXML_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(Pointer(T.IDispatch)), 'ppBody']], [['stdcall']]))('IXMLHttpRequest_get_responseXML_Proxy');},
    IXMLHttpRequest_get_responseXML_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLHttpRequest_get_responseXML_Stub');},
    IXMLHttpRequest_get_responseText_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.BSTR), 'pbstrBody']], [['stdcall']]))('IXMLHttpRequest_get_responseText_Proxy');},
    IXMLHttpRequest_get_responseText_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLHttpRequest_get_responseText_Stub');},
    IXMLHttpRequest_get_responseBody_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.VARIANT), 'pvarBody']], [['stdcall']]))('IXMLHttpRequest_get_responseBody_Proxy');},
    IXMLHttpRequest_get_responseBody_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLHttpRequest_get_responseBody_Stub');},
    IXMLHttpRequest_get_responseStream_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.VARIANT), 'pvarBody']], [['stdcall']]))('IXMLHttpRequest_get_responseStream_Proxy');},
    IXMLHttpRequest_get_responseStream_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLHttpRequest_get_responseStream_Stub');},
    IXMLHttpRequest_get_readyState_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.LONG), 'plState']], [['stdcall']]))('IXMLHttpRequest_get_readyState_Proxy');},
    IXMLHttpRequest_get_readyState_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLHttpRequest_get_readyState_Stub');},
    IXMLHttpRequest_put_onreadystatechange_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.IDispatch), 'pReadyStateSink']], [['stdcall']]))('IXMLHttpRequest_put_onreadystatechange_Proxy');},
    IXMLHttpRequest_put_onreadystatechange_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLHttpRequest_put_onreadystatechange_Stub');},
    CLSID_XMLHTTPRequest: function() {return (T.GUID)('CLSID_XMLHTTPRequest');},
    IID_IXMLDSOControl: function() {return (T.GUID)('IID_IXMLDSOControl');},
    IXMLDSOControl_get_XMLDocument_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'ppDoc']], [['stdcall']]))('IXMLDSOControl_get_XMLDocument_Proxy');},
    IXMLDSOControl_get_XMLDocument_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDSOControl_get_XMLDocument_Stub');},
    IXMLDSOControl_put_XMLDocument_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.IXMLDOMDocument), 'ppDoc']], [['stdcall']]))('IXMLDSOControl_put_XMLDocument_Proxy');},
    IXMLDSOControl_put_XMLDocument_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDSOControl_put_XMLDocument_Stub');},
    IXMLDSOControl_get_JavaDSOCompatible_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.BOOL), 'fJavaDSOCompatible']], [['stdcall']]))('IXMLDSOControl_get_JavaDSOCompatible_Proxy');},
    IXMLDSOControl_get_JavaDSOCompatible_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDSOControl_get_JavaDSOCompatible_Stub');},
    IXMLDSOControl_put_JavaDSOCompatible_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [T.BOOL, 'fJavaDSOCompatible']], [['stdcall']]))('IXMLDSOControl_put_JavaDSOCompatible_Proxy');},
    IXMLDSOControl_put_JavaDSOCompatible_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDSOControl_put_JavaDSOCompatible_Stub');},
    IXMLDSOControl_get_readyState_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.LONG), 'state']], [['stdcall']]))('IXMLDSOControl_get_readyState_Proxy');},
    IXMLDSOControl_get_readyState_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDSOControl_get_readyState_Stub');},
    CLSID_XMLDSOControl: function() {return (T.GUID)('CLSID_XMLDSOControl');},
    IID_IXMLElementCollection: function() {return (T.GUID)('IID_IXMLElementCollection');},
    IXMLElementCollection_put_length_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [T.LONG, 'v']], [['stdcall']]))('IXMLElementCollection_put_length_Proxy');},
    IXMLElementCollection_put_length_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElementCollection_put_length_Stub');},
    IXMLElementCollection_get_length_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [Pointer(T.LONG), 'p']], [['stdcall']]))('IXMLElementCollection_get_length_Proxy');},
    IXMLElementCollection_get_length_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElementCollection_get_length_Stub');},
    IXMLElementCollection_get__newEnum_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [Pointer(Pointer(T.IUnknown)), 'ppUnk']], [['stdcall']]))('IXMLElementCollection_get__newEnum_Proxy');},
    IXMLElementCollection_get__newEnum_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElementCollection_get__newEnum_Stub');},
    IXMLElementCollection_item_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [T.VARIANT, 'var1'], [T.VARIANT, 'var2'], [Pointer(Pointer(T.IDispatch)), 'ppDisp']], [['stdcall']]))('IXMLElementCollection_item_Proxy');},
    IXMLElementCollection_item_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElementCollection_item_Stub');},
    IID_IXMLElement: function() {return (T.GUID)('IID_IXMLElement');},
    IXMLElement_get_tagName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLElement_get_tagName_Proxy');},
    IXMLElement_get_tagName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement_get_tagName_Stub');},
    IXMLElement_put_tagName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'p']], [['stdcall']]))('IXMLElement_put_tagName_Proxy');},
    IXMLElement_put_tagName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement_put_tagName_Stub');},
    IXMLElement_get_parent_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(Pointer(T.IXMLElement)), 'parent']], [['stdcall']]))('IXMLElement_get_parent_Proxy');},
    IXMLElement_get_parent_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement_get_parent_Stub');},
    IXMLElement_setAttribute_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'strPropertyName'], [T.VARIANT, 'PropertyValue']], [['stdcall']]))('IXMLElement_setAttribute_Proxy');},
    IXMLElement_setAttribute_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement_setAttribute_Stub');},
    IXMLElement_getAttribute_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'strPropertyName'], [Pointer(T.VARIANT), 'PropertyValue']], [['stdcall']]))('IXMLElement_getAttribute_Proxy');},
    IXMLElement_getAttribute_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement_getAttribute_Stub');},
    IXMLElement_removeAttribute_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'strPropertyName']], [['stdcall']]))('IXMLElement_removeAttribute_Proxy');},
    IXMLElement_removeAttribute_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement_removeAttribute_Stub');},
    IXMLElement_get_children_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(Pointer(T.IXMLElementCollection)), 'p']], [['stdcall']]))('IXMLElement_get_children_Proxy');},
    IXMLElement_get_children_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement_get_children_Stub');},
    IXMLElement_get_type_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.LONG), 'p']], [['stdcall']]))('IXMLElement_get_type_Proxy');},
    IXMLElement_get_type_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement_get_type_Stub');},
    IXMLElement_get_text_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLElement_get_text_Proxy');},
    IXMLElement_get_text_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement_get_text_Stub');},
    IXMLElement_put_text_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'p']], [['stdcall']]))('IXMLElement_put_text_Proxy');},
    IXMLElement_put_text_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement_put_text_Stub');},
    IXMLElement_addChild_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.IXMLElement), 'pChildElem'], [T.LONG, 'lIndex'], [T.LONG, 'lreserved']], [['stdcall']]))('IXMLElement_addChild_Proxy');},
    IXMLElement_addChild_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement_addChild_Stub');},
    IXMLElement_removeChild_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.IXMLElement), 'pChildElem']], [['stdcall']]))('IXMLElement_removeChild_Proxy');},
    IXMLElement_removeChild_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement_removeChild_Stub');},
    IID_IXMLDocument: function() {return (T.GUID)('IID_IXMLDocument');},
    IXMLDocument_get_root_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(Pointer(T.IXMLElement)), 'p']], [['stdcall']]))('IXMLDocument_get_root_Proxy');},
    IXMLDocument_get_root_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument_get_root_Stub');},
    IXMLDocument_get_fileSize_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument_get_fileSize_Proxy');},
    IXMLDocument_get_fileSize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument_get_fileSize_Stub');},
    IXMLDocument_get_fileModifiedDate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument_get_fileModifiedDate_Proxy');},
    IXMLDocument_get_fileModifiedDate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument_get_fileModifiedDate_Stub');},
    IXMLDocument_get_fileUpdatedDate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument_get_fileUpdatedDate_Proxy');},
    IXMLDocument_get_fileUpdatedDate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument_get_fileUpdatedDate_Stub');},
    IXMLDocument_get_URL_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument_get_URL_Proxy');},
    IXMLDocument_get_URL_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument_get_URL_Stub');},
    IXMLDocument_put_URL_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [T.BSTR, 'p']], [['stdcall']]))('IXMLDocument_put_URL_Proxy');},
    IXMLDocument_put_URL_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument_put_URL_Stub');},
    IXMLDocument_get_mimeType_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument_get_mimeType_Proxy');},
    IXMLDocument_get_mimeType_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument_get_mimeType_Stub');},
    IXMLDocument_get_readyState_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.LONG), 'p']], [['stdcall']]))('IXMLDocument_get_readyState_Proxy');},
    IXMLDocument_get_readyState_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument_get_readyState_Stub');},
    IXMLDocument_get_charset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument_get_charset_Proxy');},
    IXMLDocument_get_charset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument_get_charset_Stub');},
    IXMLDocument_put_charset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [T.BSTR, 'p']], [['stdcall']]))('IXMLDocument_put_charset_Proxy');},
    IXMLDocument_put_charset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument_put_charset_Stub');},
    IXMLDocument_get_version_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument_get_version_Proxy');},
    IXMLDocument_get_version_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument_get_version_Stub');},
    IXMLDocument_get_doctype_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument_get_doctype_Proxy');},
    IXMLDocument_get_doctype_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument_get_doctype_Stub');},
    IXMLDocument_get_dtdURl_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument_get_dtdURl_Proxy');},
    IXMLDocument_get_dtdURl_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument_get_dtdURl_Stub');},
    IXMLDocument_createElement_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [T.VARIANT, 'vType'], [T.VARIANT, 'var1'], [Pointer(Pointer(T.IXMLElement)), 'ppElem']], [['stdcall']]))('IXMLDocument_createElement_Proxy');},
    IXMLDocument_createElement_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument_createElement_Stub');},
    IID_IXMLElement2: function() {return (T.GUID)('IID_IXMLElement2');},
    IXMLElement2_get_tagName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLElement2_get_tagName_Proxy');},
    IXMLElement2_get_tagName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement2_get_tagName_Stub');},
    IXMLElement2_put_tagName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'p']], [['stdcall']]))('IXMLElement2_put_tagName_Proxy');},
    IXMLElement2_put_tagName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement2_put_tagName_Stub');},
    IXMLElement2_get_parent_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(Pointer(T.IXMLElement2)), 'ppParent']], [['stdcall']]))('IXMLElement2_get_parent_Proxy');},
    IXMLElement2_get_parent_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement2_get_parent_Stub');},
    IXMLElement2_setAttribute_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'strPropertyName'], [T.VARIANT, 'PropertyValue']], [['stdcall']]))('IXMLElement2_setAttribute_Proxy');},
    IXMLElement2_setAttribute_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement2_setAttribute_Stub');},
    IXMLElement2_getAttribute_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'strPropertyName'], [Pointer(T.VARIANT), 'PropertyValue']], [['stdcall']]))('IXMLElement2_getAttribute_Proxy');},
    IXMLElement2_getAttribute_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement2_getAttribute_Stub');},
    IXMLElement2_removeAttribute_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'strPropertyName']], [['stdcall']]))('IXMLElement2_removeAttribute_Proxy');},
    IXMLElement2_removeAttribute_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement2_removeAttribute_Stub');},
    IXMLElement2_get_children_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(Pointer(T.IXMLElementCollection)), 'pp']], [['stdcall']]))('IXMLElement2_get_children_Proxy');},
    IXMLElement2_get_children_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement2_get_children_Stub');},
    IXMLElement2_get_type_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.LONG), 'plType']], [['stdcall']]))('IXMLElement2_get_type_Proxy');},
    IXMLElement2_get_type_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement2_get_type_Stub');},
    IXMLElement2_get_text_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLElement2_get_text_Proxy');},
    IXMLElement2_get_text_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement2_get_text_Stub');},
    IXMLElement2_put_text_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'p']], [['stdcall']]))('IXMLElement2_put_text_Proxy');},
    IXMLElement2_put_text_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement2_put_text_Stub');},
    IXMLElement2_addChild_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.IXMLElement2), 'pChildElem'], [T.LONG, 'lIndex'], [T.LONG, 'lReserved']], [['stdcall']]))('IXMLElement2_addChild_Proxy');},
    IXMLElement2_addChild_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement2_addChild_Stub');},
    IXMLElement2_removeChild_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.IXMLElement2), 'pChildElem']], [['stdcall']]))('IXMLElement2_removeChild_Proxy');},
    IXMLElement2_removeChild_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement2_removeChild_Stub');},
    IXMLElement2_get_attributes_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(Pointer(T.IXMLElementCollection)), 'pp']], [['stdcall']]))('IXMLElement2_get_attributes_Proxy');},
    IXMLElement2_get_attributes_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElement2_get_attributes_Stub');},
    IID_IXMLDocument2: function() {return (T.GUID)('IID_IXMLDocument2');},
    IXMLDocument2_get_root_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(Pointer(T.IXMLElement2)), 'p']], [['stdcall']]))('IXMLDocument2_get_root_Proxy');},
    IXMLDocument2_get_root_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument2_get_root_Stub');},
    IXMLDocument2_get_fileSize_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument2_get_fileSize_Proxy');},
    IXMLDocument2_get_fileSize_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument2_get_fileSize_Stub');},
    IXMLDocument2_get_fileModifiedDate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument2_get_fileModifiedDate_Proxy');},
    IXMLDocument2_get_fileModifiedDate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument2_get_fileModifiedDate_Stub');},
    IXMLDocument2_get_fileUpdatedDate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument2_get_fileUpdatedDate_Proxy');},
    IXMLDocument2_get_fileUpdatedDate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument2_get_fileUpdatedDate_Stub');},
    IXMLDocument2_get_URL_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument2_get_URL_Proxy');},
    IXMLDocument2_get_URL_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument2_get_URL_Stub');},
    IXMLDocument2_put_URL_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.BSTR, 'p']], [['stdcall']]))('IXMLDocument2_put_URL_Proxy');},
    IXMLDocument2_put_URL_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument2_put_URL_Stub');},
    IXMLDocument2_get_mimeType_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument2_get_mimeType_Proxy');},
    IXMLDocument2_get_mimeType_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument2_get_mimeType_Stub');},
    IXMLDocument2_get_readyState_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.LONG), 'pl']], [['stdcall']]))('IXMLDocument2_get_readyState_Proxy');},
    IXMLDocument2_get_readyState_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument2_get_readyState_Stub');},
    IXMLDocument2_get_charset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument2_get_charset_Proxy');},
    IXMLDocument2_get_charset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument2_get_charset_Stub');},
    IXMLDocument2_put_charset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.BSTR, 'p']], [['stdcall']]))('IXMLDocument2_put_charset_Proxy');},
    IXMLDocument2_put_charset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument2_put_charset_Stub');},
    IXMLDocument2_get_version_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument2_get_version_Proxy');},
    IXMLDocument2_get_version_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument2_get_version_Stub');},
    IXMLDocument2_get_doctype_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument2_get_doctype_Proxy');},
    IXMLDocument2_get_doctype_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument2_get_doctype_Stub');},
    IXMLDocument2_get_dtdURL_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLDocument2_get_dtdURL_Proxy');},
    IXMLDocument2_get_dtdURL_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument2_get_dtdURL_Stub');},
    IXMLDocument2_createElement_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.VARIANT, 'vType'], [T.VARIANT, 'var'], [Pointer(Pointer(T.IXMLElement2)), 'ppElem']], [['stdcall']]))('IXMLDocument2_createElement_Proxy');},
    IXMLDocument2_createElement_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument2_createElement_Stub');},
    IXMLDocument2_get_async_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.VARIANT_BOOL), 'pf']], [['stdcall']]))('IXMLDocument2_get_async_Proxy');},
    IXMLDocument2_get_async_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument2_get_async_Stub');},
    IXMLDocument2_put_async_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.VARIANT_BOOL, 'f']], [['stdcall']]))('IXMLDocument2_put_async_Proxy');},
    IXMLDocument2_put_async_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLDocument2_put_async_Stub');},
    IID_IXMLAttribute: function() {return (T.GUID)('IID_IXMLAttribute');},
    IXMLAttribute_get_name_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLAttribute_get_name_Proxy');},
    IXMLAttribute_get_name_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLAttribute_get_name_Stub');},
    IXMLAttribute_get_value_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [Pointer(T.BSTR), 'p']], [['stdcall']]))('IXMLAttribute_get_value_Proxy');},
    IXMLAttribute_get_value_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLAttribute_get_value_Stub');},
    IID_IXMLError: function() {return (T.GUID)('IID_IXMLError');},
    IXMLError_GetErrorInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLError), 'This'], [Pointer(T.XML_ERROR), 'pErrorReturn']], [['stdcall']]))('IXMLError_GetErrorInfo_Proxy');},
    IXMLError_GetErrorInfo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLError_GetErrorInfo_Stub');},
    IID_IXMLElementNotificationSink: function() {return (T.GUID)('IID_IXMLElementNotificationSink');},
    IXMLElementNotificationSink_ChildAdded_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IXMLElementNotificationSink), 'This'], [Pointer(T.IDispatch), 'pChildElem']], [['stdcall']]))('IXMLElementNotificationSink_ChildAdded_Proxy');},
    IXMLElementNotificationSink_ChildAdded_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IXMLElementNotificationSink_ChildAdded_Stub');},
    CLSID_XMLDocument: function() {return (T.GUID)('CLSID_XMLDocument');},
    IID_IInternet: function() {return (T.GUID)('IID_IInternet');},
    IID_IBinding: function() {return (T.GUID)('IID_IBinding');},
    IBinding_Abort_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBinding), 'This']], [['stdcall']]))('IBinding_Abort_Proxy');},
    IBinding_Abort_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBinding_Abort_Stub');},
    IBinding_Suspend_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBinding), 'This']], [['stdcall']]))('IBinding_Suspend_Proxy');},
    IBinding_Suspend_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBinding_Suspend_Stub');},
    IBinding_Resume_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBinding), 'This']], [['stdcall']]))('IBinding_Resume_Proxy');},
    IBinding_Resume_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBinding_Resume_Stub');},
    IBinding_SetPriority_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [T.LONG, 'nPriority']], [['stdcall']]))('IBinding_SetPriority_Proxy');},
    IBinding_SetPriority_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBinding_SetPriority_Stub');},
    IBinding_GetPriority_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [Pointer(T.LONG), 'pnPriority']], [['stdcall']]))('IBinding_GetPriority_Proxy');},
    IBinding_GetPriority_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBinding_GetPriority_Stub');},
    IBinding_RemoteGetBindResult_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [Pointer(T.CLSID), 'pclsidProtocol'], [Pointer(T.DWORD), 'pdwResult'], [Pointer(T.LPOLESTR), 'pszResult'], [T.DWORD, 'dwReserved']], [['stdcall']]))('IBinding_RemoteGetBindResult_Proxy');},
    IBinding_RemoteGetBindResult_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBinding_RemoteGetBindResult_Stub');},
    IBinding_GetBindResult_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [Pointer(T.CLSID), 'pclsidProtocol'], [Pointer(T.DWORD), 'pdwResult'], [Pointer(T.LPOLESTR), 'pszResult'], [Pointer(T.DWORD), 'pdwReserved']], [['stdcall']]))('IBinding_GetBindResult_Proxy');},
    IBinding_GetBindResult_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [Pointer(T.CLSID), 'pclsidProtocol'], [Pointer(T.DWORD), 'pdwResult'], [Pointer(T.LPOLESTR), 'pszResult'], [T.DWORD, 'dwReserved']], [['stdcall']]))('IBinding_GetBindResult_Stub');},
    IID_IBindStatusCallback: function() {return (T.GUID)('IID_IBindStatusCallback');},
    IBindStatusCallback_OnStartBinding_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.DWORD, 'dwReserved'], [Pointer(T.IBinding), 'pib']], [['stdcall']]))('IBindStatusCallback_OnStartBinding_Proxy');},
    IBindStatusCallback_OnStartBinding_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindStatusCallback_OnStartBinding_Stub');},
    IBindStatusCallback_GetPriority_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.LONG), 'pnPriority']], [['stdcall']]))('IBindStatusCallback_GetPriority_Proxy');},
    IBindStatusCallback_GetPriority_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindStatusCallback_GetPriority_Stub');},
    IBindStatusCallback_OnLowResource_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.DWORD, 'reserved']], [['stdcall']]))('IBindStatusCallback_OnLowResource_Proxy');},
    IBindStatusCallback_OnLowResource_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindStatusCallback_OnLowResource_Stub');},
    IBindStatusCallback_OnProgress_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.ULONG, 'ulProgress'], [T.ULONG, 'ulProgressMax'], [T.ULONG, 'ulStatusCode'], [T.LPCWSTR, 'szStatusText']], [['stdcall']]))('IBindStatusCallback_OnProgress_Proxy');},
    IBindStatusCallback_OnProgress_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindStatusCallback_OnProgress_Stub');},
    IBindStatusCallback_OnStopBinding_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.HRESULT, 'hresult'], [T.LPCWSTR, 'szError']], [['stdcall']]))('IBindStatusCallback_OnStopBinding_Proxy');},
    IBindStatusCallback_OnStopBinding_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindStatusCallback_OnStopBinding_Stub');},
    IBindStatusCallback_RemoteGetBindInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.RemBINDINFO), 'pbindinfo'], [Pointer(T.RemSTGMEDIUM), 'pstgmed']], [['stdcall']]))('IBindStatusCallback_RemoteGetBindInfo_Proxy');},
    IBindStatusCallback_RemoteGetBindInfo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindStatusCallback_RemoteGetBindInfo_Stub');},
    IBindStatusCallback_RemoteOnDataAvailable_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.DWORD, 'grfBSCF'], [T.DWORD, 'dwSize'], [Pointer(T.RemFORMATETC), 'pformatetc'], [Pointer(T.RemSTGMEDIUM), 'pstgmed']], [['stdcall']]))('IBindStatusCallback_RemoteOnDataAvailable_Proxy');},
    IBindStatusCallback_RemoteOnDataAvailable_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindStatusCallback_RemoteOnDataAvailable_Stub');},
    IBindStatusCallback_OnObjectAvailable_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'punk']], [['stdcall']]))('IBindStatusCallback_OnObjectAvailable_Proxy');},
    IBindStatusCallback_OnObjectAvailable_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindStatusCallback_OnObjectAvailable_Stub');},
    IBindStatusCallback_GetBindInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.BINDINFO), 'pbindinfo']], [['stdcall']]))('IBindStatusCallback_GetBindInfo_Proxy');},
    IBindStatusCallback_GetBindInfo_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.RemBINDINFO), 'pbindinfo'], [Pointer(T.RemSTGMEDIUM), 'pstgmed']], [['stdcall']]))('IBindStatusCallback_GetBindInfo_Stub');},
    IBindStatusCallback_OnDataAvailable_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.DWORD, 'grfBSCF'], [T.DWORD, 'dwSize'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pstgmed']], [['stdcall']]))('IBindStatusCallback_OnDataAvailable_Proxy');},
    IBindStatusCallback_OnDataAvailable_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.DWORD, 'grfBSCF'], [T.DWORD, 'dwSize'], [Pointer(T.RemFORMATETC), 'pformatetc'], [Pointer(T.RemSTGMEDIUM), 'pstgmed']], [['stdcall']]))('IBindStatusCallback_OnDataAvailable_Stub');},
    IID_IBindStatusCallbackEx: function() {return (T.GUID)('IID_IBindStatusCallbackEx');},
    IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.RemBINDINFO), 'pbindinfo'], [Pointer(T.RemSTGMEDIUM), 'pstgmed'], [Pointer(T.DWORD), 'grfBINDF2'], [Pointer(T.DWORD), 'pdwReserved']], [['stdcall']]))('IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy');},
    IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub');},
    IBindStatusCallbackEx_GetBindInfoEx_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.BINDINFO), 'pbindinfo'], [Pointer(T.DWORD), 'grfBINDF2'], [Pointer(T.DWORD), 'pdwReserved']], [['stdcall']]))('IBindStatusCallbackEx_GetBindInfoEx_Proxy');},
    IBindStatusCallbackEx_GetBindInfoEx_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.RemBINDINFO), 'pbindinfo'], [Pointer(T.RemSTGMEDIUM), 'pstgmed'], [Pointer(T.DWORD), 'grfBINDF2'], [Pointer(T.DWORD), 'pdwReserved']], [['stdcall']]))('IBindStatusCallbackEx_GetBindInfoEx_Stub');},
    IID_IAuthenticate: function() {return (T.GUID)('IID_IAuthenticate');},
    IAuthenticate_Authenticate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IAuthenticate), 'This'], [Pointer(T.HWND), 'phwnd'], [Pointer(T.LPWSTR), 'pszUsername'], [Pointer(T.LPWSTR), 'pszPassword']], [['stdcall']]))('IAuthenticate_Authenticate_Proxy');},
    IAuthenticate_Authenticate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IAuthenticate_Authenticate_Stub');},
    IID_IHttpNegotiate: function() {return (T.GUID)('IID_IHttpNegotiate');},
    IHttpNegotiate_BeginningTransaction_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate), 'This'], [T.LPCWSTR, 'szURL'], [T.LPCWSTR, 'szHeaders'], [T.DWORD, 'dwReserved'], [Pointer(T.LPWSTR), 'pszAdditionalHeaders']], [['stdcall']]))('IHttpNegotiate_BeginningTransaction_Proxy');},
    IHttpNegotiate_BeginningTransaction_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IHttpNegotiate_BeginningTransaction_Stub');},
    IHttpNegotiate_OnResponse_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate), 'This'], [T.DWORD, 'dwResponseCode'], [T.LPCWSTR, 'szResponseHeaders'], [T.LPCWSTR, 'szRequestHeaders'], [Pointer(T.LPWSTR), 'pszAdditionalRequestHeaders']], [['stdcall']]))('IHttpNegotiate_OnResponse_Proxy');},
    IHttpNegotiate_OnResponse_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IHttpNegotiate_OnResponse_Stub');},
    IID_IHttpNegotiate2: function() {return (T.GUID)('IID_IHttpNegotiate2');},
    IHttpNegotiate2_GetRootSecurityId_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate2), 'This'], [Pointer(T.BYTE), 'pbSecurityId'], [Pointer(T.DWORD), 'pcbSecurityId'], [T.DWORD_PTR, 'dwReserved']], [['stdcall']]))('IHttpNegotiate2_GetRootSecurityId_Proxy');},
    IHttpNegotiate2_GetRootSecurityId_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IHttpNegotiate2_GetRootSecurityId_Stub');},
    IID_IBindHost: function() {return (T.GUID)('IID_IBindHost');},
    IBindHost_CreateMoniker_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [T.LPOLESTR, 'szName'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(Pointer(T.IMoniker)), 'ppmk'], [T.DWORD, 'dwReserved']], [['stdcall']]))('IBindHost_CreateMoniker_Proxy');},
    IBindHost_CreateMoniker_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindHost_CreateMoniker_Stub');},
    IBindHost_RemoteMonikerBindToStorage_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IMoniker), 'pMk'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(T.IBindStatusCallback), 'pBSC'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObj']], [['stdcall']]))('IBindHost_RemoteMonikerBindToStorage_Proxy');},
    IBindHost_RemoteMonikerBindToStorage_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindHost_RemoteMonikerBindToStorage_Stub');},
    IBindHost_RemoteMonikerBindToObject_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IMoniker), 'pMk'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(T.IBindStatusCallback), 'pBSC'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObj']], [['stdcall']]))('IBindHost_RemoteMonikerBindToObject_Proxy');},
    IBindHost_RemoteMonikerBindToObject_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindHost_RemoteMonikerBindToObject_Stub');},
    IBindHost_MonikerBindToStorage_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IMoniker), 'pMk'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(T.IBindStatusCallback), 'pBSC'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObj']], [['stdcall']]))('IBindHost_MonikerBindToStorage_Proxy');},
    IBindHost_MonikerBindToStorage_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IMoniker), 'pMk'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(T.IBindStatusCallback), 'pBSC'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObj']], [['stdcall']]))('IBindHost_MonikerBindToStorage_Stub');},
    IBindHost_MonikerBindToObject_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IMoniker), 'pMk'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(T.IBindStatusCallback), 'pBSC'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObj']], [['stdcall']]))('IBindHost_MonikerBindToObject_Proxy');},
    IBindHost_MonikerBindToObject_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IMoniker), 'pMk'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(T.IBindStatusCallback), 'pBSC'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObj']], [['stdcall']]))('IBindHost_MonikerBindToObject_Stub');},
    IID_IWinInetInfo: function() {return (T.GUID)('IID_IWinInetInfo');},
    IWinInetInfo_RemoteQueryOption_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IWinInetInfo), 'This'], [T.DWORD, 'dwOption'], [Pointer(T.BYTE), 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf']], [['stdcall']]))('IWinInetInfo_RemoteQueryOption_Proxy');},
    IWinInetInfo_RemoteQueryOption_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IWinInetInfo_RemoteQueryOption_Stub');},
    IWinInetInfo_QueryOption_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IWinInetInfo), 'This'], [T.DWORD, 'dwOption'], [T.LPVOID, 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf']], [['stdcall']]))('IWinInetInfo_QueryOption_Proxy');},
    IWinInetInfo_QueryOption_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IWinInetInfo), 'This'], [T.DWORD, 'dwOption'], [Pointer(T.BYTE), 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf']], [['stdcall']]))('IWinInetInfo_QueryOption_Stub');},
    IID_IWinInetHttpInfo: function() {return (T.GUID)('IID_IWinInetHttpInfo');},
    IWinInetHttpInfo_RemoteQueryInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IWinInetHttpInfo), 'This'], [T.DWORD, 'dwOption'], [Pointer(T.BYTE), 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf'], [Pointer(T.DWORD), 'pdwFlags'], [Pointer(T.DWORD), 'pdwReserved']], [['stdcall']]))('IWinInetHttpInfo_RemoteQueryInfo_Proxy');},
    IWinInetHttpInfo_RemoteQueryInfo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IWinInetHttpInfo_RemoteQueryInfo_Stub');},
    IWinInetHttpInfo_QueryInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IWinInetHttpInfo), 'This'], [T.DWORD, 'dwOption'], [T.LPVOID, 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf'], [Pointer(T.DWORD), 'pdwFlags'], [Pointer(T.DWORD), 'pdwReserved']], [['stdcall']]))('IWinInetHttpInfo_QueryInfo_Proxy');},
    IWinInetHttpInfo_QueryInfo_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IWinInetHttpInfo), 'This'], [T.DWORD, 'dwOption'], [Pointer(T.BYTE), 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf'], [Pointer(T.DWORD), 'pdwFlags'], [Pointer(T.DWORD), 'pdwReserved']], [['stdcall']]))('IWinInetHttpInfo_QueryInfo_Stub');},
    IID_IWindowForBindingUI: function() {return (T.GUID)('IID_IWindowForBindingUI');},
    IWindowForBindingUI_GetWindow_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IWindowForBindingUI), 'This'], [Pointer(T.GUID), 'rguidReason'], [Pointer(T.HWND), 'phwnd']], [['stdcall']]))('IWindowForBindingUI_GetWindow_Proxy');},
    IWindowForBindingUI_GetWindow_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IWindowForBindingUI_GetWindow_Stub');},
    IID_IHttpSecurity: function() {return (T.GUID)('IID_IHttpSecurity');},
    IHttpSecurity_OnSecurityProblem_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IHttpSecurity), 'This'], [T.DWORD, 'dwProblem']], [['stdcall']]))('IHttpSecurity_OnSecurityProblem_Proxy');},
    IHttpSecurity_OnSecurityProblem_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IHttpSecurity_OnSecurityProblem_Stub');},
    IID_IPersistMoniker: function() {return (T.GUID)('IID_IPersistMoniker');},
    IPersistMoniker_GetClassID_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(T.CLSID), 'pClassID']], [['stdcall']]))('IPersistMoniker_GetClassID_Proxy');},
    IPersistMoniker_GetClassID_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistMoniker_GetClassID_Stub');},
    IPersistMoniker_IsDirty_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This']], [['stdcall']]))('IPersistMoniker_IsDirty_Proxy');},
    IPersistMoniker_IsDirty_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistMoniker_IsDirty_Stub');},
    IPersistMoniker_Load_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [T.BOOL, 'fFullyAvailable'], [Pointer(T.IMoniker), 'pimkName'], [T.LPBC, 'pibc'], [T.DWORD, 'grfMode']], [['stdcall']]))('IPersistMoniker_Load_Proxy');},
    IPersistMoniker_Load_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistMoniker_Load_Stub');},
    IPersistMoniker_Save_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(T.IMoniker), 'pimkName'], [T.LPBC, 'pbc'], [T.BOOL, 'fRemember']], [['stdcall']]))('IPersistMoniker_Save_Proxy');},
    IPersistMoniker_Save_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistMoniker_Save_Stub');},
    IPersistMoniker_SaveCompleted_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(T.IMoniker), 'pimkName'], [T.LPBC, 'pibc']], [['stdcall']]))('IPersistMoniker_SaveCompleted_Proxy');},
    IPersistMoniker_SaveCompleted_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistMoniker_SaveCompleted_Stub');},
    IPersistMoniker_GetCurMoniker_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(Pointer(T.IMoniker)), 'ppimkName']], [['stdcall']]))('IPersistMoniker_GetCurMoniker_Proxy');},
    IPersistMoniker_GetCurMoniker_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPersistMoniker_GetCurMoniker_Stub');},
    IID_IMonikerProp: function() {return (T.GUID)('IID_IMonikerProp');},
    IMonikerProp_PutProperty_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IMonikerProp), 'This'], [T.MONIKERPROPERTY, 'mkp'], [T.LPCWSTR, 'val']], [['stdcall']]))('IMonikerProp_PutProperty_Proxy');},
    IMonikerProp_PutProperty_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IMonikerProp_PutProperty_Stub');},
    IID_IBindProtocol: function() {return (T.GUID)('IID_IBindProtocol');},
    IBindProtocol_CreateBinding_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindProtocol), 'This'], [T.LPCWSTR, 'szUrl'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(Pointer(T.IBinding)), 'ppb']], [['stdcall']]))('IBindProtocol_CreateBinding_Proxy');},
    IBindProtocol_CreateBinding_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IBindProtocol_CreateBinding_Stub');},
    IID_IInternetBindInfo: function() {return (T.GUID)('IID_IInternetBindInfo');},
    IInternetBindInfo_GetBindInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetBindInfo), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.BINDINFO), 'pbindinfo']], [['stdcall']]))('IInternetBindInfo_GetBindInfo_Proxy');},
    IInternetBindInfo_GetBindInfo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetBindInfo_GetBindInfo_Stub');},
    IInternetBindInfo_GetBindString_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetBindInfo), 'This'], [T.ULONG, 'ulStringType'], [Pointer(T.LPOLESTR), 'ppwzStr'], [T.ULONG, 'cEl'], [Pointer(T.ULONG), 'pcElFetched']], [['stdcall']]))('IInternetBindInfo_GetBindString_Proxy');},
    IInternetBindInfo_GetBindString_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetBindInfo_GetBindString_Stub');},
    IID_IInternetPriority: function() {return (T.GUID)('IID_IInternetPriority');},
    IInternetPriority_SetPriority_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetPriority), 'This'], [T.LONG, 'nPriority']], [['stdcall']]))('IInternetPriority_SetPriority_Proxy');},
    IInternetPriority_SetPriority_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetPriority_SetPriority_Stub');},
    IInternetPriority_GetPriority_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetPriority), 'This'], [Pointer(T.LONG), 'pnPriority']], [['stdcall']]))('IInternetPriority_GetPriority_Proxy');},
    IInternetPriority_GetPriority_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetPriority_GetPriority_Stub');},
    IID_IInternetProtocolRoot: function() {return (T.GUID)('IID_IInternetProtocolRoot');},
    IInternetProtocolRoot_Start_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [T.LPCWSTR, 'szUrl'], [Pointer(T.IInternetProtocolSink), 'pOIProtSink'], [Pointer(T.IInternetBindInfo), 'pOIBindInfo'], [T.DWORD, 'grfPI'], [T.HANDLE_PTR, 'dwReserved']], [['stdcall']]))('IInternetProtocolRoot_Start_Proxy');},
    IInternetProtocolRoot_Start_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocolRoot_Start_Stub');},
    IInternetProtocolRoot_Continue_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [Pointer(T.PROTOCOLDATA), 'pProtocolData']], [['stdcall']]))('IInternetProtocolRoot_Continue_Proxy');},
    IInternetProtocolRoot_Continue_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocolRoot_Continue_Stub');},
    IInternetProtocolRoot_Abort_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [T.HRESULT, 'hrReason'], [T.DWORD, 'dwOptions']], [['stdcall']]))('IInternetProtocolRoot_Abort_Proxy');},
    IInternetProtocolRoot_Abort_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocolRoot_Abort_Stub');},
    IInternetProtocolRoot_Terminate_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [T.DWORD, 'dwOptions']], [['stdcall']]))('IInternetProtocolRoot_Terminate_Proxy');},
    IInternetProtocolRoot_Terminate_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocolRoot_Terminate_Stub');},
    IInternetProtocolRoot_Suspend_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This']], [['stdcall']]))('IInternetProtocolRoot_Suspend_Proxy');},
    IInternetProtocolRoot_Suspend_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocolRoot_Suspend_Stub');},
    IInternetProtocolRoot_Resume_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This']], [['stdcall']]))('IInternetProtocolRoot_Resume_Proxy');},
    IInternetProtocolRoot_Resume_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocolRoot_Resume_Stub');},
    IID_IInternetProtocolSink: function() {return (T.GUID)('IID_IInternetProtocolSink');},
    IInternetProtocolSink_Switch_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [Pointer(T.PROTOCOLDATA), 'pProtocolData']], [['stdcall']]))('IInternetProtocolSink_Switch_Proxy');},
    IInternetProtocolSink_Switch_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocolSink_Switch_Stub');},
    IInternetProtocolSink_ReportProgress_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [T.ULONG, 'ulStatusCode'], [T.LPCWSTR, 'szStatusText']], [['stdcall']]))('IInternetProtocolSink_ReportProgress_Proxy');},
    IInternetProtocolSink_ReportProgress_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocolSink_ReportProgress_Stub');},
    IInternetProtocolSink_ReportData_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [T.DWORD, 'grfBSCF'], [T.ULONG, 'ulProgress'], [T.ULONG, 'ulProgressMax']], [['stdcall']]))('IInternetProtocolSink_ReportData_Proxy');},
    IInternetProtocolSink_ReportData_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocolSink_ReportData_Stub');},
    IInternetProtocolSink_ReportResult_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [T.HRESULT, 'hrResult'], [T.DWORD, 'dwError'], [T.LPCWSTR, 'szResult']], [['stdcall']]))('IInternetProtocolSink_ReportResult_Proxy');},
    IInternetProtocolSink_ReportResult_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocolSink_ReportResult_Stub');},
    IID_IInternetProtocol: function() {return (T.GUID)('IID_IInternetProtocol');},
    IInternetProtocol_Read_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']], [['stdcall']]))('IInternetProtocol_Read_Proxy');},
    IInternetProtocol_Read_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocol_Read_Stub');},
    IInternetProtocol_Seek_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [T.LARGE_INTEGER, 'dlibMove'], [T.DWORD, 'dwOrigin'], [Pointer(T.ULARGE_INTEGER), 'plibNewPosition']], [['stdcall']]))('IInternetProtocol_Seek_Proxy');},
    IInternetProtocol_Seek_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocol_Seek_Stub');},
    IInternetProtocol_LockRequest_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [T.DWORD, 'dwOptions']], [['stdcall']]))('IInternetProtocol_LockRequest_Proxy');},
    IInternetProtocol_LockRequest_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocol_LockRequest_Stub');},
    IInternetProtocol_UnlockRequest_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This']], [['stdcall']]))('IInternetProtocol_UnlockRequest_Proxy');},
    IInternetProtocol_UnlockRequest_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocol_UnlockRequest_Stub');},
    IID_IInternetProtocolInfo: function() {return (T.GUID)('IID_IInternetProtocolInfo');},
    IInternetProtocolInfo_ParseUrl_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [T.LPCWSTR, 'pwzUrl'], [T.PARSEACTION, 'ParseAction'], [T.DWORD, 'dwParseFlags'], [T.LPWSTR, 'pwzResult'], [T.DWORD, 'cchResult'], [Pointer(T.DWORD), 'pcchResult'], [T.DWORD, 'dwReserved']], [['stdcall']]))('IInternetProtocolInfo_ParseUrl_Proxy');},
    IInternetProtocolInfo_ParseUrl_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocolInfo_ParseUrl_Stub');},
    IInternetProtocolInfo_CombineUrl_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [T.LPCWSTR, 'pwzBaseUrl'], [T.LPCWSTR, 'pwzRelativeUrl'], [T.DWORD, 'dwCombineFlags'], [T.LPWSTR, 'pwzResult'], [T.DWORD, 'cchResult'], [Pointer(T.DWORD), 'pcchResult'], [T.DWORD, 'dwReserved']], [['stdcall']]))('IInternetProtocolInfo_CombineUrl_Proxy');},
    IInternetProtocolInfo_CombineUrl_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocolInfo_CombineUrl_Stub');},
    IInternetProtocolInfo_CompareUrl_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [T.LPCWSTR, 'pwzUrl1'], [T.LPCWSTR, 'pwzUrl2'], [T.DWORD, 'dwCompareFlags']], [['stdcall']]))('IInternetProtocolInfo_CompareUrl_Proxy');},
    IInternetProtocolInfo_CompareUrl_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocolInfo_CompareUrl_Stub');},
    IInternetProtocolInfo_QueryInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [T.LPCWSTR, 'pwzUrl'], [T.QUERYOPTION, 'OueryOption'], [T.DWORD, 'dwQueryFlags'], [T.LPVOID, 'pBuffer'], [T.DWORD, 'cbBuffer'], [Pointer(T.DWORD), 'pcbBuf'], [T.DWORD, 'dwReserved']], [['stdcall']]))('IInternetProtocolInfo_QueryInfo_Proxy');},
    IInternetProtocolInfo_QueryInfo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocolInfo_QueryInfo_Stub');},
    IID_IInternetSession: function() {return (T.GUID)('IID_IInternetSession');},
    IInternetSession_RegisterNameSpace_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IClassFactory), 'pCF'], [Pointer(T.CLSID), 'rclsid'], [T.LPCWSTR, 'pwzProtocol'], [T.ULONG, 'cPatterns'], [Pointer(T.LPCWSTR), 'ppwzPatterns'], [T.DWORD, 'dwReserved']], [['stdcall']]))('IInternetSession_RegisterNameSpace_Proxy');},
    IInternetSession_RegisterNameSpace_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetSession_RegisterNameSpace_Stub');},
    IInternetSession_UnregisterNameSpace_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IClassFactory), 'pCF'], [T.LPCWSTR, 'pszProtocol']], [['stdcall']]))('IInternetSession_UnregisterNameSpace_Proxy');},
    IInternetSession_UnregisterNameSpace_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetSession_UnregisterNameSpace_Stub');},
    IInternetSession_RegisterMimeFilter_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IClassFactory), 'pCF'], [Pointer(T.CLSID), 'rclsid'], [T.LPCWSTR, 'pwzType']], [['stdcall']]))('IInternetSession_RegisterMimeFilter_Proxy');},
    IInternetSession_RegisterMimeFilter_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetSession_RegisterMimeFilter_Stub');},
    IInternetSession_UnregisterMimeFilter_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IClassFactory), 'pCF'], [T.LPCWSTR, 'pwzType']], [['stdcall']]))('IInternetSession_UnregisterMimeFilter_Proxy');},
    IInternetSession_UnregisterMimeFilter_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetSession_UnregisterMimeFilter_Stub');},
    IInternetSession_CreateBinding_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [T.LPBC, 'pBC'], [T.LPCWSTR, 'szUrl'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(Pointer(T.IUnknown)), 'ppUnk'], [Pointer(Pointer(T.IInternetProtocol)), 'ppOInetProt'], [T.DWORD, 'dwOption']], [['stdcall']]))('IInternetSession_CreateBinding_Proxy');},
    IInternetSession_CreateBinding_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetSession_CreateBinding_Stub');},
    IInternetSession_SetSessionOption_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [T.DWORD, 'dwOption'], [T.LPVOID, 'pBuffer'], [T.DWORD, 'dwBufferLength'], [T.DWORD, 'dwReserved']], [['stdcall']]))('IInternetSession_SetSessionOption_Proxy');},
    IInternetSession_SetSessionOption_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetSession_SetSessionOption_Stub');},
    IID_IInternetSecurityMgrSite: function() {return (T.GUID)('IID_IInternetSecurityMgrSite');},
    IInternetSecurityMgrSite_GetWindow_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetSecurityMgrSite), 'This'], [Pointer(T.HWND), 'phwnd']], [['stdcall']]))('IInternetSecurityMgrSite_GetWindow_Proxy');},
    IInternetSecurityMgrSite_GetWindow_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetSecurityMgrSite_GetWindow_Stub');},
    IInternetSecurityMgrSite_EnableModeless_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetSecurityMgrSite), 'This'], [T.BOOL, 'fEnable']], [['stdcall']]))('IInternetSecurityMgrSite_EnableModeless_Proxy');},
    IInternetSecurityMgrSite_EnableModeless_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetSecurityMgrSite_EnableModeless_Stub');},
    IID_IInternetSecurityManager: function() {return (T.GUID)('IID_IInternetSecurityManager');},
    IInternetSecurityManager_SetSecuritySite_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [Pointer(T.IInternetSecurityMgrSite), 'pSite']], [['stdcall']]))('IInternetSecurityManager_SetSecuritySite_Proxy');},
    IInternetSecurityManager_SetSecuritySite_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetSecurityManager_SetSecuritySite_Stub');},
    IInternetSecurityManager_GetSecuritySite_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [Pointer(Pointer(T.IInternetSecurityMgrSite)), 'ppSite']], [['stdcall']]))('IInternetSecurityManager_GetSecuritySite_Proxy');},
    IInternetSecurityManager_GetSecuritySite_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetSecurityManager_GetSecuritySite_Stub');},
    IInternetSecurityManager_MapUrlToZone_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.LPCWSTR, 'pwszUrl'], [Pointer(T.DWORD), 'pdwZone'], [T.DWORD, 'dwFlags']], [['stdcall']]))('IInternetSecurityManager_MapUrlToZone_Proxy');},
    IInternetSecurityManager_MapUrlToZone_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetSecurityManager_MapUrlToZone_Stub');},
    IInternetSecurityManager_GetSecurityId_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.LPCWSTR, 'pwszUrl'], [Pointer(T.BYTE), 'pbSecurityId'], [Pointer(T.DWORD), 'pcbSecurityId'], [T.DWORD_PTR, 'dwReserved']], [['stdcall']]))('IInternetSecurityManager_GetSecurityId_Proxy');},
    IInternetSecurityManager_GetSecurityId_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetSecurityManager_GetSecurityId_Stub');},
    IInternetSecurityManager_ProcessUrlAction_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.LPCWSTR, 'pwszUrl'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [Pointer(T.BYTE), 'pContext'], [T.DWORD, 'cbContext'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwReserved']], [['stdcall']]))('IInternetSecurityManager_ProcessUrlAction_Proxy');},
    IInternetSecurityManager_ProcessUrlAction_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetSecurityManager_ProcessUrlAction_Stub');},
    IInternetSecurityManager_QueryCustomPolicy_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.LPCWSTR, 'pwszUrl'], [Pointer(T.GUID), 'guidKey'], [Pointer(Pointer(T.BYTE)), 'ppPolicy'], [Pointer(T.DWORD), 'pcbPolicy'], [Pointer(T.BYTE), 'pContext'], [T.DWORD, 'cbContext'], [T.DWORD, 'dwReserved']], [['stdcall']]))('IInternetSecurityManager_QueryCustomPolicy_Proxy');},
    IInternetSecurityManager_QueryCustomPolicy_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetSecurityManager_QueryCustomPolicy_Stub');},
    IInternetSecurityManager_SetZoneMapping_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.DWORD, 'dwZone'], [T.LPCWSTR, 'lpszPattern'], [T.DWORD, 'dwFlags']], [['stdcall']]))('IInternetSecurityManager_SetZoneMapping_Proxy');},
    IInternetSecurityManager_SetZoneMapping_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetSecurityManager_SetZoneMapping_Stub');},
    IInternetSecurityManager_GetZoneMappings_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(Pointer(T.IEnumString)), 'ppenumString'], [T.DWORD, 'dwFlags']], [['stdcall']]))('IInternetSecurityManager_GetZoneMappings_Proxy');},
    IInternetSecurityManager_GetZoneMappings_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetSecurityManager_GetZoneMappings_Stub');},
    IID_IInternetHostSecurityManager: function() {return (T.GUID)('IID_IInternetHostSecurityManager');},
    IInternetHostSecurityManager_GetSecurityId_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetHostSecurityManager), 'This'], [Pointer(T.BYTE), 'pbSecurityId'], [Pointer(T.DWORD), 'pcbSecurityId'], [T.DWORD_PTR, 'dwReserved']], [['stdcall']]))('IInternetHostSecurityManager_GetSecurityId_Proxy');},
    IInternetHostSecurityManager_GetSecurityId_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetHostSecurityManager_GetSecurityId_Stub');},
    IInternetHostSecurityManager_ProcessUrlAction_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetHostSecurityManager), 'This'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [Pointer(T.BYTE), 'pContext'], [T.DWORD, 'cbContext'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwReserved']], [['stdcall']]))('IInternetHostSecurityManager_ProcessUrlAction_Proxy');},
    IInternetHostSecurityManager_ProcessUrlAction_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetHostSecurityManager_ProcessUrlAction_Stub');},
    IInternetHostSecurityManager_QueryCustomPolicy_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetHostSecurityManager), 'This'], [Pointer(T.GUID), 'guidKey'], [Pointer(Pointer(T.BYTE)), 'ppPolicy'], [Pointer(T.DWORD), 'pcbPolicy'], [Pointer(T.BYTE), 'pContext'], [T.DWORD, 'cbContext'], [T.DWORD, 'dwReserved']], [['stdcall']]))('IInternetHostSecurityManager_QueryCustomPolicy_Proxy');},
    IInternetHostSecurityManager_QueryCustomPolicy_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetHostSecurityManager_QueryCustomPolicy_Stub');},
    IID_IInternetZoneManager: function() {return (T.GUID)('IID_IInternetZoneManager');},
    IInternetZoneManager_GetZoneAttributes_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes']], [['stdcall']]))('IInternetZoneManager_GetZoneAttributes_Proxy');},
    IInternetZoneManager_GetZoneAttributes_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManager_GetZoneAttributes_Stub');},
    IInternetZoneManager_SetZoneAttributes_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes']], [['stdcall']]))('IInternetZoneManager_SetZoneAttributes_Proxy');},
    IInternetZoneManager_SetZoneAttributes_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManager_SetZoneAttributes_Stub');},
    IInternetZoneManager_GetZoneCustomPolicy_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.GUID), 'guidKey'], [Pointer(Pointer(T.BYTE)), 'ppPolicy'], [Pointer(T.DWORD), 'pcbPolicy'], [T.URLZONEREG, 'ulrZoneReg']], [['stdcall']]))('IInternetZoneManager_GetZoneCustomPolicy_Proxy');},
    IInternetZoneManager_GetZoneCustomPolicy_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManager_GetZoneCustomPolicy_Stub');},
    IInternetZoneManager_SetZoneCustomPolicy_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.GUID), 'guidKey'], [Pointer(T.BYTE), 'ppPolicy'], [T.DWORD, 'pcbPolicy'], [T.URLZONEREG, 'ulrZoneReg']], [['stdcall']]))('IInternetZoneManager_SetZoneCustomPolicy_Proxy');},
    IInternetZoneManager_SetZoneCustomPolicy_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManager_SetZoneCustomPolicy_Stub');},
    IInternetZoneManager_GetZoneActionPolicy_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg']], [['stdcall']]))('IInternetZoneManager_GetZoneActionPolicy_Proxy');},
    IInternetZoneManager_GetZoneActionPolicy_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManager_GetZoneActionPolicy_Stub');},
    IInternetZoneManager_SetZoneActionPolicy_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg']], [['stdcall']]))('IInternetZoneManager_SetZoneActionPolicy_Proxy');},
    IInternetZoneManager_SetZoneActionPolicy_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManager_SetZoneActionPolicy_Stub');},
    IInternetZoneManager_PromptAction_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwAction'], [T.HWND, 'hwndParent'], [T.LPCWSTR, 'pwszUrl'], [T.LPCWSTR, 'pwszText'], [T.DWORD, 'dwPromptFlags']], [['stdcall']]))('IInternetZoneManager_PromptAction_Proxy');},
    IInternetZoneManager_PromptAction_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManager_PromptAction_Stub');},
    IInternetZoneManager_LogAction_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwAction'], [T.LPCWSTR, 'pwszUrl'], [T.LPCWSTR, 'pwszText'], [T.DWORD, 'dwLogFlags']], [['stdcall']]))('IInternetZoneManager_LogAction_Proxy');},
    IInternetZoneManager_LogAction_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManager_LogAction_Stub');},
    IInternetZoneManager_CreateZoneEnumerator_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [Pointer(T.DWORD), 'pdwEnum'], [Pointer(T.DWORD), 'pdwCount'], [T.DWORD, 'dwFlags']], [['stdcall']]))('IInternetZoneManager_CreateZoneEnumerator_Proxy');},
    IInternetZoneManager_CreateZoneEnumerator_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManager_CreateZoneEnumerator_Stub');},
    IInternetZoneManager_GetZoneAt_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwEnum'], [T.DWORD, 'dwIndex'], [Pointer(T.DWORD), 'pdwZone']], [['stdcall']]))('IInternetZoneManager_GetZoneAt_Proxy');},
    IInternetZoneManager_GetZoneAt_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManager_GetZoneAt_Stub');},
    IInternetZoneManager_DestroyZoneEnumerator_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwEnum']], [['stdcall']]))('IInternetZoneManager_DestroyZoneEnumerator_Proxy');},
    IInternetZoneManager_DestroyZoneEnumerator_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManager_DestroyZoneEnumerator_Stub');},
    IInternetZoneManager_CopyTemplatePoliciesToZone_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwTemplate'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwReserved']], [['stdcall']]))('IInternetZoneManager_CopyTemplatePoliciesToZone_Proxy');},
    IInternetZoneManager_CopyTemplatePoliciesToZone_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManager_CopyTemplatePoliciesToZone_Stub');},
    IID_IInternetZoneManagerEx: function() {return (T.GUID)('IID_IInternetZoneManagerEx');},
    IInternetZoneManagerEx_GetZoneActionPolicyEx_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg'], [T.DWORD, 'dwFlags']], [['stdcall']]))('IInternetZoneManagerEx_GetZoneActionPolicyEx_Proxy');},
    IInternetZoneManagerEx_GetZoneActionPolicyEx_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManagerEx_GetZoneActionPolicyEx_Stub');},
    IInternetZoneManagerEx_SetZoneActionPolicyEx_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg'], [T.DWORD, 'dwFlags']], [['stdcall']]))('IInternetZoneManagerEx_SetZoneActionPolicyEx_Proxy');},
    IInternetZoneManagerEx_SetZoneActionPolicyEx_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManagerEx_SetZoneActionPolicyEx_Stub');},
    IID_IInternetZoneManagerEx2: function() {return (T.GUID)('IID_IInternetZoneManagerEx2');},
    IInternetZoneManagerEx2_GetZoneAttributesEx_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes'], [T.DWORD, 'dwFlags']], [['stdcall']]))('IInternetZoneManagerEx2_GetZoneAttributesEx_Proxy');},
    IInternetZoneManagerEx2_GetZoneAttributesEx_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManagerEx2_GetZoneAttributesEx_Stub');},
    IInternetZoneManagerEx2_GetZoneSecurityState_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZoneIndex'], [T.BOOL, 'fRespectPolicy'], [T.LPDWORD, 'pdwState'], [Pointer(T.BOOL), 'pfPolicyEncountered']], [['stdcall']]))('IInternetZoneManagerEx2_GetZoneSecurityState_Proxy');},
    IInternetZoneManagerEx2_GetZoneSecurityState_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManagerEx2_GetZoneSecurityState_Stub');},
    IInternetZoneManagerEx2_GetIESecurityState_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.BOOL, 'fRespectPolicy'], [T.LPDWORD, 'pdwState'], [Pointer(T.BOOL), 'pfPolicyEncountered'], [T.BOOL, 'fNoCache']], [['stdcall']]))('IInternetZoneManagerEx2_GetIESecurityState_Proxy');},
    IInternetZoneManagerEx2_GetIESecurityState_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManagerEx2_GetIESecurityState_Stub');},
    IInternetZoneManagerEx2_FixInsecureSettings_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This']], [['stdcall']]))('IInternetZoneManagerEx2_FixInsecureSettings_Proxy');},
    IInternetZoneManagerEx2_FixInsecureSettings_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetZoneManagerEx2_FixInsecureSettings_Stub');},
    IID_ISoftDistExt: function() {return (T.GUID)('IID_ISoftDistExt');},
    ISoftDistExt_ProcessSoftDist_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [T.LPCWSTR, 'szCDFURL'], [Pointer(T.IXMLElement), 'pSoftDistElement'], [T.LPSOFTDISTINFO, 'lpsdi']], [['stdcall']]))('ISoftDistExt_ProcessSoftDist_Proxy');},
    ISoftDistExt_ProcessSoftDist_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISoftDistExt_ProcessSoftDist_Stub');},
    ISoftDistExt_GetFirstCodeBase_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [Pointer(T.LPWSTR), 'szCodeBase'], [T.LPDWORD, 'dwMaxSize']], [['stdcall']]))('ISoftDistExt_GetFirstCodeBase_Proxy');},
    ISoftDistExt_GetFirstCodeBase_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISoftDistExt_GetFirstCodeBase_Stub');},
    ISoftDistExt_GetNextCodeBase_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [Pointer(T.LPWSTR), 'szCodeBase'], [T.LPDWORD, 'dwMaxSize']], [['stdcall']]))('ISoftDistExt_GetNextCodeBase_Proxy');},
    ISoftDistExt_GetNextCodeBase_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISoftDistExt_GetNextCodeBase_Stub');},
    ISoftDistExt_AsyncInstallDistributionUnit_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [Pointer(T.IBindCtx), 'pbc'], [T.LPVOID, 'lpReserved'], [T.DWORD, 'flags'], [T.LPCODEBASEHOLD, 'lpcbh']], [['stdcall']]))('ISoftDistExt_AsyncInstallDistributionUnit_Proxy');},
    ISoftDistExt_AsyncInstallDistributionUnit_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('ISoftDistExt_AsyncInstallDistributionUnit_Stub');},
    IID_IUri: function() {return (T.GUID)('IID_IUri');},
    IUri_GetPropertyBSTR_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.Uri_PROPERTY, 'uriProp'], [Pointer(T.BSTR), 'pbstrProperty'], [T.DWORD, 'dwFlags']], [['stdcall']]))('IUri_GetPropertyBSTR_Proxy');},
    IUri_GetPropertyBSTR_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetPropertyBSTR_Stub');},
    IUri_GetPropertyLength_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.Uri_PROPERTY, 'uriProp'], [Pointer(T.DWORD), 'pcchProperty'], [T.DWORD, 'dwFlags']], [['stdcall']]))('IUri_GetPropertyLength_Proxy');},
    IUri_GetPropertyLength_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetPropertyLength_Stub');},
    IUri_GetPropertyDWORD_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.Uri_PROPERTY, 'uriProp'], [Pointer(T.DWORD), 'pdwProperty'], [T.DWORD, 'dwFlags']], [['stdcall']]))('IUri_GetPropertyDWORD_Proxy');},
    IUri_GetPropertyDWORD_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetPropertyDWORD_Stub');},
    IUri_HasProperty_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.Uri_PROPERTY, 'uriProp'], [Pointer(T.BOOL), 'pfHasProperty']], [['stdcall']]))('IUri_HasProperty_Proxy');},
    IUri_HasProperty_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_HasProperty_Stub');},
    IUri_GetAbsoluteUri_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrAbsoluteUri']], [['stdcall']]))('IUri_GetAbsoluteUri_Proxy');},
    IUri_GetAbsoluteUri_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetAbsoluteUri_Stub');},
    IUri_GetAuthority_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrAuthority']], [['stdcall']]))('IUri_GetAuthority_Proxy');},
    IUri_GetAuthority_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetAuthority_Stub');},
    IUri_GetDisplayUri_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrDisplayString']], [['stdcall']]))('IUri_GetDisplayUri_Proxy');},
    IUri_GetDisplayUri_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetDisplayUri_Stub');},
    IUri_GetDomain_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrDomain']], [['stdcall']]))('IUri_GetDomain_Proxy');},
    IUri_GetDomain_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetDomain_Stub');},
    IUri_GetExtension_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrExtension']], [['stdcall']]))('IUri_GetExtension_Proxy');},
    IUri_GetExtension_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetExtension_Stub');},
    IUri_GetFragment_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrFragment']], [['stdcall']]))('IUri_GetFragment_Proxy');},
    IUri_GetFragment_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetFragment_Stub');},
    IUri_GetHost_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrHost']], [['stdcall']]))('IUri_GetHost_Proxy');},
    IUri_GetHost_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetHost_Stub');},
    IUri_GetPassword_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrPassword']], [['stdcall']]))('IUri_GetPassword_Proxy');},
    IUri_GetPassword_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetPassword_Stub');},
    IUri_GetPath_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrPath']], [['stdcall']]))('IUri_GetPath_Proxy');},
    IUri_GetPath_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetPath_Stub');},
    IUri_GetPathAndQuery_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrPathAndQuery']], [['stdcall']]))('IUri_GetPathAndQuery_Proxy');},
    IUri_GetPathAndQuery_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetPathAndQuery_Stub');},
    IUri_GetQuery_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrQuery']], [['stdcall']]))('IUri_GetQuery_Proxy');},
    IUri_GetQuery_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetQuery_Stub');},
    IUri_GetRawUri_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrRawUri']], [['stdcall']]))('IUri_GetRawUri_Proxy');},
    IUri_GetRawUri_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetRawUri_Stub');},
    IUri_GetSchemeName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrSchemeName']], [['stdcall']]))('IUri_GetSchemeName_Proxy');},
    IUri_GetSchemeName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetSchemeName_Stub');},
    IUri_GetUserInfo_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrUserInfo']], [['stdcall']]))('IUri_GetUserInfo_Proxy');},
    IUri_GetUserInfo_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetUserInfo_Stub');},
    IUri_GetUserName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrUserName']], [['stdcall']]))('IUri_GetUserName_Proxy');},
    IUri_GetUserName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetUserName_Stub');},
    IUri_GetHostType_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.DWORD), 'pdwHostType']], [['stdcall']]))('IUri_GetHostType_Proxy');},
    IUri_GetHostType_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetHostType_Stub');},
    IUri_GetPort_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.DWORD), 'pdwPort']], [['stdcall']]))('IUri_GetPort_Proxy');},
    IUri_GetPort_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetPort_Stub');},
    IUri_GetScheme_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.DWORD), 'pdwScheme']], [['stdcall']]))('IUri_GetScheme_Proxy');},
    IUri_GetScheme_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetScheme_Stub');},
    IUri_GetZone_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.DWORD), 'pdwZone']], [['stdcall']]))('IUri_GetZone_Proxy');},
    IUri_GetZone_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetZone_Stub');},
    IUri_GetProperties_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.LPDWORD, 'pdwFlags']], [['stdcall']]))('IUri_GetProperties_Proxy');},
    IUri_GetProperties_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_GetProperties_Stub');},
    IUri_IsEqual_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.IUri), 'pUri'], [Pointer(T.BOOL), 'pfEqual']], [['stdcall']]))('IUri_IsEqual_Proxy');},
    IUri_IsEqual_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUri_IsEqual_Stub');},
    CreateUri: function() {return (Fn(T.HRESULT, [[T.LPCWSTR], [T.DWORD], [T.DWORD_PTR], [Pointer(Pointer(T.IUri))]], [['stdcall']]))('CreateUri');},
    CreateUriWithFragment: function() {return (Fn(T.HRESULT, [[T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.DWORD_PTR], [Pointer(Pointer(T.IUri))]], [['stdcall']]))('CreateUriWithFragment');},
    CreateUriFromMultiByteString: function() {return (Fn(T.HRESULT, [[T.LPCSTR], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD_PTR], [Pointer(Pointer(T.IUri))]], [['stdcall']]))('CreateUriFromMultiByteString');},
    IID_IUriContainer: function() {return (T.GUID)('IID_IUriContainer');},
    IUriContainer_GetIUri_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriContainer), 'This'], [Pointer(Pointer(T.IUri)), 'ppIUri']], [['stdcall']]))('IUriContainer_GetIUri_Proxy');},
    IUriContainer_GetIUri_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriContainer_GetIUri_Stub');},
    IID_IUriBuilder: function() {return (T.GUID)('IID_IUriBuilder');},
    IUriBuilder_CreateUriSimple_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.DWORD, 'dwAllowEncodingPropertyMask'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUri)), 'ppIUri']], [['stdcall']]))('IUriBuilder_CreateUriSimple_Proxy');},
    IUriBuilder_CreateUriSimple_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_CreateUriSimple_Stub');},
    IUriBuilder_CreateUri_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.DWORD, 'dwCreateFlags'], [T.DWORD, 'dwAllowEncodingPropertyMask'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUri)), 'ppIUri']], [['stdcall']]))('IUriBuilder_CreateUri_Proxy');},
    IUriBuilder_CreateUri_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_CreateUri_Stub');},
    IUriBuilder_CreateUriWithFlags_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.DWORD, 'dwCreateFlags'], [T.DWORD, 'dwUriBuilderFlags'], [T.DWORD, 'dwAllowEncodingPropertyMask'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUri)), 'ppIUri']], [['stdcall']]))('IUriBuilder_CreateUriWithFlags_Proxy');},
    IUriBuilder_CreateUriWithFlags_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_CreateUriWithFlags_Stub');},
    IUriBuilder_GetIUri_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(Pointer(T.IUri)), 'ppIUri']], [['stdcall']]))('IUriBuilder_GetIUri_Proxy');},
    IUriBuilder_GetIUri_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_GetIUri_Stub');},
    IUriBuilder_SetIUri_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.IUri), 'pIUri']], [['stdcall']]))('IUriBuilder_SetIUri_Proxy');},
    IUriBuilder_SetIUri_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_SetIUri_Stub');},
    IUriBuilder_GetFragment_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchFragment'], [Pointer(T.LPCWSTR), 'ppwzFragment']], [['stdcall']]))('IUriBuilder_GetFragment_Proxy');},
    IUriBuilder_GetFragment_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_GetFragment_Stub');},
    IUriBuilder_GetHost_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchHost'], [Pointer(T.LPCWSTR), 'ppwzHost']], [['stdcall']]))('IUriBuilder_GetHost_Proxy');},
    IUriBuilder_GetHost_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_GetHost_Stub');},
    IUriBuilder_GetPassword_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchPassword'], [Pointer(T.LPCWSTR), 'ppwzPassword']], [['stdcall']]))('IUriBuilder_GetPassword_Proxy');},
    IUriBuilder_GetPassword_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_GetPassword_Stub');},
    IUriBuilder_GetPath_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchPath'], [Pointer(T.LPCWSTR), 'ppwzPath']], [['stdcall']]))('IUriBuilder_GetPath_Proxy');},
    IUriBuilder_GetPath_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_GetPath_Stub');},
    IUriBuilder_GetPort_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.BOOL), 'pfHasPort'], [Pointer(T.DWORD), 'pdwPort']], [['stdcall']]))('IUriBuilder_GetPort_Proxy');},
    IUriBuilder_GetPort_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_GetPort_Stub');},
    IUriBuilder_GetQuery_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchQuery'], [Pointer(T.LPCWSTR), 'ppwzQuery']], [['stdcall']]))('IUriBuilder_GetQuery_Proxy');},
    IUriBuilder_GetQuery_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_GetQuery_Stub');},
    IUriBuilder_GetSchemeName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchSchemeName'], [Pointer(T.LPCWSTR), 'ppwzSchemeName']], [['stdcall']]))('IUriBuilder_GetSchemeName_Proxy');},
    IUriBuilder_GetSchemeName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_GetSchemeName_Stub');},
    IUriBuilder_GetUserName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchUserName'], [Pointer(T.LPCWSTR), 'ppwzUserName']], [['stdcall']]))('IUriBuilder_GetUserName_Proxy');},
    IUriBuilder_GetUserName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_GetUserName_Stub');},
    IUriBuilder_SetFragment_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']], [['stdcall']]))('IUriBuilder_SetFragment_Proxy');},
    IUriBuilder_SetFragment_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_SetFragment_Stub');},
    IUriBuilder_SetHost_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']], [['stdcall']]))('IUriBuilder_SetHost_Proxy');},
    IUriBuilder_SetHost_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_SetHost_Stub');},
    IUriBuilder_SetPassword_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']], [['stdcall']]))('IUriBuilder_SetPassword_Proxy');},
    IUriBuilder_SetPassword_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_SetPassword_Stub');},
    IUriBuilder_SetPath_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']], [['stdcall']]))('IUriBuilder_SetPath_Proxy');},
    IUriBuilder_SetPath_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_SetPath_Stub');},
    IUriBuilder_SetPort_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.BOOL, 'fHasPort'], [T.DWORD, 'dwNewValue']], [['stdcall']]))('IUriBuilder_SetPort_Proxy');},
    IUriBuilder_SetPort_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_SetPort_Stub');},
    IUriBuilder_SetQuery_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']], [['stdcall']]))('IUriBuilder_SetQuery_Proxy');},
    IUriBuilder_SetQuery_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_SetQuery_Stub');},
    IUriBuilder_SetSchemeName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']], [['stdcall']]))('IUriBuilder_SetSchemeName_Proxy');},
    IUriBuilder_SetSchemeName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_SetSchemeName_Stub');},
    IUriBuilder_SetUserName_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']], [['stdcall']]))('IUriBuilder_SetUserName_Proxy');},
    IUriBuilder_SetUserName_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_SetUserName_Stub');},
    IUriBuilder_RemoveProperties_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.DWORD, 'dwPropertyMask']], [['stdcall']]))('IUriBuilder_RemoveProperties_Proxy');},
    IUriBuilder_RemoveProperties_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_RemoveProperties_Stub');},
    IUriBuilder_HasBeenModified_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.BOOL), 'pfModified']], [['stdcall']]))('IUriBuilder_HasBeenModified_Proxy');},
    IUriBuilder_HasBeenModified_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilder_HasBeenModified_Stub');},
    CreateIUriBuilder: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri)], [T.DWORD], [T.DWORD_PTR], [Pointer(Pointer(T.IUriBuilder))]], [['stdcall']]))('CreateIUriBuilder');},
    IID_IUriBuilderFactory: function() {return (T.GUID)('IID_IUriBuilderFactory');},
    IUriBuilderFactory_CreateIUriBuilder_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilderFactory), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUriBuilder)), 'ppIUriBuilder']], [['stdcall']]))('IUriBuilderFactory_CreateIUriBuilder_Proxy');},
    IUriBuilderFactory_CreateIUriBuilder_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilderFactory_CreateIUriBuilder_Stub');},
    IUriBuilderFactory_CreateInitializedIUriBuilder_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IUriBuilderFactory), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUriBuilder)), 'ppIUriBuilder']], [['stdcall']]))('IUriBuilderFactory_CreateInitializedIUriBuilder_Proxy');},
    IUriBuilderFactory_CreateInitializedIUriBuilder_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IUriBuilderFactory_CreateInitializedIUriBuilder_Stub');},
    IID_IInternetProtocolEx: function() {return (T.GUID)('IID_IInternetProtocolEx');},
    IInternetProtocolEx_StartEx_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [Pointer(T.IUri), 'pUri'], [Pointer(T.IInternetProtocolSink), 'pOIProtSink'], [Pointer(T.IInternetBindInfo), 'pOIBindInfo'], [T.DWORD, 'grfPI'], [Pointer(T.HANDLE), 'dwReserved']], [['stdcall']]))('IInternetProtocolEx_StartEx_Proxy');},
    IInternetProtocolEx_StartEx_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IInternetProtocolEx_StartEx_Stub');},
    GUID_CUSTOM_CONFIRMOBJECTSAFETY: function() {return (T.GUID)('GUID_CUSTOM_CONFIRMOBJECTSAFETY');},
    CLSID_InternetSecurityManager: function() {return (T.GUID)('CLSID_InternetSecurityManager');},
    CLSID_InternetZoneManager: function() {return (T.GUID)('CLSID_InternetZoneManager');},
    IID_IAsyncMoniker: function() {return (T.GUID)('IID_IAsyncMoniker');},
    IID_IAsyncBindCtx: function() {return (T.GUID)('IID_IAsyncBindCtx');},
    CLSID_StdURLMoniker: function() {return (T.GUID)('CLSID_StdURLMoniker');},
    CLSID_DeCompMimeFilter: function() {return (T.GUID)('CLSID_DeCompMimeFilter');},
    CLSID_CdlProtocol: function() {return (T.GUID)('CLSID_CdlProtocol');},
    CLSID_FileProtocol: function() {return (T.GUID)('CLSID_FileProtocol');},
    CLSID_FtpProtocol: function() {return (T.GUID)('CLSID_FtpProtocol');},
    CLSID_GopherProtocol: function() {return (T.GUID)('CLSID_GopherProtocol');},
    CLSID_HttpProtocol: function() {return (T.GUID)('CLSID_HttpProtocol');},
    CLSID_HttpSProtocol: function() {return (T.GUID)('CLSID_HttpSProtocol');},
    CLSID_MkProtocol: function() {return (T.GUID)('CLSID_MkProtocol');},
    CoGetClassObjectFromURL: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID)], [T.LPCWSTR], [T.DWORD], [T.DWORD], [T.LPCWSTR], [T.LPBINDCTX], [T.DWORD], [T.LPVOID], [Pointer(T.IID)], [Pointer(T.LPVOID)]], [['stdcall']]))('CoGetClassObjectFromURL');},
    CreateURLMoniker: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'pmkContext'], [T.LPCWSTR, 'szURL'], [Pointer(Pointer(T.IMoniker)), 'ppmk']], [['stdcall']]))('CreateURLMoniker');},
    CreateURLMonikerEx: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker)], [T.LPCWSTR], [Pointer(Pointer(T.IMoniker))], [T.DWORD]], [['stdcall']]))('CreateURLMonikerEx');},
    CreateURLMonikerEx2: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker)], [Pointer(T.IUri)], [Pointer(Pointer(T.IMoniker))], [T.DWORD]], [['stdcall']]))('CreateURLMonikerEx2');},
    RegisterBindStatusCallback: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IBindStatusCallback), 'pbsc'], [Pointer(Pointer(T.IBindStatusCallback)), 'ppbsc'], [T.DWORD, 'dwReserved']], [['stdcall']]))('RegisterBindStatusCallback');},
    CompareSecurityIds: function() {return (Fn(T.HRESULT, [[Pointer(T.BYTE)], [T.DWORD], [Pointer(T.BYTE)], [T.DWORD], [T.DWORD]], [['stdcall']]))('CompareSecurityIds');},
    URLDownloadToFileA: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.LPBINDSTATUSCALLBACK]], [['stdcall']]))('URLDownloadToFileA');},
    URLDownloadToFileW: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.LPBINDSTATUSCALLBACK]], [['stdcall']]))('URLDownloadToFileW');},
    URLDownloadToCacheFileA: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCSTR], [T.LPSTR], [T.DWORD], [T.DWORD], [T.LPBINDSTATUSCALLBACK]], [['stdcall']]))('URLDownloadToCacheFileA');},
    URLDownloadToCacheFileW: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCWSTR], [T.LPWSTR], [T.DWORD], [T.DWORD], [T.LPBINDSTATUSCALLBACK]], [['stdcall']]))('URLDownloadToCacheFileW');},
    CoInternetGetSession: function() {return (Fn(T.HRESULT, [[T.DWORD], [Pointer(Pointer(T.IInternetSession))], [T.DWORD]], [['stdcall']]))('CoInternetGetSession');},
    MkParseDisplayNameEx: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx)], [T.LPCWSTR], [Pointer(T.ULONG)], [Pointer(Pointer(T.IMoniker))]], [['stdcall']]))('MkParseDisplayNameEx');},
    IsAsyncMoniker: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker), 'pmk']], [['stdcall']]))('IsAsyncMoniker');},
    CreateAsyncBindCtx: function() {return (Fn(T.HRESULT, [[T.DWORD], [Pointer(T.IBindStatusCallback)], [Pointer(T.IEnumFORMATETC)], [Pointer(Pointer(T.IBindCtx))]], [['stdcall']]))('CreateAsyncBindCtx');},
    CreateAsyncBindCtxEx: function() {return (Fn(T.HRESULT, [[Pointer(T.IBindCtx)], [T.DWORD], [Pointer(T.IBindStatusCallback)], [Pointer(T.IEnumFORMATETC)], [Pointer(Pointer(T.IBindCtx))], [T.DWORD]], [['stdcall']]))('CreateAsyncBindCtxEx');},
    CoInternetCreateSecurityManager: function() {return (Fn(T.HRESULT, [[Pointer(T.IServiceProvider)], [Pointer(Pointer(T.IInternetSecurityManager))], [T.DWORD]], [['stdcall']]))('CoInternetCreateSecurityManager');},
    CoInternetCombineUrl: function() {return (Fn(T.HRESULT, [[T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.LPWSTR], [T.DWORD], [Pointer(T.DWORD)], [T.DWORD]], [['stdcall']]))('CoInternetCombineUrl');},
    CoInternetCombineUrlEx: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri)], [T.LPCWSTR], [T.DWORD], [Pointer(Pointer(T.IUri))], [T.DWORD_PTR]], [['stdcall']]))('CoInternetCombineUrlEx');},
    CoInternetCompareUrl: function() {return (Fn(T.HRESULT, [[T.LPCWSTR], [T.LPCWSTR], [T.DWORD]], [['stdcall']]))('CoInternetCompareUrl');},
    CoInternetCombineIUri: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri)], [Pointer(T.IUri)], [T.DWORD], [Pointer(Pointer(T.IUri))], [T.DWORD_PTR]], [['stdcall']]))('CoInternetCombineIUri');},
    CoInternetCreateZoneManager: function() {return (Fn(T.HRESULT, [[Pointer(T.IServiceProvider)], [Pointer(Pointer(T.IInternetZoneManager))], [T.DWORD]], [['stdcall']]))('CoInternetCreateZoneManager');},
    CoInternetParseUrl: function() {return (Fn(T.HRESULT, [[T.LPCWSTR], [T.PARSEACTION], [T.DWORD], [T.LPWSTR], [T.DWORD], [Pointer(T.DWORD)], [T.DWORD]], [['stdcall']]))('CoInternetParseUrl');},
    CoInternetParseIUri: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri)], [T.PARSEACTION], [T.DWORD], [T.LPWSTR], [T.DWORD], [Pointer(T.DWORD)], [T.DWORD_PTR]], [['stdcall']]))('CoInternetParseIUri');},
    CoInternetQueryInfo: function() {return (Fn(T.HRESULT, [[T.LPCWSTR], [T.QUERYOPTION], [T.DWORD], [T.LPVOID], [T.DWORD], [Pointer(T.DWORD)], [T.DWORD]], [['stdcall']]))('CoInternetQueryInfo');},
    CoInternetSetFeatureEnabled: function() {return (Fn(T.HRESULT, [[T.INTERNETFEATURELIST], [T.DWORD], [T.BOOL]], [['stdcall']]))('CoInternetSetFeatureEnabled');},
    CoInternetGetSecurityUrl: function() {return (Fn(T.HRESULT, [[T.LPCWSTR], [Pointer(T.LPWSTR)], [T.PSUACTION], [T.DWORD]], [['stdcall']]))('CoInternetGetSecurityUrl');},
    CoInternetGetSecurityUrlEx: function() {return (Fn(T.HRESULT, [[Pointer(T.IUri)], [Pointer(Pointer(T.IUri))], [T.PSUACTION], [T.DWORD_PTR]], [['stdcall']]))('CoInternetGetSecurityUrlEx');},
    CreateFormatEnumerator: function() {return (Fn(T.HRESULT, [[T.UINT], [Pointer(T.FORMATETC)], [Pointer(Pointer(T.IEnumFORMATETC))]], [['stdcall']]))('CreateFormatEnumerator');},
    GetSoftwareUpdateInfo: function() {return (Fn(T.HRESULT, [[T.LPCWSTR, 'szDistUnit'], [T.LPSOFTDISTINFO, 'psdi']], [['stdcall']]))('GetSoftwareUpdateInfo');},
    FaultInIEFeature: function() {return (Fn(T.HRESULT, [[T.HWND], [Pointer(T.uCLSSPEC)], [Pointer(T.QUERYCONTEXT)], [T.DWORD]], [['stdcall']]))('FaultInIEFeature');},
    FindMimeFromData: function() {return (Fn(T.HRESULT, [[T.LPBC], [T.LPCWSTR], [T.LPVOID], [T.DWORD], [T.LPCWSTR], [T.DWORD], [Pointer(T.LPWSTR)], [T.DWORD]], [['stdcall']]))('FindMimeFromData');},
    GetClassFileOrMime: function() {return (Fn(T.HRESULT, [[T.LPBC], [T.LPCWSTR], [T.LPVOID], [T.DWORD], [T.LPCWSTR], [T.DWORD], [Pointer(T.CLSID)]], [['stdcall']]))('GetClassFileOrMime');},
    HlinkGoBack: function() {return (Fn(T.HRESULT, [[Pointer(T.IUnknown)]], [['stdcall']]))('HlinkGoBack');},
    HlinkGoForward: function() {return (Fn(T.HRESULT, [[Pointer(T.IUnknown)]], [['stdcall']]))('HlinkGoForward');},
    HlinkNavigateMoniker: function() {return (Fn(T.HRESULT, [[Pointer(T.IUnknown)], [Pointer(T.IMoniker)]], [['stdcall']]))('HlinkNavigateMoniker');},
    HlinkNavigateString: function() {return (Fn(T.HRESULT, [[Pointer(T.IUnknown)], [T.LPCWSTR]], [['stdcall']]))('HlinkNavigateString');},
    HlinkSimpleNavigateToMoniker: function() {return (Fn(T.HRESULT, [[Pointer(T.IMoniker)], [T.LPCWSTR], [T.LPCWSTR], [Pointer(T.IUnknown)], [Pointer(T.IBindCtx)], [Pointer(T.IBindStatusCallback)], [T.DWORD], [T.DWORD]], [['stdcall']]))('HlinkSimpleNavigateToMoniker');},
    HlinkSimpleNavigateToString: function() {return (Fn(T.HRESULT, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [Pointer(T.IUnknown)], [Pointer(T.IBindCtx)], [Pointer(T.IBindStatusCallback)], [T.DWORD], [T.DWORD]], [['stdcall']]))('HlinkSimpleNavigateToString');},
    IsValidURL: function() {return (Fn(T.HRESULT, [[T.LPBC], [T.LPCWSTR], [T.DWORD]], [['stdcall']]))('IsValidURL');},
    ObtainUserAgentString: function() {return (Fn(T.HRESULT, [[T.DWORD], [T.LPSTR], [Pointer(T.DWORD)]], [['stdcall']]))('ObtainUserAgentString');},
    RegisterFormatEnumerator: function() {return (Fn(T.HRESULT, [[T.LPBC], [Pointer(T.IEnumFORMATETC)], [T.DWORD]], [['stdcall']]))('RegisterFormatEnumerator');},
    RevokeFormatEnumerator: function() {return (Fn(T.HRESULT, [[T.LPBC], [Pointer(T.IEnumFORMATETC)]], [['stdcall']]))('RevokeFormatEnumerator');},
    RevokeBindStatusCallback: function() {return (Fn(T.HRESULT, [[T.LPBC], [Pointer(T.IBindStatusCallback)]], [['stdcall']]))('RevokeBindStatusCallback');},
    CopyStgMedium: function() {return (Fn(T.HRESULT, [[Pointer(T.STGMEDIUM)], [Pointer(T.STGMEDIUM)]], [['stdcall']]))('CopyStgMedium');},
    ReleaseBindInfo: function() {return (Fn(null, [[Pointer(T.BINDINFO)]], [['stdcall']]))('ReleaseBindInfo');},
    UrlMkGetSessionOption: function() {return (Fn(T.HRESULT, [[T.DWORD], [T.LPVOID], [T.DWORD], [Pointer(T.DWORD)], [T.DWORD]], [['stdcall']]))('UrlMkGetSessionOption');},
    UrlMkSetSessionOption: function() {return (Fn(T.HRESULT, [[T.DWORD], [T.LPVOID], [T.DWORD], [T.DWORD]], [['stdcall']]))('UrlMkSetSessionOption');},
    URLOpenStreamA: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCSTR], [T.DWORD], [T.LPBINDSTATUSCALLBACK]], [['stdcall']]))('URLOpenStreamA');},
    URLOpenStreamW: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCWSTR], [T.DWORD], [T.LPBINDSTATUSCALLBACK]], [['stdcall']]))('URLOpenStreamW');},
    URLOpenPullStreamA: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCSTR], [T.DWORD], [T.LPBINDSTATUSCALLBACK]], [['stdcall']]))('URLOpenPullStreamA');},
    URLOpenPullStreamW: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCWSTR], [T.DWORD], [T.LPBINDSTATUSCALLBACK]], [['stdcall']]))('URLOpenPullStreamW');},
    URLOpenBlockingStreamA: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCSTR], [Pointer(T.LPSTREAM)], [T.DWORD], [T.LPBINDSTATUSCALLBACK]], [['stdcall']]))('URLOpenBlockingStreamA');},
    URLOpenBlockingStreamW: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCWSTR], [Pointer(T.LPSTREAM)], [T.DWORD], [T.LPBINDSTATUSCALLBACK]], [['stdcall']]))('URLOpenBlockingStreamW');},
    IsLoggingEnabledA: function() {return (Fn(T.BOOL, [[T.LPCSTR]], [['stdcall']]))('IsLoggingEnabledA');},
    IsLoggingEnabledW: function() {return (Fn(T.BOOL, [[T.LPCWSTR]], [['stdcall']]))('IsLoggingEnabledW');},
    IID_IPropertyStorage: function() {return (T.GUID)('IID_IPropertyStorage');},
    IPropertyStorage_ReadMultiple_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpspec'], [Pointer(T.PROPSPEC), 'rgpspec'], [Pointer(T.PROPVARIANT), 'rgpropvar']], [['stdcall']]))('IPropertyStorage_ReadMultiple_Proxy');},
    IPropertyStorage_ReadMultiple_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertyStorage_ReadMultiple_Stub');},
    IPropertyStorage_WriteMultiple_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpspec'], [Pointer(T.PROPSPEC), 'rgpspec'], [Pointer(T.PROPVARIANT), 'rgpropvar'], [T.PROPID, 'propidNameFirst']], [['stdcall']]))('IPropertyStorage_WriteMultiple_Proxy');},
    IPropertyStorage_WriteMultiple_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertyStorage_WriteMultiple_Stub');},
    IPropertyStorage_DeleteMultiple_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpspec'], [Pointer(T.PROPSPEC), 'rgpspec']], [['stdcall']]))('IPropertyStorage_DeleteMultiple_Proxy');},
    IPropertyStorage_DeleteMultiple_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertyStorage_DeleteMultiple_Stub');},
    IPropertyStorage_ReadPropertyNames_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpropid'], [Pointer(T.PROPID), 'rgpropid'], [Pointer(T.LPOLESTR), 'rglpwstrName']], [['stdcall']]))('IPropertyStorage_ReadPropertyNames_Proxy');},
    IPropertyStorage_ReadPropertyNames_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertyStorage_ReadPropertyNames_Stub');},
    IPropertyStorage_WritePropertyNames_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpropid'], [Pointer(T.PROPID), 'rgpropid'], [Pointer(T.LPOLESTR), 'rglpwstrName']], [['stdcall']]))('IPropertyStorage_WritePropertyNames_Proxy');},
    IPropertyStorage_WritePropertyNames_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertyStorage_WritePropertyNames_Stub');},
    IPropertyStorage_DeletePropertyNames_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpropid'], [Pointer(T.PROPID), 'rgpropid']], [['stdcall']]))('IPropertyStorage_DeletePropertyNames_Proxy');},
    IPropertyStorage_DeletePropertyNames_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertyStorage_DeletePropertyNames_Stub');},
    IPropertyStorage_Commit_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.DWORD, 'grfCommitFlags']], [['stdcall']]))('IPropertyStorage_Commit_Proxy');},
    IPropertyStorage_Commit_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertyStorage_Commit_Stub');},
    IPropertyStorage_Revert_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This']], [['stdcall']]))('IPropertyStorage_Revert_Proxy');},
    IPropertyStorage_Revert_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertyStorage_Revert_Stub');},
    IPropertyStorage_Enum_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(Pointer(T.IEnumSTATPROPSTG)), 'ppenum']], [['stdcall']]))('IPropertyStorage_Enum_Proxy');},
    IPropertyStorage_Enum_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertyStorage_Enum_Stub');},
    IPropertyStorage_SetTimes_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(T.FILETIME), 'pctime'], [Pointer(T.FILETIME), 'patime'], [Pointer(T.FILETIME), 'pmtime']], [['stdcall']]))('IPropertyStorage_SetTimes_Proxy');},
    IPropertyStorage_SetTimes_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertyStorage_SetTimes_Stub');},
    IPropertyStorage_SetClass_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(T.CLSID), 'clsid']], [['stdcall']]))('IPropertyStorage_SetClass_Proxy');},
    IPropertyStorage_SetClass_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertyStorage_SetClass_Stub');},
    IPropertyStorage_Stat_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(T.STATPROPSETSTG), 'statpsstg']], [['stdcall']]))('IPropertyStorage_Stat_Proxy');},
    IPropertyStorage_Stat_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertyStorage_Stat_Stub');},
    IID_IPropertySetStorage: function() {return (T.GUID)('IID_IPropertySetStorage');},
    IPropertySetStorage_Create_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(T.FMTID), 'rfmtid'], [Pointer(T.CLSID), 'pclsid'], [T.DWORD, 'grfFlags'], [T.DWORD, 'grfMode'], [Pointer(Pointer(T.IPropertyStorage)), 'ppprstg']], [['stdcall']]))('IPropertySetStorage_Create_Proxy');},
    IPropertySetStorage_Create_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertySetStorage_Create_Stub');},
    IPropertySetStorage_Open_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(T.FMTID), 'rfmtid'], [T.DWORD, 'grfMode'], [Pointer(Pointer(T.IPropertyStorage)), 'ppprstg']], [['stdcall']]))('IPropertySetStorage_Open_Proxy');},
    IPropertySetStorage_Open_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertySetStorage_Open_Stub');},
    IPropertySetStorage_Delete_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(T.FMTID), 'rfmtid']], [['stdcall']]))('IPropertySetStorage_Delete_Proxy');},
    IPropertySetStorage_Delete_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertySetStorage_Delete_Stub');},
    IPropertySetStorage_Enum_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(Pointer(T.IEnumSTATPROPSETSTG)), 'ppenum']], [['stdcall']]))('IPropertySetStorage_Enum_Proxy');},
    IPropertySetStorage_Enum_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IPropertySetStorage_Enum_Stub');},
    IID_IEnumSTATPROPSTG: function() {return (T.GUID)('IID_IEnumSTATPROPSTG');},
    IEnumSTATPROPSTG_RemoteNext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATPROPSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumSTATPROPSTG_RemoteNext_Proxy');},
    IEnumSTATPROPSTG_RemoteNext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumSTATPROPSTG_RemoteNext_Stub');},
    IEnumSTATPROPSTG_Skip_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [T.ULONG, 'celt']], [['stdcall']]))('IEnumSTATPROPSTG_Skip_Proxy');},
    IEnumSTATPROPSTG_Skip_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumSTATPROPSTG_Skip_Stub');},
    IEnumSTATPROPSTG_Reset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This']], [['stdcall']]))('IEnumSTATPROPSTG_Reset_Proxy');},
    IEnumSTATPROPSTG_Reset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumSTATPROPSTG_Reset_Stub');},
    IEnumSTATPROPSTG_Clone_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [Pointer(Pointer(T.IEnumSTATPROPSTG)), 'ppenum']], [['stdcall']]))('IEnumSTATPROPSTG_Clone_Proxy');},
    IEnumSTATPROPSTG_Clone_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumSTATPROPSTG_Clone_Stub');},
    IEnumSTATPROPSTG_Next_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATPROPSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumSTATPROPSTG_Next_Proxy');},
    IEnumSTATPROPSTG_Next_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATPROPSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumSTATPROPSTG_Next_Stub');},
    IID_IEnumSTATPROPSETSTG: function() {return (T.GUID)('IID_IEnumSTATPROPSETSTG');},
    IEnumSTATPROPSETSTG_RemoteNext_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATPROPSETSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumSTATPROPSETSTG_RemoteNext_Proxy');},
    IEnumSTATPROPSETSTG_RemoteNext_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumSTATPROPSETSTG_RemoteNext_Stub');},
    IEnumSTATPROPSETSTG_Skip_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [T.ULONG, 'celt']], [['stdcall']]))('IEnumSTATPROPSETSTG_Skip_Proxy');},
    IEnumSTATPROPSETSTG_Skip_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumSTATPROPSETSTG_Skip_Stub');},
    IEnumSTATPROPSETSTG_Reset_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This']], [['stdcall']]))('IEnumSTATPROPSETSTG_Reset_Proxy');},
    IEnumSTATPROPSETSTG_Reset_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumSTATPROPSETSTG_Reset_Stub');},
    IEnumSTATPROPSETSTG_Clone_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [Pointer(Pointer(T.IEnumSTATPROPSETSTG)), 'ppenum']], [['stdcall']]))('IEnumSTATPROPSETSTG_Clone_Proxy');},
    IEnumSTATPROPSETSTG_Clone_Stub: function() {return (Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']], [['stdcall']]))('IEnumSTATPROPSETSTG_Clone_Stub');},
    IEnumSTATPROPSETSTG_Next_Proxy: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATPROPSETSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumSTATPROPSETSTG_Next_Proxy');},
    IEnumSTATPROPSETSTG_Next_Stub: function() {return (Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATPROPSETSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']], [['stdcall']]))('IEnumSTATPROPSETSTG_Next_Stub');},
    FreePropVariantArray: function() {return (Fn(T.HRESULT, [[T.ULONG], [Pointer(T.PROPVARIANT)]], [['stdcall']]))('FreePropVariantArray');},
    PropVariantClear: function() {return (Fn(T.HRESULT, [[Pointer(T.PROPVARIANT)]], [['stdcall']]))('PropVariantClear');},
    PropVariantCopy: function() {return (Fn(T.HRESULT, [[Pointer(T.PROPVARIANT)], [Pointer(T.PROPVARIANT)]], [['stdcall']]))('PropVariantCopy');},
    StgCreatePropStg: function() {return (Fn(T.HRESULT, [[Pointer(T.IUnknown)], [Pointer(T.FMTID)], [Pointer(T.CLSID)], [T.DWORD], [T.DWORD], [Pointer(Pointer(T.IPropertyStorage))]], [['stdcall']]))('StgCreatePropStg');},
    StgOpenPropStg: function() {return (Fn(T.HRESULT, [[Pointer(T.IUnknown)], [Pointer(T.FMTID)], [T.DWORD], [T.DWORD], [Pointer(Pointer(T.IPropertyStorage))]], [['stdcall']]))('StgOpenPropStg');},
    StgCreatePropSetStg: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage)], [T.DWORD], [Pointer(Pointer(T.IPropertySetStorage))]], [['stdcall']]))('StgCreatePropSetStg');},
    FmtIdToPropStgName: function() {return (Fn(T.HRESULT, [[Pointer(T.FMTID)], [T.LPOLESTR]], [['stdcall']]))('FmtIdToPropStgName');},
    PropStgNameToFmtId: function() {return (Fn(T.HRESULT, [[T.LPOLESTR], [Pointer(T.FMTID)]], [['stdcall']]))('PropStgNameToFmtId');},
    LPSAFEARRAY_UserSize: function() {return (Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.LPSAFEARRAY)]], [['stdcall']]))('LPSAFEARRAY_UserSize');},
    LPSAFEARRAY_UserMarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.LPSAFEARRAY)]], [['stdcall']]))('LPSAFEARRAY_UserMarshal');},
    LPSAFEARRAY_UserUnmarshal: function() {return (Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.LPSAFEARRAY)]], [['stdcall']]))('LPSAFEARRAY_UserUnmarshal');},
    LPSAFEARRAY_UserFree: function() {return (Fn(null, [[Pointer(T.ULONG)], [Pointer(T.LPSAFEARRAY)]], [['stdcall']]))('LPSAFEARRAY_UserFree');},
    IID_StdOle: function() {return (T.GUID)('IID_StdOle');},
    OaBuildVersion: function() {return (Fn(T.ULONG, [[null]], [['stdcall']]))('OaBuildVersion');},
    SysAllocString: function() {return (Fn(T.BSTR, [[Pointer(T.OLECHAR)]], [['stdcall']]))('SysAllocString');},
    SysAllocStringByteLen: function() {return (Fn(T.BSTR, [[T.LPCSTR], [T.UINT]], [['stdcall']]))('SysAllocStringByteLen');},
    SysAllocStringLen: function() {return (Fn(T.BSTR, [[Pointer(T.OLECHAR)], [T.UINT]], [['stdcall']]))('SysAllocStringLen');},
    SysFreeString: function() {return (Fn(null, [[T.BSTR]], [['stdcall']]))('SysFreeString');},
    SysReAllocString: function() {return (Fn(T.INT, [[T.LPBSTR], [Pointer(T.OLECHAR)]], [['stdcall']]))('SysReAllocString');},
    SysReAllocStringLen: function() {return (Fn(T.i32, [[Pointer(T.BSTR)], [Pointer(T.OLECHAR)], [T.UINT]], [['stdcall']]))('SysReAllocStringLen');},
    SysStringByteLen: function() {return (Fn(T.UINT, [[T.BSTR]], [['stdcall']]))('SysStringByteLen');},
    SysStringLen: function() {return (Fn(T.UINT, [[T.BSTR]], [['stdcall']]))('SysStringLen');},
    SetErrorInfo: function() {return (Fn(T.HRESULT, [[T.ULONG], [Pointer(T.IErrorInfo)]], [['stdcall']]))('SetErrorInfo');},
    GetErrorInfo: function() {return (Fn(T.HRESULT, [[T.ULONG], [Pointer(Pointer(T.IErrorInfo))]], [['stdcall']]))('GetErrorInfo');},
    CreateErrorInfo: function() {return (Fn(T.HRESULT, [[Pointer(Pointer(T.ICreateErrorInfo))]], [['stdcall']]))('CreateErrorInfo');},
    SafeArrayCreate: function() {return (Fn(Pointer(T.SAFEARRAY), [[T.VARTYPE], [T.UINT], [Pointer(T.SAFEARRAYBOUND)]], [['stdcall']]))('SafeArrayCreate');},
    SafeArrayCreateEx: function() {return (Fn(Pointer(T.SAFEARRAY), [[T.VARTYPE], [T.UINT], [Pointer(T.SAFEARRAYBOUND)], [T.LPVOID]], [['stdcall']]))('SafeArrayCreateEx');},
    SafeArrayCreateVector: function() {return (Fn(Pointer(T.SAFEARRAY), [[T.VARTYPE], [T.LONG], [T.ULONG]], [['stdcall']]))('SafeArrayCreateVector');},
    SafeArrayCreateVectorEx: function() {return (Fn(Pointer(T.SAFEARRAY), [[T.VARTYPE], [T.LONG], [T.ULONG], [T.LPVOID]], [['stdcall']]))('SafeArrayCreateVectorEx');},
    SafeArrayAllocDescriptor: function() {return (Fn(T.HRESULT, [[T.UINT], [Pointer(Pointer(T.SAFEARRAY))]], [['stdcall']]))('SafeArrayAllocDescriptor');},
    SafeArrayAllocDescriptorEx: function() {return (Fn(T.HRESULT, [[T.VARTYPE], [T.UINT], [Pointer(Pointer(T.SAFEARRAY))]], [['stdcall']]))('SafeArrayAllocDescriptorEx');},
    SafeArrayAllocData: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)]], [['stdcall']]))('SafeArrayAllocData');},
    SafeArrayDestroyDescriptor: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)]], [['stdcall']]))('SafeArrayDestroyDescriptor');},
    SafeArrayPutElement: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.LONG)], [Pointer(null)]], [['stdcall']]))('SafeArrayPutElement');},
    SafeArrayGetElement: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.LONG)], [Pointer(null)]], [['stdcall']]))('SafeArrayGetElement');},
    SafeArrayLock: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)]], [['stdcall']]))('SafeArrayLock');},
    SafeArrayUnlock: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)]], [['stdcall']]))('SafeArrayUnlock');},
    SafeArrayGetUBound: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [T.UINT], [Pointer(T.LONG)]], [['stdcall']]))('SafeArrayGetUBound');},
    SafeArrayGetLBound: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [T.UINT], [Pointer(T.LONG)]], [['stdcall']]))('SafeArrayGetLBound');},
    SafeArrayGetDim: function() {return (Fn(T.UINT, [[Pointer(T.SAFEARRAY)]], [['stdcall']]))('SafeArrayGetDim');},
    SafeArrayGetElemsize: function() {return (Fn(T.UINT, [[Pointer(T.SAFEARRAY)]], [['stdcall']]))('SafeArrayGetElemsize');},
    SafeArrayGetVartype: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.VARTYPE)]], [['stdcall']]))('SafeArrayGetVartype');},
    SafeArrayAccessData: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(Pointer(null))]], [['stdcall']]))('SafeArrayAccessData');},
    SafeArrayUnaccessData: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)]], [['stdcall']]))('SafeArrayUnaccessData');},
    SafeArrayPtrOfIndex: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.LONG)], [Pointer(Pointer(null))]], [['stdcall']]))('SafeArrayPtrOfIndex');},
    SafeArrayCopyData: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.SAFEARRAY)]], [['stdcall']]))('SafeArrayCopyData');},
    SafeArrayDestroyData: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)]], [['stdcall']]))('SafeArrayDestroyData');},
    SafeArrayDestroy: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)]], [['stdcall']]))('SafeArrayDestroy');},
    SafeArrayCopy: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(Pointer(T.SAFEARRAY))]], [['stdcall']]))('SafeArrayCopy');},
    SafeArrayRedim: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.SAFEARRAYBOUND)]], [['stdcall']]))('SafeArrayRedim');},
    SafeArraySetRecordInfo: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.IRecordInfo)]], [['stdcall']]))('SafeArraySetRecordInfo');},
    SafeArrayGetRecordInfo: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(Pointer(T.IRecordInfo))]], [['stdcall']]))('SafeArrayGetRecordInfo');},
    SafeArraySetIID: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.GUID)]], [['stdcall']]))('SafeArraySetIID');},
    SafeArrayGetIID: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.GUID)]], [['stdcall']]))('SafeArrayGetIID');},
    VectorFromBstr: function() {return (Fn(T.HRESULT, [[T.BSTR], [Pointer(Pointer(T.SAFEARRAY))]], [['stdcall']]))('VectorFromBstr');},
    BstrFromVector: function() {return (Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.BSTR)]], [['stdcall']]))('BstrFromVector');},
    RegisterActiveObject: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN], [Pointer(T.CLSID)], [T.DWORD], [T.LPDWORD]], [['stdcall']]))('RegisterActiveObject');},
    RevokeActiveObject: function() {return (Fn(T.HRESULT, [[T.DWORD], [T.LPVOID]], [['stdcall']]))('RevokeActiveObject');},
    GetActiveObject: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID)], [T.LPVOID], [Pointer(T.LPUNKNOWN)]], [['stdcall']]))('GetActiveObject');},
    GetRecordInfoFromTypeInfo: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo)], [Pointer(Pointer(T.IRecordInfo))]], [['stdcall']]))('GetRecordInfoFromTypeInfo');},
    GetRecordInfoFromGuids: function() {return (Fn(T.HRESULT, [[Pointer(T.GUID)], [T.ULONG], [T.ULONG], [T.LCID], [Pointer(T.GUID)], [Pointer(Pointer(T.IRecordInfo))]], [['stdcall']]))('GetRecordInfoFromGuids');},
    VariantInit: function() {return (Fn(null, [[Pointer(T.VARIANT)]], [['stdcall']]))('VariantInit');},
    VariantClear: function() {return (Fn(T.HRESULT, [[Pointer(T.VARIANT)]], [['stdcall']]))('VariantClear');},
    VariantCopy: function() {return (Fn(T.HRESULT, [[Pointer(T.VARIANT)], [Pointer(T.VARIANT)]], [['stdcall']]))('VariantCopy');},
    VariantCopyInd: function() {return (Fn(T.HRESULT, [[Pointer(T.VARIANT)], [Pointer(T.VARIANT)]], [['stdcall']]))('VariantCopyInd');},
    VariantChangeType: function() {return (Fn(T.HRESULT, [[Pointer(T.VARIANT)], [Pointer(T.VARIANT)], [T.USHORT], [T.VARTYPE]], [['stdcall']]))('VariantChangeType');},
    VariantChangeTypeEx: function() {return (Fn(T.HRESULT, [[Pointer(T.VARIANT)], [Pointer(T.VARIANT)], [T.LCID], [T.USHORT], [T.VARTYPE]], [['stdcall']]))('VariantChangeTypeEx');},
    VarUI1FromI2: function() {return (Fn(T.HRESULT, [[T.SHORT], [Pointer(T.BYTE)]], [['stdcall']]))('VarUI1FromI2');},
    VarUI1FromI4: function() {return (Fn(T.HRESULT, [[T.LONG], [Pointer(T.BYTE)]], [['stdcall']]))('VarUI1FromI4');},
    VarUI1FromI8: function() {return (Fn(T.HRESULT, [[T.LONG64], [Pointer(T.BYTE)]], [['stdcall']]))('VarUI1FromI8');},
    VarUI1FromR4: function() {return (Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.BYTE)]], [['stdcall']]))('VarUI1FromR4');},
    VarUI1FromR8: function() {return (Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.BYTE)]], [['stdcall']]))('VarUI1FromR8');},
    VarUI1FromDate: function() {return (Fn(T.HRESULT, [[T.DATE], [Pointer(T.BYTE)]], [['stdcall']]))('VarUI1FromDate');},
    VarUI1FromBool: function() {return (Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.BYTE)]], [['stdcall']]))('VarUI1FromBool');},
    VarUI1FromI1: function() {return (Fn(T.HRESULT, [[T.i8], [Pointer(T.BYTE)]], [['stdcall']]))('VarUI1FromI1');},
    VarUI1FromUI2: function() {return (Fn(T.HRESULT, [[T.USHORT], [Pointer(T.BYTE)]], [['stdcall']]))('VarUI1FromUI2');},
    VarUI1FromUI4: function() {return (Fn(T.HRESULT, [[T.ULONG], [Pointer(T.BYTE)]], [['stdcall']]))('VarUI1FromUI4');},
    VarUI1FromUI8: function() {return (Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.BYTE)]], [['stdcall']]))('VarUI1FromUI8');},
    VarUI1FromStr: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.BYTE)]], [['stdcall']]))('VarUI1FromStr');},
    VarUI1FromCy: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.BYTE)]], [['stdcall']]))('VarUI1FromCy');},
    VarUI1FromDec: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.BYTE)]], [['stdcall']]))('VarUI1FromDec');},
    VarUI1FromDisp: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.BYTE)]], [['stdcall']]))('VarUI1FromDisp');},
    VarI2FromUI1: function() {return (Fn(T.HRESULT, [[T.BYTE], [Pointer(T.SHORT)]], [['stdcall']]))('VarI2FromUI1');},
    VarI2FromI4: function() {return (Fn(T.HRESULT, [[T.LONG], [Pointer(T.SHORT)]], [['stdcall']]))('VarI2FromI4');},
    VarI2FromI8: function() {return (Fn(T.HRESULT, [[T.LONG64], [Pointer(T.SHORT)]], [['stdcall']]))('VarI2FromI8');},
    VarI2FromR4: function() {return (Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.SHORT)]], [['stdcall']]))('VarI2FromR4');},
    VarI2FromR8: function() {return (Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.SHORT)]], [['stdcall']]))('VarI2FromR8');},
    VarI2FromDate: function() {return (Fn(T.HRESULT, [[T.DATE], [Pointer(T.SHORT)]], [['stdcall']]))('VarI2FromDate');},
    VarI2FromBool: function() {return (Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.SHORT)]], [['stdcall']]))('VarI2FromBool');},
    VarI2FromI1: function() {return (Fn(T.HRESULT, [[T.i8], [Pointer(T.SHORT)]], [['stdcall']]))('VarI2FromI1');},
    VarI2FromUI2: function() {return (Fn(T.HRESULT, [[T.USHORT], [Pointer(T.SHORT)]], [['stdcall']]))('VarI2FromUI2');},
    VarI2FromUI4: function() {return (Fn(T.HRESULT, [[T.ULONG], [Pointer(T.SHORT)]], [['stdcall']]))('VarI2FromUI4');},
    VarI2FromUI8: function() {return (Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.SHORT)]], [['stdcall']]))('VarI2FromUI8');},
    VarI2FromStr: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.SHORT)]], [['stdcall']]))('VarI2FromStr');},
    VarI2FromCy: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.SHORT)]], [['stdcall']]))('VarI2FromCy');},
    VarI2FromDec: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.SHORT)]], [['stdcall']]))('VarI2FromDec');},
    VarI2FromDisp: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.SHORT)]], [['stdcall']]))('VarI2FromDisp');},
    VarI4FromUI1: function() {return (Fn(T.HRESULT, [[T.BYTE], [Pointer(T.LONG)]], [['stdcall']]))('VarI4FromUI1');},
    VarI4FromI2: function() {return (Fn(T.HRESULT, [[T.SHORT], [Pointer(T.LONG)]], [['stdcall']]))('VarI4FromI2');},
    VarI4FromI8: function() {return (Fn(T.HRESULT, [[T.LONG64], [Pointer(T.LONG)]], [['stdcall']]))('VarI4FromI8');},
    VarI4FromR4: function() {return (Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.LONG)]], [['stdcall']]))('VarI4FromR4');},
    VarI4FromR8: function() {return (Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.LONG)]], [['stdcall']]))('VarI4FromR8');},
    VarI4FromDate: function() {return (Fn(T.HRESULT, [[T.DATE], [Pointer(T.LONG)]], [['stdcall']]))('VarI4FromDate');},
    VarI4FromBool: function() {return (Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.LONG)]], [['stdcall']]))('VarI4FromBool');},
    VarI4FromI1: function() {return (Fn(T.HRESULT, [[T.i8], [Pointer(T.LONG)]], [['stdcall']]))('VarI4FromI1');},
    VarI4FromUI2: function() {return (Fn(T.HRESULT, [[T.USHORT], [Pointer(T.LONG)]], [['stdcall']]))('VarI4FromUI2');},
    VarI4FromUI4: function() {return (Fn(T.HRESULT, [[T.ULONG], [Pointer(T.LONG)]], [['stdcall']]))('VarI4FromUI4');},
    VarI4FromUI8: function() {return (Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.LONG)]], [['stdcall']]))('VarI4FromUI8');},
    VarI4FromStr: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.LONG)]], [['stdcall']]))('VarI4FromStr');},
    VarI4FromCy: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.LONG)]], [['stdcall']]))('VarI4FromCy');},
    VarI4FromDec: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.LONG)]], [['stdcall']]))('VarI4FromDec');},
    VarI4FromDisp: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.LONG)]], [['stdcall']]))('VarI4FromDisp');},
    VarI8FromUI1: function() {return (Fn(T.HRESULT, [[T.BYTE], [Pointer(T.LONG64)]], [['stdcall']]))('VarI8FromUI1');},
    VarI8FromI2: function() {return (Fn(T.HRESULT, [[T.SHORT], [Pointer(T.LONG64)]], [['stdcall']]))('VarI8FromI2');},
    VarI8FromI4: function() {return (Fn(T.HRESULT, [[T.LONG], [Pointer(T.LONG64)]], [['stdcall']]))('VarI8FromI4');},
    VarI8FromR4: function() {return (Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.LONG64)]], [['stdcall']]))('VarI8FromR4');},
    VarI8FromR8: function() {return (Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.LONG64)]], [['stdcall']]))('VarI8FromR8');},
    VarI8FromDate: function() {return (Fn(T.HRESULT, [[T.DATE], [Pointer(T.LONG64)]], [['stdcall']]))('VarI8FromDate');},
    VarI8FromStr: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.LONG64)]], [['stdcall']]))('VarI8FromStr');},
    VarI8FromBool: function() {return (Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.LONG64)]], [['stdcall']]))('VarI8FromBool');},
    VarI8FromI1: function() {return (Fn(T.HRESULT, [[T.i8], [Pointer(T.LONG64)]], [['stdcall']]))('VarI8FromI1');},
    VarI8FromUI2: function() {return (Fn(T.HRESULT, [[T.USHORT], [Pointer(T.LONG64)]], [['stdcall']]))('VarI8FromUI2');},
    VarI8FromUI4: function() {return (Fn(T.HRESULT, [[T.ULONG], [Pointer(T.LONG64)]], [['stdcall']]))('VarI8FromUI4');},
    VarI8FromUI8: function() {return (Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.LONG64)]], [['stdcall']]))('VarI8FromUI8');},
    VarI8FromDec: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL), 'pdecIn'], [Pointer(T.LONG64)]], [['stdcall']]))('VarI8FromDec');},
    VarI8FromInt: function() {return (Fn(T.HRESULT, [[T.INT, 'intIn'], [Pointer(T.LONG64)]], [['stdcall']]))('VarI8FromInt');},
    VarI8FromCy: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.LONG64)]], [['stdcall']]))('VarI8FromCy');},
    VarI8FromDisp: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.LONG64)]], [['stdcall']]))('VarI8FromDisp');},
    VarR4FromUI1: function() {return (Fn(T.HRESULT, [[T.BYTE], [Pointer(T.FLOAT)]], [['stdcall']]))('VarR4FromUI1');},
    VarR4FromI2: function() {return (Fn(T.HRESULT, [[T.SHORT], [Pointer(T.FLOAT)]], [['stdcall']]))('VarR4FromI2');},
    VarR4FromI4: function() {return (Fn(T.HRESULT, [[T.LONG], [Pointer(T.FLOAT)]], [['stdcall']]))('VarR4FromI4');},
    VarR4FromI8: function() {return (Fn(T.HRESULT, [[T.LONG64], [Pointer(T.FLOAT)]], [['stdcall']]))('VarR4FromI8');},
    VarR4FromR8: function() {return (Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.FLOAT)]], [['stdcall']]))('VarR4FromR8');},
    VarR4FromDate: function() {return (Fn(T.HRESULT, [[T.DATE], [Pointer(T.FLOAT)]], [['stdcall']]))('VarR4FromDate');},
    VarR4FromBool: function() {return (Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.FLOAT)]], [['stdcall']]))('VarR4FromBool');},
    VarR4FromI1: function() {return (Fn(T.HRESULT, [[T.i8], [Pointer(T.FLOAT)]], [['stdcall']]))('VarR4FromI1');},
    VarR4FromUI2: function() {return (Fn(T.HRESULT, [[T.USHORT], [Pointer(T.FLOAT)]], [['stdcall']]))('VarR4FromUI2');},
    VarR4FromUI4: function() {return (Fn(T.HRESULT, [[T.ULONG], [Pointer(T.FLOAT)]], [['stdcall']]))('VarR4FromUI4');},
    VarR4FromUI8: function() {return (Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.FLOAT)]], [['stdcall']]))('VarR4FromUI8');},
    VarR4FromStr: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.FLOAT)]], [['stdcall']]))('VarR4FromStr');},
    VarR4FromCy: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.FLOAT)]], [['stdcall']]))('VarR4FromCy');},
    VarR4FromDec: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.FLOAT)]], [['stdcall']]))('VarR4FromDec');},
    VarR4FromDisp: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.FLOAT)]], [['stdcall']]))('VarR4FromDisp');},
    VarR8FromUI1: function() {return (Fn(T.HRESULT, [[T.BYTE], [Pointer(T.f64)]], [['stdcall']]))('VarR8FromUI1');},
    VarR8FromI2: function() {return (Fn(T.HRESULT, [[T.SHORT], [Pointer(T.f64)]], [['stdcall']]))('VarR8FromI2');},
    VarR8FromI4: function() {return (Fn(T.HRESULT, [[T.LONG], [Pointer(T.f64)]], [['stdcall']]))('VarR8FromI4');},
    VarR8FromI8: function() {return (Fn(T.HRESULT, [[T.LONG64], [Pointer(T.f64)]], [['stdcall']]))('VarR8FromI8');},
    VarR8FromR4: function() {return (Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.f64)]], [['stdcall']]))('VarR8FromR4');},
    VarR8FromDate: function() {return (Fn(T.HRESULT, [[T.DATE], [Pointer(T.f64)]], [['stdcall']]))('VarR8FromDate');},
    VarR8FromBool: function() {return (Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.f64)]], [['stdcall']]))('VarR8FromBool');},
    VarR8FromI1: function() {return (Fn(T.HRESULT, [[T.i8], [Pointer(T.f64)]], [['stdcall']]))('VarR8FromI1');},
    VarR8FromUI2: function() {return (Fn(T.HRESULT, [[T.USHORT], [Pointer(T.f64)]], [['stdcall']]))('VarR8FromUI2');},
    VarR8FromUI4: function() {return (Fn(T.HRESULT, [[T.ULONG], [Pointer(T.f64)]], [['stdcall']]))('VarR8FromUI4');},
    VarR8FromUI8: function() {return (Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.f64)]], [['stdcall']]))('VarR8FromUI8');},
    VarR8FromStr: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.f64)]], [['stdcall']]))('VarR8FromStr');},
    VarR8FromCy: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.f64)]], [['stdcall']]))('VarR8FromCy');},
    VarR8FromDec: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.f64)]], [['stdcall']]))('VarR8FromDec');},
    VarR8FromDisp: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.f64)]], [['stdcall']]))('VarR8FromDisp');},
    VarDateFromUI1: function() {return (Fn(T.HRESULT, [[T.BYTE], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromUI1');},
    VarDateFromI2: function() {return (Fn(T.HRESULT, [[T.SHORT], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromI2');},
    VarDateFromI4: function() {return (Fn(T.HRESULT, [[T.LONG], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromI4');},
    VarDateFromI8: function() {return (Fn(T.HRESULT, [[T.LONG64], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromI8');},
    VarDateFromR4: function() {return (Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromR4');},
    VarDateFromR8: function() {return (Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromR8');},
    VarDateFromStr: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromStr');},
    VarDateFromI1: function() {return (Fn(T.HRESULT, [[T.i8], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromI1');},
    VarDateFromUI2: function() {return (Fn(T.HRESULT, [[T.USHORT], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromUI2');},
    VarDateFromUI4: function() {return (Fn(T.HRESULT, [[T.ULONG], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromUI4');},
    VarDateFromUI8: function() {return (Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromUI8');},
    VarDateFromBool: function() {return (Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromBool');},
    VarDateFromCy: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromCy');},
    VarDateFromDec: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromDec');},
    VarDateFromDisp: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromDisp');},
    VarCyFromUI1: function() {return (Fn(T.HRESULT, [[T.BYTE], [Pointer(T.CY)]], [['stdcall']]))('VarCyFromUI1');},
    VarCyFromI2: function() {return (Fn(T.HRESULT, [[T.SHORT, 'sIn'], [Pointer(T.CY)]], [['stdcall']]))('VarCyFromI2');},
    VarCyFromI4: function() {return (Fn(T.HRESULT, [[T.LONG], [Pointer(T.CY)]], [['stdcall']]))('VarCyFromI4');},
    VarCyFromI8: function() {return (Fn(T.HRESULT, [[T.LONG64], [Pointer(T.CY)]], [['stdcall']]))('VarCyFromI8');},
    VarCyFromR4: function() {return (Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.CY)]], [['stdcall']]))('VarCyFromR4');},
    VarCyFromR8: function() {return (Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.CY)]], [['stdcall']]))('VarCyFromR8');},
    VarCyFromDate: function() {return (Fn(T.HRESULT, [[T.DATE], [Pointer(T.CY)]], [['stdcall']]))('VarCyFromDate');},
    VarCyFromStr: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.CY)]], [['stdcall']]))('VarCyFromStr');},
    VarCyFromBool: function() {return (Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.CY)]], [['stdcall']]))('VarCyFromBool');},
    VarCyFromI1: function() {return (Fn(T.HRESULT, [[T.i8], [Pointer(T.CY)]], [['stdcall']]))('VarCyFromI1');},
    VarCyFromUI2: function() {return (Fn(T.HRESULT, [[T.USHORT], [Pointer(T.CY)]], [['stdcall']]))('VarCyFromUI2');},
    VarCyFromUI4: function() {return (Fn(T.HRESULT, [[T.ULONG], [Pointer(T.CY)]], [['stdcall']]))('VarCyFromUI4');},
    VarCyFromUI8: function() {return (Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.CY)]], [['stdcall']]))('VarCyFromUI8');},
    VarCyFromDec: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.CY)]], [['stdcall']]))('VarCyFromDec');},
    VarCyFromDisp: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.CY)]], [['stdcall']]))('VarCyFromDisp');},
    VarBstrFromUI1: function() {return (Fn(T.HRESULT, [[T.BYTE], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarBstrFromUI1');},
    VarBstrFromI2: function() {return (Fn(T.HRESULT, [[T.SHORT], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarBstrFromI2');},
    VarBstrFromI4: function() {return (Fn(T.HRESULT, [[T.LONG], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarBstrFromI4');},
    VarBstrFromI8: function() {return (Fn(T.HRESULT, [[T.LONG64], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarBstrFromI8');},
    VarBstrFromR4: function() {return (Fn(T.HRESULT, [[T.FLOAT], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarBstrFromR4');},
    VarBstrFromR8: function() {return (Fn(T.HRESULT, [[T.DOUBLE], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarBstrFromR8');},
    VarBstrFromDate: function() {return (Fn(T.HRESULT, [[T.DATE], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarBstrFromDate');},
    VarBstrFromBool: function() {return (Fn(T.HRESULT, [[T.VARIANT_BOOL], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarBstrFromBool');},
    VarBstrFromI1: function() {return (Fn(T.HRESULT, [[T.i8], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarBstrFromI1');},
    VarBstrFromUI2: function() {return (Fn(T.HRESULT, [[T.USHORT], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarBstrFromUI2');},
    VarBstrFromUI8: function() {return (Fn(T.HRESULT, [[T.ULONG64], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarBstrFromUI8');},
    VarBstrFromUI4: function() {return (Fn(T.HRESULT, [[T.ULONG], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarBstrFromUI4');},
    VarBstrFromCy: function() {return (Fn(T.HRESULT, [[T.CY], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarBstrFromCy');},
    VarBstrFromDec: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarBstrFromDec');},
    VarBstrFromDisp: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarBstrFromDisp');},
    VarBoolFromUI1: function() {return (Fn(T.HRESULT, [[T.BYTE], [Pointer(T.VARIANT_BOOL)]], [['stdcall']]))('VarBoolFromUI1');},
    VarBoolFromI2: function() {return (Fn(T.HRESULT, [[T.SHORT], [Pointer(T.VARIANT_BOOL)]], [['stdcall']]))('VarBoolFromI2');},
    VarBoolFromI4: function() {return (Fn(T.HRESULT, [[T.LONG], [Pointer(T.VARIANT_BOOL)]], [['stdcall']]))('VarBoolFromI4');},
    VarBoolFromI8: function() {return (Fn(T.HRESULT, [[T.LONG64], [Pointer(T.VARIANT_BOOL)]], [['stdcall']]))('VarBoolFromI8');},
    VarBoolFromR4: function() {return (Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.VARIANT_BOOL)]], [['stdcall']]))('VarBoolFromR4');},
    VarBoolFromR8: function() {return (Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.VARIANT_BOOL)]], [['stdcall']]))('VarBoolFromR8');},
    VarBoolFromDate: function() {return (Fn(T.HRESULT, [[T.DATE], [Pointer(T.VARIANT_BOOL)]], [['stdcall']]))('VarBoolFromDate');},
    VarBoolFromStr: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.VARIANT_BOOL)]], [['stdcall']]))('VarBoolFromStr');},
    VarBoolFromI1: function() {return (Fn(T.HRESULT, [[T.i8], [Pointer(T.VARIANT_BOOL)]], [['stdcall']]))('VarBoolFromI1');},
    VarBoolFromUI2: function() {return (Fn(T.HRESULT, [[T.USHORT], [Pointer(T.VARIANT_BOOL)]], [['stdcall']]))('VarBoolFromUI2');},
    VarBoolFromUI4: function() {return (Fn(T.HRESULT, [[T.ULONG], [Pointer(T.VARIANT_BOOL)]], [['stdcall']]))('VarBoolFromUI4');},
    VarBoolFromUI8: function() {return (Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.VARIANT_BOOL)]], [['stdcall']]))('VarBoolFromUI8');},
    VarBoolFromCy: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.VARIANT_BOOL)]], [['stdcall']]))('VarBoolFromCy');},
    VarBoolFromDec: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.VARIANT_BOOL)]], [['stdcall']]))('VarBoolFromDec');},
    VarBoolFromDisp: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.VARIANT_BOOL)]], [['stdcall']]))('VarBoolFromDisp');},
    VarI1FromUI1: function() {return (Fn(T.HRESULT, [[T.BYTE], [Pointer(T.i8)]], [['stdcall']]))('VarI1FromUI1');},
    VarI1FromI2: function() {return (Fn(T.HRESULT, [[T.SHORT], [Pointer(T.i8)]], [['stdcall']]))('VarI1FromI2');},
    VarI1FromI4: function() {return (Fn(T.HRESULT, [[T.LONG], [Pointer(T.i8)]], [['stdcall']]))('VarI1FromI4');},
    VarI1FromI8: function() {return (Fn(T.HRESULT, [[T.LONG64], [Pointer(T.i8)]], [['stdcall']]))('VarI1FromI8');},
    VarI1FromR4: function() {return (Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.i8)]], [['stdcall']]))('VarI1FromR4');},
    VarI1FromR8: function() {return (Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.i8)]], [['stdcall']]))('VarI1FromR8');},
    VarI1FromDate: function() {return (Fn(T.HRESULT, [[T.DATE], [Pointer(T.i8)]], [['stdcall']]))('VarI1FromDate');},
    VarI1FromStr: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.i8)]], [['stdcall']]))('VarI1FromStr');},
    VarI1FromBool: function() {return (Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.i8)]], [['stdcall']]))('VarI1FromBool');},
    VarI1FromUI2: function() {return (Fn(T.HRESULT, [[T.USHORT], [Pointer(T.i8)]], [['stdcall']]))('VarI1FromUI2');},
    VarI1FromUI4: function() {return (Fn(T.HRESULT, [[T.ULONG], [Pointer(T.i8)]], [['stdcall']]))('VarI1FromUI4');},
    VarI1FromUI8: function() {return (Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.i8)]], [['stdcall']]))('VarI1FromUI8');},
    VarI1FromCy: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.i8)]], [['stdcall']]))('VarI1FromCy');},
    VarI1FromDec: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.i8)]], [['stdcall']]))('VarI1FromDec');},
    VarI1FromDisp: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.i8)]], [['stdcall']]))('VarI1FromDisp');},
    VarUI2FromUI1: function() {return (Fn(T.HRESULT, [[T.BYTE], [Pointer(T.USHORT)]], [['stdcall']]))('VarUI2FromUI1');},
    VarUI2FromI2: function() {return (Fn(T.HRESULT, [[T.SHORT], [Pointer(T.USHORT)]], [['stdcall']]))('VarUI2FromI2');},
    VarUI2FromI4: function() {return (Fn(T.HRESULT, [[T.LONG], [Pointer(T.USHORT)]], [['stdcall']]))('VarUI2FromI4');},
    VarUI2FromI8: function() {return (Fn(T.HRESULT, [[T.LONG64], [Pointer(T.USHORT)]], [['stdcall']]))('VarUI2FromI8');},
    VarUI2FromR4: function() {return (Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.USHORT)]], [['stdcall']]))('VarUI2FromR4');},
    VarUI2FromR8: function() {return (Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.USHORT)]], [['stdcall']]))('VarUI2FromR8');},
    VarUI2FromDate: function() {return (Fn(T.HRESULT, [[T.DATE], [Pointer(T.USHORT)]], [['stdcall']]))('VarUI2FromDate');},
    VarUI2FromStr: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.USHORT)]], [['stdcall']]))('VarUI2FromStr');},
    VarUI2FromBool: function() {return (Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.USHORT)]], [['stdcall']]))('VarUI2FromBool');},
    VarUI2FromI1: function() {return (Fn(T.HRESULT, [[T.i8], [Pointer(T.USHORT)]], [['stdcall']]))('VarUI2FromI1');},
    VarUI2FromUI4: function() {return (Fn(T.HRESULT, [[T.ULONG], [Pointer(T.USHORT)]], [['stdcall']]))('VarUI2FromUI4');},
    VarUI2FromUI8: function() {return (Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.USHORT)]], [['stdcall']]))('VarUI2FromUI8');},
    VarUI2FromCy: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.USHORT)]], [['stdcall']]))('VarUI2FromCy');},
    VarUI2FromDec: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.USHORT)]], [['stdcall']]))('VarUI2FromDec');},
    VarUI2FromDisp: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.USHORT)]], [['stdcall']]))('VarUI2FromDisp');},
    VarUI4FromStr: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.ULONG)]], [['stdcall']]))('VarUI4FromStr');},
    VarUI4FromUI1: function() {return (Fn(T.HRESULT, [[T.BYTE], [Pointer(T.ULONG)]], [['stdcall']]))('VarUI4FromUI1');},
    VarUI4FromI2: function() {return (Fn(T.HRESULT, [[T.SHORT], [Pointer(T.ULONG)]], [['stdcall']]))('VarUI4FromI2');},
    VarUI4FromI4: function() {return (Fn(T.HRESULT, [[T.LONG], [Pointer(T.ULONG)]], [['stdcall']]))('VarUI4FromI4');},
    VarUI4FromI8: function() {return (Fn(T.HRESULT, [[T.LONG64], [Pointer(T.ULONG)]], [['stdcall']]))('VarUI4FromI8');},
    VarUI4FromR4: function() {return (Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.ULONG)]], [['stdcall']]))('VarUI4FromR4');},
    VarUI4FromR8: function() {return (Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.ULONG)]], [['stdcall']]))('VarUI4FromR8');},
    VarUI4FromDate: function() {return (Fn(T.HRESULT, [[T.DATE], [Pointer(T.ULONG)]], [['stdcall']]))('VarUI4FromDate');},
    VarUI4FromBool: function() {return (Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.ULONG)]], [['stdcall']]))('VarUI4FromBool');},
    VarUI4FromI1: function() {return (Fn(T.HRESULT, [[T.i8], [Pointer(T.ULONG)]], [['stdcall']]))('VarUI4FromI1');},
    VarUI4FromUI2: function() {return (Fn(T.HRESULT, [[T.USHORT], [Pointer(T.ULONG)]], [['stdcall']]))('VarUI4FromUI2');},
    VarUI4FromUI8: function() {return (Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.ULONG)]], [['stdcall']]))('VarUI4FromUI8');},
    VarUI4FromCy: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.ULONG)]], [['stdcall']]))('VarUI4FromCy');},
    VarUI4FromDec: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.ULONG)]], [['stdcall']]))('VarUI4FromDec');},
    VarUI4FromDisp: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.ULONG)]], [['stdcall']]))('VarUI4FromDisp');},
    VarUI8FromUI1: function() {return (Fn(T.HRESULT, [[T.BYTE], [Pointer(T.ULONG64)]], [['stdcall']]))('VarUI8FromUI1');},
    VarUI8FromI2: function() {return (Fn(T.HRESULT, [[T.SHORT], [Pointer(T.ULONG64)]], [['stdcall']]))('VarUI8FromI2');},
    VarUI8FromI4: function() {return (Fn(T.HRESULT, [[T.LONG], [Pointer(T.ULONG64)]], [['stdcall']]))('VarUI8FromI4');},
    VarUI8FromI8: function() {return (Fn(T.HRESULT, [[T.LONG64], [Pointer(T.ULONG64)]], [['stdcall']]))('VarUI8FromI8');},
    VarUI8FromR4: function() {return (Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.ULONG64)]], [['stdcall']]))('VarUI8FromR4');},
    VarUI8FromR8: function() {return (Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.ULONG64)]], [['stdcall']]))('VarUI8FromR8');},
    VarUI8FromDate: function() {return (Fn(T.HRESULT, [[T.DATE], [Pointer(T.ULONG64)]], [['stdcall']]))('VarUI8FromDate');},
    VarUI8FromStr: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.ULONG64)]], [['stdcall']]))('VarUI8FromStr');},
    VarUI8FromBool: function() {return (Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.ULONG64)]], [['stdcall']]))('VarUI8FromBool');},
    VarUI8FromI1: function() {return (Fn(T.HRESULT, [[T.i8], [Pointer(T.ULONG64)]], [['stdcall']]))('VarUI8FromI1');},
    VarUI8FromUI2: function() {return (Fn(T.HRESULT, [[T.USHORT], [Pointer(T.ULONG64)]], [['stdcall']]))('VarUI8FromUI2');},
    VarUI8FromUI4: function() {return (Fn(T.HRESULT, [[T.ULONG], [Pointer(T.ULONG64)]], [['stdcall']]))('VarUI8FromUI4');},
    VarUI8FromDec: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.ULONG64)]], [['stdcall']]))('VarUI8FromDec');},
    VarUI8FromInt: function() {return (Fn(T.HRESULT, [[T.INT], [Pointer(T.ULONG64)]], [['stdcall']]))('VarUI8FromInt');},
    VarUI8FromCy: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.ULONG64)]], [['stdcall']]))('VarUI8FromCy');},
    VarUI8FromDisp: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.ULONG64)]], [['stdcall']]))('VarUI8FromDisp');},
    VarDecFromUI1: function() {return (Fn(T.HRESULT, [[T.BYTE], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecFromUI1');},
    VarDecFromI2: function() {return (Fn(T.HRESULT, [[T.SHORT], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecFromI2');},
    VarDecFromI4: function() {return (Fn(T.HRESULT, [[T.LONG], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecFromI4');},
    VarDecFromI8: function() {return (Fn(T.HRESULT, [[T.LONG64], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecFromI8');},
    VarDecFromR4: function() {return (Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecFromR4');},
    VarDecFromR8: function() {return (Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecFromR8');},
    VarDecFromDate: function() {return (Fn(T.HRESULT, [[T.DATE], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecFromDate');},
    VarDecFromStr: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecFromStr');},
    VarDecFromBool: function() {return (Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecFromBool');},
    VarDecFromI1: function() {return (Fn(T.HRESULT, [[T.i8], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecFromI1');},
    VarDecFromUI2: function() {return (Fn(T.HRESULT, [[T.USHORT], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecFromUI2');},
    VarDecFromUI4: function() {return (Fn(T.HRESULT, [[T.ULONG], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecFromUI4');},
    VarDecFromUI8: function() {return (Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecFromUI8');},
    VarDecFromCy: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecFromCy');},
    VarDecFromDisp: function() {return (Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecFromDisp');},
    VarR4CmpR8: function() {return (Fn(T.HRESULT, [[T.f32], [T.f64]], [['stdcall']]))('VarR4CmpR8');},
    VarR8Pow: function() {return (Fn(T.HRESULT, [[T.f64], [T.f64], [Pointer(T.f64)]], [['stdcall']]))('VarR8Pow');},
    VarR8Round: function() {return (Fn(T.HRESULT, [[T.f64], [T.i32], [Pointer(T.f64)]], [['stdcall']]))('VarR8Round');},
    VarDecAbs: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecAbs');},
    VarDecAdd: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecAdd');},
    VarDecCmp: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecCmp');},
    VarDecCmpR8: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [T.DOUBLE]], [['stdcall']]))('VarDecCmpR8');},
    VarDecDiv: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecDiv');},
    VarDecFix: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecFix');},
    VarDecInt: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecInt');},
    VarDecMul: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecMul');},
    VarDecNeg: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecNeg');},
    VarDecRound: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [T.i32], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecRound');},
    VarDecSub: function() {return (Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]], [['stdcall']]))('VarDecSub');},
    VarCyAbs: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.CY)]], [['stdcall']]))('VarCyAbs');},
    VarCyAdd: function() {return (Fn(T.HRESULT, [[T.CY], [T.CY], [Pointer(T.CY)]], [['stdcall']]))('VarCyAdd');},
    VarCyCmp: function() {return (Fn(T.HRESULT, [[T.CY], [T.CY]], [['stdcall']]))('VarCyCmp');},
    VarCyCmpR8: function() {return (Fn(T.HRESULT, [[T.CY], [T.DOUBLE]], [['stdcall']]))('VarCyCmpR8');},
    VarCyFix: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.CY)]], [['stdcall']]))('VarCyFix');},
    VarCyInt: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.CY)]], [['stdcall']]))('VarCyInt');},
    VarCyMul: function() {return (Fn(T.HRESULT, [[T.CY], [T.CY], [Pointer(T.CY)]], [['stdcall']]))('VarCyMul');},
    VarCyMulI4: function() {return (Fn(T.HRESULT, [[T.CY], [T.LONG], [Pointer(T.CY)]], [['stdcall']]))('VarCyMulI4');},
    VarCyMulI8: function() {return (Fn(T.HRESULT, [[T.CY], [T.LONG64], [Pointer(T.CY)]], [['stdcall']]))('VarCyMulI8');},
    VarCyNeg: function() {return (Fn(T.HRESULT, [[T.CY], [Pointer(T.CY)]], [['stdcall']]))('VarCyNeg');},
    VarCyRound: function() {return (Fn(T.HRESULT, [[T.CY], [T.INT], [Pointer(T.CY)]], [['stdcall']]))('VarCyRound');},
    VarCySub: function() {return (Fn(T.HRESULT, [[T.CY], [T.CY], [Pointer(T.CY)]], [['stdcall']]))('VarCySub');},
    VarAdd: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarAdd');},
    VarAnd: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarAnd');},
    VarCat: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarCat');},
    VarDiv: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarDiv');},
    VarEqv: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarEqv');},
    VarIdiv: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarIdiv');},
    VarImp: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarImp');},
    VarMod: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarMod');},
    VarMul: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarMul');},
    VarOr: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarOr');},
    VarPow: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarPow');},
    VarSub: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarSub');},
    VarXor: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarXor');},
    VarAbs: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarAbs');},
    VarFix: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarFix');},
    VarInt: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarInt');},
    VarNeg: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarNeg');},
    VarNot: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT]], [['stdcall']]))('VarNot');},
    VarRound: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.i32], [T.LPVARIANT]], [['stdcall']]))('VarRound');},
    VarCmp: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LCID], [T.ULONG]], [['stdcall']]))('VarCmp');},
    VarBstrCmp: function() {return (Fn(T.HRESULT, [[T.BSTR], [T.BSTR], [T.LCID], [T.ULONG]], [['stdcall']]))('VarBstrCmp');},
    VarBstrCat: function() {return (Fn(T.HRESULT, [[T.BSTR], [T.BSTR], [Pointer(T.BSTR)]], [['stdcall']]))('VarBstrCat');},
    VarParseNumFromStr: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.NUMPARSE)], [Pointer(T.BYTE)]], [['stdcall']]))('VarParseNumFromStr');},
    VarNumFromParseNum: function() {return (Fn(T.HRESULT, [[Pointer(T.NUMPARSE)], [Pointer(T.BYTE)], [T.ULONG], [Pointer(T.VARIANT)]], [['stdcall']]))('VarNumFromParseNum');},
    DosDateTimeToVariantTime: function() {return (Fn(T.INT, [[T.USHORT], [T.USHORT], [Pointer(T.f64)]], [['stdcall']]))('DosDateTimeToVariantTime');},
    VariantTimeToDosDateTime: function() {return (Fn(T.INT, [[T.f64], [Pointer(T.USHORT)], [Pointer(T.USHORT)]], [['stdcall']]))('VariantTimeToDosDateTime');},
    VariantTimeToSystemTime: function() {return (Fn(T.INT, [[T.DOUBLE], [T.LPSYSTEMTIME]], [['stdcall']]))('VariantTimeToSystemTime');},
    SystemTimeToVariantTime: function() {return (Fn(T.INT, [[T.LPSYSTEMTIME], [Pointer(T.f64)]], [['stdcall']]))('SystemTimeToVariantTime');},
    VarDateFromUdate: function() {return (Fn(T.HRESULT, [[Pointer(T.UDATE)], [T.ULONG], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromUdate');},
    VarDateFromUdateEx: function() {return (Fn(T.HRESULT, [[Pointer(T.UDATE)], [T.LCID], [T.ULONG], [Pointer(T.DATE)]], [['stdcall']]))('VarDateFromUdateEx');},
    VarUdateFromDate: function() {return (Fn(T.HRESULT, [[T.DATE], [T.ULONG], [Pointer(T.UDATE)]], [['stdcall']]))('VarUdateFromDate');},
    VarWeekdayName: function() {return (Fn(T.HRESULT, [[T.i32], [T.i32], [T.i32], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarWeekdayName');},
    VarMonthName: function() {return (Fn(T.HRESULT, [[T.i32], [T.i32], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarMonthName');},
    GetAltMonthNames: function() {return (Fn(T.HRESULT, [[T.LCID], [Pointer(Pointer(T.LPOLESTR))]], [['stdcall']]))('GetAltMonthNames');},
    VarFormat: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPOLESTR], [T.i32], [T.i32], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarFormat');},
    VarFormatCurrency: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.i32], [T.i32], [T.i32], [T.i32], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarFormatCurrency');},
    VarFormatDateTime: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.i32], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarFormatDateTime');},
    VarFormatNumber: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.i32], [T.i32], [T.i32], [T.i32], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarFormatNumber');},
    VarFormatPercent: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.i32], [T.i32], [T.i32], [T.i32], [T.ULONG], [Pointer(T.BSTR)]], [['stdcall']]))('VarFormatPercent');},
    VarFormatFromTokens: function() {return (Fn(T.HRESULT, [[T.LPVARIANT], [T.LPOLESTR], [T.LPBYTE], [T.ULONG], [Pointer(T.BSTR)], [T.LCID]], [['stdcall']]))('VarFormatFromTokens');},
    VarTokenizeFormatString: function() {return (Fn(T.HRESULT, [[T.LPOLESTR], [T.LPBYTE], [T.i32], [T.i32], [T.i32], [T.LCID], [Pointer(T.i32)]], [['stdcall']]))('VarTokenizeFormatString');},
    DispGetParam: function() {return (Fn(T.HRESULT, [[Pointer(T.DISPPARAMS)], [T.UINT], [T.VARTYPE], [Pointer(T.VARIANT)], [Pointer(T.UINT)]], [['stdcall']]))('DispGetParam');},
    DispGetIDsOfNames: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeInfo)], [Pointer(Pointer(T.OLECHAR))], [T.UINT], [Pointer(T.DISPID)]], [['stdcall']]))('DispGetIDsOfNames');},
    DispInvoke: function() {return (Fn(T.HRESULT, [[Pointer(null)], [Pointer(T.ITypeInfo)], [T.DISPID], [T.WORD], [Pointer(T.DISPPARAMS)], [Pointer(T.VARIANT)], [Pointer(T.EXCEPINFO)], [Pointer(T.UINT)]], [['stdcall']]))('DispInvoke');},
    CreateDispTypeInfo: function() {return (Fn(T.HRESULT, [[Pointer(T.INTERFACEDATA)], [T.LCID], [Pointer(Pointer(T.ITypeInfo))]], [['stdcall']]))('CreateDispTypeInfo');},
    CreateStdDispatch: function() {return (Fn(T.HRESULT, [[Pointer(T.IUnknown)], [Pointer(null)], [Pointer(T.ITypeInfo)], [Pointer(Pointer(T.IUnknown))]], [['stdcall']]))('CreateStdDispatch');},
    DispCallFunc: function() {return (Fn(T.HRESULT, [[Pointer(null)], [T.ULONG_PTR], [T.CALLCONV], [T.VARTYPE], [T.UINT], [Pointer(T.VARTYPE)], [Pointer(Pointer(T.VARIANTARG))], [Pointer(T.VARIANT)]], [['stdcall']]))('DispCallFunc');},
    LHashValOfNameSysA: function() {return (Fn(T.ULONG, [[T.SYSKIND], [T.LCID], [T.LPCSTR]], [['stdcall']]))('LHashValOfNameSysA');},
    LHashValOfNameSys: function() {return (Fn(T.ULONG, [[T.SYSKIND], [T.LCID], [T.LPCOLESTR]], [['stdcall']]))('LHashValOfNameSys');},
    CreateTypeLib: function() {return (Fn(T.HRESULT, [[T.SYSKIND], [Pointer(T.OLECHAR)], [Pointer(Pointer(T.ICreateTypeLib))]], [['stdcall']]))('CreateTypeLib');},
    CreateTypeLib2: function() {return (Fn(T.HRESULT, [[T.SYSKIND], [T.LPCOLESTR], [Pointer(Pointer(T.ICreateTypeLib2))]], [['stdcall']]))('CreateTypeLib2');},
    LoadRegTypeLib: function() {return (Fn(T.HRESULT, [[Pointer(T.GUID)], [T.WORD], [T.WORD], [T.LCID], [Pointer(Pointer(T.ITypeLib))]], [['stdcall']]))('LoadRegTypeLib');},
    LoadTypeLib: function() {return (Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [Pointer(Pointer(T.ITypeLib))]], [['stdcall']]))('LoadTypeLib');},
    LoadTypeLibEx: function() {return (Fn(T.HRESULT, [[T.LPCOLESTR], [T.REGKIND], [Pointer(Pointer(T.ITypeLib))]], [['stdcall']]))('LoadTypeLibEx');},
    QueryPathOfRegTypeLib: function() {return (Fn(T.HRESULT, [[Pointer(T.GUID)], [T.WORD], [T.WORD], [T.LCID], [T.LPBSTR]], [['stdcall']]))('QueryPathOfRegTypeLib');},
    RegisterTypeLib: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib)], [Pointer(T.OLECHAR)], [Pointer(T.OLECHAR)]], [['stdcall']]))('RegisterTypeLib');},
    UnRegisterTypeLib: function() {return (Fn(T.HRESULT, [[Pointer(T.GUID)], [T.WORD], [T.WORD], [T.LCID], [T.SYSKIND]], [['stdcall']]))('UnRegisterTypeLib');},
    RegisterTypeLibForUser: function() {return (Fn(T.HRESULT, [[Pointer(T.ITypeLib)], [Pointer(T.OLECHAR)], [Pointer(T.OLECHAR)]], [['stdcall']]))('RegisterTypeLibForUser');},
    UnRegisterTypeLibForUser: function() {return (Fn(T.HRESULT, [[Pointer(T.GUID)], [T.WORD], [T.WORD], [T.LCID], [T.SYSKIND]], [['stdcall']]))('UnRegisterTypeLibForUser');},
    ClearCustData: function() {return (Fn(null, [[T.LPCUSTDATA]], [['stdcall']]))('ClearCustData');},
    RegisterDragDrop: function() {return (Fn(T.HRESULT, [[T.HWND], [T.LPDROPTARGET]], [['stdcall']]))('RegisterDragDrop');},
    RevokeDragDrop: function() {return (Fn(T.HRESULT, [[T.HWND]], [['stdcall']]))('RevokeDragDrop');},
    DoDragDrop: function() {return (Fn(T.HRESULT, [[T.LPDATAOBJECT], [T.LPDROPSOURCE], [T.DWORD], [Pointer(T.DWORD)]], [['stdcall']]))('DoDragDrop');},
    OleLoadFromStream: function() {return (Fn(T.HRESULT, [[Pointer(T.IStream), 'pStm'], [Pointer(T.IID), 'iidInterface'], [Pointer(Pointer(null)), 'ppvObj']], [['stdcall']]))('OleLoadFromStream');},
    OleSaveToStream: function() {return (Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'pPStm'], [Pointer(T.IStream), 'pStm']], [['stdcall']]))('OleSaveToStream');},
    OleCreateMenuDescriptor: function() {return (Fn(T.HOLEMENU, [[T.HMENU, 'hmenuCombined'], [T.LPOLEMENUGROUPWIDTHS, 'lpMenuWidths']], [['stdcall']]))('OleCreateMenuDescriptor');},
    OleDestroyMenuDescriptor: function() {return (Fn(T.HRESULT, [[T.HOLEMENU, 'hmenuDescriptor']], [['stdcall']]))('OleDestroyMenuDescriptor');},
    OleSetMenuDescriptor: function() {return (Fn(T.HRESULT, [[T.HOLEMENU, 'hmenuDescriptor'], [T.HWND, 'hwndFrame'], [T.HWND, 'hwndActiveObject'], [T.LPOLEINPLACEFRAME, 'lpFrame'], [T.LPOLEINPLACEACTIVEOBJECT, 'lpActiveObject']], [['stdcall']]))('OleSetMenuDescriptor');},
    WriteClassStg: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'pstg'], [Pointer(T.CLSID), 'rclsid']], [['stdcall']]))('WriteClassStg');},
    ReadClassStg: function() {return (Fn(T.HRESULT, [[Pointer(T.IStorage), 'pstg'], [Pointer(T.CLSID), 'pclsid']], [['stdcall']]))('ReadClassStg');},
    WriteClassStm: function() {return (Fn(T.HRESULT, [[Pointer(T.IStream), 'pStm'], [Pointer(T.CLSID), 'rclsid']], [['stdcall']]))('WriteClassStm');},
    ReadClassStm: function() {return (Fn(T.HRESULT, [[Pointer(T.IStream), 'pStm'], [Pointer(T.CLSID), 'pclsid']], [['stdcall']]))('ReadClassStm');},
    OleSave: function() {return (Fn(T.HRESULT, [[T.LPPERSISTSTORAGE, 'pPS'], [T.LPSTORAGE, 'pStg'], [T.BOOL, 'fSameAsLoad']], [['stdcall']]))('OleSave');},
    OleRegGetUserType: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsid'], [T.DWORD, 'dwFormOfType'], [Pointer(T.LPOLESTR), 'pszUserType']], [['stdcall']]))('OleRegGetUserType');},
    OleRegGetMiscStatus: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsid'], [T.DWORD, 'dwAspect'], [Pointer(T.DWORD), 'pdwStatus']], [['stdcall']]))('OleRegGetMiscStatus');},
    OleRegEnumFormatEtc: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsid'], [T.DWORD, 'dwDirection'], [Pointer(T.LPENUMFORMATETC), 'ppenumFormatetc']], [['stdcall']]))('OleRegEnumFormatEtc');},
    CreateStreamOnHGlobal: function() {return (Fn(T.HRESULT, [[T.HGLOBAL, 'hGlobal'], [T.BOOL, 'fDeleteOnRelease'], [Pointer(T.LPSTREAM), 'ppstm']], [['stdcall']]))('CreateStreamOnHGlobal');},
    GetHGlobalFromStream: function() {return (Fn(T.HRESULT, [[T.LPSTREAM, 'pstm'], [Pointer(T.HGLOBAL), 'phglobal']], [['stdcall']]))('GetHGlobalFromStream');},
    OleRegEnumVerbs: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsid'], [Pointer(T.LPENUMOLEVERB), 'ppenum']], [['stdcall']]))('OleRegEnumVerbs');},
    OleIsRunning: function() {return (Fn(T.BOOL, [[T.LPOLEOBJECT, 'pObject']], [['stdcall']]))('OleIsRunning');},
    OleCreateLinkFromData: function() {return (Fn(T.HRESULT, [[T.LPDATAOBJECT, 'pSrcDataObj'], [Pointer(T.IID), 'riid'], [T.DWORD, 'renderopt'], [T.LPFORMATETC, 'pFormatEtc'], [T.LPOLECLIENTSITE, 'pClientSite'], [T.LPSTORAGE, 'pStg'], [Pointer(T.LPVOID), 'ppvObj']], [['stdcall']]))('OleCreateLinkFromData');},
    OleSetContainedObject: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN, 'pUnknown'], [T.BOOL, 'fContained']], [['stdcall']]))('OleSetContainedObject');},
    OleNoteObjectVisible: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN, 'pUnknown'], [T.BOOL, 'fVisible']], [['stdcall']]))('OleNoteObjectVisible');},
    OleQueryLinkFromData: function() {return (Fn(T.HRESULT, [[Pointer(T.IDataObject), 'pSrcDataObject']], [['stdcall']]))('OleQueryLinkFromData');},
    OleQueryCreateFromData: function() {return (Fn(T.HRESULT, [[T.LPDATAOBJECT, 'pSrcDataObject']], [['stdcall']]))('OleQueryCreateFromData');},
    OleRun: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN, 'pUnknown']], [['stdcall']]))('OleRun');},
    OleDraw: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN, 'pUnknown'], [T.DWORD, 'dwAspect'], [T.HDC, 'hdcDraw'], [T.LPCRECT, 'lprcBounds']], [['stdcall']]))('OleDraw');},
    ReleaseStgMedium: function() {return (Fn(null, [[T.LPSTGMEDIUM]], [['stdcall']]))('ReleaseStgMedium');},
    OleGetClipboard: function() {return (Fn(T.HRESULT, [[Pointer(Pointer(T.IDataObject)), 'ppDataObj']], [['stdcall']]))('OleGetClipboard');},
    OleIsCurrentClipboard: function() {return (Fn(T.HRESULT, [[T.LPDATAOBJECT]], [['stdcall']]))('OleIsCurrentClipboard');},
    OleSetClipboard: function() {return (Fn(T.HRESULT, [[T.LPDATAOBJECT]], [['stdcall']]))('OleSetClipboard');},
    OleCreateStaticFromData: function() {return (Fn(T.HRESULT, [[T.LPDATAOBJECT, 'pSrcDataObj'], [Pointer(T.IID), 'iid'], [T.DWORD, 'renderopt'], [T.LPFORMATETC, 'pFormatEtc'], [T.LPOLECLIENTSITE, 'pClientSite'], [T.LPSTORAGE, 'pStg'], [Pointer(T.LPVOID), 'ppvObj']], [['stdcall']]))('OleCreateStaticFromData');},
    ReadFmtUserTypeStg: function() {return (Fn(T.HRESULT, [[T.LPSTORAGE, 'pstg'], [Pointer(T.CLIPFORMAT), 'pcf'], [Pointer(T.LPOLESTR), 'lplpszUserType']], [['stdcall']]))('ReadFmtUserTypeStg');},
    OleLoad: function() {return (Fn(T.HRESULT, [[T.LPSTORAGE, 'pStg'], [Pointer(T.IID), 'riid'], [T.LPOLECLIENTSITE, 'pClientSite'], [Pointer(T.LPVOID), 'ppvObj']], [['stdcall']]))('OleLoad');},
    GetHGlobalFromILockBytes: function() {return (Fn(T.HRESULT, [[T.LPLOCKBYTES, 'plkbyt'], [Pointer(T.HGLOBAL), 'phglobal']], [['stdcall']]))('GetHGlobalFromILockBytes');},
    CreateILockBytesOnHGlobal: function() {return (Fn(T.HRESULT, [[T.HGLOBAL, 'hGlobal'], [T.BOOL, 'fDeleteOnRelease'], [Pointer(T.LPLOCKBYTES), 'pplkbyt']], [['stdcall']]))('CreateILockBytesOnHGlobal');},
    OleGetIconOfClass: function() {return (Fn(T.HGLOBAL, [[Pointer(T.CLSID), 'rclsid'], [T.LPOLESTR, 'lpszLabel'], [T.BOOL, 'fUseTypeAsLabel']], [['stdcall']]))('OleGetIconOfClass');},
    OleGetIconOfFile: function() {return (Fn(T.HGLOBAL, [[T.LPOLESTR, 'lpszPath'], [T.BOOL, 'fUseFileAsLabel']], [['stdcall']]))('OleGetIconOfFile');},
    OleMetafilePictFromIconAndLabel: function() {return (Fn(T.HGLOBAL, [[T.HICON, 'hIcon'], [T.LPOLESTR, 'lpszLabel'], [T.LPOLESTR, 'lpszSourceFile'], [T.UINT, 'iIconIndex']], [['stdcall']]))('OleMetafilePictFromIconAndLabel');},
    OleLockRunning: function() {return (Fn(T.HRESULT, [[T.LPUNKNOWN, 'pUnknown'], [T.BOOL, 'fLock'], [T.BOOL, 'fLastUnlockCloses']], [['stdcall']]))('OleLockRunning');},
    OleCreateFromFile: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'rclsid'], [T.LPCOLESTR, 'lpszFileName'], [Pointer(T.IID), 'riid'], [T.DWORD, 'renderopt'], [T.LPFORMATETC, 'lpFormatEtc'], [T.LPOLECLIENTSITE, 'pClientSite'], [T.LPSTORAGE, 'pStg'], [Pointer(T.LPVOID), 'ppvObj']], [['stdcall']]))('OleCreateFromFile');},
    OleCreateLink: function() {return (Fn(T.HRESULT, [[T.LPMONIKER, 'pmkLinkSrc'], [Pointer(T.IID), 'riid'], [T.DWORD, 'renderopt'], [T.LPFORMATETC, 'lpFormatEtc'], [T.LPOLECLIENTSITE, 'pClientSite'], [T.LPSTORAGE, 'pStg'], [Pointer(T.LPVOID), 'ppvObj']], [['stdcall']]))('OleCreateLink');},
    OleCreate: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'rclsid'], [Pointer(T.IID), 'riid'], [T.DWORD, 'renderopt'], [T.LPFORMATETC, 'pFormatEtc'], [T.LPOLECLIENTSITE, 'pClientSite'], [T.LPSTORAGE, 'pStg'], [Pointer(T.LPVOID), 'ppvObj']], [['stdcall']]))('OleCreate');},
    OleFlushClipboard: function() {return (Fn(T.HRESULT, [[null]], [['stdcall']]))('OleFlushClipboard');},
    GetConvertStg: function() {return (Fn(T.HRESULT, [[T.LPSTORAGE, 'pStg']], [['stdcall']]))('GetConvertStg');},
    SetConvertStg: function() {return (Fn(T.HRESULT, [[T.LPSTORAGE, 'pStg'], [T.BOOL, 'fConvert']], [['stdcall']]))('SetConvertStg');},
    IsAccelerator: function() {return (Fn(T.BOOL, [[T.HACCEL, 'hAccel'], [T.i32, 'cAccelEntries'], [Pointer(Struct('tagMSG', null)), 'lpMsg'], [Pointer(T.WORD), 'lpwCmd']], [['stdcall']]))('IsAccelerator');},
    OleCreateLinkToFile: function() {return (Fn(T.HRESULT, [[T.LPCOLESTR, 'lpszFileName'], [Pointer(T.IID), 'riid'], [T.DWORD, 'renderopt'], [T.LPFORMATETC, 'lpFormatEtc'], [T.LPOLECLIENTSITE, 'pClientSite'], [T.LPSTORAGE, 'pStg'], [Pointer(T.LPVOID), 'ppvObj']], [['stdcall']]))('OleCreateLinkToFile');},
    OleDuplicateData: function() {return (Fn(T.HANDLE, [[T.HANDLE, 'hSrc'], [T.CLIPFORMAT, 'cfFormat'], [T.UINT, 'uiFlags']], [['stdcall']]))('OleDuplicateData');},
    WriteFmtUserTypeStg: function() {return (Fn(T.HRESULT, [[T.LPSTORAGE, 'pstg'], [T.CLIPFORMAT, 'cf'], [T.LPOLESTR, 'lpszUserType']], [['stdcall']]))('WriteFmtUserTypeStg');},
    OleTranslateAccelerator: function() {return (Fn(T.HRESULT, [[T.LPOLEINPLACEFRAME, 'lpFrame'], [T.LPOLEINPLACEFRAMEINFO, 'lpFrameInfo'], [Pointer(Struct('tagMSG', null)), 'lpmsg']], [['stdcall']]))('OleTranslateAccelerator');},
    OleCreateFromData: function() {return (Fn(T.HRESULT, [[T.LPDATAOBJECT, 'pSrcDataObj'], [Pointer(T.IID), 'riid'], [T.DWORD, 'renderopt'], [T.LPFORMATETC, 'pFormatEtc'], [T.LPOLECLIENTSITE, 'pClientSite'], [T.LPSTORAGE, 'pStg'], [Pointer(T.LPVOID), 'ppvObj']], [['stdcall']]))('OleCreateFromData');},
    OleCreateFromDataEx: function() {return (Fn(T.HRESULT, [[T.LPDATAOBJECT, 'pSrcDataObj'], [Pointer(T.IID), 'riid'], [T.DWORD, 'dwFlags'], [T.DWORD, 'renderopt'], [T.ULONG, 'num_formats'], [Pointer(T.DWORD), 'adv_flags'], [T.LPFORMATETC, 'fmts'], [Pointer(T.IAdviseSink), 'sink'], [Pointer(T.DWORD), 'conns'], [T.LPOLECLIENTSITE, 'pClientSite'], [T.LPSTORAGE, 'pStg'], [Pointer(T.LPVOID), 'ppvObj']], [['stdcall']]))('OleCreateFromDataEx');},
    OleCreateDefaultHandler: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsid'], [T.LPUNKNOWN, 'pUnkOuter'], [Pointer(T.IID), 'riid'], [Pointer(T.LPVOID), 'ppvObj']], [['stdcall']]))('OleCreateDefaultHandler');},
    OleCreateEmbeddingHelper: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsid'], [T.LPUNKNOWN, 'pUnkOuter'], [T.DWORD, 'flags'], [Pointer(T.IClassFactory), 'pCF'], [Pointer(T.IID), 'riid'], [Pointer(T.LPVOID), 'ppvObj']], [['stdcall']]))('OleCreateEmbeddingHelper');},
    CreateOleAdviseHolder: function() {return (Fn(T.HRESULT, [[Pointer(T.LPOLEADVISEHOLDER), 'ppOAHolder']], [['stdcall']]))('CreateOleAdviseHolder');},
    OleInitialize: function() {return (Fn(T.HRESULT, [[T.LPVOID, 'pvReserved']], [['stdcall']]))('OleInitialize');},
    OleUninitialize: function() {return (Fn(null, [[null]], [['stdcall']]))('OleUninitialize');},
    IsValidInterface: function() {return (Fn(T.BOOL, [[T.LPUNKNOWN, 'punk']], [['stdcall']]))('IsValidInterface');},
    OleBuildVersion: function() {return (Fn(T.DWORD, [[null]], [['stdcall']]))('OleBuildVersion');},
    OleConvertOLESTREAMToIStorage: function() {return (Fn(T.HRESULT, [[T.LPOLESTREAM, 'lpolestream'], [T.LPSTORAGE, 'pstg'], [Pointer(T.DVTARGETDEVICE), 'ptd']], [['stdcall']]))('OleConvertOLESTREAMToIStorage');},
    OleConvertIStorageToOLESTREAM: function() {return (Fn(T.HRESULT, [[T.LPSTORAGE, 'pstg'], [T.LPOLESTREAM, 'lpolestream']], [['stdcall']]))('OleConvertIStorageToOLESTREAM');},
    OleDoAutoConvert: function() {return (Fn(T.HRESULT, [[T.LPSTORAGE, 'pStg'], [T.LPCLSID, 'pClsidNew']], [['stdcall']]))('OleDoAutoConvert');},
    OleGetAutoConvert: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsidOld'], [T.LPCLSID, 'pClsidNew']], [['stdcall']]))('OleGetAutoConvert');},
    OleSetAutoConvert: function() {return (Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsidOld'], [Pointer(T.CLSID), 'clsidNew']], [['stdcall']]))('OleSetAutoConvert');},
    PropertySheetA: function() {return (Fn(T.INT_PTR, [[T.LPCPROPSHEETHEADERA]], [['stdcall']]))('PropertySheetA');},
    PropertySheetW: function() {return (Fn(T.INT_PTR, [[T.LPCPROPSHEETHEADERW]], [['stdcall']]))('PropertySheetW');},
    CreatePropertySheetPageA: function() {return (Fn(T.HPROPSHEETPAGE, [[T.LPCPROPSHEETPAGEA]], [['stdcall']]))('CreatePropertySheetPageA');},
    CreatePropertySheetPageW: function() {return (Fn(T.HPROPSHEETPAGE, [[T.LPCPROPSHEETPAGEW]], [['stdcall']]))('CreatePropertySheetPageW');},
    DestroyPropertySheetPage: function() {return (Fn(T.BOOL, [[T.HPROPSHEETPAGE, 'hPropPage']], [['stdcall']]))('DestroyPropertySheetPage');},
    ChooseColorA: function() {return (Fn(T.BOOL, [[T.LPCHOOSECOLORA, 'lpChCol']], [['stdcall']]))('ChooseColorA');},
    ChooseColorW: function() {return (Fn(T.BOOL, [[T.LPCHOOSECOLORW, 'lpChCol']], [['stdcall']]))('ChooseColorW');},
    CommDlgExtendedError: function() {return (Fn(T.DWORD, [[null]], [['stdcall']]))('CommDlgExtendedError');},
    FindTextA: function() {return (Fn(T.HWND, [[T.LPFINDREPLACEA, 'lpFind']], [['stdcall']]))('FindTextA');},
    FindTextW: function() {return (Fn(T.HWND, [[T.LPFINDREPLACEW, 'lpFind']], [['stdcall']]))('FindTextW');},
    GetFileTitleA: function() {return (Fn(T.i16, [[T.LPCSTR, 'lpFile'], [T.LPSTR, 'lpTitle'], [T.WORD, 'cbBuf']], [['stdcall']]))('GetFileTitleA');},
    GetFileTitleW: function() {return (Fn(T.i16, [[T.LPCWSTR, 'lpFile'], [T.LPWSTR, 'lpTitle'], [T.WORD, 'cbBuf']], [['stdcall']]))('GetFileTitleW');},
    GetOpenFileNameA: function() {return (Fn(T.BOOL, [[T.LPOPENFILENAMEA, 'ofn']], [['stdcall']]))('GetOpenFileNameA');},
    GetOpenFileNameW: function() {return (Fn(T.BOOL, [[T.LPOPENFILENAMEW, 'ofn']], [['stdcall']]))('GetOpenFileNameW');},
    GetSaveFileNameA: function() {return (Fn(T.BOOL, [[T.LPOPENFILENAMEA, 'ofn']], [['stdcall']]))('GetSaveFileNameA');},
    GetSaveFileNameW: function() {return (Fn(T.BOOL, [[T.LPOPENFILENAMEW, 'ofn']], [['stdcall']]))('GetSaveFileNameW');},
    PageSetupDlgA: function() {return (Fn(T.BOOL, [[T.LPPAGESETUPDLGA]], [['stdcall']]))('PageSetupDlgA');},
    PageSetupDlgW: function() {return (Fn(T.BOOL, [[T.LPPAGESETUPDLGW]], [['stdcall']]))('PageSetupDlgW');},
    PrintDlgA: function() {return (Fn(T.BOOL, [[T.LPPRINTDLGA, 'printdlg']], [['stdcall']]))('PrintDlgA');},
    PrintDlgW: function() {return (Fn(T.BOOL, [[T.LPPRINTDLGW, 'printdlg']], [['stdcall']]))('PrintDlgW');},
    PrintDlgExA: function() {return (Fn(T.HRESULT, [[T.LPPRINTDLGEXA]], [['stdcall']]))('PrintDlgExA');},
    PrintDlgExW: function() {return (Fn(T.HRESULT, [[T.LPPRINTDLGEXW]], [['stdcall']]))('PrintDlgExW');},
    ReplaceTextA: function() {return (Fn(T.HWND, [[T.LPFINDREPLACEA, 'lpFind']], [['stdcall']]))('ReplaceTextA');},
    ReplaceTextW: function() {return (Fn(T.HWND, [[T.LPFINDREPLACEW, 'lpFind']], [['stdcall']]))('ReplaceTextW');},
    ChooseFontA: function() {return (Fn(T.BOOL, [[T.LPCHOOSEFONTA]], [['stdcall']]))('ChooseFontA');},
    ChooseFontW: function() {return (Fn(T.BOOL, [[T.LPCHOOSEFONTW]], [['stdcall']]))('ChooseFontW');},
    COMDLG32_SetCommDlgExtendedError: function() {return (Fn(null, [[T.DWORD, 'err']]))('COMDLG32_SetCommDlgExtendedError');},
    ChangeServiceConfigA: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPCSTR], [T.LPCSTR], [T.LPDWORD], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('ChangeServiceConfigA');},
    ChangeServiceConfigW: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPCWSTR], [T.LPCWSTR], [T.LPDWORD], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('ChangeServiceConfigW');},
    ChangeServiceConfig2A: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.LPVOID]], [['dllimport'], ['stdcall']]))('ChangeServiceConfig2A');},
    ChangeServiceConfig2W: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.LPVOID]], [['dllimport'], ['stdcall']]))('ChangeServiceConfig2W');},
    CloseServiceHandle: function() {return (Fn(T.BOOL, [[T.SC_HANDLE]], [['dllimport'], ['stdcall']]))('CloseServiceHandle');},
    ControlService: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.LPSERVICE_STATUS]], [['dllimport'], ['stdcall']]))('ControlService');},
    CreateServiceA: function() {return (Fn(T.SC_HANDLE, [[T.SC_HANDLE], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPCSTR], [T.LPCSTR], [T.LPDWORD], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('CreateServiceA');},
    CreateServiceW: function() {return (Fn(T.SC_HANDLE, [[T.SC_HANDLE], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPCWSTR], [T.LPCWSTR], [T.LPDWORD], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('CreateServiceW');},
    DeleteService: function() {return (Fn(T.BOOL, [[T.SC_HANDLE]], [['dllimport'], ['stdcall']]))('DeleteService');},
    EnumDependentServicesA: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.LPENUM_SERVICE_STATUSA], [T.DWORD], [T.LPDWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('EnumDependentServicesA');},
    EnumDependentServicesW: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.LPENUM_SERVICE_STATUSW], [T.DWORD], [T.LPDWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('EnumDependentServicesW');},
    EnumServicesStatusA: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.DWORD], [T.LPENUM_SERVICE_STATUSA], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('EnumServicesStatusA');},
    EnumServicesStatusW: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.DWORD], [T.LPENUM_SERVICE_STATUSW], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('EnumServicesStatusW');},
    EnumServicesStatusExA: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.SC_ENUM_TYPE], [T.DWORD], [T.DWORD], [T.LPBYTE], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPCSTR]], [['dllimport'], ['stdcall']]))('EnumServicesStatusExA');},
    EnumServicesStatusExW: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.SC_ENUM_TYPE], [T.DWORD], [T.DWORD], [T.LPBYTE], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPCWSTR]], [['dllimport'], ['stdcall']]))('EnumServicesStatusExW');},
    GetServiceDisplayNameA: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.LPCSTR], [T.LPSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetServiceDisplayNameA');},
    GetServiceDisplayNameW: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.LPCWSTR], [T.LPWSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetServiceDisplayNameW');},
    GetServiceKeyNameA: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.LPCSTR], [T.LPSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetServiceKeyNameA');},
    GetServiceKeyNameW: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.LPCWSTR], [T.LPWSTR], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('GetServiceKeyNameW');},
    LockServiceDatabase: function() {return (Fn(T.SC_LOCK, [[T.SC_HANDLE]], [['dllimport'], ['stdcall']]))('LockServiceDatabase');},
    NotifyBootConfigStatus: function() {return (Fn(T.BOOL, [[T.BOOL]], [['dllimport'], ['stdcall']]))('NotifyBootConfigStatus');},
    OpenSCManagerA: function() {return (Fn(T.SC_HANDLE, [[T.LPCSTR], [T.LPCSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('OpenSCManagerA');},
    OpenSCManagerW: function() {return (Fn(T.SC_HANDLE, [[T.LPCWSTR], [T.LPCWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('OpenSCManagerW');},
    OpenServiceA: function() {return (Fn(T.SC_HANDLE, [[T.SC_HANDLE], [T.LPCSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('OpenServiceA');},
    OpenServiceW: function() {return (Fn(T.SC_HANDLE, [[T.SC_HANDLE], [T.LPCWSTR], [T.DWORD]], [['dllimport'], ['stdcall']]))('OpenServiceW');},
    QueryServiceStatus: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.LPSERVICE_STATUS]], [['dllimport'], ['stdcall']]))('QueryServiceStatus');},
    QueryServiceStatusEx: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.SC_STATUS_TYPE], [T.LPBYTE], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('QueryServiceStatusEx');},
    QueryServiceConfigA: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.LPQUERY_SERVICE_CONFIGA], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('QueryServiceConfigA');},
    QueryServiceConfigW: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.LPQUERY_SERVICE_CONFIGW], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('QueryServiceConfigW');},
    QueryServiceConfig2A: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.LPBYTE], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('QueryServiceConfig2A');},
    QueryServiceConfig2W: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.LPBYTE], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('QueryServiceConfig2W');},
    QueryServiceLockStatusA: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.LPQUERY_SERVICE_LOCK_STATUSA], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('QueryServiceLockStatusA');},
    QueryServiceLockStatusW: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.LPQUERY_SERVICE_LOCK_STATUSW], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('QueryServiceLockStatusW');},
    QueryServiceObjectSecurity: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR], [T.DWORD], [T.LPDWORD]], [['dllimport'], ['stdcall']]))('QueryServiceObjectSecurity');},
    RegisterServiceCtrlHandlerA: function() {return (Fn(T.SERVICE_STATUS_HANDLE, [[T.LPCSTR], [T.LPHANDLER_FUNCTION]], [['dllimport'], ['stdcall']]))('RegisterServiceCtrlHandlerA');},
    RegisterServiceCtrlHandlerW: function() {return (Fn(T.SERVICE_STATUS_HANDLE, [[T.LPCWSTR], [T.LPHANDLER_FUNCTION]], [['dllimport'], ['stdcall']]))('RegisterServiceCtrlHandlerW');},
    RegisterServiceCtrlHandlerExA: function() {return (Fn(T.SERVICE_STATUS_HANDLE, [[T.LPCSTR], [T.LPHANDLER_FUNCTION_EX], [T.LPVOID]], [['dllimport'], ['stdcall']]))('RegisterServiceCtrlHandlerExA');},
    RegisterServiceCtrlHandlerExW: function() {return (Fn(T.SERVICE_STATUS_HANDLE, [[T.LPCWSTR], [T.LPHANDLER_FUNCTION_EX], [T.LPVOID]], [['dllimport'], ['stdcall']]))('RegisterServiceCtrlHandlerExW');},
    SetServiceObjectSecurity: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR]], [['dllimport'], ['stdcall']]))('SetServiceObjectSecurity');},
    SetServiceStatus: function() {return (Fn(T.BOOL, [[T.SERVICE_STATUS_HANDLE], [T.LPSERVICE_STATUS]], [['dllimport'], ['stdcall']]))('SetServiceStatus');},
    StartServiceA: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [Pointer(T.LPCSTR)]], [['dllimport'], ['stdcall']]))('StartServiceA');},
    StartServiceW: function() {return (Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [Pointer(T.LPCWSTR)]], [['dllimport'], ['stdcall']]))('StartServiceW');},
    StartServiceCtrlDispatcherA: function() {return (Fn(T.BOOL, [[Pointer(T.SERVICE_TABLE_ENTRYA)]], [['dllimport'], ['stdcall']]))('StartServiceCtrlDispatcherA');},
    StartServiceCtrlDispatcherW: function() {return (Fn(T.BOOL, [[Pointer(T.SERVICE_TABLE_ENTRYW)]], [['dllimport'], ['stdcall']]))('StartServiceCtrlDispatcherW');},
    UnlockServiceDatabase: function() {return (Fn(T.BOOL, [[T.SC_LOCK]], [['dllimport'], ['stdcall']]))('UnlockServiceDatabase');},
    ImmAssociateContext: function() {return (Fn(T.HIMC, [[T.HWND], [T.HIMC]], [['stdcall']]))('ImmAssociateContext');},
    ImmAssociateContextEx: function() {return (Fn(T.BOOL, [[T.HWND], [T.HIMC], [T.DWORD]], [['stdcall']]))('ImmAssociateContextEx');},
    ImmConfigureIMEA: function() {return (Fn(T.BOOL, [[T.HKL], [T.HWND], [T.DWORD], [T.LPVOID]], [['stdcall']]))('ImmConfigureIMEA');},
    ImmConfigureIMEW: function() {return (Fn(T.BOOL, [[T.HKL], [T.HWND], [T.DWORD], [T.LPVOID]], [['stdcall']]))('ImmConfigureIMEW');},
    ImmCreateContext: function() {return (Fn(T.HIMC, [[null]], [['stdcall']]))('ImmCreateContext');},
    ImmDestroyContext: function() {return (Fn(T.BOOL, [[T.HIMC, 'hIMC']], [['stdcall']]))('ImmDestroyContext');},
    ImmDisableIME: function() {return (Fn(T.BOOL, [[T.DWORD, 'idThread']], [['stdcall']]))('ImmDisableIME');},
    ImmEnumRegisterWordA: function() {return (Fn(T.UINT, [[T.HKL], [T.REGISTERWORDENUMPROCA], [T.LPCSTR], [T.DWORD], [T.LPCSTR], [T.LPVOID]], [['stdcall']]))('ImmEnumRegisterWordA');},
    ImmEnumRegisterWordW: function() {return (Fn(T.UINT, [[T.HKL], [T.REGISTERWORDENUMPROCW], [T.LPCWSTR], [T.DWORD], [T.LPCWSTR], [T.LPVOID]], [['stdcall']]))('ImmEnumRegisterWordW');},
    ImmEscapeA: function() {return (Fn(T.LRESULT, [[T.HKL], [T.HIMC], [T.UINT], [T.LPVOID]], [['stdcall']]))('ImmEscapeA');},
    ImmEscapeW: function() {return (Fn(T.LRESULT, [[T.HKL], [T.HIMC], [T.UINT], [T.LPVOID]], [['stdcall']]))('ImmEscapeW');},
    ImmGetCandidateListA: function() {return (Fn(T.DWORD, [[T.HIMC], [T.DWORD], [T.LPCANDIDATELIST], [T.DWORD]], [['stdcall']]))('ImmGetCandidateListA');},
    ImmGetCandidateListW: function() {return (Fn(T.DWORD, [[T.HIMC], [T.DWORD], [T.LPCANDIDATELIST], [T.DWORD]], [['stdcall']]))('ImmGetCandidateListW');},
    ImmGetCandidateListCountA: function() {return (Fn(T.DWORD, [[T.HIMC], [T.LPDWORD]], [['stdcall']]))('ImmGetCandidateListCountA');},
    ImmGetCandidateListCountW: function() {return (Fn(T.DWORD, [[T.HIMC], [T.LPDWORD]], [['stdcall']]))('ImmGetCandidateListCountW');},
    ImmGetCandidateWindow: function() {return (Fn(T.BOOL, [[T.HIMC], [T.DWORD], [T.LPCANDIDATEFORM]], [['stdcall']]))('ImmGetCandidateWindow');},
    ImmGetCompositionFontA: function() {return (Fn(T.BOOL, [[T.HIMC], [T.LPLOGFONTA]], [['stdcall']]))('ImmGetCompositionFontA');},
    ImmGetCompositionFontW: function() {return (Fn(T.BOOL, [[T.HIMC], [T.LPLOGFONTW]], [['stdcall']]))('ImmGetCompositionFontW');},
    ImmSetCompositionFontA: function() {return (Fn(T.BOOL, [[T.HIMC], [T.LPLOGFONTA]], [['stdcall']]))('ImmSetCompositionFontA');},
    ImmSetCompositionFontW: function() {return (Fn(T.BOOL, [[T.HIMC], [T.LPLOGFONTW]], [['stdcall']]))('ImmSetCompositionFontW');},
    ImmGetCompositionStringA: function() {return (Fn(T.LONG, [[T.HIMC], [T.DWORD], [T.LPVOID], [T.DWORD]], [['stdcall']]))('ImmGetCompositionStringA');},
    ImmGetCompositionStringW: function() {return (Fn(T.LONG, [[T.HIMC], [T.DWORD], [T.LPVOID], [T.DWORD]], [['stdcall']]))('ImmGetCompositionStringW');},
    ImmGetCompositionWindow: function() {return (Fn(T.BOOL, [[T.HIMC], [T.LPCOMPOSITIONFORM]], [['stdcall']]))('ImmGetCompositionWindow');},
    ImmGetContext: function() {return (Fn(T.HIMC, [[T.HWND]], [['stdcall']]))('ImmGetContext');},
    ImmGetConversionListA: function() {return (Fn(T.DWORD, [[T.HKL], [T.HIMC], [T.LPCSTR], [T.LPCANDIDATELIST], [T.DWORD], [T.UINT]], [['stdcall']]))('ImmGetConversionListA');},
    ImmGetConversionListW: function() {return (Fn(T.DWORD, [[T.HKL], [T.HIMC], [T.LPCWSTR], [T.LPCANDIDATELIST], [T.DWORD], [T.UINT]], [['stdcall']]))('ImmGetConversionListW');},
    ImmGetConversionStatus: function() {return (Fn(T.BOOL, [[T.HIMC], [T.LPDWORD], [T.LPDWORD]], [['stdcall']]))('ImmGetConversionStatus');},
    ImmGetDefaultIMEWnd: function() {return (Fn(T.HWND, [[T.HWND]], [['stdcall']]))('ImmGetDefaultIMEWnd');},
    ImmGetDescriptionA: function() {return (Fn(T.UINT, [[T.HKL], [T.LPSTR], [T.UINT]], [['stdcall']]))('ImmGetDescriptionA');},
    ImmGetDescriptionW: function() {return (Fn(T.UINT, [[T.HKL], [T.LPWSTR], [T.UINT]], [['stdcall']]))('ImmGetDescriptionW');},
    ImmGetGuideLineA: function() {return (Fn(T.DWORD, [[T.HIMC], [T.DWORD], [T.LPSTR], [T.DWORD]], [['stdcall']]))('ImmGetGuideLineA');},
    ImmGetGuideLineW: function() {return (Fn(T.DWORD, [[T.HIMC], [T.DWORD], [T.LPWSTR], [T.DWORD]], [['stdcall']]))('ImmGetGuideLineW');},
    ImmGetIMEFileNameA: function() {return (Fn(T.UINT, [[T.HKL], [T.LPSTR], [T.UINT]], [['stdcall']]))('ImmGetIMEFileNameA');},
    ImmGetIMEFileNameW: function() {return (Fn(T.UINT, [[T.HKL], [T.LPWSTR], [T.UINT]], [['stdcall']]))('ImmGetIMEFileNameW');},
    ImmGetImeMenuItemsA: function() {return (Fn(T.DWORD, [[T.HIMC], [T.DWORD], [T.DWORD], [T.LPIMEMENUITEMINFOA], [T.LPIMEMENUITEMINFOA], [T.DWORD]], [['stdcall']]))('ImmGetImeMenuItemsA');},
    ImmGetImeMenuItemsW: function() {return (Fn(T.DWORD, [[T.HIMC], [T.DWORD], [T.DWORD], [T.LPIMEMENUITEMINFOW], [T.LPIMEMENUITEMINFOW], [T.DWORD]], [['stdcall']]))('ImmGetImeMenuItemsW');},
    ImmGetOpenStatus: function() {return (Fn(T.BOOL, [[T.HIMC]], [['stdcall']]))('ImmGetOpenStatus');},
    ImmGetProperty: function() {return (Fn(T.DWORD, [[T.HKL], [T.DWORD]], [['stdcall']]))('ImmGetProperty');},
    ImmGetRegisterWordStyleA: function() {return (Fn(T.UINT, [[T.HKL], [T.UINT], [T.LPSTYLEBUFA]], [['stdcall']]))('ImmGetRegisterWordStyleA');},
    ImmGetRegisterWordStyleW: function() {return (Fn(T.UINT, [[T.HKL], [T.UINT], [T.LPSTYLEBUFW]], [['stdcall']]))('ImmGetRegisterWordStyleW');},
    ImmGetStatusWindowPos: function() {return (Fn(T.BOOL, [[T.HIMC], [T.LPPOINT]], [['stdcall']]))('ImmGetStatusWindowPos');},
    ImmGetVirtualKey: function() {return (Fn(T.UINT, [[T.HWND]], [['stdcall']]))('ImmGetVirtualKey');},
    ImmInstallIMEA: function() {return (Fn(T.HKL, [[T.LPCSTR], [T.LPCSTR]], [['stdcall']]))('ImmInstallIMEA');},
    ImmInstallIMEW: function() {return (Fn(T.HKL, [[T.LPCWSTR], [T.LPCWSTR]], [['stdcall']]))('ImmInstallIMEW');},
    ImmIsIME: function() {return (Fn(T.BOOL, [[T.HKL]], [['stdcall']]))('ImmIsIME');},
    ImmIsUIMessageA: function() {return (Fn(T.BOOL, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['stdcall']]))('ImmIsUIMessageA');},
    ImmIsUIMessageW: function() {return (Fn(T.BOOL, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['stdcall']]))('ImmIsUIMessageW');},
    ImmNotifyIME: function() {return (Fn(T.BOOL, [[T.HIMC], [T.DWORD], [T.DWORD], [T.DWORD]], [['stdcall']]))('ImmNotifyIME');},
    ImmProcessKey: function() {return (Fn(T.BOOL, [[T.HWND], [T.HKL], [T.UINT], [T.LPARAM], [T.DWORD]], [['stdcall']]))('ImmProcessKey');},
    ImmRegisterWordA: function() {return (Fn(T.BOOL, [[T.HKL], [T.LPCSTR], [T.DWORD], [T.LPCSTR]], [['stdcall']]))('ImmRegisterWordA');},
    ImmRegisterWordW: function() {return (Fn(T.BOOL, [[T.HKL], [T.LPCWSTR], [T.DWORD], [T.LPCWSTR]], [['stdcall']]))('ImmRegisterWordW');},
    ImmReleaseContext: function() {return (Fn(T.BOOL, [[T.HWND], [T.HIMC]], [['stdcall']]))('ImmReleaseContext');},
    ImmSetCandidateWindow: function() {return (Fn(T.BOOL, [[T.HIMC], [T.LPCANDIDATEFORM]], [['stdcall']]))('ImmSetCandidateWindow');},
    ImmSetCompositionStringA: function() {return (Fn(T.BOOL, [[T.HIMC], [T.DWORD], [T.LPCVOID], [T.DWORD], [T.LPCVOID], [T.DWORD]], [['stdcall']]))('ImmSetCompositionStringA');},
    ImmSetCompositionStringW: function() {return (Fn(T.BOOL, [[T.HIMC], [T.DWORD], [T.LPCVOID], [T.DWORD], [T.LPCVOID], [T.DWORD]], [['stdcall']]))('ImmSetCompositionStringW');},
    ImmSetCompositionWindow: function() {return (Fn(T.BOOL, [[T.HIMC], [T.LPCOMPOSITIONFORM]], [['stdcall']]))('ImmSetCompositionWindow');},
    ImmSetConversionStatus: function() {return (Fn(T.BOOL, [[T.HIMC], [T.DWORD], [T.DWORD]], [['stdcall']]))('ImmSetConversionStatus');},
    ImmSetOpenStatus: function() {return (Fn(T.BOOL, [[T.HIMC], [T.BOOL]], [['stdcall']]))('ImmSetOpenStatus');},
    ImmSetStatusWindowPos: function() {return (Fn(T.BOOL, [[T.HIMC], [T.LPPOINT]], [['stdcall']]))('ImmSetStatusWindowPos');},
    ImmSimulateHotKey: function() {return (Fn(T.BOOL, [[T.HWND], [T.DWORD]], [['stdcall']]))('ImmSimulateHotKey');},
    ImmUnregisterWordA: function() {return (Fn(T.BOOL, [[T.HKL], [T.LPCSTR], [T.DWORD], [T.LPCSTR]], [['stdcall']]))('ImmUnregisterWordA');},
    ImmUnregisterWordW: function() {return (Fn(T.BOOL, [[T.HKL], [T.LPCWSTR], [T.DWORD], [T.LPCWSTR]], [['stdcall']]))('ImmUnregisterWordW');},
    _commode: function() {return (T.i32)('_commode');},
    _imp____badioinfo: function() {return (Pointer(Pointer(Pointer(T.ioinfo))))('_imp____badioinfo');},
    _imp____pioinfo: function() {return (Pointer(Pointer(Pointer(T.ioinfo))))('_imp____pioinfo');},
    _dowildcard: function() {return (T.i32)('_dowildcard');},
    _newmode: function() {return (T.i32)('_newmode');},
    _imp____winitenv: function() {return (Pointer(Pointer(Pointer(T.wchar_t))))('_imp____winitenv');},
    _imp____initenv: function() {return (Pointer(Pointer(Pointer(T.char))))('_imp____initenv');},
    _imp___acmdln: function() {return (Pointer(Pointer(T.char)))('_imp___acmdln');},
    _imp___wcmdln: function() {return (Pointer(Pointer(T.char)))('_imp___wcmdln');},
    _amsg_exit: function() {return (Fn(null, [[T.i32]], [['dllimport'], ['cdecl']]))('_amsg_exit');},
    _setargv: function() {return (Fn(T.i32, [[null]], [['cdecl']]))('_setargv');},
    __setargv: function() {return (Fn(T.i32, [[null]], [['cdecl']]))('__setargv');},
    _wsetargv: function() {return (Fn(T.i32, [[null]], [['cdecl']]))('_wsetargv');},
    __wsetargv: function() {return (Fn(T.i32, [[null]], [['cdecl']]))('__wsetargv');},
    main: function() {return (Fn(T.i32, [[T.i32, '_Argc'], [Pointer(Pointer(T.char)), '_Argv'], [Pointer(Pointer(T.char)), '_Env']], [['cdecl']]))('main');},
    wmain: function() {return (Fn(T.i32, [[T.i32, '_Argc'], [Pointer(Pointer(T.wchar_t)), '_Argv'], [Pointer(Pointer(T.wchar_t)), '_Env']], [['cdecl']]))('wmain');},
    __getmainargs: function() {return (Fn(T.i32, [[Pointer(T.i32), '_Argc'], [Pointer(Pointer(Pointer(T.char))), '_Argv'], [Pointer(Pointer(Pointer(T.char))), '_Env'], [T.i32, '_DoWildCard'], [Pointer(T._startupinfo), '_StartInfo']], [['dllimport'], ['cdecl']]))('__getmainargs');},
    __wgetmainargs: function() {return (Fn(T.i32, [[Pointer(T.i32), '_Argc'], [Pointer(Pointer(Pointer(T.wchar_t))), '_Argv'], [Pointer(Pointer(Pointer(T.wchar_t))), '_Env'], [T.i32, '_DoWildCard'], [Pointer(T._startupinfo), '_StartInfo']], [['dllimport'], ['cdecl']]))('__wgetmainargs');},
    __native_startup_state: function() {return (T.__enative_startup_state)('__native_startup_state');},
    __native_startup_lock: function() {return (Pointer(null, [['volatile']]))('__native_startup_lock');},
    __native_dllmain_reason: function() {return (T.u32)('__native_dllmain_reason');},
    __native_vcclrit_reason: function() {return (T.u32)('__native_vcclrit_reason');},
    __set_app_type: function() {return (Fn(null, [[T.i32]], [['dllimport'], ['cdecl']]))('__set_app_type');},
    _encode_pointer: function() {return (Fn(Pointer(null), [[Pointer(null)]], [['cdecl']]))('_encode_pointer');},
    _encoded_null: function() {return (Fn(Pointer(null), [], [['cdecl']]))('_encoded_null');},
    _decode_pointer: function() {return (Fn(Pointer(null), [[Pointer(null)]], [['cdecl']]))('_decode_pointer');},
    _ValidateImageBase: function() {return (Fn(T.BOOL, [[T.PBYTE, 'pImageBase']], [['cdecl']]))('_ValidateImageBase');},
    _FindPESection: function() {return (Fn(T.PIMAGE_SECTION_HEADER, [[T.PBYTE, 'pImageBase'], [T.DWORD_PTR, 'rva']], [['cdecl']]))('_FindPESection');},
    _IsNonwritableInCurrentImage: function() {return (Fn(T.BOOL, [[T.PBYTE, 'pTarget']], [['cdecl']]))('_IsNonwritableInCurrentImage');},
    _cgets: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Buffer']], [['dllimport']]))('_cgets');},
    _cprintf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_cprintf');},
    _cputs: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str']], [['dllimport'], ['cdecl']]))('_cputs');},
    _cscanf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_cscanf');},
    _cscanf_l: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_cscanf_l');},
    _getch: function() {return (Fn(T.i32, [[null]], [['dllimport'], ['cdecl']]))('_getch');},
    _getche: function() {return (Fn(T.i32, [[null]], [['dllimport'], ['cdecl']]))('_getche');},
    _vcprintf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vcprintf');},
    _cprintf_p: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_cprintf_p');},
    _vcprintf_p: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vcprintf_p');},
    _cprintf_l: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_cprintf_l');},
    _vcprintf_l: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vcprintf_l');},
    _cprintf_p_l: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_cprintf_p_l');},
    _vcprintf_p_l: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vcprintf_p_l');},
    _kbhit: function() {return (Fn(T.i32, [[null]], [['dllimport'], ['cdecl']]))('_kbhit');},
    _inp: function() {return (Fn(T.i32, [[T.u16]], [['cdecl']]))('_inp');},
    _inpw: function() {return (Fn(T.u16, [[T.u16]], [['cdecl']]))('_inpw');},
    _inpd: function() {return (Fn(T.u32, [[T.u16]], [['cdecl']]))('_inpd');},
    _outp: function() {return (Fn(T.i32, [[T.u16], [T.i32]], [['cdecl']]))('_outp');},
    _outpw: function() {return (Fn(T.u16, [[T.u16], [T.u16]], [['cdecl']]))('_outpw');},
    _outpd: function() {return (Fn(T.u32, [[T.u16], [T.u32]], [['cdecl']]))('_outpd');},
    _putch: function() {return (Fn(T.i32, [[T.i32, '_Ch']], [['dllimport'], ['cdecl']]))('_putch');},
    _ungetch: function() {return (Fn(T.i32, [[T.i32, '_Ch']], [['dllimport'], ['cdecl']]))('_ungetch');},
    _getch_nolock: function() {return (Fn(T.i32, [[null]], [['dllimport'], ['cdecl']]))('_getch_nolock');},
    _getche_nolock: function() {return (Fn(T.i32, [[null]], [['dllimport'], ['cdecl']]))('_getche_nolock');},
    _putch_nolock: function() {return (Fn(T.i32, [[T.i32, '_Ch']], [['dllimport'], ['cdecl']]))('_putch_nolock');},
    _ungetch_nolock: function() {return (Fn(T.i32, [[T.i32, '_Ch']], [['dllimport'], ['cdecl']]))('_ungetch_nolock');},
    _cgetws: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Buffer']], [['dllimport']]))('_cgetws');},
    _getwch: function() {return (Fn(T.wint_t, [[null]], [['dllimport'], ['cdecl']]))('_getwch');},
    _getwche: function() {return (Fn(T.wint_t, [[null]], [['dllimport'], ['cdecl']]))('_getwche');},
    _putwch: function() {return (Fn(T.wint_t, [[T.wchar_t, '_WCh']], [['dllimport'], ['cdecl']]))('_putwch');},
    _ungetwch: function() {return (Fn(T.wint_t, [[T.wint_t, '_WCh']], [['dllimport'], ['cdecl']]))('_ungetwch');},
    _cputws: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_String']], [['dllimport'], ['cdecl']]))('_cputws');},
    _cwprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_cwprintf');},
    _cwscanf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_cwscanf');},
    _cwscanf_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_cwscanf_l');},
    _vcwprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vcwprintf');},
    _cwprintf_p: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_cwprintf_p');},
    _vcwprintf_p: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vcwprintf_p');},
    _cwprintf_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_cwprintf_l');},
    _vcwprintf_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vcwprintf_l');},
    _cwprintf_p_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_cwprintf_p_l');},
    _vcwprintf_p_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vcwprintf_p_l');},
    _putwch_nolock: function() {return (Fn(T.wint_t, [[T.wchar_t, '_WCh']], [['dllimport'], ['cdecl']]))('_putwch_nolock');},
    _getwch_nolock: function() {return (Fn(T.wint_t, [[null]], [['dllimport'], ['cdecl']]))('_getwch_nolock');},
    _getwche_nolock: function() {return (Fn(T.wint_t, [[null]], [['dllimport'], ['cdecl']]))('_getwche_nolock');},
    _ungetwch_nolock: function() {return (Fn(T.wint_t, [[T.wint_t, '_WCh']], [['dllimport'], ['cdecl']]))('_ungetwch_nolock');},
    cgets: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Buffer']], [['cdecl']]))('cgets');},
    cprintf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], '...'], [['cdecl']]))('cprintf');},
    cputs: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str']], [['cdecl']]))('cputs');},
    cscanf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], '...'], [['cdecl']]))('cscanf');},
    getch: function() {return (Fn(T.i32, [[null]], [['cdecl']]))('getch');},
    getche: function() {return (Fn(T.i32, [[null]], [['cdecl']]))('getche');},
    kbhit: function() {return (Fn(T.i32, [[null]], [['cdecl']]))('kbhit');},
    putch: function() {return (Fn(T.i32, [[T.i32, '_Ch']], [['cdecl']]))('putch');},
    ungetch: function() {return (Fn(T.i32, [[T.i32, '_Ch']], [['cdecl']]))('ungetch');},
    inp: function() {return (Fn(T.i32, [[T.u16]], [['cdecl']]))('inp');},
    inpw: function() {return (Fn(T.u16, [[T.u16]], [['cdecl']]))('inpw');},
    outp: function() {return (Fn(T.i32, [[T.u16], [T.i32]], [['cdecl']]))('outp');},
    outpw: function() {return (Fn(T.u16, [[T.u16], [T.u16]], [['cdecl']]))('outpw');},
    _controlfp: function() {return (Fn(T.u32, [[T.u32, 'unNew'], [T.u32, 'unMask']], [['dllimport'], ['cdecl'], ['nothrow']]))('_controlfp');},
    _controlfp_s: function() {return (Fn(T.errno_t, [[Pointer(T.u32), '_CurrentState'], [T.u32, '_NewValue'], [T.u32, '_Mask']], [['dllimport'], ['cdecl']]))('_controlfp_s');},
    _control87: function() {return (Fn(T.u32, [[T.u32, 'unNew'], [T.u32, 'unMask']], [['dllimport'], ['cdecl'], ['nothrow']]))('_control87');},
    _clearfp: function() {return (Fn(T.u32, [[null]], [['dllimport'], ['cdecl'], ['nothrow']]))('_clearfp');},
    _statusfp: function() {return (Fn(T.u32, [[null]], [['dllimport'], ['cdecl'], ['nothrow']]))('_statusfp');},
    _fpreset: function() {return (Fn(null, [[null]], [['cdecl'], ['nothrow']]))('_fpreset');},
    fpreset: function() {return (Fn(null, [[null]], [['cdecl'], ['nothrow']]))('fpreset');},
    __fpecode: function() {return (Fn(Pointer(T.i32), [[null]], [['dllimport'], ['cdecl'], ['nothrow']]))('__fpecode');},
    _chgsign: function() {return (Fn(T.f64, [[T.f64, '_X']], [['dllimport'], ['cdecl'], ['nothrow']]))('_chgsign');},
    _copysign: function() {return (Fn(T.f64, [[T.f64, '_Number'], [T.f64, '_Sign']], [['dllimport'], ['cdecl'], ['nothrow']]))('_copysign');},
    _logb: function() {return (Fn(T.f64, [[T.f64]], [['dllimport'], ['cdecl'], ['nothrow']]))('_logb');},
    _nextafter: function() {return (Fn(T.f64, [[T.f64], [T.f64]], [['dllimport'], ['cdecl'], ['nothrow']]))('_nextafter');},
    _scalb: function() {return (Fn(T.f64, [[T.f64], [T.i32]], [['dllimport'], ['cdecl'], ['nothrow']]))('_scalb');},
    _finite: function() {return (Fn(T.i32, [[T.f64]], [['dllimport'], ['cdecl'], ['nothrow']]))('_finite');},
    _fpclass: function() {return (Fn(T.i32, [[T.f64]], [['dllimport'], ['cdecl'], ['nothrow']]))('_fpclass');},
    _isnan: function() {return (Fn(T.i32, [[T.f64]], [['dllimport'], ['cdecl'], ['nothrow']]))('_isnan');},
    _chgsignl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('_chgsignl');},
    _imp___HUGE: function() {return (Pointer(T.f64))('_imp___HUGE');},
    __mingw_raise_matherr: function() {return (Fn(null, [[T.i32, 'typ'], [Pointer(T.char), 'name'], [T.f64, 'a1'], [T.f64, 'a2'], [T.f64, 'rslt']]))('__mingw_raise_matherr');},
    __mingw_setusermatherr: function() {return (Fn(null, [[Pointer(Fn(T.i32, [[Pointer(Struct('_exception', null))]]))]]))('__mingw_setusermatherr');},
    __setusermatherr: function() {return (Fn(null, [[Pointer(Fn(T.i32, [[Pointer(Struct('_exception', null))]]))]], [['dllimport']]))('__setusermatherr');},
    sin: function() {return (Fn(T.f64, [[T.f64, '_X']], [['cdecl']]))('sin');},
    cos: function() {return (Fn(T.f64, [[T.f64, '_X']], [['cdecl']]))('cos');},
    tan: function() {return (Fn(T.f64, [[T.f64, '_X']], [['cdecl']]))('tan');},
    sinh: function() {return (Fn(T.f64, [[T.f64, '_X']], [['cdecl']]))('sinh');},
    cosh: function() {return (Fn(T.f64, [[T.f64, '_X']], [['cdecl']]))('cosh');},
    tanh: function() {return (Fn(T.f64, [[T.f64, '_X']], [['cdecl']]))('tanh');},
    asin: function() {return (Fn(T.f64, [[T.f64, '_X']], [['cdecl']]))('asin');},
    acos: function() {return (Fn(T.f64, [[T.f64, '_X']], [['cdecl']]))('acos');},
    atan: function() {return (Fn(T.f64, [[T.f64, '_X']], [['cdecl']]))('atan');},
    atan2: function() {return (Fn(T.f64, [[T.f64, '_Y'], [T.f64, '_X']], [['cdecl']]))('atan2');},
    exp: function() {return (Fn(T.f64, [[T.f64, '_X']], [['cdecl']]))('exp');},
    log: function() {return (Fn(T.f64, [[T.f64, '_X']], [['cdecl']]))('log');},
    log10: function() {return (Fn(T.f64, [[T.f64, '_X']], [['cdecl']]))('log10');},
    pow: function() {return (Fn(T.f64, [[T.f64, '_X'], [T.f64, '_Y']], [['cdecl']]))('pow');},
    sqrt: function() {return (Fn(T.f64, [[T.f64, '_X']], [['cdecl']]))('sqrt');},
    ceil: function() {return (Fn(T.f64, [[T.f64, '_X']], [['cdecl']]))('ceil');},
    floor: function() {return (Fn(T.f64, [[T.f64, '_X']], [['cdecl']]))('floor');},
    fabs: function() {return (Fn(T.f64, [[T.f64, '_X']], [['cdecl']]))('fabs');},
    ldexp: function() {return (Fn(T.f64, [[T.f64, '_X'], [T.i32, '_Y']], [['cdecl']]))('ldexp');},
    frexp: function() {return (Fn(T.f64, [[T.f64, '_X'], [Pointer(T.i32), '_Y']], [['cdecl']]))('frexp');},
    modf: function() {return (Fn(T.f64, [[T.f64, '_X'], [Pointer(T.f64), '_Y']], [['cdecl']]))('modf');},
    fmod: function() {return (Fn(T.f64, [[T.f64, '_X'], [T.f64, '_Y']], [['cdecl']]))('fmod');},
    sincos: function() {return (Fn(null, [[T.f64, '__x'], [Pointer(T.f64), 'p_sin'], [Pointer(T.f64), 'p_cos']], [['cdecl']]))('sincos');},
    sincosl: function() {return (Fn(null, [[T.f128, '__x'], [Pointer(T.f128), 'p_sin'], [Pointer(T.f128), 'p_cos']], [['cdecl']]))('sincosl');},
    sincosf: function() {return (Fn(null, [[T.f32, '__x'], [Pointer(T.f32), 'p_sin'], [Pointer(T.f32), 'p_cos']], [['cdecl']]))('sincosf');},
    _cabs: function() {return (Fn(T.f64, [[Struct('_complex', null), '_ComplexA']], [['dllimport'], ['cdecl']]))('_cabs');},
    _hypot: function() {return (Fn(T.f64, [[T.f64, '_X'], [T.f64, '_Y']], [['cdecl']]))('_hypot');},
    _j0: function() {return (Fn(T.f64, [[T.f64, '_X']], [['dllimport'], ['cdecl']]))('_j0');},
    _j1: function() {return (Fn(T.f64, [[T.f64, '_X']], [['dllimport'], ['cdecl']]))('_j1');},
    _jn: function() {return (Fn(T.f64, [[T.i32, '_X'], [T.f64, '_Y']], [['dllimport'], ['cdecl']]))('_jn');},
    _y0: function() {return (Fn(T.f64, [[T.f64, '_X']], [['dllimport'], ['cdecl']]))('_y0');},
    _y1: function() {return (Fn(T.f64, [[T.f64, '_X']], [['dllimport'], ['cdecl']]))('_y1');},
    _yn: function() {return (Fn(T.f64, [[T.i32, '_X'], [T.f64, '_Y']], [['dllimport'], ['cdecl']]))('_yn');},
    _matherr: function() {return (Fn(T.i32, [[Pointer(Struct('_exception', null))]], [['dllimport'], ['cdecl']]))('_matherr');},
    j0: function() {return (Fn(T.f64, [[T.f64]], [['dllimport'], ['cdecl']]))('j0');},
    j1: function() {return (Fn(T.f64, [[T.f64]], [['dllimport'], ['cdecl']]))('j1');},
    jn: function() {return (Fn(T.f64, [[T.i32], [T.f64]], [['dllimport'], ['cdecl']]))('jn');},
    y0: function() {return (Fn(T.f64, [[T.f64]], [['dllimport'], ['cdecl']]))('y0');},
    y1: function() {return (Fn(T.f64, [[T.f64]], [['dllimport'], ['cdecl']]))('y1');},
    yn: function() {return (Fn(T.f64, [[T.i32], [T.f64]], [['dllimport'], ['cdecl']]))('yn');},
    chgsign: function() {return (Fn(T.f64, [[T.f64]], [['dllimport'], ['cdecl']]))('chgsign');},
    finite: function() {return (Fn(T.i32, [[T.f64]], [['dllimport'], ['cdecl']]))('finite');},
    fpclass: function() {return (Fn(T.i32, [[T.f64]], [['dllimport'], ['cdecl']]))('fpclass');},
    _set_SSE2_enable: function() {return (Fn(T.i32, [[T.i32, '_Flag']], [['dllimport'], ['cdecl']]))('_set_SSE2_enable');},
    __fpclassifyl: function() {return (Fn(T.i32, [[T.f128]], [['cdecl']]))('__fpclassifyl');},
    __fpclassifyf: function() {return (Fn(T.i32, [[T.f32]], [['cdecl']]))('__fpclassifyf');},
    __fpclassify: function() {return (Fn(T.i32, [[T.f64]], [['cdecl']]))('__fpclassify');},
    __isnan: function() {return (Fn(T.i32, [[T.f64]], [['cdecl']]))('__isnan');},
    __isnanf: function() {return (Fn(T.i32, [[T.f32]], [['cdecl']]))('__isnanf');},
    __isnanl: function() {return (Fn(T.i32, [[T.f128]], [['cdecl']]))('__isnanl');},
    __signbit: function() {return (Fn(T.i32, [[T.f64]], [['cdecl']]))('__signbit');},
    __signbitf: function() {return (Fn(T.i32, [[T.f32]], [['cdecl']]))('__signbitf');},
    __signbitl: function() {return (Fn(T.i32, [[T.f128]], [['cdecl']]))('__signbitl');},
    sinf: function() {return (Fn(T.f32, [[T.f32, '_X']], [['cdecl']]))('sinf');},
    sinl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('sinl');},
    cosf: function() {return (Fn(T.f32, [[T.f32, '_X']], [['cdecl']]))('cosf');},
    cosl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('cosl');},
    tanf: function() {return (Fn(T.f32, [[T.f32, '_X']], [['cdecl']]))('tanf');},
    tanl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('tanl');},
    asinf: function() {return (Fn(T.f32, [[T.f32, '_X']], [['cdecl']]))('asinf');},
    asinl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('asinl');},
    acosf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('acosf');},
    acosl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('acosl');},
    atanf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('atanf');},
    atanl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('atanl');},
    atan2f: function() {return (Fn(T.f32, [[T.f32], [T.f32]], [['cdecl']]))('atan2f');},
    atan2l: function() {return (Fn(T.f128, [[T.f128], [T.f128]], [['cdecl']]))('atan2l');},
    sinhf: function() {return (Fn(T.f32, [[T.f32, '_X']], [['cdecl']]))('sinhf');},
    sinhl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('sinhl');},
    coshf: function() {return (Fn(T.f32, [[T.f32, '_X']], [['cdecl']]))('coshf');},
    coshl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('coshl');},
    tanhf: function() {return (Fn(T.f32, [[T.f32, '_X']], [['cdecl']]))('tanhf');},
    tanhl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('tanhl');},
    acosh: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('acosh');},
    acoshf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('acoshf');},
    acoshl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('acoshl');},
    asinh: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('asinh');},
    asinhf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('asinhf');},
    asinhl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('asinhl');},
    atanh: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('atanh');},
    atanhf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('atanhf');},
    atanhl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('atanhl');},
    expf: function() {return (Fn(T.f32, [[T.f32, '_X']], [['cdecl']]))('expf');},
    expl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('expl');},
    exp2: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('exp2');},
    exp2f: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('exp2f');},
    exp2l: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('exp2l');},
    expm1: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('expm1');},
    expm1f: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('expm1f');},
    expm1l: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('expm1l');},
    frexpf: function() {return (Fn(T.f32, [[T.f32, '_X'], [Pointer(T.i32), '_Y']]))('frexpf');},
    frexpl: function() {return (Fn(T.f128, [[T.f128], [Pointer(T.i32)]], [['cdecl']]))('frexpl');},
    ilogb: function() {return (Fn(T.i32, [[T.f64]], [['cdecl']]))('ilogb');},
    ilogbf: function() {return (Fn(T.i32, [[T.f32]], [['cdecl']]))('ilogbf');},
    ilogbl: function() {return (Fn(T.i32, [[T.f128]], [['cdecl']]))('ilogbl');},
    ldexpf: function() {return (Fn(T.f32, [[T.f32, '_X'], [T.i32, '_Y']], [['cdecl']]))('ldexpf');},
    ldexpl: function() {return (Fn(T.f128, [[T.f128], [T.i32]], [['cdecl']]))('ldexpl');},
    logf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('logf');},
    logl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('logl');},
    log10f: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('log10f');},
    log10l: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('log10l');},
    log1p: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('log1p');},
    log1pf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('log1pf');},
    log1pl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('log1pl');},
    log2: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('log2');},
    log2f: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('log2f');},
    log2l: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('log2l');},
    logb: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('logb');},
    logbf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('logbf');},
    logbl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('logbl');},
    modff: function() {return (Fn(T.f32, [[T.f32], [Pointer(T.f32)]], [['cdecl']]))('modff');},
    modfl: function() {return (Fn(T.f128, [[T.f128], [Pointer(T.f128)]], [['cdecl']]))('modfl');},
    scalbn: function() {return (Fn(T.f64, [[T.f64], [T.i32]], [['cdecl']]))('scalbn');},
    scalbnf: function() {return (Fn(T.f32, [[T.f32], [T.i32]], [['cdecl']]))('scalbnf');},
    scalbnl: function() {return (Fn(T.f128, [[T.f128], [T.i32]], [['cdecl']]))('scalbnl');},
    scalbln: function() {return (Fn(T.f64, [[T.f64], [T.i32]], [['cdecl']]))('scalbln');},
    scalblnf: function() {return (Fn(T.f32, [[T.f32], [T.i32]], [['cdecl']]))('scalblnf');},
    scalblnl: function() {return (Fn(T.f128, [[T.f128], [T.i32]], [['cdecl']]))('scalblnl');},
    cbrt: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('cbrt');},
    cbrtf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('cbrtf');},
    cbrtl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('cbrtl');},
    fabsf: function() {return (Fn(T.f32, [[T.f32, 'x']], [['cdecl']]))('fabsf');},
    fabsl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('fabsl');},
    hypot: function() {return (Fn(T.f64, [[T.f64], [T.f64]], [['cdecl']]))('hypot');},
    hypotf: function() {return (Fn(T.f32, [[T.f32, 'x'], [T.f32, 'y']], [['cdecl']]))('hypotf');},
    hypotl: function() {return (Fn(T.f128, [[T.f128], [T.f128]], [['cdecl']]))('hypotl');},
    powf: function() {return (Fn(T.f32, [[T.f32, '_X'], [T.f32, '_Y']], [['cdecl']]))('powf');},
    powl: function() {return (Fn(T.f128, [[T.f128], [T.f128]], [['cdecl']]))('powl');},
    sqrtf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('sqrtf');},
    sqrtl: function() {return (Fn(T.f128, [[T.f128]]))('sqrtl');},
    erf: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('erf');},
    erff: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('erff');},
    erfl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('erfl');},
    erfc: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('erfc');},
    erfcf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('erfcf');},
    erfcl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('erfcl');},
    lgamma: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('lgamma');},
    lgammaf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('lgammaf');},
    lgammal: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('lgammal');},
    tgamma: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('tgamma');},
    tgammaf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('tgammaf');},
    tgammal: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('tgammal');},
    ceilf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('ceilf');},
    ceill: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('ceill');},
    floorf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('floorf');},
    floorl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('floorl');},
    nearbyint: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('nearbyint');},
    nearbyintf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('nearbyintf');},
    nearbyintl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('nearbyintl');},
    rint: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('rint');},
    rintf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('rintf');},
    rintl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('rintl');},
    lrint: function() {return (Fn(T.i32, [[T.f64]], [['cdecl']]))('lrint');},
    lrintf: function() {return (Fn(T.i32, [[T.f32]], [['cdecl']]))('lrintf');},
    lrintl: function() {return (Fn(T.i32, [[T.f128]], [['cdecl']]))('lrintl');},
    llrint: function() {return (Fn(T.i64, [[T.f64]], [['cdecl']]))('llrint');},
    llrintf: function() {return (Fn(T.i64, [[T.f32]], [['cdecl']]))('llrintf');},
    llrintl: function() {return (Fn(T.i64, [[T.f128]], [['cdecl']]))('llrintl');},
    round: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('round');},
    roundf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('roundf');},
    roundl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('roundl');},
    lround: function() {return (Fn(T.i32, [[T.f64]], [['cdecl']]))('lround');},
    lroundf: function() {return (Fn(T.i32, [[T.f32]], [['cdecl']]))('lroundf');},
    lroundl: function() {return (Fn(T.i32, [[T.f128]], [['cdecl']]))('lroundl');},
    llround: function() {return (Fn(T.i64, [[T.f64]], [['cdecl']]))('llround');},
    llroundf: function() {return (Fn(T.i64, [[T.f32]], [['cdecl']]))('llroundf');},
    llroundl: function() {return (Fn(T.i64, [[T.f128]], [['cdecl']]))('llroundl');},
    trunc: function() {return (Fn(T.f64, [[T.f64]], [['cdecl']]))('trunc');},
    truncf: function() {return (Fn(T.f32, [[T.f32]], [['cdecl']]))('truncf');},
    truncl: function() {return (Fn(T.f128, [[T.f128]], [['cdecl']]))('truncl');},
    fmodf: function() {return (Fn(T.f32, [[T.f32], [T.f32]], [['cdecl']]))('fmodf');},
    fmodl: function() {return (Fn(T.f128, [[T.f128], [T.f128]], [['cdecl']]))('fmodl');},
    remainder: function() {return (Fn(T.f64, [[T.f64], [T.f64]], [['cdecl']]))('remainder');},
    remainderf: function() {return (Fn(T.f32, [[T.f32], [T.f32]], [['cdecl']]))('remainderf');},
    remainderl: function() {return (Fn(T.f128, [[T.f128], [T.f128]], [['cdecl']]))('remainderl');},
    remquo: function() {return (Fn(T.f64, [[T.f64], [T.f64], [Pointer(T.i32)]], [['cdecl']]))('remquo');},
    remquof: function() {return (Fn(T.f32, [[T.f32], [T.f32], [Pointer(T.i32)]], [['cdecl']]))('remquof');},
    remquol: function() {return (Fn(T.f128, [[T.f128], [T.f128], [Pointer(T.i32)]], [['cdecl']]))('remquol');},
    copysign: function() {return (Fn(T.f64, [[T.f64], [T.f64]], [['cdecl']]))('copysign');},
    copysignf: function() {return (Fn(T.f32, [[T.f32], [T.f32]], [['cdecl']]))('copysignf');},
    copysignl: function() {return (Fn(T.f128, [[T.f128], [T.f128]], [['cdecl']]))('copysignl');},
    nan: function() {return (Fn(T.f64, [[Pointer(T.char), 'tagp']], [['cdecl']]))('nan');},
    nanf: function() {return (Fn(T.f32, [[Pointer(T.char), 'tagp']], [['cdecl']]))('nanf');},
    nanl: function() {return (Fn(T.f128, [[Pointer(T.char), 'tagp']], [['cdecl']]))('nanl');},
    nextafter: function() {return (Fn(T.f64, [[T.f64], [T.f64]], [['cdecl']]))('nextafter');},
    nextafterf: function() {return (Fn(T.f32, [[T.f32], [T.f32]], [['cdecl']]))('nextafterf');},
    nextafterl: function() {return (Fn(T.f128, [[T.f128], [T.f128]], [['cdecl']]))('nextafterl');},
    nexttoward: function() {return (Fn(T.f64, [[T.f64], [T.f128]], [['cdecl']]))('nexttoward');},
    nexttowardf: function() {return (Fn(T.f32, [[T.f32], [T.f128]], [['cdecl']]))('nexttowardf');},
    nexttowardl: function() {return (Fn(T.f128, [[T.f128], [T.f128]], [['cdecl']]))('nexttowardl');},
    fdim: function() {return (Fn(T.f64, [[T.f64, 'x'], [T.f64, 'y']], [['cdecl']]))('fdim');},
    fdimf: function() {return (Fn(T.f32, [[T.f32, 'x'], [T.f32, 'y']], [['cdecl']]))('fdimf');},
    fdiml: function() {return (Fn(T.f128, [[T.f128, 'x'], [T.f128, 'y']], [['cdecl']]))('fdiml');},
    fmax: function() {return (Fn(T.f64, [[T.f64], [T.f64]], [['cdecl']]))('fmax');},
    fmaxf: function() {return (Fn(T.f32, [[T.f32], [T.f32]], [['cdecl']]))('fmaxf');},
    fmaxl: function() {return (Fn(T.f128, [[T.f128], [T.f128]], [['cdecl']]))('fmaxl');},
    fmin: function() {return (Fn(T.f64, [[T.f64], [T.f64]], [['cdecl']]))('fmin');},
    fminf: function() {return (Fn(T.f32, [[T.f32], [T.f32]], [['cdecl']]))('fminf');},
    fminl: function() {return (Fn(T.f128, [[T.f128], [T.f128]], [['cdecl']]))('fminl');},
    fma: function() {return (Fn(T.f64, [[T.f64], [T.f64], [T.f64]], [['cdecl']]))('fma');},
    fmaf: function() {return (Fn(T.f32, [[T.f32], [T.f32], [T.f32]], [['cdecl']]))('fmaf');},
    fmal: function() {return (Fn(T.f128, [[T.f128], [T.f128], [T.f128]], [['cdecl']]))('fmal');},
    _hypotf: function() {return (Fn(T.f32, [[T.f32, '_X'], [T.f32, '_Y']], [['dllimport'], ['cdecl']]))('_hypotf');},
    _copysignf: function() {return (Fn(T.f32, [[T.f32, '_Number'], [T.f32, '_Sign']], [['dllimport'], ['cdecl']]))('_copysignf');},
    _chgsignf: function() {return (Fn(T.f32, [[T.f32, '_X']], [['dllimport'], ['cdecl']]))('_chgsignf');},
    _logbf: function() {return (Fn(T.f32, [[T.f32, '_X']], [['dllimport'], ['cdecl']]))('_logbf');},
    _nextafterf: function() {return (Fn(T.f32, [[T.f32, '_X'], [T.f32, '_Y']], [['dllimport'], ['cdecl']]))('_nextafterf');},
    _finitef: function() {return (Fn(T.i32, [[T.f32, '_X']], [['dllimport'], ['cdecl']]))('_finitef');},
    _isnanf: function() {return (Fn(T.i32, [[T.f32, '_X']], [['dllimport'], ['cdecl']]))('_isnanf');},
    _fpclassf: function() {return (Fn(T.i32, [[T.f32, '_X']], [['dllimport'], ['cdecl']]))('_fpclassf');},
    _imp___iob: function() {return (Pointer(Pointer(T.FILE)))('_imp___iob');},
    __mingw_sscanf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Src'], [Pointer(T.char), '_Format'], '...'], [['format', 'gnu_scanf', {"__rule":"constant","_0":"2"}, {"__rule":"constant","_0":"3"}], ['nonnull', {"__rule":"constant","_0":"2"}], ['cdecl']]))('__mingw_sscanf');},
    __mingw_vsscanf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str'], [Pointer(T.char), 'Format'], [T.va_list, 'argp']], [['format', 'gnu_scanf', {"__rule":"constant","_0":"2"}, {"__rule":"constant","_0":"0"}], ['nonnull', {"__rule":"constant","_0":"2"}], ['cdecl']]))('__mingw_vsscanf');},
    __mingw_scanf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], '...'], [['format', 'gnu_scanf', {"__rule":"constant","_0":"1"}, {"__rule":"constant","_0":"2"}], ['nonnull', {"__rule":"constant","_0":"1"}], ['cdecl']]))('__mingw_scanf');},
    __mingw_vscanf: function() {return (Fn(T.i32, [[Pointer(T.char), 'Format'], [T.va_list, 'argp']], [['format', 'gnu_scanf', {"__rule":"constant","_0":"1"}, {"__rule":"constant","_0":"0"}], ['nonnull', {"__rule":"constant","_0":"1"}], ['cdecl']]))('__mingw_vscanf');},
    __mingw_fscanf: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.char), '_Format'], '...'], [['format', 'gnu_scanf', {"__rule":"constant","_0":"2"}, {"__rule":"constant","_0":"3"}], ['nonnull', {"__rule":"constant","_0":"2"}], ['cdecl']]))('__mingw_fscanf');},
    __mingw_vfscanf: function() {return (Fn(T.i32, [[Pointer(T.FILE), 'fp'], [Pointer(T.char), 'Format'], [T.va_list, 'argp']], [['format', 'gnu_scanf', {"__rule":"constant","_0":"2"}, {"__rule":"constant","_0":"0"}], ['nonnull', {"__rule":"constant","_0":"2"}], ['cdecl']]))('__mingw_vfscanf');},
    __mingw_vsnprintf: function() {return (Fn(T.i32, [[Pointer(T.char), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.char), '_Format'], [T.va_list, '_ArgList']], [['format', 'gnu_printf', {"__rule":"constant","_0":"3"}, {"__rule":"constant","_0":"0"}], ['nonnull', {"__rule":"constant","_0":"3"}], ['cdecl']]))('__mingw_vsnprintf');},
    __mingw_snprintf: function() {return (Fn(T.i32, [[Pointer(T.char), 's'], [T.size_t, 'n'], [Pointer(T.char), 'format'], '...'], [['format', 'gnu_printf', {"__rule":"constant","_0":"3"}, {"__rule":"constant","_0":"4"}], ['nonnull', {"__rule":"constant","_0":"3"}], ['cdecl']]))('__mingw_snprintf');},
    __mingw_printf: function() {return (Fn(T.i32, [[Pointer(T.char)], '...'], [['format', 'gnu_printf', {"__rule":"constant","_0":"1"}, {"__rule":"constant","_0":"2"}], ['nonnull', {"__rule":"constant","_0":"1"}], ['cdecl'], ['nothrow']]))('__mingw_printf');},
    __mingw_vprintf: function() {return (Fn(T.i32, [[Pointer(T.char)], [T.va_list]], [['format', 'gnu_printf', {"__rule":"constant","_0":"1"}, {"__rule":"constant","_0":"0"}], ['nonnull', {"__rule":"constant","_0":"1"}], ['cdecl'], ['nothrow']]))('__mingw_vprintf');},
    __mingw_fprintf: function() {return (Fn(T.i32, [[Pointer(T.FILE)], [Pointer(T.char)], '...'], [['format', 'gnu_printf', {"__rule":"constant","_0":"2"}, {"__rule":"constant","_0":"3"}], ['nonnull', {"__rule":"constant","_0":"2"}], ['cdecl'], ['nothrow']]))('__mingw_fprintf');},
    __mingw_vfprintf: function() {return (Fn(T.i32, [[Pointer(T.FILE)], [Pointer(T.char)], [T.va_list]], [['format', 'gnu_printf', {"__rule":"constant","_0":"2"}, {"__rule":"constant","_0":"0"}], ['nonnull', {"__rule":"constant","_0":"2"}], ['cdecl'], ['nothrow']]))('__mingw_vfprintf');},
    __mingw_sprintf: function() {return (Fn(T.i32, [[Pointer(T.char)], [Pointer(T.char)], '...'], [['format', 'gnu_printf', {"__rule":"constant","_0":"2"}, {"__rule":"constant","_0":"3"}], ['nonnull', {"__rule":"constant","_0":"2"}], ['cdecl'], ['nothrow']]))('__mingw_sprintf');},
    __mingw_vsprintf: function() {return (Fn(T.i32, [[Pointer(T.char)], [Pointer(T.char)], [T.va_list]], [['format', 'gnu_printf', {"__rule":"constant","_0":"2"}, {"__rule":"constant","_0":"0"}], ['nonnull', {"__rule":"constant","_0":"2"}], ['cdecl'], ['nothrow']]))('__mingw_vsprintf');},
    __mingw_asprintf: function() {return (Fn(T.i32, [[Pointer(Pointer(T.char))], [Pointer(T.char)], '...'], [['format', 'gnu_printf', {"__rule":"constant","_0":"2"}, {"__rule":"constant","_0":"3"}], ['nonnull', {"__rule":"constant","_0":"1"}, {"__rule":"constant","_0":"2"}], ['cdecl'], ['nothrow']]))('__mingw_asprintf');},
    __mingw_vasprintf: function() {return (Fn(T.i32, [[Pointer(Pointer(T.char))], [Pointer(T.char)], [T.va_list]], [['format', 'gnu_printf', {"__rule":"constant","_0":"2"}, {"__rule":"constant","_0":"0"}], ['nonnull', {"__rule":"constant","_0":"1"}, {"__rule":"constant","_0":"2"}], ['cdecl'], ['nothrow']]))('__mingw_vasprintf');},
    fprintf: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.char), '_Format'], '...'], [['cdecl']]))('fprintf');},
    printf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], '...'], [['cdecl']]))('printf');},
    sprintf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Dest'], [Pointer(T.char), '_Format'], '...'], [['cdecl']]))('sprintf');},
    vfprintf: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.char), '_Format'], [T.va_list, '_ArgList']], [['cdecl']]))('vfprintf');},
    vprintf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], [T.va_list, '_ArgList']], [['cdecl']]))('vprintf');},
    vsprintf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Dest'], [Pointer(T.char), '_Format'], [T.va_list, '_Args']], [['cdecl']]))('vsprintf');},
    fscanf: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.char), '_Format'], '...'], [['cdecl']]))('fscanf');},
    scanf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], '...'], [['cdecl']]))('scanf');},
    sscanf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Src'], [Pointer(T.char), '_Format'], '...'], [['cdecl']]))('sscanf');},
    vscanf: function() {return (Fn(T.i32, [[Pointer(T.char), 'Format'], [T.va_list, 'argp']], [['cdecl']]))('vscanf');},
    vfscanf: function() {return (Fn(T.i32, [[Pointer(T.FILE), 'fp'], [Pointer(T.char), 'Format'], [T.va_list, 'argp']], [['cdecl']]))('vfscanf');},
    vsscanf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str'], [Pointer(T.char), 'Format'], [T.va_list, 'argp']], [['cdecl']]))('vsscanf');},
    _filbuf: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_filbuf');},
    _flsbuf: function() {return (Fn(T.i32, [[T.i32, '_Ch'], [Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_flsbuf');},
    _fsopen: function() {return (Fn(Pointer(T.FILE), [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_Mode'], [T.i32, '_ShFlag']], [['dllimport'], ['cdecl']]))('_fsopen');},
    clearerr: function() {return (Fn(null, [[Pointer(T.FILE), '_File']], [['cdecl']]))('clearerr');},
    fclose: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File']], [['cdecl']]))('fclose');},
    _fcloseall: function() {return (Fn(T.i32, [[null]], [['dllimport'], ['cdecl']]))('_fcloseall');},
    _fdopen: function() {return (Fn(Pointer(T.FILE), [[T.i32, '_FileHandle'], [Pointer(T.char), '_Mode']], [['dllimport'], ['cdecl']]))('_fdopen');},
    feof: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File']], [['cdecl']]))('feof');},
    ferror: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File']], [['cdecl']]))('ferror');},
    fflush: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File']], [['cdecl']]))('fflush');},
    fgetc: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File']], [['cdecl']]))('fgetc');},
    _fgetchar: function() {return (Fn(T.i32, [[null]], [['dllimport'], ['cdecl']]))('_fgetchar');},
    fgetpos: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.fpos_t), '_Pos']], [['cdecl']]))('fgetpos');},
    fgetpos64: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.fpos_t), '_Pos']], [['cdecl']]))('fgetpos64');},
    fgets: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Buf'], [T.i32, '_MaxCount'], [Pointer(T.FILE), '_File']], [['cdecl']]))('fgets');},
    _fileno: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_fileno');},
    _tempnam: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_DirName'], [Pointer(T.char), '_FilePrefix']], [['dllimport'], ['cdecl']]))('_tempnam');},
    _flushall: function() {return (Fn(T.i32, [[null]], [['dllimport'], ['cdecl']]))('_flushall');},
    fopen: function() {return (Fn(Pointer(T.FILE), [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_Mode']], [['cdecl']]))('fopen');},
    fopen64: function() {return (Fn(Pointer(T.FILE), [[Pointer(T.char), 'filename'], [Pointer(T.char), 'mode']]))('fopen64');},
    fputc: function() {return (Fn(T.i32, [[T.i32, '_Ch'], [Pointer(T.FILE), '_File']], [['cdecl']]))('fputc');},
    _fputchar: function() {return (Fn(T.i32, [[T.i32, '_Ch']], [['dllimport'], ['cdecl']]))('_fputchar');},
    fputs: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str'], [Pointer(T.FILE), '_File']], [['cdecl']]))('fputs');},
    fread: function() {return (Fn(T.size_t, [[Pointer(null), '_DstBuf'], [T.size_t, '_ElementSize'], [T.size_t, '_Count'], [Pointer(T.FILE), '_File']], [['cdecl']]))('fread');},
    freopen: function() {return (Fn(Pointer(T.FILE), [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_Mode'], [Pointer(T.FILE), '_File']], [['cdecl']]))('freopen');},
    _fscanf_l: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.char), '_Format'], [T._locale_t, 'locale'], '...'], [['cdecl']]))('_fscanf_l');},
    fsetpos: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.fpos_t), '_Pos']], [['cdecl']]))('fsetpos');},
    fsetpos64: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.fpos_t), '_Pos']], [['cdecl']]))('fsetpos64');},
    fseek: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [T.i32, '_Offset'], [T.i32, '_Origin']], [['cdecl']]))('fseek');},
    fseeko64: function() {return (Fn(T.i32, [[Pointer(T.FILE), 'stream'], [T._off64_t, 'offset'], [T.i32, 'whence']]))('fseeko64');},
    fseeko: function() {return (Fn(T.i32, [[Pointer(T.FILE), 'stream'], [T._off_t, 'offset'], [T.i32, 'whence']]))('fseeko');},
    ftell: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File']], [['cdecl']]))('ftell');},
    ftello: function() {return (Fn(T._off_t, [[Pointer(T.FILE), 'stream']]))('ftello');},
    ftello64: function() {return (Fn(T._off64_t, [[Pointer(T.FILE), 'stream']]))('ftello64');},
    _fseeki64: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [T.i64, '_Offset'], [T.i32, '_Origin']], [['cdecl']]))('_fseeki64');},
    _ftelli64: function() {return (Fn(T.i64, [[Pointer(T.FILE), '_File']], [['cdecl']]))('_ftelli64');},
    fwrite: function() {return (Fn(T.size_t, [[Pointer(null), '_Str'], [T.size_t, '_Size'], [T.size_t, '_Count'], [Pointer(T.FILE), '_File']], [['cdecl']]))('fwrite');},
    getc: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File']], [['cdecl']]))('getc');},
    getchar: function() {return (Fn(T.i32, [[null]], [['cdecl']]))('getchar');},
    _getmaxstdio: function() {return (Fn(T.i32, [[null]], [['dllimport'], ['cdecl']]))('_getmaxstdio');},
    gets: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Buffer']], [['cdecl']]))('gets');},
    _getw: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File']], [['cdecl']]))('_getw');},
    _pclose: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_pclose');},
    _popen: function() {return (Fn(Pointer(T.FILE), [[Pointer(T.char), '_Command'], [Pointer(T.char), '_Mode']], [['dllimport'], ['cdecl']]))('_popen');},
    putc: function() {return (Fn(T.i32, [[T.i32, '_Ch'], [Pointer(T.FILE), '_File']], [['cdecl']]))('putc');},
    putchar: function() {return (Fn(T.i32, [[T.i32, '_Ch']], [['cdecl']]))('putchar');},
    puts: function() {return (Fn(T.i32, [[Pointer(T.char), '_Str']], [['cdecl']]))('puts');},
    _putw: function() {return (Fn(T.i32, [[T.i32, '_Word'], [Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_putw');},
    remove: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename']], [['cdecl']]))('remove');},
    rename: function() {return (Fn(T.i32, [[Pointer(T.char), '_OldFilename'], [Pointer(T.char), '_NewFilename']], [['cdecl']]))('rename');},
    _unlink: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename']], [['dllimport'], ['cdecl']]))('_unlink');},
    unlink: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename']], [['cdecl']]))('unlink');},
    rewind: function() {return (Fn(null, [[Pointer(T.FILE), '_File']], [['cdecl']]))('rewind');},
    _rmtmp: function() {return (Fn(T.i32, [[null]], [['dllimport'], ['cdecl']]))('_rmtmp');},
    _scanf_l: function() {return (Fn(T.i32, [[Pointer(T.char), 'format'], [T._locale_t, 'locale'], '...'], [['cdecl']]))('_scanf_l');},
    setbuf: function() {return (Fn(null, [[Pointer(T.FILE), '_File'], [Pointer(T.char), '_Buffer']], [['cdecl']]))('setbuf');},
    _setmaxstdio: function() {return (Fn(T.i32, [[T.i32, '_Max']], [['dllimport'], ['cdecl']]))('_setmaxstdio');},
    _set_output_format: function() {return (Fn(T.u32, [[T.u32, '_Format']], [['dllimport'], ['cdecl']]))('_set_output_format');},
    _get_output_format: function() {return (Fn(T.u32, [[null]], [['dllimport'], ['cdecl']]))('_get_output_format');},
    __mingw_set_output_format: function() {return (Fn(T.u32, [[T.u32, '_Format']], [['cdecl']]))('__mingw_set_output_format');},
    __mingw_get_output_format: function() {return (Fn(T.u32, [[null]], [['cdecl']]))('__mingw_get_output_format');},
    setvbuf: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.char), '_Buf'], [T.i32, '_Mode'], [T.size_t, '_Size']], [['cdecl']]))('setvbuf');},
    _scprintf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_scprintf');},
    _sscanf_l: function() {return (Fn(T.i32, [[Pointer(T.char), 'buffer'], [Pointer(T.char), 'format'], [T._locale_t, 'locale'], '...'], [['cdecl']]))('_sscanf_l');},
    _snscanf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Src'], [T.size_t, '_MaxCount'], [Pointer(T.char), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_snscanf');},
    _snscanf_l: function() {return (Fn(T.i32, [[Pointer(T.char), 'input'], [T.size_t, 'length'], [Pointer(T.char), 'format'], [T._locale_t, 'locale'], '...'], [['dllimport'], ['cdecl']]))('_snscanf_l');},
    tmpfile: function() {return (Fn(Pointer(T.FILE), [[null]], [['cdecl']]))('tmpfile');},
    tmpnam: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Buffer']], [['cdecl']]))('tmpnam');},
    ungetc: function() {return (Fn(T.i32, [[T.i32, '_Ch'], [Pointer(T.FILE), '_File']], [['cdecl']]))('ungetc');},
    _snprintf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Dest'], [T.size_t, '_Count'], [Pointer(T.char), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_snprintf');},
    _snprintf_l: function() {return (Fn(T.i32, [[Pointer(T.char), 'buffer'], [T.size_t, 'count'], [Pointer(T.char), 'format'], [T._locale_t, 'locale'], '...'], [['dllimport'], ['cdecl']]))('_snprintf_l');},
    _vsnprintf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Dest'], [T.size_t, '_Count'], [Pointer(T.char), '_Format'], [T.va_list, '_Args']], [['dllimport'], ['cdecl']]))('_vsnprintf');},
    _vsnprintf_l: function() {return (Fn(T.i32, [[Pointer(T.char), 'buffer'], [T.size_t, 'count'], [Pointer(T.char), 'format'], [T._locale_t, 'locale'], [T.va_list, 'argptr']], [['dllimport'], ['cdecl']]))('_vsnprintf_l');},
    _sprintf_l: function() {return (Fn(T.i32, [[Pointer(T.char), 'buffer'], [Pointer(T.char), 'format'], [T._locale_t, 'locale'], '...'], [['cdecl']]))('_sprintf_l');},
    vsnprintf: function() {return (Fn(T.i32, [[Pointer(T.char), 'd'], [T.size_t, 'n'], [Pointer(T.char), 'format'], [T.va_list, 'arg']], [['cdecl']]))('vsnprintf');},
    snprintf: function() {return (Fn(T.i32, [[Pointer(T.char), 's'], [T.size_t, 'n'], [Pointer(T.char), 'format'], '...'], [['cdecl']]))('snprintf');},
    _vscprintf: function() {return (Fn(T.i32, [[Pointer(T.char), '_Format'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vscprintf');},
    _set_printf_count_output: function() {return (Fn(T.i32, [[T.i32, '_Value']], [['dllimport'], ['cdecl']]))('_set_printf_count_output');},
    _get_printf_count_output: function() {return (Fn(T.i32, [[null]], [['dllimport'], ['cdecl']]))('_get_printf_count_output');},
    __mingw_swscanf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Src'], [Pointer(T.wchar_t), '_Format'], '...'], [['nonnull', {"__rule":"constant","_0":"2"}], ['cdecl']]))('__mingw_swscanf');},
    __mingw_vswscanf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str'], [Pointer(T.wchar_t), 'Format'], [T.va_list, 'argp']], [['nonnull', {"__rule":"constant","_0":"2"}], ['cdecl']]))('__mingw_vswscanf');},
    __mingw_wscanf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...'], [['nonnull', {"__rule":"constant","_0":"1"}], ['cdecl']]))('__mingw_wscanf');},
    __mingw_vwscanf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), 'Format'], [T.va_list, 'argp']], [['nonnull', {"__rule":"constant","_0":"1"}], ['cdecl']]))('__mingw_vwscanf');},
    __mingw_fwscanf: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], '...'], [['nonnull', {"__rule":"constant","_0":"2"}], ['cdecl']]))('__mingw_fwscanf');},
    __mingw_vfwscanf: function() {return (Fn(T.i32, [[Pointer(T.FILE), 'fp'], [Pointer(T.wchar_t), 'Format'], [T.va_list, 'argp']], [['nonnull', {"__rule":"constant","_0":"2"}], ['cdecl']]))('__mingw_vfwscanf');},
    __mingw_fwprintf: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], '...'], [['nonnull', {"__rule":"constant","_0":"2"}], ['cdecl']]))('__mingw_fwprintf');},
    __mingw_wprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...'], [['nonnull', {"__rule":"constant","_0":"1"}], ['cdecl']]))('__mingw_wprintf');},
    __mingw_vfwprintf: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']], [['nonnull', {"__rule":"constant","_0":"2"}], ['cdecl']]))('__mingw_vfwprintf');},
    __mingw_vwprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']], [['nonnull', {"__rule":"constant","_0":"1"}], ['cdecl']]))('__mingw_vwprintf');},
    __mingw_swprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t)], [Pointer(T.wchar_t)], '...'], [['nonnull', {"__rule":"constant","_0":"2"}], ['cdecl']]))('__mingw_swprintf');},
    __mingw_vswprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t)], [Pointer(T.wchar_t)], [T.va_list]], [['nonnull', {"__rule":"constant","_0":"2"}], ['cdecl']]))('__mingw_vswprintf');},
    __mingw_snwprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), 's'], [T.size_t, 'n'], [Pointer(T.wchar_t), 'format'], '...'], [['nonnull', {"__rule":"constant","_0":"3"}], ['cdecl']]))('__mingw_snwprintf');},
    __mingw_vsnwprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t)], [T.size_t], [Pointer(T.wchar_t)], [T.va_list]], [['nonnull', {"__rule":"constant","_0":"3"}], ['cdecl']]))('__mingw_vsnwprintf');},
    fwscanf: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], '...'], [['cdecl']]))('fwscanf');},
    swscanf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Src'], [Pointer(T.wchar_t), '_Format'], '...'], [['cdecl']]))('swscanf');},
    wscanf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...'], [['cdecl']]))('wscanf');},
    vwscanf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t)], [T.va_list]], [['cdecl']]))('vwscanf');},
    vfwscanf: function() {return (Fn(T.i32, [[Pointer(T.FILE)], [Pointer(T.wchar_t)], [T.va_list]], [['cdecl']]))('vfwscanf');},
    vswscanf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t)], [Pointer(T.wchar_t)], [T.va_list]], [['cdecl']]))('vswscanf');},
    fwprintf: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], '...'], [['cdecl']]))('fwprintf');},
    wprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...'], [['cdecl']]))('wprintf');},
    vfwprintf: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']], [['cdecl']]))('vfwprintf');},
    vwprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']], [['cdecl']]))('vwprintf');},
    swprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t)], [Pointer(T.wchar_t)], '...'], [['dllimport'], ['cdecl']]))('swprintf');},
    vswprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t)], [Pointer(T.wchar_t)], [T.va_list]], [['dllimport'], ['cdecl']]))('vswprintf');},
    _wfsopen: function() {return (Fn(Pointer(T.FILE), [[Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_Mode'], [T.i32, '_ShFlag']], [['dllimport'], ['cdecl']]))('_wfsopen');},
    fgetwc: function() {return (Fn(T.wint_t, [[Pointer(T.FILE), '_File']], [['cdecl']]))('fgetwc');},
    _fgetwchar: function() {return (Fn(T.wint_t, [[null]], [['dllimport'], ['cdecl']]))('_fgetwchar');},
    fputwc: function() {return (Fn(T.wint_t, [[T.wchar_t, '_Ch'], [Pointer(T.FILE), '_File']], [['cdecl']]))('fputwc');},
    _fputwchar: function() {return (Fn(T.wint_t, [[T.wchar_t, '_Ch']], [['dllimport'], ['cdecl']]))('_fputwchar');},
    getwc: function() {return (Fn(T.wint_t, [[Pointer(T.FILE), '_File']], [['cdecl']]))('getwc');},
    getwchar: function() {return (Fn(T.wint_t, [[null]], [['cdecl']]))('getwchar');},
    putwc: function() {return (Fn(T.wint_t, [[T.wchar_t, '_Ch'], [Pointer(T.FILE), '_File']], [['cdecl']]))('putwc');},
    putwchar: function() {return (Fn(T.wint_t, [[T.wchar_t, '_Ch']], [['cdecl']]))('putwchar');},
    ungetwc: function() {return (Fn(T.wint_t, [[T.wint_t, '_Ch'], [Pointer(T.FILE), '_File']], [['cdecl']]))('ungetwc');},
    fgetws: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Dst'], [T.i32, '_SizeInWords'], [Pointer(T.FILE), '_File']], [['cdecl']]))('fgetws');},
    fputws: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str'], [Pointer(T.FILE), '_File']], [['cdecl']]))('fputws');},
    _getws: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_String']], [['dllimport'], ['cdecl']]))('_getws');},
    _putws: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Str']], [['dllimport'], ['cdecl']]))('_putws');},
    _scwprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_scwprintf');},
    _swprintf_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), 'buffer'], [T.size_t, 'count'], [Pointer(T.wchar_t), 'format'], [T._locale_t, 'locale'], '...'], [['dllimport'], ['cdecl']]))('_swprintf_l');},
    _swprintf_c: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_SizeInWords'], [Pointer(T.wchar_t), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_swprintf_c');},
    _vswprintf_c: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_SizeInWords'], [Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vswprintf_c');},
    _snwprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Dest'], [T.size_t, '_Count'], [Pointer(T.wchar_t), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_snwprintf');},
    _vsnwprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Dest'], [T.size_t, '_Count'], [Pointer(T.wchar_t), '_Format'], [T.va_list, '_Args']], [['dllimport'], ['cdecl']]))('_vsnwprintf');},
    snwprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), 's'], [T.size_t, 'n'], [Pointer(T.wchar_t), 'format'], '...'], [['cdecl']]))('snwprintf');},
    vsnwprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t)], [T.size_t], [Pointer(T.wchar_t)], [T.va_list]], [['cdecl']]))('vsnwprintf');},
    _fwprintf_p: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_fwprintf_p');},
    _wprintf_p: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_wprintf_p');},
    _vfwprintf_p: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vfwprintf_p');},
    _vwprintf_p: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vwprintf_p');},
    _swprintf_p: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_swprintf_p');},
    _vswprintf_p: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vswprintf_p');},
    _scwprintf_p: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_scwprintf_p');},
    _vscwprintf_p: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vscwprintf_p');},
    _wprintf_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_wprintf_l');},
    _wprintf_p_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_wprintf_p_l');},
    _vwprintf_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vwprintf_l');},
    _vwprintf_p_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vwprintf_p_l');},
    _fwprintf_l: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_fwprintf_l');},
    _fwprintf_p_l: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_fwprintf_p_l');},
    _vfwprintf_l: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vfwprintf_l');},
    _vfwprintf_p_l: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vfwprintf_p_l');},
    _swprintf_c_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_swprintf_c_l');},
    _swprintf_p_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_swprintf_p_l');},
    _vswprintf_c_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vswprintf_c_l');},
    _vswprintf_p_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vswprintf_p_l');},
    _scwprintf_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_scwprintf_l');},
    _scwprintf_p_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_scwprintf_p_l');},
    _vscwprintf_p_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vscwprintf_p_l');},
    _snwprintf_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_snwprintf_l');},
    _vsnwprintf_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vsnwprintf_l');},
    _swprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_swprintf');},
    _vswprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Format'], [T.va_list, '_Args']], [['dllimport'], ['cdecl']]))('_vswprintf');},
    __swprintf_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Plocinfo'], '...'], [['dllimport'], ['cdecl']]))('__swprintf_l');},
    _vswprintf_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), 'buffer'], [T.size_t, 'count'], [Pointer(T.wchar_t), 'format'], [T._locale_t, 'locale'], [T.va_list, 'argptr']], [['dllimport'], ['cdecl']]))('_vswprintf_l');},
    __vswprintf_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Plocinfo'], [T.va_list, '_Args']], [['dllimport'], ['cdecl']]))('__vswprintf_l');},
    _wtempnam: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Directory'], [Pointer(T.wchar_t), '_FilePrefix']], [['dllimport'], ['cdecl']]))('_wtempnam');},
    _vscwprintf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vscwprintf');},
    _vscwprintf_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']], [['dllimport'], ['cdecl']]))('_vscwprintf_l');},
    _fwscanf_l: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_fwscanf_l');},
    _swscanf_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Src'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_swscanf_l');},
    _snwscanf: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Src'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], '...'], [['dllimport'], ['cdecl']]))('_snwscanf');},
    _snwscanf_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Src'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_snwscanf_l');},
    _wscanf_l: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...'], [['dllimport'], ['cdecl']]))('_wscanf_l');},
    _wfdopen: function() {return (Fn(Pointer(T.FILE), [[T.i32, '_FileHandle'], [Pointer(T.wchar_t), '_Mode']], [['dllimport'], ['cdecl']]))('_wfdopen');},
    _wfopen: function() {return (Fn(Pointer(T.FILE), [[Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_Mode']], [['dllimport'], ['cdecl']]))('_wfopen');},
    _wfreopen: function() {return (Fn(Pointer(T.FILE), [[Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_Mode'], [Pointer(T.FILE), '_OldFile']], [['dllimport'], ['cdecl']]))('_wfreopen');},
    _wpopen: function() {return (Fn(Pointer(T.FILE), [[Pointer(T.wchar_t), '_Command'], [Pointer(T.wchar_t), '_Mode']], [['dllimport'], ['cdecl']]))('_wpopen');},
    _wremove: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Filename']], [['dllimport'], ['cdecl']]))('_wremove');},
    _wtmpnam: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Buffer']], [['dllimport'], ['cdecl']]))('_wtmpnam');},
    _fgetwc_nolock: function() {return (Fn(T.wint_t, [[Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_fgetwc_nolock');},
    _fputwc_nolock: function() {return (Fn(T.wint_t, [[T.wchar_t, '_Ch'], [Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_fputwc_nolock');},
    _ungetwc_nolock: function() {return (Fn(T.wint_t, [[T.wint_t, '_Ch'], [Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_ungetwc_nolock');},
    _lock_file: function() {return (Fn(null, [[Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_lock_file');},
    _unlock_file: function() {return (Fn(null, [[Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_unlock_file');},
    _fclose_nolock: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_fclose_nolock');},
    _fflush_nolock: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_fflush_nolock');},
    _fread_nolock: function() {return (Fn(T.size_t, [[Pointer(null), '_DstBuf'], [T.size_t, '_ElementSize'], [T.size_t, '_Count'], [Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_fread_nolock');},
    _fseek_nolock: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [T.i32, '_Offset'], [T.i32, '_Origin']], [['dllimport'], ['cdecl']]))('_fseek_nolock');},
    _ftell_nolock: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_ftell_nolock');},
    _fseeki64_nolock: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File'], [T.i64, '_Offset'], [T.i32, '_Origin']], [['dllimport'], ['cdecl']]))('_fseeki64_nolock');},
    _ftelli64_nolock: function() {return (Fn(T.i64, [[Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_ftelli64_nolock');},
    _fwrite_nolock: function() {return (Fn(T.size_t, [[Pointer(null), '_DstBuf'], [T.size_t, '_Size'], [T.size_t, '_Count'], [Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_fwrite_nolock');},
    _ungetc_nolock: function() {return (Fn(T.i32, [[T.i32, '_Ch'], [Pointer(T.FILE), '_File']], [['dllimport'], ['cdecl']]))('_ungetc_nolock');},
    tempnam: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_Directory'], [Pointer(T.char), '_FilePrefix']], [['cdecl']]))('tempnam');},
    fcloseall: function() {return (Fn(T.i32, [[null]], [['cdecl']]))('fcloseall');},
    fdopen: function() {return (Fn(Pointer(T.FILE), [[T.i32, '_FileHandle'], [Pointer(T.char), '_Format']], [['cdecl']]))('fdopen');},
    fgetchar: function() {return (Fn(T.i32, [[null]], [['cdecl']]))('fgetchar');},
    fileno: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File']], [['cdecl']]))('fileno');},
    flushall: function() {return (Fn(T.i32, [[null]], [['cdecl']]))('flushall');},
    fputchar: function() {return (Fn(T.i32, [[T.i32, '_Ch']], [['cdecl']]))('fputchar');},
    getw: function() {return (Fn(T.i32, [[Pointer(T.FILE), '_File']], [['cdecl']]))('getw');},
    putw: function() {return (Fn(T.i32, [[T.i32, '_Ch'], [Pointer(T.FILE), '_File']], [['cdecl']]))('putw');},
    rmtmp: function() {return (Fn(T.i32, [[null]], [['cdecl']]))('rmtmp');},
    __mingw_str_wide_utf8: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), 'wptr'], [Pointer(Pointer(T.char)), 'mbptr'], [Pointer(T.size_t), 'buflen']], [['cdecl']]))('__mingw_str_wide_utf8');},
    __mingw_str_utf8_wide: function() {return (Fn(T.i32, [[Pointer(T.char), 'mbptr'], [Pointer(Pointer(T.wchar_t)), 'wptr'], [Pointer(T.size_t), 'buflen']], [['cdecl']]))('__mingw_str_utf8_wide');},
    __mingw_str_free: function() {return (Fn(null, [[Pointer(null), 'ptr']], [['cdecl']]))('__mingw_str_free');},
    _getcwd: function() {return (Fn(Pointer(T.char), [[Pointer(T.char)], [T.i32]], [['dllimport'], ['cdecl']]))('_getcwd');},
    _access: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_AccessMode']], [['dllimport'], ['cdecl']]))('_access');},
    _chmod: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_Mode']], [['dllimport'], ['cdecl']]))('_chmod');},
    _chsize: function() {return (Fn(T.i32, [[T.i32, '_FileHandle'], [T.i32, '_Size']], [['dllimport'], ['cdecl']]))('_chsize');},
    _close: function() {return (Fn(T.i32, [[T.i32, '_FileHandle']], [['dllimport'], ['cdecl']]))('_close');},
    _commit: function() {return (Fn(T.i32, [[T.i32, '_FileHandle']], [['dllimport'], ['cdecl']]))('_commit');},
    _creat: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_PermissionMode']], [['dllimport'], ['cdecl']]))('_creat');},
    _dup: function() {return (Fn(T.i32, [[T.i32, '_FileHandle']], [['dllimport'], ['cdecl']]))('_dup');},
    _dup2: function() {return (Fn(T.i32, [[T.i32, '_FileHandleSrc'], [T.i32, '_FileHandleDst']], [['dllimport'], ['cdecl']]))('_dup2');},
    _eof: function() {return (Fn(T.i32, [[T.i32, '_FileHandle']], [['dllimport'], ['cdecl']]))('_eof');},
    _filelength: function() {return (Fn(T.i32, [[T.i32, '_FileHandle']], [['dllimport'], ['cdecl']]))('_filelength');},
    _findfirst: function() {return (Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(Struct('_finddata32_t', null)), '_FindData']], [['dllimport'], ['cdecl']]))('_findfirst');},
    _findnext: function() {return (Fn(T.i32, [[T.intptr_t, '_FindHandle'], [Pointer(Struct('_finddata32_t', null)), '_FindData']], [['dllimport'], ['cdecl']]))('_findnext');},
    _findclose: function() {return (Fn(T.i32, [[T.intptr_t, '_FindHandle']], [['dllimport'], ['cdecl']]))('_findclose');},
    _isatty: function() {return (Fn(T.i32, [[T.i32, '_FileHandle']], [['dllimport'], ['cdecl']]))('_isatty');},
    _locking: function() {return (Fn(T.i32, [[T.i32, '_FileHandle'], [T.i32, '_LockMode'], [T.i32, '_NumOfBytes']], [['dllimport'], ['cdecl']]))('_locking');},
    _lseek: function() {return (Fn(T.i32, [[T.i32, '_FileHandle'], [T.i32, '_Offset'], [T.i32, '_Origin']], [['dllimport'], ['cdecl']]))('_lseek');},
    lseek64: function() {return (Fn(T._off64_t, [[T.i32, 'fd'], [T._off64_t, 'offset'], [T.i32, 'whence']]))('lseek64');},
    _mktemp: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_TemplateName']], [['dllimport'], ['cdecl']]))('_mktemp');},
    _pipe: function() {return (Fn(T.i32, [[Pointer(T.i32), '_PtHandles'], [T.u32, '_PipeSize'], [T.i32, '_TextMode']], [['dllimport'], ['cdecl']]))('_pipe');},
    _read: function() {return (Fn(T.i32, [[T.i32, '_FileHandle'], [Pointer(null), '_DstBuf'], [T.u32, '_MaxCharCount']], [['dllimport'], ['cdecl']]))('_read');},
    _setmode: function() {return (Fn(T.i32, [[T.i32, '_FileHandle'], [T.i32, '_Mode']], [['dllimport'], ['cdecl']]))('_setmode');},
    _tell: function() {return (Fn(T.i32, [[T.i32, '_FileHandle']], [['dllimport'], ['cdecl']]))('_tell');},
    _umask: function() {return (Fn(T.i32, [[T.i32, '_Mode']], [['dllimport'], ['cdecl']]))('_umask');},
    _write: function() {return (Fn(T.i32, [[T.i32, '_FileHandle'], [Pointer(null), '_Buf'], [T.u32, '_MaxCharCount']], [['dllimport'], ['cdecl']]))('_write');},
    _filelengthi64: function() {return (Fn(T.i64, [[T.i32, '_FileHandle']], [['dllimport'], ['cdecl']]))('_filelengthi64');},
    _findfirst32i64: function() {return (Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(Struct('_finddata32i64_t', null)), '_FindData']], [['dllimport'], ['cdecl']]))('_findfirst32i64');},
    _findfirst64: function() {return (Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(Struct('__finddata64_t', null)), '_FindData']], [['dllimport'], ['cdecl']]))('_findfirst64');},
    _findfirst64i32: function() {return (Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(Struct('_finddata64i32_t', null)), '_FindData']], [['cdecl']]))('_findfirst64i32');},
    _findnext32i64: function() {return (Fn(T.i32, [[T.intptr_t, '_FindHandle'], [Pointer(Struct('_finddata32i64_t', null)), '_FindData']], [['dllimport'], ['cdecl']]))('_findnext32i64');},
    _findnext64: function() {return (Fn(T.i32, [[T.intptr_t, '_FindHandle'], [Pointer(Struct('__finddata64_t', null)), '_FindData']], [['dllimport'], ['cdecl']]))('_findnext64');},
    _findnext64i32: function() {return (Fn(T.i32, [[T.intptr_t, '_FindHandle'], [Pointer(Struct('_finddata64i32_t', null)), '_FindData']], [['cdecl']]))('_findnext64i32');},
    _lseeki64: function() {return (Fn(T.i64, [[T.i32, '_FileHandle'], [T.i64, '_Offset'], [T.i32, '_Origin']], [['cdecl']]))('_lseeki64');},
    _telli64: function() {return (Fn(T.i64, [[T.i32, '_FileHandle']], [['cdecl']]))('_telli64');},
    chdir: function() {return (Fn(T.i32, [[Pointer(T.char)]], [['cdecl']]))('chdir');},
    getcwd: function() {return (Fn(Pointer(T.char), [[Pointer(T.char)], [T.i32]], [['cdecl']]))('getcwd');},
    mkdir: function() {return (Fn(T.i32, [[Pointer(T.char)]], [['cdecl']]))('mkdir');},
    mktemp: function() {return (Fn(Pointer(T.char), [[Pointer(T.char), '_TemplateName']], [['cdecl']]))('mktemp');},
    rmdir: function() {return (Fn(T.i32, [[Pointer(T.char)]], [['cdecl']]))('rmdir');},
    chmod: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_AccessMode']], [['cdecl']]))('chmod');},
    _sopen_s: function() {return (Fn(T.errno_t, [[Pointer(T.i32), '_FileHandle'], [Pointer(T.char), '_Filename'], [T.i32, '_OpenFlag'], [T.i32, '_ShareFlag'], [T.i32, '_PermissionMode']], [['dllimport'], ['cdecl']]))('_sopen_s');},
    _open: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_OpenFlag'], '...'], [['dllimport'], ['cdecl']]))('_open');},
    _sopen: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_OpenFlag'], [T.i32, '_ShareFlag'], '...'], [['dllimport'], ['cdecl']]))('_sopen');},
    _waccess: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Filename'], [T.i32, '_AccessMode']], [['dllimport'], ['cdecl']]))('_waccess');},
    _wchmod: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Filename'], [T.i32, '_Mode']], [['dllimport'], ['cdecl']]))('_wchmod');},
    _wcreat: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Filename'], [T.i32, '_PermissionMode']], [['dllimport'], ['cdecl']]))('_wcreat');},
    _wfindfirst: function() {return (Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(Struct('_wfinddata32_t', null)), '_FindData']], [['dllimport'], ['cdecl']]))('_wfindfirst');},
    _wfindnext: function() {return (Fn(T.i32, [[T.intptr_t, '_FindHandle'], [Pointer(Struct('_wfinddata32_t', null)), '_FindData']], [['dllimport'], ['cdecl']]))('_wfindnext');},
    _wunlink: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Filename']], [['dllimport'], ['cdecl']]))('_wunlink');},
    _wrename: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_OldFilename'], [Pointer(T.wchar_t), '_NewFilename']], [['dllimport'], ['cdecl']]))('_wrename');},
    _wmktemp: function() {return (Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_TemplateName']], [['dllimport'], ['cdecl']]))('_wmktemp');},
    _wfindfirsti64: function() {return (Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(Struct('_wfinddata32i64_t', null)), '_FindData']], [['dllimport'], ['cdecl']]))('_wfindfirsti64');},
    _wfindfirst64i32: function() {return (Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(Struct('_wfinddata64i32_t', null)), '_FindData']], [['cdecl']]))('_wfindfirst64i32');},
    _wfindfirst64: function() {return (Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(Struct('_wfinddata64_t', null)), '_FindData']], [['dllimport'], ['cdecl']]))('_wfindfirst64');},
    _wfindnexti64: function() {return (Fn(T.i32, [[T.intptr_t, '_FindHandle'], [Pointer(Struct('_wfinddata32i64_t', null)), '_FindData']], [['dllimport'], ['cdecl']]))('_wfindnexti64');},
    _wfindnext64i32: function() {return (Fn(T.i32, [[T.intptr_t, '_FindHandle'], [Pointer(Struct('_wfinddata64i32_t', null)), '_FindData']], [['cdecl']]))('_wfindnext64i32');},
    _wfindnext64: function() {return (Fn(T.i32, [[T.intptr_t, '_FindHandle'], [Pointer(Struct('_wfinddata64_t', null)), '_FindData']], [['dllimport'], ['cdecl']]))('_wfindnext64');},
    _wsopen_s: function() {return (Fn(T.errno_t, [[Pointer(T.i32), '_FileHandle'], [Pointer(T.wchar_t), '_Filename'], [T.i32, '_OpenFlag'], [T.i32, '_ShareFlag'], [T.i32, '_PermissionFlag']], [['dllimport'], ['cdecl']]))('_wsopen_s');},
    _wopen: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Filename'], [T.i32, '_OpenFlag'], '...'], [['dllimport'], ['cdecl']]))('_wopen');},
    _wsopen: function() {return (Fn(T.i32, [[Pointer(T.wchar_t), '_Filename'], [T.i32, '_OpenFlag'], [T.i32, '_ShareFlag'], '...'], [['dllimport'], ['cdecl']]))('_wsopen');},
    __lock_fhandle: function() {return (Fn(T.i32, [[T.i32, '_Filehandle']], [['cdecl']]))('__lock_fhandle');},
    _unlock_fhandle: function() {return (Fn(null, [[T.i32, '_Filehandle']], [['cdecl']]))('_unlock_fhandle');},
    _get_osfhandle: function() {return (Fn(T.intptr_t, [[T.i32, '_FileHandle']], [['dllimport'], ['cdecl']]))('_get_osfhandle');},
    _open_osfhandle: function() {return (Fn(T.i32, [[T.intptr_t, '_OSFileHandle'], [T.i32, '_Flags']], [['dllimport'], ['cdecl']]))('_open_osfhandle');},
    access: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_AccessMode']], [['cdecl']]))('access');},
    chsize: function() {return (Fn(T.i32, [[T.i32, '_FileHandle'], [T.i32, '_Size']], [['cdecl']]))('chsize');},
    close: function() {return (Fn(T.i32, [[T.i32, '_FileHandle']], [['cdecl']]))('close');},
    creat: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_PermissionMode']], [['cdecl']]))('creat');},
    dup: function() {return (Fn(T.i32, [[T.i32, '_FileHandle']], [['cdecl']]))('dup');},
    dup2: function() {return (Fn(T.i32, [[T.i32, '_FileHandleSrc'], [T.i32, '_FileHandleDst']], [['cdecl']]))('dup2');},
    eof: function() {return (Fn(T.i32, [[T.i32, '_FileHandle']], [['cdecl']]))('eof');},
    filelength: function() {return (Fn(T.i32, [[T.i32, '_FileHandle']], [['cdecl']]))('filelength');},
    isatty: function() {return (Fn(T.i32, [[T.i32, '_FileHandle']], [['cdecl']]))('isatty');},
    locking: function() {return (Fn(T.i32, [[T.i32, '_FileHandle'], [T.i32, '_LockMode'], [T.i32, '_NumOfBytes']], [['cdecl']]))('locking');},
    lseek: function() {return (Fn(T.i32, [[T.i32, '_FileHandle'], [T.i32, '_Offset'], [T.i32, '_Origin']], [['cdecl']]))('lseek');},
    open: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_OpenFlag'], '...'], [['cdecl']]))('open');},
    read: function() {return (Fn(T.i32, [[T.i32, '_FileHandle'], [Pointer(null), '_DstBuf'], [T.u32, '_MaxCharCount']], [['cdecl']]))('read');},
    setmode: function() {return (Fn(T.i32, [[T.i32, '_FileHandle'], [T.i32, '_Mode']], [['cdecl']]))('setmode');},
    sopen: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_OpenFlag'], [T.i32, '_ShareFlag'], '...'], [['cdecl']]))('sopen');},
    tell: function() {return (Fn(T.i32, [[T.i32, '_FileHandle']], [['cdecl']]))('tell');},
    umask: function() {return (Fn(T.i32, [[T.i32, '_Mode']], [['cdecl']]))('umask');},
    write: function() {return (Fn(T.i32, [[T.i32, '_Filehandle'], [Pointer(null), '_Buf'], [T.u32, '_MaxCharCount']], [['cdecl']]))('write');},
    _beginthread: function() {return (Fn(T.uintptr_t, [[Pointer(Fn(null, [[Pointer(null)]])), '_StartAddress'], [T.u32, '_StackSize'], [Pointer(null), '_ArgList']], [['dllimport'], ['cdecl']]))('_beginthread');},
    _endthread: function() {return (Fn(null, [[null]], [['dllimport'], ['cdecl'], ['noreturn']]))('_endthread');},
    _beginthreadex: function() {return (Fn(T.uintptr_t, [[Pointer(null), '_Security'], [T.u32, '_StackSize'], [Pointer(Fn(T.u32, [[Pointer(null)]])), '_StartAddress'], [Pointer(null), '_ArgList'], [T.u32, '_InitFlag'], [Pointer(T.u32), '_ThrdAddr']], [['dllimport'], ['cdecl']]))('_beginthreadex');},
    _endthreadex: function() {return (Fn(null, [[T.u32, '_Retval']], [['dllimport'], ['cdecl'], ['noreturn']]))('_endthreadex');},
    _cexit: function() {return (Fn(null, [[null]], [['dllimport'], ['cdecl'], ['nothrow']]))('_cexit');},
    _c_exit: function() {return (Fn(null, [[null]], [['dllimport'], ['cdecl'], ['nothrow']]))('_c_exit');},
    _getpid: function() {return (Fn(T.i32, [[null]], [['dllimport'], ['cdecl']]))('_getpid');},
    _cwait: function() {return (Fn(T.intptr_t, [[Pointer(T.i32), '_TermStat'], [T.intptr_t, '_ProcHandle'], [T.i32, '_Action']], [['dllimport'], ['cdecl']]))('_cwait');},
    _execl: function() {return (Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...'], [['dllimport'], ['cdecl']]))('_execl');},
    _execle: function() {return (Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...'], [['dllimport'], ['cdecl']]))('_execle');},
    _execlp: function() {return (Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...'], [['dllimport'], ['cdecl']]))('_execlp');},
    _execlpe: function() {return (Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...'], [['dllimport'], ['cdecl']]))('_execlpe');},
    _execv: function() {return (Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList']], [['dllimport'], ['cdecl']]))('_execv');},
    _execve: function() {return (Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList'], [Pointer(Pointer(T.char)), '_Env']], [['dllimport'], ['cdecl']]))('_execve');},
    _execvp: function() {return (Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList']], [['dllimport'], ['cdecl']]))('_execvp');},
    _execvpe: function() {return (Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList'], [Pointer(Pointer(T.char)), '_Env']], [['dllimport'], ['cdecl']]))('_execvpe');},
    _spawnl: function() {return (Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...'], [['dllimport'], ['cdecl']]))('_spawnl');},
    _spawnle: function() {return (Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...'], [['dllimport'], ['cdecl']]))('_spawnle');},
    _spawnlp: function() {return (Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...'], [['dllimport'], ['cdecl']]))('_spawnlp');},
    _spawnlpe: function() {return (Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...'], [['dllimport'], ['cdecl']]))('_spawnlpe');},
    _spawnv: function() {return (Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList']], [['dllimport'], ['cdecl']]))('_spawnv');},
    _spawnve: function() {return (Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList'], [Pointer(Pointer(T.char)), '_Env']], [['dllimport'], ['cdecl']]))('_spawnve');},
    _spawnvp: function() {return (Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList']], [['dllimport'], ['cdecl']]))('_spawnvp');},
    _spawnvpe: function() {return (Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList'], [Pointer(Pointer(T.char)), '_Env']], [['dllimport'], ['cdecl']]))('_spawnvpe');},
    _wexecl: function() {return (Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_ArgList'], '...'], [['dllimport'], ['cdecl']]))('_wexecl');},
    _wexecle: function() {return (Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_ArgList'], '...'], [['dllimport'], ['cdecl']]))('_wexecle');},
    _wexeclp: function() {return (Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_ArgList'], '...'], [['dllimport'], ['cdecl']]))('_wexeclp');},
    _wexeclpe: function() {return (Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_ArgList'], '...'], [['dllimport'], ['cdecl']]))('_wexeclpe');},
    _wexecv: function() {return (Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(Pointer(T.wchar_t)), '_ArgList']], [['dllimport'], ['cdecl']]))('_wexecv');},
    _wexecve: function() {return (Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(Pointer(T.wchar_t)), '_ArgList'], [Pointer(Pointer(T.wchar_t)), '_Env']], [['dllimport'], ['cdecl']]))('_wexecve');},
    _wexecvp: function() {return (Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(Pointer(T.wchar_t)), '_ArgList']], [['dllimport'], ['cdecl']]))('_wexecvp');},
    _wexecvpe: function() {return (Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(Pointer(T.wchar_t)), '_ArgList'], [Pointer(Pointer(T.wchar_t)), '_Env']], [['dllimport'], ['cdecl']]))('_wexecvpe');},
    _wspawnl: function() {return (Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_ArgList'], '...'], [['dllimport'], ['cdecl']]))('_wspawnl');},
    _wspawnle: function() {return (Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_ArgList'], '...'], [['dllimport'], ['cdecl']]))('_wspawnle');},
    _wspawnlp: function() {return (Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_ArgList'], '...'], [['dllimport'], ['cdecl']]))('_wspawnlp');},
    _wspawnlpe: function() {return (Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_ArgList'], '...'], [['dllimport'], ['cdecl']]))('_wspawnlpe');},
    _wspawnv: function() {return (Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.wchar_t), '_Filename'], [Pointer(Pointer(T.wchar_t)), '_ArgList']], [['dllimport'], ['cdecl']]))('_wspawnv');},
    _wspawnve: function() {return (Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.wchar_t), '_Filename'], [Pointer(Pointer(T.wchar_t)), '_ArgList'], [Pointer(Pointer(T.wchar_t)), '_Env']], [['dllimport'], ['cdecl']]))('_wspawnve');},
    _wspawnvp: function() {return (Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.wchar_t), '_Filename'], [Pointer(Pointer(T.wchar_t)), '_ArgList']], [['dllimport'], ['cdecl']]))('_wspawnvp');},
    _wspawnvpe: function() {return (Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.wchar_t), '_Filename'], [Pointer(Pointer(T.wchar_t)), '_ArgList'], [Pointer(Pointer(T.wchar_t)), '_Env']], [['dllimport'], ['cdecl']]))('_wspawnvpe');},
    __security_init_cookie: function() {return (Fn(null, [[null]], [['cdecl']]))('__security_init_cookie');},
    __security_check_cookie: function() {return (Fn(null, [[T.uintptr_t, '_StackCookie']], [['stdcall']]))('__security_check_cookie');},
    __report_gsfailure: function() {return (Fn(null, [[null]], [['noreturn'], ['cdecl']]))('__report_gsfailure');},
    __security_cookie: function() {return (T.uintptr_t)('__security_cookie');},
    _loaddll: function() {return (Fn(T.intptr_t, [[Pointer(T.char), '_Filename']], [['cdecl']]))('_loaddll');},
    _unloaddll: function() {return (Fn(T.i32, [[T.intptr_t, '_Handle']], [['cdecl']]))('_unloaddll');},
    _getdllprocaddr: function() {return (Fn(Pointer(Fn(T.i32, [[null]])), [[T.intptr_t, '_Handle'], [Pointer(T.char), '_ProcedureName'], [T.intptr_t, '_Ordinal']], [['cdecl'], ['cdecl']]))('_getdllprocaddr');},
    cwait: function() {return (Fn(T.intptr_t, [[Pointer(T.i32), '_TermStat'], [T.intptr_t, '_ProcHandle'], [T.i32, '_Action']], [['cdecl']]))('cwait');},
    execl: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...'], [['cdecl']]))('execl');},
    execle: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...'], [['cdecl']]))('execle');},
    execlp: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...'], [['cdecl']]))('execlp');},
    execlpe: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...'], [['cdecl']]))('execlpe');},
    spawnl: function() {return (Fn(T.intptr_t, [[T.i32], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...'], [['cdecl']]))('spawnl');},
    spawnle: function() {return (Fn(T.intptr_t, [[T.i32], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...'], [['cdecl']]))('spawnle');},
    spawnlp: function() {return (Fn(T.intptr_t, [[T.i32], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...'], [['cdecl']]))('spawnlp');},
    spawnlpe: function() {return (Fn(T.intptr_t, [[T.i32], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...'], [['cdecl']]))('spawnlpe');},
    getpid: function() {return (Fn(T.i32, [[null]], [['cdecl']]))('getpid');},
    execv: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList']], [['cdecl']]))('execv');},
    execve: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList'], [Pointer(Pointer(T.char)), '_Env']], [['cdecl']]))('execve');},
    execvp: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList']], [['cdecl']]))('execvp');},
    execvpe: function() {return (Fn(T.i32, [[Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList'], [Pointer(Pointer(T.char)), '_Env']], [['cdecl']]))('execvpe');},
    spawnv: function() {return (Fn(T.intptr_t, [[T.i32], [Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList']], [['cdecl']]))('spawnv');},
    spawnve: function() {return (Fn(T.intptr_t, [[T.i32], [Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList'], [Pointer(Pointer(T.char)), '_Env']], [['cdecl']]))('spawnve');},
    spawnvp: function() {return (Fn(T.intptr_t, [[T.i32], [Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList']], [['cdecl']]))('spawnvp');},
    spawnvpe: function() {return (Fn(T.intptr_t, [[T.i32], [Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList'], [Pointer(Pointer(T.char)), '_Env']], [['cdecl']]))('spawnvpe');},
    optind: function() {return (T.i32)('optind');},
    optopt: function() {return (T.i32)('optopt');},
    opterr: function() {return (T.i32)('opterr');},
    optarg: function() {return (Pointer(T.char))('optarg');},
    getopt: function() {return (Fn(T.i32, [[T.i32, 'nargc'], [Pointer(Pointer(T.char)), 'nargv'], [Pointer(T.char), 'options']]))('getopt');},
    usleep: function() {return (Fn(T.i32, [[T.useconds_t, 'useconds']], [['cdecl'], ['nothrow']]))('usleep');},
    ftruncate: function() {return (Fn(T.i32, [[T.i32], [T.off32_t]]))('ftruncate');},
    ftruncate64: function() {return (Fn(T.i32, [[T.i32], [T.off64_t]]))('ftruncate64');},
    truncate: function() {return (Fn(T.i32, [[Pointer(T.char)], [T.off32_t]]))('truncate');},
    truncate64: function() {return (Fn(T.i32, [[Pointer(T.char)], [T.off64_t]]))('truncate64');},
    ShowHideMenuCtl: function() {return (Fn(T.BOOL, [[T.HWND], [T.UINT_PTR], [T.LPINT]], [['stdcall']]))('ShowHideMenuCtl');},
    GetEffectiveClientRect: function() {return (Fn(null, [[T.HWND], [T.LPRECT], [Pointer(T.INT)]], [['stdcall']]))('GetEffectiveClientRect');},
    InitCommonControls: function() {return (Fn(null, [[null]], [['stdcall']]))('InitCommonControls');},
    InitCommonControlsEx: function() {return (Fn(T.BOOL, [[Pointer(T.INITCOMMONCONTROLSEX)]], [['stdcall']]))('InitCommonControlsEx');},
    GetMUILanguage: function() {return (Fn(T.LANGID, [[null]], [['stdcall']]))('GetMUILanguage');},
    InitMUILanguage: function() {return (Fn(null, [[T.LANGID, 'uiLang']], [['stdcall']]))('InitMUILanguage');},
    CreateStatusWindowA: function() {return (Fn(T.HWND, [[T.LONG], [T.LPCSTR], [T.HWND], [T.UINT]], [['stdcall']]))('CreateStatusWindowA');},
    CreateStatusWindowW: function() {return (Fn(T.HWND, [[T.LONG], [T.LPCWSTR], [T.HWND], [T.UINT]], [['stdcall']]))('CreateStatusWindowW');},
    DrawStatusTextA: function() {return (Fn(null, [[T.HDC], [T.LPCRECT], [T.LPCSTR], [T.UINT]], [['stdcall']]))('DrawStatusTextA');},
    DrawStatusTextW: function() {return (Fn(null, [[T.HDC], [T.LPCRECT], [T.LPCWSTR], [T.UINT]], [['stdcall']]))('DrawStatusTextW');},
    MenuHelp: function() {return (Fn(null, [[T.UINT], [T.WPARAM], [T.LPARAM], [T.HMENU], [T.HINSTANCE], [T.HWND], [Pointer(T.UINT)]], [['stdcall']]))('MenuHelp');},
    MakeDragList: function() {return (Fn(T.BOOL, [[T.HWND]], [['stdcall']]))('MakeDragList');},
    DrawInsert: function() {return (Fn(null, [[T.HWND], [T.HWND], [T.INT]], [['stdcall']]))('DrawInsert');},
    LBItemFromPt: function() {return (Fn(T.INT, [[T.HWND], [T.POINT], [T.BOOL]], [['stdcall']]))('LBItemFromPt');},
    CreateUpDownControl: function() {return (Fn(T.HWND, [[T.DWORD], [T.INT], [T.INT], [T.INT], [T.INT], [T.HWND], [T.INT], [T.HINSTANCE], [T.HWND], [T.INT], [T.INT], [T.INT]], [['stdcall']]))('CreateUpDownControl');},
    HIMAGELIST_QueryInterface: function() {return (Fn(T.HRESULT, [[T.HIMAGELIST], [Pointer(T.IID)], [Pointer(Pointer(null))]], [['stdcall']]))('HIMAGELIST_QueryInterface');},
    ImageList_Add: function() {return (Fn(T.INT, [[T.HIMAGELIST], [T.HBITMAP], [T.HBITMAP]], [['stdcall']]))('ImageList_Add');},
    ImageList_AddMasked: function() {return (Fn(T.INT, [[T.HIMAGELIST], [T.HBITMAP], [T.COLORREF]], [['stdcall']]))('ImageList_AddMasked');},
    ImageList_BeginDrag: function() {return (Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.INT], [T.INT]], [['stdcall']]))('ImageList_BeginDrag');},
    ImageList_Copy: function() {return (Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.HIMAGELIST], [T.INT], [T.UINT]], [['stdcall']]))('ImageList_Copy');},
    ImageList_Create: function() {return (Fn(T.HIMAGELIST, [[T.INT], [T.INT], [T.UINT], [T.INT], [T.INT]], [['stdcall']]))('ImageList_Create');},
    ImageList_Destroy: function() {return (Fn(T.BOOL, [[T.HIMAGELIST]], [['stdcall']]))('ImageList_Destroy');},
    ImageList_DragEnter: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.INT]], [['stdcall']]))('ImageList_DragEnter');},
    ImageList_DragLeave: function() {return (Fn(T.BOOL, [[T.HWND]], [['stdcall']]))('ImageList_DragLeave');},
    ImageList_DragMove: function() {return (Fn(T.BOOL, [[T.INT], [T.INT]], [['stdcall']]))('ImageList_DragMove');},
    ImageList_DragShowNolock: function() {return (Fn(T.BOOL, [[T.BOOL]], [['stdcall']]))('ImageList_DragShowNolock');},
    ImageList_Draw: function() {return (Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.HDC], [T.INT], [T.INT], [T.UINT]], [['stdcall']]))('ImageList_Draw');},
    ImageList_DrawEx: function() {return (Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.COLORREF], [T.COLORREF], [T.UINT]], [['stdcall']]))('ImageList_DrawEx');},
    ImageList_DrawIndirect: function() {return (Fn(T.BOOL, [[Pointer(T.IMAGELISTDRAWPARAMS)]], [['stdcall']]))('ImageList_DrawIndirect');},
    ImageList_Duplicate: function() {return (Fn(T.HIMAGELIST, [[T.HIMAGELIST]], [['stdcall']]))('ImageList_Duplicate');},
    ImageList_EndDrag: function() {return (Fn(null, [[null]], [['stdcall']]))('ImageList_EndDrag');},
    ImageList_GetBkColor: function() {return (Fn(T.COLORREF, [[T.HIMAGELIST]], [['stdcall']]))('ImageList_GetBkColor');},
    ImageList_GetDragImage: function() {return (Fn(T.HIMAGELIST, [[Pointer(T.POINT)], [Pointer(T.POINT)]], [['stdcall']]))('ImageList_GetDragImage');},
    ImageList_GetIcon: function() {return (Fn(T.HICON, [[T.HIMAGELIST], [T.INT], [T.UINT]], [['stdcall']]))('ImageList_GetIcon');},
    ImageList_GetIconSize: function() {return (Fn(T.BOOL, [[T.HIMAGELIST], [Pointer(T.INT)], [Pointer(T.INT)]], [['stdcall']]))('ImageList_GetIconSize');},
    ImageList_GetImageCount: function() {return (Fn(T.INT, [[T.HIMAGELIST]], [['stdcall']]))('ImageList_GetImageCount');},
    ImageList_GetImageInfo: function() {return (Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [Pointer(T.IMAGEINFO)]], [['stdcall']]))('ImageList_GetImageInfo');},
    ImageList_GetImageRect: function() {return (Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.LPRECT]], [['stdcall']]))('ImageList_GetImageRect');},
    ImageList_LoadImageA: function() {return (Fn(T.HIMAGELIST, [[T.HINSTANCE], [T.LPCSTR], [T.INT], [T.INT], [T.COLORREF], [T.UINT], [T.UINT]], [['stdcall']]))('ImageList_LoadImageA');},
    ImageList_LoadImageW: function() {return (Fn(T.HIMAGELIST, [[T.HINSTANCE], [T.LPCWSTR], [T.INT], [T.INT], [T.COLORREF], [T.UINT], [T.UINT]], [['stdcall']]))('ImageList_LoadImageW');},
    ImageList_Merge: function() {return (Fn(T.HIMAGELIST, [[T.HIMAGELIST], [T.INT], [T.HIMAGELIST], [T.INT], [T.INT], [T.INT]], [['stdcall']]))('ImageList_Merge');},
    ImageList_Remove: function() {return (Fn(T.BOOL, [[T.HIMAGELIST], [T.INT]], [['stdcall']]))('ImageList_Remove');},
    ImageList_Replace: function() {return (Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.HBITMAP], [T.HBITMAP]], [['stdcall']]))('ImageList_Replace');},
    ImageList_ReplaceIcon: function() {return (Fn(T.INT, [[T.HIMAGELIST], [T.INT], [T.HICON]], [['stdcall']]))('ImageList_ReplaceIcon');},
    ImageList_SetBkColor: function() {return (Fn(T.COLORREF, [[T.HIMAGELIST], [T.COLORREF]], [['stdcall']]))('ImageList_SetBkColor');},
    ImageList_SetDragCursorImage: function() {return (Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.INT], [T.INT]], [['stdcall']]))('ImageList_SetDragCursorImage');},
    ImageList_SetIconSize: function() {return (Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.INT]], [['stdcall']]))('ImageList_SetIconSize');},
    ImageList_SetImageCount: function() {return (Fn(T.BOOL, [[T.HIMAGELIST], [T.UINT]], [['stdcall']]))('ImageList_SetImageCount');},
    ImageList_SetOverlayImage: function() {return (Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.INT]], [['stdcall']]))('ImageList_SetOverlayImage');},
    ImageList_Read: function() {return (Fn(T.HIMAGELIST, [[T.LPSTREAM]], [['stdcall']]))('ImageList_Read');},
    ImageList_Write: function() {return (Fn(T.BOOL, [[T.HIMAGELIST], [T.LPSTREAM]], [['stdcall']]))('ImageList_Write');},
    _TrackMouseEvent: function() {return (Fn(T.BOOL, [[T.LPTRACKMOUSEEVENT, 'lpEventTrack']], [['stdcall']]))('_TrackMouseEvent');},
    FlatSB_EnableScrollBar: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.UINT]], [['stdcall']]))('FlatSB_EnableScrollBar');},
    FlatSB_ShowScrollBar: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.BOOL]], [['stdcall']]))('FlatSB_ShowScrollBar');},
    FlatSB_GetScrollRange: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.LPINT], [T.LPINT]], [['stdcall']]))('FlatSB_GetScrollRange');},
    FlatSB_GetScrollInfo: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.LPSCROLLINFO]], [['stdcall']]))('FlatSB_GetScrollInfo');},
    FlatSB_GetScrollPos: function() {return (Fn(T.INT, [[T.HWND], [T.INT]], [['stdcall']]))('FlatSB_GetScrollPos');},
    FlatSB_GetScrollProp: function() {return (Fn(T.BOOL, [[T.HWND], [T.INT], [T.LPINT]], [['stdcall']]))('FlatSB_GetScrollProp');},
    FlatSB_SetScrollPos: function() {return (Fn(T.INT, [[T.HWND], [T.INT], [T.INT], [T.BOOL]], [['stdcall']]))('FlatSB_SetScrollPos');},
    FlatSB_SetScrollInfo: function() {return (Fn(T.INT, [[T.HWND], [T.INT], [T.LPSCROLLINFO], [T.BOOL]], [['stdcall']]))('FlatSB_SetScrollInfo');},
    FlatSB_SetScrollRange: function() {return (Fn(T.INT, [[T.HWND], [T.INT], [T.INT], [T.INT], [T.BOOL]], [['stdcall']]))('FlatSB_SetScrollRange');},
    FlatSB_SetScrollProp: function() {return (Fn(T.BOOL, [[T.HWND], [T.UINT], [T.INT], [T.BOOL]], [['stdcall']]))('FlatSB_SetScrollProp');},
    InitializeFlatSB: function() {return (Fn(T.BOOL, [[T.HWND]], [['stdcall']]))('InitializeFlatSB');},
    UninitializeFlatSB: function() {return (Fn(T.HRESULT, [[T.HWND]], [['stdcall']]))('UninitializeFlatSB');},
    SetWindowSubclass: function() {return (Fn(T.BOOL, [[T.HWND], [T.SUBCLASSPROC], [T.UINT_PTR], [T.DWORD_PTR]], [['stdcall']]))('SetWindowSubclass');},
    GetWindowSubclass: function() {return (Fn(T.BOOL, [[T.HWND], [T.SUBCLASSPROC], [T.UINT_PTR], [Pointer(T.DWORD_PTR)]], [['stdcall']]))('GetWindowSubclass');},
    RemoveWindowSubclass: function() {return (Fn(T.BOOL, [[T.HWND], [T.SUBCLASSPROC], [T.UINT_PTR]], [['stdcall']]))('RemoveWindowSubclass');},
    DefSubclassProc: function() {return (Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]], [['stdcall']]))('DefSubclassProc');},
    DrawShadowText: function() {return (Fn(T.i32, [[T.HDC], [T.LPCWSTR], [T.UINT], [Pointer(T.RECT)], [T.DWORD], [T.COLORREF], [T.COLORREF], [T.i32], [T.i32]], [['stdcall']]))('DrawShadowText');},
    CreateToolbar: function() {return (Fn(T.HWND, [[T.HWND], [T.DWORD], [T.UINT], [T.INT], [T.HINSTANCE], [T.UINT], [T.LPCTBBUTTON], [T.INT]], [['stdcall']]))('CreateToolbar');},
    CreateToolbarEx: function() {return (Fn(T.HWND, [[T.HWND], [T.DWORD], [T.UINT], [T.INT], [T.HINSTANCE], [T.UINT_PTR], [T.LPCTBBUTTON], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.UINT]], [['stdcall']]))('CreateToolbarEx');},
    CreateMappedBitmap: function() {return (Fn(T.HBITMAP, [[T.HINSTANCE], [T.INT_PTR], [T.UINT], [T.LPCOLORMAP], [T.INT]], [['stdcall']]))('CreateMappedBitmap');},
    DSA_Create: function() {return (Fn(T.HDSA, [[T.INT], [T.INT]], [['stdcall']]))('DSA_Create');},
    DSA_Destroy: function() {return (Fn(T.BOOL, [[T.HDSA]], [['stdcall']]))('DSA_Destroy');},
    DSA_DestroyCallback: function() {return (Fn(null, [[T.HDSA], [T.PFNDSAENUMCALLBACK], [T.LPVOID]], [['stdcall']]))('DSA_DestroyCallback');},
    DSA_GetItemPtr: function() {return (Fn(T.LPVOID, [[T.HDSA], [T.INT]], [['stdcall']]))('DSA_GetItemPtr');},
    DSA_InsertItem: function() {return (Fn(T.INT, [[T.HDSA], [T.INT], [T.LPVOID]], [['stdcall']]))('DSA_InsertItem');},
    DPA_Create: function() {return (Fn(T.HDPA, [[T.INT]], [['stdcall']]))('DPA_Create');},
    DPA_Destroy: function() {return (Fn(T.BOOL, [[T.HDPA]], [['stdcall']]))('DPA_Destroy');},
    DPA_DeletePtr: function() {return (Fn(T.LPVOID, [[T.HDPA], [T.INT]], [['stdcall']]))('DPA_DeletePtr');},
    DPA_DeleteAllPtrs: function() {return (Fn(T.BOOL, [[T.HDPA]], [['stdcall']]))('DPA_DeleteAllPtrs');},
    DPA_SetPtr: function() {return (Fn(T.BOOL, [[T.HDPA], [T.INT], [T.LPVOID]], [['stdcall']]))('DPA_SetPtr');},
    DPA_GetPtr: function() {return (Fn(T.LPVOID, [[T.HDPA], [T.INT]], [['stdcall']]))('DPA_GetPtr');},
    DPA_GetPtrIndex: function() {return (Fn(T.INT, [[T.HDPA], [T.LPCVOID]], [['stdcall']]))('DPA_GetPtrIndex');},
    DPA_GetSize: function() {return (Fn(T.ULONGLONG, [[T.HDPA]], [['stdcall']]))('DPA_GetSize');},
    DPA_Grow: function() {return (Fn(T.BOOL, [[T.HDPA], [T.INT]], [['stdcall']]))('DPA_Grow');},
    DPA_InsertPtr: function() {return (Fn(T.INT, [[T.HDPA], [T.INT], [T.LPVOID]], [['stdcall']]))('DPA_InsertPtr');},
    DPA_Sort: function() {return (Fn(T.BOOL, [[T.HDPA], [T.PFNDPACOMPARE], [T.LPARAM]], [['stdcall']]))('DPA_Sort');},
    DPA_EnumCallback: function() {return (Fn(null, [[T.HDPA], [T.PFNDPAENUMCALLBACK], [T.LPVOID]], [['stdcall']]))('DPA_EnumCallback');},
    DPA_DestroyCallback: function() {return (Fn(null, [[T.HDPA], [T.PFNDPAENUMCALLBACK], [T.LPVOID]], [['stdcall']]))('DPA_DestroyCallback');},
    DPA_Search: function() {return (Fn(T.INT, [[T.HDPA], [T.LPVOID], [T.INT], [T.PFNDPACOMPARE], [T.LPARAM], [T.UINT]], [['stdcall']]))('DPA_Search');},
    DPA_Merge: function() {return (Fn(T.BOOL, [[T.HDPA], [T.HDPA], [T.DWORD], [T.PFNDPACOMPARE], [T.PFNDPAMERGE], [T.LPARAM]], [['stdcall']]))('DPA_Merge');},
    DPA_LoadStream: function() {return (Fn(T.HRESULT, [[Pointer(T.HDPA)], [T.PFNDPASTREAM], [Pointer(Struct('IStream', null))], [T.LPVOID]], [['stdcall']]))('DPA_LoadStream');},
    DPA_SaveStream: function() {return (Fn(T.HRESULT, [[T.HDPA], [T.PFNDPASTREAM], [Pointer(Struct('IStream', null))], [T.LPVOID]], [['stdcall']]))('DPA_SaveStream');},
    Str_SetPtrW: function() {return (Fn(T.BOOL, [[Pointer(T.LPWSTR)], [T.LPCWSTR]], [['stdcall']]))('Str_SetPtrW');},
    TaskDialogIndirect: function() {return (Fn(T.HRESULT, [[Pointer(T.TASKDIALOGCONFIG)], [Pointer(T.i32)], [Pointer(T.i32)], [Pointer(T.BOOL)]], [['stdcall']]))('TaskDialogIndirect');},
    __p__commode: function() {return (Fn(Pointer(T.u32), [[null]]))('__p__commode');},
    __p__fmode: function() {return (Fn(Pointer(T.u32), [[null]]))('__p__fmode');},
    __p__osver: function() {return (Fn(Pointer(T.u32), [[null]]))('__p__osver');},
    __p__winmajor: function() {return (Fn(Pointer(T.u32), [[null]]))('__p__winmajor');},
    __p__winminor: function() {return (Fn(Pointer(T.u32), [[null]]))('__p__winminor');},
    __p__winver: function() {return (Fn(Pointer(T.u32), [[null]]))('__p__winver');},
    __p__acmdln: function() {return (Fn(Pointer(Pointer(T.char)), [[null]]))('__p__acmdln');},
    __p__wcmdln: function() {return (Fn(Pointer(Pointer(T.wchar_t)), [[null]]))('__p__wcmdln');},
    __p___initenv: function() {return (Fn(Pointer(Pointer(Pointer(T.char))), [[null]]))('__p___initenv');},
    __p___winitenv: function() {return (Fn(Pointer(Pointer(Pointer(T.wchar_t))), [[null]]))('__p___winitenv');},
    __p__timezone: function() {return (Fn(Pointer(T.i32), [[null]]))('__p__timezone');},
    _initterm: function() {return (Fn(T.i32, [[Pointer(T._PVFV)], [Pointer(T._PVFV)]], [['cdecl']]))('_initterm');},
    _initterm_e: function() {return (Fn(T.i32, [[Pointer(T._PVFV)], [Pointer(T._PVFV)]], [['cdecl']]))('_initterm_e');}
};
