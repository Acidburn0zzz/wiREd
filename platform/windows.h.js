T.__builtin_va_list = Pointer(null);
T.__gnuc_va_list = T.__builtin_va_list;
T.va_list = T.__gnuc_va_list;
T.size_t = T.u32;
T.ssize_t = T.i32;
T.intptr_t = T.i32;
T.uintptr_t = T.u32;
T.ptrdiff_t = T.i32;
T.wchar_t = T.u16;
T.wint_t = T.u16;
T.wctype_t = T.u16;
T.errno_t = T.i32;
T.__time32_t = T.i32;
T.__time64_t = T.i64;
T.time_t = T.__time32_t;
T.errcode = T.i32;
T.pthreadlocinfo = Pointer(Struct('threadlocaleinfostruct', null));
T.pthreadmbcinfo = Pointer(Struct('threadmbcinfostruct', null));
T._locale_tstruct = Struct('localeinfo_struct', {
    locinfo: T.pthreadlocinfo,
    mbcinfo: T.pthreadmbcinfo
});
T._locale_t = Pointer(Struct('localeinfo_struct', {
    locinfo: T.pthreadlocinfo,
    mbcinfo: T.pthreadmbcinfo
}));
T.LC_ID = Struct('tagLC_ID', {
    wLanguage: T.u16,
    wCountry: T.u16,
    wCodePage: T.u16
});
T.LPLC_ID = Pointer(Struct('tagLC_ID', {
    wLanguage: T.u16,
    wCountry: T.u16,
    wCodePage: T.u16
}));
T.threadlocinfo = Struct('threadlocaleinfostruct', {
    refcount: T.i32,
    lc_codepage: T.u32,
    lc_collate_cp: T.u32,
    lc_handle: ArrayType(T.u32, 6),
    lc_id: ArrayType(T.LC_ID, 6),
    lc_category: ArrayType(Struct('', {
        locale: Pointer(T.char),
        wlocale: Pointer(T.wchar_t),
        refcount: Pointer(T.i32),
        wrefcount: Pointer(T.i32)
    }), 6),
    lc_clike: T.i32,
    mb_cur_max: T.i32,
    lconv_intl_refcount: Pointer(T.i32),
    lconv_num_refcount: Pointer(T.i32),
    lconv_mon_refcount: Pointer(T.i32),
    lconv: Pointer(Struct('lconv', null)),
    ctype1_refcount: Pointer(T.i32),
    ctype1: Pointer(T.u16),
    pctype: Pointer(T.u16),
    pclmap: Pointer(T.u8),
    pcumap: Pointer(T.u8),
    lc_time_curr: Pointer(Struct('__lc_time_data', null))
});
T.EXCEPTION_DISPOSITION = Enum('ExceptionCollidedUnwind', {
    ExceptionContinueExecution: 0,
    ExceptionContinueSearch: 1,
    ExceptionNestedException: 2,
    ExceptionCollidedUnwind: 3
});
T.LPVOID = Pointer(null);
T.LPCVOID = Pointer(null);
T.BOOL = T.i32;
T.PBOOL = Pointer(T.i32);
T.LPBOOL = Pointer(T.i32);
T.BYTE = T.u8;
T.PBYTE = Pointer(T.u8);
T.LPBYTE = Pointer(T.u8);
T.UCHAR = T.u8;
T.PUCHAR = Pointer(T.u8);
T.WORD = T.u16;
T.PWORD = Pointer(T.u16);
T.LPWORD = Pointer(T.u16);
T.USHORT = T.u16;
T.PUSHORT = Pointer(T.u16);
T.INT = T.i32;
T.PINT = Pointer(T.i32);
T.LPINT = Pointer(T.i32);
T.UINT = T.u32;
T.PUINT = Pointer(T.u32);
T.FLOAT = T.f32;
T.PFLOAT = Pointer(T.f32);
T.PSZ = Pointer(T.char);
T.LPLONG = Pointer(T.i32);
T.DWORD = T.u32;
T.PDWORD = Pointer(T.u32);
T.LPDWORD = Pointer(T.u32);
T.ULONG = T.u32;
T.PULONG = Pointer(T.u32);
T.INT8 = T.i8;
T.PINT8 = Pointer(T.i8);
T.INT16 = T.i16;
T.PINT16 = Pointer(T.i16);
T.INT32 = T.i32;
T.PINT32 = Pointer(T.i32);
T.UINT8 = T.u8;
T.PUINT8 = Pointer(T.u8);
T.UINT16 = T.u16;
T.PUINT16 = Pointer(T.u16);
T.UINT32 = T.u32;
T.PUINT32 = Pointer(T.u32);
T.LONG32 = T.i32;
T.PLONG32 = Pointer(T.i32);
T.ULONG32 = T.u32;
T.PULONG32 = Pointer(T.u32);
T.DWORD32 = T.u32;
T.PDWORD32 = Pointer(T.u32);
T.INT64 = T.i64;
T.PINT64 = Pointer(T.i64);
T.UINT64 = T.u64;
T.PUINT64 = Pointer(T.u64);
T.LONG64 = T.i64;
T.PLONG64 = Pointer(T.i64);
T.ULONG64 = T.u64;
T.PULONG64 = Pointer(T.u64);
T.DWORD64 = T.u64;
T.PDWORD64 = Pointer(T.u64);
T.INT_PTR = T.i32;
T.PINT_PTR = Pointer(T.i32);
T.UINT_PTR = T.u32;
T.PUINT_PTR = Pointer(T.u32);
T.LONG_PTR = T.i32;
T.PLONG_PTR = Pointer(T.i32);
T.ULONG_PTR = T.u32;
T.PULONG_PTR = Pointer(T.u32);
T.DWORD_PTR = T.ULONG_PTR;
T.PDWORD_PTR = Pointer(T.ULONG_PTR);
T.SHANDLE_PTR = T.i32;
T.HANDLE_PTR = T.u32;
T.HALF_PTR = T.i16;
T.PHALF_PTR = Pointer(T.i16);
T.UHALF_PTR = T.u16;
T.PUHALF_PTR = Pointer(T.u16);
T.SSIZE_T = T.LONG_PTR;
T.PSSIZE_T = Pointer(T.LONG_PTR);
T.SIZE_T = T.ULONG_PTR;
T.PSIZE_T = Pointer(T.ULONG_PTR);
T.KAFFINITY = T.ULONG_PTR;
T.PKAFFINITY = Pointer(T.ULONG_PTR);
T.GUID = Struct('_GUID', {
    Data1: T.u32,
    Data2: T.u16,
    Data3: T.u16,
    Data4: ArrayType(T.u8, 8)
});
T.LPGUID = Pointer(T.GUID);
T.LPCGUID = Pointer(T.GUID);
T.IID = T.GUID;
T.LPIID = Pointer(T.GUID);
T.CLSID = T.GUID;
T.LPCLSID = Pointer(T.GUID);
T.FMTID = T.GUID;
T.LPFMTID = Pointer(T.GUID);
T.PVOID = Pointer(null);
T.PVOID64 = Pointer(null);
T.BOOLEAN = T.BYTE;
T.PBOOLEAN = Pointer(T.BYTE);
T.CHAR = T.char;
T.PCHAR = Pointer(T.char);
T.SHORT = T.i16;
T.PSHORT = Pointer(T.i16);
T.LONG = T.i32;
T.PLONG = Pointer(T.i32);
T.WCHAR = T.u16;
T.PWCHAR = Pointer(T.u16);
T.LONGLONG = T.i64;
T.PLONGLONG = Pointer(T.i64);
T.ULONGLONG = T.u64;
T.PULONGLONG = Pointer(T.u64);
T.DWORDLONG = T.ULONGLONG;
T.PDWORDLONG = Pointer(T.ULONGLONG);
T.PCH = Pointer(T.CHAR);
T.LPCH = Pointer(T.CHAR);
T.PCCH = Pointer(T.CHAR);
T.LPCCH = Pointer(T.CHAR);
T.PSTR = Pointer(T.CHAR);
T.LPSTR = Pointer(T.CHAR);
T.NPSTR = Pointer(T.CHAR);
T.PCSTR = Pointer(T.CHAR);
T.LPCSTR = Pointer(T.CHAR);
T.PWCH = Pointer(T.WCHAR);
T.LPWCH = Pointer(T.WCHAR);
T.PCWCH = Pointer(T.WCHAR);
T.LPCWCH = Pointer(T.WCHAR);
T.PWSTR = Pointer(T.WCHAR);
T.LPWSTR = Pointer(T.WCHAR);
T.NWPSTR = Pointer(T.WCHAR);
T.PCWSTR = Pointer(T.WCHAR);
T.LPCWSTR = Pointer(T.WCHAR);
T.TCHAR = T.CHAR;
T.PTCHAR = Pointer(T.CHAR);
T.PTSTR = T.LPSTR;
T.LPTSTR = T.LPSTR;
T.PCTSTR = T.LPCSTR;
T.LPCTSTR = T.LPCSTR;
T.CCHAR = T.char;
T.LCID = T.DWORD;
T.PLCID = Pointer(T.DWORD);
T.LANGID = T.WORD;
T.EXECUTION_STATE = T.DWORD;
T.HRESULT = T.LONG;
T.HANDLE = Pointer(null);
T.PHANDLE = Pointer(T.HANDLE);
T.LPHANDLE = Pointer(T.HANDLE);
T.FCHAR = T.BYTE;
T.FSHORT = T.WORD;
T.FLONG = T.DWORD;
T.MEMORY_BASIC_INFORMATION = Struct('_MEMORY_BASIC_INFORMATION', {
    BaseAddress: T.LPVOID,
    AllocationBase: T.LPVOID,
    AllocationProtect: T.DWORD,
    RegionSize: T.SIZE_T,
    State: T.DWORD,
    Protect: T.DWORD,
    Type: T.DWORD
});
T.PMEMORY_BASIC_INFORMATION = Pointer(Struct('_MEMORY_BASIC_INFORMATION', {
    BaseAddress: T.LPVOID,
    AllocationBase: T.LPVOID,
    AllocationProtect: T.DWORD,
    RegionSize: T.SIZE_T,
    State: T.DWORD,
    Protect: T.DWORD,
    Type: T.DWORD
}));
T.LIST_ENTRY = Struct('_LIST_ENTRY', {
    Flink: Pointer(Struct('_LIST_ENTRY', null)),
    Blink: Pointer(Struct('_LIST_ENTRY', null))
});
T.PLIST_ENTRY = Pointer(Struct('_LIST_ENTRY', {
    Flink: Pointer(Struct('_LIST_ENTRY', null)),
    Blink: Pointer(Struct('_LIST_ENTRY', null))
}));
T.PRLIST_ENTRY = Pointer(Struct('_LIST_ENTRY', {
    Flink: Pointer(Struct('_LIST_ENTRY', null)),
    Blink: Pointer(Struct('_LIST_ENTRY', null))
}));
T.SINGLE_LIST_ENTRY = Struct('_SINGLE_LIST_ENTRY', {
    Next: Pointer(Struct('_SINGLE_LIST_ENTRY', null))
});
T.PSINGLE_LIST_ENTRY = Pointer(Struct('_SINGLE_LIST_ENTRY', {
    Next: Pointer(Struct('_SINGLE_LIST_ENTRY', null))
}));
T.SLIST_HEADER = Union('_SLIST_HEADER', {
    Alignment: T.ULONGLONG,
    __unnamed0: Struct('', {
        Next: T.SINGLE_LIST_ENTRY,
        Depth: T.WORD,
        Sequence: T.WORD
    })
});
T.PSLIST_HEADER = Pointer(Union('_SLIST_HEADER', {
    Alignment: T.ULONGLONG,
    __unnamed0: Struct('', {
        Next: T.SINGLE_LIST_ENTRY,
        Depth: T.WORD,
        Sequence: T.WORD
    })
}));
T.HEAP_INFORMATION_CLASS = Enum('HeapCompatibilityInformation', {
    HeapCompatibilityInformation: 0
});
T.FLOATING_SAVE_AREA = Struct('_FLOATING_SAVE_AREA', {
    ControlWord: T.DWORD,
    StatusWord: T.DWORD,
    TagWord: T.DWORD,
    ErrorOffset: T.DWORD,
    ErrorSelector: T.DWORD,
    DataOffset: T.DWORD,
    DataSelector: T.DWORD,
    RegisterArea: ArrayType(T.BYTE, 80),
    Cr0NpxState: T.DWORD
});
T.PFLOATING_SAVE_AREA = Pointer(Struct('_FLOATING_SAVE_AREA', {
    ControlWord: T.DWORD,
    StatusWord: T.DWORD,
    TagWord: T.DWORD,
    ErrorOffset: T.DWORD,
    ErrorSelector: T.DWORD,
    DataOffset: T.DWORD,
    DataSelector: T.DWORD,
    RegisterArea: ArrayType(T.BYTE, 80),
    Cr0NpxState: T.DWORD
}));
T.CONTEXT = Struct('_CONTEXT', {
    ContextFlags: T.DWORD,
    Dr0: T.DWORD,
    Dr1: T.DWORD,
    Dr2: T.DWORD,
    Dr3: T.DWORD,
    Dr6: T.DWORD,
    Dr7: T.DWORD,
    FloatSave: T.FLOATING_SAVE_AREA,
    SegGs: T.DWORD,
    SegFs: T.DWORD,
    SegEs: T.DWORD,
    SegDs: T.DWORD,
    Edi: T.DWORD,
    Esi: T.DWORD,
    Ebx: T.DWORD,
    Edx: T.DWORD,
    Ecx: T.DWORD,
    Eax: T.DWORD,
    Ebp: T.DWORD,
    Eip: T.DWORD,
    SegCs: T.DWORD,
    EFlags: T.DWORD,
    Esp: T.DWORD,
    SegSs: T.DWORD,
    ExtendedRegisters: ArrayType(T.BYTE, 512)
});
T.LDT_ENTRY = Struct('_LDT_ENTRY', {
    LimitLow: T.WORD,
    BaseLow: T.WORD,
    HighWord: Union('', {
        Bytes: Struct('', {
            BaseMid: T.BYTE,
            Flags1: T.BYTE,
            Flags2: T.BYTE,
            BaseHi: T.BYTE
        }),
        Bits: Struct('', {
            BaseMid: [T.u32, 8],
            Type: [T.u32, 5],
            Dpl: [T.u32, 2],
            Pres: [T.u32, 1],
            LimitHi: [T.u32, 4],
            Sys: [T.u32, 1],
            Reserved_0: [T.u32, 1],
            Default_Big: [T.u32, 1],
            Granularity: [T.u32, 1],
            BaseHi: [T.u32, 8]
        })
    })
});
T.PLDT_ENTRY = Pointer(Struct('_LDT_ENTRY', {
    LimitLow: T.WORD,
    BaseLow: T.WORD,
    HighWord: Union('', {
        Bytes: Struct('', {
            BaseMid: T.BYTE,
            Flags1: T.BYTE,
            Flags2: T.BYTE,
            BaseHi: T.BYTE
        }),
        Bits: Struct('', {
            BaseMid: [T.u32, 8],
            Type: [T.u32, 5],
            Dpl: [T.u32, 2],
            Pres: [T.u32, 1],
            LimitHi: [T.u32, 4],
            Sys: [T.u32, 1],
            Reserved_0: [T.u32, 1],
            Default_Big: [T.u32, 1],
            Granularity: [T.u32, 1],
            BaseHi: [T.u32, 8]
        })
    })
}));
T.PCONTEXT = Pointer(T.CONTEXT);
T.EXCEPTION_RECORD = Struct('_EXCEPTION_RECORD', {
    ExceptionCode: T.DWORD,
    ExceptionFlags: T.DWORD,
    ExceptionRecord: Pointer(Struct('_EXCEPTION_RECORD', null)),
    ExceptionAddress: T.PVOID,
    NumberParameters: T.DWORD,
    ExceptionInformation: ArrayType(T.ULONG_PTR, 15)
});
T.PEXCEPTION_RECORD = Pointer(Struct('_EXCEPTION_RECORD', {
    ExceptionCode: T.DWORD,
    ExceptionFlags: T.DWORD,
    ExceptionRecord: Pointer(Struct('_EXCEPTION_RECORD', null)),
    ExceptionAddress: T.PVOID,
    NumberParameters: T.DWORD,
    ExceptionInformation: ArrayType(T.ULONG_PTR, 15)
}));
T.EXCEPTION_POINTERS = Struct('_EXCEPTION_POINTERS', {
    ExceptionRecord: T.PEXCEPTION_RECORD,
    ContextRecord: T.PCONTEXT
});
T.PEXCEPTION_POINTERS = Pointer(Struct('_EXCEPTION_POINTERS', {
    ExceptionRecord: T.PEXCEPTION_RECORD,
    ContextRecord: T.PCONTEXT
}));
T.PEXCEPTION_HANDLER = Pointer(Fn(T.DWORD, [[T.PEXCEPTION_RECORD], [Pointer(Struct('_EXCEPTION_REGISTRATION_RECORD', null))], [T.PCONTEXT], [Pointer(Pointer(Struct('_EXCEPTION_REGISTRATION_RECORD', null)))]]));
T.EXCEPTION_REGISTRATION_RECORD = Struct('_EXCEPTION_REGISTRATION_RECORD', {
    Prev: Pointer(Struct('_EXCEPTION_REGISTRATION_RECORD', null)),
    Handler: T.PEXCEPTION_HANDLER
});
T.PVECTORED_EXCEPTION_HANDLER = Pointer(Fn(T.LONG, [[T.PEXCEPTION_POINTERS, 'ExceptionInfo']]));
T.NT_TIB = Struct('_NT_TIB', {
    ExceptionList: Pointer(Struct('_EXCEPTION_REGISTRATION_RECORD', null)),
    StackBase: T.PVOID,
    StackLimit: T.PVOID,
    SubSystemTib: T.PVOID,
    __unnamed0: Union('', {
        FiberData: T.PVOID,
        Version: T.DWORD
    }),
    ArbitraryUserPointer: T.PVOID,
    Self: Pointer(Struct('_NT_TIB', null))
});
T.PNT_TIB = Pointer(Struct('_NT_TIB', {
    ExceptionList: Pointer(Struct('_EXCEPTION_REGISTRATION_RECORD', null)),
    StackBase: T.PVOID,
    StackLimit: T.PVOID,
    SubSystemTib: T.PVOID,
    __unnamed0: Union('', {
        FiberData: T.PVOID,
        Version: T.DWORD
    }),
    ArbitraryUserPointer: T.PVOID,
    Self: Pointer(Struct('_NT_TIB', null))
}));
T.IMAGE_DOS_HEADER = Struct('_IMAGE_DOS_HEADER', {
    e_magic: T.WORD,
    e_cblp: T.WORD,
    e_cp: T.WORD,
    e_crlc: T.WORD,
    e_cparhdr: T.WORD,
    e_minalloc: T.WORD,
    e_maxalloc: T.WORD,
    e_ss: T.WORD,
    e_sp: T.WORD,
    e_csum: T.WORD,
    e_ip: T.WORD,
    e_cs: T.WORD,
    e_lfarlc: T.WORD,
    e_ovno: T.WORD,
    e_res: ArrayType(T.WORD, 4),
    e_oemid: T.WORD,
    e_oeminfo: T.WORD,
    e_res2: ArrayType(T.WORD, 10),
    e_lfanew: T.DWORD
});
T.PIMAGE_DOS_HEADER = Pointer(Struct('_IMAGE_DOS_HEADER', {
    e_magic: T.WORD,
    e_cblp: T.WORD,
    e_cp: T.WORD,
    e_crlc: T.WORD,
    e_cparhdr: T.WORD,
    e_minalloc: T.WORD,
    e_maxalloc: T.WORD,
    e_ss: T.WORD,
    e_sp: T.WORD,
    e_csum: T.WORD,
    e_ip: T.WORD,
    e_cs: T.WORD,
    e_lfarlc: T.WORD,
    e_ovno: T.WORD,
    e_res: ArrayType(T.WORD, 4),
    e_oemid: T.WORD,
    e_oeminfo: T.WORD,
    e_res2: ArrayType(T.WORD, 10),
    e_lfanew: T.DWORD
}));
T.IMAGE_OS2_HEADER = Struct('', {
    ne_magic: T.WORD,
    ne_ver: T.BYTE,
    ne_rev: T.BYTE,
    ne_enttab: T.WORD,
    ne_cbenttab: T.WORD,
    ne_crc: T.LONG,
    ne_flags: T.WORD,
    ne_autodata: T.WORD,
    ne_heap: T.WORD,
    ne_stack: T.WORD,
    ne_csip: T.DWORD,
    ne_sssp: T.DWORD,
    ne_cseg: T.WORD,
    ne_cmod: T.WORD,
    ne_cbnrestab: T.WORD,
    ne_segtab: T.WORD,
    ne_rsrctab: T.WORD,
    ne_restab: T.WORD,
    ne_modtab: T.WORD,
    ne_imptab: T.WORD,
    ne_nrestab: T.DWORD,
    ne_cmovent: T.WORD,
    ne_align: T.WORD,
    ne_cres: T.WORD,
    ne_exetyp: T.BYTE,
    ne_flagsothers: T.BYTE,
    ne_pretthunks: T.WORD,
    ne_psegrefbytes: T.WORD,
    ne_swaparea: T.WORD,
    ne_expver: T.WORD
});
T.PIMAGE_OS2_HEADER = Pointer(Struct('', {
    ne_magic: T.WORD,
    ne_ver: T.BYTE,
    ne_rev: T.BYTE,
    ne_enttab: T.WORD,
    ne_cbenttab: T.WORD,
    ne_crc: T.LONG,
    ne_flags: T.WORD,
    ne_autodata: T.WORD,
    ne_heap: T.WORD,
    ne_stack: T.WORD,
    ne_csip: T.DWORD,
    ne_sssp: T.DWORD,
    ne_cseg: T.WORD,
    ne_cmod: T.WORD,
    ne_cbnrestab: T.WORD,
    ne_segtab: T.WORD,
    ne_rsrctab: T.WORD,
    ne_restab: T.WORD,
    ne_modtab: T.WORD,
    ne_imptab: T.WORD,
    ne_nrestab: T.DWORD,
    ne_cmovent: T.WORD,
    ne_align: T.WORD,
    ne_cres: T.WORD,
    ne_exetyp: T.BYTE,
    ne_flagsothers: T.BYTE,
    ne_pretthunks: T.WORD,
    ne_psegrefbytes: T.WORD,
    ne_swaparea: T.WORD,
    ne_expver: T.WORD
}));
T.IMAGE_VXD_HEADER = Struct('_IMAGE_VXD_HEADER', {
    e32_magic: T.WORD,
    e32_border: T.BYTE,
    e32_worder: T.BYTE,
    e32_level: T.DWORD,
    e32_cpu: T.WORD,
    e32_os: T.WORD,
    e32_ver: T.DWORD,
    e32_mflags: T.DWORD,
    e32_mpages: T.DWORD,
    e32_startobj: T.DWORD,
    e32_eip: T.DWORD,
    e32_stackobj: T.DWORD,
    e32_esp: T.DWORD,
    e32_pagesize: T.DWORD,
    e32_lastpagesize: T.DWORD,
    e32_fixupsize: T.DWORD,
    e32_fixupsum: T.DWORD,
    e32_ldrsize: T.DWORD,
    e32_ldrsum: T.DWORD,
    e32_objtab: T.DWORD,
    e32_objcnt: T.DWORD,
    e32_objmap: T.DWORD,
    e32_itermap: T.DWORD,
    e32_rsrctab: T.DWORD,
    e32_rsrccnt: T.DWORD,
    e32_restab: T.DWORD,
    e32_enttab: T.DWORD,
    e32_dirtab: T.DWORD,
    e32_dircnt: T.DWORD,
    e32_fpagetab: T.DWORD,
    e32_frectab: T.DWORD,
    e32_impmod: T.DWORD,
    e32_impmodcnt: T.DWORD,
    e32_impproc: T.DWORD,
    e32_pagesum: T.DWORD,
    e32_datapage: T.DWORD,
    e32_preload: T.DWORD,
    e32_nrestab: T.DWORD,
    e32_cbnrestab: T.DWORD,
    e32_nressum: T.DWORD,
    e32_autodata: T.DWORD,
    e32_debuginfo: T.DWORD,
    e32_debuglen: T.DWORD,
    e32_instpreload: T.DWORD,
    e32_instdemand: T.DWORD,
    e32_heapsize: T.DWORD,
    e32_res3: ArrayType(T.BYTE, 12),
    e32_winresoff: T.DWORD,
    e32_winreslen: T.DWORD,
    e32_devid: T.WORD,
    e32_ddkver: T.WORD
});
T.PIMAGE_VXD_HEADER = Pointer(Struct('_IMAGE_VXD_HEADER', {
    e32_magic: T.WORD,
    e32_border: T.BYTE,
    e32_worder: T.BYTE,
    e32_level: T.DWORD,
    e32_cpu: T.WORD,
    e32_os: T.WORD,
    e32_ver: T.DWORD,
    e32_mflags: T.DWORD,
    e32_mpages: T.DWORD,
    e32_startobj: T.DWORD,
    e32_eip: T.DWORD,
    e32_stackobj: T.DWORD,
    e32_esp: T.DWORD,
    e32_pagesize: T.DWORD,
    e32_lastpagesize: T.DWORD,
    e32_fixupsize: T.DWORD,
    e32_fixupsum: T.DWORD,
    e32_ldrsize: T.DWORD,
    e32_ldrsum: T.DWORD,
    e32_objtab: T.DWORD,
    e32_objcnt: T.DWORD,
    e32_objmap: T.DWORD,
    e32_itermap: T.DWORD,
    e32_rsrctab: T.DWORD,
    e32_rsrccnt: T.DWORD,
    e32_restab: T.DWORD,
    e32_enttab: T.DWORD,
    e32_dirtab: T.DWORD,
    e32_dircnt: T.DWORD,
    e32_fpagetab: T.DWORD,
    e32_frectab: T.DWORD,
    e32_impmod: T.DWORD,
    e32_impmodcnt: T.DWORD,
    e32_impproc: T.DWORD,
    e32_pagesum: T.DWORD,
    e32_datapage: T.DWORD,
    e32_preload: T.DWORD,
    e32_nrestab: T.DWORD,
    e32_cbnrestab: T.DWORD,
    e32_nressum: T.DWORD,
    e32_autodata: T.DWORD,
    e32_debuginfo: T.DWORD,
    e32_debuglen: T.DWORD,
    e32_instpreload: T.DWORD,
    e32_instdemand: T.DWORD,
    e32_heapsize: T.DWORD,
    e32_res3: ArrayType(T.BYTE, 12),
    e32_winresoff: T.DWORD,
    e32_winreslen: T.DWORD,
    e32_devid: T.WORD,
    e32_ddkver: T.WORD
}));
T.IMAGE_FILE_HEADER = Struct('_IMAGE_FILE_HEADER', {
    Machine: T.WORD,
    NumberOfSections: T.WORD,
    TimeDateStamp: T.DWORD,
    PointerToSymbolTable: T.DWORD,
    NumberOfSymbols: T.DWORD,
    SizeOfOptionalHeader: T.WORD,
    Characteristics: T.WORD
});
T.PIMAGE_FILE_HEADER = Pointer(Struct('_IMAGE_FILE_HEADER', {
    Machine: T.WORD,
    NumberOfSections: T.WORD,
    TimeDateStamp: T.DWORD,
    PointerToSymbolTable: T.DWORD,
    NumberOfSymbols: T.DWORD,
    SizeOfOptionalHeader: T.WORD,
    Characteristics: T.WORD
}));
T.IMAGE_DATA_DIRECTORY = Struct('_IMAGE_DATA_DIRECTORY', {
    VirtualAddress: T.DWORD,
    Size: T.DWORD
});
T.PIMAGE_DATA_DIRECTORY = Pointer(Struct('_IMAGE_DATA_DIRECTORY', {
    VirtualAddress: T.DWORD,
    Size: T.DWORD
}));
T.IMAGE_OPTIONAL_HEADER64 = Struct('_IMAGE_OPTIONAL_HEADER64', {
    Magic: T.WORD,
    MajorLinkerVersion: T.BYTE,
    MinorLinkerVersion: T.BYTE,
    SizeOfCode: T.DWORD,
    SizeOfInitializedData: T.DWORD,
    SizeOfUninitializedData: T.DWORD,
    AddressOfEntryPoint: T.DWORD,
    BaseOfCode: T.DWORD,
    ImageBase: T.ULONGLONG,
    SectionAlignment: T.DWORD,
    FileAlignment: T.DWORD,
    MajorOperatingSystemVersion: T.WORD,
    MinorOperatingSystemVersion: T.WORD,
    MajorImageVersion: T.WORD,
    MinorImageVersion: T.WORD,
    MajorSubsystemVersion: T.WORD,
    MinorSubsystemVersion: T.WORD,
    Win32VersionValue: T.DWORD,
    SizeOfImage: T.DWORD,
    SizeOfHeaders: T.DWORD,
    CheckSum: T.DWORD,
    Subsystem: T.WORD,
    DllCharacteristics: T.WORD,
    SizeOfStackReserve: T.ULONGLONG,
    SizeOfStackCommit: T.ULONGLONG,
    SizeOfHeapReserve: T.ULONGLONG,
    SizeOfHeapCommit: T.ULONGLONG,
    LoaderFlags: T.DWORD,
    NumberOfRvaAndSizes: T.DWORD,
    DataDirectory: ArrayType(T.IMAGE_DATA_DIRECTORY, 16)
});
T.PIMAGE_OPTIONAL_HEADER64 = Pointer(Struct('_IMAGE_OPTIONAL_HEADER64', {
    Magic: T.WORD,
    MajorLinkerVersion: T.BYTE,
    MinorLinkerVersion: T.BYTE,
    SizeOfCode: T.DWORD,
    SizeOfInitializedData: T.DWORD,
    SizeOfUninitializedData: T.DWORD,
    AddressOfEntryPoint: T.DWORD,
    BaseOfCode: T.DWORD,
    ImageBase: T.ULONGLONG,
    SectionAlignment: T.DWORD,
    FileAlignment: T.DWORD,
    MajorOperatingSystemVersion: T.WORD,
    MinorOperatingSystemVersion: T.WORD,
    MajorImageVersion: T.WORD,
    MinorImageVersion: T.WORD,
    MajorSubsystemVersion: T.WORD,
    MinorSubsystemVersion: T.WORD,
    Win32VersionValue: T.DWORD,
    SizeOfImage: T.DWORD,
    SizeOfHeaders: T.DWORD,
    CheckSum: T.DWORD,
    Subsystem: T.WORD,
    DllCharacteristics: T.WORD,
    SizeOfStackReserve: T.ULONGLONG,
    SizeOfStackCommit: T.ULONGLONG,
    SizeOfHeapReserve: T.ULONGLONG,
    SizeOfHeapCommit: T.ULONGLONG,
    LoaderFlags: T.DWORD,
    NumberOfRvaAndSizes: T.DWORD,
    DataDirectory: ArrayType(T.IMAGE_DATA_DIRECTORY, 16)
}));
T.IMAGE_NT_HEADERS64 = Struct('_IMAGE_NT_HEADERS64', {
    Signature: T.DWORD,
    FileHeader: T.IMAGE_FILE_HEADER,
    OptionalHeader: T.IMAGE_OPTIONAL_HEADER64
});
T.PIMAGE_NT_HEADERS64 = Pointer(Struct('_IMAGE_NT_HEADERS64', {
    Signature: T.DWORD,
    FileHeader: T.IMAGE_FILE_HEADER,
    OptionalHeader: T.IMAGE_OPTIONAL_HEADER64
}));
T.IMAGE_OPTIONAL_HEADER32 = Struct('_IMAGE_OPTIONAL_HEADER', {
    Magic: T.WORD,
    MajorLinkerVersion: T.BYTE,
    MinorLinkerVersion: T.BYTE,
    SizeOfCode: T.DWORD,
    SizeOfInitializedData: T.DWORD,
    SizeOfUninitializedData: T.DWORD,
    AddressOfEntryPoint: T.DWORD,
    BaseOfCode: T.DWORD,
    BaseOfData: T.DWORD,
    ImageBase: T.DWORD,
    SectionAlignment: T.DWORD,
    FileAlignment: T.DWORD,
    MajorOperatingSystemVersion: T.WORD,
    MinorOperatingSystemVersion: T.WORD,
    MajorImageVersion: T.WORD,
    MinorImageVersion: T.WORD,
    MajorSubsystemVersion: T.WORD,
    MinorSubsystemVersion: T.WORD,
    Win32VersionValue: T.DWORD,
    SizeOfImage: T.DWORD,
    SizeOfHeaders: T.DWORD,
    CheckSum: T.DWORD,
    Subsystem: T.WORD,
    DllCharacteristics: T.WORD,
    SizeOfStackReserve: T.DWORD,
    SizeOfStackCommit: T.DWORD,
    SizeOfHeapReserve: T.DWORD,
    SizeOfHeapCommit: T.DWORD,
    LoaderFlags: T.DWORD,
    NumberOfRvaAndSizes: T.DWORD,
    DataDirectory: ArrayType(T.IMAGE_DATA_DIRECTORY, 16)
});
T.PIMAGE_OPTIONAL_HEADER32 = Pointer(Struct('_IMAGE_OPTIONAL_HEADER', {
    Magic: T.WORD,
    MajorLinkerVersion: T.BYTE,
    MinorLinkerVersion: T.BYTE,
    SizeOfCode: T.DWORD,
    SizeOfInitializedData: T.DWORD,
    SizeOfUninitializedData: T.DWORD,
    AddressOfEntryPoint: T.DWORD,
    BaseOfCode: T.DWORD,
    BaseOfData: T.DWORD,
    ImageBase: T.DWORD,
    SectionAlignment: T.DWORD,
    FileAlignment: T.DWORD,
    MajorOperatingSystemVersion: T.WORD,
    MinorOperatingSystemVersion: T.WORD,
    MajorImageVersion: T.WORD,
    MinorImageVersion: T.WORD,
    MajorSubsystemVersion: T.WORD,
    MinorSubsystemVersion: T.WORD,
    Win32VersionValue: T.DWORD,
    SizeOfImage: T.DWORD,
    SizeOfHeaders: T.DWORD,
    CheckSum: T.DWORD,
    Subsystem: T.WORD,
    DllCharacteristics: T.WORD,
    SizeOfStackReserve: T.DWORD,
    SizeOfStackCommit: T.DWORD,
    SizeOfHeapReserve: T.DWORD,
    SizeOfHeapCommit: T.DWORD,
    LoaderFlags: T.DWORD,
    NumberOfRvaAndSizes: T.DWORD,
    DataDirectory: ArrayType(T.IMAGE_DATA_DIRECTORY, 16)
}));
T.IMAGE_NT_HEADERS32 = Struct('_IMAGE_NT_HEADERS', {
    Signature: T.DWORD,
    FileHeader: T.IMAGE_FILE_HEADER,
    OptionalHeader: T.IMAGE_OPTIONAL_HEADER32
});
T.PIMAGE_NT_HEADERS32 = Pointer(Struct('_IMAGE_NT_HEADERS', {
    Signature: T.DWORD,
    FileHeader: T.IMAGE_FILE_HEADER,
    OptionalHeader: T.IMAGE_OPTIONAL_HEADER32
}));
T.IMAGE_NT_HEADERS = T.IMAGE_NT_HEADERS32;
T.PIMAGE_NT_HEADERS = T.PIMAGE_NT_HEADERS32;
T.IMAGE_OPTIONAL_HEADER = T.IMAGE_OPTIONAL_HEADER32;
T.PIMAGE_OPTIONAL_HEADER = T.PIMAGE_OPTIONAL_HEADER32;
T.IMAGE_SECTION_HEADER = Struct('_IMAGE_SECTION_HEADER', {
    Name: ArrayType(T.BYTE, 8),
    Misc: Union('', {
        PhysicalAddress: T.DWORD,
        VirtualSize: T.DWORD
    }),
    VirtualAddress: T.DWORD,
    SizeOfRawData: T.DWORD,
    PointerToRawData: T.DWORD,
    PointerToRelocations: T.DWORD,
    PointerToLinenumbers: T.DWORD,
    NumberOfRelocations: T.WORD,
    NumberOfLinenumbers: T.WORD,
    Characteristics: T.DWORD
});
T.PIMAGE_SECTION_HEADER = Pointer(Struct('_IMAGE_SECTION_HEADER', {
    Name: ArrayType(T.BYTE, 8),
    Misc: Union('', {
        PhysicalAddress: T.DWORD,
        VirtualSize: T.DWORD
    }),
    VirtualAddress: T.DWORD,
    SizeOfRawData: T.DWORD,
    PointerToRawData: T.DWORD,
    PointerToRelocations: T.DWORD,
    PointerToLinenumbers: T.DWORD,
    NumberOfRelocations: T.WORD,
    NumberOfLinenumbers: T.WORD,
    Characteristics: T.DWORD
}));
T.IMAGE_SYMBOL = Struct('_IMAGE_SYMBOL', {
    N: Union('', {
        ShortName: ArrayType(T.BYTE, 8),
        Name: Struct('', {
            Short: T.DWORD,
            Long: T.DWORD
        }),
        LongName: ArrayType(T.DWORD, 2)
    }),
    Value: T.DWORD,
    SectionNumber: T.SHORT,
    Type: T.WORD,
    StorageClass: T.BYTE,
    NumberOfAuxSymbols: T.BYTE
});
T.PIMAGE_SYMBOL = Pointer(T.IMAGE_SYMBOL);
T.IMAGE_LINENUMBER = Struct('_IMAGE_LINENUMBER', {
    Type: Union('', {
        SymbolTableIndex: T.DWORD,
        VirtualAddress: T.DWORD
    }),
    Linenumber: T.WORD
});
T.PIMAGE_LINENUMBER = Pointer(T.IMAGE_LINENUMBER);
T.IMAGE_AUX_SYMBOL = Union('_IMAGE_AUX_SYMBOL', {
    Sym: Struct('', {
        TagIndex: T.DWORD,
        Misc: Union('', {
            LnSz: Struct('', {
                Linenumber: T.WORD,
                Size: T.WORD
            }),
            TotalSize: T.DWORD
        }),
        FcnAry: Union('', {
            Function: Struct('', {
                PointerToLinenumber: T.DWORD,
                PointerToNextFunction: T.DWORD
            }),
            Array: Struct('', {
                Dimension: ArrayType(T.WORD, 4)
            })
        }),
        TvIndex: T.WORD
    }),
    File: Struct('', {
        Name: ArrayType(T.BYTE, 18)
    }),
    Section: Struct('', {
        Length: T.DWORD,
        NumberOfRelocations: T.WORD,
        NumberOfLinenumbers: T.WORD,
        CheckSum: T.DWORD,
        Number: T.SHORT,
        Selection: T.BYTE
    })
});
T.PIMAGE_AUX_SYMBOL = Pointer(T.IMAGE_AUX_SYMBOL);
T.IMAGE_EXPORT_DIRECTORY = Struct('_IMAGE_EXPORT_DIRECTORY', {
    Characteristics: T.DWORD,
    TimeDateStamp: T.DWORD,
    MajorVersion: T.WORD,
    MinorVersion: T.WORD,
    Name: T.DWORD,
    Base: T.DWORD,
    NumberOfFunctions: T.DWORD,
    NumberOfNames: T.DWORD,
    AddressOfFunctions: T.DWORD,
    AddressOfNames: T.DWORD,
    AddressOfNameOrdinals: T.DWORD
});
T.PIMAGE_EXPORT_DIRECTORY = Pointer(Struct('_IMAGE_EXPORT_DIRECTORY', {
    Characteristics: T.DWORD,
    TimeDateStamp: T.DWORD,
    MajorVersion: T.WORD,
    MinorVersion: T.WORD,
    Name: T.DWORD,
    Base: T.DWORD,
    NumberOfFunctions: T.DWORD,
    NumberOfNames: T.DWORD,
    AddressOfFunctions: T.DWORD,
    AddressOfNames: T.DWORD,
    AddressOfNameOrdinals: T.DWORD
}));
T.IMAGE_IMPORT_BY_NAME = Struct('_IMAGE_IMPORT_BY_NAME', {
    Hint: T.WORD,
    Name: ArrayType(T.BYTE, 1)
});
T.PIMAGE_IMPORT_BY_NAME = Pointer(Struct('_IMAGE_IMPORT_BY_NAME', {
    Hint: T.WORD,
    Name: ArrayType(T.BYTE, 1)
}));
T.IMAGE_THUNK_DATA64 = Struct('_IMAGE_THUNK_DATA64', {
    u1: Union('', {
        ForwarderString: T.ULONGLONG,
        Function: T.ULONGLONG,
        Ordinal: T.ULONGLONG,
        AddressOfData: T.ULONGLONG
    })
});
T.PIMAGE_THUNK_DATA64 = Pointer(Struct('_IMAGE_THUNK_DATA64', {
    u1: Union('', {
        ForwarderString: T.ULONGLONG,
        Function: T.ULONGLONG,
        Ordinal: T.ULONGLONG,
        AddressOfData: T.ULONGLONG
    })
}));
T.IMAGE_THUNK_DATA32 = Struct('_IMAGE_THUNK_DATA32', {
    u1: Union('', {
        ForwarderString: T.DWORD,
        Function: T.DWORD,
        Ordinal: T.DWORD,
        AddressOfData: T.DWORD
    })
});
T.PIMAGE_THUNK_DATA32 = Pointer(Struct('_IMAGE_THUNK_DATA32', {
    u1: Union('', {
        ForwarderString: T.DWORD,
        Function: T.DWORD,
        Ordinal: T.DWORD,
        AddressOfData: T.DWORD
    })
}));
T.IMAGE_IMPORT_DESCRIPTOR = Struct('_IMAGE_IMPORT_DESCRIPTOR', {
    __unnamed0: Union('', {
        Characteristics: T.DWORD,
        OriginalFirstThunk: T.DWORD
    }),
    TimeDateStamp: T.DWORD,
    ForwarderChain: T.DWORD,
    Name: T.DWORD,
    FirstThunk: T.DWORD
});
T.PIMAGE_IMPORT_DESCRIPTOR = Pointer(Struct('_IMAGE_IMPORT_DESCRIPTOR', {
    __unnamed0: Union('', {
        Characteristics: T.DWORD,
        OriginalFirstThunk: T.DWORD
    }),
    TimeDateStamp: T.DWORD,
    ForwarderChain: T.DWORD,
    Name: T.DWORD,
    FirstThunk: T.DWORD
}));
T.IMAGE_THUNK_DATA = T.IMAGE_THUNK_DATA32;
T.PIMAGE_THUNK_DATA = T.PIMAGE_THUNK_DATA32;
T.IMAGE_BOUND_IMPORT_DESCRIPTOR = Struct('_IMAGE_BOUND_IMPORT_DESCRIPTOR', {
    TimeDateStamp: T.DWORD,
    OffsetModuleName: T.WORD,
    NumberOfModuleForwarderRefs: T.WORD
});
T.PIMAGE_BOUND_IMPORT_DESCRIPTOR = Pointer(Struct('_IMAGE_BOUND_IMPORT_DESCRIPTOR', {
    TimeDateStamp: T.DWORD,
    OffsetModuleName: T.WORD,
    NumberOfModuleForwarderRefs: T.WORD
}));
T.IMAGE_BOUND_FORWARDER_REF = Struct('_IMAGE_BOUND_FORWARDER_REF', {
    TimeDateStamp: T.DWORD,
    OffsetModuleName: T.WORD,
    Reserved: T.WORD
});
T.PIMAGE_BOUND_FORWARDER_REF = Pointer(Struct('_IMAGE_BOUND_FORWARDER_REF', {
    TimeDateStamp: T.DWORD,
    OffsetModuleName: T.WORD,
    Reserved: T.WORD
}));
T.IMAGE_BASE_RELOCATION = Struct('_IMAGE_BASE_RELOCATION', {
    VirtualAddress: T.DWORD,
    SizeOfBlock: T.DWORD
});
T.PIMAGE_BASE_RELOCATION = Pointer(Struct('_IMAGE_BASE_RELOCATION', {
    VirtualAddress: T.DWORD,
    SizeOfBlock: T.DWORD
}));
T.IMAGE_RELOCATION = Struct('_IMAGE_RELOCATION', {
    __unnamed0: Union('', {
        VirtualAddress: T.DWORD,
        RelocCount: T.DWORD
    }),
    SymbolTableIndex: T.DWORD,
    Type: T.WORD
});
T.PIMAGE_RELOCATION = Pointer(Struct('_IMAGE_RELOCATION', {
    __unnamed0: Union('', {
        VirtualAddress: T.DWORD,
        RelocCount: T.DWORD
    }),
    SymbolTableIndex: T.DWORD,
    Type: T.WORD
}));
T.IMAGE_ARCHIVE_MEMBER_HEADER = Struct('_IMAGE_ARCHIVE_MEMBER_HEADER', {
    Name: ArrayType(T.BYTE, 16),
    Date: ArrayType(T.BYTE, 12),
    UserID: ArrayType(T.BYTE, 6),
    GroupID: ArrayType(T.BYTE, 6),
    Mode: ArrayType(T.BYTE, 8),
    Size: ArrayType(T.BYTE, 10),
    EndHeader: ArrayType(T.BYTE, 2)
});
T.PIMAGE_ARCHIVE_MEMBER_HEADER = Pointer(Struct('_IMAGE_ARCHIVE_MEMBER_HEADER', {
    Name: ArrayType(T.BYTE, 16),
    Date: ArrayType(T.BYTE, 12),
    UserID: ArrayType(T.BYTE, 6),
    GroupID: ArrayType(T.BYTE, 6),
    Mode: ArrayType(T.BYTE, 8),
    Size: ArrayType(T.BYTE, 10),
    EndHeader: ArrayType(T.BYTE, 2)
}));
T.IMPORT_OBJECT_HEADER = Struct('_IMPORT_OBJECT_HEADER', {
    Sig1: T.WORD,
    Sig2: T.WORD,
    Version: T.WORD,
    Machine: T.WORD,
    TimeDateStamp: T.DWORD,
    SizeOfData: T.DWORD,
    __unnamed0: Union('', {
        Ordinal: T.WORD,
        Hint: T.WORD
    }),
    Type: [T.WORD, 2],
    NameType: [T.WORD, 3],
    Reserved: [T.WORD, 11]
});
T.IMPORT_OBJECT_TYPE = Enum('IMPORT_OBJECT_CONST', {
    IMPORT_OBJECT_CODE: 0,
    IMPORT_OBJECT_DATA: 1,
    IMPORT_OBJECT_CONST: 2
});
T.IMPORT_OBJECT_NAME_TYPE = Enum('IMPORT_OBJECT_NAME_UNDECORATE', {
    IMPORT_OBJECT_ORDINAL: 0,
    IMPORT_OBJECT_NAME: 1,
    IMPORT_OBJECT_NAME_NO_PREFIX: 2,
    IMPORT_OBJECT_NAME_UNDECORATE: 3
});
T.ANON_OBJECT_HEADER = Struct('_ANON_OBJECT_HEADER', {
    Sig1: T.WORD,
    Sig2: T.WORD,
    Version: T.WORD,
    Machine: T.WORD,
    TimeDateStamp: T.DWORD,
    ClassID: T.CLSID,
    SizeOfData: T.DWORD
});
T.IMAGE_RESOURCE_DIRECTORY = Struct('_IMAGE_RESOURCE_DIRECTORY', {
    Characteristics: T.DWORD,
    TimeDateStamp: T.DWORD,
    MajorVersion: T.WORD,
    MinorVersion: T.WORD,
    NumberOfNamedEntries: T.WORD,
    NumberOfIdEntries: T.WORD
});
T.PIMAGE_RESOURCE_DIRECTORY = Pointer(Struct('_IMAGE_RESOURCE_DIRECTORY', {
    Characteristics: T.DWORD,
    TimeDateStamp: T.DWORD,
    MajorVersion: T.WORD,
    MinorVersion: T.WORD,
    NumberOfNamedEntries: T.WORD,
    NumberOfIdEntries: T.WORD
}));
T.IMAGE_RESOURCE_DIRECTORY_ENTRY = Struct('_IMAGE_RESOURCE_DIRECTORY_ENTRY', {
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            NameOffset: [T.u32, 31],
            NameIsString: [T.u32, 1]
        }),
        Name: T.DWORD,
        __unnamed1: Struct('', {
            Id: T.WORD,
            __pad: T.WORD
        })
    }),
    __unnamed1: Union('', {
        OffsetToData: T.DWORD,
        __unnamed0: Struct('', {
            OffsetToDirectory: [T.u32, 31],
            DataIsDirectory: [T.u32, 1]
        })
    })
});
T.PIMAGE_RESOURCE_DIRECTORY_ENTRY = Pointer(Struct('_IMAGE_RESOURCE_DIRECTORY_ENTRY', {
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            NameOffset: [T.u32, 31],
            NameIsString: [T.u32, 1]
        }),
        Name: T.DWORD,
        __unnamed1: Struct('', {
            Id: T.WORD,
            __pad: T.WORD
        })
    }),
    __unnamed1: Union('', {
        OffsetToData: T.DWORD,
        __unnamed0: Struct('', {
            OffsetToDirectory: [T.u32, 31],
            DataIsDirectory: [T.u32, 1]
        })
    })
}));
T.IMAGE_RESOURCE_DIRECTORY_STRING = Struct('_IMAGE_RESOURCE_DIRECTORY_STRING', {
    Length: T.WORD,
    NameString: ArrayType(T.CHAR, 1)
});
T.PIMAGE_RESOURCE_DIRECTORY_STRING = Pointer(Struct('_IMAGE_RESOURCE_DIRECTORY_STRING', {
    Length: T.WORD,
    NameString: ArrayType(T.CHAR, 1)
}));
T.IMAGE_RESOURCE_DIR_STRING_U = Struct('_IMAGE_RESOURCE_DIR_STRING_U', {
    Length: T.WORD,
    NameString: ArrayType(T.WCHAR, 1)
});
T.PIMAGE_RESOURCE_DIR_STRING_U = Pointer(Struct('_IMAGE_RESOURCE_DIR_STRING_U', {
    Length: T.WORD,
    NameString: ArrayType(T.WCHAR, 1)
}));
T.IMAGE_RESOURCE_DATA_ENTRY = Struct('_IMAGE_RESOURCE_DATA_ENTRY', {
    OffsetToData: T.DWORD,
    Size: T.DWORD,
    CodePage: T.DWORD,
    Reserved: T.DWORD
});
T.PIMAGE_RESOURCE_DATA_ENTRY = Pointer(Struct('_IMAGE_RESOURCE_DATA_ENTRY', {
    OffsetToData: T.DWORD,
    Size: T.DWORD,
    CodePage: T.DWORD,
    Reserved: T.DWORD
}));
T.PIMAGE_TLS_CALLBACK = Pointer(Fn(null, [[T.LPVOID, 'DllHandle'], [T.DWORD, 'Reason'], [T.LPVOID, 'Reserved']]));
T.IMAGE_TLS_DIRECTORY64 = Struct('_IMAGE_TLS_DIRECTORY64', {
    StartAddressOfRawData: T.ULONGLONG,
    EndAddressOfRawData: T.ULONGLONG,
    AddressOfIndex: T.ULONGLONG,
    AddressOfCallBacks: T.ULONGLONG,
    SizeOfZeroFill: T.DWORD,
    Characteristics: T.DWORD
});
T.PIMAGE_TLS_DIRECTORY64 = Pointer(Struct('_IMAGE_TLS_DIRECTORY64', {
    StartAddressOfRawData: T.ULONGLONG,
    EndAddressOfRawData: T.ULONGLONG,
    AddressOfIndex: T.ULONGLONG,
    AddressOfCallBacks: T.ULONGLONG,
    SizeOfZeroFill: T.DWORD,
    Characteristics: T.DWORD
}));
T.IMAGE_TLS_DIRECTORY32 = Struct('_IMAGE_TLS_DIRECTORY32', {
    StartAddressOfRawData: T.DWORD,
    EndAddressOfRawData: T.DWORD,
    AddressOfIndex: T.DWORD,
    AddressOfCallBacks: T.DWORD,
    SizeOfZeroFill: T.DWORD,
    Characteristics: T.DWORD
});
T.PIMAGE_TLS_DIRECTORY32 = Pointer(Struct('_IMAGE_TLS_DIRECTORY32', {
    StartAddressOfRawData: T.DWORD,
    EndAddressOfRawData: T.DWORD,
    AddressOfIndex: T.DWORD,
    AddressOfCallBacks: T.DWORD,
    SizeOfZeroFill: T.DWORD,
    Characteristics: T.DWORD
}));
T.IMAGE_TLS_DIRECTORY = T.IMAGE_TLS_DIRECTORY32;
T.PIMAGE_TLS_DIRECTORY = T.PIMAGE_TLS_DIRECTORY32;
T.IMAGE_DEBUG_DIRECTORY = Struct('_IMAGE_DEBUG_DIRECTORY', {
    Characteristics: T.DWORD,
    TimeDateStamp: T.DWORD,
    MajorVersion: T.WORD,
    MinorVersion: T.WORD,
    Type: T.DWORD,
    SizeOfData: T.DWORD,
    AddressOfRawData: T.DWORD,
    PointerToRawData: T.DWORD
});
T.PIMAGE_DEBUG_DIRECTORY = Pointer(Struct('_IMAGE_DEBUG_DIRECTORY', {
    Characteristics: T.DWORD,
    TimeDateStamp: T.DWORD,
    MajorVersion: T.WORD,
    MinorVersion: T.WORD,
    Type: T.DWORD,
    SizeOfData: T.DWORD,
    AddressOfRawData: T.DWORD,
    PointerToRawData: T.DWORD
}));
T.ReplacesCorHdrNumericDefines = Enum('MAX_PACKAGE_NAME', {
    COMIMAGE_FLAGS_ILONLY: 1,
    COMIMAGE_FLAGS_32BITREQUIRED: 2,
    COMIMAGE_FLAGS_IL_LIBRARY: 4,
    COMIMAGE_FLAGS_STRONGNAMESIGNED: 8,
    COMIMAGE_FLAGS_TRACKDEBUGDATA: 65536,
    COR_VERSION_MAJOR_V2: 2,
    COR_VERSION_MAJOR: 3,
    COR_VERSION_MINOR: 0,
    COR_DELETED_NAME_LENGTH: 8,
    COR_VTABLEGAP_NAME_LENGTH: 8,
    NATIVE_TYPE_MAX_CB: 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE: 255,
    IMAGE_COR_MIH_METHODRVA: 1,
    IMAGE_COR_MIH_EHRVA: 2,
    IMAGE_COR_MIH_BASICBLOCK: 8,
    COR_VTABLE_32BIT: 1,
    COR_VTABLE_64BIT: 2,
    COR_VTABLE_FROM_UNMANAGED: 4,
    COR_VTABLE_CALL_MOST_DERIVED: 16,
    IMAGE_COR_EATJ_THUNK_SIZE: 32,
    MAX_CLASS_NAME: 1024,
    MAX_PACKAGE_NAME: 1024
});
T.IMAGE_COR20_HEADER = Struct('IMAGE_COR20_HEADER', {
    cb: T.DWORD,
    MajorRuntimeVersion: T.WORD,
    MinorRuntimeVersion: T.WORD,
    MetaData: T.IMAGE_DATA_DIRECTORY,
    Flags: T.DWORD,
    EntryPointToken: T.DWORD,
    Resources: T.IMAGE_DATA_DIRECTORY,
    StrongNameSignature: T.IMAGE_DATA_DIRECTORY,
    CodeManagerTable: T.IMAGE_DATA_DIRECTORY,
    VTableFixups: T.IMAGE_DATA_DIRECTORY,
    ExportAddressTableJumps: T.IMAGE_DATA_DIRECTORY,
    ManagedNativeHeader: T.IMAGE_DATA_DIRECTORY
});
T.PIMAGE_COR20_HEADER = Pointer(Struct('IMAGE_COR20_HEADER', {
    cb: T.DWORD,
    MajorRuntimeVersion: T.WORD,
    MinorRuntimeVersion: T.WORD,
    MetaData: T.IMAGE_DATA_DIRECTORY,
    Flags: T.DWORD,
    EntryPointToken: T.DWORD,
    Resources: T.IMAGE_DATA_DIRECTORY,
    StrongNameSignature: T.IMAGE_DATA_DIRECTORY,
    CodeManagerTable: T.IMAGE_DATA_DIRECTORY,
    VTableFixups: T.IMAGE_DATA_DIRECTORY,
    ExportAddressTableJumps: T.IMAGE_DATA_DIRECTORY,
    ManagedNativeHeader: T.IMAGE_DATA_DIRECTORY
}));
T.IMAGE_COFF_SYMBOLS_HEADER = Struct('_IMAGE_COFF_SYMBOLS_HEADER', {
    NumberOfSymbols: T.DWORD,
    LvaToFirstSymbol: T.DWORD,
    NumberOfLinenumbers: T.DWORD,
    LvaToFirstLinenumber: T.DWORD,
    RvaToFirstByteOfCode: T.DWORD,
    RvaToLastByteOfCode: T.DWORD,
    RvaToFirstByteOfData: T.DWORD,
    RvaToLastByteOfData: T.DWORD
});
T.PIMAGE_COFF_SYMBOLS_HEADER = Pointer(Struct('_IMAGE_COFF_SYMBOLS_HEADER', {
    NumberOfSymbols: T.DWORD,
    LvaToFirstSymbol: T.DWORD,
    NumberOfLinenumbers: T.DWORD,
    LvaToFirstLinenumber: T.DWORD,
    RvaToFirstByteOfCode: T.DWORD,
    RvaToLastByteOfCode: T.DWORD,
    RvaToFirstByteOfData: T.DWORD,
    RvaToLastByteOfData: T.DWORD
}));
T.FPO_DATA = Struct('_FPO_DATA', {
    ulOffStart: T.DWORD,
    cbProcSize: T.DWORD,
    cdwLocals: T.DWORD,
    cdwParams: T.WORD,
    cbProlog: [T.WORD, 8],
    cbRegs: [T.WORD, 3],
    fHasSEH: [T.WORD, 1],
    fUseBP: [T.WORD, 1],
    reserved: [T.WORD, 1],
    cbFrame: [T.WORD, 2]
});
T.PFPO_DATA = Pointer(Struct('_FPO_DATA', {
    ulOffStart: T.DWORD,
    cbProcSize: T.DWORD,
    cdwLocals: T.DWORD,
    cdwParams: T.WORD,
    cbProlog: [T.WORD, 8],
    cbRegs: [T.WORD, 3],
    fHasSEH: [T.WORD, 1],
    fUseBP: [T.WORD, 1],
    reserved: [T.WORD, 1],
    cbFrame: [T.WORD, 2]
}));
T.IMAGE_LOAD_CONFIG_DIRECTORY = Struct('_IMAGE_LOAD_CONFIG_DIRECTORY', {
    Size: T.DWORD,
    TimeDateStamp: T.DWORD,
    MajorVersion: T.WORD,
    MinorVersion: T.WORD,
    GlobalFlagsClear: T.DWORD,
    GlobalFlagsSet: T.DWORD,
    CriticalSectionDefaultTimeout: T.DWORD,
    DeCommitFreeBlockThreshold: T.DWORD,
    DeCommitTotalFreeThreshold: T.DWORD,
    LockPrefixTable: T.PVOID,
    MaximumAllocationSize: T.DWORD,
    VirtualMemoryThreshold: T.DWORD,
    ProcessHeapFlags: T.DWORD,
    ProcessAffinityMask: T.DWORD,
    CSDVersion: T.WORD,
    Reserved1: T.WORD,
    EditList: T.PVOID,
    SecurityCookie: T.DWORD,
    SEHandlerTable: T.DWORD,
    SEHandlerCount: T.DWORD
});
T.PIMAGE_LOAD_CONFIG_DIRECTORY = Pointer(Struct('_IMAGE_LOAD_CONFIG_DIRECTORY', {
    Size: T.DWORD,
    TimeDateStamp: T.DWORD,
    MajorVersion: T.WORD,
    MinorVersion: T.WORD,
    GlobalFlagsClear: T.DWORD,
    GlobalFlagsSet: T.DWORD,
    CriticalSectionDefaultTimeout: T.DWORD,
    DeCommitFreeBlockThreshold: T.DWORD,
    DeCommitTotalFreeThreshold: T.DWORD,
    LockPrefixTable: T.PVOID,
    MaximumAllocationSize: T.DWORD,
    VirtualMemoryThreshold: T.DWORD,
    ProcessHeapFlags: T.DWORD,
    ProcessAffinityMask: T.DWORD,
    CSDVersion: T.WORD,
    Reserved1: T.WORD,
    EditList: T.PVOID,
    SecurityCookie: T.DWORD,
    SEHandlerTable: T.DWORD,
    SEHandlerCount: T.DWORD
}));
T.IMAGE_FUNCTION_ENTRY = Struct('_IMAGE_FUNCTION_ENTRY', {
    StartingAddress: T.DWORD,
    EndingAddress: T.DWORD,
    EndOfPrologue: T.DWORD
});
T.PIMAGE_FUNCTION_ENTRY = Pointer(Struct('_IMAGE_FUNCTION_ENTRY', {
    StartingAddress: T.DWORD,
    EndingAddress: T.DWORD,
    EndOfPrologue: T.DWORD
}));
T.IMAGE_DEBUG_MISC = Struct('_IMAGE_DEBUG_MISC', {
    DataType: T.DWORD,
    Length: T.DWORD,
    Unicode: T.BYTE,
    Reserved: ArrayType(T.BYTE, 3),
    Data: ArrayType(T.BYTE, 1)
});
T.PIMAGE_DEBUG_MISC = Pointer(Struct('_IMAGE_DEBUG_MISC', {
    DataType: T.DWORD,
    Length: T.DWORD,
    Unicode: T.BYTE,
    Reserved: ArrayType(T.BYTE, 3),
    Data: ArrayType(T.BYTE, 1)
}));
T.IMAGE_SEPARATE_DEBUG_HEADER = Struct('_IMAGE_SEPARATE_DEBUG_HEADER', {
    Signature: T.WORD,
    Flags: T.WORD,
    Machine: T.WORD,
    Characteristics: T.WORD,
    TimeDateStamp: T.DWORD,
    CheckSum: T.DWORD,
    ImageBase: T.DWORD,
    SizeOfImage: T.DWORD,
    NumberOfSections: T.DWORD,
    ExportedNamesSize: T.DWORD,
    DebugDirectorySize: T.DWORD,
    SectionAlignment: T.DWORD,
    Reserved: ArrayType(T.DWORD, 2)
});
T.PIMAGE_SEPARATE_DEBUG_HEADER = Pointer(Struct('_IMAGE_SEPARATE_DEBUG_HEADER', {
    Signature: T.WORD,
    Flags: T.WORD,
    Machine: T.WORD,
    Characteristics: T.WORD,
    TimeDateStamp: T.DWORD,
    CheckSum: T.DWORD,
    ImageBase: T.DWORD,
    SizeOfImage: T.DWORD,
    NumberOfSections: T.DWORD,
    ExportedNamesSize: T.DWORD,
    DebugDirectorySize: T.DWORD,
    SectionAlignment: T.DWORD,
    Reserved: ArrayType(T.DWORD, 2)
}));
T.MESSAGE_RESOURCE_ENTRY = Struct('tagMESSAGE_RESOURCE_ENTRY', {
    Length: T.WORD,
    Flags: T.WORD,
    Text: ArrayType(T.BYTE, 1)
});
T.PMESSAGE_RESOURCE_ENTRY = Pointer(Struct('tagMESSAGE_RESOURCE_ENTRY', {
    Length: T.WORD,
    Flags: T.WORD,
    Text: ArrayType(T.BYTE, 1)
}));
T.MESSAGE_RESOURCE_BLOCK = Struct('tagMESSAGE_RESOURCE_BLOCK', {
    LowId: T.DWORD,
    HighId: T.DWORD,
    OffsetToEntries: T.DWORD
});
T.PMESSAGE_RESOURCE_BLOCK = Pointer(Struct('tagMESSAGE_RESOURCE_BLOCK', {
    LowId: T.DWORD,
    HighId: T.DWORD,
    OffsetToEntries: T.DWORD
}));
T.MESSAGE_RESOURCE_DATA = Struct('tagMESSAGE_RESOURCE_DATA', {
    NumberOfBlocks: T.DWORD,
    Blocks: ArrayType(T.MESSAGE_RESOURCE_BLOCK, 1)
});
T.PMESSAGE_RESOURCE_DATA = Pointer(Struct('tagMESSAGE_RESOURCE_DATA', {
    NumberOfBlocks: T.DWORD,
    Blocks: ArrayType(T.MESSAGE_RESOURCE_BLOCK, 1)
}));
T.PACCESS_TOKEN = T.PVOID;
T.PSECURITY_DESCRIPTOR = T.PVOID;
T.PSID = T.PVOID;
T.TOKEN_ELEVATION_TYPE = Enum('TokenElevationTypeLimited', {
    TokenElevationTypeDefault: 1,
    TokenElevationTypeFull: 2,
    TokenElevationTypeLimited: 3
});
T.PTOKEN_ELEVATION_TYPE = Pointer(Enum('TokenElevationTypeLimited', {
    TokenElevationTypeDefault: 1,
    TokenElevationTypeFull: 2,
    TokenElevationTypeLimited: 3
}));
T.TOKEN_INFORMATION_CLASS = Enum('MaxTokenInfoClass', {
    TokenUser: 1,
    TokenGroups: 2,
    TokenPrivileges: 3,
    TokenOwner: 4,
    TokenPrimaryGroup: 5,
    TokenDefaultDacl: 6,
    TokenSource: 7,
    TokenType: 8,
    TokenImpersonationLevel: 9,
    TokenStatistics: 10,
    TokenRestrictedSids: 11,
    TokenSessionId: 12,
    TokenGroupsAndPrivileges: 13,
    TokenSessionReference: 14,
    TokenSandBoxInert: 15,
    TokenAuditPolicy: 16,
    TokenOrigin: 17,
    TokenElevationType: 18,
    TokenLinkedToken: 19,
    TokenElevation: 20,
    TokenHasRestrictions: 21,
    TokenAccessInformation: 22,
    TokenVirtualizationAllowed: 23,
    TokenVirtualizationEnabled: 24,
    TokenIntegrityLevel: 25,
    TokenUIAccess: 26,
    TokenMandatoryPolicy: 27,
    TokenLogonSid: 28,
    MaxTokenInfoClass: 29
});
T.ACCESS_MASK = T.DWORD;
T.PACCESS_MASK = Pointer(T.DWORD);
T.GENERIC_MAPPING = Struct('_GENERIC_MAPPING', {
    GenericRead: T.ACCESS_MASK,
    GenericWrite: T.ACCESS_MASK,
    GenericExecute: T.ACCESS_MASK,
    GenericAll: T.ACCESS_MASK
});
T.PGENERIC_MAPPING = Pointer(Struct('_GENERIC_MAPPING', {
    GenericRead: T.ACCESS_MASK,
    GenericWrite: T.ACCESS_MASK,
    GenericExecute: T.ACCESS_MASK,
    GenericAll: T.ACCESS_MASK
}));
T.SID_IDENTIFIER_AUTHORITY = Struct('', {
    Value: ArrayType(T.BYTE, 6)
});
T.PSID_IDENTIFIER_AUTHORITY = Pointer(Struct('', {
    Value: ArrayType(T.BYTE, 6)
}));
T.SID = Struct('_SID', {
    Revision: T.BYTE,
    SubAuthorityCount: T.BYTE,
    IdentifierAuthority: T.SID_IDENTIFIER_AUTHORITY,
    SubAuthority: ArrayType(T.DWORD, 1)
});
T.PISID = Pointer(Struct('_SID', {
    Revision: T.BYTE,
    SubAuthorityCount: T.BYTE,
    IdentifierAuthority: T.SID_IDENTIFIER_AUTHORITY,
    SubAuthority: ArrayType(T.DWORD, 1)
}));
T.ACL = Struct('_ACL', {
    AclRevision: T.BYTE,
    Sbz1: T.BYTE,
    AclSize: T.WORD,
    AceCount: T.WORD,
    Sbz2: T.WORD
});
T.PACL = Pointer(Struct('_ACL', {
    AclRevision: T.BYTE,
    Sbz1: T.BYTE,
    AclSize: T.WORD,
    AceCount: T.WORD,
    Sbz2: T.WORD
}));
T.ACL_INFORMATION_CLASS = Enum('AclSizeInformation', {
    AclRevisionInformation: 1,
    AclSizeInformation: 2
});
T.ACL_REVISION_INFORMATION = Struct('_ACL_REVISION_INFORMATION', {
    AclRevision: T.DWORD
});
T.PACL_REVISION_INFORMATION = Pointer(Struct('_ACL_REVISION_INFORMATION', {
    AclRevision: T.DWORD
}));
T.ACL_SIZE_INFORMATION = Struct('_ACL_SIZE_INFORMATION', {
    AceCount: T.DWORD,
    AclBytesInUse: T.DWORD,
    AclBytesFree: T.DWORD
});
T.PACL_SIZE_INFORMATION = Pointer(Struct('_ACL_SIZE_INFORMATION', {
    AceCount: T.DWORD,
    AclBytesInUse: T.DWORD,
    AclBytesFree: T.DWORD
}));
T.SECURITY_INFORMATION = T.DWORD;
T.PSECURITY_INFORMATION = Pointer(T.DWORD);
T.SECURITY_DESCRIPTOR_CONTROL = T.WORD;
T.PSECURITY_DESCRIPTOR_CONTROL = Pointer(T.WORD);
T.SECURITY_DESCRIPTOR_RELATIVE = Struct('', {
    Revision: T.BYTE,
    Sbz1: T.BYTE,
    Control: T.SECURITY_DESCRIPTOR_CONTROL,
    Owner: T.DWORD,
    Group: T.DWORD,
    Sacl: T.DWORD,
    Dacl: T.DWORD
});
T.PISECURITY_DESCRIPTOR_RELATIVE = Pointer(Struct('', {
    Revision: T.BYTE,
    Sbz1: T.BYTE,
    Control: T.SECURITY_DESCRIPTOR_CONTROL,
    Owner: T.DWORD,
    Group: T.DWORD,
    Sacl: T.DWORD,
    Dacl: T.DWORD
}));
T.SECURITY_DESCRIPTOR = Struct('', {
    Revision: T.BYTE,
    Sbz1: T.BYTE,
    Control: T.SECURITY_DESCRIPTOR_CONTROL,
    Owner: T.PSID,
    Group: T.PSID,
    Sacl: T.PACL,
    Dacl: T.PACL
});
T.PISECURITY_DESCRIPTOR = Pointer(Struct('', {
    Revision: T.BYTE,
    Sbz1: T.BYTE,
    Control: T.SECURITY_DESCRIPTOR_CONTROL,
    Owner: T.PSID,
    Group: T.PSID,
    Sacl: T.PACL,
    Dacl: T.PACL
}));
T.SID_AND_ATTRIBUTES = Struct('_SID_AND_ATTRIBUTES', {
    Sid: T.PSID,
    Attributes: T.DWORD
});
T.PSID_AND_ATTRIBUTES = Pointer(Struct('_SID_AND_ATTRIBUTES', {
    Sid: T.PSID,
    Attributes: T.DWORD
}));
T.WELL_KNOWN_SID_TYPE = Enum('WinThisOrganizationCertificateSid', {
    WinNullSid: 0,
    WinWorldSid: 1,
    WinLocalSid: 2,
    WinCreatorOwnerSid: 3,
    WinCreatorGroupSid: 4,
    WinCreatorOwnerServerSid: 5,
    WinCreatorGroupServerSid: 6,
    WinNtAuthoritySid: 7,
    WinDialupSid: 8,
    WinNetworkSid: 9,
    WinBatchSid: 10,
    WinInteractiveSid: 11,
    WinServiceSid: 12,
    WinAnonymousSid: 13,
    WinProxySid: 14,
    WinEnterpriseControllersSid: 15,
    WinSelfSid: 16,
    WinAuthenticatedUserSid: 17,
    WinRestrictedCodeSid: 18,
    WinTerminalServerSid: 19,
    WinRemoteLogonIdSid: 20,
    WinLogonIdsSid: 21,
    WinLocalSystemSid: 22,
    WinLocalServiceSid: 23,
    WinNetworkServiceSid: 24,
    WinBuiltinDomainSid: 25,
    WinBuiltinAdministratorsSid: 26,
    WinBuiltinUsersSid: 27,
    WinBuiltinGuestsSid: 28,
    WinBuiltinPowerUsersSid: 29,
    WinBuiltinAccountOperatorsSid: 30,
    WinBuiltinSystemOperatorsSid: 31,
    WinBuiltinPrintOperatorsSid: 32,
    WinBuiltinBackupOperatorsSid: 33,
    WinBuiltinReplicatorSid: 34,
    WinBuiltinPreWindows2000CompatibleAccessSid: 35,
    WinBuiltinRemoteDesktopUsersSid: 36,
    WinBuiltinNetworkConfigurationOperatorsSid: 37,
    WinAccountAdministratorSid: 38,
    WinAccountGuestSid: 39,
    WinAccountKrbtgtSid: 40,
    WinAccountDomainAdminsSid: 41,
    WinAccountDomainUsersSid: 42,
    WinAccountDomainGuestsSid: 43,
    WinAccountComputersSid: 44,
    WinAccountControllersSid: 45,
    WinAccountCertAdminsSid: 46,
    WinAccountSchemaAdminsSid: 47,
    WinAccountEnterpriseAdminsSid: 48,
    WinAccountPolicyAdminsSid: 49,
    WinAccountRasAndIasServersSid: 50,
    WinNTLMAuthenticationSid: 51,
    WinDigestAuthenticationSid: 52,
    WinSChannelAuthenticationSid: 53,
    WinThisOrganizationSid: 54,
    WinOtherOrganizationSid: 55,
    WinBuiltinIncomingForestTrustBuildersSid: 56,
    WinBuiltinPerfMonitoringUsersSid: 57,
    WinBuiltinPerfLoggingUsersSid: 58,
    WinBuiltinAuthorizationAccessSid: 59,
    WinBuiltinTerminalServerLicenseServersSid: 60,
    WinBuiltinDCOMUsersSid: 61,
    WinBuiltinIUsersSid: 62,
    WinIUserSid: 63,
    WinBuiltinCryptoOperatorsSid: 64,
    WinUntrustedLabelSid: 65,
    WinLowLabelSid: 66,
    WinMediumLabelSid: 67,
    WinHighLabelSid: 68,
    WinSystemLabelSid: 69,
    WinWriteRestrictedCodeSid: 70,
    WinCreatorOwnerRightsSid: 71,
    WinCacheablePrincipalsGroupSid: 72,
    WinNonCacheablePrincipalsGroupSid: 73,
    WinEnterpriseReadonlyControllersSid: 74,
    WinAccountReadonlyControllersSid: 75,
    WinBuiltinEventLogReadersGroup: 76,
    WinNewEnterpriseReadonlyControllersSid: 77,
    WinBuiltinCertSvcDComAccessGroup: 78,
    WinMediumPlusLabelSid: 79,
    WinLocalLogonSid: 80,
    WinConsoleLogonSid: 81,
    WinThisOrganizationCertificateSid: 82
});
T.TOKEN_USER = Struct('_TOKEN_USER', {
    User: T.SID_AND_ATTRIBUTES
});
T.PTOKEN_USER = Pointer(Struct('_TOKEN_USER', {
    User: T.SID_AND_ATTRIBUTES
}));
T.TOKEN_GROUPS = Struct('_TOKEN_GROUPS', {
    GroupCount: T.DWORD,
    Groups: ArrayType(T.SID_AND_ATTRIBUTES, 1)
});
T.PTOKEN_GROUPS = Pointer(Struct('_TOKEN_GROUPS', {
    GroupCount: T.DWORD,
    Groups: ArrayType(T.SID_AND_ATTRIBUTES, 1)
}));
T.LARGE_INTEGER = Union('_LARGE_INTEGER', {
    u: Struct('', {
        LowPart: T.DWORD,
        HighPart: T.LONG
    }),
    __unnamed0: Struct('', {
        LowPart: T.DWORD,
        HighPart: T.LONG
    }),
    QuadPart: T.LONGLONG
});
T.PLARGE_INTEGER = Pointer(Union('_LARGE_INTEGER', {
    u: Struct('', {
        LowPart: T.DWORD,
        HighPart: T.LONG
    }),
    __unnamed0: Struct('', {
        LowPart: T.DWORD,
        HighPart: T.LONG
    }),
    QuadPart: T.LONGLONG
}));
T.ULARGE_INTEGER = Union('_ULARGE_INTEGER', {
    u: Struct('', {
        LowPart: T.DWORD,
        HighPart: T.DWORD
    }),
    __unnamed0: Struct('', {
        LowPart: T.DWORD,
        HighPart: T.DWORD
    }),
    QuadPart: T.ULONGLONG
});
T.PULARGE_INTEGER = Pointer(Union('_ULARGE_INTEGER', {
    u: Struct('', {
        LowPart: T.DWORD,
        HighPart: T.DWORD
    }),
    __unnamed0: Struct('', {
        LowPart: T.DWORD,
        HighPart: T.DWORD
    }),
    QuadPart: T.ULONGLONG
}));
T.LUID = Struct('_LUID', {
    LowPart: T.DWORD,
    HighPart: T.LONG
});
T.PLUID = Pointer(Struct('_LUID', {
    LowPart: T.DWORD,
    HighPart: T.LONG
}));
T.LUID_AND_ATTRIBUTES = Struct('_LUID_AND_ATTRIBUTES', {
    Luid: T.LUID,
    Attributes: T.DWORD
});
T.PLUID_AND_ATTRIBUTES = Pointer(Struct('_LUID_AND_ATTRIBUTES', {
    Luid: T.LUID,
    Attributes: T.DWORD
}));
T.PRIVILEGE_SET = Struct('_PRIVILEGE_SET', {
    PrivilegeCount: T.DWORD,
    Control: T.DWORD,
    Privilege: ArrayType(T.LUID_AND_ATTRIBUTES, 1)
});
T.PPRIVILEGE_SET = Pointer(Struct('_PRIVILEGE_SET', {
    PrivilegeCount: T.DWORD,
    Control: T.DWORD,
    Privilege: ArrayType(T.LUID_AND_ATTRIBUTES, 1)
}));
T.TOKEN_PRIVILEGES = Struct('_TOKEN_PRIVILEGES', {
    PrivilegeCount: T.DWORD,
    Privileges: ArrayType(T.LUID_AND_ATTRIBUTES, 1)
});
T.PTOKEN_PRIVILEGES = Pointer(Struct('_TOKEN_PRIVILEGES', {
    PrivilegeCount: T.DWORD,
    Privileges: ArrayType(T.LUID_AND_ATTRIBUTES, 1)
}));
T.TOKEN_OWNER = Struct('_TOKEN_OWNER', {
    Owner: T.PSID
});
T.PTOKEN_OWNER = Pointer(Struct('_TOKEN_OWNER', {
    Owner: T.PSID
}));
T.TOKEN_PRIMARY_GROUP = Struct('_TOKEN_PRIMARY_GROUP', {
    PrimaryGroup: T.PSID
});
T.PTOKEN_PRIMARY_GROUP = Pointer(Struct('_TOKEN_PRIMARY_GROUP', {
    PrimaryGroup: T.PSID
}));
T.TOKEN_DEFAULT_DACL = Struct('_TOKEN_DEFAULT_DACL', {
    DefaultDacl: T.PACL
});
T.PTOKEN_DEFAULT_DACL = Pointer(Struct('_TOKEN_DEFAULT_DACL', {
    DefaultDacl: T.PACL
}));
T.TOKEN_SOURCE = Struct('_TOKEN_SOURCE', {
    SourceName: ArrayType(T.char, 8),
    SourceIdentifier: T.LUID
});
T.PTOKEN_SOURCE = Pointer(Struct('_TOKEN_SOURCE', {
    SourceName: ArrayType(T.char, 8),
    SourceIdentifier: T.LUID
}));
T.TOKEN_TYPE = Enum('TokenImpersonation', {
    TokenPrimary: 1,
    TokenImpersonation: 2
});
T.SECURITY_IMPERSONATION_LEVEL = Enum('SecurityDelegation', {
    SecurityAnonymous: 0,
    SecurityIdentification: 1,
    SecurityImpersonation: 2,
    SecurityDelegation: 3
});
T.PSECURITY_IMPERSONATION_LEVEL = Pointer(Enum('SecurityDelegation', {
    SecurityAnonymous: 0,
    SecurityIdentification: 1,
    SecurityImpersonation: 2,
    SecurityDelegation: 3
}));
T.SECURITY_CONTEXT_TRACKING_MODE = T.BOOLEAN;
T.PSECURITY_CONTEXT_TRACKING_MODE = Pointer(T.BOOLEAN);
T.SECURITY_QUALITY_OF_SERVICE = Struct('_SECURITY_QUALITY_OF_SERVICE', {
    Length: T.DWORD,
    ImpersonationLevel: T.SECURITY_IMPERSONATION_LEVEL,
    ContextTrackingMode: T.SECURITY_CONTEXT_TRACKING_MODE,
    EffectiveOnly: T.BOOLEAN
});
T.PSECURITY_QUALITY_OF_SERVICE = Pointer(Struct('_SECURITY_QUALITY_OF_SERVICE', {
    Length: T.DWORD,
    ImpersonationLevel: T.SECURITY_IMPERSONATION_LEVEL,
    ContextTrackingMode: T.SECURITY_CONTEXT_TRACKING_MODE,
    EffectiveOnly: T.BOOLEAN
}));
T.TOKEN_STATISTICS = Struct('_TOKEN_STATISTICS', {
    TokenId: T.LUID,
    AuthenticationId: T.LUID,
    ExpirationTime: T.LARGE_INTEGER,
    TokenType: T.TOKEN_TYPE,
    ImpersonationLevel: T.SECURITY_IMPERSONATION_LEVEL,
    DynamicCharged: T.DWORD,
    DynamicAvailable: T.DWORD,
    GroupCount: T.DWORD,
    PrivilegeCount: T.DWORD,
    ModifiedId: T.LUID
});
T.TOKEN_GROUPS_AND_PRIVILEGES = Struct('_TOKEN_GROUPS_AND_PRIVILEGES', {
    SidCount: T.DWORD,
    SidLength: T.DWORD,
    Sids: T.PSID_AND_ATTRIBUTES,
    RestrictedSidCount: T.DWORD,
    RestrictedSidLength: T.DWORD,
    RestrictedSids: T.PSID_AND_ATTRIBUTES,
    PrivilegeCount: T.DWORD,
    PrivilegeLength: T.DWORD,
    Privileges: T.PLUID_AND_ATTRIBUTES,
    AuthenticationId: T.LUID
});
T.PTOKEN_GROUPS_AND_PRIVILEGES = Pointer(Struct('_TOKEN_GROUPS_AND_PRIVILEGES', {
    SidCount: T.DWORD,
    SidLength: T.DWORD,
    Sids: T.PSID_AND_ATTRIBUTES,
    RestrictedSidCount: T.DWORD,
    RestrictedSidLength: T.DWORD,
    RestrictedSids: T.PSID_AND_ATTRIBUTES,
    PrivilegeCount: T.DWORD,
    PrivilegeLength: T.DWORD,
    Privileges: T.PLUID_AND_ATTRIBUTES,
    AuthenticationId: T.LUID
}));
T.TOKEN_ORIGIN = Struct('_TOKEN_ORIGIN', {
    OriginatingLogonSession: T.LUID
});
T.PTOKEN_ORIGIN = Pointer(Struct('_TOKEN_ORIGIN', {
    OriginatingLogonSession: T.LUID
}));
T.TOKEN_LINKED_TOKEN = Struct('_TOKEN_LINKED_TOKEN', {
    LinkedToken: T.HANDLE
});
T.PTOKEN_LINKED_TOKEN = Pointer(Struct('_TOKEN_LINKED_TOKEN', {
    LinkedToken: T.HANDLE
}));
T.TOKEN_ELEVATION = Struct('_TOKEN_ELEVATION', {
    TokenIsElevated: T.DWORD
});
T.PTOKEN_ELEVATION = Pointer(Struct('_TOKEN_ELEVATION', {
    TokenIsElevated: T.DWORD
}));
T.ACE_HEADER = Struct('_ACE_HEADER', {
    AceType: T.BYTE,
    AceFlags: T.BYTE,
    AceSize: T.WORD
});
T.PACE_HEADER = Pointer(Struct('_ACE_HEADER', {
    AceType: T.BYTE,
    AceFlags: T.BYTE,
    AceSize: T.WORD
}));
T.ACCESS_ALLOWED_ACE = Struct('_ACCESS_ALLOWED_ACE', {
    Header: T.ACE_HEADER,
    Mask: T.DWORD,
    SidStart: T.DWORD
});
T.PACCESS_ALLOWED_ACE = Pointer(Struct('_ACCESS_ALLOWED_ACE', {
    Header: T.ACE_HEADER,
    Mask: T.DWORD,
    SidStart: T.DWORD
}));
T.ACCESS_DENIED_ACE = Struct('_ACCESS_DENIED_ACE', {
    Header: T.ACE_HEADER,
    Mask: T.DWORD,
    SidStart: T.DWORD
});
T.PACCESS_DENIED_ACE = Pointer(Struct('_ACCESS_DENIED_ACE', {
    Header: T.ACE_HEADER,
    Mask: T.DWORD,
    SidStart: T.DWORD
}));
T.SYSTEM_AUDIT_ACE = Struct('_SYSTEM_AUDIT_ACE', {
    Header: T.ACE_HEADER,
    Mask: T.DWORD,
    SidStart: T.DWORD
});
T.PSYSTEM_AUDIT_ACE = Pointer(Struct('_SYSTEM_AUDIT_ACE', {
    Header: T.ACE_HEADER,
    Mask: T.DWORD,
    SidStart: T.DWORD
}));
T.SYSTEM_ALARM_ACE = Struct('_SYSTEM_ALARM_ACE', {
    Header: T.ACE_HEADER,
    Mask: T.DWORD,
    SidStart: T.DWORD
});
T.PSYSTEM_ALARM_ACE = Pointer(Struct('_SYSTEM_ALARM_ACE', {
    Header: T.ACE_HEADER,
    Mask: T.DWORD,
    SidStart: T.DWORD
}));
T.SID_NAME_USE = Enum('SidTypeUnknown', {
    SidTypeUser: 1,
    SidTypeGroup: 2,
    SidTypeDomain: 3,
    SidTypeAlias: 4,
    SidTypeWellKnownGroup: 5,
    SidTypeDeletedAccount: 6,
    SidTypeInvalid: 7,
    SidTypeUnknown: 8
});
T.PSID_NAME_USE = Pointer(Enum('SidTypeUnknown', {
    SidTypeUser: 1,
    SidTypeGroup: 2,
    SidTypeDomain: 3,
    SidTypeAlias: 4,
    SidTypeWellKnownGroup: 5,
    SidTypeDeletedAccount: 6,
    SidTypeInvalid: 7,
    SidTypeUnknown: 8
}));
T.QUOTA_LIMITS = Struct('_QUOTA_LIMITS', {
    PagedPoolLimit: T.SIZE_T,
    NonPagedPoolLimit: T.SIZE_T,
    MinimumWorkingSetSize: T.SIZE_T,
    MaximumWorkingSetSize: T.SIZE_T,
    PagefileLimit: T.SIZE_T,
    TimeLimit: T.LARGE_INTEGER
});
T.PQUOTA_LIMITS = Pointer(Struct('_QUOTA_LIMITS', {
    PagedPoolLimit: T.SIZE_T,
    NonPagedPoolLimit: T.SIZE_T,
    MinimumWorkingSetSize: T.SIZE_T,
    MaximumWorkingSetSize: T.SIZE_T,
    PagefileLimit: T.SIZE_T,
    TimeLimit: T.LARGE_INTEGER
}));
T.QUOTA_LIMITS_EX = Struct('_QUOTA_LIMITS_EX', {
    PagedPoolLimit: T.SIZE_T,
    NonPagedPoolLimit: T.SIZE_T,
    MinimumWorkingSetSize: T.SIZE_T,
    MaximumWorkingSetSize: T.SIZE_T,
    PagefileLimit: T.SIZE_T,
    TimeLimit: T.LARGE_INTEGER,
    Reserved1: T.SIZE_T,
    Reserved2: T.SIZE_T,
    Reserved3: T.SIZE_T,
    Reserved4: T.SIZE_T,
    Flags: T.DWORD,
    Reserved5: T.DWORD
});
T.PQUOTA_LIMITS_EX = Pointer(Struct('_QUOTA_LIMITS_EX', {
    PagedPoolLimit: T.SIZE_T,
    NonPagedPoolLimit: T.SIZE_T,
    MinimumWorkingSetSize: T.SIZE_T,
    MaximumWorkingSetSize: T.SIZE_T,
    PagefileLimit: T.SIZE_T,
    TimeLimit: T.LARGE_INTEGER,
    Reserved1: T.SIZE_T,
    Reserved2: T.SIZE_T,
    Reserved3: T.SIZE_T,
    Reserved4: T.SIZE_T,
    Flags: T.DWORD,
    Reserved5: T.DWORD
}));
T.LATENCY_TIME = Enum('LT_LOWEST_LATENCY', {
    LT_DONT_CARE: 0,
    LT_LOWEST_LATENCY: 1
});
T.PLATENCY_TIME = Pointer(Enum('LT_LOWEST_LATENCY', {
    LT_DONT_CARE: 0,
    LT_LOWEST_LATENCY: 1
}));
T.POWER_ACTION = Enum('PowerActionWarmEject', {
    PowerActionNone: 0,
    PowerActionReserved: 1,
    PowerActionSleep: 2,
    PowerActionHibernate: 3,
    PowerActionShutdown: 4,
    PowerActionShutdownReset: 5,
    PowerActionShutdownOff: 6,
    PowerActionWarmEject: 7
});
T.PPOWER_ACTION = Pointer(Enum('PowerActionWarmEject', {
    PowerActionNone: 0,
    PowerActionReserved: 1,
    PowerActionSleep: 2,
    PowerActionHibernate: 3,
    PowerActionShutdown: 4,
    PowerActionShutdownReset: 5,
    PowerActionShutdownOff: 6,
    PowerActionWarmEject: 7
}));
T.SYSTEM_POWER_STATE = Enum('PowerSystemMaximum', {
    PowerSystemUnspecified: 0,
    PowerSystemWorking: 1,
    PowerSystemSleeping1: 2,
    PowerSystemSleeping2: 3,
    PowerSystemSleeping3: 4,
    PowerSystemHibernate: 5,
    PowerSystemShutdown: 6,
    PowerSystemMaximum: 7
});
T.PSYSTEM_POWER_STATE = Pointer(Enum('PowerSystemMaximum', {
    PowerSystemUnspecified: 0,
    PowerSystemWorking: 1,
    PowerSystemSleeping1: 2,
    PowerSystemSleeping2: 3,
    PowerSystemSleeping3: 4,
    PowerSystemHibernate: 5,
    PowerSystemShutdown: 6,
    PowerSystemMaximum: 7
}));
T.DEVICE_POWER_STATE = Enum('PowerDeviceMaximum', {
    PowerDeviceUnspecified: 0,
    PowerDeviceD0: 1,
    PowerDeviceD1: 2,
    PowerDeviceD2: 3,
    PowerDeviceD3: 4,
    PowerDeviceMaximum: 5
});
T.PDEVICE_POWER_STATE = Pointer(Enum('PowerDeviceMaximum', {
    PowerDeviceUnspecified: 0,
    PowerDeviceD0: 1,
    PowerDeviceD1: 2,
    PowerDeviceD2: 3,
    PowerDeviceD3: 4,
    PowerDeviceMaximum: 5
}));
T.POWER_INFORMATION_LEVEL = Enum('ProcessorPowerPolicyCurrent', {
    SystemPowerPolicyAc: 0,
    SystemPowerPolicyDc: 1,
    VerifySystemPolicyAc: 2,
    VerifySystemPolicyDc: 3,
    SystemPowerCapabilities: 4,
    SystemBatteryState: 5,
    SystemPowerStateHandler: 6,
    ProcessorStateHandler: 7,
    SystemPowerPolicyCurrent: 8,
    AdministratorPowerPolicy: 9,
    SystemReserveHiberFile: 10,
    ProcessorInformation: 11,
    SystemPowerInformation: 12,
    ProcessorStateHandler2: 13,
    LastWakeTime: 14,
    LastSleepTime: 15,
    SystemExecutionState: 16,
    SystemPowerStateNotifyHandler: 17,
    ProcessorPowerPolicyAc: 18,
    ProcessorPowerPolicyDc: 19,
    VerifyProcessorPowerPolicyAc: 20,
    VerifyProcessorPowerPolicyDc: 21,
    ProcessorPowerPolicyCurrent: 22
});
T.ADMINISTRATOR_POWER_POLICY = Struct('_ADMINISTRATOR_POWER_POLICY', {
    MinSleep: T.SYSTEM_POWER_STATE,
    MaxSleep: T.SYSTEM_POWER_STATE,
    MinVideoTimeout: T.ULONG,
    MaxVideoTimeout: T.ULONG,
    MinSpindownTimeout: T.ULONG,
    MaxSpindownTimeout: T.ULONG
});
T.PADMINISTRATOR_POWER_POLICY = Pointer(Struct('_ADMINISTRATOR_POWER_POLICY', {
    MinSleep: T.SYSTEM_POWER_STATE,
    MaxSleep: T.SYSTEM_POWER_STATE,
    MinVideoTimeout: T.ULONG,
    MaxVideoTimeout: T.ULONG,
    MinSpindownTimeout: T.ULONG,
    MaxSpindownTimeout: T.ULONG
}));
T.BATTERY_REPORTING_SCALE = Struct('', {
    Granularity: T.ULONG,
    Capacity: T.ULONG
});
T.PBATTERY_REPORTING_SCALE = Pointer(Struct('', {
    Granularity: T.ULONG,
    Capacity: T.ULONG
}));
T.POWER_ACTION_POLICY = Struct('', {
    Action: T.POWER_ACTION,
    Flags: T.ULONG,
    EventCode: T.ULONG
});
T.PPOWER_ACTION_POLICY = Pointer(Struct('', {
    Action: T.POWER_ACTION,
    Flags: T.ULONG,
    EventCode: T.ULONG
}));
T.PROCESSOR_POWER_INFORMATION = Struct('_PROCESSOR_POWER_INFORMATION', {
    Number: T.ULONG,
    MaxMhz: T.ULONG,
    CurrentMhz: T.ULONG,
    MhzLimit: T.ULONG,
    MaxIdleState: T.ULONG,
    CurrentIdleState: T.ULONG
});
T.PPROCESSOR_POWER_INFORMATION = Pointer(Struct('_PROCESSOR_POWER_INFORMATION', {
    Number: T.ULONG,
    MaxMhz: T.ULONG,
    CurrentMhz: T.ULONG,
    MhzLimit: T.ULONG,
    MaxIdleState: T.ULONG,
    CurrentIdleState: T.ULONG
}));
T.PROCESSOR_POWER_POLICY_INFO = Struct('_PROCESSOR_POWER_POLICY_INFO', {
    TimeCheck: T.ULONG,
    DemoteLimit: T.ULONG,
    PromoteLimit: T.ULONG,
    DemotePercent: T.UCHAR,
    PromotePercent: T.UCHAR,
    Spare: ArrayType(T.UCHAR, 2),
    AllowDemotion: [T.ULONG, 1],
    AllowPromotion: [T.ULONG, 1],
    Reserved: [T.ULONG, 30]
});
T.PPROCESSOR_POWER_POLICY_INFO = Pointer(Struct('_PROCESSOR_POWER_POLICY_INFO', {
    TimeCheck: T.ULONG,
    DemoteLimit: T.ULONG,
    PromoteLimit: T.ULONG,
    DemotePercent: T.UCHAR,
    PromotePercent: T.UCHAR,
    Spare: ArrayType(T.UCHAR, 2),
    AllowDemotion: [T.ULONG, 1],
    AllowPromotion: [T.ULONG, 1],
    Reserved: [T.ULONG, 30]
}));
T.PROCESSOR_POWER_POLICY = Struct('_PROCESSOR_POWER_POLICY', {
    Revision: T.DWORD,
    DynamicThrottle: T.BYTE,
    Spare: ArrayType(T.BYTE, 3),
    DisableCStates: [T.DWORD, 1],
    Reserved: [T.DWORD, 31],
    PolicyCount: T.DWORD,
    Policy: ArrayType(T.PROCESSOR_POWER_POLICY_INFO, 3)
});
T.PPROCESSOR_POWER_POLICY = Pointer(Struct('_PROCESSOR_POWER_POLICY', {
    Revision: T.DWORD,
    DynamicThrottle: T.BYTE,
    Spare: ArrayType(T.BYTE, 3),
    DisableCStates: [T.DWORD, 1],
    Reserved: [T.DWORD, 31],
    PolicyCount: T.DWORD,
    Policy: ArrayType(T.PROCESSOR_POWER_POLICY_INFO, 3)
}));
T.SYSTEM_BATTERY_STATE = Struct('', {
    AcOnLine: T.BOOLEAN,
    BatteryPresent: T.BOOLEAN,
    Charging: T.BOOLEAN,
    Discharging: T.BOOLEAN,
    Spare1: ArrayType(T.BOOLEAN, 4),
    MaxCapacity: T.ULONG,
    RemainingCapacity: T.ULONG,
    Rate: T.ULONG,
    EstimatedTime: T.ULONG,
    DefaultAlert1: T.ULONG,
    DefaultAlert2: T.ULONG
});
T.PSYSTEM_BATTERY_STATE = Pointer(Struct('', {
    AcOnLine: T.BOOLEAN,
    BatteryPresent: T.BOOLEAN,
    Charging: T.BOOLEAN,
    Discharging: T.BOOLEAN,
    Spare1: ArrayType(T.BOOLEAN, 4),
    MaxCapacity: T.ULONG,
    RemainingCapacity: T.ULONG,
    Rate: T.ULONG,
    EstimatedTime: T.ULONG,
    DefaultAlert1: T.ULONG,
    DefaultAlert2: T.ULONG
}));
T.SYSTEM_POWER_CAPABILITIES = Struct('', {
    PowerButtonPresent: T.BOOLEAN,
    SleepButtonPresent: T.BOOLEAN,
    LidPresent: T.BOOLEAN,
    SystemS1: T.BOOLEAN,
    SystemS2: T.BOOLEAN,
    SystemS3: T.BOOLEAN,
    SystemS4: T.BOOLEAN,
    SystemS5: T.BOOLEAN,
    HiberFilePresent: T.BOOLEAN,
    FullWake: T.BOOLEAN,
    VideoDimPresent: T.BOOLEAN,
    ApmPresent: T.BOOLEAN,
    UpsPresent: T.BOOLEAN,
    ThermalControl: T.BOOLEAN,
    ProcessorThrottle: T.BOOLEAN,
    ProcessorMinThrottle: T.UCHAR,
    ProcessorMaxThrottle: T.UCHAR,
    spare2: ArrayType(T.UCHAR, 4),
    DiskSpinDown: T.BOOLEAN,
    spare3: ArrayType(T.UCHAR, 8),
    SystemBatteriesPresent: T.BOOLEAN,
    BatteriesAreShortTerm: T.BOOLEAN,
    BatteryScale: ArrayType(T.BATTERY_REPORTING_SCALE, 3),
    AcOnLineWake: T.SYSTEM_POWER_STATE,
    SoftLidWake: T.SYSTEM_POWER_STATE,
    RtcWake: T.SYSTEM_POWER_STATE,
    MinDeviceWakeState: T.SYSTEM_POWER_STATE,
    DefaultLowLatencyWake: T.SYSTEM_POWER_STATE
});
T.PSYSTEM_POWER_CAPABILITIES = Pointer(Struct('', {
    PowerButtonPresent: T.BOOLEAN,
    SleepButtonPresent: T.BOOLEAN,
    LidPresent: T.BOOLEAN,
    SystemS1: T.BOOLEAN,
    SystemS2: T.BOOLEAN,
    SystemS3: T.BOOLEAN,
    SystemS4: T.BOOLEAN,
    SystemS5: T.BOOLEAN,
    HiberFilePresent: T.BOOLEAN,
    FullWake: T.BOOLEAN,
    VideoDimPresent: T.BOOLEAN,
    ApmPresent: T.BOOLEAN,
    UpsPresent: T.BOOLEAN,
    ThermalControl: T.BOOLEAN,
    ProcessorThrottle: T.BOOLEAN,
    ProcessorMinThrottle: T.UCHAR,
    ProcessorMaxThrottle: T.UCHAR,
    spare2: ArrayType(T.UCHAR, 4),
    DiskSpinDown: T.BOOLEAN,
    spare3: ArrayType(T.UCHAR, 8),
    SystemBatteriesPresent: T.BOOLEAN,
    BatteriesAreShortTerm: T.BOOLEAN,
    BatteryScale: ArrayType(T.BATTERY_REPORTING_SCALE, 3),
    AcOnLineWake: T.SYSTEM_POWER_STATE,
    SoftLidWake: T.SYSTEM_POWER_STATE,
    RtcWake: T.SYSTEM_POWER_STATE,
    MinDeviceWakeState: T.SYSTEM_POWER_STATE,
    DefaultLowLatencyWake: T.SYSTEM_POWER_STATE
}));
T.SYSTEM_POWER_INFORMATION = Struct('_SYSTEM_POWER_INFORMATION', {
    MaxIdlenessAllowed: T.ULONG,
    Idleness: T.ULONG,
    TimeRemaining: T.ULONG,
    CoolingMode: T.UCHAR
});
T.PSYSTEM_POWER_INFORMATION = Pointer(Struct('_SYSTEM_POWER_INFORMATION', {
    MaxIdlenessAllowed: T.ULONG,
    Idleness: T.ULONG,
    TimeRemaining: T.ULONG,
    CoolingMode: T.UCHAR
}));
T.SYSTEM_POWER_LEVEL = Struct('_SYSTEM_POWER_LEVEL', {
    Enable: T.BOOLEAN,
    Spare: ArrayType(T.UCHAR, 3),
    BatteryLevel: T.ULONG,
    PowerPolicy: T.POWER_ACTION_POLICY,
    MinSystemState: T.SYSTEM_POWER_STATE
});
T.PSYSTEM_POWER_LEVEL = Pointer(Struct('_SYSTEM_POWER_LEVEL', {
    Enable: T.BOOLEAN,
    Spare: ArrayType(T.UCHAR, 3),
    BatteryLevel: T.ULONG,
    PowerPolicy: T.POWER_ACTION_POLICY,
    MinSystemState: T.SYSTEM_POWER_STATE
}));
T.SYSTEM_POWER_POLICY = Struct('_SYSTEM_POWER_POLICY', {
    Revision: T.ULONG,
    PowerButton: T.POWER_ACTION_POLICY,
    SleepButton: T.POWER_ACTION_POLICY,
    LidClose: T.POWER_ACTION_POLICY,
    LidOpenWake: T.SYSTEM_POWER_STATE,
    Reserved: T.ULONG,
    Idle: T.POWER_ACTION_POLICY,
    IdleTimeout: T.ULONG,
    IdleSensitivity: T.UCHAR,
    DynamicThrottle: T.UCHAR,
    Spare2: ArrayType(T.UCHAR, 2),
    MinSleep: T.SYSTEM_POWER_STATE,
    MaxSleep: T.SYSTEM_POWER_STATE,
    ReducedLatencySleep: T.SYSTEM_POWER_STATE,
    WinLogonFlags: T.ULONG,
    Spare3: T.ULONG,
    DozeS4Timeout: T.ULONG,
    BroadcastCapacityResolution: T.ULONG,
    DischargePolicy: ArrayType(T.SYSTEM_POWER_LEVEL, 4),
    VideoTimeout: T.ULONG,
    VideoDimDisplay: T.BOOLEAN,
    VideoReserved: ArrayType(T.ULONG, 3),
    SpindownTimeout: T.ULONG,
    OptimizeForPower: T.BOOLEAN,
    FanThrottleTolerance: T.UCHAR,
    ForcedThrottle: T.UCHAR,
    MinThrottle: T.UCHAR,
    OverThrottled: T.POWER_ACTION_POLICY
});
T.PSYSTEM_POWER_POLICY = Pointer(Struct('_SYSTEM_POWER_POLICY', {
    Revision: T.ULONG,
    PowerButton: T.POWER_ACTION_POLICY,
    SleepButton: T.POWER_ACTION_POLICY,
    LidClose: T.POWER_ACTION_POLICY,
    LidOpenWake: T.SYSTEM_POWER_STATE,
    Reserved: T.ULONG,
    Idle: T.POWER_ACTION_POLICY,
    IdleTimeout: T.ULONG,
    IdleSensitivity: T.UCHAR,
    DynamicThrottle: T.UCHAR,
    Spare2: ArrayType(T.UCHAR, 2),
    MinSleep: T.SYSTEM_POWER_STATE,
    MaxSleep: T.SYSTEM_POWER_STATE,
    ReducedLatencySleep: T.SYSTEM_POWER_STATE,
    WinLogonFlags: T.ULONG,
    Spare3: T.ULONG,
    DozeS4Timeout: T.ULONG,
    BroadcastCapacityResolution: T.ULONG,
    DischargePolicy: ArrayType(T.SYSTEM_POWER_LEVEL, 4),
    VideoTimeout: T.ULONG,
    VideoDimDisplay: T.BOOLEAN,
    VideoReserved: ArrayType(T.ULONG, 3),
    SpindownTimeout: T.ULONG,
    OptimizeForPower: T.BOOLEAN,
    FanThrottleTolerance: T.UCHAR,
    ForcedThrottle: T.UCHAR,
    MinThrottle: T.UCHAR,
    OverThrottled: T.POWER_ACTION_POLICY
}));
T.FILE_SEGMENT_ELEMENT = Union('_FILE_SEGMENT_ELEMENT', {
    Buffer: T.PVOID64,
    Alignment: T.ULONGLONG
});
T.PFILE_SEGMENT_ELEMENT = Pointer(Union('_FILE_SEGMENT_ELEMENT', {
    Buffer: T.PVOID64,
    Alignment: T.ULONGLONG
}));
T.FILE_NOTIFY_INFORMATION = Struct('_FILE_NOTIFY_INFORMATION', {
    NextEntryOffset: T.DWORD,
    Action: T.DWORD,
    FileNameLength: T.DWORD,
    FileName: ArrayType(T.WCHAR, 1)
});
T.PFILE_NOTIFY_INFORMATION = Pointer(Struct('_FILE_NOTIFY_INFORMATION', {
    NextEntryOffset: T.DWORD,
    Action: T.DWORD,
    FileNameLength: T.DWORD,
    FileName: ArrayType(T.WCHAR, 1)
}));
T.TAPE_CREATE_PARTITION = Struct('_TAPE_CREATE_PARTITION', {
    Method: T.DWORD,
    Count: T.DWORD,
    Size: T.DWORD
});
T.PTAPE_CREATE_PARTITION = Pointer(Struct('_TAPE_CREATE_PARTITION', {
    Method: T.DWORD,
    Count: T.DWORD,
    Size: T.DWORD
}));
T.TAPE_ERASE = Struct('_TAPE_ERASE', {
    Type: T.DWORD,
    Immediate: T.BOOLEAN
});
T.PTAPE_ERASE = Pointer(Struct('_TAPE_ERASE', {
    Type: T.DWORD,
    Immediate: T.BOOLEAN
}));
T.TAPE_PREPARE = Struct('_TAPE_PREPARE', {
    Operation: T.DWORD,
    Immediate: T.BOOLEAN
});
T.PTAPE_PREPARE = Pointer(Struct('_TAPE_PREPARE', {
    Operation: T.DWORD,
    Immediate: T.BOOLEAN
}));
T.TAPE_SET_DRIVE_PARAMETERS = Struct('_TAPE_SET_DRIVE_PARAMETERS', {
    ECC: T.BOOLEAN,
    Compression: T.BOOLEAN,
    DataPadding: T.BOOLEAN,
    ReportSetmarks: T.BOOLEAN,
    EOTWarningZoneSize: T.ULONG
});
T.PTAPE_SET_DRIVE_PARAMETERS = Pointer(Struct('_TAPE_SET_DRIVE_PARAMETERS', {
    ECC: T.BOOLEAN,
    Compression: T.BOOLEAN,
    DataPadding: T.BOOLEAN,
    ReportSetmarks: T.BOOLEAN,
    EOTWarningZoneSize: T.ULONG
}));
T.TAPE_SET_MEDIA_PARAMETERS = Struct('_TAPE_SET_MEDIA_PARAMETERS', {
    BlockSize: T.ULONG
});
T.PTAPE_SET_MEDIA_PARAMETERS = Pointer(Struct('_TAPE_SET_MEDIA_PARAMETERS', {
    BlockSize: T.ULONG
}));
T.TAPE_WRITE_MARKS = Struct('_TAPE_WRITE_MARKS', {
    Type: T.DWORD,
    Count: T.DWORD,
    Immediate: T.BOOLEAN
});
T.PTAPE_WRITE_MARKS = Pointer(Struct('_TAPE_WRITE_MARKS', {
    Type: T.DWORD,
    Count: T.DWORD,
    Immediate: T.BOOLEAN
}));
T.TAPE_GET_POSITION = Struct('_TAPE_GET_POSITION', {
    Type: T.ULONG,
    Partition: T.ULONG,
    OffsetLow: T.ULONG,
    OffsetHigh: T.ULONG
});
T.PTAPE_GET_POSITION = Pointer(Struct('_TAPE_GET_POSITION', {
    Type: T.ULONG,
    Partition: T.ULONG,
    OffsetLow: T.ULONG,
    OffsetHigh: T.ULONG
}));
T.TAPE_SET_POSITION = Struct('_TAPE_SET_POSITION', {
    Method: T.ULONG,
    Partition: T.ULONG,
    Offset: T.LARGE_INTEGER,
    Immediate: T.BOOLEAN
});
T.PTAPE_SET_POSITION = Pointer(Struct('_TAPE_SET_POSITION', {
    Method: T.ULONG,
    Partition: T.ULONG,
    Offset: T.LARGE_INTEGER,
    Immediate: T.BOOLEAN
}));
T.TAPE_GET_DRIVE_PARAMETERS = Struct('_TAPE_GET_DRIVE_PARAMETERS', {
    ECC: T.BOOLEAN,
    Compression: T.BOOLEAN,
    DataPadding: T.BOOLEAN,
    ReportSetmarks: T.BOOLEAN,
    DefaultBlockSize: T.DWORD,
    MaximumBlockSize: T.DWORD,
    MinimumBlockSize: T.DWORD,
    MaximumPartitionCount: T.DWORD,
    FeaturesLow: T.DWORD,
    FeaturesHigh: T.DWORD,
    EOTWarningZoneSize: T.DWORD
});
T.PTAPE_GET_DRIVE_PARAMETERS = Pointer(Struct('_TAPE_GET_DRIVE_PARAMETERS', {
    ECC: T.BOOLEAN,
    Compression: T.BOOLEAN,
    DataPadding: T.BOOLEAN,
    ReportSetmarks: T.BOOLEAN,
    DefaultBlockSize: T.DWORD,
    MaximumBlockSize: T.DWORD,
    MinimumBlockSize: T.DWORD,
    MaximumPartitionCount: T.DWORD,
    FeaturesLow: T.DWORD,
    FeaturesHigh: T.DWORD,
    EOTWarningZoneSize: T.DWORD
}));
T.TAPE_GET_MEDIA_PARAMETERS = Struct('_TAPE_GET_MEDIA_PARAMETERS', {
    Capacity: T.LARGE_INTEGER,
    Remaining: T.LARGE_INTEGER,
    BlockSize: T.DWORD,
    PartitionCount: T.DWORD,
    WriteProtected: T.BOOLEAN
});
T.PTAPE_GET_MEDIA_PARAMETERS = Pointer(Struct('_TAPE_GET_MEDIA_PARAMETERS', {
    Capacity: T.LARGE_INTEGER,
    Remaining: T.LARGE_INTEGER,
    BlockSize: T.DWORD,
    PartitionCount: T.DWORD,
    WriteProtected: T.BOOLEAN
}));
T.EVENTLOGRECORD = Struct('_EVENTLOGRECORD', {
    Length: T.DWORD,
    Reserved: T.DWORD,
    RecordNumber: T.DWORD,
    TimeGenerated: T.DWORD,
    TimeWritten: T.DWORD,
    EventID: T.DWORD,
    EventType: T.WORD,
    NumStrings: T.WORD,
    EventCategory: T.WORD,
    ReservedFlags: T.WORD,
    ClosingRecordNumber: T.DWORD,
    StringOffset: T.DWORD,
    UserSidLength: T.DWORD,
    UserSidOffset: T.DWORD,
    DataLength: T.DWORD,
    DataOffset: T.DWORD
});
T.PEVENTLOGRECORD = Pointer(Struct('_EVENTLOGRECORD', {
    Length: T.DWORD,
    Reserved: T.DWORD,
    RecordNumber: T.DWORD,
    TimeGenerated: T.DWORD,
    TimeWritten: T.DWORD,
    EventID: T.DWORD,
    EventType: T.WORD,
    NumStrings: T.WORD,
    EventCategory: T.WORD,
    ReservedFlags: T.WORD,
    ClosingRecordNumber: T.DWORD,
    StringOffset: T.DWORD,
    UserSidLength: T.DWORD,
    UserSidOffset: T.DWORD,
    DataLength: T.DWORD,
    DataOffset: T.DWORD
}));
T.SERVICE_NODE_TYPE = Enum('RecognizerType', {
    DriverType: 1,
    FileSystemType: 2,
    Win32ServiceOwnProcess: 16,
    Win32ServiceShareProcess: 32,
    AdapterType: 4,
    RecognizerType: 8
});
T.SERVICE_LOAD_TYPE = Enum('DisableLoad', {
    BootLoad: 0,
    SystemLoad: 1,
    AutoLoad: 2,
    DemandLoad: 3,
    DisableLoad: 4
});
T.SERVICE_ERROR_TYPE = Enum('CriticalError', {
    IgnoreError: 0,
    NormalError: 1,
    SevereError: 2,
    CriticalError: 3
});
T.OBJECT_TYPE_LIST = Struct('_OBJECT_TYPE_LIST', {
    Level: T.WORD,
    Sbz: T.WORD,
    ObjectType: Pointer(T.GUID)
});
T.POBJECT_TYPE_LIST = Pointer(Struct('_OBJECT_TYPE_LIST', {
    Level: T.WORD,
    Sbz: T.WORD,
    ObjectType: Pointer(T.GUID)
}));
T.RTL_CRITICAL_SECTION_DEBUG = Struct('_RTL_CRITICAL_SECTION_DEBUG', {
    Type: T.WORD,
    CreatorBackTraceIndex: T.WORD,
    CriticalSection: Pointer(Struct('_RTL_CRITICAL_SECTION', null)),
    ProcessLocksList: T.LIST_ENTRY,
    EntryCount: T.DWORD,
    ContentionCount: T.DWORD,
    Spare: ArrayType(T.DWORD, 2)
});
T.PRTL_CRITICAL_SECTION_DEBUG = Pointer(Struct('_RTL_CRITICAL_SECTION_DEBUG', {
    Type: T.WORD,
    CreatorBackTraceIndex: T.WORD,
    CriticalSection: Pointer(Struct('_RTL_CRITICAL_SECTION', null)),
    ProcessLocksList: T.LIST_ENTRY,
    EntryCount: T.DWORD,
    ContentionCount: T.DWORD,
    Spare: ArrayType(T.DWORD, 2)
}));
T.RTL_RESOURCE_DEBUG = Struct('_RTL_CRITICAL_SECTION_DEBUG', {
    Type: T.WORD,
    CreatorBackTraceIndex: T.WORD,
    CriticalSection: Pointer(Struct('_RTL_CRITICAL_SECTION', null)),
    ProcessLocksList: T.LIST_ENTRY,
    EntryCount: T.DWORD,
    ContentionCount: T.DWORD,
    Spare: ArrayType(T.DWORD, 2)
});
T.PRTL_RESOURCE_DEBUG = Pointer(Struct('_RTL_CRITICAL_SECTION_DEBUG', {
    Type: T.WORD,
    CreatorBackTraceIndex: T.WORD,
    CriticalSection: Pointer(Struct('_RTL_CRITICAL_SECTION', null)),
    ProcessLocksList: T.LIST_ENTRY,
    EntryCount: T.DWORD,
    ContentionCount: T.DWORD,
    Spare: ArrayType(T.DWORD, 2)
}));
T.RTL_CRITICAL_SECTION = Struct('_RTL_CRITICAL_SECTION', {
    DebugInfo: T.PRTL_CRITICAL_SECTION_DEBUG,
    LockCount: T.LONG,
    RecursionCount: T.LONG,
    OwningThread: T.HANDLE,
    LockSemaphore: T.HANDLE,
    SpinCount: T.ULONG_PTR
});
T.PRTL_CRITICAL_SECTION = Pointer(Struct('_RTL_CRITICAL_SECTION', {
    DebugInfo: T.PRTL_CRITICAL_SECTION_DEBUG,
    LockCount: T.LONG,
    RecursionCount: T.LONG,
    OwningThread: T.HANDLE,
    LockSemaphore: T.HANDLE,
    SpinCount: T.ULONG_PTR
}));
T.WAITORTIMERCALLBACKFUNC = Pointer(Fn(null, [[T.PVOID], [T.BOOLEAN]]));
T.PFLS_CALLBACK_FUNCTION = Pointer(Fn(null, [[T.PVOID]]));
T.IO_COUNTERS = Struct('_IO_COUNTERS', {
    ReadOperationCount: T.ULONGLONG,
    WriteOperationCount: T.ULONGLONG,
    OtherOperationCount: T.ULONGLONG,
    ReadTransferCount: T.ULONGLONG,
    WriteTransferCount: T.ULONGLONG,
    OtherTransferCount: T.ULONGLONG
});
T.PIO_COUNTERS = Pointer(Struct('_IO_COUNTERS', {
    ReadOperationCount: T.ULONGLONG,
    WriteOperationCount: T.ULONGLONG,
    OtherOperationCount: T.ULONGLONG,
    ReadTransferCount: T.ULONGLONG,
    WriteTransferCount: T.ULONGLONG,
    OtherTransferCount: T.ULONGLONG
}));
T.OSVERSIONINFOA = Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.CHAR, 128)
});
T.POSVERSIONINFOA = Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.CHAR, 128)
}));
T.LPOSVERSIONINFOA = Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.CHAR, 128)
}));
T.OSVERSIONINFOW = Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128)
});
T.POSVERSIONINFOW = Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128)
}));
T.LPOSVERSIONINFOW = Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128)
}));
T.RTL_OSVERSIONINFOW = Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128)
});
T.PRTL_OSVERSIONINFOW = Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128)
}));
T.OSVERSIONINFO = T.OSVERSIONINFOA;
T.POSVERSIONINFO = T.POSVERSIONINFOA;
T.LPOSVERSIONINFO = T.LPOSVERSIONINFOA;
T.OSVERSIONINFOEXA = Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.CHAR, 128),
    wServicePackMajor: T.WORD,
    wServicePackMinor: T.WORD,
    wSuiteMask: T.WORD,
    wProductType: T.BYTE,
    wReserved: T.BYTE
});
T.POSVERSIONINFOEXA = Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.CHAR, 128),
    wServicePackMajor: T.WORD,
    wServicePackMinor: T.WORD,
    wSuiteMask: T.WORD,
    wProductType: T.BYTE,
    wReserved: T.BYTE
}));
T.LPOSVERSIONINFOEXA = Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.CHAR, 128),
    wServicePackMajor: T.WORD,
    wServicePackMinor: T.WORD,
    wSuiteMask: T.WORD,
    wProductType: T.BYTE,
    wReserved: T.BYTE
}));
T.OSVERSIONINFOEXW = Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128),
    wServicePackMajor: T.WORD,
    wServicePackMinor: T.WORD,
    wSuiteMask: T.WORD,
    wProductType: T.BYTE,
    wReserved: T.BYTE
});
T.POSVERSIONINFOEXW = Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128),
    wServicePackMajor: T.WORD,
    wServicePackMinor: T.WORD,
    wSuiteMask: T.WORD,
    wProductType: T.BYTE,
    wReserved: T.BYTE
}));
T.LPOSVERSIONINFOEXW = Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128),
    wServicePackMajor: T.WORD,
    wServicePackMinor: T.WORD,
    wSuiteMask: T.WORD,
    wProductType: T.BYTE,
    wReserved: T.BYTE
}));
T.RTL_OSVERSIONINFOEXW = Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128),
    wServicePackMajor: T.WORD,
    wServicePackMinor: T.WORD,
    wSuiteMask: T.WORD,
    wProductType: T.BYTE,
    wReserved: T.BYTE
});
T.PRTL_OSVERSIONINFOEXW = Pointer(Struct('', {
    dwOSVersionInfoSize: T.DWORD,
    dwMajorVersion: T.DWORD,
    dwMinorVersion: T.DWORD,
    dwBuildNumber: T.DWORD,
    dwPlatformId: T.DWORD,
    szCSDVersion: ArrayType(T.WCHAR, 128),
    wServicePackMajor: T.WORD,
    wServicePackMinor: T.WORD,
    wSuiteMask: T.WORD,
    wProductType: T.BYTE,
    wReserved: T.BYTE
}));
T.OSVERSIONINFOEX = T.OSVERSIONINFOEXA;
T.POSVERSIONINFOEX = T.POSVERSIONINFOEXA;
T.LPOSVERSIONINFOEX = T.LPOSVERSIONINFOEXA;
T.ACTIVATION_CONTEXT_DETAILED_INFORMATION = Struct('_ACTIVATION_CONTEXT_DETAILED_INFORMATION', {
    dwFlags: T.DWORD,
    ulFormatVersion: T.DWORD,
    ulAssemblyCount: T.DWORD,
    ulRootManifestPathType: T.DWORD,
    ulRootManifestPathChars: T.DWORD,
    ulRootConfigurationPathType: T.DWORD,
    ulRootConfigurationPathChars: T.DWORD,
    ulAppDirPathType: T.DWORD,
    ulAppDirPathChars: T.DWORD,
    lpRootManifestPath: T.PCWSTR,
    lpRootConfigurationPath: T.PCWSTR,
    lpAppDirPath: T.PCWSTR
});
T.PACTIVATION_CONTEXT_DETAILED_INFORMATION = Pointer(Struct('_ACTIVATION_CONTEXT_DETAILED_INFORMATION', {
    dwFlags: T.DWORD,
    ulFormatVersion: T.DWORD,
    ulAssemblyCount: T.DWORD,
    ulRootManifestPathType: T.DWORD,
    ulRootManifestPathChars: T.DWORD,
    ulRootConfigurationPathType: T.DWORD,
    ulRootConfigurationPathChars: T.DWORD,
    ulAppDirPathType: T.DWORD,
    ulAppDirPathChars: T.DWORD,
    lpRootManifestPath: T.PCWSTR,
    lpRootConfigurationPath: T.PCWSTR,
    lpAppDirPath: T.PCWSTR
}));
T.ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = Struct('_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION', {
    ulFlags: T.DWORD,
    ulEncodedAssemblyIdentityLength: T.DWORD,
    ulManifestPathType: T.DWORD,
    ulManifestPathLength: T.DWORD,
    liManifestLastWriteTime: T.LARGE_INTEGER,
    ulPolicyPathType: T.DWORD,
    ulPolicyPathLength: T.DWORD,
    liPolicyLastWriteTime: T.LARGE_INTEGER,
    ulMetadataSatelliteRosterIndex: T.DWORD,
    ulManifestVersionMajor: T.DWORD,
    ulManifestVersionMinor: T.DWORD,
    ulPolicyVersionMajor: T.DWORD,
    ulPolicyVersionMinor: T.DWORD,
    ulAssemblyDirectoryNameLength: T.DWORD,
    lpAssemblyEncodedAssemblyIdentity: T.PCWSTR,
    lpAssemblyManifestPath: T.PCWSTR,
    lpAssemblyPolicyPath: T.PCWSTR,
    lpAssemblyDirectoryName: T.PCWSTR,
    ulFileCount: T.DWORD
});
T.PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = Pointer(Struct('_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION', {
    ulFlags: T.DWORD,
    ulEncodedAssemblyIdentityLength: T.DWORD,
    ulManifestPathType: T.DWORD,
    ulManifestPathLength: T.DWORD,
    liManifestLastWriteTime: T.LARGE_INTEGER,
    ulPolicyPathType: T.DWORD,
    ulPolicyPathLength: T.DWORD,
    liPolicyLastWriteTime: T.LARGE_INTEGER,
    ulMetadataSatelliteRosterIndex: T.DWORD,
    ulManifestVersionMajor: T.DWORD,
    ulManifestVersionMinor: T.DWORD,
    ulPolicyVersionMajor: T.DWORD,
    ulPolicyVersionMinor: T.DWORD,
    ulAssemblyDirectoryNameLength: T.DWORD,
    lpAssemblyEncodedAssemblyIdentity: T.PCWSTR,
    lpAssemblyManifestPath: T.PCWSTR,
    lpAssemblyPolicyPath: T.PCWSTR,
    lpAssemblyDirectoryName: T.PCWSTR,
    ulFileCount: T.DWORD
}));
T.ACTIVATION_CONTEXT_QUERY_INDEX = Struct('_ACTIVATION_CONTEXT_QUERY_INDEX', {
    ulAssemblyIndex: T.DWORD,
    ulFileIndexInAssembly: T.DWORD
});
T.PACTIVATION_CONTEXT_QUERY_INDEX = Pointer(Struct('_ACTIVATION_CONTEXT_QUERY_INDEX', {
    ulAssemblyIndex: T.DWORD,
    ulFileIndexInAssembly: T.DWORD
}));
T.PCACTIVATION_CONTEXT_QUERY_INDEX = Pointer(Struct('_ACTIVATION_CONTEXT_QUERY_INDEX', null));
T.ASSEMBLY_FILE_DETAILED_INFORMATION = Struct('_ASSEMBLY_FILE_DETAILED_INFORMATION', {
    ulFlags: T.DWORD,
    ulFilenameLength: T.DWORD,
    ulPathLength: T.DWORD,
    lpFileName: T.PCWSTR,
    lpFilePath: T.PCWSTR
});
T.PASSEMBLY_FILE_DETAILED_INFORMATION = Pointer(Struct('_ASSEMBLY_FILE_DETAILED_INFORMATION', {
    ulFlags: T.DWORD,
    ulFilenameLength: T.DWORD,
    ulPathLength: T.DWORD,
    lpFileName: T.PCWSTR,
    lpFilePath: T.PCWSTR
}));
T.PCASSEMBLY_FILE_DETAILED_INFORMATION = Pointer(T.ASSEMBLY_FILE_DETAILED_INFORMATION);
T.ACTIVATION_CONTEXT_INFO_CLASS = Enum('FileInformationInAssemblyOfAssemblyInActivationContxt', {
    ActivationContextBasicInformation: 1,
    ActivationContextDetailedInformation: 2,
    AssemblyDetailedInformationInActivationContext: 3,
    FileInformationInAssemblyOfAssemblyInActivationContext: 4,
    MaxActivationContextInfoClass: 5,
    AssemblyDetailedInformationInActivationContxt: 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt: 4
});
T.JOBOBJECTINFOCLASS = Enum('MaxJobObjectInfoClass', {
    JobObjectBasicAccountingInformation: 1,
    JobObjectBasicLimitInformation: 2,
    JobObjectBasicProcessIdList: 3,
    JobObjectBasicUIRestrictions: 4,
    JobObjectSecurityLimitInformation: 5,
    JobObjectEndOfJobTimeInformation: 6,
    JobObjectAssociateCompletionPortInformation: 7,
    JobObjectBasicAndIoAccountingInformation: 8,
    JobObjectExtendedLimitInformation: 9,
    JobObjectJobSetInformation: 10,
    MaxJobObjectInfoClass: 11
});
T.LOGICAL_PROCESSOR_RELATIONSHIP = Enum('RelationAll', {
    RelationProcessorCore: 0,
    RelationNumaNode: 1,
    RelationCache: 2,
    RelationProcessorPackage: 3,
    RelationGroup: 4,
    RelationAll: 65535
});
T.PROCESSOR_CACHE_TYPE = Enum('CacheTrace', {
    CacheUnified: 0,
    CacheInstruction: 1,
    CacheData: 2,
    CacheTrace: 3
});
T.PROCESSOR_GROUP_INFO = Struct('_PROCESSOR_GROUP_INFO', {
    MaximumProcessorCount: T.BYTE,
    ActiveProcessorCount: T.BYTE,
    Reserved: ArrayType(T.BYTE, 38),
    ActiveProcessorMask: T.KAFFINITY
});
T.PPROCESSOR_GROUP_INFO = Pointer(Struct('_PROCESSOR_GROUP_INFO', {
    MaximumProcessorCount: T.BYTE,
    ActiveProcessorCount: T.BYTE,
    Reserved: ArrayType(T.BYTE, 38),
    ActiveProcessorMask: T.KAFFINITY
}));
T.CACHE_DESCRIPTOR = Struct('_CACHE_DESCRIPTOR', {
    Level: T.BYTE,
    Associativity: T.BYTE,
    LineSize: T.WORD,
    Size: T.DWORD,
    Type: T.PROCESSOR_CACHE_TYPE
});
T.PCACHE_DESCRIPTOR = Pointer(Struct('_CACHE_DESCRIPTOR', {
    Level: T.BYTE,
    Associativity: T.BYTE,
    LineSize: T.WORD,
    Size: T.DWORD,
    Type: T.PROCESSOR_CACHE_TYPE
}));
T.GROUP_AFFINITY = Struct('_GROUP_AFFINITY', {
    Mask: T.KAFFINITY,
    Group: T.WORD,
    Reserved: ArrayType(T.WORD, 3)
});
T.PGROUP_AFFINITY = Pointer(Struct('_GROUP_AFFINITY', {
    Mask: T.KAFFINITY,
    Group: T.WORD,
    Reserved: ArrayType(T.WORD, 3)
}));
T.PROCESSOR_RELATIONSHIP = Struct('_PROCESSOR_RELATIONSHIP', {
    Flags: T.BYTE,
    Reserved: ArrayType(T.BYTE, 21),
    GroupCount: T.WORD,
    GroupMask: ArrayType(T.GROUP_AFFINITY, 1)
});
T.PPROCESSOR_RELATIONSHIP = Pointer(Struct('_PROCESSOR_RELATIONSHIP', {
    Flags: T.BYTE,
    Reserved: ArrayType(T.BYTE, 21),
    GroupCount: T.WORD,
    GroupMask: ArrayType(T.GROUP_AFFINITY, 1)
}));
T.NUMA_NODE_RELATIONSHIP = Struct('_NUMA_NODE_RELATIONSHIP', {
    NodeNumber: T.DWORD,
    Reserved: ArrayType(T.BYTE, 20),
    GroupMask: T.GROUP_AFFINITY
});
T.PNUMA_NODE_RELATIONSHIP = Pointer(Struct('_NUMA_NODE_RELATIONSHIP', {
    NodeNumber: T.DWORD,
    Reserved: ArrayType(T.BYTE, 20),
    GroupMask: T.GROUP_AFFINITY
}));
T.CACHE_RELATIONSHIP = Struct('_CACHE_RELATIONSHIP', {
    Level: T.BYTE,
    Associativity: T.BYTE,
    LineSize: T.WORD,
    Type: T.PROCESSOR_CACHE_TYPE,
    Reserved: ArrayType(T.BYTE, 20),
    GroupMask: T.GROUP_AFFINITY
});
T.PCACHE_RELATIONSHIP = Pointer(Struct('_CACHE_RELATIONSHIP', {
    Level: T.BYTE,
    Associativity: T.BYTE,
    LineSize: T.WORD,
    Type: T.PROCESSOR_CACHE_TYPE,
    Reserved: ArrayType(T.BYTE, 20),
    GroupMask: T.GROUP_AFFINITY
}));
T.GROUP_RELATIONSHIP = Struct('_GROUP_RELATIONSHIP', {
    MaximumGroupCount: T.WORD,
    ActiveGroupCount: T.WORD,
    Reserved: ArrayType(T.BYTE, 20),
    GroupInfo: ArrayType(T.PROCESSOR_GROUP_INFO, 1)
});
T.PGROUP_RELATIONSHIP = Pointer(Struct('_GROUP_RELATIONSHIP', {
    MaximumGroupCount: T.WORD,
    ActiveGroupCount: T.WORD,
    Reserved: ArrayType(T.BYTE, 20),
    GroupInfo: ArrayType(T.PROCESSOR_GROUP_INFO, 1)
}));
T.SYSTEM_LOGICAL_PROCESSOR_INFORMATION = Struct('_SYSTEM_LOGICAL_PROCESSOR_INFORMATION', {
    ProcessorMask: T.ULONG_PTR,
    Relationship: T.LOGICAL_PROCESSOR_RELATIONSHIP,
    __unnamed0: Union('', {
        ProcessorCore: Struct('', {
            Flags: T.BYTE
        }),
        NumaNode: Struct('', {
            NodeNumber: T.DWORD
        }),
        Cache: T.CACHE_DESCRIPTOR,
        Reserved: ArrayType(T.ULONGLONG, 2)
    })
});
T.PSYSTEM_LOGICAL_PROCESSOR_INFORMATION = Pointer(Struct('_SYSTEM_LOGICAL_PROCESSOR_INFORMATION', {
    ProcessorMask: T.ULONG_PTR,
    Relationship: T.LOGICAL_PROCESSOR_RELATIONSHIP,
    __unnamed0: Union('', {
        ProcessorCore: Struct('', {
            Flags: T.BYTE
        }),
        NumaNode: Struct('', {
            NodeNumber: T.DWORD
        }),
        Cache: T.CACHE_DESCRIPTOR,
        Reserved: ArrayType(T.ULONGLONG, 2)
    })
}));
T.SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = Struct('_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX', {
    Relationship: T.LOGICAL_PROCESSOR_RELATIONSHIP,
    Size: T.DWORD,
    __unnamed0: Union('', {
        Processor: T.PROCESSOR_RELATIONSHIP,
        NumaNode: T.NUMA_NODE_RELATIONSHIP,
        Cache: T.CACHE_RELATIONSHIP,
        Group: T.GROUP_RELATIONSHIP
    })
});
T.PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = Pointer(Struct('_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX', {
    Relationship: T.LOGICAL_PROCESSOR_RELATIONSHIP,
    Size: T.DWORD,
    __unnamed0: Union('', {
        Processor: T.PROCESSOR_RELATIONSHIP,
        NumaNode: T.NUMA_NODE_RELATIONSHIP,
        Cache: T.CACHE_RELATIONSHIP,
        Group: T.GROUP_RELATIONSHIP
    })
}));
T.WPARAM = T.UINT_PTR;
T.LPARAM = T.LONG_PTR;
T.LRESULT = T.LONG_PTR;
T.ATOM = T.WORD;
T.COLORREF = T.DWORD;
T.LPCOLORREF = Pointer(T.DWORD);
T.HFILE = T.i32;
T.HACCEL = Pointer(Struct('HACCEL__', {
    unused: T.i32
}));
T.HBITMAP = Pointer(Struct('HBITMAP__', {
    unused: T.i32
}));
T.HBRUSH = Pointer(Struct('HBRUSH__', {
    unused: T.i32
}));
T.HCOLORSPACE = Pointer(Struct('HCOLORSPACE__', {
    unused: T.i32
}));
T.HDC = Pointer(Struct('HDC__', {
    unused: T.i32
}));
T.HDESK = Pointer(Struct('HDESK__', {
    unused: T.i32
}));
T.HENHMETAFILE = Pointer(Struct('HENHMETAFILE__', {
    unused: T.i32
}));
T.HFONT = Pointer(Struct('HFONT__', {
    unused: T.i32
}));
T.HGLRC = Pointer(Struct('HGLRC__', {
    unused: T.i32
}));
T.HHOOK = Pointer(Struct('HHOOK__', {
    unused: T.i32
}));
T.HICON = Pointer(Struct('HICON__', {
    unused: T.i32
}));
T.HINSTANCE = Pointer(Struct('HINSTANCE__', {
    unused: T.i32
}));
T.HKEY = Pointer(Struct('HKEY__', {
    unused: T.i32
}));
T.PHKEY = Pointer(T.HKEY);
T.HKL = Pointer(Struct('HKL__', {
    unused: T.i32
}));
T.HMENU = Pointer(Struct('HMENU__', {
    unused: T.i32
}));
T.HMETAFILE = Pointer(Struct('HMETAFILE__', {
    unused: T.i32
}));
T.HMONITOR = Pointer(Struct('HMONITOR__', {
    unused: T.i32
}));
T.HPALETTE = Pointer(Struct('HPALETTE__', {
    unused: T.i32
}));
T.HPEN = Pointer(Struct('HPEN__', {
    unused: T.i32
}));
T.HRGN = Pointer(Struct('HRGN__', {
    unused: T.i32
}));
T.HRSRC = Pointer(Struct('HRSRC__', {
    unused: T.i32
}));
T.HTASK = Pointer(Struct('HTASK__', {
    unused: T.i32
}));
T.HWINEVENTHOOK = Pointer(Struct('HWINEVENTHOOK__', {
    unused: T.i32
}));
T.HWINSTA = Pointer(Struct('HWINSTA__', {
    unused: T.i32
}));
T.HWND = Pointer(Struct('HWND__', {
    unused: T.i32
}));
T.HMODULE = T.HINSTANCE;
T.HGDIOBJ = T.HANDLE;
T.HGLOBAL = T.HANDLE;
T.HLOCAL = T.HANDLE;
T.GLOBALHANDLE = T.HANDLE;
T.LOCALHANDLE = T.HANDLE;
T.HCURSOR = T.HICON;
T.FARPROC = Pointer(Fn(T.INT_PTR, []));
T.NEARPROC = Pointer(Fn(T.INT_PTR, []));
T.PROC = Pointer(Fn(T.INT_PTR, []));
T.SIZE = Struct('tagSIZE', {
    cx: T.LONG,
    cy: T.LONG
});
T.PSIZE = Pointer(Struct('tagSIZE', {
    cx: T.LONG,
    cy: T.LONG
}));
T.LPSIZE = Pointer(Struct('tagSIZE', {
    cx: T.LONG,
    cy: T.LONG
}));
T.SIZEL = T.SIZE;
T.PSIZEL = Pointer(T.SIZE);
T.LPSIZEL = Pointer(T.SIZE);
T.POINT = Struct('tagPOINT', {
    x: T.LONG,
    y: T.LONG
});
T.PPOINT = Pointer(Struct('tagPOINT', {
    x: T.LONG,
    y: T.LONG
}));
T.LPPOINT = Pointer(Struct('tagPOINT', {
    x: T.LONG,
    y: T.LONG
}));
T.POINTL = Struct('_POINTL', {
    x: T.LONG,
    y: T.LONG
});
T.PPOINTL = Pointer(Struct('_POINTL', {
    x: T.LONG,
    y: T.LONG
}));
T.POINTS = Struct('tagPOINTS', {
    x: T.SHORT,
    y: T.SHORT
});
T.PPOINTS = Pointer(Struct('tagPOINTS', {
    x: T.SHORT,
    y: T.SHORT
}));
T.LPPOINTS = Pointer(Struct('tagPOINTS', {
    x: T.SHORT,
    y: T.SHORT
}));
T.FILETIME = Struct('_FILETIME', {
    dwLowDateTime: T.DWORD,
    dwHighDateTime: T.DWORD
});
T.PFILETIME = Pointer(Struct('_FILETIME', {
    dwLowDateTime: T.DWORD,
    dwHighDateTime: T.DWORD
}));
T.LPFILETIME = Pointer(Struct('_FILETIME', {
    dwLowDateTime: T.DWORD,
    dwHighDateTime: T.DWORD
}));
T.RECT = Struct('tagRECT', {
    left: T.LONG,
    top: T.LONG,
    right: T.LONG,
    bottom: T.LONG
});
T.PRECT = Pointer(Struct('tagRECT', {
    left: T.LONG,
    top: T.LONG,
    right: T.LONG,
    bottom: T.LONG
}));
T.LPRECT = Pointer(Struct('tagRECT', {
    left: T.LONG,
    top: T.LONG,
    right: T.LONG,
    bottom: T.LONG
}));
T.LPCRECT = Pointer(T.RECT);
T.RECTL = Struct('_RECTL', {
    left: T.LONG,
    top: T.LONG,
    right: T.LONG,
    bottom: T.LONG
});
T.PRECTL = Pointer(Struct('_RECTL', {
    left: T.LONG,
    top: T.LONG,
    right: T.LONG,
    bottom: T.LONG
}));
T.LPRECTL = Pointer(Struct('_RECTL', {
    left: T.LONG,
    top: T.LONG,
    right: T.LONG,
    bottom: T.LONG
}));
T.LPCRECTL = Pointer(T.RECTL);
T.LPTHREAD_START_ROUTINE = Pointer(Fn(T.DWORD, [[T.LPVOID]]));
T.PFIBER_START_ROUTINE = Pointer(Fn(null, [[T.LPVOID, 'lpFiberParameter']]));
T.LPFIBER_START_ROUTINE = T.PFIBER_START_ROUTINE;
T.CRITICAL_SECTION = T.RTL_CRITICAL_SECTION;
T.PCRITICAL_SECTION = T.PRTL_CRITICAL_SECTION;
T.LPCRITICAL_SECTION = T.PRTL_CRITICAL_SECTION;
T.CRITICAL_SECTION_DEBUG = T.RTL_CRITICAL_SECTION_DEBUG;
T.PCRITICAL_SECTION_DEBUG = T.PRTL_CRITICAL_SECTION_DEBUG;
T.LPCRITICAL_SECTION_DEBUG = T.PRTL_CRITICAL_SECTION_DEBUG;
T.WAITORTIMERCALLBACK = T.WAITORTIMERCALLBACKFUNC;
T.EXCEPTION_DEBUG_INFO = Struct('_EXCEPTION_DEBUG_INFO', {
    ExceptionRecord: T.EXCEPTION_RECORD,
    dwFirstChance: T.DWORD
});
T.CREATE_THREAD_DEBUG_INFO = Struct('_CREATE_THREAD_DEBUG_INFO', {
    hThread: T.HANDLE,
    lpThreadLocalBase: T.LPVOID,
    lpStartAddress: T.LPTHREAD_START_ROUTINE
});
T.CREATE_PROCESS_DEBUG_INFO = Struct('_CREATE_PROCESS_DEBUG_INFO', {
    hFile: T.HANDLE,
    hProcess: T.HANDLE,
    hThread: T.HANDLE,
    lpBaseOfImage: T.LPVOID,
    dwDebugInfoFileOffset: T.DWORD,
    nDebugInfoSize: T.DWORD,
    lpThreadLocalBase: T.LPVOID,
    lpStartAddress: T.LPTHREAD_START_ROUTINE,
    lpImageName: T.LPVOID,
    fUnicode: T.WORD
});
T.EXIT_THREAD_DEBUG_INFO = Struct('_EXIT_THREAD_DEBUG_INFO', {
    dwExitCode: T.DWORD
});
T.EXIT_PROCESS_DEBUG_INFO = Struct('_EXIT_PROCESS_DEBUG_INFO', {
    dwExitCode: T.DWORD
});
T.LOAD_DLL_DEBUG_INFO = Struct('_LOAD_DLL_DEBUG_INFO', {
    hFile: T.HANDLE,
    lpBaseOfDll: T.LPVOID,
    dwDebugInfoFileOffset: T.DWORD,
    nDebugInfoSize: T.DWORD,
    lpImageName: T.LPVOID,
    fUnicode: T.WORD
});
T.UNLOAD_DLL_DEBUG_INFO = Struct('_UNLOAD_DLL_DEBUG_INFO', {
    lpBaseOfDll: T.LPVOID
});
T.OUTPUT_DEBUG_STRING_INFO = Struct('_OUTPUT_DEBUG_STRING_INFO', {
    lpDebugStringData: T.LPSTR,
    fUnicode: T.WORD,
    nDebugStringLength: T.WORD
});
T.RIP_INFO = Struct('_RIP_INFO', {
    dwError: T.DWORD,
    dwType: T.DWORD
});
T.DEBUG_EVENT = Struct('_DEBUG_EVENT', {
    dwDebugEventCode: T.DWORD,
    dwProcessId: T.DWORD,
    dwThreadId: T.DWORD,
    u: Union('', {
        Exception: T.EXCEPTION_DEBUG_INFO,
        CreateThread: T.CREATE_THREAD_DEBUG_INFO,
        CreateProcessInfo: T.CREATE_PROCESS_DEBUG_INFO,
        ExitThread: T.EXIT_THREAD_DEBUG_INFO,
        ExitProcess: T.EXIT_PROCESS_DEBUG_INFO,
        LoadDll: T.LOAD_DLL_DEBUG_INFO,
        UnloadDll: T.UNLOAD_DLL_DEBUG_INFO,
        DebugString: T.OUTPUT_DEBUG_STRING_INFO,
        RipInfo: T.RIP_INFO
    })
});
T.LPDEBUG_EVENT = Pointer(Struct('_DEBUG_EVENT', {
    dwDebugEventCode: T.DWORD,
    dwProcessId: T.DWORD,
    dwThreadId: T.DWORD,
    u: Union('', {
        Exception: T.EXCEPTION_DEBUG_INFO,
        CreateThread: T.CREATE_THREAD_DEBUG_INFO,
        CreateProcessInfo: T.CREATE_PROCESS_DEBUG_INFO,
        ExitThread: T.EXIT_THREAD_DEBUG_INFO,
        ExitProcess: T.EXIT_PROCESS_DEBUG_INFO,
        LoadDll: T.LOAD_DLL_DEBUG_INFO,
        UnloadDll: T.UNLOAD_DLL_DEBUG_INFO,
        DebugString: T.OUTPUT_DEBUG_STRING_INFO,
        RipInfo: T.RIP_INFO
    })
}));
T.LPCONTEXT = T.PCONTEXT;
T.LPEXCEPTION_RECORD = T.PEXCEPTION_RECORD;
T.LPEXCEPTION_POINTERS = T.PEXCEPTION_POINTERS;
T.PTOP_LEVEL_EXCEPTION_FILTER = Pointer(Fn(T.LONG, [[T.PEXCEPTION_POINTERS]]));
T.LPTOP_LEVEL_EXCEPTION_FILTER = T.PTOP_LEVEL_EXCEPTION_FILTER;
T.OFSTRUCT = Struct('_OFSTRUCT', {
    cBytes: T.BYTE,
    fFixedDisk: T.BYTE,
    nErrCode: T.WORD,
    Reserved1: T.WORD,
    Reserved2: T.WORD,
    szPathName: ArrayType(T.CHAR, 128)
});
T.POFSTRUCT = Pointer(Struct('_OFSTRUCT', {
    cBytes: T.BYTE,
    fFixedDisk: T.BYTE,
    nErrCode: T.WORD,
    Reserved1: T.WORD,
    Reserved2: T.WORD,
    szPathName: ArrayType(T.CHAR, 128)
}));
T.LPOFSTRUCT = Pointer(Struct('_OFSTRUCT', {
    cBytes: T.BYTE,
    fFixedDisk: T.BYTE,
    nErrCode: T.WORD,
    Reserved1: T.WORD,
    Reserved2: T.WORD,
    szPathName: ArrayType(T.CHAR, 128)
}));
T.SECURITY_ATTRIBUTES = Struct('_SECURITY_ATTRIBUTES', {
    nLength: T.DWORD,
    lpSecurityDescriptor: T.LPVOID,
    bInheritHandle: T.BOOL
});
T.PSECURITY_ATTRIBUTES = Pointer(Struct('_SECURITY_ATTRIBUTES', {
    nLength: T.DWORD,
    lpSecurityDescriptor: T.LPVOID,
    bInheritHandle: T.BOOL
}));
T.LPSECURITY_ATTRIBUTES = Pointer(Struct('_SECURITY_ATTRIBUTES', {
    nLength: T.DWORD,
    lpSecurityDescriptor: T.LPVOID,
    bInheritHandle: T.BOOL
}));
T.WIN32_FIND_DATAA = Struct('_WIN32_FIND_DATAA', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    dwReserved0: T.DWORD,
    dwReserved1: T.DWORD,
    cFileName: ArrayType(T.CHAR, 260),
    cAlternateFileName: ArrayType(T.CHAR, 14)
});
T.PWIN32_FIND_DATAA = Pointer(Struct('_WIN32_FIND_DATAA', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    dwReserved0: T.DWORD,
    dwReserved1: T.DWORD,
    cFileName: ArrayType(T.CHAR, 260),
    cAlternateFileName: ArrayType(T.CHAR, 14)
}));
T.LPWIN32_FIND_DATAA = Pointer(Struct('_WIN32_FIND_DATAA', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    dwReserved0: T.DWORD,
    dwReserved1: T.DWORD,
    cFileName: ArrayType(T.CHAR, 260),
    cAlternateFileName: ArrayType(T.CHAR, 14)
}));
T.WIN32_FIND_DATAW = Struct('_WIN32_FIND_DATAW', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    dwReserved0: T.DWORD,
    dwReserved1: T.DWORD,
    cFileName: ArrayType(T.WCHAR, 260),
    cAlternateFileName: ArrayType(T.WCHAR, 14)
});
T.PWIN32_FIND_DATAW = Pointer(Struct('_WIN32_FIND_DATAW', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    dwReserved0: T.DWORD,
    dwReserved1: T.DWORD,
    cFileName: ArrayType(T.WCHAR, 260),
    cAlternateFileName: ArrayType(T.WCHAR, 14)
}));
T.LPWIN32_FIND_DATAW = Pointer(Struct('_WIN32_FIND_DATAW', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    dwReserved0: T.DWORD,
    dwReserved1: T.DWORD,
    cFileName: ArrayType(T.WCHAR, 260),
    cAlternateFileName: ArrayType(T.WCHAR, 14)
}));
T.WIN32_FIND_DATA = T.WIN32_FIND_DATAA;
T.PWIN32_FIND_DATA = T.PWIN32_FIND_DATAA;
T.LPWIN32_FIND_DATA = T.LPWIN32_FIND_DATAA;
T.FINDEX_INFO_LEVELS = Enum('FindExInfoMaxInfoLevel', {
    FindExInfoStandard: 0,
    FindExInfoMaxInfoLevel: 1
});
T.FINDEX_SEARCH_OPS = Enum('FindExSearchMaxSearchOp', {
    FindExSearchNameMatch: 0,
    FindExSearchLimitToDirectories: 1,
    FindExSearchLimitToDevices: 2,
    FindExSearchMaxSearchOp: 3
});
T.PROCESS_HEAP_ENTRY = Struct('_PROCESS_HEAP_ENTRY', {
    lpData: T.LPVOID,
    cbData: T.DWORD,
    cbOverhead: T.BYTE,
    iRegionIndex: T.BYTE,
    wFlags: T.WORD,
    __unnamed0: Union('', {
        Block: Struct('', {
            hMem: T.HANDLE,
            dwReserved: ArrayType(T.DWORD, 3)
        }),
        Region: Struct('', {
            dwCommittedSize: T.DWORD,
            dwUnCommittedSize: T.DWORD,
            lpFirstBlock: T.LPVOID,
            lpLastBlock: T.LPVOID
        })
    })
});
T.PPROCESS_HEAP_ENTRY = Pointer(Struct('_PROCESS_HEAP_ENTRY', {
    lpData: T.LPVOID,
    cbData: T.DWORD,
    cbOverhead: T.BYTE,
    iRegionIndex: T.BYTE,
    wFlags: T.WORD,
    __unnamed0: Union('', {
        Block: Struct('', {
            hMem: T.HANDLE,
            dwReserved: ArrayType(T.DWORD, 3)
        }),
        Region: Struct('', {
            dwCommittedSize: T.DWORD,
            dwUnCommittedSize: T.DWORD,
            lpFirstBlock: T.LPVOID,
            lpLastBlock: T.LPVOID
        })
    })
}));
T.LPPROCESS_HEAP_ENTRY = Pointer(Struct('_PROCESS_HEAP_ENTRY', {
    lpData: T.LPVOID,
    cbData: T.DWORD,
    cbOverhead: T.BYTE,
    iRegionIndex: T.BYTE,
    wFlags: T.WORD,
    __unnamed0: Union('', {
        Block: Struct('', {
            hMem: T.HANDLE,
            dwReserved: ArrayType(T.DWORD, 3)
        }),
        Region: Struct('', {
            dwCommittedSize: T.DWORD,
            dwUnCommittedSize: T.DWORD,
            lpFirstBlock: T.LPVOID,
            lpLastBlock: T.LPVOID
        })
    })
}));
T.MEMORYSTATUS = Struct('tagMEMORYSTATUS', {
    dwLength: T.DWORD,
    dwMemoryLoad: T.DWORD,
    dwTotalPhys: T.SIZE_T,
    dwAvailPhys: T.SIZE_T,
    dwTotalPageFile: T.SIZE_T,
    dwAvailPageFile: T.SIZE_T,
    dwTotalVirtual: T.SIZE_T,
    dwAvailVirtual: T.SIZE_T
});
T.LPMEMORYSTATUS = Pointer(Struct('tagMEMORYSTATUS', {
    dwLength: T.DWORD,
    dwMemoryLoad: T.DWORD,
    dwTotalPhys: T.SIZE_T,
    dwAvailPhys: T.SIZE_T,
    dwTotalPageFile: T.SIZE_T,
    dwAvailPageFile: T.SIZE_T,
    dwTotalVirtual: T.SIZE_T,
    dwAvailVirtual: T.SIZE_T
}));
T.MEMORYSTATUSEX = Struct('tagMEMORYSTATUSEX', {
    dwLength: T.DWORD,
    dwMemoryLoad: T.DWORD,
    ullTotalPhys: T.DWORDLONG,
    ullAvailPhys: T.DWORDLONG,
    ullTotalPageFile: T.DWORDLONG,
    ullAvailPageFile: T.DWORDLONG,
    ullTotalVirtual: T.DWORDLONG,
    ullAvailVirtual: T.DWORDLONG,
    ullAvailExtendedVirtual: T.DWORDLONG
});
T.LPMEMORYSTATUSEX = Pointer(Struct('tagMEMORYSTATUSEX', {
    dwLength: T.DWORD,
    dwMemoryLoad: T.DWORD,
    ullTotalPhys: T.DWORDLONG,
    ullAvailPhys: T.DWORDLONG,
    ullTotalPageFile: T.DWORDLONG,
    ullAvailPageFile: T.DWORDLONG,
    ullTotalVirtual: T.DWORDLONG,
    ullAvailVirtual: T.DWORDLONG,
    ullAvailExtendedVirtual: T.DWORDLONG
}));
T.MEMORY_RESOURCE_NOTIFICATION_TYPE = Enum('HighMemoryResourceNotification', {
    LowMemoryResourceNotification: 0,
    HighMemoryResourceNotification: 1
});
T.SYSTEMTIME = Struct('_SYSTEMTIME', {
    wYear: T.WORD,
    wMonth: T.WORD,
    wDayOfWeek: T.WORD,
    wDay: T.WORD,
    wHour: T.WORD,
    wMinute: T.WORD,
    wSecond: T.WORD,
    wMilliseconds: T.WORD
});
T.PSYSTEMTIME = Pointer(Struct('_SYSTEMTIME', {
    wYear: T.WORD,
    wMonth: T.WORD,
    wDayOfWeek: T.WORD,
    wDay: T.WORD,
    wHour: T.WORD,
    wMinute: T.WORD,
    wSecond: T.WORD,
    wMilliseconds: T.WORD
}));
T.LPSYSTEMTIME = Pointer(Struct('_SYSTEMTIME', {
    wYear: T.WORD,
    wMonth: T.WORD,
    wDayOfWeek: T.WORD,
    wDay: T.WORD,
    wHour: T.WORD,
    wMinute: T.WORD,
    wSecond: T.WORD,
    wMilliseconds: T.WORD
}));
T.OVERLAPPED = Struct('_OVERLAPPED', {
    Internal: T.ULONG_PTR,
    InternalHigh: T.ULONG_PTR,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            Offset: T.DWORD,
            OffsetHigh: T.DWORD
        }),
        Pointer: T.PVOID
    }),
    hEvent: T.HANDLE
});
T.LPOVERLAPPED = Pointer(Struct('_OVERLAPPED', {
    Internal: T.ULONG_PTR,
    InternalHigh: T.ULONG_PTR,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            Offset: T.DWORD,
            OffsetHigh: T.DWORD
        }),
        Pointer: T.PVOID
    }),
    hEvent: T.HANDLE
}));
T.LPOVERLAPPED_COMPLETION_ROUTINE = Pointer(Fn(null, [[T.DWORD], [T.DWORD], [T.LPOVERLAPPED]]));
T.STARTUPINFOA = Struct('_STARTUPINFOA', {
    cb: T.DWORD,
    lpReserved: T.LPSTR,
    lpDesktop: T.LPSTR,
    lpTitle: T.LPSTR,
    dwX: T.DWORD,
    dwY: T.DWORD,
    dwXSize: T.DWORD,
    dwYSize: T.DWORD,
    dwXCountChars: T.DWORD,
    dwYCountChars: T.DWORD,
    dwFillAttribute: T.DWORD,
    dwFlags: T.DWORD,
    wShowWindow: T.WORD,
    cbReserved2: T.WORD,
    lpReserved2: Pointer(T.BYTE),
    hStdInput: T.HANDLE,
    hStdOutput: T.HANDLE,
    hStdError: T.HANDLE
});
T.LPSTARTUPINFOA = Pointer(Struct('_STARTUPINFOA', {
    cb: T.DWORD,
    lpReserved: T.LPSTR,
    lpDesktop: T.LPSTR,
    lpTitle: T.LPSTR,
    dwX: T.DWORD,
    dwY: T.DWORD,
    dwXSize: T.DWORD,
    dwYSize: T.DWORD,
    dwXCountChars: T.DWORD,
    dwYCountChars: T.DWORD,
    dwFillAttribute: T.DWORD,
    dwFlags: T.DWORD,
    wShowWindow: T.WORD,
    cbReserved2: T.WORD,
    lpReserved2: Pointer(T.BYTE),
    hStdInput: T.HANDLE,
    hStdOutput: T.HANDLE,
    hStdError: T.HANDLE
}));
T.STARTUPINFOW = Struct('_STARTUPINFOW', {
    cb: T.DWORD,
    lpReserved: T.LPWSTR,
    lpDesktop: T.LPWSTR,
    lpTitle: T.LPWSTR,
    dwX: T.DWORD,
    dwY: T.DWORD,
    dwXSize: T.DWORD,
    dwYSize: T.DWORD,
    dwXCountChars: T.DWORD,
    dwYCountChars: T.DWORD,
    dwFillAttribute: T.DWORD,
    dwFlags: T.DWORD,
    wShowWindow: T.WORD,
    cbReserved2: T.WORD,
    lpReserved2: Pointer(T.BYTE),
    hStdInput: T.HANDLE,
    hStdOutput: T.HANDLE,
    hStdError: T.HANDLE
});
T.LPSTARTUPINFOW = Pointer(Struct('_STARTUPINFOW', {
    cb: T.DWORD,
    lpReserved: T.LPWSTR,
    lpDesktop: T.LPWSTR,
    lpTitle: T.LPWSTR,
    dwX: T.DWORD,
    dwY: T.DWORD,
    dwXSize: T.DWORD,
    dwYSize: T.DWORD,
    dwXCountChars: T.DWORD,
    dwYCountChars: T.DWORD,
    dwFillAttribute: T.DWORD,
    dwFlags: T.DWORD,
    wShowWindow: T.WORD,
    cbReserved2: T.WORD,
    lpReserved2: Pointer(T.BYTE),
    hStdInput: T.HANDLE,
    hStdOutput: T.HANDLE,
    hStdError: T.HANDLE
}));
T.STARTUPINFO = T.STARTUPINFOA;
T.LPSTARTUPINFO = T.LPSTARTUPINFOA;
T.PROCESS_INFORMATION = Struct('_PROCESS_INFORMATION', {
    hProcess: T.HANDLE,
    hThread: T.HANDLE,
    dwProcessId: T.DWORD,
    dwThreadId: T.DWORD
});
T.PPROCESS_INFORMATION = Pointer(Struct('_PROCESS_INFORMATION', {
    hProcess: T.HANDLE,
    hThread: T.HANDLE,
    dwProcessId: T.DWORD,
    dwThreadId: T.DWORD
}));
T.LPPROCESS_INFORMATION = Pointer(Struct('_PROCESS_INFORMATION', {
    hProcess: T.HANDLE,
    hThread: T.HANDLE,
    dwProcessId: T.DWORD,
    dwThreadId: T.DWORD
}));
T.DYNAMIC_TIME_ZONE_INFORMATION = Struct('_TIME_DYNAMIC_ZONE_INFORMATION', {
    Bias: T.LONG,
    StandardName: ArrayType(T.WCHAR, 32),
    StandardDate: T.SYSTEMTIME,
    StandardBias: T.LONG,
    DaylightName: ArrayType(T.WCHAR, 32),
    DaylightDate: T.SYSTEMTIME,
    DaylightBias: T.LONG,
    TimeZoneKeyName: ArrayType(T.WCHAR, 128),
    DynamicDaylightTimeDisabled: T.BOOLEAN
});
T.PDYNAMIC_TIME_ZONE_INFORMATION = Pointer(Struct('_TIME_DYNAMIC_ZONE_INFORMATION', {
    Bias: T.LONG,
    StandardName: ArrayType(T.WCHAR, 32),
    StandardDate: T.SYSTEMTIME,
    StandardBias: T.LONG,
    DaylightName: ArrayType(T.WCHAR, 32),
    DaylightDate: T.SYSTEMTIME,
    DaylightBias: T.LONG,
    TimeZoneKeyName: ArrayType(T.WCHAR, 128),
    DynamicDaylightTimeDisabled: T.BOOLEAN
}));
T.TIME_ZONE_INFORMATION = Struct('_TIME_ZONE_INFORMATION', {
    Bias: T.LONG,
    StandardName: ArrayType(T.WCHAR, 32),
    StandardDate: T.SYSTEMTIME,
    StandardBias: T.LONG,
    DaylightName: ArrayType(T.WCHAR, 32),
    DaylightDate: T.SYSTEMTIME,
    DaylightBias: T.LONG
});
T.PTIME_ZONE_INFORMATION = Pointer(Struct('_TIME_ZONE_INFORMATION', {
    Bias: T.LONG,
    StandardName: ArrayType(T.WCHAR, 32),
    StandardDate: T.SYSTEMTIME,
    StandardBias: T.LONG,
    DaylightName: ArrayType(T.WCHAR, 32),
    DaylightDate: T.SYSTEMTIME,
    DaylightBias: T.LONG
}));
T.LPTIME_ZONE_INFORMATION = Pointer(Struct('_TIME_ZONE_INFORMATION', {
    Bias: T.LONG,
    StandardName: ArrayType(T.WCHAR, 32),
    StandardDate: T.SYSTEMTIME,
    StandardBias: T.LONG,
    DaylightName: ArrayType(T.WCHAR, 32),
    DaylightDate: T.SYSTEMTIME,
    DaylightBias: T.LONG
}));
T.BY_HANDLE_FILE_INFORMATION = Struct('_BY_HANDLE_FILE_INFORMATION', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    dwVolumeSerialNumber: T.DWORD,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    nNumberOfLinks: T.DWORD,
    nFileIndexHigh: T.DWORD,
    nFileIndexLow: T.DWORD
});
T.PBY_HANDLE_FILE_INFORMATION = Pointer(Struct('_BY_HANDLE_FILE_INFORMATION', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    dwVolumeSerialNumber: T.DWORD,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    nNumberOfLinks: T.DWORD,
    nFileIndexHigh: T.DWORD,
    nFileIndexLow: T.DWORD
}));
T.LPBY_HANDLE_FILE_INFORMATION = Pointer(Struct('_BY_HANDLE_FILE_INFORMATION', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    dwVolumeSerialNumber: T.DWORD,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD,
    nNumberOfLinks: T.DWORD,
    nFileIndexHigh: T.DWORD,
    nFileIndexLow: T.DWORD
}));
T.SYSTEM_POWER_STATUS = Struct('_SYSTEM_POWER_STATUS', {
    ACLineStatus: T.BYTE,
    BatteryFlag: T.BYTE,
    BatteryLifePercent: T.BYTE,
    Reserved1: T.BYTE,
    BatteryLifeTime: T.DWORD,
    BatteryFullLifeTime: T.DWORD
});
T.LPSYSTEM_POWER_STATUS = Pointer(Struct('_SYSTEM_POWER_STATUS', {
    ACLineStatus: T.BYTE,
    BatteryFlag: T.BYTE,
    BatteryLifePercent: T.BYTE,
    Reserved1: T.BYTE,
    BatteryLifeTime: T.DWORD,
    BatteryFullLifeTime: T.DWORD
}));
T.SYSTEM_INFO = Struct('_SYSTEM_INFO', {
    __unnamed0: Union('', {
        dwOemId: T.DWORD,
        __unnamed0: Struct('', {
            wProcessorArchitecture: T.WORD,
            wReserved: T.WORD
        })
    }),
    dwPageSize: T.DWORD,
    lpMinimumApplicationAddress: T.LPVOID,
    lpMaximumApplicationAddress: T.LPVOID,
    dwActiveProcessorMask: T.DWORD_PTR,
    dwNumberOfProcessors: T.DWORD,
    dwProcessorType: T.DWORD,
    dwAllocationGranularity: T.DWORD,
    wProcessorLevel: T.WORD,
    wProcessorRevision: T.WORD
});
T.LPSYSTEM_INFO = Pointer(Struct('_SYSTEM_INFO', {
    __unnamed0: Union('', {
        dwOemId: T.DWORD,
        __unnamed0: Struct('', {
            wProcessorArchitecture: T.WORD,
            wReserved: T.WORD
        })
    }),
    dwPageSize: T.DWORD,
    lpMinimumApplicationAddress: T.LPVOID,
    lpMaximumApplicationAddress: T.LPVOID,
    dwActiveProcessorMask: T.DWORD_PTR,
    dwNumberOfProcessors: T.DWORD,
    dwProcessorType: T.DWORD,
    dwAllocationGranularity: T.DWORD,
    wProcessorLevel: T.WORD,
    wProcessorRevision: T.WORD
}));
T.ENUMRESTYPEPROCA = Pointer(Fn(T.BOOL, [[T.HMODULE], [T.LPSTR], [T.LONG_PTR]]));
T.ENUMRESTYPEPROCW = Pointer(Fn(T.BOOL, [[T.HMODULE], [T.LPWSTR], [T.LONG_PTR]]));
T.ENUMRESNAMEPROCA = Pointer(Fn(T.BOOL, [[T.HMODULE], [T.LPCSTR], [T.LPSTR], [T.LONG_PTR]]));
T.ENUMRESNAMEPROCW = Pointer(Fn(T.BOOL, [[T.HMODULE], [T.LPCWSTR], [T.LPWSTR], [T.LONG_PTR]]));
T.ENUMRESLANGPROCA = Pointer(Fn(T.BOOL, [[T.HMODULE], [T.LPCSTR], [T.LPCSTR], [T.WORD], [T.LONG_PTR]]));
T.ENUMRESLANGPROCW = Pointer(Fn(T.BOOL, [[T.HMODULE], [T.LPCWSTR], [T.LPCWSTR], [T.WORD], [T.LONG_PTR]]));
T.ENUMRESTYPEPROC = T.ENUMRESTYPEPROCA;
T.ENUMRESNAMEPROC = T.ENUMRESNAMEPROCA;
T.ENUMRESLANGPROC = T.ENUMRESLANGPROCA;
T.LPLDT_ENTRY = T.PLDT_ENTRY;
T.GET_FILEEX_INFO_LEVELS = Enum('GetFileExInfoStandard', {
    GetFileExInfoStandard: 0
});
T.WIN32_FILE_ATTRIBUTE_DATA = Struct('_WIN32_FILE_ATTRIBUTES_DATA', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD
});
T.LPWIN32_FILE_ATTRIBUTE_DATA = Pointer(Struct('_WIN32_FILE_ATTRIBUTES_DATA', {
    dwFileAttributes: T.DWORD,
    ftCreationTime: T.FILETIME,
    ftLastAccessTime: T.FILETIME,
    ftLastWriteTime: T.FILETIME,
    nFileSizeHigh: T.DWORD,
    nFileSizeLow: T.DWORD
}));
T.LPPROGRESS_ROUTINE = Pointer(Fn(T.DWORD, [[T.LARGE_INTEGER], [T.LARGE_INTEGER], [T.LARGE_INTEGER], [T.LARGE_INTEGER], [T.DWORD], [T.DWORD], [T.HANDLE], [T.HANDLE], [T.LPVOID]]));
T.ACTCTXA = Struct('tagACTCTXA', {
    cbSize: T.ULONG,
    dwFlags: T.DWORD,
    lpSource: T.LPCSTR,
    wProcessorArchitecture: T.USHORT,
    wLangId: T.LANGID,
    lpAssemblyDirectory: T.LPCSTR,
    lpResourceName: T.LPCSTR,
    lpApplicationName: T.LPCSTR,
    hModule: T.HMODULE
});
T.PACTCTXA = Pointer(Struct('tagACTCTXA', {
    cbSize: T.ULONG,
    dwFlags: T.DWORD,
    lpSource: T.LPCSTR,
    wProcessorArchitecture: T.USHORT,
    wLangId: T.LANGID,
    lpAssemblyDirectory: T.LPCSTR,
    lpResourceName: T.LPCSTR,
    lpApplicationName: T.LPCSTR,
    hModule: T.HMODULE
}));
T.ACTCTXW = Struct('tagACTCTXW', {
    cbSize: T.ULONG,
    dwFlags: T.DWORD,
    lpSource: T.LPCWSTR,
    wProcessorArchitecture: T.USHORT,
    wLangId: T.LANGID,
    lpAssemblyDirectory: T.LPCWSTR,
    lpResourceName: T.LPCWSTR,
    lpApplicationName: T.LPCWSTR,
    hModule: T.HMODULE
});
T.PACTCTXW = Pointer(Struct('tagACTCTXW', {
    cbSize: T.ULONG,
    dwFlags: T.DWORD,
    lpSource: T.LPCWSTR,
    wProcessorArchitecture: T.USHORT,
    wLangId: T.LANGID,
    lpAssemblyDirectory: T.LPCWSTR,
    lpResourceName: T.LPCWSTR,
    lpApplicationName: T.LPCWSTR,
    hModule: T.HMODULE
}));
T.ACTCTX = T.ACTCTXA;
T.PACTCTX = T.PACTCTXA;
T.PCACTCTXA = Pointer(T.ACTCTXA);
T.PCACTCTXW = Pointer(T.ACTCTXW);
T.PCACTCTX = T.PCACTCTXA;
T.ACTCTX_SECTION_KEYED_DATA_2600 = Struct('tagACTCTX_SECTION_KEYED_DATA_2600', {
    cbSize: T.ULONG,
    ulDataFormatVersion: T.ULONG,
    lpData: T.PVOID,
    ulLength: T.ULONG,
    lpSectionGlobalData: T.PVOID,
    ulSectionGlobalDataLength: T.ULONG,
    lpSectionBase: T.PVOID,
    ulSectionTotalLength: T.ULONG,
    hActCtx: T.HANDLE,
    ulAssemblyRosterIndex: T.ULONG
});
T.PACTCTX_SECTION_KEYED_DATA_2600 = Pointer(Struct('tagACTCTX_SECTION_KEYED_DATA_2600', {
    cbSize: T.ULONG,
    ulDataFormatVersion: T.ULONG,
    lpData: T.PVOID,
    ulLength: T.ULONG,
    lpSectionGlobalData: T.PVOID,
    ulSectionGlobalDataLength: T.ULONG,
    lpSectionBase: T.PVOID,
    ulSectionTotalLength: T.ULONG,
    hActCtx: T.HANDLE,
    ulAssemblyRosterIndex: T.ULONG
}));
T.PCACTCTX_SECTION_KEYED_DATA_2600 = Pointer(T.ACTCTX_SECTION_KEYED_DATA_2600);
T.ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = Struct('tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA', {
    lpInformation: T.PVOID,
    lpSectionBase: T.PVOID,
    ulSectionLength: T.ULONG,
    lpSectionGlobalDataBase: T.PVOID,
    ulSectionGlobalDataLength: T.ULONG
});
T.PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = Pointer(Struct('tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA', {
    lpInformation: T.PVOID,
    lpSectionBase: T.PVOID,
    ulSectionLength: T.ULONG,
    lpSectionGlobalDataBase: T.PVOID,
    ulSectionGlobalDataLength: T.ULONG
}));
T.PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = Pointer(T.ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA);
T.ACTCTX_SECTION_KEYED_DATA = Struct('tagACTCTX_SECTION_KEYED_DATA', {
    cbSize: T.ULONG,
    ulDataFormatVersion: T.ULONG,
    lpData: T.PVOID,
    ulLength: T.ULONG,
    lpSectionGlobalData: T.PVOID,
    ulSectionGlobalDataLength: T.ULONG,
    lpSectionBase: T.PVOID,
    ulSectionTotalLength: T.ULONG,
    hActCtx: T.HANDLE,
    ulAssemblyRosterIndex: T.ULONG,
    ulFlags: T.ULONG,
    AssemblyMetadata: T.ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
});
T.PACTCTX_SECTION_KEYED_DATA = Pointer(Struct('tagACTCTX_SECTION_KEYED_DATA', {
    cbSize: T.ULONG,
    ulDataFormatVersion: T.ULONG,
    lpData: T.PVOID,
    ulLength: T.ULONG,
    lpSectionGlobalData: T.PVOID,
    ulSectionGlobalDataLength: T.ULONG,
    lpSectionBase: T.PVOID,
    ulSectionTotalLength: T.ULONG,
    hActCtx: T.HANDLE,
    ulAssemblyRosterIndex: T.ULONG,
    ulFlags: T.ULONG,
    AssemblyMetadata: T.ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
}));
T.PCACTCTX_SECTION_KEYED_DATA = Pointer(T.ACTCTX_SECTION_KEYED_DATA);
T.ACTIVATION_CONTEXT_BASIC_INFORMATION = Struct('_ACTIVATION_CONTEXT_BASIC_INFORMATION', {
    hActCtx: T.HANDLE,
    dwFlags: T.DWORD
});
T.PACTIVATION_CONTEXT_BASIC_INFORMATION = Pointer(Struct('_ACTIVATION_CONTEXT_BASIC_INFORMATION', {
    hActCtx: T.HANDLE,
    dwFlags: T.DWORD
}));
T.PQUERYACTCTXW_FUNC = Pointer(Fn(T.BOOL, [[T.DWORD], [T.HANDLE], [T.PVOID], [T.ULONG], [T.PVOID], [T.SIZE_T], [Pointer(T.SIZE_T)]]));
T.COMSTAT = Struct('tagCOMSTAT', {
    fCtsHold: [T.DWORD, 1],
    fDsrHold: [T.DWORD, 1],
    fRlsdHold: [T.DWORD, 1],
    fXoffHold: [T.DWORD, 1],
    fXoffSent: [T.DWORD, 1],
    fEof: [T.DWORD, 1],
    fTxim: [T.DWORD, 1],
    fReserved: [T.DWORD, 25],
    cbInQue: T.DWORD,
    cbOutQue: T.DWORD
});
T.LPCOMSTAT = Pointer(Struct('tagCOMSTAT', {
    fCtsHold: [T.DWORD, 1],
    fDsrHold: [T.DWORD, 1],
    fRlsdHold: [T.DWORD, 1],
    fXoffHold: [T.DWORD, 1],
    fXoffSent: [T.DWORD, 1],
    fEof: [T.DWORD, 1],
    fTxim: [T.DWORD, 1],
    fReserved: [T.DWORD, 25],
    cbInQue: T.DWORD,
    cbOutQue: T.DWORD
}));
T.DCB = Struct('tagDCB', {
    DCBlength: T.DWORD,
    BaudRate: T.DWORD,
    fBinary: [T.u32, 1],
    fParity: [T.u32, 1],
    fOutxCtsFlow: [T.u32, 1],
    fOutxDsrFlow: [T.u32, 1],
    fDtrControl: [T.u32, 2],
    fDsrSensitivity: [T.u32, 1],
    fTXContinueOnXoff: [T.u32, 1],
    fOutX: [T.u32, 1],
    fInX: [T.u32, 1],
    fErrorChar: [T.u32, 1],
    fNull: [T.u32, 1],
    fRtsControl: [T.u32, 2],
    fAbortOnError: [T.u32, 1],
    fDummy2: [T.u32, 17],
    wReserved: T.WORD,
    XonLim: T.WORD,
    XoffLim: T.WORD,
    ByteSize: T.BYTE,
    Parity: T.BYTE,
    StopBits: T.BYTE,
    XonChar: T.char,
    XoffChar: T.char,
    ErrorChar: T.char,
    EofChar: T.char,
    EvtChar: T.char,
    wReserved1: T.WORD
});
T.LPDCB = Pointer(Struct('tagDCB', {
    DCBlength: T.DWORD,
    BaudRate: T.DWORD,
    fBinary: [T.u32, 1],
    fParity: [T.u32, 1],
    fOutxCtsFlow: [T.u32, 1],
    fOutxDsrFlow: [T.u32, 1],
    fDtrControl: [T.u32, 2],
    fDsrSensitivity: [T.u32, 1],
    fTXContinueOnXoff: [T.u32, 1],
    fOutX: [T.u32, 1],
    fInX: [T.u32, 1],
    fErrorChar: [T.u32, 1],
    fNull: [T.u32, 1],
    fRtsControl: [T.u32, 2],
    fAbortOnError: [T.u32, 1],
    fDummy2: [T.u32, 17],
    wReserved: T.WORD,
    XonLim: T.WORD,
    XoffLim: T.WORD,
    ByteSize: T.BYTE,
    Parity: T.BYTE,
    StopBits: T.BYTE,
    XonChar: T.char,
    XoffChar: T.char,
    ErrorChar: T.char,
    EofChar: T.char,
    EvtChar: T.char,
    wReserved1: T.WORD
}));
T.COMMCONFIG = Struct('tagCOMMCONFIG', {
    dwSize: T.DWORD,
    wVersion: T.WORD,
    wReserved: T.WORD,
    dcb: T.DCB,
    dwProviderSubType: T.DWORD,
    dwProviderOffset: T.DWORD,
    dwProviderSize: T.DWORD,
    wcProviderData: ArrayType(T.DWORD, 1)
});
T.LPCOMMCONFIG = Pointer(Struct('tagCOMMCONFIG', {
    dwSize: T.DWORD,
    wVersion: T.WORD,
    wReserved: T.WORD,
    dcb: T.DCB,
    dwProviderSubType: T.DWORD,
    dwProviderOffset: T.DWORD,
    dwProviderSize: T.DWORD,
    wcProviderData: ArrayType(T.DWORD, 1)
}));
T.COMMPROP = Struct('tagCOMMPROP', {
    wPacketLength: T.WORD,
    wPacketVersion: T.WORD,
    dwServiceMask: T.DWORD,
    dwReserved1: T.DWORD,
    dwMaxTxQueue: T.DWORD,
    dwMaxRxQueue: T.DWORD,
    dwMaxBaud: T.DWORD,
    dwProvSubType: T.DWORD,
    dwProvCapabilities: T.DWORD,
    dwSettableParams: T.DWORD,
    dwSettableBaud: T.DWORD,
    wSettableData: T.WORD,
    wSettableStopParity: T.WORD,
    dwCurrentTxQueue: T.DWORD,
    dwCurrentRxQueue: T.DWORD,
    dwProvSpec1: T.DWORD,
    dwProvSpec2: T.DWORD,
    wcProvChar: ArrayType(T.WCHAR, 1)
});
T.LPCOMMPROP = Pointer(Struct('tagCOMMPROP', {
    wPacketLength: T.WORD,
    wPacketVersion: T.WORD,
    dwServiceMask: T.DWORD,
    dwReserved1: T.DWORD,
    dwMaxTxQueue: T.DWORD,
    dwMaxRxQueue: T.DWORD,
    dwMaxBaud: T.DWORD,
    dwProvSubType: T.DWORD,
    dwProvCapabilities: T.DWORD,
    dwSettableParams: T.DWORD,
    dwSettableBaud: T.DWORD,
    wSettableData: T.WORD,
    wSettableStopParity: T.WORD,
    dwCurrentTxQueue: T.DWORD,
    dwCurrentRxQueue: T.DWORD,
    dwProvSpec1: T.DWORD,
    dwProvSpec2: T.DWORD,
    wcProvChar: ArrayType(T.WCHAR, 1)
}));
T.COMMTIMEOUTS = Struct('tagCOMMTIMEOUTS', {
    ReadIntervalTimeout: T.DWORD,
    ReadTotalTimeoutMultiplier: T.DWORD,
    ReadTotalTimeoutConstant: T.DWORD,
    WriteTotalTimeoutMultiplier: T.DWORD,
    WriteTotalTimeoutConstant: T.DWORD
});
T.LPCOMMTIMEOUTS = Pointer(Struct('tagCOMMTIMEOUTS', {
    ReadIntervalTimeout: T.DWORD,
    ReadTotalTimeoutMultiplier: T.DWORD,
    ReadTotalTimeoutConstant: T.DWORD,
    WriteTotalTimeoutMultiplier: T.DWORD,
    WriteTotalTimeoutConstant: T.DWORD
}));
T.PAPCFUNC = Pointer(Fn(null, [[T.ULONG_PTR]]));
T.PTIMERAPCROUTINE = Pointer(Fn(null, [[T.LPVOID], [T.DWORD], [T.DWORD]]));
T.COMPUTER_NAME_FORMAT = Enum('ComputerNameMax', {
    ComputerNameNetBIOS: 0,
    ComputerNameDnsHostname: 1,
    ComputerNameDnsDomain: 2,
    ComputerNameDnsFullyQualified: 3,
    ComputerNamePhysicalNetBIOS: 4,
    ComputerNamePhysicalDnsHostname: 5,
    ComputerNamePhysicalDnsDomain: 6,
    ComputerNamePhysicalDnsFullyQualified: 7,
    ComputerNameMax: 8
});
T.HW_PROFILE_INFOA = Struct('tagHW_PROFILE_INFOA', {
    dwDockInfo: T.DWORD,
    szHwProfileGuid: ArrayType(T.CHAR, 39),
    szHwProfileName: ArrayType(T.CHAR, 80)
});
T.LPHW_PROFILE_INFOA = Pointer(Struct('tagHW_PROFILE_INFOA', {
    dwDockInfo: T.DWORD,
    szHwProfileGuid: ArrayType(T.CHAR, 39),
    szHwProfileName: ArrayType(T.CHAR, 80)
}));
T.HW_PROFILE_INFOW = Struct('tagHW_PROFILE_INFOW', {
    dwDockInfo: T.DWORD,
    szHwProfileGuid: ArrayType(T.WCHAR, 39),
    szHwProfileName: ArrayType(T.WCHAR, 80)
});
T.LPHW_PROFILE_INFOW = Pointer(Struct('tagHW_PROFILE_INFOW', {
    dwDockInfo: T.DWORD,
    szHwProfileGuid: ArrayType(T.WCHAR, 39),
    szHwProfileName: ArrayType(T.WCHAR, 80)
}));
T.HW_PROFILE_INFO = T.HW_PROFILE_INFOA;
T.LPHW_PROFILE_INFO = T.LPHW_PROFILE_INFOA;
T.DEP_SYSTEM_POLICY_TYPE = Enum('OptOut', {
    AlwaysOff: 0,
    AlwaysOn: 1,
    OptIn: 2,
    OptOut: 3
});
T.EVENTLOG_FULL_INFORMATION = Struct('_EVENTLOG_FULL_INFORMATION', {
    dwFull: T.DWORD
});
T.LPEVENTLOG_FULL_INFORMATION = Pointer(Struct('_EVENTLOG_FULL_INFORMATION', {
    dwFull: T.DWORD
}));
T.WIN32_STREAM_ID = Struct('_WIN32_STREAM_ID', {
    dwStreamId: T.DWORD,
    dwStreamAttributes: T.DWORD,
    Size: T.LARGE_INTEGER,
    dwStreamNameSize: T.DWORD,
    cStreamName: ArrayType(T.WCHAR, 1)
});
T.LPWIN32_STREAM_ID = Pointer(Struct('_WIN32_STREAM_ID', {
    dwStreamId: T.DWORD,
    dwStreamAttributes: T.DWORD,
    Size: T.LARGE_INTEGER,
    dwStreamNameSize: T.DWORD,
    cStreamName: ArrayType(T.WCHAR, 1)
}));
T.ABCFLOAT = Struct('_ABCFLOAT', {
    abcfA: T.FLOAT,
    abcfB: T.FLOAT,
    abcfC: T.FLOAT
});
T.PABCFLOAT = Pointer(Struct('_ABCFLOAT', {
    abcfA: T.FLOAT,
    abcfB: T.FLOAT,
    abcfC: T.FLOAT
}));
T.LPABCFLOAT = Pointer(Struct('_ABCFLOAT', {
    abcfA: T.FLOAT,
    abcfB: T.FLOAT,
    abcfC: T.FLOAT
}));
T.KERNINGPAIR = Struct('', {
    wFirst: T.WORD,
    wSecond: T.WORD,
    iKernAmount: T.INT
});
T.LPKERNINGPAIR = Pointer(Struct('', {
    wFirst: T.WORD,
    wSecond: T.WORD,
    iKernAmount: T.INT
}));
T.PIXELFORMATDESCRIPTOR = Struct('tagPIXELFORMATDESCRIPTOR', {
    nSize: T.WORD,
    nVersion: T.WORD,
    dwFlags: T.DWORD,
    iPixelType: T.BYTE,
    cColorBits: T.BYTE,
    cRedBits: T.BYTE,
    cRedShift: T.BYTE,
    cGreenBits: T.BYTE,
    cGreenShift: T.BYTE,
    cBlueBits: T.BYTE,
    cBlueShift: T.BYTE,
    cAlphaBits: T.BYTE,
    cAlphaShift: T.BYTE,
    cAccumBits: T.BYTE,
    cAccumRedBits: T.BYTE,
    cAccumGreenBits: T.BYTE,
    cAccumBlueBits: T.BYTE,
    cAccumAlphaBits: T.BYTE,
    cDepthBits: T.BYTE,
    cStencilBits: T.BYTE,
    cAuxBuffers: T.BYTE,
    iLayerType: T.BYTE,
    bReserved: T.BYTE,
    dwLayerMask: T.DWORD,
    dwVisibleMask: T.DWORD,
    dwDamageMask: T.DWORD
});
T.PPIXELFORMATDESCRIPTOR = Pointer(Struct('tagPIXELFORMATDESCRIPTOR', {
    nSize: T.WORD,
    nVersion: T.WORD,
    dwFlags: T.DWORD,
    iPixelType: T.BYTE,
    cColorBits: T.BYTE,
    cRedBits: T.BYTE,
    cRedShift: T.BYTE,
    cGreenBits: T.BYTE,
    cGreenShift: T.BYTE,
    cBlueBits: T.BYTE,
    cBlueShift: T.BYTE,
    cAlphaBits: T.BYTE,
    cAlphaShift: T.BYTE,
    cAccumBits: T.BYTE,
    cAccumRedBits: T.BYTE,
    cAccumGreenBits: T.BYTE,
    cAccumBlueBits: T.BYTE,
    cAccumAlphaBits: T.BYTE,
    cDepthBits: T.BYTE,
    cStencilBits: T.BYTE,
    cAuxBuffers: T.BYTE,
    iLayerType: T.BYTE,
    bReserved: T.BYTE,
    dwLayerMask: T.DWORD,
    dwVisibleMask: T.DWORD,
    dwDamageMask: T.DWORD
}));
T.LPPIXELFORMATDESCRIPTOR = Pointer(Struct('tagPIXELFORMATDESCRIPTOR', {
    nSize: T.WORD,
    nVersion: T.WORD,
    dwFlags: T.DWORD,
    iPixelType: T.BYTE,
    cColorBits: T.BYTE,
    cRedBits: T.BYTE,
    cRedShift: T.BYTE,
    cGreenBits: T.BYTE,
    cGreenShift: T.BYTE,
    cBlueBits: T.BYTE,
    cBlueShift: T.BYTE,
    cAlphaBits: T.BYTE,
    cAlphaShift: T.BYTE,
    cAccumBits: T.BYTE,
    cAccumRedBits: T.BYTE,
    cAccumGreenBits: T.BYTE,
    cAccumBlueBits: T.BYTE,
    cAccumAlphaBits: T.BYTE,
    cDepthBits: T.BYTE,
    cStencilBits: T.BYTE,
    cAuxBuffers: T.BYTE,
    iLayerType: T.BYTE,
    bReserved: T.BYTE,
    dwLayerMask: T.DWORD,
    dwVisibleMask: T.DWORD,
    dwDamageMask: T.DWORD
}));
T.COLORADJUSTMENT = Struct('tagCOLORADJUSTMENT', {
    caSize: T.WORD,
    caFlags: T.WORD,
    caIlluminantIndex: T.WORD,
    caRedGamma: T.WORD,
    caGreenGamma: T.WORD,
    caBlueGamma: T.WORD,
    caReferenceBlack: T.WORD,
    caReferenceWhite: T.WORD,
    caContrast: T.SHORT,
    caBrightness: T.SHORT,
    caColorfulness: T.SHORT,
    caRedGreenTint: T.SHORT
});
T.PCOLORADJUSTMENT = Pointer(Struct('tagCOLORADJUSTMENT', {
    caSize: T.WORD,
    caFlags: T.WORD,
    caIlluminantIndex: T.WORD,
    caRedGamma: T.WORD,
    caGreenGamma: T.WORD,
    caBlueGamma: T.WORD,
    caReferenceBlack: T.WORD,
    caReferenceWhite: T.WORD,
    caContrast: T.SHORT,
    caBrightness: T.SHORT,
    caColorfulness: T.SHORT,
    caRedGreenTint: T.SHORT
}));
T.LPCOLORADJUSTMENT = Pointer(Struct('tagCOLORADJUSTMENT', {
    caSize: T.WORD,
    caFlags: T.WORD,
    caIlluminantIndex: T.WORD,
    caRedGamma: T.WORD,
    caGreenGamma: T.WORD,
    caBlueGamma: T.WORD,
    caReferenceBlack: T.WORD,
    caReferenceWhite: T.WORD,
    caContrast: T.SHORT,
    caBrightness: T.SHORT,
    caColorfulness: T.SHORT,
    caRedGreenTint: T.SHORT
}));
T.FXPT16DOT16 = T.LONG;
T.LPFXPT16DOT16 = Pointer(T.LONG);
T.FXPT2DOT30 = T.LONG;
T.LPFXPT2DOT30 = Pointer(T.LONG);
T.LCSCSTYPE = T.LONG;
T.LCSGAMUTMATCH = T.LONG;
T.CIEXYZ = Struct('tagCIEXYZ', {
    ciexyzX: T.FXPT2DOT30,
    ciexyzY: T.FXPT2DOT30,
    ciexyzZ: T.FXPT2DOT30
});
T.LPCIEXYZ = Pointer(Struct('tagCIEXYZ', {
    ciexyzX: T.FXPT2DOT30,
    ciexyzY: T.FXPT2DOT30,
    ciexyzZ: T.FXPT2DOT30
}));
T.CIEXYZTRIPLE = Struct('tagCIEXYZTRIPLE', {
    ciexyzRed: T.CIEXYZ,
    ciexyzGreen: T.CIEXYZ,
    ciexyzBlue: T.CIEXYZ
});
T.LPCIEXYZTRIPLE = Pointer(Struct('tagCIEXYZTRIPLE', {
    ciexyzRed: T.CIEXYZ,
    ciexyzGreen: T.CIEXYZ,
    ciexyzBlue: T.CIEXYZ
}));
T.LOGCOLORSPACEA = Struct('tagLOGCOLORSPACEA', {
    lcsSignature: T.DWORD,
    lcsVersion: T.DWORD,
    lcsSize: T.DWORD,
    lcsCSType: T.LCSCSTYPE,
    lcsIntent: T.LCSGAMUTMATCH,
    lcsEndpoints: T.CIEXYZTRIPLE,
    lcsGammaRed: T.DWORD,
    lcsGammaGreen: T.DWORD,
    lcsGammaBlue: T.DWORD,
    lcsFilename: ArrayType(T.CHAR, 260)
});
T.LPLOGCOLORSPACEA = Pointer(Struct('tagLOGCOLORSPACEA', {
    lcsSignature: T.DWORD,
    lcsVersion: T.DWORD,
    lcsSize: T.DWORD,
    lcsCSType: T.LCSCSTYPE,
    lcsIntent: T.LCSGAMUTMATCH,
    lcsEndpoints: T.CIEXYZTRIPLE,
    lcsGammaRed: T.DWORD,
    lcsGammaGreen: T.DWORD,
    lcsGammaBlue: T.DWORD,
    lcsFilename: ArrayType(T.CHAR, 260)
}));
T.LOGCOLORSPACEW = Struct('tagLOGCOLORSPACEW', {
    lcsSignature: T.DWORD,
    lcsVersion: T.DWORD,
    lcsSize: T.DWORD,
    lcsCSType: T.LCSCSTYPE,
    lcsIntent: T.LCSGAMUTMATCH,
    lcsEndpoints: T.CIEXYZTRIPLE,
    lcsGammaRed: T.DWORD,
    lcsGammaGreen: T.DWORD,
    lcsGammaBlue: T.DWORD,
    lcsFilename: ArrayType(T.WCHAR, 260)
});
T.LPLOGCOLORSPACEW = Pointer(Struct('tagLOGCOLORSPACEW', {
    lcsSignature: T.DWORD,
    lcsVersion: T.DWORD,
    lcsSize: T.DWORD,
    lcsCSType: T.LCSCSTYPE,
    lcsIntent: T.LCSGAMUTMATCH,
    lcsEndpoints: T.CIEXYZTRIPLE,
    lcsGammaRed: T.DWORD,
    lcsGammaGreen: T.DWORD,
    lcsGammaBlue: T.DWORD,
    lcsFilename: ArrayType(T.WCHAR, 260)
}));
T.LPLOGCOLORSPACE = T.LPLOGCOLORSPACEA;
T.LOGCOLORSPACE = T.LOGCOLORSPACEA;
T.ICMENUMPROCA = Pointer(Fn(T.INT, [[T.LPSTR, 'lpszFilename'], [T.LPARAM, 'lParam']]));
T.ICMENUMPROCW = Pointer(Fn(T.INT, [[T.LPWSTR, 'lpszFilename'], [T.LPARAM, 'lParam']]));
T.ICMENUMPROC = T.ICMENUMPROCA;
T.PELARRAY = Struct('', {
    paXCount: T.LONG,
    paYCount: T.LONG,
    paXExt: T.LONG,
    paYExt: T.LONG,
    paRGBs: T.BYTE
});
T.PPELARRAY = Pointer(Struct('', {
    paXCount: T.LONG,
    paYCount: T.LONG,
    paXExt: T.LONG,
    paYExt: T.LONG,
    paRGBs: T.BYTE
}));
T.LPPELARRAY = Pointer(Struct('', {
    paXCount: T.LONG,
    paYCount: T.LONG,
    paXExt: T.LONG,
    paYExt: T.LONG,
    paRGBs: T.BYTE
}));
T.BITMAP = Struct('', {
    bmType: T.INT,
    bmWidth: T.INT,
    bmHeight: T.INT,
    bmWidthBytes: T.INT,
    bmPlanes: T.WORD,
    bmBitsPixel: T.WORD,
    bmBits: T.LPVOID
});
T.PBITMAP = Pointer(Struct('', {
    bmType: T.INT,
    bmWidth: T.INT,
    bmHeight: T.INT,
    bmWidthBytes: T.INT,
    bmPlanes: T.WORD,
    bmBitsPixel: T.WORD,
    bmBits: T.LPVOID
}));
T.LPBITMAP = Pointer(Struct('', {
    bmType: T.INT,
    bmWidth: T.INT,
    bmHeight: T.INT,
    bmWidthBytes: T.INT,
    bmPlanes: T.WORD,
    bmBitsPixel: T.WORD,
    bmBits: T.LPVOID
}));
T.LOGBRUSH = Struct('', {
    lbStyle: T.UINT,
    lbColor: T.COLORREF,
    lbHatch: T.ULONG_PTR
});
T.PLOGBRUSH = Pointer(Struct('', {
    lbStyle: T.UINT,
    lbColor: T.COLORREF,
    lbHatch: T.ULONG_PTR
}));
T.LPLOGBRUSH = Pointer(Struct('', {
    lbStyle: T.UINT,
    lbColor: T.COLORREF,
    lbHatch: T.ULONG_PTR
}));
T.LOGBRUSH32 = Struct('', {
    lbStyle: T.UINT,
    lbColor: T.COLORREF,
    lbHatch: T.ULONG
});
T.PLOGBRUSH32 = Pointer(Struct('', {
    lbStyle: T.UINT,
    lbColor: T.COLORREF,
    lbHatch: T.ULONG
}));
T.LPLOGBRUSH32 = Pointer(Struct('', {
    lbStyle: T.UINT,
    lbColor: T.COLORREF,
    lbHatch: T.ULONG
}));
T.PATTERN = T.LOGBRUSH;
T.PPATTERN = Pointer(T.LOGBRUSH);
T.LPPATTERN = Pointer(T.LOGBRUSH);
T.LOGFONTA = Struct('tagLOGFONTA', {
    lfHeight: T.LONG,
    lfWidth: T.LONG,
    lfEscapement: T.LONG,
    lfOrientation: T.LONG,
    lfWeight: T.LONG,
    lfItalic: T.BYTE,
    lfUnderline: T.BYTE,
    lfStrikeOut: T.BYTE,
    lfCharSet: T.BYTE,
    lfOutPrecision: T.BYTE,
    lfClipPrecision: T.BYTE,
    lfQuality: T.BYTE,
    lfPitchAndFamily: T.BYTE,
    lfFaceName: ArrayType(T.CHAR, 32)
});
T.PLOGFONTA = Pointer(Struct('tagLOGFONTA', {
    lfHeight: T.LONG,
    lfWidth: T.LONG,
    lfEscapement: T.LONG,
    lfOrientation: T.LONG,
    lfWeight: T.LONG,
    lfItalic: T.BYTE,
    lfUnderline: T.BYTE,
    lfStrikeOut: T.BYTE,
    lfCharSet: T.BYTE,
    lfOutPrecision: T.BYTE,
    lfClipPrecision: T.BYTE,
    lfQuality: T.BYTE,
    lfPitchAndFamily: T.BYTE,
    lfFaceName: ArrayType(T.CHAR, 32)
}));
T.LPLOGFONTA = Pointer(Struct('tagLOGFONTA', {
    lfHeight: T.LONG,
    lfWidth: T.LONG,
    lfEscapement: T.LONG,
    lfOrientation: T.LONG,
    lfWeight: T.LONG,
    lfItalic: T.BYTE,
    lfUnderline: T.BYTE,
    lfStrikeOut: T.BYTE,
    lfCharSet: T.BYTE,
    lfOutPrecision: T.BYTE,
    lfClipPrecision: T.BYTE,
    lfQuality: T.BYTE,
    lfPitchAndFamily: T.BYTE,
    lfFaceName: ArrayType(T.CHAR, 32)
}));
T.LOGFONTW = Struct('tagLOGFONTW', {
    lfHeight: T.LONG,
    lfWidth: T.LONG,
    lfEscapement: T.LONG,
    lfOrientation: T.LONG,
    lfWeight: T.LONG,
    lfItalic: T.BYTE,
    lfUnderline: T.BYTE,
    lfStrikeOut: T.BYTE,
    lfCharSet: T.BYTE,
    lfOutPrecision: T.BYTE,
    lfClipPrecision: T.BYTE,
    lfQuality: T.BYTE,
    lfPitchAndFamily: T.BYTE,
    lfFaceName: ArrayType(T.WCHAR, 32)
});
T.PLOGFONTW = Pointer(Struct('tagLOGFONTW', {
    lfHeight: T.LONG,
    lfWidth: T.LONG,
    lfEscapement: T.LONG,
    lfOrientation: T.LONG,
    lfWeight: T.LONG,
    lfItalic: T.BYTE,
    lfUnderline: T.BYTE,
    lfStrikeOut: T.BYTE,
    lfCharSet: T.BYTE,
    lfOutPrecision: T.BYTE,
    lfClipPrecision: T.BYTE,
    lfQuality: T.BYTE,
    lfPitchAndFamily: T.BYTE,
    lfFaceName: ArrayType(T.WCHAR, 32)
}));
T.LPLOGFONTW = Pointer(Struct('tagLOGFONTW', {
    lfHeight: T.LONG,
    lfWidth: T.LONG,
    lfEscapement: T.LONG,
    lfOrientation: T.LONG,
    lfWeight: T.LONG,
    lfItalic: T.BYTE,
    lfUnderline: T.BYTE,
    lfStrikeOut: T.BYTE,
    lfCharSet: T.BYTE,
    lfOutPrecision: T.BYTE,
    lfClipPrecision: T.BYTE,
    lfQuality: T.BYTE,
    lfPitchAndFamily: T.BYTE,
    lfFaceName: ArrayType(T.WCHAR, 32)
}));
T.LOGFONT = T.LOGFONTA;
T.PLOGFONT = T.PLOGFONTA;
T.LPLOGFONT = T.LPLOGFONTA;
T.ENUMLOGFONTA = Struct('', {
    elfLogFont: T.LOGFONTA,
    elfFullName: ArrayType(T.BYTE, 64),
    elfStyle: ArrayType(T.BYTE, 32)
});
T.LPENUMLOGFONTA = Pointer(Struct('', {
    elfLogFont: T.LOGFONTA,
    elfFullName: ArrayType(T.BYTE, 64),
    elfStyle: ArrayType(T.BYTE, 32)
}));
T.ENUMLOGFONTW = Struct('', {
    elfLogFont: T.LOGFONTW,
    elfFullName: ArrayType(T.WCHAR, 64),
    elfStyle: ArrayType(T.WCHAR, 32)
});
T.LPENUMLOGFONTW = Pointer(Struct('', {
    elfLogFont: T.LOGFONTW,
    elfFullName: ArrayType(T.WCHAR, 64),
    elfStyle: ArrayType(T.WCHAR, 32)
}));
T.ENUMLOGFONT = T.ENUMLOGFONTA;
T.LPENUMLOGFONT = T.LPENUMLOGFONTA;
T.ENUMLOGFONTEXA = Struct('', {
    elfLogFont: T.LOGFONTA,
    elfFullName: ArrayType(T.BYTE, 64),
    elfStyle: ArrayType(T.BYTE, 32),
    elfScript: ArrayType(T.BYTE, 32)
});
T.LPENUMLOGFONTEXA = Pointer(Struct('', {
    elfLogFont: T.LOGFONTA,
    elfFullName: ArrayType(T.BYTE, 64),
    elfStyle: ArrayType(T.BYTE, 32),
    elfScript: ArrayType(T.BYTE, 32)
}));
T.ENUMLOGFONTEXW = Struct('', {
    elfLogFont: T.LOGFONTW,
    elfFullName: ArrayType(T.WCHAR, 64),
    elfStyle: ArrayType(T.WCHAR, 32),
    elfScript: ArrayType(T.WCHAR, 32)
});
T.LPENUMLOGFONTEXW = Pointer(Struct('', {
    elfLogFont: T.LOGFONTW,
    elfFullName: ArrayType(T.WCHAR, 64),
    elfStyle: ArrayType(T.WCHAR, 32),
    elfScript: ArrayType(T.WCHAR, 32)
}));
T.ENUMLOGFONTEX = T.ENUMLOGFONTEXA;
T.LPENUMLOGFONTEX = T.LPENUMLOGFONTEXA;
T.DESIGNVECTOR = Struct('', {
    dvReserved: T.DWORD,
    dvNumAxes: T.DWORD,
    dvValues: ArrayType(T.LONG, 16)
});
T.PDESIGNVECTOR = Pointer(Struct('', {
    dvReserved: T.DWORD,
    dvNumAxes: T.DWORD,
    dvValues: ArrayType(T.LONG, 16)
}));
T.ENUMLOGFONTEXDVA = Struct('', {
    elfEnumLogfontEx: T.ENUMLOGFONTEXA,
    elfDesignVector: T.DESIGNVECTOR
});
T.PENUMLOGFONTEXDVA = Pointer(Struct('', {
    elfEnumLogfontEx: T.ENUMLOGFONTEXA,
    elfDesignVector: T.DESIGNVECTOR
}));
T.ENUMLOGFONTEXDVW = Struct('', {
    elfEnumLogfontEx: T.ENUMLOGFONTEXW,
    elfDesignVector: T.DESIGNVECTOR
});
T.PENUMLOGFONTEXDVW = Pointer(Struct('', {
    elfEnumLogfontEx: T.ENUMLOGFONTEXW,
    elfDesignVector: T.DESIGNVECTOR
}));
T.ENUMLOGFONTEXDV = T.ENUMLOGFONTEXDVA;
T.PENUMLOGFONTEXDV = T.PENUMLOGFONTEXDVA;
T.FONTSIGNATURE = Struct('', {
    fsUsb: ArrayType(T.DWORD, 4),
    fsCsb: ArrayType(T.DWORD, 2)
});
T.PFONTSIGNATURE = Pointer(Struct('', {
    fsUsb: ArrayType(T.DWORD, 4),
    fsCsb: ArrayType(T.DWORD, 2)
}));
T.LPFONTSIGNATURE = Pointer(Struct('', {
    fsUsb: ArrayType(T.DWORD, 4),
    fsCsb: ArrayType(T.DWORD, 2)
}));
T.CHARSETINFO = Struct('', {
    ciCharset: T.UINT,
    ciACP: T.UINT,
    fs: T.FONTSIGNATURE
});
T.PCHARSETINFO = Pointer(Struct('', {
    ciCharset: T.UINT,
    ciACP: T.UINT,
    fs: T.FONTSIGNATURE
}));
T.LPCHARSETINFO = Pointer(Struct('', {
    ciCharset: T.UINT,
    ciACP: T.UINT,
    fs: T.FONTSIGNATURE
}));
T.LOCALESIGNATURE = Struct('', {
    lsUsb: ArrayType(T.DWORD, 4),
    lsCsbDefault: ArrayType(T.DWORD, 2),
    lsCsbSupported: ArrayType(T.DWORD, 2)
});
T.PLOCALESIGNATURE = Pointer(Struct('', {
    lsUsb: ArrayType(T.DWORD, 4),
    lsCsbDefault: ArrayType(T.DWORD, 2),
    lsCsbSupported: ArrayType(T.DWORD, 2)
}));
T.LPLOCALESIGNATURE = Pointer(Struct('', {
    lsUsb: ArrayType(T.DWORD, 4),
    lsCsbDefault: ArrayType(T.DWORD, 2),
    lsCsbSupported: ArrayType(T.DWORD, 2)
}));
T.XFORM = Struct('tagXFORM', {
    eM11: T.FLOAT,
    eM12: T.FLOAT,
    eM21: T.FLOAT,
    eM22: T.FLOAT,
    eDx: T.FLOAT,
    eDy: T.FLOAT
});
T.PXFORM = Pointer(Struct('tagXFORM', {
    eM11: T.FLOAT,
    eM12: T.FLOAT,
    eM21: T.FLOAT,
    eM22: T.FLOAT,
    eDx: T.FLOAT,
    eDy: T.FLOAT
}));
T.LPXFORM = Pointer(Struct('tagXFORM', {
    eM11: T.FLOAT,
    eM12: T.FLOAT,
    eM21: T.FLOAT,
    eM22: T.FLOAT,
    eDx: T.FLOAT,
    eDy: T.FLOAT
}));
T.TEXTMETRICA = Struct('tagTEXTMETRICA', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.BYTE,
    tmLastChar: T.BYTE,
    tmDefaultChar: T.BYTE,
    tmBreakChar: T.BYTE,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE
});
T.LPTEXTMETRICA = Pointer(Struct('tagTEXTMETRICA', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.BYTE,
    tmLastChar: T.BYTE,
    tmDefaultChar: T.BYTE,
    tmBreakChar: T.BYTE,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE
}));
T.PTEXTMETRICA = Pointer(Struct('tagTEXTMETRICA', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.BYTE,
    tmLastChar: T.BYTE,
    tmDefaultChar: T.BYTE,
    tmBreakChar: T.BYTE,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE
}));
T.TEXTMETRICW = Struct('tagTEXTMETRICW', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.WCHAR,
    tmLastChar: T.WCHAR,
    tmDefaultChar: T.WCHAR,
    tmBreakChar: T.WCHAR,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE
});
T.LPTEXTMETRICW = Pointer(Struct('tagTEXTMETRICW', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.WCHAR,
    tmLastChar: T.WCHAR,
    tmDefaultChar: T.WCHAR,
    tmBreakChar: T.WCHAR,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE
}));
T.PTEXTMETRICW = Pointer(Struct('tagTEXTMETRICW', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.WCHAR,
    tmLastChar: T.WCHAR,
    tmDefaultChar: T.WCHAR,
    tmBreakChar: T.WCHAR,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE
}));
T.TEXTMETRIC = T.TEXTMETRICA;
T.PTEXTMETRIC = T.PTEXTMETRICA;
T.LPTEXTMETRIC = T.LPTEXTMETRICA;
T.PANOSE = Struct('tagPANOSE', {
    bFamilyType: T.BYTE,
    bSerifStyle: T.BYTE,
    bWeight: T.BYTE,
    bProportion: T.BYTE,
    bContrast: T.BYTE,
    bStrokeVariation: T.BYTE,
    bArmStyle: T.BYTE,
    bLetterform: T.BYTE,
    bMidline: T.BYTE,
    bXHeight: T.BYTE
});
T.LPPANOSE = Pointer(Struct('tagPANOSE', {
    bFamilyType: T.BYTE,
    bSerifStyle: T.BYTE,
    bWeight: T.BYTE,
    bProportion: T.BYTE,
    bContrast: T.BYTE,
    bStrokeVariation: T.BYTE,
    bArmStyle: T.BYTE,
    bLetterform: T.BYTE,
    bMidline: T.BYTE,
    bXHeight: T.BYTE
}));
T.EXTLOGFONTA = Struct('', {
    elfLogFont: T.LOGFONTA,
    elfFullName: ArrayType(T.BYTE, 64),
    elfStyle: ArrayType(T.BYTE, 32),
    elfVersion: T.DWORD,
    elfStyleSize: T.DWORD,
    elfMatch: T.DWORD,
    elfReserved: T.DWORD,
    elfVendorId: ArrayType(T.BYTE, 4),
    elfCulture: T.DWORD,
    elfPanose: T.PANOSE
});
T.PEXTLOGFONTA = Pointer(Struct('', {
    elfLogFont: T.LOGFONTA,
    elfFullName: ArrayType(T.BYTE, 64),
    elfStyle: ArrayType(T.BYTE, 32),
    elfVersion: T.DWORD,
    elfStyleSize: T.DWORD,
    elfMatch: T.DWORD,
    elfReserved: T.DWORD,
    elfVendorId: ArrayType(T.BYTE, 4),
    elfCulture: T.DWORD,
    elfPanose: T.PANOSE
}));
T.LPEXTLOGFONTA = Pointer(Struct('', {
    elfLogFont: T.LOGFONTA,
    elfFullName: ArrayType(T.BYTE, 64),
    elfStyle: ArrayType(T.BYTE, 32),
    elfVersion: T.DWORD,
    elfStyleSize: T.DWORD,
    elfMatch: T.DWORD,
    elfReserved: T.DWORD,
    elfVendorId: ArrayType(T.BYTE, 4),
    elfCulture: T.DWORD,
    elfPanose: T.PANOSE
}));
T.EXTLOGFONTW = Struct('', {
    elfLogFont: T.LOGFONTW,
    elfFullName: ArrayType(T.WCHAR, 64),
    elfStyle: ArrayType(T.WCHAR, 32),
    elfVersion: T.DWORD,
    elfStyleSize: T.DWORD,
    elfMatch: T.DWORD,
    elfReserved: T.DWORD,
    elfVendorId: ArrayType(T.BYTE, 4),
    elfCulture: T.DWORD,
    elfPanose: T.PANOSE
});
T.PEXTLOGFONTW = Pointer(Struct('', {
    elfLogFont: T.LOGFONTW,
    elfFullName: ArrayType(T.WCHAR, 64),
    elfStyle: ArrayType(T.WCHAR, 32),
    elfVersion: T.DWORD,
    elfStyleSize: T.DWORD,
    elfMatch: T.DWORD,
    elfReserved: T.DWORD,
    elfVendorId: ArrayType(T.BYTE, 4),
    elfCulture: T.DWORD,
    elfPanose: T.PANOSE
}));
T.LPEXTLOGFONTW = Pointer(Struct('', {
    elfLogFont: T.LOGFONTW,
    elfFullName: ArrayType(T.WCHAR, 64),
    elfStyle: ArrayType(T.WCHAR, 32),
    elfVersion: T.DWORD,
    elfStyleSize: T.DWORD,
    elfMatch: T.DWORD,
    elfReserved: T.DWORD,
    elfVendorId: ArrayType(T.BYTE, 4),
    elfCulture: T.DWORD,
    elfPanose: T.PANOSE
}));
T.EXTLOGFONT = T.EXTLOGFONTA;
T.PEXTLOGFONT = T.PEXTLOGFONTA;
T.LPEXTLOGFONT = T.LPEXTLOGFONTA;
T.OUTLINETEXTMETRICA = Struct('_OUTLINETEXTMETRICA', {
    otmSize: T.UINT,
    otmTextMetrics: T.TEXTMETRICA,
    otmFiller: T.BYTE,
    otmPanoseNumber: T.PANOSE,
    otmfsSelection: T.UINT,
    otmfsType: T.UINT,
    otmsCharSlopeRise: T.INT,
    otmsCharSlopeRun: T.INT,
    otmItalicAngle: T.INT,
    otmEMSquare: T.UINT,
    otmAscent: T.INT,
    otmDescent: T.INT,
    otmLineGap: T.UINT,
    otmsCapEmHeight: T.UINT,
    otmsXHeight: T.UINT,
    otmrcFontBox: T.RECT,
    otmMacAscent: T.INT,
    otmMacDescent: T.INT,
    otmMacLineGap: T.UINT,
    otmusMinimumPPEM: T.UINT,
    otmptSubscriptSize: T.POINT,
    otmptSubscriptOffset: T.POINT,
    otmptSuperscriptSize: T.POINT,
    otmptSuperscriptOffset: T.POINT,
    otmsStrikeoutSize: T.UINT,
    otmsStrikeoutPosition: T.INT,
    otmsUnderscoreSize: T.INT,
    otmsUnderscorePosition: T.INT,
    otmpFamilyName: T.LPSTR,
    otmpFaceName: T.LPSTR,
    otmpStyleName: T.LPSTR,
    otmpFullName: T.LPSTR
});
T.POUTLINETEXTMETRICA = Pointer(Struct('_OUTLINETEXTMETRICA', {
    otmSize: T.UINT,
    otmTextMetrics: T.TEXTMETRICA,
    otmFiller: T.BYTE,
    otmPanoseNumber: T.PANOSE,
    otmfsSelection: T.UINT,
    otmfsType: T.UINT,
    otmsCharSlopeRise: T.INT,
    otmsCharSlopeRun: T.INT,
    otmItalicAngle: T.INT,
    otmEMSquare: T.UINT,
    otmAscent: T.INT,
    otmDescent: T.INT,
    otmLineGap: T.UINT,
    otmsCapEmHeight: T.UINT,
    otmsXHeight: T.UINT,
    otmrcFontBox: T.RECT,
    otmMacAscent: T.INT,
    otmMacDescent: T.INT,
    otmMacLineGap: T.UINT,
    otmusMinimumPPEM: T.UINT,
    otmptSubscriptSize: T.POINT,
    otmptSubscriptOffset: T.POINT,
    otmptSuperscriptSize: T.POINT,
    otmptSuperscriptOffset: T.POINT,
    otmsStrikeoutSize: T.UINT,
    otmsStrikeoutPosition: T.INT,
    otmsUnderscoreSize: T.INT,
    otmsUnderscorePosition: T.INT,
    otmpFamilyName: T.LPSTR,
    otmpFaceName: T.LPSTR,
    otmpStyleName: T.LPSTR,
    otmpFullName: T.LPSTR
}));
T.LPOUTLINETEXTMETRICA = Pointer(Struct('_OUTLINETEXTMETRICA', {
    otmSize: T.UINT,
    otmTextMetrics: T.TEXTMETRICA,
    otmFiller: T.BYTE,
    otmPanoseNumber: T.PANOSE,
    otmfsSelection: T.UINT,
    otmfsType: T.UINT,
    otmsCharSlopeRise: T.INT,
    otmsCharSlopeRun: T.INT,
    otmItalicAngle: T.INT,
    otmEMSquare: T.UINT,
    otmAscent: T.INT,
    otmDescent: T.INT,
    otmLineGap: T.UINT,
    otmsCapEmHeight: T.UINT,
    otmsXHeight: T.UINT,
    otmrcFontBox: T.RECT,
    otmMacAscent: T.INT,
    otmMacDescent: T.INT,
    otmMacLineGap: T.UINT,
    otmusMinimumPPEM: T.UINT,
    otmptSubscriptSize: T.POINT,
    otmptSubscriptOffset: T.POINT,
    otmptSuperscriptSize: T.POINT,
    otmptSuperscriptOffset: T.POINT,
    otmsStrikeoutSize: T.UINT,
    otmsStrikeoutPosition: T.INT,
    otmsUnderscoreSize: T.INT,
    otmsUnderscorePosition: T.INT,
    otmpFamilyName: T.LPSTR,
    otmpFaceName: T.LPSTR,
    otmpStyleName: T.LPSTR,
    otmpFullName: T.LPSTR
}));
T.OUTLINETEXTMETRICW = Struct('_OUTLINETEXTMETRICW', {
    otmSize: T.UINT,
    otmTextMetrics: T.TEXTMETRICW,
    otmFiller: T.BYTE,
    otmPanoseNumber: T.PANOSE,
    otmfsSelection: T.UINT,
    otmfsType: T.UINT,
    otmsCharSlopeRise: T.INT,
    otmsCharSlopeRun: T.INT,
    otmItalicAngle: T.INT,
    otmEMSquare: T.UINT,
    otmAscent: T.INT,
    otmDescent: T.INT,
    otmLineGap: T.UINT,
    otmsCapEmHeight: T.UINT,
    otmsXHeight: T.UINT,
    otmrcFontBox: T.RECT,
    otmMacAscent: T.INT,
    otmMacDescent: T.INT,
    otmMacLineGap: T.UINT,
    otmusMinimumPPEM: T.UINT,
    otmptSubscriptSize: T.POINT,
    otmptSubscriptOffset: T.POINT,
    otmptSuperscriptSize: T.POINT,
    otmptSuperscriptOffset: T.POINT,
    otmsStrikeoutSize: T.UINT,
    otmsStrikeoutPosition: T.INT,
    otmsUnderscoreSize: T.INT,
    otmsUnderscorePosition: T.INT,
    otmpFamilyName: T.LPSTR,
    otmpFaceName: T.LPSTR,
    otmpStyleName: T.LPSTR,
    otmpFullName: T.LPSTR
});
T.POUTLINETEXTMETRICW = Pointer(Struct('_OUTLINETEXTMETRICW', {
    otmSize: T.UINT,
    otmTextMetrics: T.TEXTMETRICW,
    otmFiller: T.BYTE,
    otmPanoseNumber: T.PANOSE,
    otmfsSelection: T.UINT,
    otmfsType: T.UINT,
    otmsCharSlopeRise: T.INT,
    otmsCharSlopeRun: T.INT,
    otmItalicAngle: T.INT,
    otmEMSquare: T.UINT,
    otmAscent: T.INT,
    otmDescent: T.INT,
    otmLineGap: T.UINT,
    otmsCapEmHeight: T.UINT,
    otmsXHeight: T.UINT,
    otmrcFontBox: T.RECT,
    otmMacAscent: T.INT,
    otmMacDescent: T.INT,
    otmMacLineGap: T.UINT,
    otmusMinimumPPEM: T.UINT,
    otmptSubscriptSize: T.POINT,
    otmptSubscriptOffset: T.POINT,
    otmptSuperscriptSize: T.POINT,
    otmptSuperscriptOffset: T.POINT,
    otmsStrikeoutSize: T.UINT,
    otmsStrikeoutPosition: T.INT,
    otmsUnderscoreSize: T.INT,
    otmsUnderscorePosition: T.INT,
    otmpFamilyName: T.LPSTR,
    otmpFaceName: T.LPSTR,
    otmpStyleName: T.LPSTR,
    otmpFullName: T.LPSTR
}));
T.LPOUTLINETEXTMETRICW = Pointer(Struct('_OUTLINETEXTMETRICW', {
    otmSize: T.UINT,
    otmTextMetrics: T.TEXTMETRICW,
    otmFiller: T.BYTE,
    otmPanoseNumber: T.PANOSE,
    otmfsSelection: T.UINT,
    otmfsType: T.UINT,
    otmsCharSlopeRise: T.INT,
    otmsCharSlopeRun: T.INT,
    otmItalicAngle: T.INT,
    otmEMSquare: T.UINT,
    otmAscent: T.INT,
    otmDescent: T.INT,
    otmLineGap: T.UINT,
    otmsCapEmHeight: T.UINT,
    otmsXHeight: T.UINT,
    otmrcFontBox: T.RECT,
    otmMacAscent: T.INT,
    otmMacDescent: T.INT,
    otmMacLineGap: T.UINT,
    otmusMinimumPPEM: T.UINT,
    otmptSubscriptSize: T.POINT,
    otmptSubscriptOffset: T.POINT,
    otmptSuperscriptSize: T.POINT,
    otmptSuperscriptOffset: T.POINT,
    otmsStrikeoutSize: T.UINT,
    otmsStrikeoutPosition: T.INT,
    otmsUnderscoreSize: T.INT,
    otmsUnderscorePosition: T.INT,
    otmpFamilyName: T.LPSTR,
    otmpFaceName: T.LPSTR,
    otmpStyleName: T.LPSTR,
    otmpFullName: T.LPSTR
}));
T.OUTLINETEXTMETRIC = T.OUTLINETEXTMETRICA;
T.POUTLINETEXTMETRIC = T.POUTLINETEXTMETRICA;
T.LPOUTLINETEXTMETRIC = T.LPOUTLINETEXTMETRICA;
T.POLYTEXTA = Struct('', {
    x: T.INT,
    y: T.INT,
    n: T.UINT,
    lpstr: T.LPCSTR,
    uiFlags: T.UINT,
    rcl: T.RECT,
    pdx: Pointer(T.INT)
});
T.PPOLYTEXTA = Pointer(Struct('', {
    x: T.INT,
    y: T.INT,
    n: T.UINT,
    lpstr: T.LPCSTR,
    uiFlags: T.UINT,
    rcl: T.RECT,
    pdx: Pointer(T.INT)
}));
T.LPPOLYTEXTA = Pointer(Struct('', {
    x: T.INT,
    y: T.INT,
    n: T.UINT,
    lpstr: T.LPCSTR,
    uiFlags: T.UINT,
    rcl: T.RECT,
    pdx: Pointer(T.INT)
}));
T.POLYTEXTW = Struct('', {
    x: T.INT,
    y: T.INT,
    n: T.UINT,
    lpstr: T.LPCWSTR,
    uiFlags: T.UINT,
    rcl: T.RECT,
    pdx: Pointer(T.INT)
});
T.PPOLYTEXTW = Pointer(Struct('', {
    x: T.INT,
    y: T.INT,
    n: T.UINT,
    lpstr: T.LPCWSTR,
    uiFlags: T.UINT,
    rcl: T.RECT,
    pdx: Pointer(T.INT)
}));
T.LPPOLYTEXTW = Pointer(Struct('', {
    x: T.INT,
    y: T.INT,
    n: T.UINT,
    lpstr: T.LPCWSTR,
    uiFlags: T.UINT,
    rcl: T.RECT,
    pdx: Pointer(T.INT)
}));
T.POLYTEXT = T.POLYTEXTA;
T.PPOLYTEXT = T.PPOLYTEXTA;
T.LPPOLYTEXT = T.LPPOLYTEXTA;
T.NEWTEXTMETRICA = Struct('', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.BYTE,
    tmLastChar: T.BYTE,
    tmDefaultChar: T.BYTE,
    tmBreakChar: T.BYTE,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE,
    ntmFlags: T.DWORD,
    ntmSizeEM: T.UINT,
    ntmCellHeight: T.UINT,
    ntmAvgWidth: T.UINT
});
T.PNEWTEXTMETRICA = Pointer(Struct('', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.BYTE,
    tmLastChar: T.BYTE,
    tmDefaultChar: T.BYTE,
    tmBreakChar: T.BYTE,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE,
    ntmFlags: T.DWORD,
    ntmSizeEM: T.UINT,
    ntmCellHeight: T.UINT,
    ntmAvgWidth: T.UINT
}));
T.LPNEWTEXTMETRICA = Pointer(Struct('', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.BYTE,
    tmLastChar: T.BYTE,
    tmDefaultChar: T.BYTE,
    tmBreakChar: T.BYTE,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE,
    ntmFlags: T.DWORD,
    ntmSizeEM: T.UINT,
    ntmCellHeight: T.UINT,
    ntmAvgWidth: T.UINT
}));
T.NEWTEXTMETRICW = Struct('', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.WCHAR,
    tmLastChar: T.WCHAR,
    tmDefaultChar: T.WCHAR,
    tmBreakChar: T.WCHAR,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE,
    ntmFlags: T.DWORD,
    ntmSizeEM: T.UINT,
    ntmCellHeight: T.UINT,
    ntmAvgWidth: T.UINT
});
T.PNEWTEXTMETRICW = Pointer(Struct('', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.WCHAR,
    tmLastChar: T.WCHAR,
    tmDefaultChar: T.WCHAR,
    tmBreakChar: T.WCHAR,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE,
    ntmFlags: T.DWORD,
    ntmSizeEM: T.UINT,
    ntmCellHeight: T.UINT,
    ntmAvgWidth: T.UINT
}));
T.LPNEWTEXTMETRICW = Pointer(Struct('', {
    tmHeight: T.LONG,
    tmAscent: T.LONG,
    tmDescent: T.LONG,
    tmInternalLeading: T.LONG,
    tmExternalLeading: T.LONG,
    tmAveCharWidth: T.LONG,
    tmMaxCharWidth: T.LONG,
    tmWeight: T.LONG,
    tmOverhang: T.LONG,
    tmDigitizedAspectX: T.LONG,
    tmDigitizedAspectY: T.LONG,
    tmFirstChar: T.WCHAR,
    tmLastChar: T.WCHAR,
    tmDefaultChar: T.WCHAR,
    tmBreakChar: T.WCHAR,
    tmItalic: T.BYTE,
    tmUnderlined: T.BYTE,
    tmStruckOut: T.BYTE,
    tmPitchAndFamily: T.BYTE,
    tmCharSet: T.BYTE,
    ntmFlags: T.DWORD,
    ntmSizeEM: T.UINT,
    ntmCellHeight: T.UINT,
    ntmAvgWidth: T.UINT
}));
T.NEWTEXTMETRIC = T.NEWTEXTMETRICA;
T.PNEWTEXTMETRIC = T.PNEWTEXTMETRICA;
T.LPNEWTEXTMETRIC = T.LPNEWTEXTMETRICA;
T.NEWTEXTMETRICEXA = Struct('', {
    ntmTm: T.NEWTEXTMETRICA,
    ntmFontSig: T.FONTSIGNATURE
});
T.NEWTEXTMETRICEXW = Struct('', {
    ntmTm: T.NEWTEXTMETRICW,
    ntmFontSig: T.FONTSIGNATURE
});
T.NEWTEXTMETRICEX = T.NEWTEXTMETRICEXA;
T.OLDFONTENUMPROCA = Pointer(Fn(T.i32, [[Pointer(T.LOGFONTA)], [Pointer(T.TEXTMETRICA)], [T.DWORD], [T.LPARAM]]));
T.OLDFONTENUMPROCW = Pointer(Fn(T.i32, [[Pointer(T.LOGFONTW)], [Pointer(T.TEXTMETRICW)], [T.DWORD], [T.LPARAM]]));
T.OLDFONTENUMPROC = T.OLDFONTENUMPROCA;
T.FONTENUMPROCA = T.OLDFONTENUMPROCA;
T.FONTENUMPROCW = T.OLDFONTENUMPROCW;
T.FONTENUMPROC = T.FONTENUMPROCA;
T.GOBJENUMPROC = Pointer(Fn(T.INT, [[T.LPVOID], [T.LPARAM]]));
T.LINEDDAPROC = Pointer(Fn(null, [[T.INT], [T.INT], [T.LPARAM]]));
T.GLYPHMETRICS = Struct('', {
    gmBlackBoxX: T.UINT,
    gmBlackBoxY: T.UINT,
    gmptGlyphOrigin: T.POINT,
    gmCellIncX: T.SHORT,
    gmCellIncY: T.SHORT
});
T.LPGLYPHMETRICS = Pointer(Struct('', {
    gmBlackBoxX: T.UINT,
    gmBlackBoxY: T.UINT,
    gmptGlyphOrigin: T.POINT,
    gmCellIncX: T.SHORT,
    gmCellIncY: T.SHORT
}));
T.FIXED = Struct('', {
    fract: T.WORD,
    value: T.SHORT
});
T.POINTFX = Struct('tagPOINTFX', {
    x: T.FIXED,
    y: T.FIXED
});
T.LPPOINTFX = Pointer(Struct('tagPOINTFX', {
    x: T.FIXED,
    y: T.FIXED
}));
T.TTPOLYCURVE = Struct('tagTTPOLYCURVE', {
    wType: T.WORD,
    cpfx: T.WORD,
    apfx: ArrayType(T.POINTFX, 1)
});
T.LPTTPOLYCURVE = Pointer(Struct('tagTTPOLYCURVE', {
    wType: T.WORD,
    cpfx: T.WORD,
    apfx: ArrayType(T.POINTFX, 1)
}));
T.TTPOLYGONHEADER = Struct('tagTTPOLYGONHEADER', {
    cb: T.DWORD,
    dwType: T.DWORD,
    pfxStart: T.POINTFX
});
T.LPTTPOLYGONHEADER = Pointer(Struct('tagTTPOLYGONHEADER', {
    cb: T.DWORD,
    dwType: T.DWORD,
    pfxStart: T.POINTFX
}));
T.MAT2 = Struct('', {
    eM11: T.FIXED,
    eM12: T.FIXED,
    eM21: T.FIXED,
    eM22: T.FIXED
});
T.LPMAT2 = Pointer(Struct('', {
    eM11: T.FIXED,
    eM12: T.FIXED,
    eM21: T.FIXED,
    eM22: T.FIXED
}));
T.ABC = Struct('', {
    abcA: T.INT,
    abcB: T.UINT,
    abcC: T.INT
});
T.PABC = Pointer(Struct('', {
    abcA: T.INT,
    abcB: T.UINT,
    abcC: T.INT
}));
T.LPABC = Pointer(Struct('', {
    abcA: T.INT,
    abcB: T.UINT,
    abcC: T.INT
}));
T.GCP_RESULTSA = Struct('tagGCP_RESULTSA', {
    lStructSize: T.DWORD,
    lpOutString: T.LPSTR,
    lpOrder: Pointer(T.UINT),
    lpDx: Pointer(T.INT),
    lpCaretPos: Pointer(T.INT),
    lpClass: T.LPSTR,
    lpGlyphs: T.LPWSTR,
    nGlyphs: T.UINT,
    nMaxFit: T.UINT
});
T.LPGCP_RESULTSA = Pointer(Struct('tagGCP_RESULTSA', {
    lStructSize: T.DWORD,
    lpOutString: T.LPSTR,
    lpOrder: Pointer(T.UINT),
    lpDx: Pointer(T.INT),
    lpCaretPos: Pointer(T.INT),
    lpClass: T.LPSTR,
    lpGlyphs: T.LPWSTR,
    nGlyphs: T.UINT,
    nMaxFit: T.UINT
}));
T.GCP_RESULTSW = Struct('tagGCP_RESULTSW', {
    lStructSize: T.DWORD,
    lpOutString: T.LPWSTR,
    lpOrder: Pointer(T.UINT),
    lpDx: Pointer(T.INT),
    lpCaretPos: Pointer(T.INT),
    lpClass: T.LPSTR,
    lpGlyphs: T.LPWSTR,
    nGlyphs: T.UINT,
    nMaxFit: T.UINT
});
T.LPGCP_RESULTSW = Pointer(Struct('tagGCP_RESULTSW', {
    lStructSize: T.DWORD,
    lpOutString: T.LPWSTR,
    lpOrder: Pointer(T.UINT),
    lpDx: Pointer(T.INT),
    lpCaretPos: Pointer(T.INT),
    lpClass: T.LPSTR,
    lpGlyphs: T.LPWSTR,
    nGlyphs: T.UINT,
    nMaxFit: T.UINT
}));
T.GCP_RESULTS = T.GCP_RESULTSA;
T.LPGCP_RESULTS = T.LPGCP_RESULTSA;
T.RASTERIZER_STATUS = Struct('', {
    nSize: T.SHORT,
    wFlags: T.SHORT,
    nLanguageID: T.SHORT
});
T.LPRASTERIZER_STATUS = Pointer(Struct('', {
    nSize: T.SHORT,
    wFlags: T.SHORT,
    nLanguageID: T.SHORT
}));
T.POINTFLOAT = Struct('', {
    x: T.FLOAT,
    y: T.FLOAT
});
T.PPOINTFLOAT = Pointer(Struct('', {
    x: T.FLOAT,
    y: T.FLOAT
}));
T.GLYPHMETRICSFLOAT = Struct('', {
    gmfBlackBoxX: T.FLOAT,
    gmfBlackBoxY: T.FLOAT,
    gmfptGlyphOrigin: T.POINTFLOAT,
    gmfCellIncX: T.FLOAT,
    gmfCellIncY: T.FLOAT
});
T.PGLYPHMETRICSFLOAT = Pointer(Struct('', {
    gmfBlackBoxX: T.FLOAT,
    gmfBlackBoxY: T.FLOAT,
    gmfptGlyphOrigin: T.POINTFLOAT,
    gmfCellIncX: T.FLOAT,
    gmfCellIncY: T.FLOAT
}));
T.LPGLYPHMETRICSFLOAT = Pointer(Struct('', {
    gmfBlackBoxX: T.FLOAT,
    gmfBlackBoxY: T.FLOAT,
    gmfptGlyphOrigin: T.POINTFLOAT,
    gmfCellIncX: T.FLOAT,
    gmfCellIncY: T.FLOAT
}));
T.LAYERPLANEDESCRIPTOR = Struct('', {
    nSize: T.WORD,
    nVersion: T.WORD,
    dwFlags: T.DWORD,
    iPixelType: T.BYTE,
    cColorBits: T.BYTE,
    cRedBits: T.BYTE,
    cRedShift: T.BYTE,
    cGreenBits: T.BYTE,
    cGreenShift: T.BYTE,
    cBlueBits: T.BYTE,
    cBlueShift: T.BYTE,
    cAlphaBits: T.BYTE,
    cAlphaShift: T.BYTE,
    cAccumBits: T.BYTE,
    cAccumRedBits: T.BYTE,
    cAccumGreenBits: T.BYTE,
    cAccumBlueBits: T.BYTE,
    cAccumAlphaBits: T.BYTE,
    cDepthBits: T.BYTE,
    cStencilBits: T.BYTE,
    cAuxBuffers: T.BYTE,
    iLayerPlane: T.BYTE,
    bReserved: T.BYTE,
    crTransparent: T.COLORREF
});
T.PLAYERPLANEDESCRIPTOR = Pointer(Struct('', {
    nSize: T.WORD,
    nVersion: T.WORD,
    dwFlags: T.DWORD,
    iPixelType: T.BYTE,
    cColorBits: T.BYTE,
    cRedBits: T.BYTE,
    cRedShift: T.BYTE,
    cGreenBits: T.BYTE,
    cGreenShift: T.BYTE,
    cBlueBits: T.BYTE,
    cBlueShift: T.BYTE,
    cAlphaBits: T.BYTE,
    cAlphaShift: T.BYTE,
    cAccumBits: T.BYTE,
    cAccumRedBits: T.BYTE,
    cAccumGreenBits: T.BYTE,
    cAccumBlueBits: T.BYTE,
    cAccumAlphaBits: T.BYTE,
    cDepthBits: T.BYTE,
    cStencilBits: T.BYTE,
    cAuxBuffers: T.BYTE,
    iLayerPlane: T.BYTE,
    bReserved: T.BYTE,
    crTransparent: T.COLORREF
}));
T.LPLAYERPLANEDESCRIPTOR = Pointer(Struct('', {
    nSize: T.WORD,
    nVersion: T.WORD,
    dwFlags: T.DWORD,
    iPixelType: T.BYTE,
    cColorBits: T.BYTE,
    cRedBits: T.BYTE,
    cRedShift: T.BYTE,
    cGreenBits: T.BYTE,
    cGreenShift: T.BYTE,
    cBlueBits: T.BYTE,
    cBlueShift: T.BYTE,
    cAlphaBits: T.BYTE,
    cAlphaShift: T.BYTE,
    cAccumBits: T.BYTE,
    cAccumRedBits: T.BYTE,
    cAccumGreenBits: T.BYTE,
    cAccumBlueBits: T.BYTE,
    cAccumAlphaBits: T.BYTE,
    cDepthBits: T.BYTE,
    cStencilBits: T.BYTE,
    cAuxBuffers: T.BYTE,
    iLayerPlane: T.BYTE,
    bReserved: T.BYTE,
    crTransparent: T.COLORREF
}));
T.PALETTEENTRY = Struct('tagPALETTEENTRY', {
    peRed: T.BYTE,
    peGreen: T.BYTE,
    peBlue: T.BYTE,
    peFlags: T.BYTE
});
T.PPALETTEENTRY = Pointer(Struct('tagPALETTEENTRY', {
    peRed: T.BYTE,
    peGreen: T.BYTE,
    peBlue: T.BYTE,
    peFlags: T.BYTE
}));
T.LPPALETTEENTRY = Pointer(Struct('tagPALETTEENTRY', {
    peRed: T.BYTE,
    peGreen: T.BYTE,
    peBlue: T.BYTE,
    peFlags: T.BYTE
}));
T.LOGPALETTE = Struct('tagLOGPALETTE', {
    palVersion: T.WORD,
    palNumEntries: T.WORD,
    palPalEntry: ArrayType(T.PALETTEENTRY, 1)
});
T.PLOGPALETTE = Pointer(Struct('tagLOGPALETTE', {
    palVersion: T.WORD,
    palNumEntries: T.WORD,
    palPalEntry: ArrayType(T.PALETTEENTRY, 1)
}));
T.LPLOGPALETTE = Pointer(Struct('tagLOGPALETTE', {
    palVersion: T.WORD,
    palNumEntries: T.WORD,
    palPalEntry: ArrayType(T.PALETTEENTRY, 1)
}));
T.NPLOGPALETTE = Pointer(Struct('tagLOGPALETTE', {
    palVersion: T.WORD,
    palNumEntries: T.WORD,
    palPalEntry: ArrayType(T.PALETTEENTRY, 1)
}));
T.LOGPEN = Struct('', {
    lopnStyle: T.UINT,
    lopnWidth: T.POINT,
    lopnColor: T.COLORREF
});
T.LPLOGPEN = Pointer(Struct('', {
    lopnStyle: T.UINT,
    lopnWidth: T.POINT,
    lopnColor: T.COLORREF
}));
T.EXTLOGPEN = Struct('tagEXTLOGPEN', {
    elpPenStyle: T.DWORD,
    elpWidth: T.DWORD,
    elpBrushStyle: T.UINT,
    elpColor: T.COLORREF,
    elpHatch: T.ULONG_PTR,
    elpNumEntries: T.DWORD,
    elpStyleEntry: ArrayType(T.DWORD, 1)
});
T.PEXTLOGPEN = Pointer(Struct('tagEXTLOGPEN', {
    elpPenStyle: T.DWORD,
    elpWidth: T.DWORD,
    elpBrushStyle: T.UINT,
    elpColor: T.COLORREF,
    elpHatch: T.ULONG_PTR,
    elpNumEntries: T.DWORD,
    elpStyleEntry: ArrayType(T.DWORD, 1)
}));
T.NPEXTLOGPEN = Pointer(Struct('tagEXTLOGPEN', {
    elpPenStyle: T.DWORD,
    elpWidth: T.DWORD,
    elpBrushStyle: T.UINT,
    elpColor: T.COLORREF,
    elpHatch: T.ULONG_PTR,
    elpNumEntries: T.DWORD,
    elpStyleEntry: ArrayType(T.DWORD, 1)
}));
T.LPEXTLOGPEN = Pointer(Struct('tagEXTLOGPEN', {
    elpPenStyle: T.DWORD,
    elpWidth: T.DWORD,
    elpBrushStyle: T.UINT,
    elpColor: T.COLORREF,
    elpHatch: T.ULONG_PTR,
    elpNumEntries: T.DWORD,
    elpStyleEntry: ArrayType(T.DWORD, 1)
}));
T.RGBQUAD = Struct('tagRGBQUAD', {
    rgbBlue: T.BYTE,
    rgbGreen: T.BYTE,
    rgbRed: T.BYTE,
    rgbReserved: T.BYTE
});
T.LPRGBQUAD = Pointer(Struct('tagRGBQUAD', {
    rgbBlue: T.BYTE,
    rgbGreen: T.BYTE,
    rgbRed: T.BYTE,
    rgbReserved: T.BYTE
}));
T.RGBTRIPLE = Struct('tagRGBTRIPLE', {
    rgbtBlue: T.BYTE,
    rgbtGreen: T.BYTE,
    rgbtRed: T.BYTE
});
T.BITMAPFILEHEADER = Struct('', {
    bfType: T.WORD,
    bfSize: T.DWORD,
    bfReserved1: T.WORD,
    bfReserved2: T.WORD,
    bfOffBits: T.DWORD
});
T.PBITMAPFILEHEADER = Pointer(Struct('', {
    bfType: T.WORD,
    bfSize: T.DWORD,
    bfReserved1: T.WORD,
    bfReserved2: T.WORD,
    bfOffBits: T.DWORD
}));
T.LPBITMAPFILEHEADER = Pointer(Struct('', {
    bfType: T.WORD,
    bfSize: T.DWORD,
    bfReserved1: T.WORD,
    bfReserved2: T.WORD,
    bfOffBits: T.DWORD
}));
T.BITMAPINFOHEADER = Struct('', {
    biSize: T.DWORD,
    biWidth: T.LONG,
    biHeight: T.LONG,
    biPlanes: T.WORD,
    biBitCount: T.WORD,
    biCompression: T.DWORD,
    biSizeImage: T.DWORD,
    biXPelsPerMeter: T.LONG,
    biYPelsPerMeter: T.LONG,
    biClrUsed: T.DWORD,
    biClrImportant: T.DWORD
});
T.PBITMAPINFOHEADER = Pointer(Struct('', {
    biSize: T.DWORD,
    biWidth: T.LONG,
    biHeight: T.LONG,
    biPlanes: T.WORD,
    biBitCount: T.WORD,
    biCompression: T.DWORD,
    biSizeImage: T.DWORD,
    biXPelsPerMeter: T.LONG,
    biYPelsPerMeter: T.LONG,
    biClrUsed: T.DWORD,
    biClrImportant: T.DWORD
}));
T.LPBITMAPINFOHEADER = Pointer(Struct('', {
    biSize: T.DWORD,
    biWidth: T.LONG,
    biHeight: T.LONG,
    biPlanes: T.WORD,
    biBitCount: T.WORD,
    biCompression: T.DWORD,
    biSizeImage: T.DWORD,
    biXPelsPerMeter: T.LONG,
    biYPelsPerMeter: T.LONG,
    biClrUsed: T.DWORD,
    biClrImportant: T.DWORD
}));
T.BITMAPV4HEADER = Struct('', {
    bV4Size: T.DWORD,
    bV4Width: T.LONG,
    bV4Height: T.LONG,
    bV4Planes: T.WORD,
    bV4BitCount: T.WORD,
    bV4V4Compression: T.DWORD,
    bV4SizeImage: T.DWORD,
    bV4XPelsPerMeter: T.LONG,
    bV4YPelsPerMeter: T.LONG,
    bV4ClrUsed: T.DWORD,
    bV4ClrImportant: T.DWORD,
    bV4RedMask: T.DWORD,
    bV4GreenMask: T.DWORD,
    bV4BlueMask: T.DWORD,
    bV4AlphaMask: T.DWORD,
    bV4CSType: T.DWORD,
    bV4Endpoints: T.CIEXYZTRIPLE,
    bV4GammaRed: T.DWORD,
    bV4GammaGreen: T.DWORD,
    bV4GammaBlue: T.DWORD
});
T.PBITMAPV4HEADER = Pointer(Struct('', {
    bV4Size: T.DWORD,
    bV4Width: T.LONG,
    bV4Height: T.LONG,
    bV4Planes: T.WORD,
    bV4BitCount: T.WORD,
    bV4V4Compression: T.DWORD,
    bV4SizeImage: T.DWORD,
    bV4XPelsPerMeter: T.LONG,
    bV4YPelsPerMeter: T.LONG,
    bV4ClrUsed: T.DWORD,
    bV4ClrImportant: T.DWORD,
    bV4RedMask: T.DWORD,
    bV4GreenMask: T.DWORD,
    bV4BlueMask: T.DWORD,
    bV4AlphaMask: T.DWORD,
    bV4CSType: T.DWORD,
    bV4Endpoints: T.CIEXYZTRIPLE,
    bV4GammaRed: T.DWORD,
    bV4GammaGreen: T.DWORD,
    bV4GammaBlue: T.DWORD
}));
T.BITMAPV5HEADER = Struct('', {
    bV5Size: T.DWORD,
    bV5Width: T.LONG,
    bV5Height: T.LONG,
    bV5Planes: T.WORD,
    bV5BitCount: T.WORD,
    bV5Compression: T.DWORD,
    bV5SizeImage: T.DWORD,
    bV5XPelsPerMeter: T.LONG,
    bV5YPelsPerMeter: T.LONG,
    bV5ClrUsed: T.DWORD,
    bV5ClrImportant: T.DWORD,
    bV5RedMask: T.DWORD,
    bV5GreenMask: T.DWORD,
    bV5BlueMask: T.DWORD,
    bV5AlphaMask: T.DWORD,
    bV5CSType: T.DWORD,
    bV5Endpoints: T.CIEXYZTRIPLE,
    bV5GammaRed: T.DWORD,
    bV5GammaGreen: T.DWORD,
    bV5GammaBlue: T.DWORD,
    bV5Intent: T.DWORD,
    bV5ProfileData: T.DWORD,
    bV5ProfileSize: T.DWORD,
    bV5Reserved: T.DWORD
});
T.LPBITMAPV5HEADER = Pointer(Struct('', {
    bV5Size: T.DWORD,
    bV5Width: T.LONG,
    bV5Height: T.LONG,
    bV5Planes: T.WORD,
    bV5BitCount: T.WORD,
    bV5Compression: T.DWORD,
    bV5SizeImage: T.DWORD,
    bV5XPelsPerMeter: T.LONG,
    bV5YPelsPerMeter: T.LONG,
    bV5ClrUsed: T.DWORD,
    bV5ClrImportant: T.DWORD,
    bV5RedMask: T.DWORD,
    bV5GreenMask: T.DWORD,
    bV5BlueMask: T.DWORD,
    bV5AlphaMask: T.DWORD,
    bV5CSType: T.DWORD,
    bV5Endpoints: T.CIEXYZTRIPLE,
    bV5GammaRed: T.DWORD,
    bV5GammaGreen: T.DWORD,
    bV5GammaBlue: T.DWORD,
    bV5Intent: T.DWORD,
    bV5ProfileData: T.DWORD,
    bV5ProfileSize: T.DWORD,
    bV5Reserved: T.DWORD
}));
T.PBITMAPV5HEADER = Pointer(Struct('', {
    bV5Size: T.DWORD,
    bV5Width: T.LONG,
    bV5Height: T.LONG,
    bV5Planes: T.WORD,
    bV5BitCount: T.WORD,
    bV5Compression: T.DWORD,
    bV5SizeImage: T.DWORD,
    bV5XPelsPerMeter: T.LONG,
    bV5YPelsPerMeter: T.LONG,
    bV5ClrUsed: T.DWORD,
    bV5ClrImportant: T.DWORD,
    bV5RedMask: T.DWORD,
    bV5GreenMask: T.DWORD,
    bV5BlueMask: T.DWORD,
    bV5AlphaMask: T.DWORD,
    bV5CSType: T.DWORD,
    bV5Endpoints: T.CIEXYZTRIPLE,
    bV5GammaRed: T.DWORD,
    bV5GammaGreen: T.DWORD,
    bV5GammaBlue: T.DWORD,
    bV5Intent: T.DWORD,
    bV5ProfileData: T.DWORD,
    bV5ProfileSize: T.DWORD,
    bV5Reserved: T.DWORD
}));
T.BITMAPINFO = Struct('tagBITMAPINFO', {
    bmiHeader: T.BITMAPINFOHEADER,
    bmiColors: ArrayType(T.RGBQUAD, 1)
});
T.PBITMAPINFO = Pointer(Struct('tagBITMAPINFO', {
    bmiHeader: T.BITMAPINFOHEADER,
    bmiColors: ArrayType(T.RGBQUAD, 1)
}));
T.LPBITMAPINFO = Pointer(Struct('tagBITMAPINFO', {
    bmiHeader: T.BITMAPINFOHEADER,
    bmiColors: ArrayType(T.RGBQUAD, 1)
}));
T.BITMAPCOREHEADER = Struct('', {
    bcSize: T.DWORD,
    bcWidth: T.WORD,
    bcHeight: T.WORD,
    bcPlanes: T.WORD,
    bcBitCount: T.WORD
});
T.PBITMAPCOREHEADER = Pointer(Struct('', {
    bcSize: T.DWORD,
    bcWidth: T.WORD,
    bcHeight: T.WORD,
    bcPlanes: T.WORD,
    bcBitCount: T.WORD
}));
T.LPBITMAPCOREHEADER = Pointer(Struct('', {
    bcSize: T.DWORD,
    bcWidth: T.WORD,
    bcHeight: T.WORD,
    bcPlanes: T.WORD,
    bcBitCount: T.WORD
}));
T.BITMAPCOREINFO = Struct('', {
    bmciHeader: T.BITMAPCOREHEADER,
    bmciColors: ArrayType(T.RGBTRIPLE, 1)
});
T.PBITMAPCOREINFO = Pointer(Struct('', {
    bmciHeader: T.BITMAPCOREHEADER,
    bmciColors: ArrayType(T.RGBTRIPLE, 1)
}));
T.LPBITMAPCOREINFO = Pointer(Struct('', {
    bmciHeader: T.BITMAPCOREHEADER,
    bmciColors: ArrayType(T.RGBTRIPLE, 1)
}));
T.DIBSECTION = Struct('', {
    dsBm: T.BITMAP,
    dsBmih: T.BITMAPINFOHEADER,
    dsBitfields: ArrayType(T.DWORD, 3),
    dshSection: T.HANDLE,
    dsOffset: T.DWORD
});
T.PDIBSECTION = Pointer(Struct('', {
    dsBm: T.BITMAP,
    dsBmih: T.BITMAPINFOHEADER,
    dsBitfields: ArrayType(T.DWORD, 3),
    dshSection: T.HANDLE,
    dsOffset: T.DWORD
}));
T.LPDIBSECTION = Pointer(Struct('', {
    dsBm: T.BITMAP,
    dsBmih: T.BITMAPINFOHEADER,
    dsBitfields: ArrayType(T.DWORD, 3),
    dshSection: T.HANDLE,
    dsOffset: T.DWORD
}));
T.METAHEADER = Struct('', {
    mtType: T.WORD,
    mtHeaderSize: T.WORD,
    mtVersion: T.WORD,
    mtSize: T.DWORD,
    mtNoObjects: T.WORD,
    mtMaxRecord: T.DWORD,
    mtNoParameters: T.WORD
});
T.PMETAHEADER = Pointer(Struct('', {
    mtType: T.WORD,
    mtHeaderSize: T.WORD,
    mtVersion: T.WORD,
    mtSize: T.DWORD,
    mtNoObjects: T.WORD,
    mtMaxRecord: T.DWORD,
    mtNoParameters: T.WORD
}));
T.LPMETAHEADER = Pointer(Struct('', {
    mtType: T.WORD,
    mtHeaderSize: T.WORD,
    mtVersion: T.WORD,
    mtSize: T.DWORD,
    mtNoObjects: T.WORD,
    mtMaxRecord: T.DWORD,
    mtNoParameters: T.WORD
}));
T.METARECORD = Struct('', {
    rdSize: T.DWORD,
    rdFunction: T.WORD,
    rdParm: ArrayType(T.WORD, 1)
});
T.PMETARECORD = Pointer(Struct('', {
    rdSize: T.DWORD,
    rdFunction: T.WORD,
    rdParm: ArrayType(T.WORD, 1)
}));
T.LPMETARECORD = Pointer(Struct('', {
    rdSize: T.DWORD,
    rdFunction: T.WORD,
    rdParm: ArrayType(T.WORD, 1)
}));
T.HANDLETABLE = Struct('', {
    objectHandle: ArrayType(T.HGDIOBJ, 1)
});
T.PHANDLETABLE = Pointer(Struct('', {
    objectHandle: ArrayType(T.HGDIOBJ, 1)
}));
T.LPHANDLETABLE = Pointer(Struct('', {
    objectHandle: ArrayType(T.HGDIOBJ, 1)
}));
T.METAFILEPICT = Struct('', {
    mm: T.LONG,
    xExt: T.LONG,
    yExt: T.LONG,
    hMF: T.HMETAFILE
});
T.LPMETAFILEPICT = Pointer(Struct('', {
    mm: T.LONG,
    xExt: T.LONG,
    yExt: T.LONG,
    hMF: T.HMETAFILE
}));
T.MFENUMPROC = Pointer(Fn(T.INT, [[T.HDC], [Pointer(T.HANDLETABLE)], [Pointer(T.METARECORD)], [T.INT], [T.LPARAM]]));
T.ENHMETAHEADER = Struct('', {
    iType: T.DWORD,
    nSize: T.DWORD,
    rclBounds: T.RECTL,
    rclFrame: T.RECTL,
    dSignature: T.DWORD,
    nVersion: T.DWORD,
    nBytes: T.DWORD,
    nRecords: T.DWORD,
    nHandles: T.WORD,
    sReserved: T.WORD,
    nDescription: T.DWORD,
    offDescription: T.DWORD,
    nPalEntries: T.DWORD,
    szlDevice: T.SIZEL,
    szlMillimeters: T.SIZEL,
    cbPixelFormat: T.DWORD,
    offPixelFormat: T.DWORD,
    bOpenGL: T.DWORD,
    szlMicrometers: T.SIZEL
});
T.PENHMETAHEADER = Pointer(Struct('', {
    iType: T.DWORD,
    nSize: T.DWORD,
    rclBounds: T.RECTL,
    rclFrame: T.RECTL,
    dSignature: T.DWORD,
    nVersion: T.DWORD,
    nBytes: T.DWORD,
    nRecords: T.DWORD,
    nHandles: T.WORD,
    sReserved: T.WORD,
    nDescription: T.DWORD,
    offDescription: T.DWORD,
    nPalEntries: T.DWORD,
    szlDevice: T.SIZEL,
    szlMillimeters: T.SIZEL,
    cbPixelFormat: T.DWORD,
    offPixelFormat: T.DWORD,
    bOpenGL: T.DWORD,
    szlMicrometers: T.SIZEL
}));
T.LPENHMETAHEADER = Pointer(Struct('', {
    iType: T.DWORD,
    nSize: T.DWORD,
    rclBounds: T.RECTL,
    rclFrame: T.RECTL,
    dSignature: T.DWORD,
    nVersion: T.DWORD,
    nBytes: T.DWORD,
    nRecords: T.DWORD,
    nHandles: T.WORD,
    sReserved: T.WORD,
    nDescription: T.DWORD,
    offDescription: T.DWORD,
    nPalEntries: T.DWORD,
    szlDevice: T.SIZEL,
    szlMillimeters: T.SIZEL,
    cbPixelFormat: T.DWORD,
    offPixelFormat: T.DWORD,
    bOpenGL: T.DWORD,
    szlMicrometers: T.SIZEL
}));
T.ENHMETARECORD = Struct('', {
    iType: T.DWORD,
    nSize: T.DWORD,
    dParm: ArrayType(T.DWORD, 1)
});
T.LPENHMETARECORD = Pointer(Struct('', {
    iType: T.DWORD,
    nSize: T.DWORD,
    dParm: ArrayType(T.DWORD, 1)
}));
T.EMR = Struct('', {
    iType: T.DWORD,
    nSize: T.DWORD
});
T.PEMR = Pointer(Struct('', {
    iType: T.DWORD,
    nSize: T.DWORD
}));
T.EMRTEXT = Struct('', {
    ptlReference: T.POINTL,
    nChars: T.DWORD,
    offString: T.DWORD,
    fOptions: T.DWORD,
    rcl: T.RECTL,
    offDx: T.DWORD
});
T.PEMRTEXT = Pointer(Struct('', {
    ptlReference: T.POINTL,
    nChars: T.DWORD,
    offString: T.DWORD,
    fOptions: T.DWORD,
    rcl: T.RECTL,
    offDx: T.DWORD
}));
T.EMRABORTPATH = Struct('', {
    emr: T.EMR
});
T.PEMRABORTPATH = Pointer(Struct('', {
    emr: T.EMR
}));
T.EMRBEGINPATH = Struct('', {
    emr: T.EMR
});
T.PEMRBEGINPATH = Pointer(Struct('', {
    emr: T.EMR
}));
T.EMRENDPATH = Struct('', {
    emr: T.EMR
});
T.PEMRENDPATH = Pointer(Struct('', {
    emr: T.EMR
}));
T.EMRCLOSEFIGURE = Struct('', {
    emr: T.EMR
});
T.PEMRCLOSEFIGURE = Pointer(Struct('', {
    emr: T.EMR
}));
T.EMRFLATTENPATH = Struct('', {
    emr: T.EMR
});
T.PEMRFLATTENPATH = Pointer(Struct('', {
    emr: T.EMR
}));
T.EMRWIDENPATH = Struct('', {
    emr: T.EMR
});
T.PEMRWIDENPATH = Pointer(Struct('', {
    emr: T.EMR
}));
T.EMRSETMETARGN = Struct('', {
    emr: T.EMR
});
T.PEMRSETMETARGN = Pointer(Struct('', {
    emr: T.EMR
}));
T.EMRSAVEDC = Struct('', {
    emr: T.EMR
});
T.PEMRSAVEDC = Pointer(Struct('', {
    emr: T.EMR
}));
T.EMRREALIZEPALETTE = Struct('', {
    emr: T.EMR
});
T.PEMRREALIZEPALETTE = Pointer(Struct('', {
    emr: T.EMR
}));
T.EMRANGLEARC = Struct('', {
    emr: T.EMR,
    ptlCenter: T.POINTL,
    nRadius: T.DWORD,
    eStartAngle: T.FLOAT,
    eSweepAngle: T.FLOAT
});
T.PEMRANGLEARC = Pointer(Struct('', {
    emr: T.EMR,
    ptlCenter: T.POINTL,
    nRadius: T.DWORD,
    eStartAngle: T.FLOAT,
    eSweepAngle: T.FLOAT
}));
T.EMRARC = Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    ptlStart: T.POINTL,
    ptlEnd: T.POINTL
});
T.PEMRARC = Pointer(Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    ptlStart: T.POINTL,
    ptlEnd: T.POINTL
}));
T.EMRARCTO = Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    ptlStart: T.POINTL,
    ptlEnd: T.POINTL
});
T.PEMRARCTO = Pointer(Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    ptlStart: T.POINTL,
    ptlEnd: T.POINTL
}));
T.EMRCHORD = Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    ptlStart: T.POINTL,
    ptlEnd: T.POINTL
});
T.PEMRCHORD = Pointer(Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    ptlStart: T.POINTL,
    ptlEnd: T.POINTL
}));
T.EMRPIE = Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    ptlStart: T.POINTL,
    ptlEnd: T.POINTL
});
T.PEMRPIE = Pointer(Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    ptlStart: T.POINTL,
    ptlEnd: T.POINTL
}));
T.EMRBITBLT = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    cxDest: T.LONG,
    cyDest: T.LONG,
    dwRop: T.DWORD,
    xSrc: T.LONG,
    ySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD
});
T.PEMRBITBLT = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    cxDest: T.LONG,
    cyDest: T.LONG,
    dwRop: T.DWORD,
    xSrc: T.LONG,
    ySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD
}));
T.EMRCREATEBRUSHINDIRECT = Struct('', {
    emr: T.EMR,
    ihBrush: T.DWORD,
    lb: T.LOGBRUSH32
});
T.PEMRCREATEBRUSHINDIRECT = Pointer(Struct('', {
    emr: T.EMR,
    ihBrush: T.DWORD,
    lb: T.LOGBRUSH32
}));
T.EMRCREATECOLORSPACE = Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD,
    lcs: T.LOGCOLORSPACEA
});
T.PEMRCREATECOLORSPACE = Pointer(Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD,
    lcs: T.LOGCOLORSPACEA
}));
T.EMRCREATECOLORSPACEW = Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD,
    lcs: T.LOGCOLORSPACEW,
    dwFlags: T.DWORD,
    cbData: T.DWORD,
    Data: ArrayType(T.BYTE, 1)
});
T.PEMRCREATECOLORSPACEW = Pointer(Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD,
    lcs: T.LOGCOLORSPACEW,
    dwFlags: T.DWORD,
    cbData: T.DWORD,
    Data: ArrayType(T.BYTE, 1)
}));
T.EMRCREATEDIBPATTERNBRUSHPT = Struct('', {
    emr: T.EMR,
    ihBrush: T.DWORD,
    iUsage: T.DWORD,
    offBmi: T.DWORD,
    cbBmi: T.DWORD,
    offBits: T.DWORD,
    cbBits: T.DWORD
});
T.PEMRCREATEDIBPATTERNBRUSHPT = Pointer(Struct('', {
    emr: T.EMR,
    ihBrush: T.DWORD,
    iUsage: T.DWORD,
    offBmi: T.DWORD,
    cbBmi: T.DWORD,
    offBits: T.DWORD,
    cbBits: T.DWORD
}));
T.EMRCREATEMONOBRUSH = Struct('', {
    emr: T.EMR,
    ihBrush: T.DWORD,
    iUsage: T.DWORD,
    offBmi: T.DWORD,
    cbBmi: T.DWORD,
    offBits: T.DWORD,
    cbBits: T.DWORD
});
T.PEMRCREATEMONOBRUSH = Pointer(Struct('', {
    emr: T.EMR,
    ihBrush: T.DWORD,
    iUsage: T.DWORD,
    offBmi: T.DWORD,
    cbBmi: T.DWORD,
    offBits: T.DWORD,
    cbBits: T.DWORD
}));
T.EMRCREATEPALETTE = Struct('', {
    emr: T.EMR,
    ihPal: T.DWORD,
    lgpl: T.LOGPALETTE
});
T.PEMRCREATEPALETTE = Pointer(Struct('', {
    emr: T.EMR,
    ihPal: T.DWORD,
    lgpl: T.LOGPALETTE
}));
T.EMRCREATEPEN = Struct('', {
    emr: T.EMR,
    ihPen: T.DWORD,
    lopn: T.LOGPEN
});
T.PEMRCREATEPEN = Pointer(Struct('', {
    emr: T.EMR,
    ihPen: T.DWORD,
    lopn: T.LOGPEN
}));
T.EMRDELETECOLORSPACE = Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD
});
T.PEMRDELETECOLORSPACE = Pointer(Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD
}));
T.EMRSELECTCOLORSPACE = Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD
});
T.PEMRSELECTCOLORSPACE = Pointer(Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD
}));
T.EMRSETCOLORSPACE = Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD
});
T.PEMRSETCOLORSPACE = Pointer(Struct('', {
    emr: T.EMR,
    ihCS: T.DWORD
}));
T.EMRDELETEOBJECT = Struct('', {
    emr: T.EMR,
    ihObject: T.DWORD
});
T.PEMRDELETEOBJECT = Pointer(Struct('', {
    emr: T.EMR,
    ihObject: T.DWORD
}));
T.EMRSELECTOBJECT = Struct('', {
    emr: T.EMR,
    ihObject: T.DWORD
});
T.PEMRSELECTOBJECT = Pointer(Struct('', {
    emr: T.EMR,
    ihObject: T.DWORD
}));
T.EMRELLIPSE = Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL
});
T.PEMRELLIPSE = Pointer(Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL
}));
T.EMRRECTANGLE = Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL
});
T.PEMRRECTANGLE = Pointer(Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL
}));
T.EMREOF = Struct('', {
    emr: T.EMR,
    nPalEntries: T.DWORD,
    offPalEntries: T.DWORD,
    nSizeLast: T.DWORD
});
T.PEMREOF = Pointer(Struct('', {
    emr: T.EMR,
    nPalEntries: T.DWORD,
    offPalEntries: T.DWORD,
    nSizeLast: T.DWORD
}));
T.EMREXCLUDECLIPRECT = Struct('', {
    emr: T.EMR,
    rclClip: T.RECTL
});
T.PEMREXCLUDECLIPRECT = Pointer(Struct('', {
    emr: T.EMR,
    rclClip: T.RECTL
}));
T.EMRINTERSECTCLIPRECT = Struct('', {
    emr: T.EMR,
    rclClip: T.RECTL
});
T.PEMRINTERSECTCLIPRECT = Pointer(Struct('', {
    emr: T.EMR,
    rclClip: T.RECTL
}));
T.EMREXTCREATEFONTINDIRECTW = Struct('', {
    emr: T.EMR,
    ihFont: T.DWORD,
    elfw: T.EXTLOGFONTW
});
T.PEMREXTCREATEFONTINDIRECTW = Pointer(Struct('', {
    emr: T.EMR,
    ihFont: T.DWORD,
    elfw: T.EXTLOGFONTW
}));
T.EMREXTCREATEPEN = Struct('', {
    emr: T.EMR,
    ihPen: T.DWORD,
    offBmi: T.DWORD,
    cbBmi: T.DWORD,
    offBits: T.DWORD,
    cbBits: T.DWORD,
    elp: T.EXTLOGPEN
});
T.PEMREXTCREATEPEN = Pointer(Struct('', {
    emr: T.EMR,
    ihPen: T.DWORD,
    offBmi: T.DWORD,
    cbBmi: T.DWORD,
    offBits: T.DWORD,
    cbBits: T.DWORD,
    elp: T.EXTLOGPEN
}));
T.EMREXTFLOODFILL = Struct('', {
    emr: T.EMR,
    ptlStart: T.POINTL,
    crColor: T.COLORREF,
    iMode: T.DWORD
});
T.PEMREXTFLOODFILL = Pointer(Struct('', {
    emr: T.EMR,
    ptlStart: T.POINTL,
    crColor: T.COLORREF,
    iMode: T.DWORD
}));
T.EMREXTSELECTCLIPRGN = Struct('', {
    emr: T.EMR,
    cbRgnData: T.DWORD,
    iMode: T.DWORD,
    RgnData: ArrayType(T.BYTE, 1)
});
T.PEMREXTSELECTCLIPRGN = Pointer(Struct('', {
    emr: T.EMR,
    cbRgnData: T.DWORD,
    iMode: T.DWORD,
    RgnData: ArrayType(T.BYTE, 1)
}));
T.EMREXTTEXTOUTA = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    iGraphicsMode: T.DWORD,
    exScale: T.FLOAT,
    eyScale: T.FLOAT,
    emrtext: T.EMRTEXT
});
T.PEMREXTTEXTOUTA = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    iGraphicsMode: T.DWORD,
    exScale: T.FLOAT,
    eyScale: T.FLOAT,
    emrtext: T.EMRTEXT
}));
T.EMREXTTEXTOUTW = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    iGraphicsMode: T.DWORD,
    exScale: T.FLOAT,
    eyScale: T.FLOAT,
    emrtext: T.EMRTEXT
});
T.PEMREXTTEXTOUTW = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    iGraphicsMode: T.DWORD,
    exScale: T.FLOAT,
    eyScale: T.FLOAT,
    emrtext: T.EMRTEXT
}));
T.EMRFILLPATH = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL
});
T.PEMRFILLPATH = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL
}));
T.EMRSTROKEANDFILLPATH = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL
});
T.PEMRSTROKEANDFILLPATH = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL
}));
T.EMRSTROKEPATH = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL
});
T.PEMRSTROKEPATH = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL
}));
T.EMRFILLRGN = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbRgnData: T.DWORD,
    ihBrush: T.DWORD,
    RgnData: ArrayType(T.BYTE, 1)
});
T.PEMRFILLRGN = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbRgnData: T.DWORD,
    ihBrush: T.DWORD,
    RgnData: ArrayType(T.BYTE, 1)
}));
T.EMRFORMAT = Struct('', {
    dSignature: T.DWORD,
    nVersion: T.DWORD,
    cbData: T.DWORD,
    offData: T.DWORD
});
T.PEMRFORMAT = Pointer(Struct('', {
    dSignature: T.DWORD,
    nVersion: T.DWORD,
    cbData: T.DWORD,
    offData: T.DWORD
}));
T.EMRFRAMERGN = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbRgnData: T.DWORD,
    ihBrush: T.DWORD,
    szlStroke: T.SIZEL,
    RgnData: ArrayType(T.BYTE, 1)
});
T.PEMRFRAMERGN = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbRgnData: T.DWORD,
    ihBrush: T.DWORD,
    szlStroke: T.SIZEL,
    RgnData: ArrayType(T.BYTE, 1)
}));
T.EMRGDICOMMENT = Struct('', {
    emr: T.EMR,
    cbData: T.DWORD,
    Data: ArrayType(T.BYTE, 1)
});
T.PEMRGDICOMMENT = Pointer(Struct('', {
    emr: T.EMR,
    cbData: T.DWORD,
    Data: ArrayType(T.BYTE, 1)
}));
T.EMRINVERTRGN = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbRgnData: T.DWORD,
    RgnData: ArrayType(T.BYTE, 1)
});
T.PEMRINVERTRGN = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbRgnData: T.DWORD,
    RgnData: ArrayType(T.BYTE, 1)
}));
T.EMRPAINTRGN = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbRgnData: T.DWORD,
    RgnData: ArrayType(T.BYTE, 1)
});
T.PEMRPAINTRGN = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbRgnData: T.DWORD,
    RgnData: ArrayType(T.BYTE, 1)
}));
T.EMRLINETO = Struct('', {
    emr: T.EMR,
    ptl: T.POINTL
});
T.PEMRLINETO = Pointer(Struct('', {
    emr: T.EMR,
    ptl: T.POINTL
}));
T.EMRMOVETOEX = Struct('', {
    emr: T.EMR,
    ptl: T.POINTL
});
T.PEMRMOVETOEX = Pointer(Struct('', {
    emr: T.EMR,
    ptl: T.POINTL
}));
T.EMRMASKBLT = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    cxDest: T.LONG,
    cyDest: T.LONG,
    dwRop: T.DWORD,
    xSrc: T.LONG,
    ySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    xMask: T.LONG,
    yMask: T.LONG,
    iUsageMask: T.DWORD,
    offBmiMask: T.DWORD,
    cbBmiMask: T.DWORD,
    offBitsMask: T.DWORD,
    cbBitsMask: T.DWORD
});
T.PEMRMASKBLT = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    cxDest: T.LONG,
    cyDest: T.LONG,
    dwRop: T.DWORD,
    xSrc: T.LONG,
    ySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    xMask: T.LONG,
    yMask: T.LONG,
    iUsageMask: T.DWORD,
    offBmiMask: T.DWORD,
    cbBmiMask: T.DWORD,
    offBitsMask: T.DWORD,
    cbBitsMask: T.DWORD
}));
T.EMRMODIFYWORLDTRANSFORM = Struct('', {
    emr: T.EMR,
    xform: T.XFORM,
    iMode: T.DWORD
});
T.PEMRMODIFYWORLDTRANSFORM = Pointer(Struct('', {
    emr: T.EMR,
    xform: T.XFORM,
    iMode: T.DWORD
}));
T.EMROFFSETCLIPRGN = Struct('', {
    emr: T.EMR,
    ptlOffset: T.POINTL
});
T.PEMROFFSETCLIPRGN = Pointer(Struct('', {
    emr: T.EMR,
    ptlOffset: T.POINTL
}));
T.EMRPLGBLT = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    aptlDest: ArrayType(T.POINTL, 3),
    xSrc: T.LONG,
    ySrc: T.LONG,
    cxSrc: T.LONG,
    cySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    xMask: T.LONG,
    yMask: T.LONG,
    iUsageMask: T.DWORD,
    offBmiMask: T.DWORD,
    cbBmiMask: T.DWORD,
    offBitsMask: T.DWORD,
    cbBitsMask: T.DWORD
});
T.PEMRPLGBLT = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    aptlDest: ArrayType(T.POINTL, 3),
    xSrc: T.LONG,
    ySrc: T.LONG,
    cxSrc: T.LONG,
    cySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    xMask: T.LONG,
    yMask: T.LONG,
    iUsageMask: T.DWORD,
    offBmiMask: T.DWORD,
    cbBmiMask: T.DWORD,
    offBitsMask: T.DWORD,
    cbBitsMask: T.DWORD
}));
T.EMRPOLYLINE = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
});
T.PEMRPOLYLINE = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
}));
T.EMRPOLYBEZIER = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
});
T.PEMRPOLYBEZIER = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
}));
T.EMRPOLYGON = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
});
T.PEMRPOLYGON = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
}));
T.EMRPOLYBEZIERTO = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
});
T.PEMRPOLYBEZIERTO = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
}));
T.EMRPOLYLINETO = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
});
T.PEMRPOLYLINETO = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1)
}));
T.EMRPOLYLINE16 = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
});
T.PEMRPOLYLINE16 = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
}));
T.EMRPOLYBEZIER16 = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
});
T.PEMRPOLYBEZIER16 = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
}));
T.EMRPOLYGON16 = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
});
T.PEMRPOLYGON16 = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
}));
T.EMRPOLYBEZIERTO16 = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
});
T.PEMRPOLYBEZIERTO16 = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
}));
T.EMRPOLYLINETO16 = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
});
T.PEMRPOLYLINETO16 = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1)
}));
T.EMRPOLYDRAW16 = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1),
    abTypes: ArrayType(T.BYTE, 1)
});
T.PEMRPOLYDRAW16 = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cpts: T.DWORD,
    apts: ArrayType(T.POINTS, 1),
    abTypes: ArrayType(T.BYTE, 1)
}));
T.EMRPOLYPOLYLINE16 = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    nPolys: T.DWORD,
    cpts: T.DWORD,
    aPolyCounts: ArrayType(T.DWORD, 1),
    apts: ArrayType(T.POINTS, 1)
});
T.PEMRPOLYPOLYLINE16 = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    nPolys: T.DWORD,
    cpts: T.DWORD,
    aPolyCounts: ArrayType(T.DWORD, 1),
    apts: ArrayType(T.POINTS, 1)
}));
T.EMRPOLYPOLYGON16 = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    nPolys: T.DWORD,
    cpts: T.DWORD,
    aPolyCounts: ArrayType(T.DWORD, 1),
    apts: ArrayType(T.POINTS, 1)
});
T.PEMRPOLYPOLYGON16 = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    nPolys: T.DWORD,
    cpts: T.DWORD,
    aPolyCounts: ArrayType(T.DWORD, 1),
    apts: ArrayType(T.POINTS, 1)
}));
T.EMRPOLYDRAW = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1),
    abTypes: ArrayType(T.BYTE, 1)
});
T.PEMRPOLYDRAW = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cptl: T.DWORD,
    aptl: ArrayType(T.POINTL, 1),
    abTypes: ArrayType(T.BYTE, 1)
}));
T.EMRPOLYPOLYLINE = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    nPolys: T.DWORD,
    cptl: T.DWORD,
    aPolyCounts: ArrayType(T.DWORD, 1),
    aptl: ArrayType(T.POINTL, 1)
});
T.PEMRPOLYPOLYLINE = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    nPolys: T.DWORD,
    cptl: T.DWORD,
    aPolyCounts: ArrayType(T.DWORD, 1),
    aptl: ArrayType(T.POINTL, 1)
}));
T.EMRPOLYPOLYGON = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    nPolys: T.DWORD,
    cptl: T.DWORD,
    aPolyCounts: ArrayType(T.DWORD, 1),
    aptl: ArrayType(T.POINTL, 1)
});
T.PEMRPOLYPOLYGON = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    nPolys: T.DWORD,
    cptl: T.DWORD,
    aPolyCounts: ArrayType(T.DWORD, 1),
    aptl: ArrayType(T.POINTL, 1)
}));
T.EMRPOLYTEXTOUTA = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    iGraphicsMode: T.DWORD,
    exScale: T.FLOAT,
    eyScale: T.FLOAT,
    cStrings: T.LONG,
    aemrtext: ArrayType(T.EMRTEXT, 1)
});
T.PEMRPOLYTEXTOUTA = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    iGraphicsMode: T.DWORD,
    exScale: T.FLOAT,
    eyScale: T.FLOAT,
    cStrings: T.LONG,
    aemrtext: ArrayType(T.EMRTEXT, 1)
}));
T.EMRPOLYTEXTOUTW = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    iGraphicsMode: T.DWORD,
    exScale: T.FLOAT,
    eyScale: T.FLOAT,
    cStrings: T.LONG,
    aemrtext: ArrayType(T.EMRTEXT, 1)
});
T.PEMRPOLYTEXTOUTW = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    iGraphicsMode: T.DWORD,
    exScale: T.FLOAT,
    eyScale: T.FLOAT,
    cStrings: T.LONG,
    aemrtext: ArrayType(T.EMRTEXT, 1)
}));
T.EMRRESIZEPALETTE = Struct('', {
    emr: T.EMR,
    ihPal: T.DWORD,
    cEntries: T.DWORD
});
T.PEMRRESIZEPALETTE = Pointer(Struct('', {
    emr: T.EMR,
    ihPal: T.DWORD,
    cEntries: T.DWORD
}));
T.EMRRESTOREDC = Struct('', {
    emr: T.EMR,
    iRelative: T.LONG
});
T.PEMRRESTOREDC = Pointer(Struct('', {
    emr: T.EMR,
    iRelative: T.LONG
}));
T.EMRROUNDRECT = Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    szlCorner: T.SIZEL
});
T.PEMRROUNDRECT = Pointer(Struct('', {
    emr: T.EMR,
    rclBox: T.RECTL,
    szlCorner: T.SIZEL
}));
T.EMRSCALEVIEWPORTEXTEX = Struct('', {
    emr: T.EMR,
    xNum: T.LONG,
    xDenom: T.LONG,
    yNum: T.LONG,
    yDenom: T.LONG
});
T.PEMRSCALEVIEWPORTEXTEX = Pointer(Struct('', {
    emr: T.EMR,
    xNum: T.LONG,
    xDenom: T.LONG,
    yNum: T.LONG,
    yDenom: T.LONG
}));
T.EMRSCALEWINDOWEXTEX = Struct('', {
    emr: T.EMR,
    xNum: T.LONG,
    xDenom: T.LONG,
    yNum: T.LONG,
    yDenom: T.LONG
});
T.PEMRSCALEWINDOWEXTEX = Pointer(Struct('', {
    emr: T.EMR,
    xNum: T.LONG,
    xDenom: T.LONG,
    yNum: T.LONG,
    yDenom: T.LONG
}));
T.EMRSELECTCLIPPATH = Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});
T.PEMRSELECTCLIPPATH = Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));
T.EMRSETBKMODE = Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});
T.PEMRSETBKMODE = Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));
T.EMRSETMAPMODE = Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});
T.PEMRSETMAPMODE = Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));
T.EMRSETPOLYFILLMODE = Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});
T.PEMRSETPOLYFILLMODE = Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));
T.EMRSETROP2 = Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});
T.PEMRSETROP2 = Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));
T.EMRSETSTRETCHBLTMODE = Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});
T.PEMRSETSTRETCHBLTMODE = Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));
T.EMRSETTEXTALIGN = Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});
T.PEMRSETTEXTALIGN = Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));
T.EMRSETICMMODE = Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});
T.PEMRSETICMMODE = Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));
T.EMRSETLAYOUT = Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
});
T.PEMRSETLAYOUT = Pointer(Struct('', {
    emr: T.EMR,
    iMode: T.DWORD
}));
T.EMRSELECTPALETTE = Struct('', {
    emr: T.EMR,
    ihPal: T.DWORD
});
T.PEMRSELECTPALETTE = Pointer(Struct('', {
    emr: T.EMR,
    ihPal: T.DWORD
}));
T.EMRSETARCDIRECTION = Struct('', {
    emr: T.EMR,
    iArcDirection: T.DWORD
});
T.PEMRSETARCDIRECTION = Pointer(Struct('', {
    emr: T.EMR,
    iArcDirection: T.DWORD
}));
T.EMRSETBKCOLOR = Struct('', {
    emr: T.EMR,
    crColor: T.COLORREF
});
T.PEMRSETBKCOLOR = Pointer(Struct('', {
    emr: T.EMR,
    crColor: T.COLORREF
}));
T.EMRSETTEXTCOLOR = Struct('', {
    emr: T.EMR,
    crColor: T.COLORREF
});
T.PEMRSETTEXTCOLOR = Pointer(Struct('', {
    emr: T.EMR,
    crColor: T.COLORREF
}));
T.EMRSETBRUSHORGEX = Struct('', {
    emr: T.EMR,
    ptlOrigin: T.POINTL
});
T.PEMRSETBRUSHORGEX = Pointer(Struct('', {
    emr: T.EMR,
    ptlOrigin: T.POINTL
}));
T.EMRSETVIEWPORTORGEX = Struct('', {
    emr: T.EMR,
    ptlOrigin: T.POINTL
});
T.PEMRSETVIEWPORTORGEX = Pointer(Struct('', {
    emr: T.EMR,
    ptlOrigin: T.POINTL
}));
T.EMRSETWINDOWORGEX = Struct('', {
    emr: T.EMR,
    ptlOrigin: T.POINTL
});
T.PEMRSETWINDOWORGEX = Pointer(Struct('', {
    emr: T.EMR,
    ptlOrigin: T.POINTL
}));
T.EMRSETCOLORADJUSTMENT = Struct('', {
    emr: T.EMR,
    ColorAdjustment: T.COLORADJUSTMENT
});
T.PEMRSETCOLORADJUSTMENT = Pointer(Struct('', {
    emr: T.EMR,
    ColorAdjustment: T.COLORADJUSTMENT
}));
T.EMRSETDIBITSTODEVICE = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    xSrc: T.LONG,
    ySrc: T.LONG,
    cxSrc: T.LONG,
    cySrc: T.LONG,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    iUsageSrc: T.DWORD,
    iStartScan: T.DWORD,
    cScans: T.DWORD
});
T.PEMRSETDIBITSTODEVICE = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    xSrc: T.LONG,
    ySrc: T.LONG,
    cxSrc: T.LONG,
    cySrc: T.LONG,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    iUsageSrc: T.DWORD,
    iStartScan: T.DWORD,
    cScans: T.DWORD
}));
T.EMRSETMAPPERFLAGS = Struct('', {
    emr: T.EMR,
    dwFlags: T.DWORD
});
T.PEMRSETMAPPERFLAGS = Pointer(Struct('', {
    emr: T.EMR,
    dwFlags: T.DWORD
}));
T.EMRSETMITERLIMIT = Struct('', {
    emr: T.EMR,
    eMiterLimit: T.FLOAT
});
T.PEMRSETMITERLIMIT = Pointer(Struct('', {
    emr: T.EMR,
    eMiterLimit: T.FLOAT
}));
T.EMRSETPALETTEENTRIES = Struct('', {
    emr: T.EMR,
    ihPal: T.DWORD,
    iStart: T.DWORD,
    cEntries: T.DWORD,
    aPalEntries: ArrayType(T.PALETTEENTRY, 1)
});
T.PEMRSETPALETTEENTRIES = Pointer(Struct('', {
    emr: T.EMR,
    ihPal: T.DWORD,
    iStart: T.DWORD,
    cEntries: T.DWORD,
    aPalEntries: ArrayType(T.PALETTEENTRY, 1)
}));
T.EMRSETPIXELV = Struct('', {
    emr: T.EMR,
    ptlPixel: T.POINTL,
    crColor: T.COLORREF
});
T.PEMRSETPIXELV = Pointer(Struct('', {
    emr: T.EMR,
    ptlPixel: T.POINTL,
    crColor: T.COLORREF
}));
T.EMRSETVIEWPORTEXTEX = Struct('', {
    emr: T.EMR,
    szlExtent: T.SIZEL
});
T.PEMRSETVIEWPORTEXTEX = Pointer(Struct('', {
    emr: T.EMR,
    szlExtent: T.SIZEL
}));
T.EMRSETWINDOWEXTEX = Struct('', {
    emr: T.EMR,
    szlExtent: T.SIZEL
});
T.PEMRSETWINDOWEXTEX = Pointer(Struct('', {
    emr: T.EMR,
    szlExtent: T.SIZEL
}));
T.EMRSETWORLDTRANSFORM = Struct('', {
    emr: T.EMR,
    xform: T.XFORM
});
T.PEMRSETWORLDTRANSFORM = Pointer(Struct('', {
    emr: T.EMR,
    xform: T.XFORM
}));
T.EMRSTRETCHBLT = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    cxDest: T.LONG,
    cyDest: T.LONG,
    dwRop: T.DWORD,
    xSrc: T.LONG,
    ySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    cxSrc: T.LONG,
    cySrc: T.LONG
});
T.PEMRSTRETCHBLT = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    cxDest: T.LONG,
    cyDest: T.LONG,
    dwRop: T.DWORD,
    xSrc: T.LONG,
    ySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    cxSrc: T.LONG,
    cySrc: T.LONG
}));
T.EMRALPHABLEND = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    cxDest: T.LONG,
    cyDest: T.LONG,
    dwRop: T.DWORD,
    xSrc: T.LONG,
    ySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    cxSrc: T.LONG,
    cySrc: T.LONG
});
T.PEMRALPHABLEND = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    cxDest: T.LONG,
    cyDest: T.LONG,
    dwRop: T.DWORD,
    xSrc: T.LONG,
    ySrc: T.LONG,
    xformSrc: T.XFORM,
    crBkColorSrc: T.COLORREF,
    iUsageSrc: T.DWORD,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    cxSrc: T.LONG,
    cySrc: T.LONG
}));
T.EMRSTRETCHDIBITS = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    xSrc: T.LONG,
    ySrc: T.LONG,
    cxSrc: T.LONG,
    cySrc: T.LONG,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    iUsageSrc: T.DWORD,
    dwRop: T.DWORD,
    cxDest: T.LONG,
    cyDest: T.LONG
});
T.PEMRSTRETCHDIBITS = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    xDest: T.LONG,
    yDest: T.LONG,
    xSrc: T.LONG,
    ySrc: T.LONG,
    cxSrc: T.LONG,
    cySrc: T.LONG,
    offBmiSrc: T.DWORD,
    cbBmiSrc: T.DWORD,
    offBitsSrc: T.DWORD,
    cbBitsSrc: T.DWORD,
    iUsageSrc: T.DWORD,
    dwRop: T.DWORD,
    cxDest: T.LONG,
    cyDest: T.LONG
}));
T.EMRPIXELFORMAT = Struct('', {
    emr: T.EMR,
    pfd: T.PIXELFORMATDESCRIPTOR
});
T.PEMRPIXELFORMAT = Pointer(Struct('', {
    emr: T.EMR,
    pfd: T.PIXELFORMATDESCRIPTOR
}));
T.EMRGLSRECORD = Struct('tagEMRGLSRECORD', {
    emr: T.EMR,
    cbData: T.DWORD,
    Data: ArrayType(T.BYTE, 1)
});
T.PEMRGLSRECORD = Pointer(Struct('tagEMRGLSRECORD', {
    emr: T.EMR,
    cbData: T.DWORD,
    Data: ArrayType(T.BYTE, 1)
}));
T.EMRGLSBOUNDEDRECORD = Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbData: T.DWORD,
    Data: ArrayType(T.BYTE, 1)
});
T.PEMRGLSBOUNDEDRECORD = Pointer(Struct('', {
    emr: T.EMR,
    rclBounds: T.RECTL,
    cbData: T.DWORD,
    Data: ArrayType(T.BYTE, 1)
}));
T.ENHMFENUMPROC = Pointer(Fn(T.INT, [[T.HDC], [Pointer(T.HANDLETABLE)], [Pointer(T.ENHMETARECORD)], [T.INT], [T.LPARAM]]));
T.DEVMODEA = Struct('', {
    dmDeviceName: ArrayType(T.BYTE, 32),
    dmSpecVersion: T.WORD,
    dmDriverVersion: T.WORD,
    dmSize: T.WORD,
    dmDriverExtra: T.WORD,
    dmFields: T.DWORD,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            dmOrientation: T.i16,
            dmPaperSize: T.i16,
            dmPaperLength: T.i16,
            dmPaperWidth: T.i16,
            dmScale: T.i16,
            dmCopies: T.i16,
            dmDefaultSource: T.i16,
            dmPrintQuality: T.i16
        }),
        __unnamed1: Struct('', {
            dmPosition: T.POINTL,
            dmDisplayOrientation: T.DWORD,
            dmDisplayFixedOutput: T.DWORD
        })
    }),
    dmColor: T.i16,
    dmDuplex: T.i16,
    dmYResolution: T.i16,
    dmTTOption: T.i16,
    dmCollate: T.i16,
    dmFormName: ArrayType(T.BYTE, 32),
    dmLogPixels: T.WORD,
    dmBitsPerPel: T.DWORD,
    dmPelsWidth: T.DWORD,
    dmPelsHeight: T.DWORD,
    __unnamed1: Union('', {
        dmDisplayFlags: T.DWORD,
        dmNup: T.DWORD
    }),
    dmDisplayFrequency: T.DWORD,
    dmICMMethod: T.DWORD,
    dmICMIntent: T.DWORD,
    dmMediaType: T.DWORD,
    dmDitherType: T.DWORD,
    dmReserved1: T.DWORD,
    dmReserved2: T.DWORD,
    dmPanningWidth: T.DWORD,
    dmPanningHeight: T.DWORD
});
T.PDEVMODEA = Pointer(Struct('', {
    dmDeviceName: ArrayType(T.BYTE, 32),
    dmSpecVersion: T.WORD,
    dmDriverVersion: T.WORD,
    dmSize: T.WORD,
    dmDriverExtra: T.WORD,
    dmFields: T.DWORD,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            dmOrientation: T.i16,
            dmPaperSize: T.i16,
            dmPaperLength: T.i16,
            dmPaperWidth: T.i16,
            dmScale: T.i16,
            dmCopies: T.i16,
            dmDefaultSource: T.i16,
            dmPrintQuality: T.i16
        }),
        __unnamed1: Struct('', {
            dmPosition: T.POINTL,
            dmDisplayOrientation: T.DWORD,
            dmDisplayFixedOutput: T.DWORD
        })
    }),
    dmColor: T.i16,
    dmDuplex: T.i16,
    dmYResolution: T.i16,
    dmTTOption: T.i16,
    dmCollate: T.i16,
    dmFormName: ArrayType(T.BYTE, 32),
    dmLogPixels: T.WORD,
    dmBitsPerPel: T.DWORD,
    dmPelsWidth: T.DWORD,
    dmPelsHeight: T.DWORD,
    __unnamed1: Union('', {
        dmDisplayFlags: T.DWORD,
        dmNup: T.DWORD
    }),
    dmDisplayFrequency: T.DWORD,
    dmICMMethod: T.DWORD,
    dmICMIntent: T.DWORD,
    dmMediaType: T.DWORD,
    dmDitherType: T.DWORD,
    dmReserved1: T.DWORD,
    dmReserved2: T.DWORD,
    dmPanningWidth: T.DWORD,
    dmPanningHeight: T.DWORD
}));
T.LPDEVMODEA = Pointer(Struct('', {
    dmDeviceName: ArrayType(T.BYTE, 32),
    dmSpecVersion: T.WORD,
    dmDriverVersion: T.WORD,
    dmSize: T.WORD,
    dmDriverExtra: T.WORD,
    dmFields: T.DWORD,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            dmOrientation: T.i16,
            dmPaperSize: T.i16,
            dmPaperLength: T.i16,
            dmPaperWidth: T.i16,
            dmScale: T.i16,
            dmCopies: T.i16,
            dmDefaultSource: T.i16,
            dmPrintQuality: T.i16
        }),
        __unnamed1: Struct('', {
            dmPosition: T.POINTL,
            dmDisplayOrientation: T.DWORD,
            dmDisplayFixedOutput: T.DWORD
        })
    }),
    dmColor: T.i16,
    dmDuplex: T.i16,
    dmYResolution: T.i16,
    dmTTOption: T.i16,
    dmCollate: T.i16,
    dmFormName: ArrayType(T.BYTE, 32),
    dmLogPixels: T.WORD,
    dmBitsPerPel: T.DWORD,
    dmPelsWidth: T.DWORD,
    dmPelsHeight: T.DWORD,
    __unnamed1: Union('', {
        dmDisplayFlags: T.DWORD,
        dmNup: T.DWORD
    }),
    dmDisplayFrequency: T.DWORD,
    dmICMMethod: T.DWORD,
    dmICMIntent: T.DWORD,
    dmMediaType: T.DWORD,
    dmDitherType: T.DWORD,
    dmReserved1: T.DWORD,
    dmReserved2: T.DWORD,
    dmPanningWidth: T.DWORD,
    dmPanningHeight: T.DWORD
}));
T.DEVMODEW = Struct('', {
    dmDeviceName: ArrayType(T.WCHAR, 32),
    dmSpecVersion: T.WORD,
    dmDriverVersion: T.WORD,
    dmSize: T.WORD,
    dmDriverExtra: T.WORD,
    dmFields: T.DWORD,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            dmOrientation: T.i16,
            dmPaperSize: T.i16,
            dmPaperLength: T.i16,
            dmPaperWidth: T.i16,
            dmScale: T.i16,
            dmCopies: T.i16,
            dmDefaultSource: T.i16,
            dmPrintQuality: T.i16
        }),
        __unnamed1: Struct('', {
            dmPosition: T.POINTL,
            dmDisplayOrientation: T.DWORD,
            dmDisplayFixedOutput: T.DWORD
        })
    }),
    dmColor: T.i16,
    dmDuplex: T.i16,
    dmYResolution: T.i16,
    dmTTOption: T.i16,
    dmCollate: T.i16,
    dmFormName: ArrayType(T.WCHAR, 32),
    dmLogPixels: T.WORD,
    dmBitsPerPel: T.DWORD,
    dmPelsWidth: T.DWORD,
    dmPelsHeight: T.DWORD,
    __unnamed1: Union('', {
        dmDisplayFlags: T.DWORD,
        dmNup: T.DWORD
    }),
    dmDisplayFrequency: T.DWORD,
    dmICMMethod: T.DWORD,
    dmICMIntent: T.DWORD,
    dmMediaType: T.DWORD,
    dmDitherType: T.DWORD,
    dmReserved1: T.DWORD,
    dmReserved2: T.DWORD,
    dmPanningWidth: T.DWORD,
    dmPanningHeight: T.DWORD
});
T.PDEVMODEW = Pointer(Struct('', {
    dmDeviceName: ArrayType(T.WCHAR, 32),
    dmSpecVersion: T.WORD,
    dmDriverVersion: T.WORD,
    dmSize: T.WORD,
    dmDriverExtra: T.WORD,
    dmFields: T.DWORD,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            dmOrientation: T.i16,
            dmPaperSize: T.i16,
            dmPaperLength: T.i16,
            dmPaperWidth: T.i16,
            dmScale: T.i16,
            dmCopies: T.i16,
            dmDefaultSource: T.i16,
            dmPrintQuality: T.i16
        }),
        __unnamed1: Struct('', {
            dmPosition: T.POINTL,
            dmDisplayOrientation: T.DWORD,
            dmDisplayFixedOutput: T.DWORD
        })
    }),
    dmColor: T.i16,
    dmDuplex: T.i16,
    dmYResolution: T.i16,
    dmTTOption: T.i16,
    dmCollate: T.i16,
    dmFormName: ArrayType(T.WCHAR, 32),
    dmLogPixels: T.WORD,
    dmBitsPerPel: T.DWORD,
    dmPelsWidth: T.DWORD,
    dmPelsHeight: T.DWORD,
    __unnamed1: Union('', {
        dmDisplayFlags: T.DWORD,
        dmNup: T.DWORD
    }),
    dmDisplayFrequency: T.DWORD,
    dmICMMethod: T.DWORD,
    dmICMIntent: T.DWORD,
    dmMediaType: T.DWORD,
    dmDitherType: T.DWORD,
    dmReserved1: T.DWORD,
    dmReserved2: T.DWORD,
    dmPanningWidth: T.DWORD,
    dmPanningHeight: T.DWORD
}));
T.LPDEVMODEW = Pointer(Struct('', {
    dmDeviceName: ArrayType(T.WCHAR, 32),
    dmSpecVersion: T.WORD,
    dmDriverVersion: T.WORD,
    dmSize: T.WORD,
    dmDriverExtra: T.WORD,
    dmFields: T.DWORD,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            dmOrientation: T.i16,
            dmPaperSize: T.i16,
            dmPaperLength: T.i16,
            dmPaperWidth: T.i16,
            dmScale: T.i16,
            dmCopies: T.i16,
            dmDefaultSource: T.i16,
            dmPrintQuality: T.i16
        }),
        __unnamed1: Struct('', {
            dmPosition: T.POINTL,
            dmDisplayOrientation: T.DWORD,
            dmDisplayFixedOutput: T.DWORD
        })
    }),
    dmColor: T.i16,
    dmDuplex: T.i16,
    dmYResolution: T.i16,
    dmTTOption: T.i16,
    dmCollate: T.i16,
    dmFormName: ArrayType(T.WCHAR, 32),
    dmLogPixels: T.WORD,
    dmBitsPerPel: T.DWORD,
    dmPelsWidth: T.DWORD,
    dmPelsHeight: T.DWORD,
    __unnamed1: Union('', {
        dmDisplayFlags: T.DWORD,
        dmNup: T.DWORD
    }),
    dmDisplayFrequency: T.DWORD,
    dmICMMethod: T.DWORD,
    dmICMIntent: T.DWORD,
    dmMediaType: T.DWORD,
    dmDitherType: T.DWORD,
    dmReserved1: T.DWORD,
    dmReserved2: T.DWORD,
    dmPanningWidth: T.DWORD,
    dmPanningHeight: T.DWORD
}));
T.DEVMODE = T.DEVMODEA;
T.PDEVMODE = T.PDEVMODEA;
T.LPDEVMODE = T.LPDEVMODEA;
T.DOCINFOA = Struct('', {
    cbSize: T.INT,
    lpszDocName: T.LPCSTR,
    lpszOutput: T.LPCSTR,
    lpszDatatype: T.LPCSTR,
    fwType: T.DWORD
});
T.LPDOCINFOA = Pointer(Struct('', {
    cbSize: T.INT,
    lpszDocName: T.LPCSTR,
    lpszOutput: T.LPCSTR,
    lpszDatatype: T.LPCSTR,
    fwType: T.DWORD
}));
T.DOCINFOW = Struct('', {
    cbSize: T.INT,
    lpszDocName: T.LPCWSTR,
    lpszOutput: T.LPCWSTR,
    lpszDatatype: T.LPCWSTR,
    fwType: T.DWORD
});
T.LPDOCINFOW = Pointer(Struct('', {
    cbSize: T.INT,
    lpszDocName: T.LPCWSTR,
    lpszOutput: T.LPCWSTR,
    lpszDatatype: T.LPCWSTR,
    fwType: T.DWORD
}));
T.DOCINFO = T.DOCINFOA;
T.LPDOCINFO = T.LPDOCINFOA;
T.RGNDATAHEADER = Struct('_RGNDATAHEADER', {
    dwSize: T.DWORD,
    iType: T.DWORD,
    nCount: T.DWORD,
    nRgnSize: T.DWORD,
    rcBound: T.RECT
});
T.PRGNDATAHEADER = Pointer(Struct('_RGNDATAHEADER', {
    dwSize: T.DWORD,
    iType: T.DWORD,
    nCount: T.DWORD,
    nRgnSize: T.DWORD,
    rcBound: T.RECT
}));
T.RGNDATA = Struct('_RGNDATA', {
    rdh: T.RGNDATAHEADER,
    Buffer: ArrayType(T.char, 1)
});
T.PRGNDATA = Pointer(Struct('_RGNDATA', {
    rdh: T.RGNDATAHEADER,
    Buffer: ArrayType(T.char, 1)
}));
T.LPRGNDATA = Pointer(Struct('_RGNDATA', {
    rdh: T.RGNDATAHEADER,
    Buffer: ArrayType(T.char, 1)
}));
T.ABORTPROC = Pointer(Fn(T.BOOL, [[T.HDC], [T.INT]]));
T.DISPLAY_DEVICEA = Struct('', {
    cb: T.DWORD,
    DeviceName: ArrayType(T.CHAR, 32),
    DeviceString: ArrayType(T.CHAR, 128),
    StateFlags: T.DWORD,
    DeviceID: ArrayType(T.CHAR, 128),
    DeviceKey: ArrayType(T.CHAR, 128)
});
T.PDISPLAY_DEVICEA = Pointer(Struct('', {
    cb: T.DWORD,
    DeviceName: ArrayType(T.CHAR, 32),
    DeviceString: ArrayType(T.CHAR, 128),
    StateFlags: T.DWORD,
    DeviceID: ArrayType(T.CHAR, 128),
    DeviceKey: ArrayType(T.CHAR, 128)
}));
T.LPDISPLAY_DEVICEA = Pointer(Struct('', {
    cb: T.DWORD,
    DeviceName: ArrayType(T.CHAR, 32),
    DeviceString: ArrayType(T.CHAR, 128),
    StateFlags: T.DWORD,
    DeviceID: ArrayType(T.CHAR, 128),
    DeviceKey: ArrayType(T.CHAR, 128)
}));
T.DISPLAY_DEVICEW = Struct('', {
    cb: T.DWORD,
    DeviceName: ArrayType(T.WCHAR, 32),
    DeviceString: ArrayType(T.WCHAR, 128),
    StateFlags: T.DWORD,
    DeviceID: ArrayType(T.WCHAR, 128),
    DeviceKey: ArrayType(T.WCHAR, 128)
});
T.PDISPLAY_DEVICEW = Pointer(Struct('', {
    cb: T.DWORD,
    DeviceName: ArrayType(T.WCHAR, 32),
    DeviceString: ArrayType(T.WCHAR, 128),
    StateFlags: T.DWORD,
    DeviceID: ArrayType(T.WCHAR, 128),
    DeviceKey: ArrayType(T.WCHAR, 128)
}));
T.LPDISPLAY_DEVICEW = Pointer(Struct('', {
    cb: T.DWORD,
    DeviceName: ArrayType(T.WCHAR, 32),
    DeviceString: ArrayType(T.WCHAR, 128),
    StateFlags: T.DWORD,
    DeviceID: ArrayType(T.WCHAR, 128),
    DeviceKey: ArrayType(T.WCHAR, 128)
}));
T.DISPLAY_DEVICE = T.DISPLAY_DEVICEA;
T.PDISPLAY_DEVICE = T.PDISPLAY_DEVICEA;
T.LPDISPLAY_DEVICE = T.LPDISPLAY_DEVICEA;
T.COLOR16 = T.USHORT;
T.TRIVERTEX = Struct('_TRIVERTEX', {
    x: T.LONG,
    y: T.LONG,
    Red: T.COLOR16,
    Green: T.COLOR16,
    Blue: T.COLOR16,
    Alpha: T.COLOR16
});
T.PTRIVERTEX = Pointer(Struct('_TRIVERTEX', {
    x: T.LONG,
    y: T.LONG,
    Red: T.COLOR16,
    Green: T.COLOR16,
    Blue: T.COLOR16,
    Alpha: T.COLOR16
}));
T.LPTRIVERTEX = Pointer(Struct('_TRIVERTEX', {
    x: T.LONG,
    y: T.LONG,
    Red: T.COLOR16,
    Green: T.COLOR16,
    Blue: T.COLOR16,
    Alpha: T.COLOR16
}));
T.GRADIENT_TRIANGLE = Struct('_GRADIENT_TRIANGLE', {
    Vertex1: T.ULONG,
    Vertex2: T.ULONG,
    Vertex3: T.ULONG
});
T.PGRADIENT_TRIANGLE = Pointer(Struct('_GRADIENT_TRIANGLE', {
    Vertex1: T.ULONG,
    Vertex2: T.ULONG,
    Vertex3: T.ULONG
}));
T.LPGRADIENT_TRIANGLE = Pointer(Struct('_GRADIENT_TRIANGLE', {
    Vertex1: T.ULONG,
    Vertex2: T.ULONG,
    Vertex3: T.ULONG
}));
T.GRADIENT_RECT = Struct('_GRADIENT_RECT', {
    UpperLeft: T.ULONG,
    LowerRight: T.ULONG
});
T.PGRADIENT_RECT = Pointer(Struct('_GRADIENT_RECT', {
    UpperLeft: T.ULONG,
    LowerRight: T.ULONG
}));
T.LPGRADIENT_RECT = Pointer(Struct('_GRADIENT_RECT', {
    UpperLeft: T.ULONG,
    LowerRight: T.ULONG
}));
T.BLENDFUNCTION = Struct('_BLENDFUNCTION', {
    BlendOp: T.BYTE,
    BlendFlags: T.BYTE,
    SourceConstantAlpha: T.BYTE,
    AlphaFormat: T.BYTE
});
T.PBLENDFUNCTION = Pointer(Struct('_BLENDFUNCTION', {
    BlendOp: T.BYTE,
    BlendFlags: T.BYTE,
    SourceConstantAlpha: T.BYTE,
    AlphaFormat: T.BYTE
}));
T.DRAWPATRECT = Struct('_DRAWPATRECT', {
    ptPosition: T.POINT,
    ptSize: T.POINT,
    wStyle: T.WORD,
    wPattern: T.WORD
});
T.PDRAWPATRECT = Pointer(Struct('_DRAWPATRECT', {
    ptPosition: T.POINT,
    ptSize: T.POINT,
    wStyle: T.WORD,
    wPattern: T.WORD
}));
T.WCRANGE = Struct('tagWCRANGE', {
    wcLow: T.WCHAR,
    cGlyphs: T.USHORT
});
T.PWCRANGE = Pointer(Struct('tagWCRANGE', {
    wcLow: T.WCHAR,
    cGlyphs: T.USHORT
}));
T.LPWCRANGE = Pointer(Struct('tagWCRANGE', {
    wcLow: T.WCHAR,
    cGlyphs: T.USHORT
}));
T.GLYPHSET = Struct('tagGLYPHSET', {
    cbThis: T.DWORD,
    flAccel: T.DWORD,
    cGlyphsSupported: T.DWORD,
    cRanges: T.DWORD,
    ranges: ArrayType(T.WCRANGE, 1)
});
T.PGLYPHSET = Pointer(Struct('tagGLYPHSET', {
    cbThis: T.DWORD,
    flAccel: T.DWORD,
    cGlyphsSupported: T.DWORD,
    cRanges: T.DWORD,
    ranges: ArrayType(T.WCRANGE, 1)
}));
T.LPGLYPHSET = Pointer(Struct('tagGLYPHSET', {
    cbThis: T.DWORD,
    flAccel: T.DWORD,
    cGlyphsSupported: T.DWORD,
    cRanges: T.DWORD,
    ranges: ArrayType(T.WCRANGE, 1)
}));
T.DLGPROC = Pointer(Fn(T.INT_PTR, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]));
T.DRAWSTATEPROC = Pointer(Fn(T.BOOL, [[T.HDC], [T.LPARAM], [T.WPARAM], [T.i32], [T.i32]]));
T.EDITWORDBREAKPROCA = Pointer(Fn(T.INT, [[T.LPSTR], [T.INT], [T.INT], [T.INT]]));
T.EDITWORDBREAKPROCW = Pointer(Fn(T.INT, [[T.LPWSTR], [T.INT], [T.INT], [T.INT]]));
T.GRAYSTRINGPROC = Pointer(Fn(T.BOOL, [[T.HDC], [T.LPARAM], [T.INT]]));
T.HOOKPROC = Pointer(Fn(T.LRESULT, [[T.INT], [T.WPARAM], [T.LPARAM]]));
T.NAMEENUMPROCA = Pointer(Fn(T.BOOL, [[T.LPSTR], [T.LPARAM]]));
T.NAMEENUMPROCW = Pointer(Fn(T.BOOL, [[T.LPWSTR], [T.LPARAM]]));
T.PROPENUMPROCA = Pointer(Fn(T.BOOL, [[T.HWND], [T.LPCSTR], [T.HANDLE]]));
T.PROPENUMPROCW = Pointer(Fn(T.BOOL, [[T.HWND], [T.LPCWSTR], [T.HANDLE]]));
T.PROPENUMPROCEXA = Pointer(Fn(T.BOOL, [[T.HWND], [T.LPSTR], [T.HANDLE], [T.ULONG_PTR]]));
T.PROPENUMPROCEXW = Pointer(Fn(T.BOOL, [[T.HWND], [T.LPWSTR], [T.HANDLE], [T.ULONG_PTR]]));
T.SENDASYNCPROC = Pointer(Fn(null, [[T.HWND], [T.UINT], [T.ULONG_PTR], [T.LRESULT]]));
T.TIMERPROC = Pointer(Fn(null, [[T.HWND], [T.UINT], [T.UINT_PTR], [T.DWORD]]));
T.WINEVENTPROC = Pointer(Fn(null, [[T.HWINEVENTHOOK], [T.DWORD], [T.HWND], [T.LONG], [T.LONG], [T.DWORD], [T.DWORD]]));
T.WNDENUMPROC = Pointer(Fn(T.BOOL, [[T.HWND], [T.LPARAM]]));
T.WINSTAENUMPROCA = T.NAMEENUMPROCA;
T.DESKTOPENUMPROCA = T.NAMEENUMPROCA;
T.WINSTAENUMPROCW = T.NAMEENUMPROCW;
T.DESKTOPENUMPROCW = T.NAMEENUMPROCW;
T.WNDPROC = Pointer(Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]));
T.DESKTOPENUMPROC = T.DESKTOPENUMPROCA;
T.EDITWORDBREAKPROC = T.EDITWORDBREAKPROCA;
T.NAMEENUMPROC = T.NAMEENUMPROCA;
T.PROPENUMPROC = T.PROPENUMPROCA;
T.PROPENUMPROCEX = T.PROPENUMPROCEXA;
T.WINSTAENUMPROC = T.WINSTAENUMPROCA;
T.HDWP = T.HANDLE;
T.USEROBJECTFLAGS = Struct('tagUSEROBJECTFLAGS', {
    fInherit: T.BOOL,
    fReserved: T.BOOL,
    dwFlags: T.DWORD
});
T.PUSEROBJECTFLAGS = Pointer(Struct('tagUSEROBJECTFLAGS', {
    fInherit: T.BOOL,
    fReserved: T.BOOL,
    dwFlags: T.DWORD
}));
T.BSMINFO = Struct('tagBSMINFO', {
    cbSize: T.UINT,
    hdesk: T.HDESK,
    hwnd: T.HWND,
    luid: T.LUID
});
T.PBSMINFO = Pointer(Struct('tagBSMINFO', {
    cbSize: T.UINT,
    hdesk: T.HDESK,
    hwnd: T.HWND,
    luid: T.LUID
}));
T.FILTERKEYS = Struct('tagFILTERKEYS', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iWaitMSec: T.DWORD,
    iDelayMSec: T.DWORD,
    iRepeatMSec: T.DWORD,
    iBounceMSec: T.DWORD
});
T.LPFILTERKEYS = Pointer(Struct('tagFILTERKEYS', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iWaitMSec: T.DWORD,
    iDelayMSec: T.DWORD,
    iRepeatMSec: T.DWORD,
    iBounceMSec: T.DWORD
}));
T.TOGGLEKEYS = Struct('tagTOGGLEKEYS', {
    cbSize: T.DWORD,
    dwFlags: T.DWORD
});
T.LPTOGGLEKEYS = Pointer(Struct('tagTOGGLEKEYS', {
    cbSize: T.DWORD,
    dwFlags: T.DWORD
}));
T.MOUSEKEYS = Struct('tagMOUSEKEYS', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iMaxSpeed: T.DWORD,
    iTimeToMaxSpeed: T.DWORD,
    iCtrlSpeed: T.DWORD,
    dwReserved1: T.DWORD,
    dwReserved2: T.DWORD
});
T.LPMOUSEKEYS = Pointer(Struct('tagMOUSEKEYS', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iMaxSpeed: T.DWORD,
    iTimeToMaxSpeed: T.DWORD,
    iCtrlSpeed: T.DWORD,
    dwReserved1: T.DWORD,
    dwReserved2: T.DWORD
}));
T.MOUSEMOVEPOINT = Struct('tagMOUSEMOVEPOINT', {
    x: T.i32,
    y: T.i32,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
});
T.PMOUSEMOVEPOINT = Pointer(Struct('tagMOUSEMOVEPOINT', {
    x: T.i32,
    y: T.i32,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));
T.LPMOUSEMOVEPOINT = Pointer(Struct('tagMOUSEMOVEPOINT', {
    x: T.i32,
    y: T.i32,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));
T.STICKYKEYS = Struct('tagSTICKYKEYS', {
    cbSize: T.DWORD,
    dwFlags: T.DWORD
});
T.LPSTICKYKEYS = Pointer(Struct('tagSTICKYKEYS', {
    cbSize: T.DWORD,
    dwFlags: T.DWORD
}));
T.ACCESSTIMEOUT = Struct('tagACCESSTIMEOUT', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iTimeOutMSec: T.DWORD
});
T.LPACCESSTIMEOUT = Pointer(Struct('tagACCESSTIMEOUT', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iTimeOutMSec: T.DWORD
}));
T.SERIALKEYSA = Struct('tagSERIALKEYSA', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    lpszActivePort: T.LPSTR,
    lpszPort: T.LPSTR,
    iBaudRate: T.UINT,
    iPortState: T.UINT,
    iActive: T.UINT
});
T.LPSERIALKEYSA = Pointer(Struct('tagSERIALKEYSA', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    lpszActivePort: T.LPSTR,
    lpszPort: T.LPSTR,
    iBaudRate: T.UINT,
    iPortState: T.UINT,
    iActive: T.UINT
}));
T.SERIALKEYSW = Struct('tagSERIALKEYSW', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    lpszActivePort: T.LPWSTR,
    lpszPort: T.LPWSTR,
    iBaudRate: T.UINT,
    iPortState: T.UINT,
    iActive: T.UINT
});
T.LPSERIALKEYSW = Pointer(Struct('tagSERIALKEYSW', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    lpszActivePort: T.LPWSTR,
    lpszPort: T.LPWSTR,
    iBaudRate: T.UINT,
    iPortState: T.UINT,
    iActive: T.UINT
}));
T.SERIALKEYS = T.SERIALKEYSA;
T.LPSERIALKEYS = T.LPSERIALKEYSA;
T.SOUNDSENTRYA = Struct('tagSOUNDSENTRYA', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iFSTextEffect: T.DWORD,
    iFSTextEffectMSec: T.DWORD,
    iFSTextEffectColorBits: T.DWORD,
    iFSGrafEffect: T.DWORD,
    iFSGrafEffectMSec: T.DWORD,
    iFSGrafEffectColor: T.DWORD,
    iWindowsEffect: T.DWORD,
    iWindowsEffectMSec: T.DWORD,
    lpszWindowsEffectDLL: T.LPSTR,
    iWindowsEffectOrdinal: T.DWORD
});
T.LPSOUNDSENTRYA = Pointer(Struct('tagSOUNDSENTRYA', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iFSTextEffect: T.DWORD,
    iFSTextEffectMSec: T.DWORD,
    iFSTextEffectColorBits: T.DWORD,
    iFSGrafEffect: T.DWORD,
    iFSGrafEffectMSec: T.DWORD,
    iFSGrafEffectColor: T.DWORD,
    iWindowsEffect: T.DWORD,
    iWindowsEffectMSec: T.DWORD,
    lpszWindowsEffectDLL: T.LPSTR,
    iWindowsEffectOrdinal: T.DWORD
}));
T.SOUNDSENTRYW = Struct('tagSOUNDSENTRYW', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iFSTextEffect: T.DWORD,
    iFSTextEffectMSec: T.DWORD,
    iFSTextEffectColorBits: T.DWORD,
    iFSGrafEffect: T.DWORD,
    iFSGrafEffectMSec: T.DWORD,
    iFSGrafEffectColor: T.DWORD,
    iWindowsEffect: T.DWORD,
    iWindowsEffectMSec: T.DWORD,
    lpszWindowsEffectDLL: T.LPWSTR,
    iWindowsEffectOrdinal: T.DWORD
});
T.LPSOUNDSENTRYW = Pointer(Struct('tagSOUNDSENTRYW', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iFSTextEffect: T.DWORD,
    iFSTextEffectMSec: T.DWORD,
    iFSTextEffectColorBits: T.DWORD,
    iFSGrafEffect: T.DWORD,
    iFSGrafEffectMSec: T.DWORD,
    iFSGrafEffectColor: T.DWORD,
    iWindowsEffect: T.DWORD,
    iWindowsEffectMSec: T.DWORD,
    lpszWindowsEffectDLL: T.LPWSTR,
    iWindowsEffectOrdinal: T.DWORD
}));
T.SOUNDSENTRY = T.SOUNDSENTRYA;
T.LPSOUNDSENTRY = T.LPSOUNDSENTRYA;
T.HIGHCONTRASTA = Struct('tagHIGHCONTRASTA', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    lpszDefaultScheme: T.LPSTR
});
T.LPHIGHCONTRASTA = Pointer(Struct('tagHIGHCONTRASTA', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    lpszDefaultScheme: T.LPSTR
}));
T.HIGHCONTRASTW = Struct('tagHIGHCONTRASTW', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    lpszDefaultScheme: T.LPWSTR
});
T.LPHIGHCONTRASTW = Pointer(Struct('tagHIGHCONTRASTW', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    lpszDefaultScheme: T.LPWSTR
}));
T.HIGHCONTRAST = T.HIGHCONTRASTA;
T.LPHIGHCONTRAST = T.LPHIGHCONTRASTA;
T.EVENTMSG = Struct('tagEVENTMSG', {
    message: T.UINT,
    paramL: T.UINT,
    paramH: T.UINT,
    time: T.DWORD,
    hwnd: T.HWND
});
T.PEVENTMSG = Pointer(Struct('tagEVENTMSG', {
    message: T.UINT,
    paramL: T.UINT,
    paramH: T.UINT,
    time: T.DWORD,
    hwnd: T.HWND
}));
T.LPEVENTMSG = Pointer(Struct('tagEVENTMSG', {
    message: T.UINT,
    paramL: T.UINT,
    paramH: T.UINT,
    time: T.DWORD,
    hwnd: T.HWND
}));
T.KBDLLHOOKSTRUCT = Struct('tagKBDLLHOOKSTRUCT', {
    vkCode: T.DWORD,
    scanCode: T.DWORD,
    flags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
});
T.LPKBDLLHOOKSTRUCT = Pointer(Struct('tagKBDLLHOOKSTRUCT', {
    vkCode: T.DWORD,
    scanCode: T.DWORD,
    flags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));
T.PKBDLLHOOKSTRUCT = Pointer(Struct('tagKBDLLHOOKSTRUCT', {
    vkCode: T.DWORD,
    scanCode: T.DWORD,
    flags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));
T.MSLLHOOKSTRUCT = Struct('tagMSLLHOOKSTRUCT', {
    pt: T.POINT,
    mouseData: T.DWORD,
    flags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
});
T.LPMSLLHOOKSTRUCT = Pointer(Struct('tagMSLLHOOKSTRUCT', {
    pt: T.POINT,
    mouseData: T.DWORD,
    flags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));
T.PMSLLHOOKSTRUCT = Pointer(Struct('tagMSLLHOOKSTRUCT', {
    pt: T.POINT,
    mouseData: T.DWORD,
    flags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));
T.MOUSEHOOKSTRUCT = Struct('', {
    pt: T.POINT,
    hwnd: T.HWND,
    wHitTestCode: T.UINT,
    dwExtraInfo: T.ULONG_PTR
});
T.PMOUSEHOOKSTRUCT = Pointer(Struct('', {
    pt: T.POINT,
    hwnd: T.HWND,
    wHitTestCode: T.UINT,
    dwExtraInfo: T.ULONG_PTR
}));
T.LPMOUSEHOOKSTRUCT = Pointer(Struct('', {
    pt: T.POINT,
    hwnd: T.HWND,
    wHitTestCode: T.UINT,
    dwExtraInfo: T.ULONG_PTR
}));
T.HARDWAREHOOKSTRUCT = Struct('', {
    hwnd: T.HWND,
    message: T.UINT,
    wParam: T.WPARAM,
    lParam: T.LPARAM
});
T.PHARDWAREHOOKSTRUCT = Pointer(Struct('', {
    hwnd: T.HWND,
    message: T.UINT,
    wParam: T.WPARAM,
    lParam: T.LPARAM
}));
T.LPHARDWAREHOOKSTRUCT = Pointer(Struct('', {
    hwnd: T.HWND,
    message: T.UINT,
    wParam: T.WPARAM,
    lParam: T.LPARAM
}));
T.DEBUGHOOKINFO = Struct('tagDEBUGHOOKINFO', {
    idThread: T.DWORD,
    idThreadInstaller: T.DWORD,
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    code: T.INT
});
T.PDEBUGHOOKINFO = Pointer(Struct('tagDEBUGHOOKINFO', {
    idThread: T.DWORD,
    idThreadInstaller: T.DWORD,
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    code: T.INT
}));
T.LPDEBUGHOOKINFO = Pointer(Struct('tagDEBUGHOOKINFO', {
    idThread: T.DWORD,
    idThreadInstaller: T.DWORD,
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    code: T.INT
}));
T.MOUSEINPUT = Struct('tagMOUSEINPUT', {
    dx: T.LONG,
    dy: T.LONG,
    mouseData: T.DWORD,
    dwFlags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
});
T.PMOUSEINPUT = Pointer(Struct('tagMOUSEINPUT', {
    dx: T.LONG,
    dy: T.LONG,
    mouseData: T.DWORD,
    dwFlags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));
T.LPMOUSEINPUT = Pointer(Struct('tagMOUSEINPUT', {
    dx: T.LONG,
    dy: T.LONG,
    mouseData: T.DWORD,
    dwFlags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));
T.KEYBDINPUT = Struct('tagKEYBDINPUT', {
    wVk: T.WORD,
    wScan: T.WORD,
    dwFlags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
});
T.PKEYBDINPUT = Pointer(Struct('tagKEYBDINPUT', {
    wVk: T.WORD,
    wScan: T.WORD,
    dwFlags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));
T.LPKEYBDINPUT = Pointer(Struct('tagKEYBDINPUT', {
    wVk: T.WORD,
    wScan: T.WORD,
    dwFlags: T.DWORD,
    time: T.DWORD,
    dwExtraInfo: T.ULONG_PTR
}));
T.HARDWAREINPUT = Struct('tagHARDWAREINPUT', {
    uMsg: T.DWORD,
    wParamL: T.WORD,
    wParamH: T.WORD
});
T.PHARDWAREINPUT = Pointer(Struct('tagHARDWAREINPUT', {
    uMsg: T.DWORD,
    wParamL: T.WORD,
    wParamH: T.WORD
}));
T.LPHARDWAREINPUT = Pointer(Struct('tagHARDWAREINPUT', {
    uMsg: T.DWORD,
    wParamL: T.WORD,
    wParamH: T.WORD
}));
T.INPUT = Struct('tagINPUT', {
    type: T.DWORD,
    __unnamed0: Union('', {
        mi: T.MOUSEINPUT,
        ki: T.KEYBDINPUT,
        hi: T.HARDWAREINPUT
    })
});
T.PINPUT = Pointer(Struct('tagINPUT', {
    type: T.DWORD,
    __unnamed0: Union('', {
        mi: T.MOUSEINPUT,
        ki: T.KEYBDINPUT,
        hi: T.HARDWAREINPUT
    })
}));
T.LPINPUT = Pointer(Struct('tagINPUT', {
    type: T.DWORD,
    __unnamed0: Union('', {
        mi: T.MOUSEINPUT,
        ki: T.KEYBDINPUT,
        hi: T.HARDWAREINPUT
    })
}));
T.HRAWINPUT = Pointer(Struct('HRAWINPUT__', {
    unused: T.i32
}));
T.RAWINPUTDEVICELIST = Struct('tagRAWINPUTDEVICELIST', {
    hDevice: T.HANDLE,
    dwType: T.DWORD
});
T.PRAWINPUTDEVICELIST = Pointer(Struct('tagRAWINPUTDEVICELIST', {
    hDevice: T.HANDLE,
    dwType: T.DWORD
}));
T.RAWHID = Struct('tagRAWHID', {
    dwSizeHid: T.DWORD,
    dwCount: T.DWORD,
    bRawData: T.BYTE
});
T.LPRAWHID = Pointer(Struct('tagRAWHID', {
    dwSizeHid: T.DWORD,
    dwCount: T.DWORD,
    bRawData: T.BYTE
}));
T.RAWKEYBOARD = Struct('tagRAWKEYBOARD', {
    MakeCode: T.USHORT,
    Flags: T.USHORT,
    Reserved: T.USHORT,
    VKey: T.USHORT,
    Message: T.UINT,
    ExtraInformation: T.ULONG
});
T.PRAWKEYBOARD = Pointer(Struct('tagRAWKEYBOARD', {
    MakeCode: T.USHORT,
    Flags: T.USHORT,
    Reserved: T.USHORT,
    VKey: T.USHORT,
    Message: T.UINT,
    ExtraInformation: T.ULONG
}));
T.LPRAWKEYBOARD = Pointer(Struct('tagRAWKEYBOARD', {
    MakeCode: T.USHORT,
    Flags: T.USHORT,
    Reserved: T.USHORT,
    VKey: T.USHORT,
    Message: T.UINT,
    ExtraInformation: T.ULONG
}));
T.RAWMOUSE = Struct('tagRAWMOUSE', {
    usFlags: T.USHORT,
    __unnamed0: Union('', {
        ulButtons: T.ULONG,
        __unnamed0: Struct('', {
            usButtonFlags: T.USHORT,
            usButtonData: T.USHORT
        })
    }),
    ulRawButtons: T.ULONG,
    lLastX: T.LONG,
    lLastY: T.LONG,
    ulExtraInformation: T.ULONG
});
T.PRAWMOUSE = Pointer(Struct('tagRAWMOUSE', {
    usFlags: T.USHORT,
    __unnamed0: Union('', {
        ulButtons: T.ULONG,
        __unnamed0: Struct('', {
            usButtonFlags: T.USHORT,
            usButtonData: T.USHORT
        })
    }),
    ulRawButtons: T.ULONG,
    lLastX: T.LONG,
    lLastY: T.LONG,
    ulExtraInformation: T.ULONG
}));
T.LPRAWMOUSE = Pointer(Struct('tagRAWMOUSE', {
    usFlags: T.USHORT,
    __unnamed0: Union('', {
        ulButtons: T.ULONG,
        __unnamed0: Struct('', {
            usButtonFlags: T.USHORT,
            usButtonData: T.USHORT
        })
    }),
    ulRawButtons: T.ULONG,
    lLastX: T.LONG,
    lLastY: T.LONG,
    ulExtraInformation: T.ULONG
}));
T.RAWINPUTHEADER = Struct('tagRAWINPUTHEADER', {
    dwType: T.DWORD,
    dwSize: T.DWORD,
    hDevice: T.HANDLE,
    wParam: T.WPARAM
});
T.PRAWINPUTHEADER = Pointer(Struct('tagRAWINPUTHEADER', {
    dwType: T.DWORD,
    dwSize: T.DWORD,
    hDevice: T.HANDLE,
    wParam: T.WPARAM
}));
T.RAWINPUT = Struct('tagRAWINPUT', {
    header: T.RAWINPUTHEADER,
    data: Union('', {
        mouse: T.RAWMOUSE,
        keyboard: T.RAWKEYBOARD,
        hid: T.RAWHID
    })
});
T.PRAWINPUT = Pointer(Struct('tagRAWINPUT', {
    header: T.RAWINPUTHEADER,
    data: Union('', {
        mouse: T.RAWMOUSE,
        keyboard: T.RAWKEYBOARD,
        hid: T.RAWHID
    })
}));
T.LPRAWINPUT = Pointer(Struct('tagRAWINPUT', {
    header: T.RAWINPUTHEADER,
    data: Union('', {
        mouse: T.RAWMOUSE,
        keyboard: T.RAWKEYBOARD,
        hid: T.RAWHID
    })
}));
T.RAWINPUTDEVICE = Struct('tagRAWINPUTDEVICE', {
    usUsagePage: T.USHORT,
    usUsage: T.USHORT,
    dwFlags: T.DWORD,
    hwndTarget: T.HWND
});
T.PRAWINPUTDEVICE = Pointer(Struct('tagRAWINPUTDEVICE', {
    usUsagePage: T.USHORT,
    usUsage: T.USHORT,
    dwFlags: T.DWORD,
    hwndTarget: T.HWND
}));
T.LPRAWINPUTDEVICE = Pointer(Struct('tagRAWINPUTDEVICE', {
    usUsagePage: T.USHORT,
    usUsage: T.USHORT,
    dwFlags: T.DWORD,
    hwndTarget: T.HWND
}));
T.RID_DEVICE_INFO_MOUSE = Struct('tagRID_DEVICE_INFO_MOUSE', {
    dwId: T.DWORD,
    dwNumberOfButtons: T.DWORD,
    dwSampleRate: T.DWORD,
    fHasHorizontalWheel: T.BOOL
});
T.PRID_DEVICE_INFO_MOUSE = Pointer(Struct('tagRID_DEVICE_INFO_MOUSE', {
    dwId: T.DWORD,
    dwNumberOfButtons: T.DWORD,
    dwSampleRate: T.DWORD,
    fHasHorizontalWheel: T.BOOL
}));
T.RID_DEVICE_INFO_KEYBOARD = Struct('tagRID_DEVICE_INFO_KEYBOARD', {
    dwType: T.DWORD,
    dwSubType: T.DWORD,
    dwKeyboardMode: T.DWORD,
    dwNumberOfFunctionKeys: T.DWORD,
    dwNumberOfIndicators: T.DWORD,
    dwNumberOfKeysTotal: T.DWORD
});
T.PRID_DEVICE_INFO_KEYBOARD = Pointer(Struct('tagRID_DEVICE_INFO_KEYBOARD', {
    dwType: T.DWORD,
    dwSubType: T.DWORD,
    dwKeyboardMode: T.DWORD,
    dwNumberOfFunctionKeys: T.DWORD,
    dwNumberOfIndicators: T.DWORD,
    dwNumberOfKeysTotal: T.DWORD
}));
T.RID_DEVICE_INFO_HID = Struct('tagRID_DEVICE_INFO_HID', {
    dwVendorId: T.DWORD,
    dwProductId: T.DWORD,
    dwVersionNumber: T.DWORD,
    usUsagePage: T.USHORT,
    usUsage: T.USHORT
});
T.PRID_DEVICE_INFO_HID = Pointer(Struct('tagRID_DEVICE_INFO_HID', {
    dwVendorId: T.DWORD,
    dwProductId: T.DWORD,
    dwVersionNumber: T.DWORD,
    usUsagePage: T.USHORT,
    usUsage: T.USHORT
}));
T.RID_DEVICE_INFO = Struct('tagRID_DEVICE_INFO', {
    cbSize: T.DWORD,
    dwType: T.DWORD,
    __unnamed0: Union('', {
        mouse: T.RID_DEVICE_INFO_MOUSE,
        keyboard: T.RID_DEVICE_INFO_KEYBOARD,
        hid: T.RID_DEVICE_INFO_HID
    })
});
T.PRID_DEVICE_INFO = Pointer(Struct('tagRID_DEVICE_INFO', {
    cbSize: T.DWORD,
    dwType: T.DWORD,
    __unnamed0: Union('', {
        mouse: T.RID_DEVICE_INFO_MOUSE,
        keyboard: T.RID_DEVICE_INFO_KEYBOARD,
        hid: T.RID_DEVICE_INFO_HID
    })
}));
T.LPRID_DEVICE_INFO = Pointer(Struct('tagRID_DEVICE_INFO', {
    cbSize: T.DWORD,
    dwType: T.DWORD,
    __unnamed0: Union('', {
        mouse: T.RID_DEVICE_INFO_MOUSE,
        keyboard: T.RID_DEVICE_INFO_KEYBOARD,
        hid: T.RID_DEVICE_INFO_HID
    })
}));
T.GUITHREADINFO = Struct('tagGUITHREADINFO', {
    cbSize: T.DWORD,
    flags: T.DWORD,
    hwndActive: T.HWND,
    hwndFocus: T.HWND,
    hwndCapture: T.HWND,
    hwndMenuOwner: T.HWND,
    hwndMoveSize: T.HWND,
    hwndCaret: T.HWND,
    rcCaret: T.RECT
});
T.PGUITHREADINFO = Pointer(Struct('tagGUITHREADINFO', {
    cbSize: T.DWORD,
    flags: T.DWORD,
    hwndActive: T.HWND,
    hwndFocus: T.HWND,
    hwndCapture: T.HWND,
    hwndMenuOwner: T.HWND,
    hwndMoveSize: T.HWND,
    hwndCaret: T.HWND,
    rcCaret: T.RECT
}));
T.LPGUITHREADINFO = Pointer(Struct('tagGUITHREADINFO', {
    cbSize: T.DWORD,
    flags: T.DWORD,
    hwndActive: T.HWND,
    hwndFocus: T.HWND,
    hwndCapture: T.HWND,
    hwndMenuOwner: T.HWND,
    hwndMoveSize: T.HWND,
    hwndCaret: T.HWND,
    rcCaret: T.RECT
}));
T.ANIMATIONINFO = Struct('tagANIMATIONINFO', {
    cbSize: T.UINT,
    iMinAnimate: T.INT
});
T.LPANIMATIONINFO = Pointer(Struct('tagANIMATIONINFO', {
    cbSize: T.UINT,
    iMinAnimate: T.INT
}));
T.NMHDR = Struct('tagNMHDR', {
    hwndFrom: T.HWND,
    idFrom: T.UINT_PTR,
    code: T.UINT
});
T.LPNMHDR = Pointer(Struct('tagNMHDR', {
    hwndFrom: T.HWND,
    idFrom: T.UINT_PTR,
    code: T.UINT
}));
T.DRAWTEXTPARAMS = Struct('tagDRAWTEXTPARAMS', {
    cbSize: T.UINT,
    iTabLength: T.INT,
    iLeftMargin: T.INT,
    iRightMargin: T.INT,
    uiLengthDrawn: T.UINT
});
T.LPDRAWTEXTPARAMS = Pointer(Struct('tagDRAWTEXTPARAMS', {
    cbSize: T.UINT,
    iTabLength: T.INT,
    iLeftMargin: T.INT,
    iRightMargin: T.INT,
    uiLengthDrawn: T.UINT
}));
T.CWPSTRUCT = Struct('', {
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    message: T.UINT,
    hwnd: T.HWND
});
T.PCWPSTRUCT = Pointer(Struct('', {
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    message: T.UINT,
    hwnd: T.HWND
}));
T.LPCWPSTRUCT = Pointer(Struct('', {
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    message: T.UINT,
    hwnd: T.HWND
}));
T.CWPRETSTRUCT = Struct('', {
    lResult: T.LRESULT,
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    message: T.DWORD,
    hwnd: T.HWND
});
T.PCWPRETSTRUCT = Pointer(Struct('', {
    lResult: T.LRESULT,
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    message: T.DWORD,
    hwnd: T.HWND
}));
T.LPCWPRETSTRUCT = Pointer(Struct('', {
    lResult: T.LRESULT,
    lParam: T.LPARAM,
    wParam: T.WPARAM,
    message: T.DWORD,
    hwnd: T.HWND
}));
T.WINDOWPLACEMENT = Struct('tagWINDOWPLACEMENT', {
    length: T.UINT,
    flags: T.UINT,
    showCmd: T.UINT,
    ptMinPosition: T.POINT,
    ptMaxPosition: T.POINT,
    rcNormalPosition: T.RECT
});
T.PWINDOWPLACEMENT = Pointer(Struct('tagWINDOWPLACEMENT', {
    length: T.UINT,
    flags: T.UINT,
    showCmd: T.UINT,
    ptMinPosition: T.POINT,
    ptMaxPosition: T.POINT,
    rcNormalPosition: T.RECT
}));
T.LPWINDOWPLACEMENT = Pointer(Struct('tagWINDOWPLACEMENT', {
    length: T.UINT,
    flags: T.UINT,
    showCmd: T.UINT,
    ptMinPosition: T.POINT,
    ptMaxPosition: T.POINT,
    rcNormalPosition: T.RECT
}));
T.CREATESTRUCTA = Struct('tagCREATESTRUCTA', {
    lpCreateParams: T.LPVOID,
    hInstance: T.HINSTANCE,
    hMenu: T.HMENU,
    hwndParent: T.HWND,
    cy: T.INT,
    cx: T.INT,
    y: T.INT,
    x: T.INT,
    style: T.LONG,
    lpszName: T.LPCSTR,
    lpszClass: T.LPCSTR,
    dwExStyle: T.DWORD
});
T.LPCREATESTRUCTA = Pointer(Struct('tagCREATESTRUCTA', {
    lpCreateParams: T.LPVOID,
    hInstance: T.HINSTANCE,
    hMenu: T.HMENU,
    hwndParent: T.HWND,
    cy: T.INT,
    cx: T.INT,
    y: T.INT,
    x: T.INT,
    style: T.LONG,
    lpszName: T.LPCSTR,
    lpszClass: T.LPCSTR,
    dwExStyle: T.DWORD
}));
T.CREATESTRUCTW = Struct('tagCREATESTRUCTW', {
    lpCreateParams: T.LPVOID,
    hInstance: T.HINSTANCE,
    hMenu: T.HMENU,
    hwndParent: T.HWND,
    cy: T.INT,
    cx: T.INT,
    y: T.INT,
    x: T.INT,
    style: T.LONG,
    lpszName: T.LPCWSTR,
    lpszClass: T.LPCWSTR,
    dwExStyle: T.DWORD
});
T.LPCREATESTRUCTW = Pointer(Struct('tagCREATESTRUCTW', {
    lpCreateParams: T.LPVOID,
    hInstance: T.HINSTANCE,
    hMenu: T.HMENU,
    hwndParent: T.HWND,
    cy: T.INT,
    cx: T.INT,
    y: T.INT,
    x: T.INT,
    style: T.LONG,
    lpszName: T.LPCWSTR,
    lpszClass: T.LPCWSTR,
    dwExStyle: T.DWORD
}));
T.CREATESTRUCT = T.CREATESTRUCTA;
T.LPCREATESTRUCT = T.LPCREATESTRUCTA;
T.PAINTSTRUCT = Struct('tagPAINTSTRUCT', {
    hdc: T.HDC,
    fErase: T.BOOL,
    rcPaint: T.RECT,
    fRestore: T.BOOL,
    fIncUpdate: T.BOOL,
    rgbReserved: ArrayType(T.BYTE, 32)
});
T.PPAINTSTRUCT = Pointer(Struct('tagPAINTSTRUCT', {
    hdc: T.HDC,
    fErase: T.BOOL,
    rcPaint: T.RECT,
    fRestore: T.BOOL,
    fIncUpdate: T.BOOL,
    rgbReserved: ArrayType(T.BYTE, 32)
}));
T.LPPAINTSTRUCT = Pointer(Struct('tagPAINTSTRUCT', {
    hdc: T.HDC,
    fErase: T.BOOL,
    rcPaint: T.RECT,
    fRestore: T.BOOL,
    fIncUpdate: T.BOOL,
    rgbReserved: ArrayType(T.BYTE, 32)
}));
T.CLIENTCREATESTRUCT = Struct('tagCLIENTCREATESTRUCT', {
    hWindowMenu: T.HMENU,
    idFirstChild: T.UINT
});
T.LPCLIENTCREATESTRUCT = Pointer(Struct('tagCLIENTCREATESTRUCT', {
    hWindowMenu: T.HMENU,
    idFirstChild: T.UINT
}));
T.MDICREATESTRUCTA = Struct('tagMDICREATESTRUCTA', {
    szClass: T.LPCSTR,
    szTitle: T.LPCSTR,
    hOwner: T.HINSTANCE,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    style: T.DWORD,
    lParam: T.LPARAM
});
T.LPMDICREATESTRUCTA = Pointer(Struct('tagMDICREATESTRUCTA', {
    szClass: T.LPCSTR,
    szTitle: T.LPCSTR,
    hOwner: T.HINSTANCE,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    style: T.DWORD,
    lParam: T.LPARAM
}));
T.MDICREATESTRUCTW = Struct('tagMDICREATESTRUCTW', {
    szClass: T.LPCWSTR,
    szTitle: T.LPCWSTR,
    hOwner: T.HINSTANCE,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    style: T.DWORD,
    lParam: T.LPARAM
});
T.LPMDICREATESTRUCTW = Pointer(Struct('tagMDICREATESTRUCTW', {
    szClass: T.LPCWSTR,
    szTitle: T.LPCWSTR,
    hOwner: T.HINSTANCE,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    style: T.DWORD,
    lParam: T.LPARAM
}));
T.MDICREATESTRUCT = T.MDICREATESTRUCTA;
T.LPMDICREATESTRUCT = T.LPMDICREATESTRUCTA;
T.STYLESTRUCT = Struct('tagSTYLESTRUCT', {
    styleOld: T.DWORD,
    styleNew: T.DWORD
});
T.LPSTYLESTRUCT = Pointer(Struct('tagSTYLESTRUCT', {
    styleOld: T.DWORD,
    styleNew: T.DWORD
}));
T.MINMAXINFO = Struct('tagMINMAXINFO', {
    ptReserved: T.POINT,
    ptMaxSize: T.POINT,
    ptMaxPosition: T.POINT,
    ptMinTrackSize: T.POINT,
    ptMaxTrackSize: T.POINT
});
T.PMINMAXINFO = Pointer(Struct('tagMINMAXINFO', {
    ptReserved: T.POINT,
    ptMaxSize: T.POINT,
    ptMaxPosition: T.POINT,
    ptMinTrackSize: T.POINT,
    ptMaxTrackSize: T.POINT
}));
T.LPMINMAXINFO = Pointer(Struct('tagMINMAXINFO', {
    ptReserved: T.POINT,
    ptMaxSize: T.POINT,
    ptMaxPosition: T.POINT,
    ptMinTrackSize: T.POINT,
    ptMaxTrackSize: T.POINT
}));
T.WINDOWPOS = Struct('tagWINDOWPOS', {
    hwnd: T.HWND,
    hwndInsertAfter: T.HWND,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    flags: T.UINT
});
T.PWINDOWPOS = Pointer(Struct('tagWINDOWPOS', {
    hwnd: T.HWND,
    hwndInsertAfter: T.HWND,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    flags: T.UINT
}));
T.LPWINDOWPOS = Pointer(Struct('tagWINDOWPOS', {
    hwnd: T.HWND,
    hwndInsertAfter: T.HWND,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    flags: T.UINT
}));
T.NCCALCSIZE_PARAMS = Struct('', {
    rgrc: ArrayType(T.RECT, 3),
    lppos: Pointer(T.WINDOWPOS)
});
T.LPNCCALCSIZE_PARAMS = Pointer(Struct('', {
    rgrc: ArrayType(T.RECT, 3),
    lppos: Pointer(T.WINDOWPOS)
}));
T.WNDCLASSA = Struct('tagWNDCLASSA', {
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCSTR,
    lpszClassName: T.LPCSTR
});
T.PWNDCLASSA = Pointer(Struct('tagWNDCLASSA', {
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCSTR,
    lpszClassName: T.LPCSTR
}));
T.LPWNDCLASSA = Pointer(Struct('tagWNDCLASSA', {
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCSTR,
    lpszClassName: T.LPCSTR
}));
T.WNDCLASSW = Struct('tagWNDCLASSW', {
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCWSTR,
    lpszClassName: T.LPCWSTR
});
T.PWNDCLASSW = Pointer(Struct('tagWNDCLASSW', {
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCWSTR,
    lpszClassName: T.LPCWSTR
}));
T.LPWNDCLASSW = Pointer(Struct('tagWNDCLASSW', {
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCWSTR,
    lpszClassName: T.LPCWSTR
}));
T.WNDCLASS = T.WNDCLASSA;
T.PWNDCLASS = T.PWNDCLASSA;
T.LPWNDCLASS = T.LPWNDCLASSA;
T.COPYDATASTRUCT = Struct('tagCOPYDATASTRUCT', {
    dwData: T.ULONG_PTR,
    cbData: T.DWORD,
    lpData: T.PVOID
});
T.PCOPYDATASTRUCT = Pointer(Struct('tagCOPYDATASTRUCT', {
    dwData: T.ULONG_PTR,
    cbData: T.DWORD,
    lpData: T.PVOID
}));
T.MDINEXTMENU = Struct('tagMDINEXTMENU', {
    hmenuIn: T.HMENU,
    hmenuNext: T.HMENU,
    hwndNext: T.HWND
});
T.PMDINEXTMENU = Pointer(Struct('tagMDINEXTMENU', {
    hmenuIn: T.HMENU,
    hmenuNext: T.HMENU,
    hwndNext: T.HWND
}));
T.LPMDINEXTMENU = Pointer(Struct('tagMDINEXTMENU', {
    hmenuIn: T.HMENU,
    hmenuNext: T.HMENU,
    hwndNext: T.HWND
}));
T.MULTIKEYHELPA = Struct('tagMULTIKEYHELPA', {
    mkSize: T.DWORD,
    mkKeylist: T.CHAR,
    szKeyphrase: ArrayType(T.CHAR, 1)
});
T.PMULTIKEYHELPA = Pointer(Struct('tagMULTIKEYHELPA', {
    mkSize: T.DWORD,
    mkKeylist: T.CHAR,
    szKeyphrase: ArrayType(T.CHAR, 1)
}));
T.LPMULTIKEYHELPA = Pointer(Struct('tagMULTIKEYHELPA', {
    mkSize: T.DWORD,
    mkKeylist: T.CHAR,
    szKeyphrase: ArrayType(T.CHAR, 1)
}));
T.MULTIKEYHELPW = Struct('tagMULTIKEYHELPW', {
    mkSize: T.DWORD,
    mkKeylist: T.WCHAR,
    szKeyphrase: ArrayType(T.WCHAR, 1)
});
T.PMULTIKEYHELPW = Pointer(Struct('tagMULTIKEYHELPW', {
    mkSize: T.DWORD,
    mkKeylist: T.WCHAR,
    szKeyphrase: ArrayType(T.WCHAR, 1)
}));
T.LPMULTIKEYHELPW = Pointer(Struct('tagMULTIKEYHELPW', {
    mkSize: T.DWORD,
    mkKeylist: T.WCHAR,
    szKeyphrase: ArrayType(T.WCHAR, 1)
}));
T.MULTIKEYHELP = T.MULTIKEYHELPA;
T.PMULTIKEYHELP = T.PMULTIKEYHELPA;
T.LPMULTIKEYHELP = T.LPMULTIKEYHELPA;
T.HELPWININFOA = Struct('tagHELPWININFOA', {
    wStructSize: T.i32,
    x: T.i32,
    y: T.i32,
    dx: T.i32,
    dy: T.i32,
    wMax: T.i32,
    rgchMember: ArrayType(T.CHAR, 2)
});
T.PHELPWININFOA = Pointer(Struct('tagHELPWININFOA', {
    wStructSize: T.i32,
    x: T.i32,
    y: T.i32,
    dx: T.i32,
    dy: T.i32,
    wMax: T.i32,
    rgchMember: ArrayType(T.CHAR, 2)
}));
T.LPHELPWININFOA = Pointer(Struct('tagHELPWININFOA', {
    wStructSize: T.i32,
    x: T.i32,
    y: T.i32,
    dx: T.i32,
    dy: T.i32,
    wMax: T.i32,
    rgchMember: ArrayType(T.CHAR, 2)
}));
T.HELPWININFOW = Struct('tagHELPWININFOW', {
    wStructSize: T.i32,
    x: T.i32,
    y: T.i32,
    dx: T.i32,
    dy: T.i32,
    wMax: T.i32,
    rgchMember: ArrayType(T.WCHAR, 2)
});
T.PHELPWININFOW = Pointer(Struct('tagHELPWININFOW', {
    wStructSize: T.i32,
    x: T.i32,
    y: T.i32,
    dx: T.i32,
    dy: T.i32,
    wMax: T.i32,
    rgchMember: ArrayType(T.WCHAR, 2)
}));
T.LPHELPWININFOW = Pointer(Struct('tagHELPWININFOW', {
    wStructSize: T.i32,
    x: T.i32,
    y: T.i32,
    dx: T.i32,
    dy: T.i32,
    wMax: T.i32,
    rgchMember: ArrayType(T.WCHAR, 2)
}));
T.HELPWININFO = T.HELPWININFOA;
T.PHELPWININFO = T.PHELPWININFOA;
T.LPHELPWININFO = T.LPHELPWININFOA;
T.WNDCLASSEXA = Struct('tagWNDCLASSEXA', {
    cbSize: T.UINT,
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCSTR,
    lpszClassName: T.LPCSTR,
    hIconSm: T.HICON
});
T.PWNDCLASSEXA = Pointer(Struct('tagWNDCLASSEXA', {
    cbSize: T.UINT,
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCSTR,
    lpszClassName: T.LPCSTR,
    hIconSm: T.HICON
}));
T.LPWNDCLASSEXA = Pointer(Struct('tagWNDCLASSEXA', {
    cbSize: T.UINT,
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCSTR,
    lpszClassName: T.LPCSTR,
    hIconSm: T.HICON
}));
T.WNDCLASSEXW = Struct('tagWNDCLASSEXW', {
    cbSize: T.UINT,
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCWSTR,
    lpszClassName: T.LPCWSTR,
    hIconSm: T.HICON
});
T.PWNDCLASSEXW = Pointer(Struct('tagWNDCLASSEXW', {
    cbSize: T.UINT,
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCWSTR,
    lpszClassName: T.LPCWSTR,
    hIconSm: T.HICON
}));
T.LPWNDCLASSEXW = Pointer(Struct('tagWNDCLASSEXW', {
    cbSize: T.UINT,
    style: T.UINT,
    lpfnWndProc: T.WNDPROC,
    cbClsExtra: T.INT,
    cbWndExtra: T.INT,
    hInstance: T.HINSTANCE,
    hIcon: T.HICON,
    hCursor: T.HCURSOR,
    hbrBackground: T.HBRUSH,
    lpszMenuName: T.LPCWSTR,
    lpszClassName: T.LPCWSTR,
    hIconSm: T.HICON
}));
T.WNDCLASSEX = T.WNDCLASSEXA;
T.PWNDCLASSEX = T.PWNDCLASSEXA;
T.LPWNDCLASSEX = T.LPWNDCLASSEXA;
T.MSG = Struct('tagMSG', {
    hwnd: T.HWND,
    message: T.UINT,
    wParam: T.WPARAM,
    lParam: T.LPARAM,
    time: T.DWORD,
    pt: T.POINT
});
T.PMSG = Pointer(Struct('tagMSG', {
    hwnd: T.HWND,
    message: T.UINT,
    wParam: T.WPARAM,
    lParam: T.LPARAM,
    time: T.DWORD,
    pt: T.POINT
}));
T.LPMSG = Pointer(Struct('tagMSG', {
    hwnd: T.HWND,
    message: T.UINT,
    wParam: T.WPARAM,
    lParam: T.LPARAM,
    time: T.DWORD,
    pt: T.POINT
}));
T.ICONINFO = Struct('_ICONINFO', {
    fIcon: T.BOOL,
    xHotspot: T.DWORD,
    yHotspot: T.DWORD,
    hbmMask: T.HBITMAP,
    hbmColor: T.HBITMAP
});
T.PICONINFO = Pointer(Struct('_ICONINFO', {
    fIcon: T.BOOL,
    xHotspot: T.DWORD,
    yHotspot: T.DWORD,
    hbmMask: T.HBITMAP,
    hbmColor: T.HBITMAP
}));
T.ICONINFOEXA = Struct('_ICONINFOEXA', {
    cbSize: T.DWORD,
    fIcon: T.BOOL,
    xHotspot: T.DWORD,
    yHotspot: T.DWORD,
    hbmMask: T.HBITMAP,
    hbmColor: T.HBITMAP,
    wResID: T.WORD,
    szModName: ArrayType(T.CHAR, 260),
    szResName: ArrayType(T.CHAR, 260)
});
T.PICONINFOEXA = Pointer(Struct('_ICONINFOEXA', {
    cbSize: T.DWORD,
    fIcon: T.BOOL,
    xHotspot: T.DWORD,
    yHotspot: T.DWORD,
    hbmMask: T.HBITMAP,
    hbmColor: T.HBITMAP,
    wResID: T.WORD,
    szModName: ArrayType(T.CHAR, 260),
    szResName: ArrayType(T.CHAR, 260)
}));
T.ICONINFOEXW = Struct('_ICONINFOEXW', {
    cbSize: T.DWORD,
    fIcon: T.BOOL,
    xHotspot: T.DWORD,
    yHotspot: T.DWORD,
    hbmMask: T.HBITMAP,
    hbmColor: T.HBITMAP,
    wResID: T.WORD,
    szModName: ArrayType(T.WCHAR, 260),
    szResName: ArrayType(T.WCHAR, 260)
});
T.PICONINFOEXW = Pointer(Struct('_ICONINFOEXW', {
    cbSize: T.DWORD,
    fIcon: T.BOOL,
    xHotspot: T.DWORD,
    yHotspot: T.DWORD,
    hbmMask: T.HBITMAP,
    hbmColor: T.HBITMAP,
    wResID: T.WORD,
    szModName: ArrayType(T.WCHAR, 260),
    szResName: ArrayType(T.WCHAR, 260)
}));
T.ICONINFOEX = T.ICONINFOEXA;
T.PICONINFOEX = T.PICONINFOEXA;
T.CURSORINFO = Struct('tagCURSORINFO', {
    cbSize: T.DWORD,
    flags: T.DWORD,
    hCursor: T.HCURSOR,
    ptScreenPos: T.POINT
});
T.PCURSORINFO = Pointer(Struct('tagCURSORINFO', {
    cbSize: T.DWORD,
    flags: T.DWORD,
    hCursor: T.HCURSOR,
    ptScreenPos: T.POINT
}));
T.LPCURSORINFO = Pointer(Struct('tagCURSORINFO', {
    cbSize: T.DWORD,
    flags: T.DWORD,
    hCursor: T.HCURSOR,
    ptScreenPos: T.POINT
}));
T.ACCEL = Struct('tagACCEL', {
    fVirt: T.BYTE,
    key: T.WORD,
    cmd: T.WORD
});
T.LPACCEL = Pointer(Struct('tagACCEL', {
    fVirt: T.BYTE,
    key: T.WORD,
    cmd: T.WORD
}));
T.TPMPARAMS = Struct('tagTPMPARAMS', {
    cbSize: T.UINT,
    rcExclude: T.RECT
});
T.LPTPMPARAMS = Pointer(Struct('tagTPMPARAMS', {
    cbSize: T.UINT,
    rcExclude: T.RECT
}));
T.COMBOBOXINFO = Struct('tagCOMBOBOXINFO', {
    cbSize: T.DWORD,
    rcItem: T.RECT,
    rcButton: T.RECT,
    stateButton: T.DWORD,
    hwndCombo: T.HWND,
    hwndItem: T.HWND,
    hwndList: T.HWND
});
T.PCOMBOBOXINFO = Pointer(Struct('tagCOMBOBOXINFO', {
    cbSize: T.DWORD,
    rcItem: T.RECT,
    rcButton: T.RECT,
    stateButton: T.DWORD,
    hwndCombo: T.HWND,
    hwndItem: T.HWND,
    hwndList: T.HWND
}));
T.LPCOMBOBOXINFO = Pointer(Struct('tagCOMBOBOXINFO', {
    cbSize: T.DWORD,
    rcItem: T.RECT,
    rcButton: T.RECT,
    stateButton: T.DWORD,
    hwndCombo: T.HWND,
    hwndItem: T.HWND,
    hwndList: T.HWND
}));
T.MENUITEMINFOA = Struct('tagMENUITEMINFOA', {
    cbSize: T.UINT,
    fMask: T.UINT,
    fType: T.UINT,
    fState: T.UINT,
    wID: T.UINT,
    hSubMenu: T.HMENU,
    hbmpChecked: T.HBITMAP,
    hbmpUnchecked: T.HBITMAP,
    dwItemData: T.ULONG_PTR,
    dwTypeData: T.LPSTR,
    cch: T.UINT,
    hbmpItem: T.HBITMAP
});
T.LPMENUITEMINFOA = Pointer(Struct('tagMENUITEMINFOA', {
    cbSize: T.UINT,
    fMask: T.UINT,
    fType: T.UINT,
    fState: T.UINT,
    wID: T.UINT,
    hSubMenu: T.HMENU,
    hbmpChecked: T.HBITMAP,
    hbmpUnchecked: T.HBITMAP,
    dwItemData: T.ULONG_PTR,
    dwTypeData: T.LPSTR,
    cch: T.UINT,
    hbmpItem: T.HBITMAP
}));
T.MENUITEMINFOW = Struct('tagMENUITEMINFOW', {
    cbSize: T.UINT,
    fMask: T.UINT,
    fType: T.UINT,
    fState: T.UINT,
    wID: T.UINT,
    hSubMenu: T.HMENU,
    hbmpChecked: T.HBITMAP,
    hbmpUnchecked: T.HBITMAP,
    dwItemData: T.ULONG_PTR,
    dwTypeData: T.LPWSTR,
    cch: T.UINT,
    hbmpItem: T.HBITMAP
});
T.LPMENUITEMINFOW = Pointer(Struct('tagMENUITEMINFOW', {
    cbSize: T.UINT,
    fMask: T.UINT,
    fType: T.UINT,
    fState: T.UINT,
    wID: T.UINT,
    hSubMenu: T.HMENU,
    hbmpChecked: T.HBITMAP,
    hbmpUnchecked: T.HBITMAP,
    dwItemData: T.ULONG_PTR,
    dwTypeData: T.LPWSTR,
    cch: T.UINT,
    hbmpItem: T.HBITMAP
}));
T.MENUITEMINFO = T.MENUITEMINFOA;
T.LPMENUITEMINFO = T.LPMENUITEMINFOA;
T.LPCMENUITEMINFOA = Pointer(T.MENUITEMINFOA);
T.LPCMENUITEMINFOW = Pointer(T.MENUITEMINFOW);
T.LPCMENUITEMINFO = T.LPCMENUITEMINFOA;
T.MENUBARINFO = Struct('tagMENUBARINFO', {
    cbSize: T.DWORD,
    rcBar: T.RECT,
    hMenu: T.HMENU,
    hwndMenu: T.HWND,
    fBarFocused: [T.BOOL, 1],
    fFocused: [T.BOOL, 1]
});
T.PMENUBARINFO = Pointer(Struct('tagMENUBARINFO', {
    cbSize: T.DWORD,
    rcBar: T.RECT,
    hMenu: T.HMENU,
    hwndMenu: T.HWND,
    fBarFocused: [T.BOOL, 1],
    fFocused: [T.BOOL, 1]
}));
T.LPMENUBARINFO = Pointer(Struct('tagMENUBARINFO', {
    cbSize: T.DWORD,
    rcBar: T.RECT,
    hMenu: T.HMENU,
    hwndMenu: T.HWND,
    fBarFocused: [T.BOOL, 1],
    fFocused: [T.BOOL, 1]
}));
T.MENUINFO = Struct('tagMENUINFO', {
    cbSize: T.DWORD,
    fMask: T.DWORD,
    dwStyle: T.DWORD,
    cyMax: T.UINT,
    hbrBack: T.HBRUSH,
    dwContextHelpID: T.DWORD,
    dwMenuData: T.ULONG_PTR
});
T.LPMENUINFO = Pointer(Struct('tagMENUINFO', {
    cbSize: T.DWORD,
    fMask: T.DWORD,
    dwStyle: T.DWORD,
    cyMax: T.UINT,
    hbrBack: T.HBRUSH,
    dwContextHelpID: T.DWORD,
    dwMenuData: T.ULONG_PTR
}));
T.LPCMENUINFO = Pointer(T.MENUINFO);
T.MENUITEMTEMPLATEHEADER = Struct('', {
    versionNumber: T.WORD,
    offset: T.WORD
});
T.PMENUITEMTEMPLATEHEADER = Pointer(Struct('', {
    versionNumber: T.WORD,
    offset: T.WORD
}));
T.MENUITEMTEMPLATE = Struct('', {
    mtOption: T.WORD,
    mtID: T.WORD,
    mtString: ArrayType(T.WCHAR, 1)
});
T.PMENUITEMTEMPLATE = Pointer(Struct('', {
    mtOption: T.WORD,
    mtID: T.WORD,
    mtString: ArrayType(T.WCHAR, 1)
}));
T.MENUTEMPLATE = null;
T.LPMENUTEMPLATE = Pointer(T.PVOID);
T.SCROLLINFO = Struct('tagSCROLLINFO', {
    cbSize: T.UINT,
    fMask: T.UINT,
    nMin: T.INT,
    nMax: T.INT,
    nPage: T.UINT,
    nPos: T.INT,
    nTrackPos: T.INT
});
T.LPSCROLLINFO = Pointer(Struct('tagSCROLLINFO', {
    cbSize: T.UINT,
    fMask: T.UINT,
    nMin: T.INT,
    nMax: T.INT,
    nPage: T.UINT,
    nPos: T.INT,
    nTrackPos: T.INT
}));
T.LPCSCROLLINFO = Pointer(T.SCROLLINFO);
T.SCROLLBARINFO = Struct('tagSCROLLBARINFO', {
    cbSize: T.DWORD,
    rcScrollBar: T.RECT,
    dxyLineButton: T.INT,
    xyThumbTop: T.INT,
    xyThumbBottom: T.INT,
    reserved: T.INT,
    rgstate: ArrayType(T.DWORD, NaN /* additive_expression {
     _0: constant {
      _0: '5'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
});
T.PSCROLLBARINFO = Pointer(Struct('tagSCROLLBARINFO', {
    cbSize: T.DWORD,
    rcScrollBar: T.RECT,
    dxyLineButton: T.INT,
    xyThumbTop: T.INT,
    xyThumbBottom: T.INT,
    reserved: T.INT,
    rgstate: ArrayType(T.DWORD, NaN /* additive_expression {
     _0: constant {
      _0: '5'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
}));
T.LPSCROLLBARINFO = Pointer(Struct('tagSCROLLBARINFO', {
    cbSize: T.DWORD,
    rcScrollBar: T.RECT,
    dxyLineButton: T.INT,
    xyThumbTop: T.INT,
    xyThumbBottom: T.INT,
    reserved: T.INT,
    rgstate: ArrayType(T.DWORD, NaN /* additive_expression {
     _0: constant {
      _0: '5'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
}));
T.HELPINFO = Struct('tagHELPINFO', {
    cbSize: T.UINT,
    iContextType: T.INT,
    iCtrlId: T.INT,
    hItemHandle: T.HANDLE,
    dwContextId: T.DWORD_PTR,
    MousePos: T.POINT
});
T.LPHELPINFO = Pointer(Struct('tagHELPINFO', {
    cbSize: T.UINT,
    iContextType: T.INT,
    iCtrlId: T.INT,
    hItemHandle: T.HANDLE,
    dwContextId: T.DWORD_PTR,
    MousePos: T.POINT
}));
T.MSGBOXCALLBACK = Pointer(Fn(null, [[T.LPHELPINFO, 'lpHelpInfo']]));
T.MSGBOXPARAMSA = Struct('tagMSGBOXPARAMSA', {
    cbSize: T.UINT,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpszText: T.LPCSTR,
    lpszCaption: T.LPCSTR,
    dwStyle: T.DWORD,
    lpszIcon: T.LPCSTR,
    dwContextHelpId: T.DWORD_PTR,
    lpfnMsgBoxCallback: T.MSGBOXCALLBACK,
    dwLanguageId: T.DWORD
});
T.PMSGBOXPARAMSA = Pointer(Struct('tagMSGBOXPARAMSA', {
    cbSize: T.UINT,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpszText: T.LPCSTR,
    lpszCaption: T.LPCSTR,
    dwStyle: T.DWORD,
    lpszIcon: T.LPCSTR,
    dwContextHelpId: T.DWORD_PTR,
    lpfnMsgBoxCallback: T.MSGBOXCALLBACK,
    dwLanguageId: T.DWORD
}));
T.LPMSGBOXPARAMSA = Pointer(Struct('tagMSGBOXPARAMSA', {
    cbSize: T.UINT,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpszText: T.LPCSTR,
    lpszCaption: T.LPCSTR,
    dwStyle: T.DWORD,
    lpszIcon: T.LPCSTR,
    dwContextHelpId: T.DWORD_PTR,
    lpfnMsgBoxCallback: T.MSGBOXCALLBACK,
    dwLanguageId: T.DWORD
}));
T.MSGBOXPARAMSW = Struct('tagMSGBOXPARAMSW', {
    cbSize: T.UINT,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpszText: T.LPCWSTR,
    lpszCaption: T.LPCWSTR,
    dwStyle: T.DWORD,
    lpszIcon: T.LPCWSTR,
    dwContextHelpId: T.DWORD_PTR,
    lpfnMsgBoxCallback: T.MSGBOXCALLBACK,
    dwLanguageId: T.DWORD
});
T.PMSGBOXPARAMSW = Pointer(Struct('tagMSGBOXPARAMSW', {
    cbSize: T.UINT,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpszText: T.LPCWSTR,
    lpszCaption: T.LPCWSTR,
    dwStyle: T.DWORD,
    lpszIcon: T.LPCWSTR,
    dwContextHelpId: T.DWORD_PTR,
    lpfnMsgBoxCallback: T.MSGBOXCALLBACK,
    dwLanguageId: T.DWORD
}));
T.LPMSGBOXPARAMSW = Pointer(Struct('tagMSGBOXPARAMSW', {
    cbSize: T.UINT,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpszText: T.LPCWSTR,
    lpszCaption: T.LPCWSTR,
    dwStyle: T.DWORD,
    lpszIcon: T.LPCWSTR,
    dwContextHelpId: T.DWORD_PTR,
    lpfnMsgBoxCallback: T.MSGBOXCALLBACK,
    dwLanguageId: T.DWORD
}));
T.MSGBOXPARAMS = T.MSGBOXPARAMSA;
T.PMSGBOXPARAMS = T.PMSGBOXPARAMSA;
T.LPMSGBOXPARAMS = T.LPMSGBOXPARAMSA;
T.MONITORINFO = Struct('tagMONITORINFO', {
    cbSize: T.DWORD,
    rcMonitor: T.RECT,
    rcWork: T.RECT,
    dwFlags: T.DWORD
});
T.LPMONITORINFO = Pointer(Struct('tagMONITORINFO', {
    cbSize: T.DWORD,
    rcMonitor: T.RECT,
    rcWork: T.RECT,
    dwFlags: T.DWORD
}));
T.MONITORINFOEXA = Struct('tagMONITORINFOEXA', {
    cbSize: T.DWORD,
    rcMonitor: T.RECT,
    rcWork: T.RECT,
    dwFlags: T.DWORD,
    szDevice: ArrayType(T.CHAR, 32)
});
T.LPMONITORINFOEXA = Pointer(Struct('tagMONITORINFOEXA', {
    cbSize: T.DWORD,
    rcMonitor: T.RECT,
    rcWork: T.RECT,
    dwFlags: T.DWORD,
    szDevice: ArrayType(T.CHAR, 32)
}));
T.MONITORINFOEXW = Struct('tagMONITORINFOEXW', {
    cbSize: T.DWORD,
    rcMonitor: T.RECT,
    rcWork: T.RECT,
    dwFlags: T.DWORD,
    szDevice: ArrayType(T.WCHAR, 32)
});
T.LPMONITORINFOEXW = Pointer(Struct('tagMONITORINFOEXW', {
    cbSize: T.DWORD,
    rcMonitor: T.RECT,
    rcWork: T.RECT,
    dwFlags: T.DWORD,
    szDevice: ArrayType(T.WCHAR, 32)
}));
T.MONITORINFOEX = T.MONITORINFOEXA;
T.LPMONITORINFOEX = T.LPMONITORINFOEXA;
T.MONITORENUMPROC = Pointer(Fn(T.BOOL, [[T.HMONITOR], [T.HDC], [T.LPRECT], [T.LPARAM]]));
T.DLGTEMPLATE = Struct('tagDLGTEMPLATE', {
    style: T.DWORD,
    dwExtendedStyle: T.DWORD,
    cdit: T.WORD,
    x: T.i16,
    y: T.i16,
    cx: T.i16,
    cy: T.i16
});
T.LPDLGTEMPLATEA = Pointer(T.DLGTEMPLATE);
T.LPDLGTEMPLATEW = Pointer(T.DLGTEMPLATE);
T.LPDLGTEMPLATE = T.LPDLGTEMPLATEA;
T.LPCDLGTEMPLATEA = Pointer(T.DLGTEMPLATE);
T.LPCDLGTEMPLATEW = Pointer(T.DLGTEMPLATE);
T.LPCDLGTEMPLATE = T.LPCDLGTEMPLATEA;
T.DLGITEMTEMPLATE = Struct('tagDLGITEMTEMPLATE', {
    style: T.DWORD,
    dwExtendedStyle: T.DWORD,
    x: T.i16,
    y: T.i16,
    cx: T.i16,
    cy: T.i16,
    id: T.WORD
});
T.PDLGITEMTEMPLATEA = Pointer(T.DLGITEMTEMPLATE);
T.PDLGITEMTEMPLATEW = Pointer(T.DLGITEMTEMPLATE);
T.PDLGITEMTEMPLATE = T.PDLGITEMTEMPLATEA;
T.LPDLGITEMTEMPLATEA = Pointer(T.DLGITEMTEMPLATE);
T.LPDLGITEMTEMPLATEW = Pointer(T.DLGITEMTEMPLATE);
T.LPDLGITEMTEMPLATE = T.LPDLGITEMTEMPLATEA;
T.CBT_CREATEWNDA = Struct('tagCBT_CREATEWNDA', {
    lpcs: Pointer(T.CREATESTRUCTA),
    hwndInsertAfter: T.HWND
});
T.LPCBT_CREATEWNDA = Pointer(Struct('tagCBT_CREATEWNDA', {
    lpcs: Pointer(T.CREATESTRUCTA),
    hwndInsertAfter: T.HWND
}));
T.CBT_CREATEWNDW = Struct('tagCBT_CREATEWNDW', {
    lpcs: Pointer(T.CREATESTRUCTW),
    hwndInsertAfter: T.HWND
});
T.LPCBT_CREATEWNDW = Pointer(Struct('tagCBT_CREATEWNDW', {
    lpcs: Pointer(T.CREATESTRUCTW),
    hwndInsertAfter: T.HWND
}));
T.CBT_CREATEWND = T.CBT_CREATEWNDA;
T.LPCBT_CREATEWND = T.LPCBT_CREATEWNDA;
T.CBTACTIVATESTRUCT = Struct('tagCBTACTIVATESTRUCT', {
    fMouse: T.BOOL,
    hWndActive: T.HWND
});
T.LPCBTACTIVATESTRUCT = Pointer(Struct('tagCBTACTIVATESTRUCT', {
    fMouse: T.BOOL,
    hWndActive: T.HWND
}));
T.NONCLIENTMETRICSA = Struct('tagNONCLIENTMETRICSA', {
    cbSize: T.UINT,
    iBorderWidth: T.INT,
    iScrollWidth: T.INT,
    iScrollHeight: T.INT,
    iCaptionWidth: T.INT,
    iCaptionHeight: T.INT,
    lfCaptionFont: T.LOGFONTA,
    iSmCaptionWidth: T.INT,
    iSmCaptionHeight: T.INT,
    lfSmCaptionFont: T.LOGFONTA,
    iMenuWidth: T.INT,
    iMenuHeight: T.INT,
    lfMenuFont: T.LOGFONTA,
    lfStatusFont: T.LOGFONTA,
    lfMessageFont: T.LOGFONTA
});
T.PNONCLIENTMETRICSA = Pointer(Struct('tagNONCLIENTMETRICSA', {
    cbSize: T.UINT,
    iBorderWidth: T.INT,
    iScrollWidth: T.INT,
    iScrollHeight: T.INT,
    iCaptionWidth: T.INT,
    iCaptionHeight: T.INT,
    lfCaptionFont: T.LOGFONTA,
    iSmCaptionWidth: T.INT,
    iSmCaptionHeight: T.INT,
    lfSmCaptionFont: T.LOGFONTA,
    iMenuWidth: T.INT,
    iMenuHeight: T.INT,
    lfMenuFont: T.LOGFONTA,
    lfStatusFont: T.LOGFONTA,
    lfMessageFont: T.LOGFONTA
}));
T.LPNONCLIENTMETRICSA = Pointer(Struct('tagNONCLIENTMETRICSA', {
    cbSize: T.UINT,
    iBorderWidth: T.INT,
    iScrollWidth: T.INT,
    iScrollHeight: T.INT,
    iCaptionWidth: T.INT,
    iCaptionHeight: T.INT,
    lfCaptionFont: T.LOGFONTA,
    iSmCaptionWidth: T.INT,
    iSmCaptionHeight: T.INT,
    lfSmCaptionFont: T.LOGFONTA,
    iMenuWidth: T.INT,
    iMenuHeight: T.INT,
    lfMenuFont: T.LOGFONTA,
    lfStatusFont: T.LOGFONTA,
    lfMessageFont: T.LOGFONTA
}));
T.NONCLIENTMETRICSW = Struct('tagNONCLIENTMETRICSW', {
    cbSize: T.UINT,
    iBorderWidth: T.INT,
    iScrollWidth: T.INT,
    iScrollHeight: T.INT,
    iCaptionWidth: T.INT,
    iCaptionHeight: T.INT,
    lfCaptionFont: T.LOGFONTW,
    iSmCaptionWidth: T.INT,
    iSmCaptionHeight: T.INT,
    lfSmCaptionFont: T.LOGFONTW,
    iMenuWidth: T.INT,
    iMenuHeight: T.INT,
    lfMenuFont: T.LOGFONTW,
    lfStatusFont: T.LOGFONTW,
    lfMessageFont: T.LOGFONTW
});
T.PNONCLIENTMETRICSW = Pointer(Struct('tagNONCLIENTMETRICSW', {
    cbSize: T.UINT,
    iBorderWidth: T.INT,
    iScrollWidth: T.INT,
    iScrollHeight: T.INT,
    iCaptionWidth: T.INT,
    iCaptionHeight: T.INT,
    lfCaptionFont: T.LOGFONTW,
    iSmCaptionWidth: T.INT,
    iSmCaptionHeight: T.INT,
    lfSmCaptionFont: T.LOGFONTW,
    iMenuWidth: T.INT,
    iMenuHeight: T.INT,
    lfMenuFont: T.LOGFONTW,
    lfStatusFont: T.LOGFONTW,
    lfMessageFont: T.LOGFONTW
}));
T.LPNONCLIENTMETRICSW = Pointer(Struct('tagNONCLIENTMETRICSW', {
    cbSize: T.UINT,
    iBorderWidth: T.INT,
    iScrollWidth: T.INT,
    iScrollHeight: T.INT,
    iCaptionWidth: T.INT,
    iCaptionHeight: T.INT,
    lfCaptionFont: T.LOGFONTW,
    iSmCaptionWidth: T.INT,
    iSmCaptionHeight: T.INT,
    lfSmCaptionFont: T.LOGFONTW,
    iMenuWidth: T.INT,
    iMenuHeight: T.INT,
    lfMenuFont: T.LOGFONTW,
    lfStatusFont: T.LOGFONTW,
    lfMessageFont: T.LOGFONTW
}));
T.NONCLIENTMETRICS = T.NONCLIENTMETRICSA;
T.PNONCLIENTMETRICS = T.PNONCLIENTMETRICSA;
T.LPNONCLIENTMETRICS = T.LPNONCLIENTMETRICSA;
T.ICONMETRICSA = Struct('tagICONMETRICSA', {
    cbSize: T.UINT,
    iHorzSpacing: T.i32,
    iVertSpacing: T.i32,
    iTitleWrap: T.i32,
    lfFont: T.LOGFONTA
});
T.PICONMETRICSA = Pointer(Struct('tagICONMETRICSA', {
    cbSize: T.UINT,
    iHorzSpacing: T.i32,
    iVertSpacing: T.i32,
    iTitleWrap: T.i32,
    lfFont: T.LOGFONTA
}));
T.LPICONMETRICSA = Pointer(Struct('tagICONMETRICSA', {
    cbSize: T.UINT,
    iHorzSpacing: T.i32,
    iVertSpacing: T.i32,
    iTitleWrap: T.i32,
    lfFont: T.LOGFONTA
}));
T.ICONMETRICSW = Struct('tagICONMETRICSW', {
    cbSize: T.UINT,
    iHorzSpacing: T.i32,
    iVertSpacing: T.i32,
    iTitleWrap: T.i32,
    lfFont: T.LOGFONTW
});
T.PICONMETRICSW = Pointer(Struct('tagICONMETRICSW', {
    cbSize: T.UINT,
    iHorzSpacing: T.i32,
    iVertSpacing: T.i32,
    iTitleWrap: T.i32,
    lfFont: T.LOGFONTW
}));
T.LPICONMETRICSW = Pointer(Struct('tagICONMETRICSW', {
    cbSize: T.UINT,
    iHorzSpacing: T.i32,
    iVertSpacing: T.i32,
    iTitleWrap: T.i32,
    lfFont: T.LOGFONTW
}));
T.ICONMETRICS = T.ICONMETRICSA;
T.PICONMETRICS = T.PICONMETRICSA;
T.LPICONMETRICS = T.LPICONMETRICSA;
T.UPDATELAYEREDWINDOWINFO = Struct('tagUPDATELAYEREDWINDOWINFO', {
    cbSize: T.DWORD,
    hdcDst: T.HDC,
    pptDst: Pointer(T.POINT),
    psize: Pointer(T.SIZE),
    hdcSrc: T.HDC,
    pptSrc: Pointer(T.POINT),
    crKey: T.COLORREF,
    pblend: Pointer(T.BLENDFUNCTION),
    dwFlags: T.DWORD,
    prcDirty: Pointer(T.RECT)
});
T.PUPDATELAYEREDWINDOWINFO = Pointer(Struct('tagUPDATELAYEREDWINDOWINFO', {
    cbSize: T.DWORD,
    hdcDst: T.HDC,
    pptDst: Pointer(T.POINT),
    psize: Pointer(T.SIZE),
    hdcSrc: T.HDC,
    pptSrc: Pointer(T.POINT),
    crKey: T.COLORREF,
    pblend: Pointer(T.BLENDFUNCTION),
    dwFlags: T.DWORD,
    prcDirty: Pointer(T.RECT)
}));
T.MINIMIZEDMETRICS = Struct('tagMINIMIZEDMETRICS', {
    cbSize: T.UINT,
    iWidth: T.i32,
    iHorzGap: T.i32,
    iVertGap: T.i32,
    iArrange: T.i32
});
T.PMINIMIZEDMETRICS = Pointer(Struct('tagMINIMIZEDMETRICS', {
    cbSize: T.UINT,
    iWidth: T.i32,
    iHorzGap: T.i32,
    iVertGap: T.i32,
    iArrange: T.i32
}));
T.LPMINIMIZEDMETRICS = Pointer(Struct('tagMINIMIZEDMETRICS', {
    cbSize: T.UINT,
    iWidth: T.i32,
    iHorzGap: T.i32,
    iVertGap: T.i32,
    iArrange: T.i32
}));
T.FLASHWINFO = Struct('', {
    cbSize: T.UINT,
    hwnd: T.HWND,
    dwFlags: T.DWORD,
    uCount: T.UINT,
    dwTimeout: T.DWORD
});
T.PFLASHWINFO = Pointer(Struct('', {
    cbSize: T.UINT,
    hwnd: T.HWND,
    dwFlags: T.DWORD,
    uCount: T.UINT,
    dwTimeout: T.DWORD
}));
T.DRAWITEMSTRUCT = Struct('tagDRAWITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    itemAction: T.UINT,
    itemState: T.UINT,
    hwndItem: T.HWND,
    hDC: T.HDC,
    rcItem: T.RECT,
    itemData: T.ULONG_PTR
});
T.PDRAWITEMSTRUCT = Pointer(Struct('tagDRAWITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    itemAction: T.UINT,
    itemState: T.UINT,
    hwndItem: T.HWND,
    hDC: T.HDC,
    rcItem: T.RECT,
    itemData: T.ULONG_PTR
}));
T.LPDRAWITEMSTRUCT = Pointer(Struct('tagDRAWITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    itemAction: T.UINT,
    itemState: T.UINT,
    hwndItem: T.HWND,
    hDC: T.HDC,
    rcItem: T.RECT,
    itemData: T.ULONG_PTR
}));
T.MEASUREITEMSTRUCT = Struct('tagMEASUREITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    itemWidth: T.UINT,
    itemHeight: T.UINT,
    itemData: T.ULONG_PTR
});
T.PMEASUREITEMSTRUCT = Pointer(Struct('tagMEASUREITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    itemWidth: T.UINT,
    itemHeight: T.UINT,
    itemData: T.ULONG_PTR
}));
T.LPMEASUREITEMSTRUCT = Pointer(Struct('tagMEASUREITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    itemWidth: T.UINT,
    itemHeight: T.UINT,
    itemData: T.ULONG_PTR
}));
T.DELETEITEMSTRUCT = Struct('tagDELETEITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    hwndItem: T.HWND,
    itemData: T.ULONG_PTR
});
T.PDELETEITEMSTRUCT = Pointer(Struct('tagDELETEITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    hwndItem: T.HWND,
    itemData: T.ULONG_PTR
}));
T.LPDELETEITEMSTRUCT = Pointer(Struct('tagDELETEITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    itemID: T.UINT,
    hwndItem: T.HWND,
    itemData: T.ULONG_PTR
}));
T.COMPAREITEMSTRUCT = Struct('tagCOMPAREITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    hwndItem: T.HWND,
    itemID1: T.UINT,
    itemData1: T.ULONG_PTR,
    itemID2: T.UINT,
    itemData2: T.ULONG_PTR,
    dwLocaleId: T.DWORD
});
T.PCOMPAREITEMSTRUCT = Pointer(Struct('tagCOMPAREITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    hwndItem: T.HWND,
    itemID1: T.UINT,
    itemData1: T.ULONG_PTR,
    itemID2: T.UINT,
    itemData2: T.ULONG_PTR,
    dwLocaleId: T.DWORD
}));
T.LPCOMPAREITEMSTRUCT = Pointer(Struct('tagCOMPAREITEMSTRUCT', {
    CtlType: T.UINT,
    CtlID: T.UINT,
    hwndItem: T.HWND,
    itemID1: T.UINT,
    itemData1: T.ULONG_PTR,
    itemID2: T.UINT,
    itemData2: T.ULONG_PTR,
    dwLocaleId: T.DWORD
}));
T.TRACKMOUSEEVENT = Struct('tagTRACKMOUSEEVENT', {
    cbSize: T.DWORD,
    dwFlags: T.DWORD,
    hwndTrack: T.HWND,
    dwHoverTime: T.DWORD
});
T.LPTRACKMOUSEEVENT = Pointer(Struct('tagTRACKMOUSEEVENT', {
    cbSize: T.DWORD,
    dwFlags: T.DWORD,
    hwndTrack: T.HWND,
    dwHoverTime: T.DWORD
}));
T.HDEVNOTIFY = T.PVOID;
T.PHDEVNOTIFY = Pointer(T.HDEVNOTIFY);
T.WINDOWINFO = Struct('tagWINDOWINFO', {
    cbSize: T.DWORD,
    rcWindow: T.RECT,
    rcClient: T.RECT,
    dwStyle: T.DWORD,
    dwExStyle: T.DWORD,
    dwWindowStatus: T.DWORD,
    cxWindowBorders: T.UINT,
    cyWindowBorders: T.UINT,
    atomWindowType: T.ATOM,
    wCreatorVersion: T.WORD
});
T.PWINDOWINFO = Pointer(Struct('tagWINDOWINFO', {
    cbSize: T.DWORD,
    rcWindow: T.RECT,
    rcClient: T.RECT,
    dwStyle: T.DWORD,
    dwExStyle: T.DWORD,
    dwWindowStatus: T.DWORD,
    cxWindowBorders: T.UINT,
    cyWindowBorders: T.UINT,
    atomWindowType: T.ATOM,
    wCreatorVersion: T.WORD
}));
T.LPWINDOWINFO = Pointer(Struct('tagWINDOWINFO', {
    cbSize: T.DWORD,
    rcWindow: T.RECT,
    rcClient: T.RECT,
    dwStyle: T.DWORD,
    dwExStyle: T.DWORD,
    dwWindowStatus: T.DWORD,
    cxWindowBorders: T.UINT,
    cyWindowBorders: T.UINT,
    atomWindowType: T.ATOM,
    wCreatorVersion: T.WORD
}));
T.TITLEBARINFO = Struct('tagTITLEBARINFO', {
    cbSize: T.DWORD,
    rcTitleBar: T.RECT,
    rgstate: ArrayType(T.DWORD, NaN /* additive_expression {
     _0: constant {
      _0: '5'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
});
T.PTITLEBARINFO = Pointer(Struct('tagTITLEBARINFO', {
    cbSize: T.DWORD,
    rcTitleBar: T.RECT,
    rgstate: ArrayType(T.DWORD, NaN /* additive_expression {
     _0: constant {
      _0: '5'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
}));
T.LPTITLEBARINFO = Pointer(Struct('tagTITLEBARINFO', {
    cbSize: T.DWORD,
    rcTitleBar: T.RECT,
    rgstate: ArrayType(T.DWORD, NaN /* additive_expression {
     _0: constant {
      _0: '5'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
}));
T.LASTINPUTINFO = Struct('tagLASTINPUTINFO', {
    cbSize: T.UINT,
    dwTime: T.DWORD
});
T.PLASTINPUTINFO = Pointer(Struct('tagLASTINPUTINFO', {
    cbSize: T.UINT,
    dwTime: T.DWORD
}));
T.ALTTABINFO = Struct('', {
    cbSize: T.DWORD,
    cItems: T.INT,
    cColumns: T.INT,
    cRows: T.INT,
    iColFocus: T.INT,
    iRowFocus: T.INT,
    cxItem: T.INT,
    cyItem: T.INT,
    ptStart: T.POINT
});
T.PALTTABINFO = Pointer(Struct('', {
    cbSize: T.DWORD,
    cItems: T.INT,
    cColumns: T.INT,
    cRows: T.INT,
    iColFocus: T.INT,
    iRowFocus: T.INT,
    cxItem: T.INT,
    cyItem: T.INT,
    ptStart: T.POINT
}));
T.LPALTTABINFO = Pointer(Struct('', {
    cbSize: T.DWORD,
    cItems: T.INT,
    cColumns: T.INT,
    cRows: T.INT,
    iColFocus: T.INT,
    iRowFocus: T.INT,
    cxItem: T.INT,
    cyItem: T.INT,
    ptStart: T.POINT
}));
T.NORM_FORM = Enum('NormalizationKD', {
    NormalizationOther: 0,
    NormalizationC: 1,
    NormalizationD: 2,
    NormalizationKC: 5,
    NormalizationKD: 6
});
T.CALID = T.DWORD;
T.CALTYPE = T.DWORD;
T.GEOID = T.LONG;
T.GEOCLASS = T.DWORD;
T.GEOTYPE = T.DWORD;
T.LCTYPE = T.DWORD;
T.LGRPID = T.DWORD;
T.CPINFO = Struct('', {
    MaxCharSize: T.UINT,
    DefaultChar: ArrayType(T.BYTE, 2),
    LeadByte: ArrayType(T.BYTE, 12)
});
T.LPCPINFO = Pointer(Struct('', {
    MaxCharSize: T.UINT,
    DefaultChar: ArrayType(T.BYTE, 2),
    LeadByte: ArrayType(T.BYTE, 12)
}));
T.CPINFOEXA = Struct('', {
    MaxCharSize: T.UINT,
    DefaultChar: ArrayType(T.BYTE, 2),
    LeadByte: ArrayType(T.BYTE, 12),
    UnicodeDefaultChar: T.WCHAR,
    CodePage: T.UINT,
    CodePageName: ArrayType(T.CHAR, 260)
});
T.LPCPINFOEXA = Pointer(Struct('', {
    MaxCharSize: T.UINT,
    DefaultChar: ArrayType(T.BYTE, 2),
    LeadByte: ArrayType(T.BYTE, 12),
    UnicodeDefaultChar: T.WCHAR,
    CodePage: T.UINT,
    CodePageName: ArrayType(T.CHAR, 260)
}));
T.CPINFOEXW = Struct('', {
    MaxCharSize: T.UINT,
    DefaultChar: ArrayType(T.BYTE, 2),
    LeadByte: ArrayType(T.BYTE, 12),
    UnicodeDefaultChar: T.WCHAR,
    CodePage: T.UINT,
    CodePageName: ArrayType(T.WCHAR, 260)
});
T.LPCPINFOEXW = Pointer(Struct('', {
    MaxCharSize: T.UINT,
    DefaultChar: ArrayType(T.BYTE, 2),
    LeadByte: ArrayType(T.BYTE, 12),
    UnicodeDefaultChar: T.WCHAR,
    CodePage: T.UINT,
    CodePageName: ArrayType(T.WCHAR, 260)
}));
T.CPINFOEX = T.CPINFOEXA;
T.LPCPINFOEX = T.LPCPINFOEXA;
T.NUMBERFMTA = Struct('_numberfmtA', {
    NumDigits: T.UINT,
    LeadingZero: T.UINT,
    Grouping: T.UINT,
    lpDecimalSep: T.LPSTR,
    lpThousandSep: T.LPSTR,
    NegativeOrder: T.UINT
});
T.LPNUMBERFMTA = Pointer(Struct('_numberfmtA', {
    NumDigits: T.UINT,
    LeadingZero: T.UINT,
    Grouping: T.UINT,
    lpDecimalSep: T.LPSTR,
    lpThousandSep: T.LPSTR,
    NegativeOrder: T.UINT
}));
T.NUMBERFMTW = Struct('_numberfmtW', {
    NumDigits: T.UINT,
    LeadingZero: T.UINT,
    Grouping: T.UINT,
    lpDecimalSep: T.LPWSTR,
    lpThousandSep: T.LPWSTR,
    NegativeOrder: T.UINT
});
T.LPNUMBERFMTW = Pointer(Struct('_numberfmtW', {
    NumDigits: T.UINT,
    LeadingZero: T.UINT,
    Grouping: T.UINT,
    lpDecimalSep: T.LPWSTR,
    lpThousandSep: T.LPWSTR,
    NegativeOrder: T.UINT
}));
T.NUMBERFMT = T.NUMBERFMTA;
T.LPNUMBERFMT = T.LPNUMBERFMTA;
T.CURRENCYFMTA = Struct('_currencyfmtA', {
    NumDigits: T.UINT,
    LeadingZero: T.UINT,
    Grouping: T.UINT,
    lpDecimalSep: T.LPSTR,
    lpThousandSep: T.LPSTR,
    NegativeOrder: T.UINT,
    PositiveOrder: T.UINT,
    lpCurrencySymbol: T.LPSTR
});
T.LPCURRENCYFMTA = Pointer(Struct('_currencyfmtA', {
    NumDigits: T.UINT,
    LeadingZero: T.UINT,
    Grouping: T.UINT,
    lpDecimalSep: T.LPSTR,
    lpThousandSep: T.LPSTR,
    NegativeOrder: T.UINT,
    PositiveOrder: T.UINT,
    lpCurrencySymbol: T.LPSTR
}));
T.CURRENCYFMTW = Struct('_currencyfmtW', {
    NumDigits: T.UINT,
    LeadingZero: T.UINT,
    Grouping: T.UINT,
    lpDecimalSep: T.LPWSTR,
    lpThousandSep: T.LPWSTR,
    NegativeOrder: T.UINT,
    PositiveOrder: T.UINT,
    lpCurrencySymbol: T.LPWSTR
});
T.LPCURRENCYFMTW = Pointer(Struct('_currencyfmtW', {
    NumDigits: T.UINT,
    LeadingZero: T.UINT,
    Grouping: T.UINT,
    lpDecimalSep: T.LPWSTR,
    lpThousandSep: T.LPWSTR,
    NegativeOrder: T.UINT,
    PositiveOrder: T.UINT,
    lpCurrencySymbol: T.LPWSTR
}));
T.CURRENCYFMT = T.CURRENCYFMTA;
T.LPCURRENCYFMT = T.LPCURRENCYFMTA;
T.CALINFO_ENUMPROCA = Pointer(Fn(T.BOOL, [[T.LPSTR]]));
T.CALINFO_ENUMPROCW = Pointer(Fn(T.BOOL, [[T.LPWSTR]]));
T.CALINFO_ENUMPROCEXA = Pointer(Fn(T.BOOL, [[T.LPSTR], [T.CALID]]));
T.CALINFO_ENUMPROCEXW = Pointer(Fn(T.BOOL, [[T.LPWSTR], [T.CALID]]));
T.CODEPAGE_ENUMPROCA = Pointer(Fn(T.BOOL, [[T.LPSTR]]));
T.CODEPAGE_ENUMPROCW = Pointer(Fn(T.BOOL, [[T.LPWSTR]]));
T.DATEFMT_ENUMPROCA = Pointer(Fn(T.BOOL, [[T.LPSTR]]));
T.DATEFMT_ENUMPROCW = Pointer(Fn(T.BOOL, [[T.LPWSTR]]));
T.DATEFMT_ENUMPROCEXA = Pointer(Fn(T.BOOL, [[T.LPSTR], [T.CALID]]));
T.DATEFMT_ENUMPROCEXW = Pointer(Fn(T.BOOL, [[T.LPWSTR], [T.CALID]]));
T.GEO_ENUMPROC = Pointer(Fn(T.BOOL, [[T.GEOID]]));
T.LANGGROUPLOCALE_ENUMPROCA = Pointer(Fn(T.BOOL, [[T.LGRPID], [T.LCID], [T.LPSTR], [T.LONG_PTR]]));
T.LANGGROUPLOCALE_ENUMPROCW = Pointer(Fn(T.BOOL, [[T.LGRPID], [T.LCID], [T.LPWSTR], [T.LONG_PTR]]));
T.LANGUAGEGROUP_ENUMPROCA = Pointer(Fn(T.BOOL, [[T.LGRPID], [T.LPSTR], [T.LPSTR], [T.DWORD], [T.LONG_PTR]]));
T.LANGUAGEGROUP_ENUMPROCW = Pointer(Fn(T.BOOL, [[T.LGRPID], [T.LPWSTR], [T.LPWSTR], [T.DWORD], [T.LONG_PTR]]));
T.LOCALE_ENUMPROCA = Pointer(Fn(T.BOOL, [[T.LPSTR]]));
T.LOCALE_ENUMPROCW = Pointer(Fn(T.BOOL, [[T.LPWSTR]]));
T.LOCALE_ENUMPROCEX = Pointer(Fn(T.BOOL, [[T.LPWSTR], [T.DWORD], [T.LPARAM]]));
T.TIMEFMT_ENUMPROCA = Pointer(Fn(T.BOOL, [[T.LPSTR]]));
T.TIMEFMT_ENUMPROCW = Pointer(Fn(T.BOOL, [[T.LPWSTR]]));
T.UILANGUAGE_ENUMPROCA = Pointer(Fn(T.BOOL, [[T.LPSTR], [T.LONG_PTR]]));
T.UILANGUAGE_ENUMPROCW = Pointer(Fn(T.BOOL, [[T.LPWSTR], [T.LONG_PTR]]));
T.CALINFO_ENUMPROC = T.CALINFO_ENUMPROCA;
T.CALINFO_ENUMPROCEX = T.CALINFO_ENUMPROCEXA;
T.CODEPAGE_ENUMPROC = T.CODEPAGE_ENUMPROCA;
T.DATEFMT_ENUMPROC = T.DATEFMT_ENUMPROCA;
T.DATEFMT_ENUMPROCEX = T.DATEFMT_ENUMPROCEXA;
T.LANGGROUPLOCALE_ENUMPROC = T.LANGGROUPLOCALE_ENUMPROCA;
T.LANGUAGEGROUP_ENUMPROC = T.LANGUAGEGROUP_ENUMPROCA;
T.LOCALE_ENUMPROC = T.LOCALE_ENUMPROCA;
T.TIMEFMT_ENUMPROC = T.TIMEFMT_ENUMPROCA;
T.UILANGUAGE_ENUMPROC = T.UILANGUAGE_ENUMPROCA;
T.PHANDLER_ROUTINE = Pointer(Fn(T.BOOL, [[T.DWORD, 'dwCtrlType']]));
T.CONSOLE_CURSOR_INFO = Struct('_CONSOLE_CURSOR_INFO', {
    dwSize: T.DWORD,
    bVisible: T.BOOL
});
T.LPCONSOLE_CURSOR_INFO = Pointer(Struct('_CONSOLE_CURSOR_INFO', {
    dwSize: T.DWORD,
    bVisible: T.BOOL
}));
T.COORD = Struct('tagCOORD', {
    X: T.SHORT,
    Y: T.SHORT
});
T.LPCOORD = Pointer(Struct('tagCOORD', {
    X: T.SHORT,
    Y: T.SHORT
}));
T.SMALL_RECT = Struct('tagSMALL_RECT', {
    Left: T.SHORT,
    Top: T.SHORT,
    Right: T.SHORT,
    Bottom: T.SHORT
});
T.LPSMALL_RECT = Pointer(Struct('tagSMALL_RECT', {
    Left: T.SHORT,
    Top: T.SHORT,
    Right: T.SHORT,
    Bottom: T.SHORT
}));
T.CONSOLE_FONT_INFO = Struct('_CONSOLE_FONT_INFO', {
    nFont: T.DWORD,
    dwFontSize: T.COORD
});
T.LPCONSOLE_FONT_INFO = Pointer(Struct('_CONSOLE_FONT_INFO', {
    nFont: T.DWORD,
    dwFontSize: T.COORD
}));
T.CONSOLE_FONT_INFOEX = Struct('_CONSOLE_FONT_INFOEX', {
    cbSize: T.ULONG,
    nFont: T.DWORD,
    dwFontSize: T.COORD,
    FontFamily: T.UINT,
    FontWeight: T.UINT,
    FaceName: ArrayType(T.WCHAR, 32)
});
T.LPCONSOLE_FONT_INFOEX = Pointer(Struct('_CONSOLE_FONT_INFOEX', {
    cbSize: T.ULONG,
    nFont: T.DWORD,
    dwFontSize: T.COORD,
    FontFamily: T.UINT,
    FontWeight: T.UINT,
    FaceName: ArrayType(T.WCHAR, 32)
}));
T.CONSOLE_HISTORY_INFO = Struct('tagCONSOLE_HISTORY_INFO', {
    cbSize: T.UINT,
    HistoryBufferSize: T.UINT,
    NumberOfHistoryBuffers: T.UINT,
    dwFlags: T.DWORD
});
T.LPCONSOLE_HISTORY_INFO = Pointer(Struct('tagCONSOLE_HISTORY_INFO', {
    cbSize: T.UINT,
    HistoryBufferSize: T.UINT,
    NumberOfHistoryBuffers: T.UINT,
    dwFlags: T.DWORD
}));
T.CONSOLE_READCONSOLE_CONTROL = Struct('_CONSOLE_READCONSOLE_CONTROL', {
    nLength: T.ULONG,
    nInitialChars: T.ULONG,
    dwCtrlWakeupMask: T.ULONG,
    dwConsoleKeyState: T.ULONG
});
T.LPCONSOLE_READCONSOLE_CONTROL = Pointer(Struct('_CONSOLE_READCONSOLE_CONTROL', {
    nLength: T.ULONG,
    nInitialChars: T.ULONG,
    dwCtrlWakeupMask: T.ULONG,
    dwConsoleKeyState: T.ULONG
}));
T.CONSOLE_SCREEN_BUFFER_INFO = Struct('tagCONSOLE_SCREEN_BUFFER_INFO', {
    dwSize: T.COORD,
    dwCursorPosition: T.COORD,
    wAttributes: T.WORD,
    srWindow: T.SMALL_RECT,
    dwMaximumWindowSize: T.COORD
});
T.LPCONSOLE_SCREEN_BUFFER_INFO = Pointer(Struct('tagCONSOLE_SCREEN_BUFFER_INFO', {
    dwSize: T.COORD,
    dwCursorPosition: T.COORD,
    wAttributes: T.WORD,
    srWindow: T.SMALL_RECT,
    dwMaximumWindowSize: T.COORD
}));
T.CONSOLE_SCREEN_BUFFER_INFOEX = Struct('_CONSOLE_SCREEN_BUFFER_INFOEX', {
    cbSize: T.ULONG,
    dwSize: T.COORD,
    dwCursorPosition: T.COORD,
    wAttributes: T.WORD,
    srWindow: T.SMALL_RECT,
    dwMaximumWindowSize: T.COORD,
    wPopupAttributes: T.WORD,
    bFullscreenSupported: T.BOOL,
    ColorTable: ArrayType(T.COLORREF, 16)
});
T.LPCONSOLE_SCREEN_BUFFER_INFOEX = Pointer(Struct('_CONSOLE_SCREEN_BUFFER_INFOEX', {
    cbSize: T.ULONG,
    dwSize: T.COORD,
    dwCursorPosition: T.COORD,
    wAttributes: T.WORD,
    srWindow: T.SMALL_RECT,
    dwMaximumWindowSize: T.COORD,
    wPopupAttributes: T.WORD,
    bFullscreenSupported: T.BOOL,
    ColorTable: ArrayType(T.COLORREF, 16)
}));
T.CONSOLE_SELECTION_INFO = Struct('_CONSOLE_SELECTION_INFO', {
    dwFlags: T.DWORD,
    dwSelectionAnchor: T.COORD,
    srSelection: T.SMALL_RECT
});
T.LPCONSOLE_SELECTION_INFO = Pointer(Struct('_CONSOLE_SELECTION_INFO', {
    dwFlags: T.DWORD,
    dwSelectionAnchor: T.COORD,
    srSelection: T.SMALL_RECT
}));
T.CHAR_INFO = Struct('tagCHAR_INFO', {
    Char: Union('', {
        UnicodeChar: T.WCHAR,
        AsciiChar: T.CHAR
    }),
    Attributes: T.WORD
});
T.LPCHAR_INFO = Pointer(Struct('tagCHAR_INFO', {
    Char: Union('', {
        UnicodeChar: T.WCHAR,
        AsciiChar: T.CHAR
    }),
    Attributes: T.WORD
}));
T.KEY_EVENT_RECORD = Struct('tagKEY_EVENT_RECORD', {
    bKeyDown: T.BOOL,
    wRepeatCount: T.WORD,
    wVirtualKeyCode: T.WORD,
    wVirtualScanCode: T.WORD,
    uChar: Union('', {
        UnicodeChar: T.WCHAR,
        AsciiChar: T.CHAR
    }),
    dwControlKeyState: T.DWORD
});
T.LPKEY_EVENT_RECORD = Pointer(Struct('tagKEY_EVENT_RECORD', {
    bKeyDown: T.BOOL,
    wRepeatCount: T.WORD,
    wVirtualKeyCode: T.WORD,
    wVirtualScanCode: T.WORD,
    uChar: Union('', {
        UnicodeChar: T.WCHAR,
        AsciiChar: T.CHAR
    }),
    dwControlKeyState: T.DWORD
}));
T.MOUSE_EVENT_RECORD = Struct('tagMOUSE_EVENT_RECORD', {
    dwMousePosition: T.COORD,
    dwButtonState: T.DWORD,
    dwControlKeyState: T.DWORD,
    dwEventFlags: T.DWORD
});
T.LPMOUSE_EVENT_RECORD = Pointer(Struct('tagMOUSE_EVENT_RECORD', {
    dwMousePosition: T.COORD,
    dwButtonState: T.DWORD,
    dwControlKeyState: T.DWORD,
    dwEventFlags: T.DWORD
}));
T.WINDOW_BUFFER_SIZE_RECORD = Struct('tagWINDOW_BUFFER_SIZE_RECORD', {
    dwSize: T.COORD
});
T.LPWINDOW_BUFFER_SIZE_RECORD = Pointer(Struct('tagWINDOW_BUFFER_SIZE_RECORD', {
    dwSize: T.COORD
}));
T.MENU_EVENT_RECORD = Struct('tagMENU_EVENT_RECORD', {
    dwCommandId: T.UINT
});
T.LPMENU_EVENT_RECORD = Pointer(Struct('tagMENU_EVENT_RECORD', {
    dwCommandId: T.UINT
}));
T.FOCUS_EVENT_RECORD = Struct('tagFOCUS_EVENT_RECORD', {
    bSetFocus: T.BOOL
});
T.LPFOCUS_EVENT_RECORD = Pointer(Struct('tagFOCUS_EVENT_RECORD', {
    bSetFocus: T.BOOL
}));
T.INPUT_RECORD = Struct('tagINPUT_RECORD', {
    EventType: T.WORD,
    Event: Union('', {
        KeyEvent: T.KEY_EVENT_RECORD,
        MouseEvent: T.MOUSE_EVENT_RECORD,
        WindowBufferSizeEvent: T.WINDOW_BUFFER_SIZE_RECORD,
        MenuEvent: T.MENU_EVENT_RECORD,
        FocusEvent: T.FOCUS_EVENT_RECORD
    })
});
T.PINPUT_RECORD = Pointer(Struct('tagINPUT_RECORD', {
    EventType: T.WORD,
    Event: Union('', {
        KeyEvent: T.KEY_EVENT_RECORD,
        MouseEvent: T.MOUSE_EVENT_RECORD,
        WindowBufferSizeEvent: T.WINDOW_BUFFER_SIZE_RECORD,
        MenuEvent: T.MENU_EVENT_RECORD,
        FocusEvent: T.FOCUS_EVENT_RECORD
    })
}));
T.VS_FIXEDFILEINFO = Struct('tagVS_FIXEDFILEINFO', {
    dwSignature: T.DWORD,
    dwStrucVersion: T.DWORD,
    dwFileVersionMS: T.DWORD,
    dwFileVersionLS: T.DWORD,
    dwProductVersionMS: T.DWORD,
    dwProductVersionLS: T.DWORD,
    dwFileFlagsMask: T.DWORD,
    dwFileFlags: T.DWORD,
    dwFileOS: T.DWORD,
    dwFileType: T.DWORD,
    dwFileSubtype: T.DWORD,
    dwFileDateMS: T.DWORD,
    dwFileDateLS: T.DWORD
});
T.VALENTA = Struct('value_entA', {
    ve_valuename: T.LPSTR,
    ve_valuelen: T.DWORD,
    ve_valueptr: T.DWORD_PTR,
    ve_type: T.DWORD
});
T.PVALENTA = Pointer(Struct('value_entA', {
    ve_valuename: T.LPSTR,
    ve_valuelen: T.DWORD,
    ve_valueptr: T.DWORD_PTR,
    ve_type: T.DWORD
}));
T.VALENTW = Struct('value_entW', {
    ve_valuename: T.LPWSTR,
    ve_valuelen: T.DWORD,
    ve_valueptr: T.DWORD_PTR,
    ve_type: T.DWORD
});
T.PVALENTW = Pointer(Struct('value_entW', {
    ve_valuename: T.LPWSTR,
    ve_valuelen: T.DWORD,
    ve_valueptr: T.DWORD_PTR,
    ve_type: T.DWORD
}));
T.REGSAM = T.ACCESS_MASK;
T.LSTATUS = T.LONG;
T.NETRESOURCEA = Struct('', {
    dwScope: T.DWORD,
    dwType: T.DWORD,
    dwDisplayType: T.DWORD,
    dwUsage: T.DWORD,
    lpLocalName: T.LPSTR,
    lpRemoteName: T.LPSTR,
    lpComment: T.LPSTR,
    lpProvider: T.LPSTR
});
T.LPNETRESOURCEA = Pointer(Struct('', {
    dwScope: T.DWORD,
    dwType: T.DWORD,
    dwDisplayType: T.DWORD,
    dwUsage: T.DWORD,
    lpLocalName: T.LPSTR,
    lpRemoteName: T.LPSTR,
    lpComment: T.LPSTR,
    lpProvider: T.LPSTR
}));
T.NETRESOURCEW = Struct('', {
    dwScope: T.DWORD,
    dwType: T.DWORD,
    dwDisplayType: T.DWORD,
    dwUsage: T.DWORD,
    lpLocalName: T.LPWSTR,
    lpRemoteName: T.LPWSTR,
    lpComment: T.LPWSTR,
    lpProvider: T.LPWSTR
});
T.LPNETRESOURCEW = Pointer(Struct('', {
    dwScope: T.DWORD,
    dwType: T.DWORD,
    dwDisplayType: T.DWORD,
    dwUsage: T.DWORD,
    lpLocalName: T.LPWSTR,
    lpRemoteName: T.LPWSTR,
    lpComment: T.LPWSTR,
    lpProvider: T.LPWSTR
}));
T.NETRESOURCE = T.NETRESOURCEA;
T.LPNETRESOURCE = T.LPNETRESOURCEA;
T.CONNECTDLGSTRUCTA = Struct('', {
    cbStructure: T.DWORD,
    hwndOwner: T.HWND,
    lpConnRes: T.LPNETRESOURCEA,
    dwFlags: T.DWORD,
    dwDevNum: T.DWORD
});
T.LPCONNECTDLGSTRUCTA = Pointer(Struct('', {
    cbStructure: T.DWORD,
    hwndOwner: T.HWND,
    lpConnRes: T.LPNETRESOURCEA,
    dwFlags: T.DWORD,
    dwDevNum: T.DWORD
}));
T.CONNECTDLGSTRUCTW = Struct('', {
    cbStructure: T.DWORD,
    hwndOwner: T.HWND,
    lpConnRes: T.LPNETRESOURCEW,
    dwFlags: T.DWORD,
    dwDevNum: T.DWORD
});
T.LPCONNECTDLGSTRUCTW = Pointer(Struct('', {
    cbStructure: T.DWORD,
    hwndOwner: T.HWND,
    lpConnRes: T.LPNETRESOURCEW,
    dwFlags: T.DWORD,
    dwDevNum: T.DWORD
}));
T.CONNECTDLGSTRUCT = T.CONNECTDLGSTRUCTA;
T.LPCONNECTDLGSTRUCT = T.LPCONNECTDLGSTRUCTA;
T.DISCDLGSTRUCTA = Struct('', {
    cbStructure: T.DWORD,
    hwndOwner: T.HWND,
    lpLocalName: T.LPSTR,
    lpRemoteName: T.LPSTR,
    dwFlags: T.DWORD
});
T.LPDISCDLGSTRUCTA = Pointer(Struct('', {
    cbStructure: T.DWORD,
    hwndOwner: T.HWND,
    lpLocalName: T.LPSTR,
    lpRemoteName: T.LPSTR,
    dwFlags: T.DWORD
}));
T.DISCDLGSTRUCTW = Struct('', {
    cbStructure: T.DWORD,
    hwndOwner: T.HWND,
    lpLocalName: T.LPWSTR,
    lpRemoteName: T.LPWSTR,
    dwFlags: T.DWORD
});
T.LPDISCDLGSTRUCTW = Pointer(Struct('', {
    cbStructure: T.DWORD,
    hwndOwner: T.HWND,
    lpLocalName: T.LPWSTR,
    lpRemoteName: T.LPWSTR,
    dwFlags: T.DWORD
}));
T.DISCDLGSTRUCT = T.DISCDLGSTRUCTA;
T.LPDISCDLGSTRUCT = T.LPDISCDLGSTRUCTA;
T.UNIVERSAL_NAME_INFOA = Struct('', {
    lpUniversalName: T.LPSTR
});
T.LPUNIVERSAL_NAME_INFOA = Pointer(Struct('', {
    lpUniversalName: T.LPSTR
}));
T.UNIVERSAL_NAME_INFOW = Struct('', {
    lpUniversalName: T.LPWSTR
});
T.LPUNIVERSAL_NAME_INFOW = Pointer(Struct('', {
    lpUniversalName: T.LPWSTR
}));
T.UNIVERSAL_NAME_INFO = T.UNIVERSAL_NAME_INFOA;
T.LPUNIVERSAL_NAME_INFO = T.LPUNIVERSAL_NAME_INFOA;
T.REMOTE_NAME_INFOA = Struct('', {
    lpUniversalName: T.LPSTR,
    lpConnectionName: T.LPSTR,
    lpRemainingPath: T.LPSTR
});
T.LPREMOTE_NAME_INFOA = Pointer(Struct('', {
    lpUniversalName: T.LPSTR,
    lpConnectionName: T.LPSTR,
    lpRemainingPath: T.LPSTR
}));
T.REMOTE_NAME_INFOW = Struct('', {
    lpUniversalName: T.LPWSTR,
    lpConnectionName: T.LPWSTR,
    lpRemainingPath: T.LPWSTR
});
T.LPREMOTE_NAME_INFOW = Pointer(Struct('', {
    lpUniversalName: T.LPWSTR,
    lpConnectionName: T.LPWSTR,
    lpRemainingPath: T.LPWSTR
}));
T.REMOTE_NAME_INFO = T.REMOTE_NAME_INFOA;
T.LPREMOTE_NAME_INFO = T.LPREMOTE_NAME_INFOA;
T.NETINFOSTRUCT = Struct('', {
    cbStructure: T.DWORD,
    dwProviderVersion: T.DWORD,
    dwStatus: T.DWORD,
    dwCharacteristics: T.DWORD,
    dwHandle: T.DWORD,
    wNetType: T.WORD,
    dwPrinters: T.DWORD,
    dwDrives: T.DWORD
});
T.LPNETINFOSTRUCT = Pointer(Struct('', {
    cbStructure: T.DWORD,
    dwProviderVersion: T.DWORD,
    dwStatus: T.DWORD,
    dwCharacteristics: T.DWORD,
    dwHandle: T.DWORD,
    wNetType: T.WORD,
    dwPrinters: T.DWORD,
    dwDrives: T.DWORD
}));
T.NETCONNECTINFOSTRUCT = Struct('', {
    cbStructure: T.DWORD,
    dwFlags: T.DWORD,
    dwSpeed: T.DWORD,
    dwDelay: T.DWORD,
    dwOptDataSize: T.DWORD
});
T.LPNETCONNECTINFOSTRUCT = Pointer(Struct('', {
    cbStructure: T.DWORD,
    dwFlags: T.DWORD,
    dwSpeed: T.DWORD,
    dwDelay: T.DWORD,
    dwOptDataSize: T.DWORD
}));
T.PASSWORD_CACHE_ENTRY = Struct('tagPASSWORD_CACHE_ENTRY', {
    cbEntry: T.WORD,
    cbResource: T.WORD,
    cbPassword: T.WORD,
    iEntry: T.BYTE,
    nType: T.BYTE,
    abResource: ArrayType(T.BYTE, 1)
});
T.ENUMPASSWORDPROC = Pointer(Fn(T.BOOL, [[Pointer(T.PASSWORD_CACHE_ENTRY)], [T.DWORD]]));
T.DDEACK = Struct('', {
    bAppReturnCode: [T.u16, 8],
    reserved: [T.u16, 6],
    fBusy: [T.u16, 1],
    fAck: [T.u16, 1]
});
T.DDEDATA = Struct('', {
    unused: [T.u16, 12],
    fResponse: [T.u16, 1],
    fRelease: [T.u16, 1],
    reserved: [T.u16, 1],
    fAckReq: [T.u16, 1],
    cfFormat: T.i16,
    Value: ArrayType(T.BYTE, 1)
});
T.DDEADVISE = Struct('', {
    reserved: [T.u16, 14],
    fDeferUpd: [T.u16, 1],
    fAckReq: [T.u16, 1],
    cfFormat: T.i16
});
T.DDEPOKE = Struct('', {
    unused: [T.u16, 13],
    fRelease: [T.u16, 1],
    fReserved: [T.u16, 2],
    cfFormat: T.i16,
    Value: ArrayType(T.BYTE, 1)
});
T.HCONVLIST = Pointer(Struct('HCONVLIST__', {
    unused: T.i32
}));
T.HCONV = Pointer(Struct('HCONV__', {
    unused: T.i32
}));
T.HSZ = Pointer(Struct('HSZ__', {
    unused: T.i32
}));
T.HDDEDATA = Pointer(Struct('HDDEDATA__', {
    unused: T.i32
}));
T.PFNCALLBACK = Pointer(Fn(T.HDDEDATA, [[T.UINT], [T.UINT], [T.HCONV], [T.HSZ], [T.HSZ], [T.HDDEDATA], [T.ULONG_PTR], [T.ULONG_PTR]]));
T.HSZPAIR = Struct('tagHSZPAIR', {
    hszSvc: T.HSZ,
    hszTopic: T.HSZ
});
T.PHSZPAIR = Pointer(Struct('tagHSZPAIR', {
    hszSvc: T.HSZ,
    hszTopic: T.HSZ
}));
T.CONVCONTEXT = Struct('tagCONVCONTEXT', {
    cb: T.UINT,
    wFlags: T.UINT,
    wCountryID: T.UINT,
    iCodePage: T.INT,
    dwLangID: T.DWORD,
    dwSecurity: T.DWORD,
    qos: T.SECURITY_QUALITY_OF_SERVICE
});
T.PCONVCONTEXT = Pointer(Struct('tagCONVCONTEXT', {
    cb: T.UINT,
    wFlags: T.UINT,
    wCountryID: T.UINT,
    iCodePage: T.INT,
    dwLangID: T.DWORD,
    dwSecurity: T.DWORD,
    qos: T.SECURITY_QUALITY_OF_SERVICE
}));
T.CONVINFO = Struct('tagCONVINFO', {
    cb: T.DWORD,
    hUser: T.DWORD_PTR,
    hConvPartner: T.HCONV,
    hszSvcPartner: T.HSZ,
    hszServiceReq: T.HSZ,
    hszTopic: T.HSZ,
    hszItem: T.HSZ,
    wFmt: T.UINT,
    wType: T.UINT,
    wStatus: T.UINT,
    wConvst: T.UINT,
    wLastError: T.UINT,
    hConvList: T.HCONVLIST,
    ConvCtxt: T.CONVCONTEXT,
    hwnd: T.HWND,
    hwndPartner: T.HWND
});
T.PCONVINFO = Pointer(Struct('tagCONVINFO', {
    cb: T.DWORD,
    hUser: T.DWORD_PTR,
    hConvPartner: T.HCONV,
    hszSvcPartner: T.HSZ,
    hszServiceReq: T.HSZ,
    hszTopic: T.HSZ,
    hszItem: T.HSZ,
    wFmt: T.UINT,
    wType: T.UINT,
    wStatus: T.UINT,
    wConvst: T.UINT,
    wLastError: T.UINT,
    hConvList: T.HCONVLIST,
    ConvCtxt: T.CONVCONTEXT,
    hwnd: T.HWND,
    hwndPartner: T.HWND
}));
T.HPSTR = T.LPSTR;
T.HPCSTR = T.LPCSTR;
T.LPUINT = Pointer(T.UINT);
T.HDRVR = Pointer(Struct('HDRVR__', {
    unused: T.i32
}));
T.HWAVE = Pointer(Struct('HWAVE__', {
    unused: T.i32
}));
T.HWAVEIN = Pointer(Struct('HWAVEIN__', {
    unused: T.i32
}));
T.HWAVEOUT = Pointer(Struct('HWAVEOUT__', {
    unused: T.i32
}));
T.HMIDI = Pointer(Struct('HMIDI__', {
    unused: T.i32
}));
T.HMIDIIN = Pointer(Struct('HMIDIIN__', {
    unused: T.i32
}));
T.HMIDIOUT = Pointer(Struct('HMIDIOUT__', {
    unused: T.i32
}));
T.HMIDISTRM = Pointer(Struct('HMIDISTRM__', {
    unused: T.i32
}));
T.HMIXER = Pointer(Struct('HMIXER__', {
    unused: T.i32
}));
T.HMIXEROBJ = Pointer(Struct('HMIXEROBJ__', {
    unused: T.i32
}));
T.HMMIO = Pointer(Struct('HMMIO__', {
    unused: T.i32
}));
T.LPHMIDI = Pointer(T.HMIDI);
T.LPHMIDIIN = Pointer(T.HMIDIIN);
T.LPHMIDIOUT = Pointer(T.HMIDIOUT);
T.LPHMIDISTRM = Pointer(T.HMIDISTRM);
T.LPHMIXER = Pointer(T.HMIXER);
T.LPHMIXEROBJ = Pointer(T.HMIXEROBJ);
T.LPHWAVEIN = Pointer(T.HWAVEIN);
T.LPHWAVEOUT = Pointer(T.HWAVEOUT);
T.DRIVERPROC = Pointer(Fn(T.LRESULT, [[T.DWORD_PTR], [T.HDRVR], [T.UINT], [T.LPARAM], [T.LPARAM]]));
T.MCIERROR = T.DWORD;
T.MMVERSION = T.UINT;
T.MCIDEVICEID = T.UINT;
T.MMRESULT = T.UINT;
T.MMTIME = Struct('mmtime_tag', {
    wType: T.UINT,
    u: Union('', {
        ms: T.DWORD,
        sample: T.DWORD,
        cb: T.DWORD,
        ticks: T.DWORD,
        smpte: Struct('', {
            hour: T.BYTE,
            min: T.BYTE,
            sec: T.BYTE,
            frame: T.BYTE,
            fps: T.BYTE,
            dummy: T.BYTE,
            pad: ArrayType(T.BYTE, 2)
        }),
        midi: Struct('', {
            songptrpos: T.DWORD
        })
    })
});
T.PMMTIME = Pointer(Struct('mmtime_tag', {
    wType: T.UINT,
    u: Union('', {
        ms: T.DWORD,
        sample: T.DWORD,
        cb: T.DWORD,
        ticks: T.DWORD,
        smpte: Struct('', {
            hour: T.BYTE,
            min: T.BYTE,
            sec: T.BYTE,
            frame: T.BYTE,
            fps: T.BYTE,
            dummy: T.BYTE,
            pad: ArrayType(T.BYTE, 2)
        }),
        midi: Struct('', {
            songptrpos: T.DWORD
        })
    })
}));
T.LPMMTIME = Pointer(Struct('mmtime_tag', {
    wType: T.UINT,
    u: Union('', {
        ms: T.DWORD,
        sample: T.DWORD,
        cb: T.DWORD,
        ticks: T.DWORD,
        smpte: Struct('', {
            hour: T.BYTE,
            min: T.BYTE,
            sec: T.BYTE,
            frame: T.BYTE,
            fps: T.BYTE,
            dummy: T.BYTE,
            pad: ArrayType(T.BYTE, 2)
        }),
        midi: Struct('', {
            songptrpos: T.DWORD
        })
    })
}));
T.DRVCONFIGINFO = Struct('tagDRVCONFIGINFO', {
    dwDCISize: T.DWORD,
    lpszDCISectionName: T.LPCWSTR,
    lpszDCIAliasName: T.LPCWSTR
});
T.LPDRVCONFIGINFO = Pointer(Struct('tagDRVCONFIGINFO', {
    dwDCISize: T.DWORD,
    lpszDCISectionName: T.LPCWSTR,
    lpszDCIAliasName: T.LPCWSTR
}));
T.LPDRVCALLBACK = Pointer(Fn(null, [[T.HDRVR], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR], [T.DWORD_PTR]]));
T.LPWAVECALLBACK = T.LPDRVCALLBACK;
T.WAVEHDR = Struct('wavehdr_tag', {
    lpData: T.LPSTR,
    dwBufferLength: T.DWORD,
    dwBytesRecorded: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwFlags: T.DWORD,
    dwLoops: T.DWORD,
    lpNext: Pointer(Struct('wavehdr_tag', null)),
    reserved: T.DWORD_PTR
});
T.PWAVEHDR = Pointer(Struct('wavehdr_tag', {
    lpData: T.LPSTR,
    dwBufferLength: T.DWORD,
    dwBytesRecorded: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwFlags: T.DWORD,
    dwLoops: T.DWORD,
    lpNext: Pointer(Struct('wavehdr_tag', null)),
    reserved: T.DWORD_PTR
}));
T.NPWAVEHDR = Pointer(Struct('wavehdr_tag', {
    lpData: T.LPSTR,
    dwBufferLength: T.DWORD,
    dwBytesRecorded: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwFlags: T.DWORD,
    dwLoops: T.DWORD,
    lpNext: Pointer(Struct('wavehdr_tag', null)),
    reserved: T.DWORD_PTR
}));
T.LPWAVEHDR = Pointer(Struct('wavehdr_tag', {
    lpData: T.LPSTR,
    dwBufferLength: T.DWORD,
    dwBytesRecorded: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwFlags: T.DWORD,
    dwLoops: T.DWORD,
    lpNext: Pointer(Struct('wavehdr_tag', null)),
    reserved: T.DWORD_PTR
}));
T.WAVEOUTCAPSA = Struct('tagWAVEOUTCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD
});
T.LPWAVEOUTCAPSA = Pointer(Struct('tagWAVEOUTCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD
}));
T.WAVEOUTCAPSW = Struct('tagWAVEOUTCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD
});
T.LPWAVEOUTCAPSW = Pointer(Struct('tagWAVEOUTCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD
}));
T.WAVEOUTCAPS = T.WAVEOUTCAPSA;
T.LPWAVEOUTCAPS = T.LPWAVEOUTCAPSA;
T.WAVEOUTCAPS2A = Struct('tagWAVEOUTCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});
T.LPWAVEOUTCAPS2A = Pointer(Struct('tagWAVEOUTCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));
T.WAVEOUTCAPS2W = Struct('tagWAVEOUTCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});
T.LPWAVEOUTCAPS2W = Pointer(Struct('tagWAVEOUTCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));
T.WAVEOUTCAPS2 = T.WAVEOUTCAPS2A;
T.LPWAVEOUTCAPS2 = T.LPWAVEOUTCAPS2A;
T.WAVEINCAPSA = Struct('tagWAVEINCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD
});
T.LPWAVEINCAPSA = Pointer(Struct('tagWAVEINCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD
}));
T.WAVEINCAPSW = Struct('tagWAVEINCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD
});
T.LPWAVEINCAPSW = Pointer(Struct('tagWAVEINCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD
}));
T.WAVEINCAPS = T.WAVEINCAPSA;
T.LPWAVEINCAPS = T.LPWAVEINCAPSA;
T.WAVEINCAPS2A = Struct('tagWAVEINCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});
T.LPWAVEINCAPS2A = Pointer(Struct('tagWAVEINCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));
T.WAVEINCAPS2W = Struct('tagWAVEINCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});
T.LPWAVEINCAPS2W = Pointer(Struct('tagWAVEINCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwFormats: T.DWORD,
    wChannels: T.WORD,
    wReserved1: T.WORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));
T.WAVEINCAPS2 = T.WAVEINCAPS2A;
T.LPWAVEINCAPS2 = T.LPWAVEINCAPS2A;
T.WAVEFORMAT = Struct('waveformat_tag', {
    wFormatTag: T.WORD,
    nChannels: T.WORD,
    nSamplesPerSec: T.DWORD,
    nAvgBytesPerSec: T.DWORD,
    nBlockAlign: T.WORD
});
T.LPWAVEFORMAT = Pointer(Struct('waveformat_tag', {
    wFormatTag: T.WORD,
    nChannels: T.WORD,
    nSamplesPerSec: T.DWORD,
    nAvgBytesPerSec: T.DWORD,
    nBlockAlign: T.WORD
}));
T.PCMWAVEFORMAT = Struct('pcmwaveformat_tag', {
    wf: T.WAVEFORMAT,
    wBitsPerSample: T.WORD
});
T.LPPCMWAVEFORMAT = Pointer(Struct('pcmwaveformat_tag', {
    wf: T.WAVEFORMAT,
    wBitsPerSample: T.WORD
}));
T.WAVEFORMATEX = Struct('tWAVEFORMATEX', {
    wFormatTag: T.WORD,
    nChannels: T.WORD,
    nSamplesPerSec: T.DWORD,
    nAvgBytesPerSec: T.DWORD,
    nBlockAlign: T.WORD,
    wBitsPerSample: T.WORD,
    cbSize: T.WORD
});
T.LPWAVEFORMATEX = Pointer(Struct('tWAVEFORMATEX', {
    wFormatTag: T.WORD,
    nChannels: T.WORD,
    nSamplesPerSec: T.DWORD,
    nAvgBytesPerSec: T.DWORD,
    nBlockAlign: T.WORD,
    wBitsPerSample: T.WORD,
    cbSize: T.WORD
}));
T.NPWAVEFORMATEX = Pointer(Struct('tWAVEFORMATEX', {
    wFormatTag: T.WORD,
    nChannels: T.WORD,
    nSamplesPerSec: T.DWORD,
    nAvgBytesPerSec: T.DWORD,
    nBlockAlign: T.WORD,
    wBitsPerSample: T.WORD,
    cbSize: T.WORD
}));
T.PWAVEFORMATEX = Pointer(Struct('tWAVEFORMATEX', {
    wFormatTag: T.WORD,
    nChannels: T.WORD,
    nSamplesPerSec: T.DWORD,
    nAvgBytesPerSec: T.DWORD,
    nBlockAlign: T.WORD,
    wBitsPerSample: T.WORD,
    cbSize: T.WORD
}));
T.LPCWAVEFORMATEX = Pointer(T.WAVEFORMATEX);
T.LPMIDICALLBACK = T.LPDRVCALLBACK;
T.PATCHARRAY = ArrayType(T.WORD, 128);
T.LPPATCHARRAY = Pointer(T.WORD);
T.KEYARRAY = ArrayType(T.WORD, 128);
T.LPKEYARRAY = Pointer(T.WORD);
T.MIDIOUTCAPSA = Struct('tagMIDIOUTCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    wTechnology: T.WORD,
    wVoices: T.WORD,
    wNotes: T.WORD,
    wChannelMask: T.WORD,
    dwSupport: T.DWORD
});
T.LPMIDIOUTCAPSA = Pointer(Struct('tagMIDIOUTCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    wTechnology: T.WORD,
    wVoices: T.WORD,
    wNotes: T.WORD,
    wChannelMask: T.WORD,
    dwSupport: T.DWORD
}));
T.MIDIOUTCAPSW = Struct('tagMIDIOUTCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    wTechnology: T.WORD,
    wVoices: T.WORD,
    wNotes: T.WORD,
    wChannelMask: T.WORD,
    dwSupport: T.DWORD
});
T.LPMIDIOUTCAPSW = Pointer(Struct('tagMIDIOUTCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    wTechnology: T.WORD,
    wVoices: T.WORD,
    wNotes: T.WORD,
    wChannelMask: T.WORD,
    dwSupport: T.DWORD
}));
T.MIDIOUTCAPS = T.MIDIOUTCAPSA;
T.LPMIDIOUTCAPS = T.LPMIDIOUTCAPSA;
T.MIDIOUTCAPS2A = Struct('tagMIDIOUTCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    wTechnology: T.WORD,
    wVoices: T.WORD,
    wNotes: T.WORD,
    wChannelMask: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});
T.LPMIDIOUTCAPS2A = Pointer(Struct('tagMIDIOUTCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    wTechnology: T.WORD,
    wVoices: T.WORD,
    wNotes: T.WORD,
    wChannelMask: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));
T.MIDIOUTCAPS2W = Struct('tagMIDIOUTCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    wTechnology: T.WORD,
    wVoices: T.WORD,
    wNotes: T.WORD,
    wChannelMask: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});
T.LPMIDIOUTCAPS2W = Pointer(Struct('tagMIDIOUTCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    wTechnology: T.WORD,
    wVoices: T.WORD,
    wNotes: T.WORD,
    wChannelMask: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));
T.MIDIOUTCAPS2 = T.MIDIOUTCAPS2A;
T.LPMIDIOUTCAPS2 = T.LPMIDIOUTCAPS2A;
T.MIDIINCAPSA = Struct('tagMIDIINCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwSupport: T.DWORD
});
T.LPMIDIINCAPSA = Pointer(Struct('tagMIDIINCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwSupport: T.DWORD
}));
T.MIDIINCAPSW = Struct('tagMIDIINCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwSupport: T.DWORD
});
T.LPMIDIINCAPSW = Pointer(Struct('tagMIDIINCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwSupport: T.DWORD
}));
T.MIDIINCAPS = T.MIDIINCAPSA;
T.LPMIDIINCAPS = T.LPMIDIINCAPSA;
T.MIDIINCAPS2A = Struct('tagMIDIINCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});
T.LPMIDIINCAPS2A = Pointer(Struct('tagMIDIINCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));
T.MIDIINCAPS2W = Struct('tagMIDIINCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});
T.LPMIDIINCAPS2W = Pointer(Struct('tagMIDIINCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));
T.MIDIINCAPS2 = T.MIDIINCAPS2A;
T.LPMIDIINCAPS2 = T.LPMIDIINCAPS2A;
T.MIDIHDR = Struct('midihdr_tag', {
    lpData: T.LPSTR,
    dwBufferLength: T.DWORD,
    dwBytesRecorded: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwFlags: T.DWORD,
    lpNext: Pointer(Struct('midihdr_tag', null)),
    reserved: T.DWORD_PTR,
    dwOffset: T.DWORD,
    dwReserved: ArrayType(T.DWORD_PTR, 8)
});
T.LPMIDIHDR = Pointer(Struct('midihdr_tag', {
    lpData: T.LPSTR,
    dwBufferLength: T.DWORD,
    dwBytesRecorded: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwFlags: T.DWORD,
    lpNext: Pointer(Struct('midihdr_tag', null)),
    reserved: T.DWORD_PTR,
    dwOffset: T.DWORD,
    dwReserved: ArrayType(T.DWORD_PTR, 8)
}));
T.MIDIPROPTEMPO = Struct('midiproptempo_tag', {
    cbStruct: T.DWORD,
    dwTempo: T.DWORD
});
T.LPMIDIPROPTEMPO = Pointer(Struct('midiproptempo_tag', {
    cbStruct: T.DWORD,
    dwTempo: T.DWORD
}));
T.MIDIPROPTIMEDIV = Struct('midiproptimediv_tag', {
    cbStruct: T.DWORD,
    dwTimeDiv: T.DWORD
});
T.LPMIDIPROPTIMEDIV = Pointer(Struct('midiproptimediv_tag', {
    cbStruct: T.DWORD,
    dwTimeDiv: T.DWORD
}));
T.MIDIEVENT = Struct('midievent_tag', {
    dwDeltaTime: T.DWORD,
    dwStreamID: T.DWORD,
    dwEvent: T.DWORD,
    dwParms: ArrayType(T.DWORD, 1)
});
T.LPMIDIEVENT = Pointer(Struct('midievent_tag', {
    dwDeltaTime: T.DWORD,
    dwStreamID: T.DWORD,
    dwEvent: T.DWORD,
    dwParms: ArrayType(T.DWORD, 1)
}));
T.AUXCAPSA = Struct('tagAUXCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    wTechnology: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD
});
T.LPAUXCAPSA = Pointer(Struct('tagAUXCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    wTechnology: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD
}));
T.AUXCAPSW = Struct('tagAUXCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    wTechnology: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD
});
T.LPAUXCAPSW = Pointer(Struct('tagAUXCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    wTechnology: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD
}));
T.AUXCAPS = T.AUXCAPSA;
T.LPAUXCAPS = T.LPAUXCAPSA;
T.AUXCAPS2A = Struct('tagAUXCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    wTechnology: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});
T.LPAUXCAPS2A = Pointer(Struct('tagAUXCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    wTechnology: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));
T.AUXCAPS2W = Struct('tagAUXCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    wTechnology: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});
T.LPAUXCAPS2W = Pointer(Struct('tagAUXCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    wTechnology: T.WORD,
    wReserved1: T.WORD,
    dwSupport: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));
T.AUXCAPS2 = T.AUXCAPS2A;
T.LPAUXCAPS2 = T.LPAUXCAPS2A;
T.LPTIMECALLBACK = Pointer(Fn(null, [[T.UINT], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR], [T.DWORD_PTR]]));
T.TIMECAPS = Struct('timecaps_tag', {
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT
});
T.LPTIMECAPS = Pointer(Struct('timecaps_tag', {
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT
}));
T.JOYCAPSA = Struct('tagJOYCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    szPname: ArrayType(T.CHAR, 32),
    wXmin: T.UINT,
    wXmax: T.UINT,
    wYmin: T.UINT,
    wYmax: T.UINT,
    wZmin: T.UINT,
    wZmax: T.UINT,
    wNumButtons: T.UINT,
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT,
    wRmin: T.UINT,
    wRmax: T.UINT,
    wUmin: T.UINT,
    wUmax: T.UINT,
    wVmin: T.UINT,
    wVmax: T.UINT,
    wCaps: T.UINT,
    wMaxAxes: T.UINT,
    wNumAxes: T.UINT,
    wMaxButtons: T.UINT,
    szRegKey: ArrayType(T.CHAR, 32),
    szOEMVxD: ArrayType(T.CHAR, 260)
});
T.LPJOYCAPSA = Pointer(Struct('tagJOYCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    szPname: ArrayType(T.CHAR, 32),
    wXmin: T.UINT,
    wXmax: T.UINT,
    wYmin: T.UINT,
    wYmax: T.UINT,
    wZmin: T.UINT,
    wZmax: T.UINT,
    wNumButtons: T.UINT,
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT,
    wRmin: T.UINT,
    wRmax: T.UINT,
    wUmin: T.UINT,
    wUmax: T.UINT,
    wVmin: T.UINT,
    wVmax: T.UINT,
    wCaps: T.UINT,
    wMaxAxes: T.UINT,
    wNumAxes: T.UINT,
    wMaxButtons: T.UINT,
    szRegKey: ArrayType(T.CHAR, 32),
    szOEMVxD: ArrayType(T.CHAR, 260)
}));
T.JOYCAPSW = Struct('tagJOYCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    szPname: ArrayType(T.WCHAR, 32),
    wXmin: T.UINT,
    wXmax: T.UINT,
    wYmin: T.UINT,
    wYmax: T.UINT,
    wZmin: T.UINT,
    wZmax: T.UINT,
    wNumButtons: T.UINT,
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT,
    wRmin: T.UINT,
    wRmax: T.UINT,
    wUmin: T.UINT,
    wUmax: T.UINT,
    wVmin: T.UINT,
    wVmax: T.UINT,
    wCaps: T.UINT,
    wMaxAxes: T.UINT,
    wNumAxes: T.UINT,
    wMaxButtons: T.UINT,
    szRegKey: ArrayType(T.WCHAR, 32),
    szOEMVxD: ArrayType(T.WCHAR, 260)
});
T.LPJOYCAPSW = Pointer(Struct('tagJOYCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    szPname: ArrayType(T.WCHAR, 32),
    wXmin: T.UINT,
    wXmax: T.UINT,
    wYmin: T.UINT,
    wYmax: T.UINT,
    wZmin: T.UINT,
    wZmax: T.UINT,
    wNumButtons: T.UINT,
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT,
    wRmin: T.UINT,
    wRmax: T.UINT,
    wUmin: T.UINT,
    wUmax: T.UINT,
    wVmin: T.UINT,
    wVmax: T.UINT,
    wCaps: T.UINT,
    wMaxAxes: T.UINT,
    wNumAxes: T.UINT,
    wMaxButtons: T.UINT,
    szRegKey: ArrayType(T.WCHAR, 32),
    szOEMVxD: ArrayType(T.WCHAR, 260)
}));
T.JOYCAPS = T.JOYCAPSA;
T.LPJOYCAPS = T.LPJOYCAPSA;
T.JOYCAPS2A = Struct('tagJOYCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    szPname: ArrayType(T.CHAR, 32),
    wXmin: T.UINT,
    wXmax: T.UINT,
    wYmin: T.UINT,
    wYmax: T.UINT,
    wZmin: T.UINT,
    wZmax: T.UINT,
    wNumButtons: T.UINT,
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT,
    wRmin: T.UINT,
    wRmax: T.UINT,
    wUmin: T.UINT,
    wUmax: T.UINT,
    wVmin: T.UINT,
    wVmax: T.UINT,
    wCaps: T.UINT,
    wMaxAxes: T.UINT,
    wNumAxes: T.UINT,
    wMaxButtons: T.UINT,
    szRegKey: ArrayType(T.CHAR, 32),
    szOEMVxD: ArrayType(T.CHAR, 260),
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});
T.LPJOYCAPS2A = Pointer(Struct('tagJOYCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    szPname: ArrayType(T.CHAR, 32),
    wXmin: T.UINT,
    wXmax: T.UINT,
    wYmin: T.UINT,
    wYmax: T.UINT,
    wZmin: T.UINT,
    wZmax: T.UINT,
    wNumButtons: T.UINT,
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT,
    wRmin: T.UINT,
    wRmax: T.UINT,
    wUmin: T.UINT,
    wUmax: T.UINT,
    wVmin: T.UINT,
    wVmax: T.UINT,
    wCaps: T.UINT,
    wMaxAxes: T.UINT,
    wNumAxes: T.UINT,
    wMaxButtons: T.UINT,
    szRegKey: ArrayType(T.CHAR, 32),
    szOEMVxD: ArrayType(T.CHAR, 260),
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));
T.JOYCAPS2W = Struct('tagJOYCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    szPname: ArrayType(T.WCHAR, 32),
    wXmin: T.UINT,
    wXmax: T.UINT,
    wYmin: T.UINT,
    wYmax: T.UINT,
    wZmin: T.UINT,
    wZmax: T.UINT,
    wNumButtons: T.UINT,
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT,
    wRmin: T.UINT,
    wRmax: T.UINT,
    wUmin: T.UINT,
    wUmax: T.UINT,
    wVmin: T.UINT,
    wVmax: T.UINT,
    wCaps: T.UINT,
    wMaxAxes: T.UINT,
    wNumAxes: T.UINT,
    wMaxButtons: T.UINT,
    szRegKey: ArrayType(T.WCHAR, 32),
    szOEMVxD: ArrayType(T.WCHAR, 260),
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});
T.LPJOYCAPS2W = Pointer(Struct('tagJOYCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    szPname: ArrayType(T.WCHAR, 32),
    wXmin: T.UINT,
    wXmax: T.UINT,
    wYmin: T.UINT,
    wYmax: T.UINT,
    wZmin: T.UINT,
    wZmax: T.UINT,
    wNumButtons: T.UINT,
    wPeriodMin: T.UINT,
    wPeriodMax: T.UINT,
    wRmin: T.UINT,
    wRmax: T.UINT,
    wUmin: T.UINT,
    wUmax: T.UINT,
    wVmin: T.UINT,
    wVmax: T.UINT,
    wCaps: T.UINT,
    wMaxAxes: T.UINT,
    wNumAxes: T.UINT,
    wMaxButtons: T.UINT,
    szRegKey: ArrayType(T.WCHAR, 32),
    szOEMVxD: ArrayType(T.WCHAR, 260),
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));
T.JOYCAPS2 = T.JOYCAPS2A;
T.LPJOYCAPS2 = T.LPJOYCAPS2A;
T.JOYINFO = Struct('joyinfo_tag', {
    wXpos: T.UINT,
    wYpos: T.UINT,
    wZpos: T.UINT,
    wButtons: T.UINT
});
T.LPJOYINFO = Pointer(Struct('joyinfo_tag', {
    wXpos: T.UINT,
    wYpos: T.UINT,
    wZpos: T.UINT,
    wButtons: T.UINT
}));
T.JOYINFOEX = Struct('joyinfoex_tag', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    dwXpos: T.DWORD,
    dwYpos: T.DWORD,
    dwZpos: T.DWORD,
    dwRpos: T.DWORD,
    dwUpos: T.DWORD,
    dwVpos: T.DWORD,
    dwButtons: T.DWORD,
    dwButtonNumber: T.DWORD,
    dwPOV: T.DWORD,
    dwReserved1: T.DWORD,
    dwReserved2: T.DWORD
});
T.LPJOYINFOEX = Pointer(Struct('joyinfoex_tag', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    dwXpos: T.DWORD,
    dwYpos: T.DWORD,
    dwZpos: T.DWORD,
    dwRpos: T.DWORD,
    dwUpos: T.DWORD,
    dwVpos: T.DWORD,
    dwButtons: T.DWORD,
    dwButtonNumber: T.DWORD,
    dwPOV: T.DWORD,
    dwReserved1: T.DWORD,
    dwReserved2: T.DWORD
}));
T.MIXERCAPSA = Struct('tagMIXERCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    fdwSupport: T.DWORD,
    cDestinations: T.DWORD
});
T.LPMIXERCAPSA = Pointer(Struct('tagMIXERCAPSA', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    fdwSupport: T.DWORD,
    cDestinations: T.DWORD
}));
T.MIXERCAPSW = Struct('tagMIXERCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    fdwSupport: T.DWORD,
    cDestinations: T.DWORD
});
T.LPMIXERCAPSW = Pointer(Struct('tagMIXERCAPSW', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    fdwSupport: T.DWORD,
    cDestinations: T.DWORD
}));
T.MIXERCAPS = T.MIXERCAPSA;
T.LPMIXERCAPS = T.LPMIXERCAPSA;
T.MIXERCAPS2A = Struct('tagMIXERCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    fdwSupport: T.DWORD,
    cDestinations: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});
T.LPMIXERCAPS2A = Pointer(Struct('tagMIXERCAPS2A', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.CHAR, 32),
    fdwSupport: T.DWORD,
    cDestinations: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));
T.MIXERCAPS2W = Struct('tagMIXERCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    fdwSupport: T.DWORD,
    cDestinations: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
});
T.LPMIXERCAPS2W = Pointer(Struct('tagMIXERCAPS2W', {
    wMid: T.WORD,
    wPid: T.WORD,
    vDriverVersion: T.MMVERSION,
    szPname: ArrayType(T.WCHAR, 32),
    fdwSupport: T.DWORD,
    cDestinations: T.DWORD,
    ManufacturerGuid: T.GUID,
    ProductGuid: T.GUID,
    NameGuid: T.GUID
}));
T.MIXERCAPS2 = T.MIXERCAPS2A;
T.LPMIXERCAPS2 = T.LPMIXERCAPS2A;
T.MIXERLINEA = Struct('tagMIXERLINEA', {
    cbStruct: T.DWORD,
    dwDestination: T.DWORD,
    dwSource: T.DWORD,
    dwLineID: T.DWORD,
    fdwLine: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwComponentType: T.DWORD,
    cChannels: T.DWORD,
    cConnections: T.DWORD,
    cControls: T.DWORD,
    szShortName: ArrayType(T.CHAR, 16),
    szName: ArrayType(T.CHAR, 64),
    Target: Struct('', {
        dwType: T.DWORD,
        dwDeviceID: T.DWORD,
        wMid: T.WORD,
        wPid: T.WORD,
        vDriverVersion: T.MMVERSION,
        szPname: ArrayType(T.CHAR, 32)
    })
});
T.LPMIXERLINEA = Pointer(Struct('tagMIXERLINEA', {
    cbStruct: T.DWORD,
    dwDestination: T.DWORD,
    dwSource: T.DWORD,
    dwLineID: T.DWORD,
    fdwLine: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwComponentType: T.DWORD,
    cChannels: T.DWORD,
    cConnections: T.DWORD,
    cControls: T.DWORD,
    szShortName: ArrayType(T.CHAR, 16),
    szName: ArrayType(T.CHAR, 64),
    Target: Struct('', {
        dwType: T.DWORD,
        dwDeviceID: T.DWORD,
        wMid: T.WORD,
        wPid: T.WORD,
        vDriverVersion: T.MMVERSION,
        szPname: ArrayType(T.CHAR, 32)
    })
}));
T.MIXERLINEW = Struct('tagMIXERLINEW', {
    cbStruct: T.DWORD,
    dwDestination: T.DWORD,
    dwSource: T.DWORD,
    dwLineID: T.DWORD,
    fdwLine: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwComponentType: T.DWORD,
    cChannels: T.DWORD,
    cConnections: T.DWORD,
    cControls: T.DWORD,
    szShortName: ArrayType(T.WCHAR, 16),
    szName: ArrayType(T.WCHAR, 64),
    Target: Struct('', {
        dwType: T.DWORD,
        dwDeviceID: T.DWORD,
        wMid: T.WORD,
        wPid: T.WORD,
        vDriverVersion: T.MMVERSION,
        szPname: ArrayType(T.WCHAR, 32)
    })
});
T.LPMIXERLINEW = Pointer(Struct('tagMIXERLINEW', {
    cbStruct: T.DWORD,
    dwDestination: T.DWORD,
    dwSource: T.DWORD,
    dwLineID: T.DWORD,
    fdwLine: T.DWORD,
    dwUser: T.DWORD_PTR,
    dwComponentType: T.DWORD,
    cChannels: T.DWORD,
    cConnections: T.DWORD,
    cControls: T.DWORD,
    szShortName: ArrayType(T.WCHAR, 16),
    szName: ArrayType(T.WCHAR, 64),
    Target: Struct('', {
        dwType: T.DWORD,
        dwDeviceID: T.DWORD,
        wMid: T.WORD,
        wPid: T.WORD,
        vDriverVersion: T.MMVERSION,
        szPname: ArrayType(T.WCHAR, 32)
    })
}));
T.MIXERLINE = T.MIXERLINEA;
T.LPMIXERLINE = T.LPMIXERLINEA;
T.MIXERCONTROLA = Struct('tagMIXERCONTROLA', {
    cbStruct: T.DWORD,
    dwControlID: T.DWORD,
    dwControlType: T.DWORD,
    fdwControl: T.DWORD,
    cMultipleItems: T.DWORD,
    szShortName: ArrayType(T.CHAR, 16),
    szName: ArrayType(T.CHAR, 64),
    Bounds: Union('', {
        __unnamed0: Struct('', {
            lMinimum: T.LONG,
            lMaximum: T.LONG
        }),
        __unnamed1: Struct('', {
            dwMinimum: T.DWORD,
            dwMaximum: T.DWORD
        }),
        dwReserved: ArrayType(T.DWORD, 6)
    }),
    Metrics: Union('', {
        cSteps: T.DWORD,
        cbCustomData: T.DWORD,
        dwReserved: ArrayType(T.DWORD, 6)
    })
});
T.LPMIXERCONTROLA = Pointer(Struct('tagMIXERCONTROLA', {
    cbStruct: T.DWORD,
    dwControlID: T.DWORD,
    dwControlType: T.DWORD,
    fdwControl: T.DWORD,
    cMultipleItems: T.DWORD,
    szShortName: ArrayType(T.CHAR, 16),
    szName: ArrayType(T.CHAR, 64),
    Bounds: Union('', {
        __unnamed0: Struct('', {
            lMinimum: T.LONG,
            lMaximum: T.LONG
        }),
        __unnamed1: Struct('', {
            dwMinimum: T.DWORD,
            dwMaximum: T.DWORD
        }),
        dwReserved: ArrayType(T.DWORD, 6)
    }),
    Metrics: Union('', {
        cSteps: T.DWORD,
        cbCustomData: T.DWORD,
        dwReserved: ArrayType(T.DWORD, 6)
    })
}));
T.MIXERCONTROLW = Struct('MIXERCONTROLW', {
    cbStruct: T.DWORD,
    dwControlID: T.DWORD,
    dwControlType: T.DWORD,
    fdwControl: T.DWORD,
    cMultipleItems: T.DWORD,
    szShortName: ArrayType(T.WCHAR, 16),
    szName: ArrayType(T.WCHAR, 64),
    Bounds: Union('', {
        __unnamed0: Struct('', {
            lMinimum: T.LONG,
            lMaximum: T.LONG
        }),
        __unnamed1: Struct('', {
            dwMinimum: T.DWORD,
            dwMaximum: T.DWORD
        }),
        dwReserved: ArrayType(T.DWORD, 6)
    }),
    Metrics: Union('', {
        cSteps: T.DWORD,
        cbCustomData: T.DWORD,
        dwReserved: ArrayType(T.DWORD, 6)
    })
});
T.LPMIXERCONTROLW = Pointer(Struct('MIXERCONTROLW', {
    cbStruct: T.DWORD,
    dwControlID: T.DWORD,
    dwControlType: T.DWORD,
    fdwControl: T.DWORD,
    cMultipleItems: T.DWORD,
    szShortName: ArrayType(T.WCHAR, 16),
    szName: ArrayType(T.WCHAR, 64),
    Bounds: Union('', {
        __unnamed0: Struct('', {
            lMinimum: T.LONG,
            lMaximum: T.LONG
        }),
        __unnamed1: Struct('', {
            dwMinimum: T.DWORD,
            dwMaximum: T.DWORD
        }),
        dwReserved: ArrayType(T.DWORD, 6)
    }),
    Metrics: Union('', {
        cSteps: T.DWORD,
        cbCustomData: T.DWORD,
        dwReserved: ArrayType(T.DWORD, 6)
    })
}));
T.MIXERCONTROL = T.MIXERCONTROLA;
T.LPMIXERCONTROL = T.LPMIXERCONTROLA;
T.MIXERLINECONTROLSA = Struct('tagMIXERLINECONTROLSA', {
    cbStruct: T.DWORD,
    dwLineID: T.DWORD,
    __unnamed0: Union('', {
        dwControlID: T.DWORD,
        dwControlType: T.DWORD
    }),
    cControls: T.DWORD,
    cbmxctrl: T.DWORD,
    pamxctrl: T.LPMIXERCONTROLA
});
T.LPMIXERLINECONTROLSA = Pointer(Struct('tagMIXERLINECONTROLSA', {
    cbStruct: T.DWORD,
    dwLineID: T.DWORD,
    __unnamed0: Union('', {
        dwControlID: T.DWORD,
        dwControlType: T.DWORD
    }),
    cControls: T.DWORD,
    cbmxctrl: T.DWORD,
    pamxctrl: T.LPMIXERCONTROLA
}));
T.MIXERLINECONTROLSW = Struct('tagMIXERLINECONTROLSW', {
    cbStruct: T.DWORD,
    dwLineID: T.DWORD,
    __unnamed0: Union('', {
        dwControlID: T.DWORD,
        dwControlType: T.DWORD
    }),
    cControls: T.DWORD,
    cbmxctrl: T.DWORD,
    pamxctrl: T.LPMIXERCONTROLW
});
T.LPMIXERLINECONTROLSW = Pointer(Struct('tagMIXERLINECONTROLSW', {
    cbStruct: T.DWORD,
    dwLineID: T.DWORD,
    __unnamed0: Union('', {
        dwControlID: T.DWORD,
        dwControlType: T.DWORD
    }),
    cControls: T.DWORD,
    cbmxctrl: T.DWORD,
    pamxctrl: T.LPMIXERCONTROLW
}));
T.MIXERLINECONTROLS = T.MIXERLINECONTROLSA;
T.LPMIXERLINECONTROLS = T.LPMIXERLINECONTROLSA;
T.MIXERCONTROLDETAILS = Struct('tMIXERCONTROLDETAILS', {
    cbStruct: T.DWORD,
    dwControlID: T.DWORD,
    cChannels: T.DWORD,
    __unnamed0: Union('', {
        hwndOwner: T.HWND,
        cMultipleItems: T.DWORD
    }),
    cbDetails: T.DWORD,
    paDetails: T.LPVOID
});
T.LPMIXERCONTROLDETAILS = Pointer(Struct('tMIXERCONTROLDETAILS', {
    cbStruct: T.DWORD,
    dwControlID: T.DWORD,
    cChannels: T.DWORD,
    __unnamed0: Union('', {
        hwndOwner: T.HWND,
        cMultipleItems: T.DWORD
    }),
    cbDetails: T.DWORD,
    paDetails: T.LPVOID
}));
T.MIXERCONTROLDETAILS_LISTTEXTA = Struct('tagMIXERCONTROLDETAILS_LISTTEXTA', {
    dwParam1: T.DWORD,
    dwParam2: T.DWORD,
    szName: ArrayType(T.CHAR, 64)
});
T.LPMIXERCONTROLDETAILS_LISTTEXTA = Pointer(Struct('tagMIXERCONTROLDETAILS_LISTTEXTA', {
    dwParam1: T.DWORD,
    dwParam2: T.DWORD,
    szName: ArrayType(T.CHAR, 64)
}));
T.MIXERCONTROLDETAILS_LISTTEXTW = Struct('tagMIXERCONTROLDETAILS_LISTTEXTW', {
    dwParam1: T.DWORD,
    dwParam2: T.DWORD,
    szName: ArrayType(T.WCHAR, 64)
});
T.LPMIXERCONTROLDETAILS_LISTTEXTW = Pointer(Struct('tagMIXERCONTROLDETAILS_LISTTEXTW', {
    dwParam1: T.DWORD,
    dwParam2: T.DWORD,
    szName: ArrayType(T.WCHAR, 64)
}));
T.MIXERCONTROLDETAILS_LISTTEXT = T.MIXERCONTROLDETAILS_LISTTEXTA;
T.LPMIXERCONTROLDETAILS_LISTTEXT = T.LPMIXERCONTROLDETAILS_LISTTEXTA;
T.MIXERCONTROLDETAILS_BOOLEAN = Struct('', {
    fValue: T.LONG
});
T.LPMIXERCONTROLDETAILS_BOOLEAN = Pointer(Struct('', {
    fValue: T.LONG
}));
T.MIXERCONTROLDETAILS_SIGNED = Struct('', {
    lValue: T.LONG
});
T.LPMIXERCONTROLDETAILS_SIGNED = Pointer(Struct('', {
    lValue: T.LONG
}));
T.MIXERCONTROLDETAILS_UNSIGNED = Struct('', {
    dwValue: T.DWORD
});
T.LPMIXERCONTROLDETAILS_UNSIGNED = Pointer(Struct('', {
    dwValue: T.DWORD
}));
T.FOURCC = T.DWORD;
T.LPMMIOPROC = Pointer(Fn(T.LRESULT, [[T.LPSTR, 'lpmmioinfo'], [T.UINT, 'uMessage'], [T.LPARAM, 'lParam1'], [T.LPARAM, 'lParam2']]));
T.MMIOINFO = Struct('_MMIOINFO', {
    dwFlags: T.DWORD,
    fccIOProc: T.FOURCC,
    pIOProc: T.LPMMIOPROC,
    wErrorRet: T.UINT,
    hTask: T.HTASK,
    cchBuffer: T.LONG,
    pchBuffer: T.HPSTR,
    pchNext: T.HPSTR,
    pchEndRead: T.HPSTR,
    pchEndWrite: T.HPSTR,
    lBufOffset: T.LONG,
    lDiskOffset: T.LONG,
    adwInfo: ArrayType(T.DWORD, 3),
    dwReserved1: T.DWORD,
    dwReserved2: T.DWORD,
    hmmio: T.HMMIO
});
T.PMMIOINFO = Pointer(Struct('_MMIOINFO', {
    dwFlags: T.DWORD,
    fccIOProc: T.FOURCC,
    pIOProc: T.LPMMIOPROC,
    wErrorRet: T.UINT,
    hTask: T.HTASK,
    cchBuffer: T.LONG,
    pchBuffer: T.HPSTR,
    pchNext: T.HPSTR,
    pchEndRead: T.HPSTR,
    pchEndWrite: T.HPSTR,
    lBufOffset: T.LONG,
    lDiskOffset: T.LONG,
    adwInfo: ArrayType(T.DWORD, 3),
    dwReserved1: T.DWORD,
    dwReserved2: T.DWORD,
    hmmio: T.HMMIO
}));
T.LPMMIOINFO = Pointer(Struct('_MMIOINFO', {
    dwFlags: T.DWORD,
    fccIOProc: T.FOURCC,
    pIOProc: T.LPMMIOPROC,
    wErrorRet: T.UINT,
    hTask: T.HTASK,
    cchBuffer: T.LONG,
    pchBuffer: T.HPSTR,
    pchNext: T.HPSTR,
    pchEndRead: T.HPSTR,
    pchEndWrite: T.HPSTR,
    lBufOffset: T.LONG,
    lDiskOffset: T.LONG,
    adwInfo: ArrayType(T.DWORD, 3),
    dwReserved1: T.DWORD,
    dwReserved2: T.DWORD,
    hmmio: T.HMMIO
}));
T.MMCKINFO = Struct('_MMCKINFO', {
    ckid: T.FOURCC,
    cksize: T.DWORD,
    fccType: T.FOURCC,
    dwDataOffset: T.DWORD,
    dwFlags: T.DWORD
});
T.LPMMCKINFO = Pointer(Struct('_MMCKINFO', {
    ckid: T.FOURCC,
    cksize: T.DWORD,
    fccType: T.FOURCC,
    dwDataOffset: T.DWORD,
    dwFlags: T.DWORD
}));
T.YIELDPROC = Pointer(Fn(T.UINT, [[T.MCIDEVICEID], [T.DWORD]]));
T.MCI_GENERIC_PARMS = Struct('tagMCI_GENERIC_PARMS', {
    dwCallback: T.DWORD_PTR
});
T.LPMCI_GENERIC_PARMS = Pointer(Struct('tagMCI_GENERIC_PARMS', {
    dwCallback: T.DWORD_PTR
}));
T.MCI_OPEN_PARMSA = Struct('tagMCI_OPEN_PARMSA', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCSTR,
    lpstrElementName: T.LPCSTR,
    lpstrAlias: T.LPCSTR
});
T.LPMCI_OPEN_PARMSA = Pointer(Struct('tagMCI_OPEN_PARMSA', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCSTR,
    lpstrElementName: T.LPCSTR,
    lpstrAlias: T.LPCSTR
}));
T.MCI_OPEN_PARMSW = Struct('tagMCI_OPEN_PARMSW', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCWSTR,
    lpstrElementName: T.LPCWSTR,
    lpstrAlias: T.LPCWSTR
});
T.LPMCI_OPEN_PARMSW = Pointer(Struct('tagMCI_OPEN_PARMSW', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCWSTR,
    lpstrElementName: T.LPCWSTR,
    lpstrAlias: T.LPCWSTR
}));
T.MCI_OPEN_PARMS = T.MCI_OPEN_PARMSA;
T.LPMCI_OPEN_PARMS = T.LPMCI_OPEN_PARMSA;
T.MCI_PLAY_PARMS = Struct('tagMCI_PLAY_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD
});
T.LPMCI_PLAY_PARMS = Pointer(Struct('tagMCI_PLAY_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD
}));
T.MCI_SEEK_PARMS = Struct('tagMCI_SEEK_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwTo: T.DWORD
});
T.LPMCI_SEEK_PARMS = Pointer(Struct('tagMCI_SEEK_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwTo: T.DWORD
}));
T.MCI_STATUS_PARMS = Struct('tagMCI_STATUS_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwReturn: T.DWORD_PTR,
    dwItem: T.DWORD,
    dwTrack: T.DWORD
});
T.LPMCI_STATUS_PARMS = Pointer(Struct('tagMCI_STATUS_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwReturn: T.DWORD_PTR,
    dwItem: T.DWORD,
    dwTrack: T.DWORD
}));
T.MCI_INFO_PARMSA = Struct('tagMCI_INFO_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpstrReturn: T.LPSTR,
    dwRetSize: T.DWORD
});
T.LPMCI_INFO_PARMSA = Pointer(Struct('tagMCI_INFO_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpstrReturn: T.LPSTR,
    dwRetSize: T.DWORD
}));
T.MCI_INFO_PARMSW = Struct('tagMCI_INFO_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpstrReturn: T.LPWSTR,
    dwRetSize: T.DWORD
});
T.LPMCI_INFO_PARMSW = Pointer(Struct('tagMCI_INFO_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpstrReturn: T.LPWSTR,
    dwRetSize: T.DWORD
}));
T.MCI_INFO_PARMS = T.MCI_INFO_PARMSA;
T.LPMCI_INFO_PARMS = T.LPMCI_INFO_PARMSA;
T.MCI_GETDEVCAPS_PARMS = Struct('tagMCI_GETDEVCAPS_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwReturn: T.DWORD,
    dwItem: T.DWORD
});
T.LPMCI_GETDEVCAPS_PARMS = Pointer(Struct('tagMCI_GETDEVCAPS_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwReturn: T.DWORD,
    dwItem: T.DWORD
}));
T.MCI_SYSINFO_PARMSA = Struct('tagMCI_SYSINFO_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpstrReturn: T.LPSTR,
    dwRetSize: T.DWORD,
    dwNumber: T.DWORD,
    wDeviceType: T.UINT
});
T.LPMCI_SYSINFO_PARMSA = Pointer(Struct('tagMCI_SYSINFO_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpstrReturn: T.LPSTR,
    dwRetSize: T.DWORD,
    dwNumber: T.DWORD,
    wDeviceType: T.UINT
}));
T.MCI_SYSINFO_PARMSW = Struct('tagMCI_SYSINFO_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpstrReturn: T.LPWSTR,
    dwRetSize: T.DWORD,
    dwNumber: T.DWORD,
    wDeviceType: T.UINT
});
T.LPMCI_SYSINFO_PARMSW = Pointer(Struct('tagMCI_SYSINFO_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpstrReturn: T.LPWSTR,
    dwRetSize: T.DWORD,
    dwNumber: T.DWORD,
    wDeviceType: T.UINT
}));
T.MCI_SYSINFO_PARMS = T.MCI_SYSINFO_PARMSA;
T.LPMCI_SYSINFO_PARMS = T.LPMCI_SYSINFO_PARMSA;
T.MCI_SET_PARMS = Struct('tagMCI_SET_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwTimeFormat: T.DWORD,
    dwAudio: T.DWORD
});
T.LPMCI_SET_PARMS = Pointer(Struct('tagMCI_SET_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwTimeFormat: T.DWORD,
    dwAudio: T.DWORD
}));
T.MCI_BREAK_PARMS = Struct('tagMCI_BREAK_PARMS', {
    dwCallback: T.DWORD_PTR,
    nVirtKey: T.INT,
    hwndBreak: T.HWND
});
T.LPMCI_BREAK_PARMS = Pointer(Struct('tagMCI_BREAK_PARMS', {
    dwCallback: T.DWORD_PTR,
    nVirtKey: T.INT,
    hwndBreak: T.HWND
}));
T.MCI_SOUND_PARMSA = Struct('tagMCI_SOUND_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpstrSoundName: T.LPCSTR
});
T.LPMCI_SOUND_PARMSA = Pointer(Struct('tagMCI_SOUND_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpstrSoundName: T.LPCSTR
}));
T.MCI_SOUND_PARMSW = Struct('tagMCI_SOUND_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpstrSoundName: T.LPCWSTR
});
T.LPMCI_SOUND_PARMSW = Pointer(Struct('tagMCI_SOUND_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpstrSoundName: T.LPCWSTR
}));
T.MCI_SOUND_PARMS = T.MCI_SOUND_PARMSA;
T.LPMCI_SOUND_PARMS = T.LPMCI_SOUND_PARMSA;
T.MCI_SAVE_PARMSA = Struct('tagMCI_SAVE_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCSTR
});
T.LPMCI_SAVE_PARMSA = Pointer(Struct('tagMCI_SAVE_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCSTR
}));
T.MCI_SAVE_PARMSW = Struct('tagMCI_SAVE_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCWSTR
});
T.LPMCI_SAVE_PARMSW = Pointer(Struct('tagMCI_SAVE_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCWSTR
}));
T.MCI_SAVE_PARMS = T.MCI_SAVE_PARMSA;
T.LPMCI_SAVE_PARMS = T.LPMCI_SAVE_PARMSA;
T.MCI_LOAD_PARMSA = Struct('tagMCI_LOAD_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCSTR
});
T.LPMCI_LOAD_PARMSA = Pointer(Struct('tagMCI_LOAD_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCSTR
}));
T.MCI_LOAD_PARMSW = Struct('tagMCI_LOAD_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCWSTR
});
T.LPMCI_LOAD_PARMSW = Pointer(Struct('tagMCI_LOAD_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCWSTR
}));
T.MCI_LOAD_PARMS = T.MCI_LOAD_PARMSA;
T.LPMCI_LOAD_PARMS = T.LPMCI_LOAD_PARMSA;
T.MCI_RECORD_PARMS = Struct('tagMCI_RECORD_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD
});
T.LPMCI_RECORD_PARMS = Pointer(Struct('tagMCI_RECORD_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD
}));
T.MCI_VD_PLAY_PARMS = Struct('tagMCI_VD_PLAY_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD,
    dwSpeed: T.DWORD
});
T.LPMCI_VD_PLAY_PARMS = Pointer(Struct('tagMCI_VD_PLAY_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD,
    dwSpeed: T.DWORD
}));
T.MCI_VD_STEP_PARMS = Struct('tagMCI_VD_STEP_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrames: T.DWORD
});
T.LPMCI_VD_STEP_PARMS = Pointer(Struct('tagMCI_VD_STEP_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrames: T.DWORD
}));
T.MCI_VD_ESCAPE_PARMSA = Struct('tagMCI_VD_ESCAPE_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpstrCommand: T.LPCSTR
});
T.LPMCI_VD_ESCAPE_PARMSA = Pointer(Struct('tagMCI_VD_ESCAPE_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpstrCommand: T.LPCSTR
}));
T.MCI_VD_ESCAPE_PARMSW = Struct('tagMCI_VD_ESCAPE_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpstrCommand: T.LPCWSTR
});
T.LPMCI_VD_ESCAPE_PARMSW = Pointer(Struct('tagMCI_VD_ESCAPE_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpstrCommand: T.LPCWSTR
}));
T.MCI_VD_ESCAPE_PARMS = T.MCI_VD_ESCAPE_PARMSA;
T.LPMCI_VD_ESCAPE_PARMS = T.LPMCI_VD_ESCAPE_PARMSA;
T.MCI_WAVE_OPEN_PARMSA = Struct('tagMCI_WAVE_OPEN_PARMSA', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCSTR,
    lpstrElementName: T.LPCSTR,
    lpstrAlias: T.LPCSTR,
    dwBufferSeconds: T.DWORD
});
T.LPMCI_WAVE_OPEN_PARMSA = Pointer(Struct('tagMCI_WAVE_OPEN_PARMSA', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCSTR,
    lpstrElementName: T.LPCSTR,
    lpstrAlias: T.LPCSTR,
    dwBufferSeconds: T.DWORD
}));
T.MCI_WAVE_OPEN_PARMSW = Struct('tagMCI_WAVE_OPEN_PARMSW', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCWSTR,
    lpstrElementName: T.LPCWSTR,
    lpstrAlias: T.LPCWSTR,
    dwBufferSeconds: T.DWORD
});
T.LPMCI_WAVE_OPEN_PARMSW = Pointer(Struct('tagMCI_WAVE_OPEN_PARMSW', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCWSTR,
    lpstrElementName: T.LPCWSTR,
    lpstrAlias: T.LPCWSTR,
    dwBufferSeconds: T.DWORD
}));
T.MCI_WAVE_OPEN_PARMS = T.MCI_WAVE_OPEN_PARMSA;
T.LPMCI_WAVE_OPEN_PARMS = T.LPMCI_WAVE_OPEN_PARMSA;
T.MCI_WAVE_DELETE_PARMS = Struct('tagMCI_WAVE_DELETE_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD
});
T.LPMCI_WAVE_DELETE_PARMS = Pointer(Struct('tagMCI_WAVE_DELETE_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD
}));
T.MCI_WAVE_SET_PARMS = Struct('tagMCI_WAVE_SET_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwTimeFormat: T.DWORD,
    dwAudio: T.DWORD,
    wInput: T.UINT,
    wOutput: T.UINT,
    wFormatTag: T.UINT,
    nChannels: T.UINT,
    nSamplesPerSec: T.DWORD,
    nAvgBytesPerSec: T.DWORD,
    nBlockAlign: T.UINT,
    wBitsPerSample: T.UINT
});
T.LPMCI_WAVE_SET_PARMS = Pointer(Struct('tagMCI_WAVE_SET_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwTimeFormat: T.DWORD,
    dwAudio: T.DWORD,
    wInput: T.UINT,
    wOutput: T.UINT,
    wFormatTag: T.UINT,
    nChannels: T.UINT,
    nSamplesPerSec: T.DWORD,
    nAvgBytesPerSec: T.DWORD,
    nBlockAlign: T.UINT,
    wBitsPerSample: T.UINT
}));
T.MCI_SEQ_SET_PARMS = Struct('tagMCI_SEQ_SET_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwTimeFormat: T.DWORD,
    dwAudio: T.DWORD,
    dwTempo: T.DWORD,
    dwPort: T.DWORD,
    dwSlave: T.DWORD,
    dwMaster: T.DWORD,
    dwOffset: T.DWORD
});
T.LPMCI_SEQ_SET_PARMS = Pointer(Struct('tagMCI_SEQ_SET_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwTimeFormat: T.DWORD,
    dwAudio: T.DWORD,
    dwTempo: T.DWORD,
    dwPort: T.DWORD,
    dwSlave: T.DWORD,
    dwMaster: T.DWORD,
    dwOffset: T.DWORD
}));
T.MCI_ANIM_OPEN_PARMSA = Struct('tagMCI_ANIM_OPEN_PARMSA', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCSTR,
    lpstrElementName: T.LPCSTR,
    lpstrAlias: T.LPCSTR,
    dwStyle: T.DWORD,
    hWndParent: T.HWND
});
T.LPMCI_ANIM_OPEN_PARMSA = Pointer(Struct('tagMCI_ANIM_OPEN_PARMSA', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCSTR,
    lpstrElementName: T.LPCSTR,
    lpstrAlias: T.LPCSTR,
    dwStyle: T.DWORD,
    hWndParent: T.HWND
}));
T.MCI_ANIM_OPEN_PARMSW = Struct('tagMCI_ANIM_OPEN_PARMSW', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCWSTR,
    lpstrElementName: T.LPCWSTR,
    lpstrAlias: T.LPCWSTR,
    dwStyle: T.DWORD,
    hWndParent: T.HWND
});
T.LPMCI_ANIM_OPEN_PARMSW = Pointer(Struct('tagMCI_ANIM_OPEN_PARMSW', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCWSTR,
    lpstrElementName: T.LPCWSTR,
    lpstrAlias: T.LPCWSTR,
    dwStyle: T.DWORD,
    hWndParent: T.HWND
}));
T.MCI_ANIM_OPEN_PARMS = T.MCI_ANIM_OPEN_PARMSA;
T.LPMCI_ANIM_OPEN_PARMS = T.LPMCI_ANIM_OPEN_PARMSA;
T.MCI_ANIM_PLAY_PARMS = Struct('tagMCI_ANIM_PLAY_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD,
    dwSpeed: T.DWORD
});
T.LPMCI_ANIM_PLAY_PARMS = Pointer(Struct('tagMCI_ANIM_PLAY_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrom: T.DWORD,
    dwTo: T.DWORD,
    dwSpeed: T.DWORD
}));
T.MCI_ANIM_STEP_PARMS = Struct('tagMCI_ANIM_STEP_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrames: T.DWORD
});
T.LPMCI_ANIM_STEP_PARMS = Pointer(Struct('tagMCI_ANIM_STEP_PARMS', {
    dwCallback: T.DWORD_PTR,
    dwFrames: T.DWORD
}));
T.MCI_ANIM_WINDOW_PARMSA = Struct('tagMCI_ANIM_WINDOW_PARMSA', {
    dwCallback: T.DWORD_PTR,
    hWnd: T.HWND,
    nCmdShow: T.UINT,
    lpstrText: T.LPCSTR
});
T.LPMCI_ANIM_WINDOW_PARMSA = Pointer(Struct('tagMCI_ANIM_WINDOW_PARMSA', {
    dwCallback: T.DWORD_PTR,
    hWnd: T.HWND,
    nCmdShow: T.UINT,
    lpstrText: T.LPCSTR
}));
T.MCI_ANIM_WINDOW_PARMSW = Struct('tagMCI_ANIM_WINDOW_PARMSW', {
    dwCallback: T.DWORD_PTR,
    hWnd: T.HWND,
    nCmdShow: T.UINT,
    lpstrText: T.LPCWSTR
});
T.LPMCI_ANIM_WINDOW_PARMSW = Pointer(Struct('tagMCI_ANIM_WINDOW_PARMSW', {
    dwCallback: T.DWORD_PTR,
    hWnd: T.HWND,
    nCmdShow: T.UINT,
    lpstrText: T.LPCWSTR
}));
T.MCI_ANIM_WINDOW_PARMS = T.MCI_ANIM_WINDOW_PARMSA;
T.LPMCI_ANIM_WINDOW_PARMS = T.LPMCI_ANIM_WINDOW_PARMSA;
T.MCI_ANIM_RECT_PARMS = Struct('tagMCI_ANIM_RECT_PARMS', {
    dwCallback: T.DWORD_PTR,
    rc: T.RECT
});
T.LPMCI_ANIM_RECT_PARMS = Pointer(Struct('tagMCI_ANIM_RECT_PARMS', {
    dwCallback: T.DWORD_PTR,
    rc: T.RECT
}));
T.MCI_ANIM_UPDATE_PARMS = Struct('tagMCI_ANIM_UPDATE_PARMS', {
    dwCallback: T.DWORD_PTR,
    rc: T.RECT,
    hDC: T.HDC
});
T.LPMCI_ANIM_UPDATE_PARMS = Pointer(Struct('tagMCI_ANIM_UPDATE_PARMS', {
    dwCallback: T.DWORD_PTR,
    rc: T.RECT,
    hDC: T.HDC
}));
T.MCI_OVLY_OPEN_PARMSA = Struct('tagMCI_OVLY_OPEN_PARMSA', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCSTR,
    lpstrElementName: T.LPCSTR,
    lpstrAlias: T.LPCSTR,
    dwStyle: T.DWORD,
    hWndParent: T.HWND
});
T.LPMCI_OVLY_OPEN_PARMSA = Pointer(Struct('tagMCI_OVLY_OPEN_PARMSA', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCSTR,
    lpstrElementName: T.LPCSTR,
    lpstrAlias: T.LPCSTR,
    dwStyle: T.DWORD,
    hWndParent: T.HWND
}));
T.MCI_OVLY_OPEN_PARMSW = Struct('tagMCI_OVLY_OPEN_PARMSW', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCWSTR,
    lpstrElementName: T.LPCWSTR,
    lpstrAlias: T.LPCWSTR,
    dwStyle: T.DWORD,
    hWndParent: T.HWND
});
T.LPMCI_OVLY_OPEN_PARMSW = Pointer(Struct('tagMCI_OVLY_OPEN_PARMSW', {
    dwCallback: T.DWORD_PTR,
    wDeviceID: T.MCIDEVICEID,
    lpstrDeviceType: T.LPCWSTR,
    lpstrElementName: T.LPCWSTR,
    lpstrAlias: T.LPCWSTR,
    dwStyle: T.DWORD,
    hWndParent: T.HWND
}));
T.MCI_OVLY_OPEN_PARMS = T.MCI_OVLY_OPEN_PARMSA;
T.LPMCI_OVLY_OPEN_PARMS = T.LPMCI_OVLY_OPEN_PARMSA;
T.MCI_OVLY_WINDOW_PARMSA = Struct('tagMCI_OVLY_WINDOW_PARMSA', {
    dwCallback: T.DWORD_PTR,
    hWnd: T.HWND,
    nCmdShow: T.UINT,
    lpstrText: T.LPCSTR
});
T.LPMCI_OVLY_WINDOW_PARMSA = Pointer(Struct('tagMCI_OVLY_WINDOW_PARMSA', {
    dwCallback: T.DWORD_PTR,
    hWnd: T.HWND,
    nCmdShow: T.UINT,
    lpstrText: T.LPCSTR
}));
T.MCI_OVLY_WINDOW_PARMSW = Struct('tagMCI_OVLY_WINDOW_PARMSW', {
    dwCallback: T.DWORD_PTR,
    hWnd: T.HWND,
    nCmdShow: T.UINT,
    lpstrText: T.LPCWSTR
});
T.LPMCI_OVLY_WINDOW_PARMSW = Pointer(Struct('tagMCI_OVLY_WINDOW_PARMSW', {
    dwCallback: T.DWORD_PTR,
    hWnd: T.HWND,
    nCmdShow: T.UINT,
    lpstrText: T.LPCWSTR
}));
T.MCI_OVLY_WINDOW_PARMS = T.MCI_OVLY_WINDOW_PARMSA;
T.LPMCI_OVLY_WINDOW_PARMS = T.LPMCI_OVLY_WINDOW_PARMSA;
T.MCI_OVLY_RECT_PARMS = Struct('tagMCI_OVLY_RECT_PARMS', {
    dwCallback: T.DWORD_PTR,
    rc: T.RECT
});
T.LPMCI_OVLY_RECT_PARMS = Pointer(Struct('tagMCI_OVLY_RECT_PARMS', {
    dwCallback: T.DWORD_PTR,
    rc: T.RECT
}));
T.MCI_OVLY_SAVE_PARMSA = Struct('tagMCI_OVLY_SAVE_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCSTR,
    rc: T.RECT
});
T.LPMCI_OVLY_SAVE_PARMSA = Pointer(Struct('tagMCI_OVLY_SAVE_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCSTR,
    rc: T.RECT
}));
T.MCI_OVLY_SAVE_PARMSW = Struct('tagMCI_OVLY_SAVE_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCWSTR,
    rc: T.RECT
});
T.LPMCI_OVLY_SAVE_PARMSW = Pointer(Struct('tagMCI_OVLY_SAVE_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCWSTR,
    rc: T.RECT
}));
T.MCI_OVLY_SAVE_PARMS = T.MCI_OVLY_SAVE_PARMSA;
T.LPMCI_OVLY_SAVE_PARMS = T.LPMCI_OVLY_SAVE_PARMSA;
T.MCI_OVLY_LOAD_PARMSA = Struct('tagMCI_OVLY_LOAD_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCSTR,
    rc: T.RECT
});
T.LPMCI_OVLY_LOAD_PARMSA = Pointer(Struct('tagMCI_OVLY_LOAD_PARMSA', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCSTR,
    rc: T.RECT
}));
T.MCI_OVLY_LOAD_PARMSW = Struct('tagMCI_OVLY_LOAD_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCWSTR,
    rc: T.RECT
});
T.LPMCI_OVLY_LOAD_PARMSW = Pointer(Struct('tagMCI_OVLY_LOAD_PARMSW', {
    dwCallback: T.DWORD_PTR,
    lpfilename: T.LPCWSTR,
    rc: T.RECT
}));
T.MCI_OVLY_LOAD_PARMS = T.MCI_OVLY_LOAD_PARMSA;
T.LPMCI_OVLY_LOAD_PARMS = T.LPMCI_OVLY_LOAD_PARMSA;
T.NCB = Struct('_NCB', {
    ncb_command: T.UCHAR,
    ncb_retcode: T.UCHAR,
    ncb_lsn: T.UCHAR,
    ncb_num: T.UCHAR,
    ncb_buffer: T.PUCHAR,
    ncb_length: T.WORD,
    ncb_callname: ArrayType(T.UCHAR, 16),
    ncb_name: ArrayType(T.UCHAR, 16),
    ncb_rto: T.UCHAR,
    ncb_sto: T.UCHAR,
    ncb_post: Pointer(Fn(null, [[Pointer(Struct('_NCB', null))]])),
    ncb_lana_num: T.UCHAR,
    ncb_cmd_cplt: T.UCHAR,
    ncb_reserve: ArrayType(T.UCHAR, 10),
    ncb_event: T.HANDLE
});
T.PNCB = Pointer(Struct('_NCB', {
    ncb_command: T.UCHAR,
    ncb_retcode: T.UCHAR,
    ncb_lsn: T.UCHAR,
    ncb_num: T.UCHAR,
    ncb_buffer: T.PUCHAR,
    ncb_length: T.WORD,
    ncb_callname: ArrayType(T.UCHAR, 16),
    ncb_name: ArrayType(T.UCHAR, 16),
    ncb_rto: T.UCHAR,
    ncb_sto: T.UCHAR,
    ncb_post: Pointer(Fn(null, [[Pointer(Struct('_NCB', null))]])),
    ncb_lana_num: T.UCHAR,
    ncb_cmd_cplt: T.UCHAR,
    ncb_reserve: ArrayType(T.UCHAR, 10),
    ncb_event: T.HANDLE
}));
T.ADAPTER_STATUS = Struct('_ADAPTER_STATUS', {
    adapter_address: ArrayType(T.UCHAR, 6),
    rev_major: T.UCHAR,
    reserved0: T.UCHAR,
    adapter_type: T.UCHAR,
    rev_minor: T.UCHAR,
    duration: T.WORD,
    frmr_recv: T.WORD,
    frmr_xmit: T.WORD,
    iframe_recv_error: T.WORD,
    xmit_aborts: T.WORD,
    xmit_success: T.DWORD,
    recv_success: T.DWORD,
    iframe_xmit_error: T.WORD,
    recv_buffer_unavail: T.WORD,
    t1_timeouts: T.WORD,
    ti_timeouts: T.WORD,
    reserved1: T.DWORD,
    free_ncbs: T.WORD,
    max_cfg_ncbs: T.WORD,
    max_ncbs: T.WORD,
    xmit_buf_unavail: T.WORD,
    max_dgram_size: T.WORD,
    pending_sess: T.WORD,
    max_cfg_sess: T.WORD,
    max_sess: T.WORD,
    max_sess_pkt_size: T.WORD,
    name_count: T.WORD
});
T.PADAPTER_STATUS = Pointer(Struct('_ADAPTER_STATUS', {
    adapter_address: ArrayType(T.UCHAR, 6),
    rev_major: T.UCHAR,
    reserved0: T.UCHAR,
    adapter_type: T.UCHAR,
    rev_minor: T.UCHAR,
    duration: T.WORD,
    frmr_recv: T.WORD,
    frmr_xmit: T.WORD,
    iframe_recv_error: T.WORD,
    xmit_aborts: T.WORD,
    xmit_success: T.DWORD,
    recv_success: T.DWORD,
    iframe_xmit_error: T.WORD,
    recv_buffer_unavail: T.WORD,
    t1_timeouts: T.WORD,
    ti_timeouts: T.WORD,
    reserved1: T.DWORD,
    free_ncbs: T.WORD,
    max_cfg_ncbs: T.WORD,
    max_ncbs: T.WORD,
    xmit_buf_unavail: T.WORD,
    max_dgram_size: T.WORD,
    pending_sess: T.WORD,
    max_cfg_sess: T.WORD,
    max_sess: T.WORD,
    max_sess_pkt_size: T.WORD,
    name_count: T.WORD
}));
T.NAME_BUFFER = Struct('_NAME_BUFFER', {
    name: ArrayType(T.UCHAR, 16),
    name_num: T.UCHAR,
    name_flags: T.UCHAR
});
T.PNAME_BUFFER = Pointer(Struct('_NAME_BUFFER', {
    name: ArrayType(T.UCHAR, 16),
    name_num: T.UCHAR,
    name_flags: T.UCHAR
}));
T.LANA_ENUM = Struct('_LANA_ENUM', {
    length: T.UCHAR,
    lana: ArrayType(T.UCHAR, NaN /* additive_expression {
     _0: constant {
      _0: '0xfe'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
});
T.PLANA_ENUM = Pointer(Struct('_LANA_ENUM', {
    length: T.UCHAR,
    lana: ArrayType(T.UCHAR, NaN /* additive_expression {
     _0: constant {
      _0: '0xfe'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
}));
T.FIND_NAME_HEADER = Struct('_FIND_NAME_HEADER', {
    node_count: T.WORD,
    reserved: T.UCHAR,
    unique_group: T.UCHAR
});
T.PFIND_NAME_HEADER = Pointer(Struct('_FIND_NAME_HEADER', {
    node_count: T.WORD,
    reserved: T.UCHAR,
    unique_group: T.UCHAR
}));
T.FIND_NAME_BUFFER = Struct('_FIND_NAME_BUFFER', {
    length: T.UCHAR,
    access_control: T.UCHAR,
    frame_control: T.UCHAR,
    destination_addr: ArrayType(T.UCHAR, 6),
    source_addr: ArrayType(T.UCHAR, 6),
    routing_info: ArrayType(T.UCHAR, 6)
});
T.PFIND_NAME_BUFFER = Pointer(Struct('_FIND_NAME_BUFFER', {
    length: T.UCHAR,
    access_control: T.UCHAR,
    frame_control: T.UCHAR,
    destination_addr: ArrayType(T.UCHAR, 6),
    source_addr: ArrayType(T.UCHAR, 6),
    routing_info: ArrayType(T.UCHAR, 6)
}));
T.SESSION_HEADER = Struct('_SESSION_HEADER', {
    sess_name: T.UCHAR,
    num_sess: T.UCHAR,
    rcv_dg_outstanding: T.UCHAR,
    rcv_any_outstanding: T.UCHAR
});
T.PSESSION_HEADER = Pointer(Struct('_SESSION_HEADER', {
    sess_name: T.UCHAR,
    num_sess: T.UCHAR,
    rcv_dg_outstanding: T.UCHAR,
    rcv_any_outstanding: T.UCHAR
}));
T.SESSION_BUFFER = Struct('_SESSION_BUFFER', {
    lsn: T.UCHAR,
    state: T.UCHAR,
    local_name: ArrayType(T.UCHAR, 16),
    remote_name: ArrayType(T.UCHAR, 16),
    rcvs_outstanding: T.UCHAR,
    sends_outstanding: T.UCHAR
});
T.PSESSION_BUFFER = Pointer(Struct('_SESSION_BUFFER', {
    lsn: T.UCHAR,
    state: T.UCHAR,
    local_name: ArrayType(T.UCHAR, 16),
    remote_name: ArrayType(T.UCHAR, 16),
    rcvs_outstanding: T.UCHAR,
    sends_outstanding: T.UCHAR
}));
T.RPC_STATUS = T.LONG;
T.I_RPC_HANDLE = Pointer(null);
T.UUID = T.GUID;
T.RPC_CSTR = Pointer(T.u8);
T.RPC_WSTR = Pointer(T.u16);
T.RPC_AUTH_IDENTITY_HANDLE = Pointer(null);
T.RPC_AUTHZ_HANDLE = Pointer(null);
T.RPC_IF_HANDLE = Pointer(null);
T.RPC_BINDING_HANDLE = T.I_RPC_HANDLE;
T.handle_t = T.RPC_BINDING_HANDLE;
T.RPC_BINDING_VECTOR = Struct('_RPC_BINDING_VECTOR', {
    Count: T.ULONG,
    BindingH: ArrayType(T.RPC_BINDING_HANDLE, 1)
});
T.UUID_VECTOR = Struct('_UUID_VECTOR', {
    Count: T.ULONG,
    Uuid: ArrayType(Pointer(T.UUID), 1)
});
T.RPC_IF_ID = Struct('_RPC_IF_ID', {
    Uuid: T.UUID,
    VersMajor: T.u16,
    VersMinor: T.u16
});
T.RPC_IF_ID_VECTOR = Struct('', {
    Count: T.ULONG,
    IfId: ArrayType(Pointer(T.RPC_IF_ID), 1)
});
T.RPC_STATS_VECTOR = Struct('', {
    Count: T.u32,
    Stats: ArrayType(T.ULONG, 1)
});
T.RPC_EP_INQ_HANDLE = Pointer(T.I_RPC_HANDLE);
T.RPC_IF_CALLBACK_FN = Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'InterfaceUuid'], [Pointer(null), 'Context']]);
T.RPC_AUTH_KEY_RETRIEVAL_FN = Pointer(Fn(null, [[Pointer(null)], [T.RPC_WSTR], [T.ULONG], [Pointer(Pointer(null))], [Pointer(T.RPC_STATUS)]]));
T.RPC_POLICY = Struct('_RPC_POLICY', {
    Length: T.u32,
    EndpointFlags: T.ULONG,
    NICFlags: T.ULONG
});
T.PRPC_POLICY = Pointer(Struct('_RPC_POLICY', {
    Length: T.u32,
    EndpointFlags: T.ULONG,
    NICFlags: T.ULONG
}));
T.SEC_WINNT_AUTH_IDENTITY_W = Struct('_SEC_WINNT_AUTH_IDENTITY_W', {
    User: Pointer(T.u16),
    UserLength: T.ULONG,
    Domain: Pointer(T.u16),
    DomainLength: T.ULONG,
    Password: Pointer(T.u16),
    PasswordLength: T.ULONG,
    Flags: T.ULONG
});
T.PSEC_WINNT_AUTH_IDENTITY_W = Pointer(Struct('_SEC_WINNT_AUTH_IDENTITY_W', {
    User: Pointer(T.u16),
    UserLength: T.ULONG,
    Domain: Pointer(T.u16),
    DomainLength: T.ULONG,
    Password: Pointer(T.u16),
    PasswordLength: T.ULONG,
    Flags: T.ULONG
}));
T.SEC_WINNT_AUTH_IDENTITY_A = Struct('_SEC_WINNT_AUTH_IDENTITY_A', {
    User: Pointer(T.u8),
    UserLength: T.ULONG,
    Domain: Pointer(T.u8),
    DomainLength: T.ULONG,
    Password: Pointer(T.u8),
    PasswordLength: T.ULONG,
    Flags: T.ULONG
});
T.PSEC_WINNT_AUTH_IDENTITY_A = Pointer(Struct('_SEC_WINNT_AUTH_IDENTITY_A', {
    User: Pointer(T.u8),
    UserLength: T.ULONG,
    Domain: Pointer(T.u8),
    DomainLength: T.ULONG,
    Password: Pointer(T.u8),
    PasswordLength: T.ULONG,
    Flags: T.ULONG
}));
T.RPC_HTTP_TRANSPORT_CREDENTIALS_W = Struct('_RPC_HTTP_TRANSPORT_CREDENTIALS_W', {
    TransportCredentials: Pointer(T.SEC_WINNT_AUTH_IDENTITY_W),
    Flags: T.ULONG,
    AuthenticationTarget: T.ULONG,
    NumberOfAuthnSchemes: T.ULONG,
    AuthnSchemes: Pointer(T.ULONG),
    ServerCertificateSubject: Pointer(T.u16)
});
T.PRPC_HTTP_TRANSPORT_CREDENTIALS_W = Pointer(Struct('_RPC_HTTP_TRANSPORT_CREDENTIALS_W', {
    TransportCredentials: Pointer(T.SEC_WINNT_AUTH_IDENTITY_W),
    Flags: T.ULONG,
    AuthenticationTarget: T.ULONG,
    NumberOfAuthnSchemes: T.ULONG,
    AuthnSchemes: Pointer(T.ULONG),
    ServerCertificateSubject: Pointer(T.u16)
}));
T.RPC_HTTP_TRANSPORT_CREDENTIALS_A = Struct('_RPC_HTTP_TRANSPORT_CREDENTIALS_A', {
    TransportCredentials: Pointer(T.SEC_WINNT_AUTH_IDENTITY_A),
    Flags: T.ULONG,
    AuthenticationTarget: T.ULONG,
    NumberOfAuthnSchemes: T.ULONG,
    AuthnSchemes: Pointer(T.ULONG),
    ServerCertificateSubject: Pointer(T.u8)
});
T.PRPC_HTTP_TRANSPORT_CREDENTIALS_A = Pointer(Struct('_RPC_HTTP_TRANSPORT_CREDENTIALS_A', {
    TransportCredentials: Pointer(T.SEC_WINNT_AUTH_IDENTITY_A),
    Flags: T.ULONG,
    AuthenticationTarget: T.ULONG,
    NumberOfAuthnSchemes: T.ULONG,
    AuthnSchemes: Pointer(T.ULONG),
    ServerCertificateSubject: Pointer(T.u8)
}));
T.RPC_SECURITY_QOS = Struct('_RPC_SECURITY_QOS', {
    Version: T.ULONG,
    Capabilities: T.ULONG,
    IdentityTracking: T.ULONG,
    ImpersonationType: T.ULONG
});
T.PRPC_SECURITY_QOS = Pointer(Struct('_RPC_SECURITY_QOS', {
    Version: T.ULONG,
    Capabilities: T.ULONG,
    IdentityTracking: T.ULONG,
    ImpersonationType: T.ULONG
}));
T.RPC_SECURITY_QOS_V2_W = Struct('_RPC_SECURITY_QOS_V2_W', {
    Version: T.ULONG,
    Capabilities: T.ULONG,
    IdentityTracking: T.ULONG,
    ImpersonationType: T.ULONG,
    AdditionalSecurityInfoType: T.ULONG,
    u: Union('', {
        HttpCredentials: Pointer(T.RPC_HTTP_TRANSPORT_CREDENTIALS_W)
    })
});
T.PRPC_SECURITY_QOS_V2_W = Pointer(Struct('_RPC_SECURITY_QOS_V2_W', {
    Version: T.ULONG,
    Capabilities: T.ULONG,
    IdentityTracking: T.ULONG,
    ImpersonationType: T.ULONG,
    AdditionalSecurityInfoType: T.ULONG,
    u: Union('', {
        HttpCredentials: Pointer(T.RPC_HTTP_TRANSPORT_CREDENTIALS_W)
    })
}));
T.RPC_SECURITY_QOS_V2_A = Struct('_RPC_SECURITY_QOS_V2_A', {
    Version: T.ULONG,
    Capabilities: T.ULONG,
    IdentityTracking: T.ULONG,
    ImpersonationType: T.ULONG,
    AdditionalSecurityInfoType: T.ULONG,
    u: Union('', {
        HttpCredentials: Pointer(T.RPC_HTTP_TRANSPORT_CREDENTIALS_A)
    })
});
T.PRPC_SECURITY_QOS_V2_A = Pointer(Struct('_RPC_SECURITY_QOS_V2_A', {
    Version: T.ULONG,
    Capabilities: T.ULONG,
    IdentityTracking: T.ULONG,
    ImpersonationType: T.ULONG,
    AdditionalSecurityInfoType: T.ULONG,
    u: Union('', {
        HttpCredentials: Pointer(T.RPC_HTTP_TRANSPORT_CREDENTIALS_A)
    })
}));
T.RPC_MGMT_AUTHORIZATION_FN = Pointer(Fn(T.i32, [[T.RPC_BINDING_HANDLE], [T.ULONG], [Pointer(T.RPC_STATUS)]]));
T.RPC_VERSION = Struct('_RPC_VERSION', {
    MajorVersion: T.u16,
    MinorVersion: T.u16
});
T.RPC_SYNTAX_IDENTIFIER = Struct('_RPC_SYNTAX_IDENTIFIER', {
    SyntaxGUID: T.GUID,
    SyntaxVersion: T.RPC_VERSION
});
T.PRPC_SYNTAX_IDENTIFIER = Pointer(Struct('_RPC_SYNTAX_IDENTIFIER', {
    SyntaxGUID: T.GUID,
    SyntaxVersion: T.RPC_VERSION
}));
T.RPC_MESSAGE = Struct('_RPC_MESSAGE', {
    Handle: T.RPC_BINDING_HANDLE,
    DataRepresentation: T.ULONG,
    Buffer: Pointer(null),
    BufferLength: T.u32,
    ProcNum: T.u32,
    TransferSyntax: T.PRPC_SYNTAX_IDENTIFIER,
    RpcInterfaceInformation: Pointer(null),
    ReservedForRuntime: Pointer(null),
    ManagerEpv: Pointer(null),
    ImportContext: Pointer(null),
    RpcFlags: T.ULONG
});
T.PRPC_MESSAGE = Pointer(Struct('_RPC_MESSAGE', {
    Handle: T.RPC_BINDING_HANDLE,
    DataRepresentation: T.ULONG,
    Buffer: Pointer(null),
    BufferLength: T.u32,
    ProcNum: T.u32,
    TransferSyntax: T.PRPC_SYNTAX_IDENTIFIER,
    RpcInterfaceInformation: Pointer(null),
    ReservedForRuntime: Pointer(null),
    ManagerEpv: Pointer(null),
    ImportContext: Pointer(null),
    RpcFlags: T.ULONG
}));
T.RPC_DISPATCH_FUNCTION = Pointer(Fn(null, [[T.PRPC_MESSAGE, 'Message']]));
T.RPC_FORWARD_FUNCTION = Pointer(Fn(T.RPC_STATUS, [[Pointer(T.UUID), 'InterfaceId'], [Pointer(T.RPC_VERSION), 'InterfaceVersion'], [Pointer(T.UUID), 'ObjectId'], [Pointer(T.u8), 'Rpcpro'], [Pointer(Pointer(null)), 'ppDestEndpoint']]));
T.RPC_DISPATCH_TABLE = Struct('', {
    DispatchTableCount: T.u32,
    DispatchTable: Pointer(T.RPC_DISPATCH_FUNCTION),
    Reserved: T.LONG_PTR
});
T.PRPC_DISPATCH_TABLE = Pointer(Struct('', {
    DispatchTableCount: T.u32,
    DispatchTable: Pointer(T.RPC_DISPATCH_FUNCTION),
    Reserved: T.LONG_PTR
}));
T.RPC_PROTSEQ_ENDPOINT = Struct('_RPC_PROTSEQ_ENDPOINT', {
    RpcProtocolSequence: Pointer(T.u8),
    Endpoint: Pointer(T.u8)
});
T.PRPC_PROTSEQ_ENDPOINT = Pointer(Struct('_RPC_PROTSEQ_ENDPOINT', {
    RpcProtocolSequence: Pointer(T.u8),
    Endpoint: Pointer(T.u8)
}));
T.RPC_SERVER_INTERFACE = Struct('_RPC_SERVER_INTERFACE', {
    Length: T.u32,
    InterfaceId: T.RPC_SYNTAX_IDENTIFIER,
    TransferSyntax: T.RPC_SYNTAX_IDENTIFIER,
    DispatchTable: T.PRPC_DISPATCH_TABLE,
    RpcProtseqEndpointCount: T.u32,
    RpcProtseqEndpoint: T.PRPC_PROTSEQ_ENDPOINT,
    DefaultManagerEpv: Pointer(null),
    InterpreterInfo: Pointer(null),
    Flags: T.u32
});
T.PRPC_SERVER_INTERFACE = Pointer(Struct('_RPC_SERVER_INTERFACE', {
    Length: T.u32,
    InterfaceId: T.RPC_SYNTAX_IDENTIFIER,
    TransferSyntax: T.RPC_SYNTAX_IDENTIFIER,
    DispatchTable: T.PRPC_DISPATCH_TABLE,
    RpcProtseqEndpointCount: T.u32,
    RpcProtseqEndpoint: T.PRPC_PROTSEQ_ENDPOINT,
    DefaultManagerEpv: Pointer(null),
    InterpreterInfo: Pointer(null),
    Flags: T.u32
}));
T.RPC_CLIENT_INTERFACE = Struct('_RPC_CLIENT_INTERFACE', {
    Length: T.u32,
    InterfaceId: T.RPC_SYNTAX_IDENTIFIER,
    TransferSyntax: T.RPC_SYNTAX_IDENTIFIER,
    DispatchTable: T.PRPC_DISPATCH_TABLE,
    RpcProtseqEndpointCount: T.u32,
    RpcProtseqEndpoint: T.PRPC_PROTSEQ_ENDPOINT,
    Reserved: T.ULONG_PTR,
    InterpreterInfo: Pointer(null),
    Flags: T.u32
});
T.PRPC_CLIENT_INTERFACE = Pointer(Struct('_RPC_CLIENT_INTERFACE', {
    Length: T.u32,
    InterfaceId: T.RPC_SYNTAX_IDENTIFIER,
    TransferSyntax: T.RPC_SYNTAX_IDENTIFIER,
    DispatchTable: T.PRPC_DISPATCH_TABLE,
    RpcProtseqEndpointCount: T.u32,
    RpcProtseqEndpoint: T.PRPC_PROTSEQ_ENDPOINT,
    Reserved: T.ULONG_PTR,
    InterpreterInfo: Pointer(null),
    Flags: T.u32
}));
T.RPC_ERROR_ENUM_HANDLE = Struct('tagRPC_ERROR_ENUM_HANDLE', {
    Signature: T.ULONG,
    CurrentPos: Pointer(null),
    Head: Pointer(null)
});
T.ExtendedErrorParamTypes = Enum('eeptBinary', {
    eeptAnsiString: 1,
    eeptUnicodeString: 2,
    eeptLongVal: 3,
    eeptShortVal: 4,
    eeptPointerVal: 5,
    eeptNone: 6,
    eeptBinary: 7
});
T.BinaryParam = Struct('tagBinaryParam', {
    Buffer: Pointer(null),
    Size: T.i16
});
T.RPC_EE_INFO_PARAM = Struct('tagRPC_EE_INFO_PARAM', {
    ParameterType: T.ExtendedErrorParamTypes,
    u: Union('', {
        AnsiString: T.LPSTR,
        UnicodeString: T.LPWSTR,
        LVal: T.LONG,
        SVal: T.i16,
        PVal: T.ULONGLONG,
        BVal: T.BinaryParam
    })
});
T.RPC_EXTENDED_ERROR_INFO = Struct('tagRPC_EXTENDED_ERROR_INFO', {
    Version: T.ULONG,
    ComputerName: T.LPWSTR,
    ProcessID: T.ULONG,
    u: Union('', {
        SystemTime: T.SYSTEMTIME,
        FileTime: T.FILETIME
    }),
    GeneratingComponent: T.ULONG,
    Status: T.ULONG,
    DetectionLocation: T.USHORT,
    Flags: T.USHORT,
    NumberOfParameters: T.i32,
    Parameters: ArrayType(T.RPC_EE_INFO_PARAM, 4)
});
T.RPC_NOTIFICATION_TYPES = Enum('RpcNotificationTypeCallback', {
    RpcNotificationTypeNone: 0,
    RpcNotificationTypeEvent: 1,
    RpcNotificationTypeApc: 2,
    RpcNotificationTypeIoc: 3,
    RpcNotificationTypeHwnd: 4,
    RpcNotificationTypeCallback: 5
});
T.RPC_ASYNC_EVENT = Enum('RpcClientCancel', {
    RpcCallComplete: 0,
    RpcSendComplete: 1,
    RpcReceiveComplete: 2,
    RpcClientDisconnect: 3,
    RpcClientCancel: 4
});
T.RPCNOTIFICATION_ROUTINE = Fn(null, [[Pointer(Struct('_RPC_ASYNC_STATE', null))], [Pointer(null)], [T.RPC_ASYNC_EVENT]]);
T.PFN_RPCNOTIFICATION_ROUTINE = Pointer(T.RPCNOTIFICATION_ROUTINE);
T.RPC_ASYNC_NOTIFICATION_INFO = Union('_RPC_ASYNC_NOTIFICATION_INFO', {
    APC: Struct('', {
        NotificationRoutine: T.PFN_RPCNOTIFICATION_ROUTINE,
        hThread: T.HANDLE
    }),
    IOC: Struct('', {
        hIOPort: T.HANDLE,
        dwNumberOfBytesTransferred: T.DWORD,
        dwCompletionKey: T.DWORD_PTR,
        lpOverlapped: T.LPOVERLAPPED
    }),
    HWND: Struct('', {
        hWnd: T.HWND,
        Msg: T.UINT
    }),
    hEvent: T.HANDLE,
    NotificationRoutine: T.PFN_RPCNOTIFICATION_ROUTINE
});
T.PRPC_ASYNC_NOTIFICATION_INFO = Pointer(Union('_RPC_ASYNC_NOTIFICATION_INFO', {
    APC: Struct('', {
        NotificationRoutine: T.PFN_RPCNOTIFICATION_ROUTINE,
        hThread: T.HANDLE
    }),
    IOC: Struct('', {
        hIOPort: T.HANDLE,
        dwNumberOfBytesTransferred: T.DWORD,
        dwCompletionKey: T.DWORD_PTR,
        lpOverlapped: T.LPOVERLAPPED
    }),
    HWND: Struct('', {
        hWnd: T.HWND,
        Msg: T.UINT
    }),
    hEvent: T.HANDLE,
    NotificationRoutine: T.PFN_RPCNOTIFICATION_ROUTINE
}));
T.RPC_ASYNC_STATE = Struct('_RPC_ASYNC_STATE', {
    Size: T.u32,
    Signature: T.ULONG,
    Lock: T.LONG,
    Flags: T.ULONG,
    StubInfo: Pointer(null),
    UserInfo: Pointer(null),
    RuntimeInfo: Pointer(null),
    Event: T.RPC_ASYNC_EVENT,
    NotificationType: T.RPC_NOTIFICATION_TYPES,
    u: T.RPC_ASYNC_NOTIFICATION_INFO,
    Reserved: ArrayType(T.LONG_PTR, 4)
});
T.PRPC_ASYNC_STATE = Pointer(Struct('_RPC_ASYNC_STATE', {
    Size: T.u32,
    Signature: T.ULONG,
    Lock: T.LONG,
    Flags: T.ULONG,
    StubInfo: Pointer(null),
    UserInfo: Pointer(null),
    RuntimeInfo: Pointer(null),
    Event: T.RPC_ASYNC_EVENT,
    NotificationType: T.RPC_NOTIFICATION_TYPES,
    u: T.RPC_ASYNC_NOTIFICATION_INFO,
    Reserved: ArrayType(T.LONG_PTR, 4)
}));
T.HDROP = Pointer(Struct('HDROP__', {
    unused: T.i32
}));
T.DRAGINFOA = Struct('_DRAGINFOA', {
    uSize: T.UINT,
    pt: T.POINT,
    fNC: T.BOOL,
    lpFileList: T.LPSTR,
    grfKeyState: T.DWORD
});
T.LPDRAGINFOA = Pointer(Struct('_DRAGINFOA', {
    uSize: T.UINT,
    pt: T.POINT,
    fNC: T.BOOL,
    lpFileList: T.LPSTR,
    grfKeyState: T.DWORD
}));
T.DRAGINFOW = Struct('_DRAGINFOW', {
    uSize: T.UINT,
    pt: T.POINT,
    fNC: T.BOOL,
    lpFileList: T.LPWSTR,
    grfKeyState: T.DWORD
});
T.LPDRAGINFOW = Pointer(Struct('_DRAGINFOW', {
    uSize: T.UINT,
    pt: T.POINT,
    fNC: T.BOOL,
    lpFileList: T.LPWSTR,
    grfKeyState: T.DWORD
}));
T.DRAGINFO = T.DRAGINFOA;
T.LPDRAGINFO = T.LPDRAGINFOA;
T.APPBARDATA = Struct('_AppBarData', {
    cbSize: T.DWORD,
    hWnd: T.HWND,
    uCallbackMessage: T.UINT,
    uEdge: T.UINT,
    rc: T.RECT,
    lParam: T.LPARAM
});
T.PAPPBARDATA = Pointer(Struct('_AppBarData', {
    cbSize: T.DWORD,
    hWnd: T.HWND,
    uCallbackMessage: T.UINT,
    uEdge: T.UINT,
    rc: T.RECT,
    lParam: T.LPARAM
}));
T.SHFILEINFOA = Struct('tagSHFILEINFOA', {
    hIcon: T.HICON,
    iIcon: T.i32,
    dwAttributes: T.DWORD,
    szDisplayName: ArrayType(T.CHAR, 260),
    szTypeName: ArrayType(T.CHAR, 80)
});
T.SHFILEINFOW = Struct('tagSHFILEINFOW', {
    hIcon: T.HICON,
    iIcon: T.i32,
    dwAttributes: T.DWORD,
    szDisplayName: ArrayType(T.WCHAR, 260),
    szTypeName: ArrayType(T.WCHAR, 80)
});
T.SHFILEINFO = T.SHFILEINFOA;
T.FILEOP_FLAGS = T.WORD;
T.PRINTEROP_FLAGS = T.WORD;
T.SHFILEOPSTRUCTA = Struct('_SHFILEOPSTRUCTA', {
    hwnd: T.HWND,
    wFunc: T.UINT,
    pFrom: T.LPCSTR,
    pTo: T.LPCSTR,
    fFlags: T.FILEOP_FLAGS,
    fAnyOperationsAborted: T.BOOL,
    hNameMappings: T.LPVOID,
    lpszProgressTitle: T.LPCSTR
});
T.LPSHFILEOPSTRUCTA = Pointer(Struct('_SHFILEOPSTRUCTA', {
    hwnd: T.HWND,
    wFunc: T.UINT,
    pFrom: T.LPCSTR,
    pTo: T.LPCSTR,
    fFlags: T.FILEOP_FLAGS,
    fAnyOperationsAborted: T.BOOL,
    hNameMappings: T.LPVOID,
    lpszProgressTitle: T.LPCSTR
}));
T.SHFILEOPSTRUCTW = Struct('_SHFILEOPSTRUCTW', {
    hwnd: T.HWND,
    wFunc: T.UINT,
    pFrom: T.LPCWSTR,
    pTo: T.LPCWSTR,
    fFlags: T.FILEOP_FLAGS,
    fAnyOperationsAborted: T.BOOL,
    hNameMappings: T.LPVOID,
    lpszProgressTitle: T.LPCWSTR
});
T.LPSHFILEOPSTRUCTW = Pointer(Struct('_SHFILEOPSTRUCTW', {
    hwnd: T.HWND,
    wFunc: T.UINT,
    pFrom: T.LPCWSTR,
    pTo: T.LPCWSTR,
    fFlags: T.FILEOP_FLAGS,
    fAnyOperationsAborted: T.BOOL,
    hNameMappings: T.LPVOID,
    lpszProgressTitle: T.LPCWSTR
}));
T.SHNAMEMAPPINGA = Struct('_SHNAMEMAPPINGA', {
    pszOldPath: T.LPSTR,
    pszNewPath: T.LPSTR,
    cchOldPath: T.i32,
    cchNewPath: T.i32
});
T.LPSHNAMEMAPPINGA = Pointer(Struct('_SHNAMEMAPPINGA', {
    pszOldPath: T.LPSTR,
    pszNewPath: T.LPSTR,
    cchOldPath: T.i32,
    cchNewPath: T.i32
}));
T.SHNAMEMAPPINGW = Struct('_SHNAMEMAPPINGW', {
    pszOldPath: T.LPWSTR,
    pszNewPath: T.LPWSTR,
    cchOldPath: T.i32,
    cchNewPath: T.i32
});
T.LPSHNAMEMAPPINGW = Pointer(Struct('_SHNAMEMAPPINGW', {
    pszOldPath: T.LPWSTR,
    pszNewPath: T.LPWSTR,
    cchOldPath: T.i32,
    cchNewPath: T.i32
}));
T.SHNAMEMAPPING = T.SHNAMEMAPPINGA;
T.LPSHNAMEMAPPING = T.LPSHNAMEMAPPINGA;
T.SHELLEXECUTEINFOA = Struct('_SHELLEXECUTEINFOA', {
    cbSize: T.DWORD,
    fMask: T.ULONG,
    hwnd: T.HWND,
    lpVerb: T.LPCSTR,
    lpFile: T.LPCSTR,
    lpParameters: T.LPCSTR,
    lpDirectory: T.LPCSTR,
    nShow: T.INT,
    hInstApp: T.HINSTANCE,
    lpIDList: T.LPVOID,
    lpClass: T.LPCSTR,
    hkeyClass: T.HKEY,
    dwHotKey: T.DWORD,
    __unnamed0: Union('', {
        hIcon: T.HANDLE,
        hMonitor: T.HANDLE
    }),
    hProcess: T.HANDLE
});
T.LPSHELLEXECUTEINFOA = Pointer(Struct('_SHELLEXECUTEINFOA', {
    cbSize: T.DWORD,
    fMask: T.ULONG,
    hwnd: T.HWND,
    lpVerb: T.LPCSTR,
    lpFile: T.LPCSTR,
    lpParameters: T.LPCSTR,
    lpDirectory: T.LPCSTR,
    nShow: T.INT,
    hInstApp: T.HINSTANCE,
    lpIDList: T.LPVOID,
    lpClass: T.LPCSTR,
    hkeyClass: T.HKEY,
    dwHotKey: T.DWORD,
    __unnamed0: Union('', {
        hIcon: T.HANDLE,
        hMonitor: T.HANDLE
    }),
    hProcess: T.HANDLE
}));
T.SHELLEXECUTEINFOW = Struct('_SHELLEXECUTEINFOW', {
    cbSize: T.DWORD,
    fMask: T.ULONG,
    hwnd: T.HWND,
    lpVerb: T.LPCWSTR,
    lpFile: T.LPCWSTR,
    lpParameters: T.LPCWSTR,
    lpDirectory: T.LPCWSTR,
    nShow: T.INT,
    hInstApp: T.HINSTANCE,
    lpIDList: T.LPVOID,
    lpClass: T.LPCWSTR,
    hkeyClass: T.HKEY,
    dwHotKey: T.DWORD,
    __unnamed0: Union('', {
        hIcon: T.HANDLE,
        hMonitor: T.HANDLE
    }),
    hProcess: T.HANDLE
});
T.LPSHELLEXECUTEINFOW = Pointer(Struct('_SHELLEXECUTEINFOW', {
    cbSize: T.DWORD,
    fMask: T.ULONG,
    hwnd: T.HWND,
    lpVerb: T.LPCWSTR,
    lpFile: T.LPCWSTR,
    lpParameters: T.LPCWSTR,
    lpDirectory: T.LPCWSTR,
    nShow: T.INT,
    hInstApp: T.HINSTANCE,
    lpIDList: T.LPVOID,
    lpClass: T.LPCWSTR,
    hkeyClass: T.HKEY,
    dwHotKey: T.DWORD,
    __unnamed0: Union('', {
        hIcon: T.HANDLE,
        hMonitor: T.HANDLE
    }),
    hProcess: T.HANDLE
}));
T.NOTIFYICONDATAA = Struct('_NOTIFYICONDATAA', {
    cbSize: T.DWORD,
    hWnd: T.HWND,
    uID: T.UINT,
    uFlags: T.UINT,
    uCallbackMessage: T.UINT,
    hIcon: T.HICON,
    szTip: ArrayType(T.CHAR, 128),
    dwState: T.DWORD,
    dwStateMask: T.DWORD,
    szInfo: ArrayType(T.CHAR, 256),
    __unnamed0: Union('', {
        uTimeout: T.UINT,
        uVersion: T.UINT
    }),
    szInfoTitle: ArrayType(T.CHAR, 64),
    dwInfoFlags: T.DWORD,
    guidItem: T.GUID,
    hBalloonIcon: T.HICON
});
T.PNOTIFYICONDATAA = Pointer(Struct('_NOTIFYICONDATAA', {
    cbSize: T.DWORD,
    hWnd: T.HWND,
    uID: T.UINT,
    uFlags: T.UINT,
    uCallbackMessage: T.UINT,
    hIcon: T.HICON,
    szTip: ArrayType(T.CHAR, 128),
    dwState: T.DWORD,
    dwStateMask: T.DWORD,
    szInfo: ArrayType(T.CHAR, 256),
    __unnamed0: Union('', {
        uTimeout: T.UINT,
        uVersion: T.UINT
    }),
    szInfoTitle: ArrayType(T.CHAR, 64),
    dwInfoFlags: T.DWORD,
    guidItem: T.GUID,
    hBalloonIcon: T.HICON
}));
T.NOTIFYICONDATAW = Struct('_NOTIFYICONDATAW', {
    cbSize: T.DWORD,
    hWnd: T.HWND,
    uID: T.UINT,
    uFlags: T.UINT,
    uCallbackMessage: T.UINT,
    hIcon: T.HICON,
    szTip: ArrayType(T.WCHAR, 128),
    dwState: T.DWORD,
    dwStateMask: T.DWORD,
    szInfo: ArrayType(T.WCHAR, 256),
    __unnamed0: Union('', {
        uTimeout: T.UINT,
        uVersion: T.UINT
    }),
    szInfoTitle: ArrayType(T.WCHAR, 64),
    dwInfoFlags: T.DWORD,
    guidItem: T.GUID,
    hBalloonIcon: T.HICON
});
T.PNOTIFYICONDATAW = Pointer(Struct('_NOTIFYICONDATAW', {
    cbSize: T.DWORD,
    hWnd: T.HWND,
    uID: T.UINT,
    uFlags: T.UINT,
    uCallbackMessage: T.UINT,
    hIcon: T.HICON,
    szTip: ArrayType(T.WCHAR, 128),
    dwState: T.DWORD,
    dwStateMask: T.DWORD,
    szInfo: ArrayType(T.WCHAR, 256),
    __unnamed0: Union('', {
        uTimeout: T.UINT,
        uVersion: T.UINT
    }),
    szInfoTitle: ArrayType(T.WCHAR, 64),
    dwInfoFlags: T.DWORD,
    guidItem: T.GUID,
    hBalloonIcon: T.HICON
}));
T.NOTIFYICONDATA = T.NOTIFYICONDATAA;
T.PNOTIFYICONDATA = T.PNOTIFYICONDATAA;
T.SHQUERYRBINFO = Struct('_SHQUERYRBINFO', {
    cbSize: T.DWORD,
    i64Size: T.DWORDLONG,
    i64NumItems: T.DWORDLONG
});
T.LPSHQUERYRBINFO = Pointer(Struct('_SHQUERYRBINFO', {
    cbSize: T.DWORD,
    i64Size: T.DWORDLONG,
    i64NumItems: T.DWORDLONG
}));
T._ino_t = T.u16;
T.ino_t = T.u16;
T._dev_t = T.u32;
T.dev_t = T.u32;
T._pid_t = T.i32;
T.pid_t = T._pid_t;
T._mode_t = T.u16;
T.mode_t = T._mode_t;
T._off_t = T.i32;
T.off32_t = T.i32;
T._off64_t = T.i64;
T.off64_t = T.i64;
T.off_t = T.off32_t;
T.useconds_t = T.u32;
T._sigset_t = T.u32;
T.clock_t = T.i32;
T._onexit_t = Pointer(Fn(T.i32, [[null]]));
T.div_t = Struct('_div_t', {
    quot: T.i32,
    rem: T.i32
});
T.ldiv_t = Struct('_ldiv_t', {
    quot: T.i32,
    rem: T.i32
});
T._LDOUBLE = Struct('', {
    ld: ArrayType(T.u8, 10)
});
T._CRT_DOUBLE = Struct('', {
    x: T.f64
});
T._CRT_FLOAT = Struct('', {
    f: T.f32
});
T._LONGDOUBLE = Struct('', {
    x: T.f128
});
T._LDBL12 = Struct('', {
    ld12: ArrayType(T.u8, 12)
});
T._purecall_handler = Pointer(Fn(null, [[null]]));
T._invalid_parameter_handler = Pointer(Fn(null, [[Pointer(T.wchar_t)], [Pointer(T.wchar_t)], [Pointer(T.wchar_t)], [T.u32], [T.uintptr_t]]));
T.lldiv_t = Struct('', {
    quot: T.i64,
    rem: T.i64
});
T._HEAPINFO = Struct('_heapinfo', {
    _pentry: Pointer(T.i32),
    _size: T.size_t,
    _useflag: T.i32
});
T.u_char = T.u8;
T.u_short = T.u16;
T.u_int = T.u32;
T.u_long = T.ULONG;
T.PROTOENT = Struct('protoent', {
    p_name: Pointer(T.char),
    p_aliases: Pointer(Pointer(T.char)),
    p_proto: T.i16
});
T.PPROTOENT = Pointer(Struct('protoent', {
    p_name: Pointer(T.char),
    p_aliases: Pointer(Pointer(T.char)),
    p_proto: T.i16
}));
T.LPPROTOENT = Pointer(Struct('protoent', {
    p_name: Pointer(T.char),
    p_aliases: Pointer(Pointer(T.char)),
    p_proto: T.i16
}));
T.SERVENT = Struct('servent', {
    s_name: Pointer(T.char),
    s_aliases: Pointer(Pointer(T.char)),
    s_port: T.i16,
    s_proto: Pointer(T.char)
});
T.PSERVENT = Pointer(Struct('servent', {
    s_name: Pointer(T.char),
    s_aliases: Pointer(Pointer(T.char)),
    s_port: T.i16,
    s_proto: Pointer(T.char)
}));
T.LPSERVENT = Pointer(Struct('servent', {
    s_name: Pointer(T.char),
    s_aliases: Pointer(Pointer(T.char)),
    s_port: T.i16,
    s_proto: Pointer(T.char)
}));
T.HOSTENT = Struct('hostent', {
    h_name: Pointer(T.char),
    h_aliases: Pointer(Pointer(T.char)),
    h_addrtype: T.i16,
    h_length: T.i16,
    h_addr_list: Pointer(Pointer(T.char))
});
T.PHOSTENT = Pointer(Struct('hostent', {
    h_name: Pointer(T.char),
    h_aliases: Pointer(Pointer(T.char)),
    h_addrtype: T.i16,
    h_length: T.i16,
    h_addr_list: Pointer(Pointer(T.char))
}));
T.LPHOSTENT = Pointer(Struct('hostent', {
    h_name: Pointer(T.char),
    h_aliases: Pointer(Pointer(T.char)),
    h_addrtype: T.i16,
    h_length: T.i16,
    h_addr_list: Pointer(Pointer(T.char))
}));
T.SOCKET = T.UINT_PTR;
T.SOCKADDR = Struct('sockaddr', {
    sa_family: T.u_short,
    sa_data: ArrayType(T.char, 14)
});
T.PSOCKADDR = Pointer(Struct('sockaddr', {
    sa_family: T.u_short,
    sa_data: ArrayType(T.char, 14)
}));
T.LPSOCKADDR = Pointer(Struct('sockaddr', {
    sa_family: T.u_short,
    sa_data: ArrayType(T.char, 14)
}));
T.LINGER = Struct('linger', {
    l_onoff: T.u_short,
    l_linger: T.u_short
});
T.PLINGER = Pointer(Struct('linger', {
    l_onoff: T.u_short,
    l_linger: T.u_short
}));
T.LPLINGER = Pointer(Struct('linger', {
    l_onoff: T.u_short,
    l_linger: T.u_short
}));
T.fd_set = Struct('fd_set', {
    fd_count: T.u_int,
    fd_array: ArrayType(T.SOCKET, 64)
});
T.FD_SET = Struct('fd_set', {
    fd_count: T.u_int,
    fd_array: ArrayType(T.SOCKET, 64)
});
T.PFD_SET = Pointer(Struct('fd_set', {
    fd_count: T.u_int,
    fd_array: ArrayType(T.SOCKET, 64)
}));
T.LPFD_SET = Pointer(Struct('fd_set', {
    fd_count: T.u_int,
    fd_array: ArrayType(T.SOCKET, 64)
}));
T.TIMEVAL = Struct('timeval', {
    tv_sec: T.LONG,
    tv_usec: T.LONG
});
T.PTIMEVAL = Pointer(Struct('timeval', {
    tv_sec: T.LONG,
    tv_usec: T.LONG
}));
T.LPTIMEVAL = Pointer(Struct('timeval', {
    tv_sec: T.LONG,
    tv_usec: T.LONG
}));
T.IN_ADDR = Struct('in_addr', {
    S_un: Union('', {
        S_un_b: Struct('', {
            s_b1: T.u_char,
            s_b2: T.u_char,
            s_b3: T.u_char,
            s_b4: T.u_char
        }),
        S_un_w: Struct('', {
            s_w1: T.u_short,
            s_w2: T.u_short
        }),
        S_addr: T.ULONG
    })
});
T.PIN_ADDR = Pointer(Struct('in_addr', {
    S_un: Union('', {
        S_un_b: Struct('', {
            s_b1: T.u_char,
            s_b2: T.u_char,
            s_b3: T.u_char,
            s_b4: T.u_char
        }),
        S_un_w: Struct('', {
            s_w1: T.u_short,
            s_w2: T.u_short
        }),
        S_addr: T.ULONG
    })
}));
T.LPIN_ADDR = Pointer(Struct('in_addr', {
    S_un: Union('', {
        S_un_b: Struct('', {
            s_b1: T.u_char,
            s_b2: T.u_char,
            s_b3: T.u_char,
            s_b4: T.u_char
        }),
        S_un_w: Struct('', {
            s_w1: T.u_short,
            s_w2: T.u_short
        }),
        S_addr: T.ULONG
    })
}));
T.SOCKADDR_IN = Struct('sockaddr_in', {
    sin_family: T.i16,
    sin_port: T.u_short,
    sin_addr: Struct('in_addr', null),
    sin_zero: ArrayType(T.char, 8)
});
T.PSOCKADDR_IN = Pointer(Struct('sockaddr_in', {
    sin_family: T.i16,
    sin_port: T.u_short,
    sin_addr: Struct('in_addr', null),
    sin_zero: ArrayType(T.char, 8)
}));
T.LPSOCKADDR_IN = Pointer(Struct('sockaddr_in', {
    sin_family: T.i16,
    sin_port: T.u_short,
    sin_addr: Struct('in_addr', null),
    sin_zero: ArrayType(T.char, 8)
}));
T.WSADATA = Struct('WSAData', {
    wVersion: T.WORD,
    wHighVersion: T.WORD,
    szDescription: ArrayType(T.char, NaN /* additive_expression {
     _0: constant {
      _0: '256'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */),
    szSystemStatus: ArrayType(T.char, NaN /* additive_expression {
     _0: constant {
      _0: '128'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */),
    iMaxSockets: T.WORD,
    iMaxUdpDg: T.WORD,
    lpVendorInfo: Pointer(T.char)
});
T.LPWSADATA = Pointer(Struct('WSAData', {
    wVersion: T.WORD,
    wHighVersion: T.WORD,
    szDescription: ArrayType(T.char, NaN /* additive_expression {
     _0: constant {
      _0: '256'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */),
    szSystemStatus: ArrayType(T.char, NaN /* additive_expression {
     _0: constant {
      _0: '128'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */),
    iMaxSockets: T.WORD,
    iMaxUdpDg: T.WORD,
    lpVendorInfo: Pointer(T.char)
}));
T.SOCKET_ADDRESS = Struct('_SOCKET_ADDRESS', {
    lpSockaddr: T.LPSOCKADDR,
    iSockaddrLength: T.INT
});
T.PSOCKET_ADDRESS = Pointer(Struct('_SOCKET_ADDRESS', {
    lpSockaddr: T.LPSOCKADDR,
    iSockaddrLength: T.INT
}));
T.LPSOCKET_ADDRESS = Pointer(Struct('_SOCKET_ADDRESS', {
    lpSockaddr: T.LPSOCKADDR,
    iSockaddrLength: T.INT
}));
T.CSADDR_INFO = Struct('_CSADDR_INFO', {
    LocalAddr: T.SOCKET_ADDRESS,
    RemoteAddr: T.SOCKET_ADDRESS,
    iSocketType: T.INT,
    iProtocol: T.INT
});
T.PCSADDR_INFO = Pointer(Struct('_CSADDR_INFO', {
    LocalAddr: T.SOCKET_ADDRESS,
    RemoteAddr: T.SOCKET_ADDRESS,
    iSocketType: T.INT,
    iProtocol: T.INT
}));
T.LPCSADDR_INFO = Pointer(Struct('_CSADDR_INFO', {
    LocalAddr: T.SOCKET_ADDRESS,
    RemoteAddr: T.SOCKET_ADDRESS,
    iSocketType: T.INT,
    iProtocol: T.INT
}));
T.SOCKADDR_STORAGE = Struct('sockaddr_storage', {
    ss_family: T.i16,
    __ss_pad1: ArrayType(T.char, NaN /* primary_expression {
     _0: {
      _0: '(',
      _1: '',
      _2: additive_expression {
       _0: primary_expression {
        _0: {
         _0: '(',
         _1: '',
         _2: unary_expression {
          _0: {
           _0: 'sizeof',
           _1: '',
           _2: '(',
           _3: '',
           _4: type_name {
            _0: specifier_qualifier_list {
             type: 'T.i64'
            }
           },
           _5: '',
           _6: ')'
          }
         },
         _3: '',
         _4: ')'
        }
       },
       _1: [{
        _0: ' ',
        _1: {
         _0: '-',
         _1: ' ',
         _2: unary_expression {
          _0: {
           _0: 'sizeof',
           _1: '',
           _2: '(',
           _3: '',
           _4: type_name {
            _0: specifier_qualifier_list {
             type: 'T.i16'
            }
           },
           _5: '',
           _6: ')'
          }
         }
        }
       }]
      },
      _3: '',
      _4: ')'
     }
    } */),
    __ss_align: T.i64,
    __ss_pad2: ArrayType(T.char, NaN /* primary_expression {
     _0: {
      _0: '(',
      _1: '',
      _2: additive_expression {
       _0: constant {
        _0: '128'
       },
       _1: [{
        _0: ' ',
        _1: {
         _0: '-',
         _1: ' ',
         _2: multiplicative_expression {
          _0: constant {
           _0: '2'
          },
          _1: [{
           _0: ' ',
           _1: {
            _0: '*',
            _1: ' ',
            _2: primary_expression {
             _0: {
              _0: '(',
              _1: '',
              _2: unary_expression {
               _0: {
                _0: 'sizeof',
                _1: '',
                _2: '(',
                _3: '',
                _4: type_name {
                 _0: specifier_qualifier_list {
                  type: 'T.i64'
                 }
                },
                _5: '',
                _6: ')'
               }
              },
              _3: '',
              _4: ')'
             }
            }
           }
          }]
         }
        }
       }]
      },
      _3: '',
      _4: ')'
     }
    } */)
});
T.PSOCKADDR_STORAGE = Pointer(Struct('sockaddr_storage', {
    ss_family: T.i16,
    __ss_pad1: ArrayType(T.char, NaN /* primary_expression {
     _0: {
      _0: '(',
      _1: '',
      _2: additive_expression {
       _0: primary_expression {
        _0: {
         _0: '(',
         _1: '',
         _2: unary_expression {
          _0: {
           _0: 'sizeof',
           _1: '',
           _2: '(',
           _3: '',
           _4: type_name {
            _0: specifier_qualifier_list {
             type: 'T.i64'
            }
           },
           _5: '',
           _6: ')'
          }
         },
         _3: '',
         _4: ')'
        }
       },
       _1: [{
        _0: ' ',
        _1: {
         _0: '-',
         _1: ' ',
         _2: unary_expression {
          _0: {
           _0: 'sizeof',
           _1: '',
           _2: '(',
           _3: '',
           _4: type_name {
            _0: specifier_qualifier_list {
             type: 'T.i16'
            }
           },
           _5: '',
           _6: ')'
          }
         }
        }
       }]
      },
      _3: '',
      _4: ')'
     }
    } */),
    __ss_align: T.i64,
    __ss_pad2: ArrayType(T.char, NaN /* primary_expression {
     _0: {
      _0: '(',
      _1: '',
      _2: additive_expression {
       _0: constant {
        _0: '128'
       },
       _1: [{
        _0: ' ',
        _1: {
         _0: '-',
         _1: ' ',
         _2: multiplicative_expression {
          _0: constant {
           _0: '2'
          },
          _1: [{
           _0: ' ',
           _1: {
            _0: '*',
            _1: ' ',
            _2: primary_expression {
             _0: {
              _0: '(',
              _1: '',
              _2: unary_expression {
               _0: {
                _0: 'sizeof',
                _1: '',
                _2: '(',
                _3: '',
                _4: type_name {
                 _0: specifier_qualifier_list {
                  type: 'T.i64'
                 }
                },
                _5: '',
                _6: ')'
               }
              },
              _3: '',
              _4: ')'
             }
            }
           }
          }]
         }
        }
       }]
      },
      _3: '',
      _4: ')'
     }
    } */)
}));
T.LPSOCKADDR_STORAGE = Pointer(Struct('sockaddr_storage', {
    ss_family: T.i16,
    __ss_pad1: ArrayType(T.char, NaN /* primary_expression {
     _0: {
      _0: '(',
      _1: '',
      _2: additive_expression {
       _0: primary_expression {
        _0: {
         _0: '(',
         _1: '',
         _2: unary_expression {
          _0: {
           _0: 'sizeof',
           _1: '',
           _2: '(',
           _3: '',
           _4: type_name {
            _0: specifier_qualifier_list {
             type: 'T.i64'
            }
           },
           _5: '',
           _6: ')'
          }
         },
         _3: '',
         _4: ')'
        }
       },
       _1: [{
        _0: ' ',
        _1: {
         _0: '-',
         _1: ' ',
         _2: unary_expression {
          _0: {
           _0: 'sizeof',
           _1: '',
           _2: '(',
           _3: '',
           _4: type_name {
            _0: specifier_qualifier_list {
             type: 'T.i16'
            }
           },
           _5: '',
           _6: ')'
          }
         }
        }
       }]
      },
      _3: '',
      _4: ')'
     }
    } */),
    __ss_align: T.i64,
    __ss_pad2: ArrayType(T.char, NaN /* primary_expression {
     _0: {
      _0: '(',
      _1: '',
      _2: additive_expression {
       _0: constant {
        _0: '128'
       },
       _1: [{
        _0: ' ',
        _1: {
         _0: '-',
         _1: ' ',
         _2: multiplicative_expression {
          _0: constant {
           _0: '2'
          },
          _1: [{
           _0: ' ',
           _1: {
            _0: '*',
            _1: ' ',
            _2: primary_expression {
             _0: {
              _0: '(',
              _1: '',
              _2: unary_expression {
               _0: {
                _0: 'sizeof',
                _1: '',
                _2: '(',
                _3: '',
                _4: type_name {
                 _0: specifier_qualifier_list {
                  type: 'T.i64'
                 }
                },
                _5: '',
                _6: ')'
               }
              },
              _3: '',
              _4: ')'
             }
            }
           }
          }]
         }
        }
       }]
      },
      _3: '',
      _4: ')'
     }
    } */)
}));
T.SOCKET_ADDRESS_LIST = Struct('_SOCKET_ADDRESS_LIST', {
    iAddressCount: T.INT,
    Address: ArrayType(T.SOCKET_ADDRESS, 1)
});
T.LPSOCKET_ADDRESS_LIST = Pointer(Struct('_SOCKET_ADDRESS_LIST', {
    iAddressCount: T.INT,
    Address: ArrayType(T.SOCKET_ADDRESS, 1)
}));
T.SCOPE_LEVEL = Enum('ScopeLevelGlobal', {
    ScopeLevelInterface: 1,
    ScopeLevelLink: 2,
    ScopeLevelSubnet: 3,
    ScopeLevelAdmin: 4,
    ScopeLevelSite: 5,
    ScopeLevelOrganization: 8,
    ScopeLevelGlobal: 14
});
T.WSAPROTOCOLCHAIN = Struct('_WSAPROTOCOLCHAIN', {
    ChainLen: T.i32,
    ChainEntries: ArrayType(T.DWORD, 7)
});
T.LPWSAPROTOCOLCHAIN = Pointer(Struct('_WSAPROTOCOLCHAIN', {
    ChainLen: T.i32,
    ChainEntries: ArrayType(T.DWORD, 7)
}));
T.WSAPROTOCOL_INFOA = Struct('_WSAPROTOCOL_INFOA', {
    dwServiceFlags1: T.DWORD,
    dwServiceFlags2: T.DWORD,
    dwServiceFlags3: T.DWORD,
    dwServiceFlags4: T.DWORD,
    dwProviderFlags: T.DWORD,
    ProviderId: T.GUID,
    dwCatalogEntryId: T.DWORD,
    ProtocolChain: T.WSAPROTOCOLCHAIN,
    iVersion: T.i32,
    iAddressFamily: T.i32,
    iMaxSockAddr: T.i32,
    iMinSockAddr: T.i32,
    iSocketType: T.i32,
    iProtocol: T.i32,
    iProtocolMaxOffset: T.i32,
    iNetworkByteOrder: T.i32,
    iSecurityScheme: T.i32,
    dwMessageSize: T.DWORD,
    dwProviderReserved: T.DWORD,
    szProtocol: ArrayType(T.CHAR, NaN /* additive_expression {
     _0: constant {
      _0: '255'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
});
T.LPWSAPROTOCOL_INFOA = Pointer(Struct('_WSAPROTOCOL_INFOA', {
    dwServiceFlags1: T.DWORD,
    dwServiceFlags2: T.DWORD,
    dwServiceFlags3: T.DWORD,
    dwServiceFlags4: T.DWORD,
    dwProviderFlags: T.DWORD,
    ProviderId: T.GUID,
    dwCatalogEntryId: T.DWORD,
    ProtocolChain: T.WSAPROTOCOLCHAIN,
    iVersion: T.i32,
    iAddressFamily: T.i32,
    iMaxSockAddr: T.i32,
    iMinSockAddr: T.i32,
    iSocketType: T.i32,
    iProtocol: T.i32,
    iProtocolMaxOffset: T.i32,
    iNetworkByteOrder: T.i32,
    iSecurityScheme: T.i32,
    dwMessageSize: T.DWORD,
    dwProviderReserved: T.DWORD,
    szProtocol: ArrayType(T.CHAR, NaN /* additive_expression {
     _0: constant {
      _0: '255'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
}));
T.WSAPROTOCOL_INFOW = Struct('_WSAPROTOCOL_INFOW', {
    dwServiceFlags1: T.DWORD,
    dwServiceFlags2: T.DWORD,
    dwServiceFlags3: T.DWORD,
    dwServiceFlags4: T.DWORD,
    dwProviderFlags: T.DWORD,
    ProviderId: T.GUID,
    dwCatalogEntryId: T.DWORD,
    ProtocolChain: T.WSAPROTOCOLCHAIN,
    iVersion: T.i32,
    iAddressFamily: T.i32,
    iMaxSockAddr: T.i32,
    iMinSockAddr: T.i32,
    iSocketType: T.i32,
    iProtocol: T.i32,
    iProtocolMaxOffset: T.i32,
    iNetworkByteOrder: T.i32,
    iSecurityScheme: T.i32,
    dwMessageSize: T.DWORD,
    dwProviderReserved: T.DWORD,
    szProtocol: ArrayType(T.WCHAR, NaN /* additive_expression {
     _0: constant {
      _0: '255'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
});
T.LPWSAPROTOCOL_INFOW = Pointer(Struct('_WSAPROTOCOL_INFOW', {
    dwServiceFlags1: T.DWORD,
    dwServiceFlags2: T.DWORD,
    dwServiceFlags3: T.DWORD,
    dwServiceFlags4: T.DWORD,
    dwProviderFlags: T.DWORD,
    ProviderId: T.GUID,
    dwCatalogEntryId: T.DWORD,
    ProtocolChain: T.WSAPROTOCOLCHAIN,
    iVersion: T.i32,
    iAddressFamily: T.i32,
    iMaxSockAddr: T.i32,
    iMinSockAddr: T.i32,
    iSocketType: T.i32,
    iProtocol: T.i32,
    iProtocolMaxOffset: T.i32,
    iNetworkByteOrder: T.i32,
    iSecurityScheme: T.i32,
    dwMessageSize: T.DWORD,
    dwProviderReserved: T.DWORD,
    szProtocol: ArrayType(T.WCHAR, NaN /* additive_expression {
     _0: constant {
      _0: '255'
     },
     _1: [{
      _0: ' ',
      _1: {
       _0: '+',
       _1: '',
       _2: constant {
        _0: '1'
       }
      }
     }]
    } */)
}));
T.WSAPROTOCOL_INFO = T.WSAPROTOCOL_INFOA;
T.LPWSAPROTOCOL_INFO = T.LPWSAPROTOCOL_INFOA;
T.WSANETWORKEVENTS = Struct('_WSANETWORKEVENTS', {
    lNetworkEvents: T.LONG,
    iErrorCode: ArrayType(T.i32, 10)
});
T.LPWSANETWORKEVENTS = Pointer(Struct('_WSANETWORKEVENTS', {
    lNetworkEvents: T.LONG,
    iErrorCode: ArrayType(T.i32, 10)
}));
T.WSANSCLASSINFOA = Struct('_WSANSClassInfoA', {
    lpszName: T.LPSTR,
    dwNameSpace: T.DWORD,
    dwValueType: T.DWORD,
    dwValueSize: T.DWORD,
    lpValue: T.LPVOID
});
T.PWSANSCLASSINFOA = Pointer(Struct('_WSANSClassInfoA', {
    lpszName: T.LPSTR,
    dwNameSpace: T.DWORD,
    dwValueType: T.DWORD,
    dwValueSize: T.DWORD,
    lpValue: T.LPVOID
}));
T.LPWSANSCLASSINFOA = Pointer(Struct('_WSANSClassInfoA', {
    lpszName: T.LPSTR,
    dwNameSpace: T.DWORD,
    dwValueType: T.DWORD,
    dwValueSize: T.DWORD,
    lpValue: T.LPVOID
}));
T.WSANSCLASSINFOW = Struct('_WSANSClassInfoW', {
    lpszName: T.LPSTR,
    dwNameSpace: T.DWORD,
    dwValueType: T.DWORD,
    dwValueSize: T.DWORD,
    lpValue: T.LPVOID
});
T.PWSANSCLASSINFOW = Pointer(Struct('_WSANSClassInfoW', {
    lpszName: T.LPSTR,
    dwNameSpace: T.DWORD,
    dwValueType: T.DWORD,
    dwValueSize: T.DWORD,
    lpValue: T.LPVOID
}));
T.LPWSANSCLASSINFOW = Pointer(Struct('_WSANSClassInfoW', {
    lpszName: T.LPSTR,
    dwNameSpace: T.DWORD,
    dwValueType: T.DWORD,
    dwValueSize: T.DWORD,
    lpValue: T.LPVOID
}));
T.WSANSCLASSINFO = T.WSANSCLASSINFOA;
T.PWSANSCLASSINFO = T.PWSANSCLASSINFOA;
T.LPWSANSCLASSINFO = T.LPWSANSCLASSINFOA;
T.WSASERVICECLASSINFOA = Struct('_WSAServiceClassInfoA', {
    lpServiceClassId: T.LPGUID,
    lpszServiceClassName: T.LPSTR,
    dwCount: T.DWORD,
    lpClassInfos: T.LPWSANSCLASSINFOA
});
T.PWSASERVICECLASSINFOA = Pointer(Struct('_WSAServiceClassInfoA', {
    lpServiceClassId: T.LPGUID,
    lpszServiceClassName: T.LPSTR,
    dwCount: T.DWORD,
    lpClassInfos: T.LPWSANSCLASSINFOA
}));
T.LPWSASERVICECLASSINFOA = Pointer(Struct('_WSAServiceClassInfoA', {
    lpServiceClassId: T.LPGUID,
    lpszServiceClassName: T.LPSTR,
    dwCount: T.DWORD,
    lpClassInfos: T.LPWSANSCLASSINFOA
}));
T.WSASERVICECLASSINFOW = Struct('_WSAServiceClassInfoW', {
    lpServiceClassId: T.LPGUID,
    lpszServiceClassName: T.LPWSTR,
    dwCount: T.DWORD,
    lpClassInfos: T.LPWSANSCLASSINFOW
});
T.PWSASERVICECLASSINFOW = Pointer(Struct('_WSAServiceClassInfoW', {
    lpServiceClassId: T.LPGUID,
    lpszServiceClassName: T.LPWSTR,
    dwCount: T.DWORD,
    lpClassInfos: T.LPWSANSCLASSINFOW
}));
T.LPWSASERVICECLASSINFOW = Pointer(Struct('_WSAServiceClassInfoW', {
    lpServiceClassId: T.LPGUID,
    lpszServiceClassName: T.LPWSTR,
    dwCount: T.DWORD,
    lpClassInfos: T.LPWSANSCLASSINFOW
}));
T.WSASERVICECLASSINFO = T.WSASERVICECLASSINFOA;
T.PWSASERVICECLASSINFO = T.PWSASERVICECLASSINFOA;
T.LPWSASERVICECLASSINFO = T.LPWSASERVICECLASSINFOA;
T.WSABUF = Struct('_WSABUF', {
    len: T.ULONG,
    buf: Pointer(T.CHAR)
});
T.LPWSABUF = Pointer(Struct('_WSABUF', {
    len: T.ULONG,
    buf: Pointer(T.CHAR)
}));
T.LPWSAOVERLAPPED = Pointer(Struct('_OVERLAPPED', null));
T.GROUP = T.u32;
T.SERVICETYPE = T.ULONG;
T.FLOWSPEC = Struct('_FLOWSPEC', {
    TokenRate: T.u32,
    TokenBucketSize: T.u32,
    PeakBandwidth: T.u32,
    Latency: T.u32,
    DelayVariation: T.u32,
    ServiceType: T.SERVICETYPE,
    MaxSduSize: T.u32,
    MinimumPolicedSize: T.u32
});
T.PFLOWSPEC = Pointer(Struct('_FLOWSPEC', {
    TokenRate: T.u32,
    TokenBucketSize: T.u32,
    PeakBandwidth: T.u32,
    Latency: T.u32,
    DelayVariation: T.u32,
    ServiceType: T.SERVICETYPE,
    MaxSduSize: T.u32,
    MinimumPolicedSize: T.u32
}));
T.LPFLOWSPEC = Pointer(Struct('_FLOWSPEC', {
    TokenRate: T.u32,
    TokenBucketSize: T.u32,
    PeakBandwidth: T.u32,
    Latency: T.u32,
    DelayVariation: T.u32,
    ServiceType: T.SERVICETYPE,
    MaxSduSize: T.u32,
    MinimumPolicedSize: T.u32
}));
T.QOS = Struct('_QUALITYOFSERVICE', {
    SendingFlowspec: T.FLOWSPEC,
    ReceivingFlowspec: T.FLOWSPEC,
    ProviderSpecific: T.WSABUF
});
T.LPQOS = Pointer(Struct('_QUALITYOFSERVICE', {
    SendingFlowspec: T.FLOWSPEC,
    ReceivingFlowspec: T.FLOWSPEC,
    ProviderSpecific: T.WSABUF
}));
T.LPCONDITIONPROC = Pointer(Fn(T.i32, [[T.LPWSABUF, 'lpCallerId'], [T.LPWSABUF, 'lpCallerData'], [T.LPQOS, 'lpSQOS'], [T.LPQOS, 'lpGQOS'], [T.LPWSABUF, 'lpCalleeId'], [T.LPWSABUF, 'lpCalleeData'], [Pointer(T.GROUP), 'g'], [T.DWORD, 'dwCallbackData']]));
T.LPWSAOVERLAPPED_COMPLETION_ROUTINE = Pointer(Fn(null, [[T.DWORD, 'dwError'], [T.DWORD, 'cbTransferred'], [T.LPWSAOVERLAPPED, 'lpOverlapped'], [T.DWORD, 'dwFlags']]));
T.BLOB = Struct('_BLOB', {
    cbSize: T.ULONG,
    pBlobData: Pointer(T.BYTE)
});
T.LPBLOB = Pointer(Struct('_BLOB', {
    cbSize: T.ULONG,
    pBlobData: Pointer(T.BYTE)
}));
T.AFPROTOCOLS = Struct('_AFPROTOCOLS', {
    iAddressFamily: T.INT,
    iProtocol: T.INT
});
T.PAFPROTOCOLS = Pointer(Struct('_AFPROTOCOLS', {
    iAddressFamily: T.INT,
    iProtocol: T.INT
}));
T.LPAFPROTOCOLS = Pointer(Struct('_AFPROTOCOLS', {
    iAddressFamily: T.INT,
    iProtocol: T.INT
}));
T.WSAECOMPARATOR = Enum('COMP_NOTLESS', {
    COMP_EQUAL: 0,
    COMP_NOTLESS: 1
});
T.PWSAECOMPARATOR = Pointer(Enum('COMP_NOTLESS', {
    COMP_EQUAL: 0,
    COMP_NOTLESS: 1
}));
T.LPWSAECOMPARATOR = Pointer(Enum('COMP_NOTLESS', {
    COMP_EQUAL: 0,
    COMP_NOTLESS: 1
}));
T.WSAVERSION = Struct('_WSAVersion', {
    dwVersion: T.DWORD,
    ecHow: T.WSAECOMPARATOR
});
T.PWSAVERSION = Pointer(Struct('_WSAVersion', {
    dwVersion: T.DWORD,
    ecHow: T.WSAECOMPARATOR
}));
T.LPWSAVERSION = Pointer(Struct('_WSAVersion', {
    dwVersion: T.DWORD,
    ecHow: T.WSAECOMPARATOR
}));
T.WSAQUERYSETA = Struct('_WSAQuerySetA', {
    dwSize: T.DWORD,
    lpszServiceInstanceName: T.LPSTR,
    lpServiceClassId: T.LPGUID,
    lpVersion: T.LPWSAVERSION,
    lpszComment: T.LPSTR,
    dwNameSpace: T.DWORD,
    lpNSProviderId: T.LPGUID,
    lpszContext: T.LPSTR,
    dwNumberOfProtocols: T.DWORD,
    lpafpProtocols: T.LPAFPROTOCOLS,
    lpszQueryString: T.LPSTR,
    dwNumberOfCsAddrs: T.DWORD,
    lpcsaBuffer: T.LPCSADDR_INFO,
    dwOutputFlags: T.DWORD,
    lpBlob: T.LPBLOB
});
T.PWSAQUERYSETA = Pointer(Struct('_WSAQuerySetA', {
    dwSize: T.DWORD,
    lpszServiceInstanceName: T.LPSTR,
    lpServiceClassId: T.LPGUID,
    lpVersion: T.LPWSAVERSION,
    lpszComment: T.LPSTR,
    dwNameSpace: T.DWORD,
    lpNSProviderId: T.LPGUID,
    lpszContext: T.LPSTR,
    dwNumberOfProtocols: T.DWORD,
    lpafpProtocols: T.LPAFPROTOCOLS,
    lpszQueryString: T.LPSTR,
    dwNumberOfCsAddrs: T.DWORD,
    lpcsaBuffer: T.LPCSADDR_INFO,
    dwOutputFlags: T.DWORD,
    lpBlob: T.LPBLOB
}));
T.LPWSAQUERYSETA = Pointer(Struct('_WSAQuerySetA', {
    dwSize: T.DWORD,
    lpszServiceInstanceName: T.LPSTR,
    lpServiceClassId: T.LPGUID,
    lpVersion: T.LPWSAVERSION,
    lpszComment: T.LPSTR,
    dwNameSpace: T.DWORD,
    lpNSProviderId: T.LPGUID,
    lpszContext: T.LPSTR,
    dwNumberOfProtocols: T.DWORD,
    lpafpProtocols: T.LPAFPROTOCOLS,
    lpszQueryString: T.LPSTR,
    dwNumberOfCsAddrs: T.DWORD,
    lpcsaBuffer: T.LPCSADDR_INFO,
    dwOutputFlags: T.DWORD,
    lpBlob: T.LPBLOB
}));
T.WSAQUERYSETW = Struct('_WSAQuerySetW', {
    dwSize: T.DWORD,
    lpszServiceInstanceName: T.LPWSTR,
    lpServiceClassId: T.LPGUID,
    lpVersion: T.LPWSAVERSION,
    lpszComment: T.LPWSTR,
    dwNameSpace: T.DWORD,
    lpNSProviderId: T.LPGUID,
    lpszContext: T.LPWSTR,
    dwNumberOfProtocols: T.DWORD,
    lpafpProtocols: T.LPAFPROTOCOLS,
    lpszQueryString: T.LPWSTR,
    dwNumberOfCsAddrs: T.DWORD,
    lpcsaBuffer: T.LPCSADDR_INFO,
    dwOutputFlags: T.DWORD,
    lpBlob: T.LPBLOB
});
T.PWSAQUERYSETW = Pointer(Struct('_WSAQuerySetW', {
    dwSize: T.DWORD,
    lpszServiceInstanceName: T.LPWSTR,
    lpServiceClassId: T.LPGUID,
    lpVersion: T.LPWSAVERSION,
    lpszComment: T.LPWSTR,
    dwNameSpace: T.DWORD,
    lpNSProviderId: T.LPGUID,
    lpszContext: T.LPWSTR,
    dwNumberOfProtocols: T.DWORD,
    lpafpProtocols: T.LPAFPROTOCOLS,
    lpszQueryString: T.LPWSTR,
    dwNumberOfCsAddrs: T.DWORD,
    lpcsaBuffer: T.LPCSADDR_INFO,
    dwOutputFlags: T.DWORD,
    lpBlob: T.LPBLOB
}));
T.LPWSAQUERYSETW = Pointer(Struct('_WSAQuerySetW', {
    dwSize: T.DWORD,
    lpszServiceInstanceName: T.LPWSTR,
    lpServiceClassId: T.LPGUID,
    lpVersion: T.LPWSAVERSION,
    lpszComment: T.LPWSTR,
    dwNameSpace: T.DWORD,
    lpNSProviderId: T.LPGUID,
    lpszContext: T.LPWSTR,
    dwNumberOfProtocols: T.DWORD,
    lpafpProtocols: T.LPAFPROTOCOLS,
    lpszQueryString: T.LPWSTR,
    dwNumberOfCsAddrs: T.DWORD,
    lpcsaBuffer: T.LPCSADDR_INFO,
    dwOutputFlags: T.DWORD,
    lpBlob: T.LPBLOB
}));
T.WSAQUERYSET = T.WSAQUERYSETA;
T.PWSAQUERYSET = T.PWSAQUERYSETA;
T.LPWSAQUERYSET = T.LPWSAQUERYSETA;
T.WSAESETSERVICEOP = Enum('RNRSERVICE_DELETE', {
    RNRSERVICE_REGISTER: 0,
    RNRSERVICE_DEREGISTER: 1,
    RNRSERVICE_DELETE: 2
});
T.PWSAESETSERVICEOP = Pointer(Enum('RNRSERVICE_DELETE', {
    RNRSERVICE_REGISTER: 0,
    RNRSERVICE_DEREGISTER: 1,
    RNRSERVICE_DELETE: 2
}));
T.LPWSAESETSERVICEOP = Pointer(Enum('RNRSERVICE_DELETE', {
    RNRSERVICE_REGISTER: 0,
    RNRSERVICE_DEREGISTER: 1,
    RNRSERVICE_DELETE: 2
}));
T.WSANAMESPACE_INFOA = Struct('_WSANAMESPACE_INFOA', {
    NSProviderId: T.GUID,
    dwNameSpace: T.DWORD,
    fActive: T.BOOL,
    dwVersion: T.DWORD,
    lpszIdentifier: T.LPSTR
});
T.PWSANAMESPACE_INFOA = Pointer(Struct('_WSANAMESPACE_INFOA', {
    NSProviderId: T.GUID,
    dwNameSpace: T.DWORD,
    fActive: T.BOOL,
    dwVersion: T.DWORD,
    lpszIdentifier: T.LPSTR
}));
T.LPWSANAMESPACE_INFOA = Pointer(Struct('_WSANAMESPACE_INFOA', {
    NSProviderId: T.GUID,
    dwNameSpace: T.DWORD,
    fActive: T.BOOL,
    dwVersion: T.DWORD,
    lpszIdentifier: T.LPSTR
}));
T.WSANAMESPACE_INFOW = Struct('_WSANAMESPACE_INFOW', {
    NSProviderId: T.GUID,
    dwNameSpace: T.DWORD,
    fActive: T.BOOL,
    dwVersion: T.DWORD,
    lpszIdentifier: T.LPWSTR
});
T.PWSANAMESPACE_INFOW = Pointer(Struct('_WSANAMESPACE_INFOW', {
    NSProviderId: T.GUID,
    dwNameSpace: T.DWORD,
    fActive: T.BOOL,
    dwVersion: T.DWORD,
    lpszIdentifier: T.LPWSTR
}));
T.LPWSANAMESPACE_INFOW = Pointer(Struct('_WSANAMESPACE_INFOW', {
    NSProviderId: T.GUID,
    dwNameSpace: T.DWORD,
    fActive: T.BOOL,
    dwVersion: T.DWORD,
    lpszIdentifier: T.LPWSTR
}));
T.WSANAMESPACE_INFO = T.WSANAMESPACE_INFOA;
T.PWSANAMESPACE_INFO = T.PWSANAMESPACE_INFOA;
T.LPWSANAMESPACE_INFO = T.LPWSANAMESPACE_INFOA;
T.WSACOMPLETIONTYPE = Enum('NSP_NOTIFY_APC', {
    NSP_NOTIFY_IMMEDIATELY: 0,
    NSP_NOTIFY_HWND: 1,
    NSP_NOTIFY_EVENT: 2,
    NSP_NOTIFY_PORT: 3,
    NSP_NOTIFY_APC: 4
});
T.PWSACOMPLETIONTYPE = Pointer(Enum('NSP_NOTIFY_APC', {
    NSP_NOTIFY_IMMEDIATELY: 0,
    NSP_NOTIFY_HWND: 1,
    NSP_NOTIFY_EVENT: 2,
    NSP_NOTIFY_PORT: 3,
    NSP_NOTIFY_APC: 4
}));
T.LPWSACOMPLETIONTYPE = Pointer(Enum('NSP_NOTIFY_APC', {
    NSP_NOTIFY_IMMEDIATELY: 0,
    NSP_NOTIFY_HWND: 1,
    NSP_NOTIFY_EVENT: 2,
    NSP_NOTIFY_PORT: 3,
    NSP_NOTIFY_APC: 4
}));
T.WSACOMPLETION = Struct('_WSACOMPLETION', {
    Type: T.WSACOMPLETIONTYPE,
    Parameters: Union('', {
        WindowMessage: Struct('', {
            hWnd: T.HWND,
            uMsg: T.UINT,
            context: T.WPARAM
        }),
        Event: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED
        }),
        Apc: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED,
            lpfnCompletionProc: T.LPWSAOVERLAPPED_COMPLETION_ROUTINE
        }),
        Port: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED,
            hPort: T.HANDLE,
            Key: T.ULONG_PTR
        })
    })
});
T.PWSACOMPLETION = Pointer(Struct('_WSACOMPLETION', {
    Type: T.WSACOMPLETIONTYPE,
    Parameters: Union('', {
        WindowMessage: Struct('', {
            hWnd: T.HWND,
            uMsg: T.UINT,
            context: T.WPARAM
        }),
        Event: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED
        }),
        Apc: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED,
            lpfnCompletionProc: T.LPWSAOVERLAPPED_COMPLETION_ROUTINE
        }),
        Port: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED,
            hPort: T.HANDLE,
            Key: T.ULONG_PTR
        })
    })
}));
T.LPWSACOMPLETION = Pointer(Struct('_WSACOMPLETION', {
    Type: T.WSACOMPLETIONTYPE,
    Parameters: Union('', {
        WindowMessage: Struct('', {
            hWnd: T.HWND,
            uMsg: T.UINT,
            context: T.WPARAM
        }),
        Event: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED
        }),
        Apc: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED,
            lpfnCompletionProc: T.LPWSAOVERLAPPED_COMPLETION_ROUTINE
        }),
        Port: Struct('', {
            lpOverlapped: T.LPWSAOVERLAPPED,
            hPort: T.HANDLE,
            Key: T.ULONG_PTR
        })
    })
}));
T.NTSTATUS = T.LONG;
T.ALG_ID = T.u32;
T.HCRYPTPROV = T.ULONG_PTR;
T.HCRYPTPROV_OR_NCRYPT_KEY_HANDLE = T.ULONG_PTR;
T.HCRYPTPROV_LEGACY = T.ULONG_PTR;
T.HCRYPTKEY = T.ULONG_PTR;
T.HCRYPTHASH = T.ULONG_PTR;
T.HCERTSTORE = Pointer(null);
T.HCRYPTMSG = Pointer(null);
T.HCERTSTOREPROV = Pointer(null);
T.HCRYPTOIDFUNCSET = Pointer(null);
T.HCRYPTOIDFUNCADDR = Pointer(null);
T.HCRYPTDEFAULTCONTEXT = Pointer(null);
T.PROV_ENUMALGS = Struct('_PROV_ENUMALGS', {
    aiAlgid: T.ALG_ID,
    dwBitLen: T.DWORD,
    dwNameLen: T.DWORD,
    szName: ArrayType(T.CHAR, 20)
});
T.PROV_ENUMALGS_EX = Struct('_PROV_ENUMALGS_EX', {
    aiAlgid: T.ALG_ID,
    dwDefaultLen: T.DWORD,
    dwMinLen: T.DWORD,
    dwMaxLen: T.DWORD,
    dwProtocols: T.DWORD,
    dwNameLen: T.DWORD,
    szName: ArrayType(T.CHAR, 20),
    dwLongNameLen: T.DWORD,
    szLongName: ArrayType(T.CHAR, 40)
});
T.SCHANNEL_ALG = Struct('_SCHANNEL_ALG', {
    dwUse: T.DWORD,
    Algid: T.ALG_ID,
    cBits: T.DWORD,
    dwFlags: T.DWORD,
    dwReserved: T.DWORD
});
T.PSCHANNEL_ALG = Pointer(Struct('_SCHANNEL_ALG', {
    dwUse: T.DWORD,
    Algid: T.ALG_ID,
    cBits: T.DWORD,
    dwFlags: T.DWORD,
    dwReserved: T.DWORD
}));
T.HMAC_INFO = Struct('_HMAC_INFO', {
    HashAlgid: T.ALG_ID,
    pbInnerString: Pointer(T.BYTE),
    cbInnerString: T.DWORD,
    pbOuterString: Pointer(T.BYTE),
    cbOuterString: T.DWORD
});
T.PHMAC_INFO = Pointer(Struct('_HMAC_INFO', {
    HashAlgid: T.ALG_ID,
    pbInnerString: Pointer(T.BYTE),
    cbInnerString: T.DWORD,
    pbOuterString: Pointer(T.BYTE),
    cbOuterString: T.DWORD
}));
T.CRYPT_INTEGER_BLOB = Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});
T.PCRYPT_INTEGER_BLOB = Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));
T.CRYPT_UINT_BLOB = Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});
T.PCRYPT_UINT_BLOB = Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));
T.CRYPT_OBJID_BLOB = Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});
T.PCRYPT_OBJID_BLOB = Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));
T.CERT_NAME_BLOB = Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});
T.PCERT_NAME_BLOB = Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));
T.CERT_RDN_VALUE_BLOB = Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});
T.PCERT_RDN_VALUE_BLOB = Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));
T.CERT_BLOB = Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});
T.PCERT_BLOB = Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));
T.CRL_BLOB = Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});
T.PCRL_BLOB = Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));
T.DATA_BLOB = Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});
T.PDATA_BLOB = Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));
T.CRYPT_DATA_BLOB = Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});
T.PCRYPT_DATA_BLOB = Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));
T.CRYPT_HASH_BLOB = Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});
T.PCRYPT_HASH_BLOB = Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));
T.CRYPT_DIGEST_BLOB = Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});
T.PCRYPT_DIGEST_BLOB = Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));
T.CRYPT_DER_BLOB = Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});
T.PCRYPT_DER_BLOB = Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));
T.CRYPT_ATTR_BLOB = Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
});
T.PCRYPT_ATTR_BLOB = Pointer(Struct('_CRYPTOAPI_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE)
}));
T.CRYPTPROTECT_PROMPTSTRUCT = Struct('_CRYPTPROTECT_PROMPTSTRUCT', {
    cbSize: T.DWORD,
    dwPromptFlags: T.DWORD,
    hwndApp: T.HWND,
    szPrompt: T.LPCWSTR
});
T.PCRYPTPROTECT_PROMPTSTRUCT = Pointer(Struct('_CRYPTPROTECT_PROMPTSTRUCT', {
    cbSize: T.DWORD,
    dwPromptFlags: T.DWORD,
    hwndApp: T.HWND,
    szPrompt: T.LPCWSTR
}));
T.CRYPT_ALGORITHM_IDENTIFIER = Struct('_CRYPT_ALGORITHM_IDENTIFIER', {
    pszObjId: T.LPSTR,
    Parameters: T.CRYPT_OBJID_BLOB
});
T.PCRYPT_ALGORITHM_IDENTIFIER = Pointer(Struct('_CRYPT_ALGORITHM_IDENTIFIER', {
    pszObjId: T.LPSTR,
    Parameters: T.CRYPT_OBJID_BLOB
}));
T.CRYPT_ATTRIBUTE_TYPE_VALUE = Struct('_CRYPT_ATTRIBUTE_TYPE_VALUE', {
    pszObjId: T.LPSTR,
    Value: T.CRYPT_OBJID_BLOB
});
T.PCRYPT_ATTRIBUTE_TYPE_VALUE = Pointer(Struct('_CRYPT_ATTRIBUTE_TYPE_VALUE', {
    pszObjId: T.LPSTR,
    Value: T.CRYPT_OBJID_BLOB
}));
T.BLOBHEADER = Struct('_PUBLICKEYSTRUC', {
    bType: T.BYTE,
    bVersion: T.BYTE,
    reserved: T.WORD,
    aiKeyAlg: T.ALG_ID
});
T.PUBLICKEYSTRUC = Struct('_PUBLICKEYSTRUC', {
    bType: T.BYTE,
    bVersion: T.BYTE,
    reserved: T.WORD,
    aiKeyAlg: T.ALG_ID
});
T.RSAPUBKEY = Struct('_RSAPUBKEY', {
    magic: T.DWORD,
    bitlen: T.DWORD,
    pubexp: T.DWORD
});
T.DHPUBKEY = Struct('_PUBKEY', {
    magic: T.DWORD,
    bitlen: T.DWORD
});
T.DSSPUBKEY = Struct('_PUBKEY', {
    magic: T.DWORD,
    bitlen: T.DWORD
});
T.KEAPUBKEY = Struct('_PUBKEY', {
    magic: T.DWORD,
    bitlen: T.DWORD
});
T.TEKPUBKEY = Struct('_PUBKEY', {
    magic: T.DWORD,
    bitlen: T.DWORD
});
T.DSSSEED = Struct('_DSSSEED', {
    counter: T.DWORD,
    seed: ArrayType(T.BYTE, 20)
});
T.DHPUBKEY_VER3 = Struct('_PUBKEYVER3', {
    magic: T.DWORD,
    bitlenP: T.DWORD,
    bitlenQ: T.DWORD,
    bitlenJ: T.DWORD,
    DSSSeed: T.DSSSEED
});
T.DSSPUBKEY_VER3 = Struct('_PUBKEYVER3', {
    magic: T.DWORD,
    bitlenP: T.DWORD,
    bitlenQ: T.DWORD,
    bitlenJ: T.DWORD,
    DSSSeed: T.DSSSEED
});
T.DHPRIVKEY_VER3 = Struct('_PRIVKEYVER3', {
    magic: T.DWORD,
    bitlenP: T.DWORD,
    bitlenQ: T.DWORD,
    bitlenJ: T.DWORD,
    bitlenX: T.DWORD,
    DSSSeed: T.DSSSEED
});
T.DSSPRIVKEY_VER3 = Struct('_PRIVKEYVER3', {
    magic: T.DWORD,
    bitlenP: T.DWORD,
    bitlenQ: T.DWORD,
    bitlenJ: T.DWORD,
    bitlenX: T.DWORD,
    DSSSeed: T.DSSSEED
});
T.KEY_TYPE_SUBTYPE = Struct('_KEY_TYPE_SUBTYPE', {
    dwKeySpec: T.DWORD,
    Type: T.GUID,
    SubType: T.GUID
});
T.PKEY_TYPE_SUBTYPE = Pointer(Struct('_KEY_TYPE_SUBTYPE', {
    dwKeySpec: T.DWORD,
    Type: T.GUID,
    SubType: T.GUID
}));
T.CERT_FORTEZZA_DATA_PROP = Struct('_CERT_FORTEZZA_DATA_PROP', {
    SerialNumber: ArrayType(T.u8, 8),
    CertIndex: T.i32,
    CertLabel: ArrayType(T.u8, 36)
});
T.CMS_DH_KEY_INFO = Struct('_CMS_DH_KEY_INFO', {
    dwVersion: T.DWORD,
    Algid: T.ALG_ID,
    pszContentEncObjId: T.LPSTR,
    PubInfo: T.CRYPT_DATA_BLOB,
    pReserved: Pointer(null)
});
T.PCMS_DH_KEY_INFO = Pointer(Struct('_CMS_DH_KEY_INFO', {
    dwVersion: T.DWORD,
    Algid: T.ALG_ID,
    pszContentEncObjId: T.LPSTR,
    PubInfo: T.CRYPT_DATA_BLOB,
    pReserved: Pointer(null)
}));
T.CRYPT_BIT_BLOB = Struct('_CRYPT_BIT_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE),
    cUnusedBits: T.DWORD
});
T.PCRYPT_BIT_BLOB = Pointer(Struct('_CRYPT_BIT_BLOB', {
    cbData: T.DWORD,
    pbData: Pointer(T.BYTE),
    cUnusedBits: T.DWORD
}));
T.CRYPT_KEY_PROV_PARAM = Struct('_CRYPT_KEY_PROV_PARAM', {
    dwParam: T.DWORD,
    pbData: Pointer(T.BYTE),
    cbData: T.DWORD,
    dwFlags: T.DWORD
});
T.PCRYPT_KEY_PROV_PARAM = Pointer(Struct('_CRYPT_KEY_PROV_PARAM', {
    dwParam: T.DWORD,
    pbData: Pointer(T.BYTE),
    cbData: T.DWORD,
    dwFlags: T.DWORD
}));
T.CRYPT_KEY_PROV_INFO = Struct('_CRYPT_KEY_PROV_INFO', {
    pwszContainerName: T.LPWSTR,
    pwszProvName: T.LPWSTR,
    dwProvType: T.DWORD,
    dwFlags: T.DWORD,
    cProvParam: T.DWORD,
    rgProvParam: T.PCRYPT_KEY_PROV_PARAM,
    dwKeySpec: T.DWORD
});
T.PCRYPT_KEY_PROV_INFO = Pointer(Struct('_CRYPT_KEY_PROV_INFO', {
    pwszContainerName: T.LPWSTR,
    pwszProvName: T.LPWSTR,
    dwProvType: T.DWORD,
    dwFlags: T.DWORD,
    cProvParam: T.DWORD,
    rgProvParam: T.PCRYPT_KEY_PROV_PARAM,
    dwKeySpec: T.DWORD
}));
T.CERT_KEY_CONTEXT = Struct('_CERT_KEY_CONTEXT', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD
});
T.PCERT_KEY_CONTEXT = Pointer(Struct('_CERT_KEY_CONTEXT', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD
}));
T.CERT_PUBLIC_KEY_INFO = Struct('_CERT_PUBLIC_KEY_INFO', {
    Algorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    PublicKey: T.CRYPT_BIT_BLOB
});
T.PCERT_PUBLIC_KEY_INFO = Pointer(Struct('_CERT_PUBLIC_KEY_INFO', {
    Algorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    PublicKey: T.CRYPT_BIT_BLOB
}));
T.CERT_EXTENSION = Struct('_CERT_EXTENSION', {
    pszObjId: T.LPSTR,
    fCritical: T.BOOL,
    Value: T.CRYPT_OBJID_BLOB
});
T.PCERT_EXTENSION = Pointer(Struct('_CERT_EXTENSION', {
    pszObjId: T.LPSTR,
    fCritical: T.BOOL,
    Value: T.CRYPT_OBJID_BLOB
}));
T.CERT_EXTENSIONS = Struct('_CERT_EXTENSIONS', {
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
});
T.PCERT_EXTENSIONS = Pointer(Struct('_CERT_EXTENSIONS', {
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
}));
T.CERT_INFO = Struct('_CERT_INFO', {
    dwVersion: T.DWORD,
    SerialNumber: T.CRYPT_INTEGER_BLOB,
    SignatureAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    Issuer: T.CERT_NAME_BLOB,
    NotBefore: T.FILETIME,
    NotAfter: T.FILETIME,
    Subject: T.CERT_NAME_BLOB,
    SubjectPublicKeyInfo: T.CERT_PUBLIC_KEY_INFO,
    IssuerUniqueId: T.CRYPT_BIT_BLOB,
    SubjectUniqueId: T.CRYPT_BIT_BLOB,
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
});
T.PCERT_INFO = Pointer(Struct('_CERT_INFO', {
    dwVersion: T.DWORD,
    SerialNumber: T.CRYPT_INTEGER_BLOB,
    SignatureAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    Issuer: T.CERT_NAME_BLOB,
    NotBefore: T.FILETIME,
    NotAfter: T.FILETIME,
    Subject: T.CERT_NAME_BLOB,
    SubjectPublicKeyInfo: T.CERT_PUBLIC_KEY_INFO,
    IssuerUniqueId: T.CRYPT_BIT_BLOB,
    SubjectUniqueId: T.CRYPT_BIT_BLOB,
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
}));
T.CERT_RDN_ATTR = Struct('_CERT_RDN_ATTR', {
    pszObjId: T.LPSTR,
    dwValueType: T.DWORD,
    Value: T.CERT_RDN_VALUE_BLOB
});
T.PCERT_RDN_ATTR = Pointer(Struct('_CERT_RDN_ATTR', {
    pszObjId: T.LPSTR,
    dwValueType: T.DWORD,
    Value: T.CERT_RDN_VALUE_BLOB
}));
T.CERT_RDN = Struct('_CERT_RDN', {
    cRDNAttr: T.DWORD,
    rgRDNAttr: T.PCERT_RDN_ATTR
});
T.PCERT_RDN = Pointer(Struct('_CERT_RDN', {
    cRDNAttr: T.DWORD,
    rgRDNAttr: T.PCERT_RDN_ATTR
}));
T.CERT_NAME_INFO = Struct('_CERT_NAME_INFO', {
    cRDN: T.DWORD,
    rgRDN: T.PCERT_RDN
});
T.PCERT_NAME_INFO = Pointer(Struct('_CERT_NAME_INFO', {
    cRDN: T.DWORD,
    rgRDN: T.PCERT_RDN
}));
T.CERT_NAME_VALUE = Struct('_CERT_NAME_VALUE', {
    dwValueType: T.DWORD,
    Value: T.CERT_RDN_VALUE_BLOB
});
T.PCERT_NAME_VALUE = Pointer(Struct('_CERT_NAME_VALUE', {
    dwValueType: T.DWORD,
    Value: T.CERT_RDN_VALUE_BLOB
}));
T.CERT_ENCRYPTED_PRIVATE_KEY_INFO = Struct('_CERT_ENCRYPTED_PRIVATE_KEY_INFO', {
    EncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedPrivateKey: T.CRYPT_DATA_BLOB
});
T.PCERT_ENCRYPTED_PRIVATE_KEY_INFO = Pointer(Struct('_CERT_ENCRYPTED_PRIVATE_KEY_INFO', {
    EncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedPrivateKey: T.CRYPT_DATA_BLOB
}));
T.CERT_AUTHORITY_KEY_ID_INFO = Struct('_CERT_AUTHORITY_KEY_ID_INFO', {
    KeyId: T.CRYPT_DATA_BLOB,
    CertIssuer: T.CERT_NAME_BLOB,
    CertSerialNumber: T.CRYPT_INTEGER_BLOB
});
T.PCERT_AUTHORITY_KEY_ID_INFO = Pointer(Struct('_CERT_AUTHORITY_KEY_ID_INFO', {
    KeyId: T.CRYPT_DATA_BLOB,
    CertIssuer: T.CERT_NAME_BLOB,
    CertSerialNumber: T.CRYPT_INTEGER_BLOB
}));
T.CERT_PRIVATE_KEY_VALIDITY = Struct('_CERT_PRIVATE_KEY_VALIDITY', {
    NotBefore: T.FILETIME,
    NotAfter: T.FILETIME
});
T.PCERT_PRIVATE_KEY_VALIDITY = Pointer(Struct('_CERT_PRIVATE_KEY_VALIDITY', {
    NotBefore: T.FILETIME,
    NotAfter: T.FILETIME
}));
T.CERT_KEY_ATTRIBUTES_INFO = Struct('_CERT_KEY_ATTRIBUTES_INFO', {
    KeyId: T.CRYPT_DATA_BLOB,
    IntendedKeyUsage: T.CRYPT_BIT_BLOB,
    pPrivateKeyUsagePeriod: T.PCERT_PRIVATE_KEY_VALIDITY
});
T.PCERT_KEY_ATTRIBUTES_INFO = Pointer(Struct('_CERT_KEY_ATTRIBUTES_INFO', {
    KeyId: T.CRYPT_DATA_BLOB,
    IntendedKeyUsage: T.CRYPT_BIT_BLOB,
    pPrivateKeyUsagePeriod: T.PCERT_PRIVATE_KEY_VALIDITY
}));
T.CERT_POLICY_ID = Struct('_CERT_POLICY_ID', {
    cCertPolicyElementId: T.DWORD,
    rgbszCertPolicyElementId: Pointer(T.LPSTR)
});
T.PCERT_POLICY_ID = Pointer(Struct('_CERT_POLICY_ID', {
    cCertPolicyElementId: T.DWORD,
    rgbszCertPolicyElementId: Pointer(T.LPSTR)
}));
T.CERT_KEY_USAGE_RESTRICTION_INFO = Struct('_CERT_KEY_USAGE_RESTRICTION_INFO', {
    cCertPolicyId: T.DWORD,
    rgCertPolicyId: T.PCERT_POLICY_ID,
    RestrictedKeyUsage: T.CRYPT_BIT_BLOB
});
T.PCERT_KEY_USAGE_RESTRICTION_INFO = Pointer(Struct('_CERT_KEY_USAGE_RESTRICTION_INFO', {
    cCertPolicyId: T.DWORD,
    rgCertPolicyId: T.PCERT_POLICY_ID,
    RestrictedKeyUsage: T.CRYPT_BIT_BLOB
}));
T.CERT_OTHER_NAME = Struct('_CERT_OTHER_NAME', {
    pszObjId: T.LPSTR,
    Value: T.CRYPT_OBJID_BLOB
});
T.PCERT_OTHER_NAME = Pointer(Struct('_CERT_OTHER_NAME', {
    pszObjId: T.LPSTR,
    Value: T.CRYPT_OBJID_BLOB
}));
T.CERT_ALT_NAME_ENTRY = Struct('_CERT_ALT_NAME_ENTRY', {
    dwAltNameChoice: T.DWORD,
    __unnamed0: Union('', {
        pOtherName: T.PCERT_OTHER_NAME,
        pwszRfc822Name: T.LPWSTR,
        pwszDNSName: T.LPWSTR,
        DirectoryName: T.CERT_NAME_BLOB,
        pwszURL: T.LPWSTR,
        IPAddress: T.CRYPT_DATA_BLOB,
        pszRegisteredID: T.LPSTR
    })
});
T.PCERT_ALT_NAME_ENTRY = Pointer(Struct('_CERT_ALT_NAME_ENTRY', {
    dwAltNameChoice: T.DWORD,
    __unnamed0: Union('', {
        pOtherName: T.PCERT_OTHER_NAME,
        pwszRfc822Name: T.LPWSTR,
        pwszDNSName: T.LPWSTR,
        DirectoryName: T.CERT_NAME_BLOB,
        pwszURL: T.LPWSTR,
        IPAddress: T.CRYPT_DATA_BLOB,
        pszRegisteredID: T.LPSTR
    })
}));
T.CERT_ALT_NAME_INFO = Struct('_CERT_ALT_NAME_INFO', {
    cAltEntry: T.DWORD,
    rgAltEntry: T.PCERT_ALT_NAME_ENTRY
});
T.PCERT_ALT_NAME_INFO = Pointer(Struct('_CERT_ALT_NAME_INFO', {
    cAltEntry: T.DWORD,
    rgAltEntry: T.PCERT_ALT_NAME_ENTRY
}));
T.CERT_BASIC_CONSTRAINTS_INFO = Struct('_CERT_BASIC_CONSTRAINTS_INFO', {
    SubjectType: T.CRYPT_BIT_BLOB,
    fPathLenConstraint: T.BOOL,
    dwPathLenConstraint: T.DWORD,
    cSubtreesConstraint: T.DWORD,
    rgSubtreesConstraint: Pointer(T.CERT_NAME_BLOB)
});
T.PCERT_BASIC_CONSTRAINTS_INFO = Pointer(Struct('_CERT_BASIC_CONSTRAINTS_INFO', {
    SubjectType: T.CRYPT_BIT_BLOB,
    fPathLenConstraint: T.BOOL,
    dwPathLenConstraint: T.DWORD,
    cSubtreesConstraint: T.DWORD,
    rgSubtreesConstraint: Pointer(T.CERT_NAME_BLOB)
}));
T.CERT_BASIC_CONSTRAINTS2_INFO = Struct('_CERT_BASIC_CONSTRAINTS2_INFO', {
    fCA: T.BOOL,
    fPathLenConstraint: T.BOOL,
    dwPathLenConstraint: T.DWORD
});
T.PCERT_BASIC_CONSTRAINTS2_INFO = Pointer(Struct('_CERT_BASIC_CONSTRAINTS2_INFO', {
    fCA: T.BOOL,
    fPathLenConstraint: T.BOOL,
    dwPathLenConstraint: T.DWORD
}));
T.CERT_POLICY_QUALIFIER_INFO = Struct('_CERT_POLICY_QUALIFIER_INFO', {
    pszPolicyQualifierId: T.LPSTR,
    Qualifier: T.CRYPT_OBJID_BLOB
});
T.PCERT_POLICY_QUALIFIER_INFO = Pointer(Struct('_CERT_POLICY_QUALIFIER_INFO', {
    pszPolicyQualifierId: T.LPSTR,
    Qualifier: T.CRYPT_OBJID_BLOB
}));
T.CERT_POLICY_INFO = Struct('_CERT_POLICY_INFO', {
    pszPolicyIdentifier: T.LPSTR,
    cPolicyQualifier: T.DWORD,
    rgPolicyQualifier: Pointer(T.CERT_POLICY_QUALIFIER_INFO)
});
T.PCERT_POLICY_INFO = Pointer(Struct('_CERT_POLICY_INFO', {
    pszPolicyIdentifier: T.LPSTR,
    cPolicyQualifier: T.DWORD,
    rgPolicyQualifier: Pointer(T.CERT_POLICY_QUALIFIER_INFO)
}));
T.CERT_POLICIES_INFO = Struct('_CERT_POLICIES_INFO', {
    cPolicyInfo: T.DWORD,
    rgPolicyInfo: Pointer(T.CERT_POLICY_INFO)
});
T.PCERT_POLICIES_INFO = Pointer(Struct('_CERT_POLICIES_INFO', {
    cPolicyInfo: T.DWORD,
    rgPolicyInfo: Pointer(T.CERT_POLICY_INFO)
}));
T.CERT_POLICY_QUALIFIER_NOTICE_REFERENCE = Struct('_CERT_POLICY_QUALIFIER_NOTICE_REFERENCE', {
    pszOrganization: T.LPSTR,
    cNoticeNumbers: T.DWORD,
    rgNoticeNumbers: Pointer(T.i32)
});
T.PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE = Pointer(Struct('_CERT_POLICY_QUALIFIER_NOTICE_REFERENCE', {
    pszOrganization: T.LPSTR,
    cNoticeNumbers: T.DWORD,
    rgNoticeNumbers: Pointer(T.i32)
}));
T.CERT_POLICY_QUALIFIER_USER_NOTICE = Struct('_CERT_POLICY_QUALIFIER_USER_NOTICE', {
    pNoticeReference: Pointer(T.CERT_POLICY_QUALIFIER_NOTICE_REFERENCE),
    pszDisplayText: T.LPWSTR
});
T.PCERT_POLICY_QUALIFIER_USER_NOTICE = Pointer(Struct('_CERT_POLICY_QUALIFIER_USER_NOTICE', {
    pNoticeReference: Pointer(T.CERT_POLICY_QUALIFIER_NOTICE_REFERENCE),
    pszDisplayText: T.LPWSTR
}));
T.CPS_URLS = Struct('_CPS_URLS', {
    pszURL: T.LPWSTR,
    pAlgorithm: Pointer(T.CRYPT_ALGORITHM_IDENTIFIER),
    pDigest: Pointer(T.CRYPT_DATA_BLOB)
});
T.PCPS_URLS = Pointer(Struct('_CPS_URLS', {
    pszURL: T.LPWSTR,
    pAlgorithm: Pointer(T.CRYPT_ALGORITHM_IDENTIFIER),
    pDigest: Pointer(T.CRYPT_DATA_BLOB)
}));
T.CERT_POLICY95_QUALIFIER1 = Struct('_CERT_POLICY95_QUALIFIER1', {
    pszPracticesReference: T.LPWSTR,
    pszNoticeIdentifier: T.LPSTR,
    pszNSINoticeIdentifier: T.LPSTR,
    cCPSURLs: T.DWORD,
    rgCPSURLs: Pointer(T.CPS_URLS)
});
T.PCERT_POLICY95_QUALIFIER1 = Pointer(Struct('_CERT_POLICY95_QUALIFIER1', {
    pszPracticesReference: T.LPWSTR,
    pszNoticeIdentifier: T.LPSTR,
    pszNSINoticeIdentifier: T.LPSTR,
    cCPSURLs: T.DWORD,
    rgCPSURLs: Pointer(T.CPS_URLS)
}));
T.CERT_POLICY_MAPPING = Struct('_CERT_POLICY_MAPPING', {
    pszIssuerDomainPolicy: T.LPSTR,
    pszSubjectDomainPolicy: T.LPSTR
});
T.PCERT_POLICY_MAPPING = Pointer(Struct('_CERT_POLICY_MAPPING', {
    pszIssuerDomainPolicy: T.LPSTR,
    pszSubjectDomainPolicy: T.LPSTR
}));
T.CERT_POLICY_MAPPINGS_INFO = Struct('_CERT_POLICY_MAPPINGS_INFO', {
    cPolicyMapping: T.DWORD,
    rgPolicyMapping: T.PCERT_POLICY_MAPPING
});
T.PCERT_POLICY_MAPPINGS_INFO = Pointer(Struct('_CERT_POLICY_MAPPINGS_INFO', {
    cPolicyMapping: T.DWORD,
    rgPolicyMapping: T.PCERT_POLICY_MAPPING
}));
T.CERT_POLICY_CONSTRAINTS_INFO = Struct('_CERT_POLICY_CONSTRAINTS_INFO', {
    fRequireExplicitPolicy: T.BOOL,
    dwRequireExplicitPolicySkipCerts: T.DWORD,
    fInhibitPolicyMapping: T.BOOL,
    dwInhibitPolicyMappingSkipCerts: T.DWORD
});
T.PCERT_POLICY_CONSTRAINTS_INFO = Pointer(Struct('_CERT_POLICY_CONSTRAINTS_INFO', {
    fRequireExplicitPolicy: T.BOOL,
    dwRequireExplicitPolicySkipCerts: T.DWORD,
    fInhibitPolicyMapping: T.BOOL,
    dwInhibitPolicyMappingSkipCerts: T.DWORD
}));
T.CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = Struct('_CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY', {
    pszObjId: T.LPSTR,
    cValue: T.DWORD,
    rgValue: T.PCRYPT_DER_BLOB
});
T.PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = Pointer(Struct('_CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY', {
    pszObjId: T.LPSTR,
    cValue: T.DWORD,
    rgValue: T.PCRYPT_DER_BLOB
}));
T.CRYPT_CONTENT_INFO = Struct('_CRYPT_CONTENT_INFO', {
    pszObjId: T.LPSTR,
    Content: T.CRYPT_DER_BLOB
});
T.PCRYPT_CONTENT_INFO = Pointer(Struct('_CRYPT_CONTENT_INFO', {
    pszObjId: T.LPSTR,
    Content: T.CRYPT_DER_BLOB
}));
T.CRYPT_SEQUENCE_OF_ANY = Struct('_CRYPT_SEQUENCE_OF_ANY', {
    cValue: T.DWORD,
    rgValue: T.PCRYPT_DER_BLOB
});
T.PCRYPT_SEQUENCE_OF_ANY = Pointer(Struct('_CRYPT_SEQUENCE_OF_ANY', {
    cValue: T.DWORD,
    rgValue: T.PCRYPT_DER_BLOB
}));
T.CERT_AUTHORITY_KEY_ID2_INFO = Struct('_CERT_AUTHORITY_KEY_ID2_INFO', {
    KeyId: T.CRYPT_DATA_BLOB,
    AuthorityCertIssuer: T.CERT_ALT_NAME_INFO,
    AuthorityCertSerialNumber: T.CRYPT_INTEGER_BLOB
});
T.PCERT_AUTHORITY_KEY_ID2_INFO = Pointer(Struct('_CERT_AUTHORITY_KEY_ID2_INFO', {
    KeyId: T.CRYPT_DATA_BLOB,
    AuthorityCertIssuer: T.CERT_ALT_NAME_INFO,
    AuthorityCertSerialNumber: T.CRYPT_INTEGER_BLOB
}));
T.CERT_ACCESS_DESCRIPTION = Struct('_CERT_ACCESS_DESCRIPTION', {
    pszAccessMethod: T.LPSTR,
    AccessLocation: T.CERT_ALT_NAME_ENTRY
});
T.PCERT_ACCESS_DESCRIPTION = Pointer(Struct('_CERT_ACCESS_DESCRIPTION', {
    pszAccessMethod: T.LPSTR,
    AccessLocation: T.CERT_ALT_NAME_ENTRY
}));
T.CERT_AUTHORITY_INFO_ACCESS = Struct('_CERT_AUTHORITY_INFO_ACCESS', {
    cAccDescr: T.DWORD,
    rgAccDescr: T.PCERT_ACCESS_DESCRIPTION
});
T.PCERT_AUTHORITY_INFO_ACCESS = Pointer(Struct('_CERT_AUTHORITY_INFO_ACCESS', {
    cAccDescr: T.DWORD,
    rgAccDescr: T.PCERT_ACCESS_DESCRIPTION
}));
T.CERT_CONTEXT = Struct('_CERT_CONTEXT', {
    dwCertEncodingType: T.DWORD,
    pbCertEncoded: Pointer(T.BYTE),
    cbCertEncoded: T.DWORD,
    pCertInfo: T.PCERT_INFO,
    hCertStore: T.HCERTSTORE
});
T.PCERT_CONTEXT = Pointer(Struct('_CERT_CONTEXT', {
    dwCertEncodingType: T.DWORD,
    pbCertEncoded: Pointer(T.BYTE),
    cbCertEncoded: T.DWORD,
    pCertInfo: T.PCERT_INFO,
    hCertStore: T.HCERTSTORE
}));
T.PCCERT_CONTEXT = Pointer(T.CERT_CONTEXT);
T.CRL_ENTRY = Struct('_CRL_ENTRY', {
    SerialNumber: T.CRYPT_INTEGER_BLOB,
    RevocationDate: T.FILETIME,
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
});
T.PCRL_ENTRY = Pointer(Struct('_CRL_ENTRY', {
    SerialNumber: T.CRYPT_INTEGER_BLOB,
    RevocationDate: T.FILETIME,
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
}));
T.CRL_INFO = Struct('_CRL_INFO', {
    dwVersion: T.DWORD,
    SignatureAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    Issuer: T.CERT_NAME_BLOB,
    ThisUpdate: T.FILETIME,
    NextUpdate: T.FILETIME,
    cCRLEntry: T.DWORD,
    rgCRLEntry: T.PCRL_ENTRY,
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
});
T.PCRL_INFO = Pointer(Struct('_CRL_INFO', {
    dwVersion: T.DWORD,
    SignatureAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    Issuer: T.CERT_NAME_BLOB,
    ThisUpdate: T.FILETIME,
    NextUpdate: T.FILETIME,
    cCRLEntry: T.DWORD,
    rgCRLEntry: T.PCRL_ENTRY,
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
}));
T.CRL_DIST_POINT_NAME = Struct('_CRL_DIST_POINT_NAME', {
    dwDistPointNameChoice: T.DWORD,
    __unnamed0: Union('', {
        FullName: T.CERT_ALT_NAME_INFO
    })
});
T.PCRL_DIST_POINT_NAME = Pointer(Struct('_CRL_DIST_POINT_NAME', {
    dwDistPointNameChoice: T.DWORD,
    __unnamed0: Union('', {
        FullName: T.CERT_ALT_NAME_INFO
    })
}));
T.CRL_DIST_POINT = Struct('_CRL_DIST_POINT', {
    DistPointName: T.CRL_DIST_POINT_NAME,
    ReasonFlags: T.CRYPT_BIT_BLOB,
    CRLIssuer: T.CERT_ALT_NAME_INFO
});
T.PCRL_DIST_POINT = Pointer(Struct('_CRL_DIST_POINT', {
    DistPointName: T.CRL_DIST_POINT_NAME,
    ReasonFlags: T.CRYPT_BIT_BLOB,
    CRLIssuer: T.CERT_ALT_NAME_INFO
}));
T.CRL_DIST_POINTS_INFO = Struct('_CRL_DIST_POINTS_INFO', {
    cDistPoint: T.DWORD,
    rgDistPoint: T.PCRL_DIST_POINT
});
T.PCRL_DIST_POINTS_INFO = Pointer(Struct('_CRL_DIST_POINTS_INFO', {
    cDistPoint: T.DWORD,
    rgDistPoint: T.PCRL_DIST_POINT
}));
T.CROSS_CERT_DIST_POINTS_INFO = Struct('_CROSS_CERT_DIST_POINTS_INFO', {
    dwSyncDeltaTime: T.DWORD,
    cDistPoint: T.DWORD,
    rgDistPoint: T.PCERT_ALT_NAME_INFO
});
T.PCROSS_CERT_DIST_POINTS_INFO = Pointer(Struct('_CROSS_CERT_DIST_POINTS_INFO', {
    dwSyncDeltaTime: T.DWORD,
    cDistPoint: T.DWORD,
    rgDistPoint: T.PCERT_ALT_NAME_INFO
}));
T.CERT_PAIR = Struct('_CERT_PAIR', {
    Forward: T.CERT_BLOB,
    Reverse: T.CERT_BLOB
});
T.PCERT_PAIR = Pointer(Struct('_CERT_PAIR', {
    Forward: T.CERT_BLOB,
    Reverse: T.CERT_BLOB
}));
T.CRL_ISSUING_DIST_POINT = Struct('_CRL_ISSUING_DIST_POINT', {
    DistPointName: T.CRL_DIST_POINT_NAME,
    fOnlyContainsUserCerts: T.BOOL,
    fOnlyContainsCACerts: T.BOOL,
    OnlySomeReasonFlags: T.CRYPT_BIT_BLOB,
    fIndirectCRL: T.BOOL
});
T.PCRL_ISSUING_DIST_POINT = Pointer(Struct('_CRL_ISSUING_DIST_POINT', {
    DistPointName: T.CRL_DIST_POINT_NAME,
    fOnlyContainsUserCerts: T.BOOL,
    fOnlyContainsCACerts: T.BOOL,
    OnlySomeReasonFlags: T.CRYPT_BIT_BLOB,
    fIndirectCRL: T.BOOL
}));
T.CERT_GENERAL_SUBTREE = Struct('_CERT_GENERAL_SUBTREE', {
    Base: T.CERT_ALT_NAME_ENTRY,
    dwMinimum: T.DWORD,
    fMaximum: T.BOOL,
    dwMaximum: T.DWORD
});
T.PCERT_GENERAL_SUBTREE = Pointer(Struct('_CERT_GENERAL_SUBTREE', {
    Base: T.CERT_ALT_NAME_ENTRY,
    dwMinimum: T.DWORD,
    fMaximum: T.BOOL,
    dwMaximum: T.DWORD
}));
T.CERT_NAME_CONSTRAINTS_INFO = Struct('_CERT_NAME_CONSTRAINTS_INFO', {
    cPermittedSubtree: T.DWORD,
    rgPermittedSubtree: T.PCERT_GENERAL_SUBTREE,
    cExcludedSubtree: T.DWORD,
    rgExcludedSubtree: T.PCERT_GENERAL_SUBTREE
});
T.PCERT_NAME_CONSTRAINTS_INFO = Pointer(Struct('_CERT_NAME_CONSTRAINTS_INFO', {
    cPermittedSubtree: T.DWORD,
    rgPermittedSubtree: T.PCERT_GENERAL_SUBTREE,
    cExcludedSubtree: T.DWORD,
    rgExcludedSubtree: T.PCERT_GENERAL_SUBTREE
}));
T.CRYPT_ATTRIBUTE = Struct('_CRYPT_ATTRIBUTE', {
    pszObjId: T.LPSTR,
    cValue: T.DWORD,
    rgValue: T.PCRYPT_DATA_BLOB
});
T.PCRYPT_ATTRIBUTE = Pointer(Struct('_CRYPT_ATTRIBUTE', {
    pszObjId: T.LPSTR,
    cValue: T.DWORD,
    rgValue: T.PCRYPT_DATA_BLOB
}));
T.CRYPT_ATTRIBUTES = Struct('_CRYPT_ATTRIBUTES', {
    cAttr: T.DWORD,
    rgAttr: T.PCRYPT_ATTRIBUTE
});
T.PCRYPT_ATTRIBUTES = Pointer(Struct('_CRYPT_ATTRIBUTES', {
    cAttr: T.DWORD,
    rgAttr: T.PCRYPT_ATTRIBUTE
}));
T.CERT_REQUEST_INFO = Struct('_CERT_REQUEST_INFO', {
    dwVersion: T.DWORD,
    Subject: T.CERT_NAME_BLOB,
    SubjectPublicKeyInfo: T.CERT_PUBLIC_KEY_INFO,
    cAttribute: T.DWORD,
    rgAttribute: T.PCRYPT_ATTRIBUTE
});
T.PCERT_REQUEST_INFO = Pointer(Struct('_CERT_REQUEST_INFO', {
    dwVersion: T.DWORD,
    Subject: T.CERT_NAME_BLOB,
    SubjectPublicKeyInfo: T.CERT_PUBLIC_KEY_INFO,
    cAttribute: T.DWORD,
    rgAttribute: T.PCRYPT_ATTRIBUTE
}));
T.CERT_KEYGEN_REQUEST_INFO = Struct('_CERT_KEYGEN_REQUEST_INFO', {
    dwVersion: T.DWORD,
    SubjectPubliceKeyInfo: T.CERT_PUBLIC_KEY_INFO,
    pwszChallengeString: T.LPWSTR
});
T.PCERT_KEYGEN_REQUEST_INFO = Pointer(Struct('_CERT_KEYGEN_REQUEST_INFO', {
    dwVersion: T.DWORD,
    SubjectPubliceKeyInfo: T.CERT_PUBLIC_KEY_INFO,
    pwszChallengeString: T.LPWSTR
}));
T.CERT_SIGNED_CONTENT_INFO = Struct('_CERT_SIGNED_CONTENT_INFO', {
    ToBeSigned: T.CRYPT_DER_BLOB,
    SignatureAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    Signature: T.CRYPT_BIT_BLOB
});
T.PCERT_SIGNED_CONTENT_INFO = Pointer(Struct('_CERT_SIGNED_CONTENT_INFO', {
    ToBeSigned: T.CRYPT_DER_BLOB,
    SignatureAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    Signature: T.CRYPT_BIT_BLOB
}));
T.CRL_CONTEXT = Struct('_CRL_CONTEXT', {
    dwCertEncodingType: T.DWORD,
    pbCrlEncoded: Pointer(T.BYTE),
    cbCrlEncoded: T.DWORD,
    pCrlInfo: T.PCRL_INFO,
    hCertStore: T.HCERTSTORE
});
T.PCRL_CONTEXT = Pointer(Struct('_CRL_CONTEXT', {
    dwCertEncodingType: T.DWORD,
    pbCrlEncoded: Pointer(T.BYTE),
    cbCrlEncoded: T.DWORD,
    pCrlInfo: T.PCRL_INFO,
    hCertStore: T.HCERTSTORE
}));
T.PCCRL_CONTEXT = Pointer(T.CRL_CONTEXT);
T.CERT_DSS_PARAMETERS = Struct('_CERT_DSS_PARAMETERS', {
    p: T.CRYPT_UINT_BLOB,
    q: T.CRYPT_UINT_BLOB,
    g: T.CRYPT_UINT_BLOB
});
T.PCERT_DSS_PARAMETERS = Pointer(Struct('_CERT_DSS_PARAMETERS', {
    p: T.CRYPT_UINT_BLOB,
    q: T.CRYPT_UINT_BLOB,
    g: T.CRYPT_UINT_BLOB
}));
T.CERT_DH_PARAMETERS = Struct('_CERT_DH_PARAMETERS', {
    p: T.CRYPT_UINT_BLOB,
    g: T.CRYPT_UINT_BLOB
});
T.PCERT_DH_PARAMETERS = Pointer(Struct('_CERT_DH_PARAMETERS', {
    p: T.CRYPT_UINT_BLOB,
    g: T.CRYPT_UINT_BLOB
}));
T.CERT_X942_DH_VALIDATION_PARAMS = Struct('_CERT_X942_DH_VALIDATION_PARAMS', {
    seed: T.CRYPT_BIT_BLOB,
    pgenCounter: T.DWORD
});
T.PCERT_X942_DH_VALIDATION_PARAMS = Pointer(Struct('_CERT_X942_DH_VALIDATION_PARAMS', {
    seed: T.CRYPT_BIT_BLOB,
    pgenCounter: T.DWORD
}));
T.CERT_X942_DH_PARAMETERS = Struct('_CERT_X942_DH_PARAMETERS', {
    p: T.CRYPT_UINT_BLOB,
    g: T.CRYPT_UINT_BLOB,
    q: T.CRYPT_UINT_BLOB,
    j: T.CRYPT_UINT_BLOB,
    pValidationParams: T.PCERT_X942_DH_VALIDATION_PARAMS
});
T.PCERT_X942_DH_PARAMETERS = Pointer(Struct('_CERT_X942_DH_PARAMETERS', {
    p: T.CRYPT_UINT_BLOB,
    g: T.CRYPT_UINT_BLOB,
    q: T.CRYPT_UINT_BLOB,
    j: T.CRYPT_UINT_BLOB,
    pValidationParams: T.PCERT_X942_DH_VALIDATION_PARAMS
}));
T.CRYPT_X942_OTHER_INFO = Struct('_CRYPT_X942_OTHER_INFO', {
    pszContentEncryptionObjId: T.LPSTR,
    rgbCounter: ArrayType(T.BYTE, 4),
    rgbKeyLength: ArrayType(T.BYTE, 4),
    PubInfo: T.CRYPT_DATA_BLOB
});
T.PCRYPT_X942_OTHER_INFO = Pointer(Struct('_CRYPT_X942_OTHER_INFO', {
    pszContentEncryptionObjId: T.LPSTR,
    rgbCounter: ArrayType(T.BYTE, 4),
    rgbKeyLength: ArrayType(T.BYTE, 4),
    PubInfo: T.CRYPT_DATA_BLOB
}));
T.CRYPT_RC2_CBC_PARAMETERS = Struct('_CRYPT_RC2_CBC_PARAMETERS', {
    dwVersion: T.DWORD,
    fIV: T.BOOL,
    rgbIV: ArrayType(T.BYTE, 4)
});
T.PCRYPT_RC2_CBC_PARAMETERS = Pointer(Struct('_CRYPT_RC2_CBC_PARAMETERS', {
    dwVersion: T.DWORD,
    fIV: T.BOOL,
    rgbIV: ArrayType(T.BYTE, 4)
}));
T.CRYPT_SMIME_CAPABILITY = Struct('_CRYPT_SMIME_CAPABILITY', {
    pszObjId: T.LPSTR,
    Parameters: T.CRYPT_OBJID_BLOB
});
T.PCRYPT_SMIME_CAPABILITY = Pointer(Struct('_CRYPT_SMIME_CAPABILITY', {
    pszObjId: T.LPSTR,
    Parameters: T.CRYPT_OBJID_BLOB
}));
T.CRYPT_SMIME_CAPABILITIES = Struct('_CRYPT_SMIME_CAPABILITIES', {
    cCapability: T.DWORD,
    rgCapability: T.PCRYPT_SMIME_CAPABILITY
});
T.PCRYPT_SMIME_CAPABILITIES = Pointer(Struct('_CRYPT_SMIME_CAPABILITIES', {
    cCapability: T.DWORD,
    rgCapability: T.PCRYPT_SMIME_CAPABILITY
}));
T.VTableProvStruc = Struct('_VTableProvStruc', {
    Version: T.DWORD,
    FuncVerifyImage: T.FARPROC,
    FuncReturnhWnd: T.FARPROC,
    dwProvType: T.DWORD,
    pbContextInfo: Pointer(T.BYTE),
    cbContextInfo: T.DWORD,
    pszProvName: T.LPSTR
});
T.PVTableProvStruc = Pointer(Struct('_VTableProvStruc', {
    Version: T.DWORD,
    FuncVerifyImage: T.FARPROC,
    FuncReturnhWnd: T.FARPROC,
    dwProvType: T.DWORD,
    pbContextInfo: Pointer(T.BYTE),
    cbContextInfo: T.DWORD,
    pszProvName: T.LPSTR
}));
T.CERT_PRIVATE_KEY_INFO = Struct('_CERT_PRIVATE_KEY_INFO', {
    Version: T.DWORD,
    Algorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    PrivateKey: T.CRYPT_DER_BLOB,
    pAttributes: T.PCRYPT_ATTRIBUTES
});
T.PCERT_PRIVATE_KEY_INFO = Pointer(Struct('_CERT_PRIVATE_KEY_INFO', {
    Version: T.DWORD,
    Algorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    PrivateKey: T.CRYPT_DER_BLOB,
    pAttributes: T.PCRYPT_ATTRIBUTES
}));
T.CTL_USAGE = Struct('_CTL_USAGE', {
    cUsageIdentifier: T.DWORD,
    rgpszUsageIdentifier: Pointer(T.LPSTR)
});
T.PCTL_USAGE = Pointer(Struct('_CTL_USAGE', {
    cUsageIdentifier: T.DWORD,
    rgpszUsageIdentifier: Pointer(T.LPSTR)
}));
T.CERT_ENHKEY_USAGE = Struct('_CTL_USAGE', {
    cUsageIdentifier: T.DWORD,
    rgpszUsageIdentifier: Pointer(T.LPSTR)
});
T.PCERT_ENHKEY_USAGE = Pointer(Struct('_CTL_USAGE', {
    cUsageIdentifier: T.DWORD,
    rgpszUsageIdentifier: Pointer(T.LPSTR)
}));
T.CTL_ENTRY = Struct('_CTL_ENTRY', {
    SubjectIdentifier: T.CRYPT_DATA_BLOB,
    cAttribute: T.DWORD,
    rgAttribute: T.PCRYPT_ATTRIBUTE
});
T.PCTL_ENTRY = Pointer(Struct('_CTL_ENTRY', {
    SubjectIdentifier: T.CRYPT_DATA_BLOB,
    cAttribute: T.DWORD,
    rgAttribute: T.PCRYPT_ATTRIBUTE
}));
T.CTL_INFO = Struct('_CTL_INFO', {
    dwVersion: T.DWORD,
    SubjectUsage: T.CTL_USAGE,
    ListIdentifier: T.CRYPT_DATA_BLOB,
    SequenceNumber: T.CRYPT_INTEGER_BLOB,
    ThisUpdate: T.FILETIME,
    NextUpdate: T.FILETIME,
    SubjectAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    cCTLEntry: T.DWORD,
    rgCTLEntry: T.PCTL_ENTRY,
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
});
T.PCTL_INFO = Pointer(Struct('_CTL_INFO', {
    dwVersion: T.DWORD,
    SubjectUsage: T.CTL_USAGE,
    ListIdentifier: T.CRYPT_DATA_BLOB,
    SequenceNumber: T.CRYPT_INTEGER_BLOB,
    ThisUpdate: T.FILETIME,
    NextUpdate: T.FILETIME,
    SubjectAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    cCTLEntry: T.DWORD,
    rgCTLEntry: T.PCTL_ENTRY,
    cExtension: T.DWORD,
    rgExtension: T.PCERT_EXTENSION
}));
T.CTL_CONTEXT = Struct('_CTL_CONTEXT', {
    dwMsgAndCertEncodingType: T.DWORD,
    pbCtlEncoded: Pointer(T.BYTE),
    cbCtlEncoded: T.DWORD,
    pCtlInfo: T.PCTL_INFO,
    hCertStore: T.HCERTSTORE,
    hCryptMsg: T.HCRYPTMSG,
    pbCtlContext: Pointer(T.BYTE),
    cbCtlContext: T.DWORD
});
T.PCTL_CONTEXT = Pointer(Struct('_CTL_CONTEXT', {
    dwMsgAndCertEncodingType: T.DWORD,
    pbCtlEncoded: Pointer(T.BYTE),
    cbCtlEncoded: T.DWORD,
    pCtlInfo: T.PCTL_INFO,
    hCertStore: T.HCERTSTORE,
    hCryptMsg: T.HCRYPTMSG,
    pbCtlContext: Pointer(T.BYTE),
    cbCtlContext: T.DWORD
}));
T.PCCTL_CONTEXT = Pointer(T.CTL_CONTEXT);
T.CRYPT_TIME_STAMP_REQUEST_INFO = Struct('_CRYPT_TIME_STAMP_REQUEST_INFO', {
    pszTimeStampAlgorithm: T.LPSTR,
    pszContentType: T.LPSTR,
    Content: T.CRYPT_OBJID_BLOB,
    cAttribute: T.DWORD,
    rgAttribute: T.PCRYPT_ATTRIBUTE
});
T.PCRYPT_TIME_STAMP_REQUEST_INFO = Pointer(Struct('_CRYPT_TIME_STAMP_REQUEST_INFO', {
    pszTimeStampAlgorithm: T.LPSTR,
    pszContentType: T.LPSTR,
    Content: T.CRYPT_OBJID_BLOB,
    cAttribute: T.DWORD,
    rgAttribute: T.PCRYPT_ATTRIBUTE
}));
T.CRYPT_ENROLLMENT_NAME_VALUE_PAIR = Struct('_CRYPT_ENROLLMENT_NAME_VALUE_PAIR', {
    pwszName: T.LPWSTR,
    pwszValue: T.LPWSTR
});
T.PCRYPT_ENROLLMENT_NAME_VALUE_PAIR = Pointer(Struct('_CRYPT_ENROLLMENT_NAME_VALUE_PAIR', {
    pwszName: T.LPWSTR,
    pwszValue: T.LPWSTR
}));
T.CMSG_SIGNER_INFO = Struct('_CMSG_SIGNER_INFO', {
    dwVersion: T.DWORD,
    Issuer: T.CERT_NAME_BLOB,
    SerialNumber: T.CRYPT_INTEGER_BLOB,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    HashEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedHash: T.CRYPT_DATA_BLOB,
    AuthAttrs: T.CRYPT_ATTRIBUTES,
    UnauthAttrs: T.CRYPT_ATTRIBUTES
});
T.PCMSG_SIGNER_INFO = Pointer(Struct('_CMSG_SIGNER_INFO', {
    dwVersion: T.DWORD,
    Issuer: T.CERT_NAME_BLOB,
    SerialNumber: T.CRYPT_INTEGER_BLOB,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    HashEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedHash: T.CRYPT_DATA_BLOB,
    AuthAttrs: T.CRYPT_ATTRIBUTES,
    UnauthAttrs: T.CRYPT_ATTRIBUTES
}));
T.CERT_REVOCATION_CRL_INFO = Struct('_CERT_REVOCATION_CRL_INFO', {
    cbSize: T.DWORD,
    pBaseCrlContext: T.PCCRL_CONTEXT,
    pDeltaCrlContext: T.PCCRL_CONTEXT,
    pCrlEntry: T.PCRL_ENTRY,
    fDeltaCrlEntry: T.BOOL
});
T.PCERT_REVOCATION_CRL_INFO = Pointer(Struct('_CERT_REVOCATION_CRL_INFO', {
    cbSize: T.DWORD,
    pBaseCrlContext: T.PCCRL_CONTEXT,
    pDeltaCrlContext: T.PCCRL_CONTEXT,
    pCrlEntry: T.PCRL_ENTRY,
    fDeltaCrlEntry: T.BOOL
}));
T.CERT_REVOCATION_INFO = Struct('_CERT_REVOCATION_INFO', {
    cbSize: T.DWORD,
    dwRevocationResult: T.DWORD,
    pszRevocationOid: T.LPCSTR,
    pvOidSpecificInfo: T.LPVOID,
    fHasFreshnessTime: T.BOOL,
    dwFreshnessTime: T.DWORD,
    pCrlInfo: T.PCERT_REVOCATION_CRL_INFO
});
T.PCERT_REVOCATION_INFO = Pointer(Struct('_CERT_REVOCATION_INFO', {
    cbSize: T.DWORD,
    dwRevocationResult: T.DWORD,
    pszRevocationOid: T.LPCSTR,
    pvOidSpecificInfo: T.LPVOID,
    fHasFreshnessTime: T.BOOL,
    dwFreshnessTime: T.DWORD,
    pCrlInfo: T.PCERT_REVOCATION_CRL_INFO
}));
T.CERT_REVOCATION_PARA = Struct('_CERT_REVOCATION_PARA', {
    cbSize: T.DWORD,
    pIssuerCert: T.PCCERT_CONTEXT,
    cCertStore: T.DWORD,
    rgCertStore: Pointer(T.HCERTSTORE),
    hCrlStore: T.HCERTSTORE,
    pftTimeToUse: T.LPFILETIME
});
T.PCERT_REVOCATION_PARA = Pointer(Struct('_CERT_REVOCATION_PARA', {
    cbSize: T.DWORD,
    pIssuerCert: T.PCCERT_CONTEXT,
    cCertStore: T.DWORD,
    rgCertStore: Pointer(T.HCERTSTORE),
    hCrlStore: T.HCERTSTORE,
    pftTimeToUse: T.LPFILETIME
}));
T.CTL_VERIFY_USAGE_PARA = Struct('_CTL_VERIFY_USAGE_PARA', {
    cbSize: T.DWORD,
    ListIdentifier: T.CRYPT_DATA_BLOB,
    cCtlStore: T.DWORD,
    rghCtlStore: Pointer(T.HCERTSTORE),
    cSignerStore: T.DWORD,
    rghSignerStore: Pointer(T.HCERTSTORE)
});
T.PCTL_VERIFY_USAGE_PARA = Pointer(Struct('_CTL_VERIFY_USAGE_PARA', {
    cbSize: T.DWORD,
    ListIdentifier: T.CRYPT_DATA_BLOB,
    cCtlStore: T.DWORD,
    rghCtlStore: Pointer(T.HCERTSTORE),
    cSignerStore: T.DWORD,
    rghSignerStore: Pointer(T.HCERTSTORE)
}));
T.CTL_VERIFY_USAGE_STATUS = Struct('_CTL_VERIFY_USAGE_STATUS', {
    cbSize: T.DWORD,
    dwError: T.DWORD,
    dwFlags: T.DWORD,
    ppCtl: Pointer(T.PCCTL_CONTEXT),
    dwCtlEntryIndex: T.DWORD,
    ppSigner: Pointer(T.PCCERT_CONTEXT),
    dwSignerIndex: T.DWORD
});
T.PCTL_VERIFY_USAGE_STATUS = Pointer(Struct('_CTL_VERIFY_USAGE_STATUS', {
    cbSize: T.DWORD,
    dwError: T.DWORD,
    dwFlags: T.DWORD,
    ppCtl: Pointer(T.PCCTL_CONTEXT),
    dwCtlEntryIndex: T.DWORD,
    ppSigner: Pointer(T.PCCERT_CONTEXT),
    dwSignerIndex: T.DWORD
}));
T.CERT_REVOCATION_STATUS = Struct('_CERT_REVOCATION_STATUS', {
    cbSize: T.DWORD,
    dwIndex: T.DWORD,
    dwError: T.DWORD,
    dwReason: T.DWORD,
    fHasFreshnessTime: T.BOOL,
    dwFreshnessTime: T.DWORD
});
T.PCERT_REVOCATION_STATUS = Pointer(Struct('_CERT_REVOCATION_STATUS', {
    cbSize: T.DWORD,
    dwIndex: T.DWORD,
    dwError: T.DWORD,
    dwReason: T.DWORD,
    fHasFreshnessTime: T.BOOL,
    dwFreshnessTime: T.DWORD
}));
T.CERT_TRUST_LIST_INFO = Struct('_CERT_TRUST_LIST_INFO', {
    cbSize: T.DWORD,
    pCtlEntry: T.PCTL_ENTRY,
    pCtlContext: T.PCCTL_CONTEXT
});
T.PCERT_TRUST_LIST_INFO = Pointer(Struct('_CERT_TRUST_LIST_INFO', {
    cbSize: T.DWORD,
    pCtlEntry: T.PCTL_ENTRY,
    pCtlContext: T.PCCTL_CONTEXT
}));
T.CERT_TRUST_STATUS = Struct('_CERT_TRUST_STATUS', {
    dwErrorStatus: T.DWORD,
    dwInfoStatus: T.DWORD
});
T.PCERT_TRUST_STATUS = Pointer(Struct('_CERT_TRUST_STATUS', {
    dwErrorStatus: T.DWORD,
    dwInfoStatus: T.DWORD
}));
T.CERT_CHAIN_ELEMENT = Struct('_CERT_CHAIN_ELEMENT', {
    cbSize: T.DWORD,
    pCertContext: T.PCCERT_CONTEXT,
    TrustStatus: T.CERT_TRUST_STATUS,
    pRevocationInfo: T.PCERT_REVOCATION_INFO,
    pIssuanceUsage: T.PCERT_ENHKEY_USAGE,
    pApplicationUsage: T.PCERT_ENHKEY_USAGE,
    pwszExtendedErrorInfo: T.LPCWSTR
});
T.PCERT_CHAIN_ELEMENT = Pointer(Struct('_CERT_CHAIN_ELEMENT', {
    cbSize: T.DWORD,
    pCertContext: T.PCCERT_CONTEXT,
    TrustStatus: T.CERT_TRUST_STATUS,
    pRevocationInfo: T.PCERT_REVOCATION_INFO,
    pIssuanceUsage: T.PCERT_ENHKEY_USAGE,
    pApplicationUsage: T.PCERT_ENHKEY_USAGE,
    pwszExtendedErrorInfo: T.LPCWSTR
}));
T.CERT_SIMPLE_CHAIN = Struct('_CERT_SIMPLE_CHAIN', {
    cbSize: T.DWORD,
    TrustStatus: T.CERT_TRUST_STATUS,
    cElement: T.DWORD,
    rgpElement: Pointer(T.PCERT_CHAIN_ELEMENT),
    pTrustListInfo: T.PCERT_TRUST_LIST_INFO,
    fHasRevocationFreshnessTime: T.BOOL,
    dwRevocationFreshnessTime: T.DWORD
});
T.PCERT_SIMPLE_CHAIN = Pointer(Struct('_CERT_SIMPLE_CHAIN', {
    cbSize: T.DWORD,
    TrustStatus: T.CERT_TRUST_STATUS,
    cElement: T.DWORD,
    rgpElement: Pointer(T.PCERT_CHAIN_ELEMENT),
    pTrustListInfo: T.PCERT_TRUST_LIST_INFO,
    fHasRevocationFreshnessTime: T.BOOL,
    dwRevocationFreshnessTime: T.DWORD
}));
T.CERT_CHAIN_CONTEXT = Struct('_CERT_CHAIN_CONTEXT', null);
T.PCERT_CHAIN_CONTEXT = Pointer(Struct('_CERT_CHAIN_CONTEXT', null));
T.PCCERT_CHAIN_CONTEXT = Pointer(T.CERT_CHAIN_CONTEXT);
T.CERT_CHAIN_POLICY_PARA = Struct('_CERT_CHAIN_POLICY_PARA', {
    cbSize: T.DWORD,
    dwFlags: T.DWORD,
    pvExtraPolicyPara: Pointer(null)
});
T.PCERT_CHAIN_POLICY_PARA = Pointer(Struct('_CERT_CHAIN_POLICY_PARA', {
    cbSize: T.DWORD,
    dwFlags: T.DWORD,
    pvExtraPolicyPara: Pointer(null)
}));
T.CERT_CHAIN_POLICY_STATUS = Struct('_CERT_CHAIN_POLICY_STATUS', {
    cbSize: T.DWORD,
    dwError: T.DWORD,
    lChainIndex: T.LONG,
    lElementIndex: T.LONG,
    pvExtraPolicyStatus: Pointer(null)
});
T.PCERT_CHAIN_POLICY_STATUS = Pointer(Struct('_CERT_CHAIN_POLICY_STATUS', {
    cbSize: T.DWORD,
    dwError: T.DWORD,
    lChainIndex: T.LONG,
    lElementIndex: T.LONG,
    pvExtraPolicyStatus: Pointer(null)
}));
T.AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = Struct('_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA', {
    cbSize: T.DWORD,
    dwRegPolicySettings: T.DWORD,
    pSignerInfo: T.PCMSG_SIGNER_INFO
});
T.PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = Pointer(Struct('_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA', {
    cbSize: T.DWORD,
    dwRegPolicySettings: T.DWORD,
    pSignerInfo: T.PCMSG_SIGNER_INFO
}));
T.AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = Struct('_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS', {
    cbSize: T.DWORD,
    fCommercial: T.BOOL
});
T.PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = Pointer(Struct('_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS', {
    cbSize: T.DWORD,
    fCommercial: T.BOOL
}));
T.AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = Struct('_AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA', {
    cbSize: T.DWORD,
    dwRegPolicySettings: T.DWORD,
    fCommercial: T.BOOL
});
T.PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = Pointer(Struct('_AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA', {
    cbSize: T.DWORD,
    dwRegPolicySettings: T.DWORD,
    fCommercial: T.BOOL
}));
T.HTTPSPolicyCallbackData = Struct('_HTTPSPolicyCallbackData', {
    __unnamed0: Union('', {
        cbStruct: T.DWORD,
        cbSize: T.DWORD
    }),
    dwAuthType: T.DWORD,
    fdwChecks: T.DWORD,
    pwszServerName: Pointer(T.WCHAR)
});
T.PHTTPSPolicyCallbackData = Pointer(Struct('_HTTPSPolicyCallbackData', {
    __unnamed0: Union('', {
        cbStruct: T.DWORD,
        cbSize: T.DWORD
    }),
    dwAuthType: T.DWORD,
    fdwChecks: T.DWORD,
    pwszServerName: Pointer(T.WCHAR)
}));
T.SSL_EXTRA_CERT_CHAIN_POLICY_PARA = Struct('_HTTPSPolicyCallbackData', {
    __unnamed0: Union('', {
        cbStruct: T.DWORD,
        cbSize: T.DWORD
    }),
    dwAuthType: T.DWORD,
    fdwChecks: T.DWORD,
    pwszServerName: Pointer(T.WCHAR)
});
T.PSSL_EXTRA_CERT_CHAIN_POLICY_PARA = Pointer(Struct('_HTTPSPolicyCallbackData', {
    __unnamed0: Union('', {
        cbStruct: T.DWORD,
        cbSize: T.DWORD
    }),
    dwAuthType: T.DWORD,
    fdwChecks: T.DWORD,
    pwszServerName: Pointer(T.WCHAR)
}));
T.CERT_USAGE_MATCH = Struct('_CERT_USAGE_MATCH', {
    dwType: T.DWORD,
    Usage: T.CERT_ENHKEY_USAGE
});
T.PCERT_USAGE_MATCH = Pointer(Struct('_CERT_USAGE_MATCH', {
    dwType: T.DWORD,
    Usage: T.CERT_ENHKEY_USAGE
}));
T.CTL_USAGE_MATCH = Struct('_CTL_USAGE_MATCH', {
    dwType: T.DWORD,
    Usage: T.CTL_USAGE
});
T.PCTL_USAGE_MATCH = Pointer(Struct('_CTL_USAGE_MATCH', {
    dwType: T.DWORD,
    Usage: T.CTL_USAGE
}));
T.CERT_CHAIN_PARA = Struct('_CERT_CHAIN_PARA', {
    cbSize: T.DWORD,
    RequestedUsage: T.CERT_USAGE_MATCH
});
T.PCERT_CHAIN_PARA = Pointer(Struct('_CERT_CHAIN_PARA', {
    cbSize: T.DWORD,
    RequestedUsage: T.CERT_USAGE_MATCH
}));
T.CERT_SYSTEM_STORE_INFO = Struct('_CERT_SYSTEM_STORE_INFO', {
    cbSize: T.DWORD
});
T.PCERT_SYSTEM_STORE_INFO = Pointer(Struct('_CERT_SYSTEM_STORE_INFO', {
    cbSize: T.DWORD
}));
T.CERT_PHYSICAL_STORE_INFO = Struct('_CERT_PHYSICAL_STORE_INFO', {
    cbSize: T.DWORD,
    pszOpenStoreProvider: T.LPSTR,
    dwOpenEncodingType: T.DWORD,
    dwOpenFlags: T.DWORD,
    OpenParameters: T.CRYPT_DATA_BLOB,
    dwFlags: T.DWORD,
    dwPriority: T.DWORD
});
T.PCERT_PHYSICAL_STORE_INFO = Pointer(Struct('_CERT_PHYSICAL_STORE_INFO', {
    cbSize: T.DWORD,
    pszOpenStoreProvider: T.LPSTR,
    dwOpenEncodingType: T.DWORD,
    dwOpenFlags: T.DWORD,
    OpenParameters: T.CRYPT_DATA_BLOB,
    dwFlags: T.DWORD,
    dwPriority: T.DWORD
}));
T.CERT_SYSTEM_STORE_RELOCATE_PARA = Struct('_CERT_SYSTEM_STORE_RELOCATE_PARA', {
    __unnamed0: Union('', {
        hKeyBase: T.HKEY,
        pvBase: Pointer(null)
    }),
    __unnamed1: Union('', {
        pvSystemStore: Pointer(null),
        pszSystemStore: T.LPCSTR,
        pwszSystemStore: T.LPCWSTR
    })
});
T.PCERT_SYSTEM_STORE_RELOCATE_PARA = Pointer(Struct('_CERT_SYSTEM_STORE_RELOCATE_PARA', {
    __unnamed0: Union('', {
        hKeyBase: T.HKEY,
        pvBase: Pointer(null)
    }),
    __unnamed1: Union('', {
        pvSystemStore: Pointer(null),
        pszSystemStore: T.LPCSTR,
        pwszSystemStore: T.LPCWSTR
    })
}));
T.PFN_CERT_ENUM_SYSTEM_STORE_LOCATION = Pointer(Fn(T.BOOL, [[T.LPCWSTR, 'pwszStoreLocation'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved'], [Pointer(null), 'pvArg']]));
T.PFN_CERT_ENUM_SYSTEM_STORE = Pointer(Fn(T.BOOL, [[Pointer(null), 'pvSystemStore'], [T.DWORD, 'dwFlags'], [T.PCERT_SYSTEM_STORE_INFO, 'pStoreInfo'], [Pointer(null), 'pvReserved'], [Pointer(null), 'pvArg']]));
T.PFN_CERT_ENUM_PHYSICAL_STORE = Pointer(Fn(T.BOOL, [[Pointer(null), 'pvSystemStore'], [T.DWORD, 'dwFlags'], [T.LPCWSTR, 'pwszStoreName'], [T.PCERT_PHYSICAL_STORE_INFO, 'pStoreInfo'], [Pointer(null), 'pvReserved'], [Pointer(null), 'pvArg']]));
T.PFN_CRYPT_ALLOC = Pointer(Fn(T.LPVOID, [[T.size_t, 'cbsize']]));
T.PFN_CRYPT_FREE = Pointer(Fn(null, [[T.LPVOID, 'pv']]));
T.CRYPT_ENCODE_PARA = Struct('_CRYPT_ENCODE_PARA', {
    cbSize: T.DWORD,
    pfnAlloc: T.PFN_CRYPT_ALLOC,
    pfnFree: T.PFN_CRYPT_FREE
});
T.PCRYPT_ENCODE_PARA = Pointer(Struct('_CRYPT_ENCODE_PARA', {
    cbSize: T.DWORD,
    pfnAlloc: T.PFN_CRYPT_ALLOC,
    pfnFree: T.PFN_CRYPT_FREE
}));
T.CRYPT_DECODE_PARA = Struct('_CRYPT_DECODE_PARA', {
    cbSize: T.DWORD,
    pfnAlloc: T.PFN_CRYPT_ALLOC,
    pfnFree: T.PFN_CRYPT_FREE
});
T.PCRYPT_DECODE_PARA = Pointer(Struct('_CRYPT_DECODE_PARA', {
    cbSize: T.DWORD,
    pfnAlloc: T.PFN_CRYPT_ALLOC,
    pfnFree: T.PFN_CRYPT_FREE
}));
T.CERT_STORE_PROV_INFO = Struct('_CERT_STORE_PROV_INFO', {
    cbSize: T.DWORD,
    cStoreProvFunc: T.DWORD,
    rgpvStoreProvFunc: Pointer(Pointer(null)),
    hStoreProv: T.HCERTSTOREPROV,
    dwStoreProvFlags: T.DWORD,
    hStoreProvFuncAddr2: T.HCRYPTOIDFUNCADDR
});
T.PCERT_STORE_PROV_INFO = Pointer(Struct('_CERT_STORE_PROV_INFO', {
    cbSize: T.DWORD,
    cStoreProvFunc: T.DWORD,
    rgpvStoreProvFunc: Pointer(Pointer(null)),
    hStoreProv: T.HCERTSTOREPROV,
    dwStoreProvFlags: T.DWORD,
    hStoreProvFuncAddr2: T.HCRYPTOIDFUNCADDR
}));
T.PFN_CERT_DLL_OPEN_STORE_PROV_FUNC = Pointer(Fn(T.BOOL, [[T.LPCSTR, 'lpszStoreProvider'], [T.DWORD, 'dwEncodingType'], [T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvPara'], [T.HCERTSTORE, 'hCertStore'], [T.PCERT_STORE_PROV_INFO, 'pStoreProvInfo']]));
T.PFN_CERT_STORE_PROV_CLOSE = Pointer(Fn(null, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.DWORD, 'dwFlags']]));
T.PFN_CERT_STORE_PROV_READ_CERT = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCERT_CONTEXT, 'pStoreCertContext'], [T.DWORD, 'dwFlags'], [Pointer(T.PCCERT_CONTEXT), 'ppProvCertContext']]));
T.PFN_CERT_STORE_PROV_WRITE_CERT = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwFlags']]));
T.PFN_CERT_STORE_PROV_DELETE_CERT = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwFlags']]));
T.PFN_CERT_STORE_PROV_SET_CERT_PROPERTY = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData']]));
T.PFN_CERT_STORE_PROV_READ_CRL = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCRL_CONTEXT, 'pStoreCrlContext'], [T.DWORD, 'dwFlags'], [Pointer(T.PCCRL_CONTEXT), 'ppProvCrlContext']]));
T.PFN_CERT_STORE_PROV_WRITE_CRL = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCRL_CONTEXT, 'pCrlContext'], [T.DWORD, 'dwFlags']]));
T.PFN_CERT_STORE_PROV_DELETE_CRL = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCRL_CONTEXT, 'pCrlContext'], [T.DWORD, 'dwFlags']]));
T.PFN_CERT_STORE_PROV_SET_CRL_PROPERTY = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCRL_CONTEXT, 'pCrlContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData']]));
T.PFN_CERT_STORE_PROV_READ_CTL = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCTL_CONTEXT, 'pStoreCtlContext'], [T.DWORD, 'dwFlags'], [Pointer(T.PCCTL_CONTEXT), 'ppProvCtlContext']]));
T.PFN_CERT_STORE_PROV_WRITE_CTL = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCTL_CONTEXT, 'pCtlContext'], [T.DWORD, 'dwFlags']]));
T.PFN_CERT_STORE_PROV_DELETE_CTL = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCTL_CONTEXT, 'pCtlContext'], [T.DWORD, 'dwFlags']]));
T.PFN_CERT_STORE_PROV_SET_CTL_PROPERTY = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCTL_CONTEXT, 'pCtlContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData']]));
T.PFN_CERT_STORE_PROV_CONTROL = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwCtrlType'], [Pointer(null), 'pvCtrlPara']]));
T.CERT_STORE_PROV_FIND_INFO = Struct('_CERT_STORE_PROV_FIND_INFO', {
    cbSize: T.DWORD,
    dwMsgAndCertEncodingType: T.DWORD,
    dwFindFlags: T.DWORD,
    dwFindType: T.DWORD,
    pvFindPara: Pointer(null)
});
T.PCERT_STORE_PROV_FIND_INFO = Pointer(Struct('_CERT_STORE_PROV_FIND_INFO', {
    cbSize: T.DWORD,
    dwMsgAndCertEncodingType: T.DWORD,
    dwFindFlags: T.DWORD,
    dwFindType: T.DWORD,
    pvFindPara: Pointer(null)
}));
T.CCERT_STORE_PROV_FIND_INFO = T.CERT_STORE_PROV_FIND_INFO;
T.PCCERT_STORE_PROV_FIND_INFO = Pointer(T.CERT_STORE_PROV_FIND_INFO);
T.PFN_CERT_STORE_PROV_FIND_CERT = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCERT_STORE_PROV_FIND_INFO, 'pFindInfo'], [T.PCCERT_CONTEXT, 'pPrevCertContext'], [T.DWORD, 'dwFlags'], [Pointer(Pointer(null)), 'ppvStoreProvFindInfo'], [Pointer(T.PCCERT_CONTEXT), 'ppProvCertContext']]));
T.PFN_CERT_STORE_PROV_FREE_FIND_CERT = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCERT_CONTEXT, 'pCertContext'], [Pointer(null), 'pvStoreProvFindInfo'], [T.DWORD, 'dwFlags']]));
T.PFN_CERT_STORE_PROV_GET_CERT_PROPERTY = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData'], [Pointer(T.DWORD), 'pcbData']]));
T.PFN_CERT_STORE_PROV_FIND_CRL = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCERT_STORE_PROV_FIND_INFO, 'pFindInfo'], [T.PCCRL_CONTEXT, 'pPrevCrlContext'], [T.DWORD, 'dwFlags'], [Pointer(Pointer(null)), 'ppvStoreProvFindInfo'], [Pointer(T.PCCRL_CONTEXT), 'ppProvCrlContext']]));
T.PFN_CERT_STORE_PROV_FREE_FIND_CRL = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCRL_CONTEXT, 'pCrlContext'], [Pointer(null), 'pvStoreProvFindInfo'], [T.DWORD, 'dwFlags']]));
T.PFN_CERT_STORE_PROV_GET_CRL_PROPERTY = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCRL_CONTEXT, 'pCrlContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData'], [Pointer(T.DWORD), 'pcbData']]));
T.PFN_CERT_STORE_PROV_FIND_CTL = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCTL_CONTEXT, 'pCtlContext'], [Pointer(null), 'pvStoreProvFindInfo'], [T.DWORD, 'dwFlags']]));
T.PFN_CERT_STORE_PROV_GET_CTL_PROPERTY = Pointer(Fn(T.BOOL, [[T.HCERTSTOREPROV, 'hStoreProv'], [T.PCCTL_CONTEXT, 'pCtlContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData']]));
T.CERT_CREATE_CONTEXT_PARA = Struct('_CERT_CREATE_CONTEXT_PARA', {
    cbSize: T.DWORD,
    pfnFree: T.PFN_CRYPT_FREE,
    pvFree: Pointer(null)
});
T.PCERT_CREATE_CONTEXT_PARA = Pointer(Struct('_CERT_CREATE_CONTEXT_PARA', {
    cbSize: T.DWORD,
    pfnFree: T.PFN_CRYPT_FREE,
    pvFree: Pointer(null)
}));
T.CRYPT_OID_FUNC_ENTRY = Struct('_CRYPT_OID_FUNC_ENTRY', {
    pszOID: T.LPCSTR,
    pvFuncAddr: Pointer(null)
});
T.PCRYPT_OID_FUNC_ENTRY = Pointer(Struct('_CRYPT_OID_FUNC_ENTRY', {
    pszOID: T.LPCSTR,
    pvFuncAddr: Pointer(null)
}));
T.PFN_CRYPT_ENUM_OID_FUNC = Pointer(Fn(T.BOOL, [[T.DWORD, 'dwEncodingType'], [T.LPCSTR, 'pszFuncName'], [T.LPCSTR, 'pszOID'], [T.DWORD, 'cValue'], [Pointer(T.DWORD), 'rgdwValueType'], [Pointer(T.LPCWSTR), 'rgpwszValueName'], [Pointer(Pointer(T.BYTE)), 'rgpbValueData'], [Pointer(T.DWORD), 'rgcbValueData'], [Pointer(null), 'pvArg']]));
T.CRYPT_OID_INFO = Struct('_CRYPT_OID_INFO', {
    cbSize: T.DWORD,
    pszOID: T.LPCSTR,
    pwszName: T.LPCWSTR,
    dwGroupId: T.DWORD,
    __unnamed0: Union('', {
        dwValue: T.DWORD,
        Algid: T.ALG_ID,
        dwLength: T.DWORD
    }),
    ExtraInfo: T.CRYPT_DATA_BLOB
});
T.PCRYPT_OID_INFO = Pointer(Struct('_CRYPT_OID_INFO', {
    cbSize: T.DWORD,
    pszOID: T.LPCSTR,
    pwszName: T.LPCWSTR,
    dwGroupId: T.DWORD,
    __unnamed0: Union('', {
        dwValue: T.DWORD,
        Algid: T.ALG_ID,
        dwLength: T.DWORD
    }),
    ExtraInfo: T.CRYPT_DATA_BLOB
}));
T.CCRYPT_OID_INFO = T.CRYPT_OID_INFO;
T.PCCRYPT_OID_INFO = Pointer(T.CRYPT_OID_INFO);
T.PFN_CRYPT_ENUM_OID_INFO = Pointer(Fn(T.BOOL, [[T.PCCRYPT_OID_INFO, 'pInfo'], [Pointer(null), 'pvArg']]));
T.CRYPT_SIGN_MESSAGE_PARA = Struct('_CRYPT_SIGN_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgEncodingType: T.DWORD,
    pSigningCert: T.PCCERT_CONTEXT,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null),
    cMsgCert: T.DWORD,
    rgpMsgCert: Pointer(T.PCCERT_CONTEXT),
    cMsgCrl: T.DWORD,
    rgpMsgCrl: Pointer(T.PCCRL_CONTEXT),
    cAuthAttr: T.DWORD,
    rgAuthAttr: T.PCRYPT_ATTRIBUTE,
    cUnauthAttr: T.DWORD,
    rgUnauthAttr: T.PCRYPT_ATTRIBUTE,
    dwFlags: T.DWORD,
    dwInnerContentType: T.DWORD
});
T.PCRYPT_SIGN_MESSAGE_PARA = Pointer(Struct('_CRYPT_SIGN_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgEncodingType: T.DWORD,
    pSigningCert: T.PCCERT_CONTEXT,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null),
    cMsgCert: T.DWORD,
    rgpMsgCert: Pointer(T.PCCERT_CONTEXT),
    cMsgCrl: T.DWORD,
    rgpMsgCrl: Pointer(T.PCCRL_CONTEXT),
    cAuthAttr: T.DWORD,
    rgAuthAttr: T.PCRYPT_ATTRIBUTE,
    cUnauthAttr: T.DWORD,
    rgUnauthAttr: T.PCRYPT_ATTRIBUTE,
    dwFlags: T.DWORD,
    dwInnerContentType: T.DWORD
}));
T.PFN_CRYPT_GET_SIGNER_CERTIFICATE = Pointer(Fn(T.PCCERT_CONTEXT, [[Pointer(null), 'pvArg'], [T.DWORD, 'dwCertEncodingType'], [T.PCERT_INFO, 'pSignerId'], [T.HCERTSTORE, 'hMsgCertStore']]));
T.CRYPT_VERIFY_MESSAGE_PARA = Struct('_CRYPT_VERIFY_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgAndCertEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    pfnGetSignerCertificate: T.PFN_CRYPT_GET_SIGNER_CERTIFICATE,
    pvGetArg: Pointer(null)
});
T.PCRYPT_VERIFY_MESSAGE_PARA = Pointer(Struct('_CRYPT_VERIFY_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgAndCertEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    pfnGetSignerCertificate: T.PFN_CRYPT_GET_SIGNER_CERTIFICATE,
    pvGetArg: Pointer(null)
}));
T.CRYPT_ENCRYPT_MESSAGE_PARA = Struct('_CRYPT_ENCRYPT_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    ContentEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: Pointer(null),
    dwFlags: T.DWORD,
    dwInnerContentType: T.DWORD
});
T.PCRYPT_ENCRYPT_MESSAGE_PARA = Pointer(Struct('_CRYPT_ENCRYPT_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    ContentEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: Pointer(null),
    dwFlags: T.DWORD,
    dwInnerContentType: T.DWORD
}));
T.CRYPT_DECRYPT_MESSAGE_PARA = Struct('_CRYPT_DECRYPT_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgAndCertEncodingType: T.DWORD,
    cCertStore: T.DWORD,
    rghCertStore: Pointer(T.HCERTSTORE)
});
T.PCRYPT_DECRYPT_MESSAGE_PARA = Pointer(Struct('_CRYPT_DECRYPT_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgAndCertEncodingType: T.DWORD,
    cCertStore: T.DWORD,
    rghCertStore: Pointer(T.HCERTSTORE)
}));
T.CRYPT_HASH_MESSAGE_PARA = Struct('_CRYPT_HASH_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null)
});
T.PCRYPT_HASH_MESSAGE_PARA = Pointer(Struct('_CRYPT_HASH_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null)
}));
T.CRYPT_KEY_SIGN_MESSAGE_PARA = Struct('_CRYPT_KEY_SIGN_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgAndCertEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null)
});
T.PCRYPT_KEY_SIGN_MESSAGE_PARA = Pointer(Struct('_CRYPT_KEY_SIGN_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgAndCertEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null)
}));
T.CRYPT_KEY_VERIFY_MESSAGE_PARA = Struct('_CRYPT_KEY_VERIFY_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY
});
T.PCRYPT_KEY_VERIFY_MESSAGE_PARA = Pointer(Struct('_CRYPT_KEY_VERIFY_MESSAGE_PARA', {
    cbSize: T.DWORD,
    dwMsgEncodingType: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY
}));
T.CRYPT_URL_ARRAY = Struct('_CRYPT_URL_ARRAY', {
    cUrl: T.DWORD,
    rgwszUrl: Pointer(T.LPWSTR)
});
T.PCRYPT_URL_ARRAY = Pointer(Struct('_CRYPT_URL_ARRAY', {
    cUrl: T.DWORD,
    rgwszUrl: Pointer(T.LPWSTR)
}));
T.CRYPT_URL_INFO = Struct('_CRYPT_URL_INFO', {
    cbSize: T.DWORD,
    dwSyncDeltaTime: T.DWORD,
    cGroup: T.DWORD,
    rgcGroupEntry: Pointer(T.DWORD)
});
T.PCRYPT_URL_INFO = Pointer(Struct('_CRYPT_URL_INFO', {
    cbSize: T.DWORD,
    dwSyncDeltaTime: T.DWORD,
    cGroup: T.DWORD,
    rgcGroupEntry: Pointer(T.DWORD)
}));
T.HCRYPTASYNC = T.HANDLE;
T.PHCRYPTASYNC = Pointer(T.HANDLE);
T.PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = Pointer(Fn(null, [[T.LPSTR, 'pszParamOid'], [T.LPVOID, 'pvParam']]));
T.PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = Pointer(Fn(null, [[Pointer(null), 'pvCompletion'], [T.DWORD, 'dwCompletionCode'], [T.LPCSTR, 'pszURL'], [T.LPSTR, 'pszObjectOid'], [Pointer(null), 'pvObject']]));
T.CRYPT_ASYNC_RETRIEVAL_COMPLETION = Struct('_CRYPT_ASYNC_RETRIEVAL_COMPLETION', {
    pfnCompletion: T.PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC,
    pvCompletion: Pointer(null)
});
T.PCRYPT_ASYNC_RETRIEVAL_COMPLETION = Pointer(Struct('_CRYPT_ASYNC_RETRIEVAL_COMPLETION', {
    pfnCompletion: T.PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC,
    pvCompletion: Pointer(null)
}));
T.PFN_CANCEL_ASYNC_RETRIEVAL_FUNC = Pointer(Fn(T.BOOL, [[T.HCRYPTASYNC, 'hAsyncRetrieve']]));
T.CRYPT_BLOB_ARRAY = Struct('_CRYPT_BLOB_ARRAY', {
    cBlob: T.DWORD,
    rgBlob: T.PCRYPT_DATA_BLOB
});
T.PCRYPT_BLOB_ARRAY = Pointer(Struct('_CRYPT_BLOB_ARRAY', {
    cBlob: T.DWORD,
    rgBlob: T.PCRYPT_DATA_BLOB
}));
T.CRYPT_CREDENTIALS = Struct('_CRYPT_CREDENTIALS', {
    cbSize: T.DWORD,
    pszCredentialsOid: T.LPCSTR,
    pvCredentials: T.LPVOID
});
T.PCRYPT_CREDENTIALS = Pointer(Struct('_CRYPT_CREDENTIALS', {
    cbSize: T.DWORD,
    pszCredentialsOid: T.LPCSTR,
    pvCredentials: T.LPVOID
}));
T.CRYPT_PASSWORD_CREDENTIALSA = Struct('_CRYPT_PASSWORD_CREDENTIALSA', {
    cbSize: T.DWORD,
    pszUsername: T.LPSTR,
    pszPassword: T.LPSTR
});
T.PCRYPT_PASSWORD_CREDENTIALSA = Pointer(Struct('_CRYPT_PASSWORD_CREDENTIALSA', {
    cbSize: T.DWORD,
    pszUsername: T.LPSTR,
    pszPassword: T.LPSTR
}));
T.CRYPT_PASSWORD_CREDENTIALSW = Struct('_CRYPT_PASSWORD_CREDENTIALSW', {
    cbSize: T.DWORD,
    pszUsername: T.LPWSTR,
    pszPassword: T.LPWSTR
});
T.PCRYPT_PASSWORD_CREDENTIALSW = Pointer(Struct('_CRYPT_PASSWORD_CREDENTIALSW', {
    cbSize: T.DWORD,
    pszUsername: T.LPWSTR,
    pszPassword: T.LPWSTR
}));
T.CRYPT_RETRIEVE_AUX_INFO = Struct('_CRYPT_RETRIEVE_AUX_INFO', {
    cbSize: T.DWORD,
    pLastSyncTime: Pointer(T.FILETIME),
    dwMaxUrlRetrievalByteCount: T.DWORD
});
T.PCRYPT_RETRIEVE_AUX_INFO = Pointer(Struct('_CRYPT_RETRIEVE_AUX_INFO', {
    cbSize: T.DWORD,
    pLastSyncTime: Pointer(T.FILETIME),
    dwMaxUrlRetrievalByteCount: T.DWORD
}));
T.PFN_FREE_ENCODED_OBJECT_FUNC = Pointer(Fn(null, [[T.LPCSTR, 'pszObjectOid'], [T.PCRYPT_BLOB_ARRAY, 'pObject'], [Pointer(null), 'pvFreeContext']]));
T.PFN_CRYPT_CANCEL_RETRIEVAL = Pointer(Fn(T.BOOL, [[T.DWORD, 'dwFlags'], [Pointer(null), 'pvArg']]));
T.CERT_CRL_CONTEXT_PAIR = Struct('_CERT_CRL_CONTEXT_PAIR', {
    pCertContext: T.PCCERT_CONTEXT,
    pCrlContext: T.PCCRL_CONTEXT
});
T.PCERT_CRL_CONTEXT_PAIR = Pointer(Struct('_CERT_CRL_CONTEXT_PAIR', {
    pCertContext: T.PCCERT_CONTEXT,
    pCrlContext: T.PCCRL_CONTEXT
}));
T.PCCERT_CRL_CONTEXT_PAIR = Pointer(T.CERT_CRL_CONTEXT_PAIR);
T.CRL_FIND_ISSUED_FOR_PARA = Struct('_CRL_FIND_ISSUED_FOR_PARA', {
    pSubjectCert: T.PCCERT_CONTEXT,
    pIssuerCert: T.PCCERT_CONTEXT
});
T.PCRL_FIND_ISSUED_FOR_PARA = Pointer(Struct('_CRL_FIND_ISSUED_FOR_PARA', {
    pSubjectCert: T.PCCERT_CONTEXT,
    pIssuerCert: T.PCCERT_CONTEXT
}));
T.CTL_FIND_USAGE_PARA = Struct('_CTL_FIND_USAGE_PARA', {
    cbSize: T.DWORD,
    SubjectUsage: T.CTL_USAGE,
    ListIdentifier: T.CRYPT_DATA_BLOB,
    pSigner: T.PCERT_INFO
});
T.PCTL_FIND_USAGE_PARA = Pointer(Struct('_CTL_FIND_USAGE_PARA', {
    cbSize: T.DWORD,
    SubjectUsage: T.CTL_USAGE,
    ListIdentifier: T.CRYPT_DATA_BLOB,
    pSigner: T.PCERT_INFO
}));
T.CTL_FIND_SUBJECT_PARA = Struct('_CTL_FIND_SUBJECT_PARA', {
    cbSize: T.DWORD,
    pUsagePara: T.PCTL_FIND_USAGE_PARA,
    dwSubjectType: T.DWORD,
    pvSubject: Pointer(null)
});
T.PCTL_FIND_SUBJECT_PARA = Pointer(Struct('_CTL_FIND_SUBJECT_PARA', {
    cbSize: T.DWORD,
    pUsagePara: T.PCTL_FIND_USAGE_PARA,
    dwSubjectType: T.DWORD,
    pvSubject: Pointer(null)
}));
T.HCERTCHAINENGINE = T.HANDLE;
T.CERT_CHAIN_ENGINE_CONFIG = Struct('_CERT_CHAIN_ENGINE_CONFIG', {
    cbSize: T.DWORD,
    hRestrictedRoot: T.HCERTSTORE,
    hRestrictedTrust: T.HCERTSTORE,
    hRestrictedOther: T.HCERTSTORE,
    cAdditionalStore: T.DWORD,
    rghAdditionalStore: Pointer(T.HCERTSTORE),
    dwFlags: T.DWORD,
    dwUrlRetrievalTimeout: T.DWORD,
    MaximumCachedCertificates: T.DWORD,
    CycleDetectionModulus: T.DWORD,
    hExclusiveRoot: T.HCERTSTORE,
    hExclusiveRootTrustedPeople: T.HCERTSTORE
});
T.PCERT_CHAIN_ENGINE_CONFIG = Pointer(Struct('_CERT_CHAIN_ENGINE_CONFIG', {
    cbSize: T.DWORD,
    hRestrictedRoot: T.HCERTSTORE,
    hRestrictedTrust: T.HCERTSTORE,
    hRestrictedOther: T.HCERTSTORE,
    cAdditionalStore: T.DWORD,
    rghAdditionalStore: Pointer(T.HCERTSTORE),
    dwFlags: T.DWORD,
    dwUrlRetrievalTimeout: T.DWORD,
    MaximumCachedCertificates: T.DWORD,
    CycleDetectionModulus: T.DWORD,
    hExclusiveRoot: T.HCERTSTORE,
    hExclusiveRootTrustedPeople: T.HCERTSTORE
}));
T.PFN_CMSG_STREAM_OUTPUT = Pointer(Fn(T.BOOL, [[Pointer(null), 'pvArg'], [Pointer(T.BYTE), 'pbData'], [T.DWORD, 'cbData'], [T.BOOL, 'fFinal']]));
T.CMSG_STREAM_INFO = Struct('_CMSG_STREAM_INFO', {
    cbContent: T.DWORD,
    pfnStreamOutput: T.PFN_CMSG_STREAM_OUTPUT,
    pvArg: Pointer(null)
});
T.PCMSG_STREAM_INFO = Pointer(Struct('_CMSG_STREAM_INFO', {
    cbContent: T.DWORD,
    pfnStreamOutput: T.PFN_CMSG_STREAM_OUTPUT,
    pvArg: Pointer(null)
}));
T.CERT_ISSUER_SERIAL_NUMBER = Struct('_CERT_ISSUER_SERIAL_NUMBER', {
    Issuer: T.CERT_NAME_BLOB,
    SerialNumber: T.CRYPT_INTEGER_BLOB
});
T.PCERT_ISSUER_SERIAL_NUMBER = Pointer(Struct('_CERT_ISSUER_SERIAL_NUMBER', {
    Issuer: T.CERT_NAME_BLOB,
    SerialNumber: T.CRYPT_INTEGER_BLOB
}));
T.CERT_ID = Struct('_CERT_ID', {
    dwIdChoice: T.DWORD,
    __unnamed0: Union('', {
        IssuerSerialNumber: T.CERT_ISSUER_SERIAL_NUMBER,
        KeyId: T.CRYPT_HASH_BLOB,
        HashId: T.CRYPT_HASH_BLOB
    })
});
T.PCERT_ID = Pointer(Struct('_CERT_ID', {
    dwIdChoice: T.DWORD,
    __unnamed0: Union('', {
        IssuerSerialNumber: T.CERT_ISSUER_SERIAL_NUMBER,
        KeyId: T.CRYPT_HASH_BLOB,
        HashId: T.CRYPT_HASH_BLOB
    })
}));
T.CMSG_SIGNER_ENCODE_INFO = Struct('_CMSG_SIGNER_ENCODE_INFO', {
    cbSize: T.DWORD,
    pCertInfo: T.PCERT_INFO,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null),
    cAuthAttr: T.DWORD,
    rgAuthAttr: T.PCRYPT_ATTRIBUTE,
    cUnauthAttr: T.DWORD,
    rgUnauthAttr: T.PCRYPT_ATTRIBUTE
});
T.PCMSG_SIGNER_ENCODE_INFO = Pointer(Struct('_CMSG_SIGNER_ENCODE_INFO', {
    cbSize: T.DWORD,
    pCertInfo: T.PCERT_INFO,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null),
    cAuthAttr: T.DWORD,
    rgAuthAttr: T.PCRYPT_ATTRIBUTE,
    cUnauthAttr: T.DWORD,
    rgUnauthAttr: T.PCRYPT_ATTRIBUTE
}));
T.CMSG_SIGNED_ENCODE_INFO = Struct('_CMSG_SIGNED_ENCODE_INFO', {
    cbSize: T.DWORD,
    cSigners: T.DWORD,
    rgSigners: T.PCMSG_SIGNER_ENCODE_INFO,
    cCertEncoded: T.DWORD,
    rgCertEncoded: T.PCERT_BLOB,
    cCrlEncoded: T.DWORD,
    rgCrlEncoded: T.PCRL_BLOB
});
T.PCMSG_SIGNED_ENCODE_INFO = Pointer(Struct('_CMSG_SIGNED_ENCODE_INFO', {
    cbSize: T.DWORD,
    cSigners: T.DWORD,
    rgSigners: T.PCMSG_SIGNER_ENCODE_INFO,
    cCertEncoded: T.DWORD,
    rgCertEncoded: T.PCERT_BLOB,
    cCrlEncoded: T.DWORD,
    rgCrlEncoded: T.PCRL_BLOB
}));
T.CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = Struct('_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO', {
    cbSize: T.DWORD,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: Pointer(null),
    hCryptProv: T.HCRYPTPROV_LEGACY,
    RecipientPublicKey: T.CRYPT_BIT_BLOB,
    RecipientId: T.CERT_ID
});
T.PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = Pointer(Struct('_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO', {
    cbSize: T.DWORD,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: Pointer(null),
    hCryptProv: T.HCRYPTPROV_LEGACY,
    RecipientPublicKey: T.CRYPT_BIT_BLOB,
    RecipientId: T.CERT_ID
}));
T.CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = Struct('_CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO', {
    cbSize: T.DWORD,
    RecipientPublicKey: T.CRYPT_BIT_BLOB,
    RecipientId: T.CERT_ID,
    Date: T.FILETIME,
    pOtherAttr: T.PCRYPT_ATTRIBUTE_TYPE_VALUE
});
T.PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = Pointer(Struct('_CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO', {
    cbSize: T.DWORD,
    RecipientPublicKey: T.CRYPT_BIT_BLOB,
    RecipientId: T.CERT_ID,
    Date: T.FILETIME,
    pOtherAttr: T.PCRYPT_ATTRIBUTE_TYPE_VALUE
}));
T.CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = Struct('_CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO', {
    cbSize: T.DWORD,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: Pointer(null),
    KeyWrapAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyWrapAuxInfo: Pointer(null),
    hCryptProv: T.HCRYPTPROV_LEGACY,
    dwKeySpec: T.DWORD,
    dwKeyChoice: T.DWORD,
    __unnamed0: Union('', {
        pEphemeralAlgorithm: T.PCRYPT_ALGORITHM_IDENTIFIER,
        pSenderId: T.PCERT_ID
    }),
    UserKeyingMaterial: T.CRYPT_DATA_BLOB,
    cRecipientEncryptedKeys: T.DWORD,
    rgpRecipientEncryptedKeys: Pointer(T.PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO)
});
T.PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = Pointer(Struct('_CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO', {
    cbSize: T.DWORD,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: Pointer(null),
    KeyWrapAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyWrapAuxInfo: Pointer(null),
    hCryptProv: T.HCRYPTPROV_LEGACY,
    dwKeySpec: T.DWORD,
    dwKeyChoice: T.DWORD,
    __unnamed0: Union('', {
        pEphemeralAlgorithm: T.PCRYPT_ALGORITHM_IDENTIFIER,
        pSenderId: T.PCERT_ID
    }),
    UserKeyingMaterial: T.CRYPT_DATA_BLOB,
    cRecipientEncryptedKeys: T.DWORD,
    rgpRecipientEncryptedKeys: Pointer(T.PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO)
}));
T.CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = Struct('_CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO', {
    cbSize: T.DWORD,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: Pointer(null),
    hCryptProv: T.HCRYPTPROV,
    dwKeyChoice: T.DWORD,
    __unnamed0: Union('', {
        hKeyEncryptionKey: T.HCRYPTKEY,
        pvKeyEncryptionKey: Pointer(null)
    }),
    KeyId: T.CRYPT_DATA_BLOB,
    Date: T.FILETIME,
    pOtherAttr: T.PCRYPT_ATTRIBUTE_TYPE_VALUE
});
T.PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = Pointer(Struct('_CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO', {
    cbSize: T.DWORD,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: Pointer(null),
    hCryptProv: T.HCRYPTPROV,
    dwKeyChoice: T.DWORD,
    __unnamed0: Union('', {
        hKeyEncryptionKey: T.HCRYPTKEY,
        pvKeyEncryptionKey: Pointer(null)
    }),
    KeyId: T.CRYPT_DATA_BLOB,
    Date: T.FILETIME,
    pOtherAttr: T.PCRYPT_ATTRIBUTE_TYPE_VALUE
}));
T.CMSG_RECIPIENT_ENCODE_INFO = Struct('_CMSG_RECIPIENT_ENCODE_INFO', {
    dwRecipientChoice: T.DWORD,
    __unnamed0: Union('', {
        pKeyTrans: T.PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO,
        pKeyAgree: T.PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO,
        pMailList: T.PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
    })
});
T.PCMSG_RECIPIENT_ENCODE_INFO = Pointer(Struct('_CMSG_RECIPIENT_ENCODE_INFO', {
    dwRecipientChoice: T.DWORD,
    __unnamed0: Union('', {
        pKeyTrans: T.PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO,
        pKeyAgree: T.PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO,
        pMailList: T.PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
    })
}));
T.CMSG_ENVELOPED_ENCODE_INFO = Struct('_CMSG_ENVELOPED_ENCODE_INFO', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    ContentEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: Pointer(null),
    cRecipients: T.DWORD,
    rgpRecipientCert: Pointer(T.PCERT_INFO)
});
T.PCMSG_ENVELOPED_ENCODE_INFO = Pointer(Struct('_CMSG_ENVELOPED_ENCODE_INFO', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    ContentEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: Pointer(null),
    cRecipients: T.DWORD,
    rgpRecipientCert: Pointer(T.PCERT_INFO)
}));
T.CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = Struct('_CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO', {
    cbSize: T.DWORD,
    SignedInfo: T.CMSG_SIGNED_ENCODE_INFO,
    EnvelopedInfo: T.CMSG_ENVELOPED_ENCODE_INFO
});
T.PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = Pointer(Struct('_CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO', {
    cbSize: T.DWORD,
    SignedInfo: T.CMSG_SIGNED_ENCODE_INFO,
    EnvelopedInfo: T.CMSG_ENVELOPED_ENCODE_INFO
}));
T.CMSG_HASHED_ENCODE_INFO = Struct('_CMSG_HASHED_ENCODE_INFO', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null)
});
T.PCMSG_HASHED_ENCODE_INFO = Pointer(Struct('_CMSG_HASHED_ENCODE_INFO', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV_LEGACY,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: Pointer(null)
}));
T.CMSG_ENCRYPTED_ENCODE_INFO = Struct('_CMSG_ENCRYPTED_ENCODE_INFO', {
    cbSize: T.DWORD,
    ContentEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: Pointer(null)
});
T.PCMSG_ENCRYPTED_ENCODE_INFO = Pointer(Struct('_CMSG_ENCRYPTED_ENCODE_INFO', {
    cbSize: T.DWORD,
    ContentEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: Pointer(null)
}));
T.CMSG_CTRL_DECRYPT_PARA = Struct('_CMSG_CTRL_DECRYPT_PARA', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD,
    dwRecipientIndex: T.DWORD
});
T.PCMSG_CTRL_DECRYPT_PARA = Pointer(Struct('_CMSG_CTRL_DECRYPT_PARA', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD,
    dwRecipientIndex: T.DWORD
}));
T.CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = Struct('_CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA', {
    cbSize: T.DWORD,
    dwSignerIndex: T.DWORD,
    blob: T.CRYPT_DATA_BLOB
});
T.PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = Pointer(Struct('_CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA', {
    cbSize: T.DWORD,
    dwSignerIndex: T.DWORD,
    blob: T.CRYPT_DATA_BLOB
}));
T.CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = Struct('_CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA', {
    cbSize: T.DWORD,
    dwSignerIndex: T.DWORD,
    dwUnauthAttrIndex: T.DWORD
});
T.PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = Pointer(Struct('_CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA', {
    cbSize: T.DWORD,
    dwSignerIndex: T.DWORD,
    dwUnauthAttrIndex: T.DWORD
}));
T.CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = Struct('_CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwSignerIndex: T.DWORD,
    dwSignerType: T.DWORD,
    pvSigner: Pointer(null)
});
T.PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = Pointer(Struct('_CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwSignerIndex: T.DWORD,
    dwSignerType: T.DWORD,
    pvSigner: Pointer(null)
}));
T.CMSG_CMS_SIGNER_INFO = Struct('_CMSG_CMS_SIGNER_INFO', {
    dwVersion: T.DWORD,
    SignerId: T.CERT_ID,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    HashEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedHash: T.CRYPT_DATA_BLOB,
    AuthAttrs: T.CRYPT_ATTRIBUTES,
    UnauthAttrs: T.CRYPT_ATTRIBUTES
});
T.PCMSG_CMS_SIGNER_INFO = Pointer(Struct('_CMSG_CMS_SIGNER_INFO', {
    dwVersion: T.DWORD,
    SignerId: T.CERT_ID,
    HashAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    HashEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedHash: T.CRYPT_DATA_BLOB,
    AuthAttrs: T.CRYPT_ATTRIBUTES,
    UnauthAttrs: T.CRYPT_ATTRIBUTES
}));
T.CMSG_ATTR = T.CRYPT_ATTRIBUTES;
T.PCMSG_ATTR = Pointer(T.CRYPT_ATTRIBUTES);
T.CMSG_KEY_TRANS_RECIPIENT_INFO = Struct('_CMSG_KEY_TRANS_RECIPIENT_INFO', {
    dwVersion: T.DWORD,
    RecipientId: T.CERT_ID,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: T.CRYPT_DATA_BLOB
});
T.PCMSG_KEY_TRANS_RECIPIENT_INFO = Pointer(Struct('_CMSG_KEY_TRANS_RECIPIENT_INFO', {
    dwVersion: T.DWORD,
    RecipientId: T.CERT_ID,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: T.CRYPT_DATA_BLOB
}));
T.CMSG_RECIPIENT_ENCRYPTED_KEY_INFO = Struct('_CMSG_RECIPIENT_ENCRYPTED_KEY_INFO', {
    RecipientId: T.CERT_ID,
    EncryptedKey: T.CRYPT_DATA_BLOB,
    pOtherAttr: T.PCRYPT_ATTRIBUTE_TYPE_VALUE
});
T.PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO = Pointer(Struct('_CMSG_RECIPIENT_ENCRYPTED_KEY_INFO', {
    RecipientId: T.CERT_ID,
    EncryptedKey: T.CRYPT_DATA_BLOB,
    pOtherAttr: T.PCRYPT_ATTRIBUTE_TYPE_VALUE
}));
T.CMSG_KEY_AGREE_RECIPIENT_INFO = Struct('_CMSG_KEY_AGREE_RECIPIENT_INFO', {
    dwVersion: T.DWORD,
    dwOriginatorChoice: T.DWORD,
    __unnamed0: Union('', {
        OriginatorCertId: T.CERT_ID,
        OriginatorPublicKeyInfo: T.CERT_PUBLIC_KEY_INFO
    }),
    UserKeyingMaterial: T.CRYPT_ALGORITHM_IDENTIFIER,
    cRecipientEncryptedKeys: T.DWORD,
    rgpRecipientEncryptedKeys: Pointer(T.PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO)
});
T.PCMSG_KEY_AGREE_RECIPIENT_INFO = Pointer(Struct('_CMSG_KEY_AGREE_RECIPIENT_INFO', {
    dwVersion: T.DWORD,
    dwOriginatorChoice: T.DWORD,
    __unnamed0: Union('', {
        OriginatorCertId: T.CERT_ID,
        OriginatorPublicKeyInfo: T.CERT_PUBLIC_KEY_INFO
    }),
    UserKeyingMaterial: T.CRYPT_ALGORITHM_IDENTIFIER,
    cRecipientEncryptedKeys: T.DWORD,
    rgpRecipientEncryptedKeys: Pointer(T.PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO)
}));
T.CMSG_MAIL_LIST_RECIPIENT_INFO = Struct('_CMSG_MAIL_LIST_RECIPIENT_INFO', {
    dwVersion: T.DWORD,
    KeyId: T.CRYPT_DATA_BLOB,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: T.CRYPT_DATA_BLOB,
    Date: T.FILETIME,
    pOtherAttr: T.PCRYPT_ATTRIBUTE_TYPE_VALUE
});
T.PCMSG_MAIL_LIST_RECIPIENT_INFO = Pointer(Struct('_CMSG_MAIL_LIST_RECIPIENT_INFO', {
    dwVersion: T.DWORD,
    KeyId: T.CRYPT_DATA_BLOB,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: T.CRYPT_DATA_BLOB,
    Date: T.FILETIME,
    pOtherAttr: T.PCRYPT_ATTRIBUTE_TYPE_VALUE
}));
T.CMSG_CMS_RECIPIENT_INFO = Struct('_CMSG_CMS_RECIPIENT_INFO', {
    dwRecipientChoice: T.DWORD,
    __unnamed0: Union('', {
        pKeyTrans: T.PCMSG_KEY_TRANS_RECIPIENT_INFO,
        pKeyAgree: T.PCMSG_KEY_AGREE_RECIPIENT_INFO,
        pMailList: T.PCMSG_MAIL_LIST_RECIPIENT_INFO
    })
});
T.PCMSG_CMS_RECIPIENT_INFO = Pointer(Struct('_CMSG_CMS_RECIPIENT_INFO', {
    dwRecipientChoice: T.DWORD,
    __unnamed0: Union('', {
        pKeyTrans: T.PCMSG_KEY_TRANS_RECIPIENT_INFO,
        pKeyAgree: T.PCMSG_KEY_AGREE_RECIPIENT_INFO,
        pMailList: T.PCMSG_MAIL_LIST_RECIPIENT_INFO
    })
}));
T.PFN_CMSG_ALLOC = Pointer(Fn(Pointer(null), [[T.size_t, 'cb']]));
T.PFN_CMSG_FREE = Pointer(Fn(null, [[Pointer(null), 'pv']]));
T.CMSG_CONTENT_ENCRYPT_INFO = Struct('_CMSG_CONTENT_ENCRYPT_INFO', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    ContentEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: Pointer(null),
    cRecipients: T.DWORD,
    rgCmsRecipients: T.PCMSG_RECIPIENT_ENCODE_INFO,
    pfnAlloc: T.PFN_CMSG_ALLOC,
    pfnFree: T.PFN_CMSG_FREE,
    dwEncryptFlags: T.DWORD,
    hContentEncryptKey: T.HCRYPTKEY,
    dwFlags: T.DWORD
});
T.PCMSG_CONTENT_ENCRYPT_INFO = Pointer(Struct('_CMSG_CONTENT_ENCRYPT_INFO', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    ContentEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: Pointer(null),
    cRecipients: T.DWORD,
    rgCmsRecipients: T.PCMSG_RECIPIENT_ENCODE_INFO,
    pfnAlloc: T.PFN_CMSG_ALLOC,
    pfnFree: T.PFN_CMSG_FREE,
    dwEncryptFlags: T.DWORD,
    hContentEncryptKey: T.HCRYPTKEY,
    dwFlags: T.DWORD
}));
T.CMSG_KEY_TRANS_ENCRYPT_INFO = Struct('_CMSG_KEY_TRANS_ENCRYPT_INFO', {
    cbSize: T.DWORD,
    dwRecipientIndex: T.DWORD,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: T.CRYPT_DATA_BLOB,
    dwFlags: T.DWORD
});
T.PCMSG_KEY_TRANS_ENCRYPT_INFO = Pointer(Struct('_CMSG_KEY_TRANS_ENCRYPT_INFO', {
    cbSize: T.DWORD,
    dwRecipientIndex: T.DWORD,
    KeyEncryptionAlgorithm: T.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: T.CRYPT_DATA_BLOB,
    dwFlags: T.DWORD
}));
T.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA = Struct('_CMSG_CTRL_KEY_TRANS_DECRYPT_PARA', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD,
    pKeyTrans: T.PCMSG_KEY_TRANS_RECIPIENT_INFO,
    dwRecipientIndex: T.DWORD
});
T.PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA = Pointer(Struct('_CMSG_CTRL_KEY_TRANS_DECRYPT_PARA', {
    cbSize: T.DWORD,
    hCryptProv: T.HCRYPTPROV,
    dwKeySpec: T.DWORD,
    pKeyTrans: T.PCMSG_KEY_TRANS_RECIPIENT_INFO,
    dwRecipientIndex: T.DWORD
}));
T.PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY = Pointer(Fn(T.BOOL, [[T.PCMSG_CONTENT_ENCRYPT_INFO, 'pContentEncryptInfo'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']]));
T.PFN_CMSG_EXPORT_KEY_TRANS = Pointer(Fn(T.BOOL, [[T.PCMSG_CONTENT_ENCRYPT_INFO, 'pContentEncryptInfo'], [T.PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO, 'pKeyTransEncodeInfo'], [T.PCMSG_KEY_TRANS_ENCRYPT_INFO, 'pKeyTransEncryptInfo'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']]));
T.PFN_CMSG_IMPORT_KEY_TRANS = Pointer(Fn(T.BOOL, [[T.PCRYPT_ALGORITHM_IDENTIFIER, 'pContentEncryptionAlgorithm'], [T.PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA, 'pKeyTransDecryptPara'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved'], [Pointer(T.HCRYPTKEY), 'phContentEncryptKey']]));
T.PRINTER_DEFAULTSA = Struct('_PRINTER_DEFAULTSA', {
    pDatatype: T.LPSTR,
    pDevMode: T.LPDEVMODEA,
    DesiredAccess: T.ACCESS_MASK
});
T.LPPRINTER_DEFAULTSA = Pointer(Struct('_PRINTER_DEFAULTSA', {
    pDatatype: T.LPSTR,
    pDevMode: T.LPDEVMODEA,
    DesiredAccess: T.ACCESS_MASK
}));
T.PRINTER_DEFAULTSW = Struct('_PRINTER_DEFAULTSW', {
    pDatatype: T.LPWSTR,
    pDevMode: T.LPDEVMODEW,
    DesiredAccess: T.ACCESS_MASK
});
T.LPPRINTER_DEFAULTSW = Pointer(Struct('_PRINTER_DEFAULTSW', {
    pDatatype: T.LPWSTR,
    pDevMode: T.LPDEVMODEW,
    DesiredAccess: T.ACCESS_MASK
}));
T.PRINTER_DEFAULTS = T.PRINTER_DEFAULTSA;
T.LPPRINTER_DEFAULTS = T.LPPRINTER_DEFAULTSA;
T.DRIVER_INFO_1A = Struct('_DRIVER_INFO_1A', {
    pName: T.LPSTR
});
T.PDRIVER_INFO_1A = Pointer(Struct('_DRIVER_INFO_1A', {
    pName: T.LPSTR
}));
T.LPDRIVER_INFO_1A = Pointer(Struct('_DRIVER_INFO_1A', {
    pName: T.LPSTR
}));
T.DRIVER_INFO_1W = Struct('_DRIVER_INFO_1W', {
    pName: T.LPWSTR
});
T.PDRIVER_INFO_1W = Pointer(Struct('_DRIVER_INFO_1W', {
    pName: T.LPWSTR
}));
T.LPDRIVER_INFO_1W = Pointer(Struct('_DRIVER_INFO_1W', {
    pName: T.LPWSTR
}));
T.DRIVER_INFO_1 = T.DRIVER_INFO_1A;
T.PDRIVER_INFO_1 = T.PDRIVER_INFO_1A;
T.LPDRIVER_INFO_1 = T.LPDRIVER_INFO_1A;
T.DRIVER_INFO_2A = Struct('_DRIVER_INFO_2A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR
});
T.PDRIVER_INFO_2A = Pointer(Struct('_DRIVER_INFO_2A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR
}));
T.LPDRIVER_INFO_2A = Pointer(Struct('_DRIVER_INFO_2A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR
}));
T.DRIVER_INFO_2W = Struct('_DRIVER_INFO_2W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR
});
T.PDRIVER_INFO_2W = Pointer(Struct('_DRIVER_INFO_2W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR
}));
T.LPDRIVER_INFO_2W = Pointer(Struct('_DRIVER_INFO_2W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR
}));
T.DRIVER_INFO_2 = T.DRIVER_INFO_2A;
T.PDRIVER_INFO_2 = T.PDRIVER_INFO_2A;
T.LPDRIVER_INFO_2 = T.LPDRIVER_INFO_2A;
T.DRIVER_INFO_3A = Struct('_DRIVER_INFO_3A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR
});
T.PDRIVER_INFO_3A = Pointer(Struct('_DRIVER_INFO_3A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR
}));
T.LPDRIVER_INFO_3A = Pointer(Struct('_DRIVER_INFO_3A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR
}));
T.DRIVER_INFO_3W = Struct('_DRIVER_INFO_3W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR
});
T.PDRIVER_INFO_3W = Pointer(Struct('_DRIVER_INFO_3W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR
}));
T.LPDRIVER_INFO_3W = Pointer(Struct('_DRIVER_INFO_3W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR
}));
T.DRIVER_INFO_3 = T.DRIVER_INFO_3A;
T.PDRIVER_INFO_3 = T.PDRIVER_INFO_3A;
T.LPDRIVER_INFO_3 = T.LPDRIVER_INFO_3A;
T.DRIVER_INFO_4A = Struct('_DRIVER_INFO_4A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR
});
T.PDRIVER_INFO_4A = Pointer(Struct('_DRIVER_INFO_4A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR
}));
T.LPDRIVER_INFO_4A = Pointer(Struct('_DRIVER_INFO_4A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR
}));
T.DRIVER_INFO_4W = Struct('_DRIVER_INFO_4W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR
});
T.PDRIVER_INFO_4W = Pointer(Struct('_DRIVER_INFO_4W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR
}));
T.LPDRIVER_INFO_4W = Pointer(Struct('_DRIVER_INFO_4W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR
}));
T.DRIVER_INFO_4 = T.DRIVER_INFO_4A;
T.PDRIVER_INFO_4 = T.PDRIVER_INFO_4A;
T.LPDRIVER_INFO_4 = T.LPDRIVER_INFO_4A;
T.DRIVER_INFO_5A = Struct('_DRIVER_INFO_5A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    dwDriverAttributes: T.DWORD,
    dwConfigVersion: T.DWORD,
    dwDriverVersion: T.DWORD
});
T.PDRIVER_INFO_5A = Pointer(Struct('_DRIVER_INFO_5A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    dwDriverAttributes: T.DWORD,
    dwConfigVersion: T.DWORD,
    dwDriverVersion: T.DWORD
}));
T.LPDRIVER_INFO_5A = Pointer(Struct('_DRIVER_INFO_5A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    dwDriverAttributes: T.DWORD,
    dwConfigVersion: T.DWORD,
    dwDriverVersion: T.DWORD
}));
T.DRIVER_INFO_5W = Struct('_DRIVER_INFO_5W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    dwDriverAttributes: T.DWORD,
    dwConfigVersion: T.DWORD,
    dwDriverVersion: T.DWORD
});
T.PDRIVER_INFO_5W = Pointer(Struct('_DRIVER_INFO_5W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    dwDriverAttributes: T.DWORD,
    dwConfigVersion: T.DWORD,
    dwDriverVersion: T.DWORD
}));
T.LPDRIVER_INFO_5W = Pointer(Struct('_DRIVER_INFO_5W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    dwDriverAttributes: T.DWORD,
    dwConfigVersion: T.DWORD,
    dwDriverVersion: T.DWORD
}));
T.DRIVER_INFO_5 = T.DRIVER_INFO_5A;
T.PDRIVER_INFO_5 = T.PDRIVER_INFO_5A;
T.LPDRIVER_INFO_5 = T.LPDRIVER_INFO_5A;
T.DRIVER_INFO_6A = Struct('_DRIVER_INFO_6A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPSTR,
    pszOEMUrl: T.LPSTR,
    pszHardwareID: T.LPSTR,
    pszProvider: T.LPSTR
});
T.PDRIVER_INFO_6A = Pointer(Struct('_DRIVER_INFO_6A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPSTR,
    pszOEMUrl: T.LPSTR,
    pszHardwareID: T.LPSTR,
    pszProvider: T.LPSTR
}));
T.LPDRIVER_INFO_6A = Pointer(Struct('_DRIVER_INFO_6A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPSTR,
    pszOEMUrl: T.LPSTR,
    pszHardwareID: T.LPSTR,
    pszProvider: T.LPSTR
}));
T.DRIVER_INFO_6W = Struct('_DRIVER_INFO_6W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPWSTR,
    pszOEMUrl: T.LPWSTR,
    pszHardwareID: T.LPWSTR,
    pszProvider: T.LPWSTR
});
T.PDRIVER_INFO_6W = Pointer(Struct('_DRIVER_INFO_6W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPWSTR,
    pszOEMUrl: T.LPWSTR,
    pszHardwareID: T.LPWSTR,
    pszProvider: T.LPWSTR
}));
T.LPDRIVER_INFO_6W = Pointer(Struct('_DRIVER_INFO_6W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPWSTR,
    pszOEMUrl: T.LPWSTR,
    pszHardwareID: T.LPWSTR,
    pszProvider: T.LPWSTR
}));
T.DRIVER_INFO_6 = T.DRIVER_INFO_6A;
T.PDRIVER_INFO_6 = T.PDRIVER_INFO_6A;
T.LPDRIVER_INFO_6 = T.LPDRIVER_INFO_6A;
T.DRIVER_INFO_8A = Struct('_DRIVER_INFO_8A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPSTR,
    pszOEMUrl: T.LPSTR,
    pszHardwareID: T.LPSTR,
    pszProvider: T.LPSTR,
    pszPrintProcessor: T.LPSTR,
    pszVendorSetup: T.LPSTR,
    pszzColorProfiles: T.LPSTR,
    pszInfPath: T.LPSTR,
    dwPrinterDriverAttributes: T.DWORD,
    pszzCoreDriverDependencies: T.LPSTR,
    ftMinInboxDriverVerDate: T.FILETIME,
    dwlMinInboxDriverVerVersion: T.DWORDLONG
});
T.PDRIVER_INFO_8A = Pointer(Struct('_DRIVER_INFO_8A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPSTR,
    pszOEMUrl: T.LPSTR,
    pszHardwareID: T.LPSTR,
    pszProvider: T.LPSTR,
    pszPrintProcessor: T.LPSTR,
    pszVendorSetup: T.LPSTR,
    pszzColorProfiles: T.LPSTR,
    pszInfPath: T.LPSTR,
    dwPrinterDriverAttributes: T.DWORD,
    pszzCoreDriverDependencies: T.LPSTR,
    ftMinInboxDriverVerDate: T.FILETIME,
    dwlMinInboxDriverVerVersion: T.DWORDLONG
}));
T.LPDRIVER_INFO_8A = Pointer(Struct('_DRIVER_INFO_8A', {
    cVersion: T.DWORD,
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDriverPath: T.LPSTR,
    pDataFile: T.LPSTR,
    pConfigFile: T.LPSTR,
    pHelpFile: T.LPSTR,
    pDependentFiles: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDefaultDataType: T.LPSTR,
    pszzPreviousNames: T.LPSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPSTR,
    pszOEMUrl: T.LPSTR,
    pszHardwareID: T.LPSTR,
    pszProvider: T.LPSTR,
    pszPrintProcessor: T.LPSTR,
    pszVendorSetup: T.LPSTR,
    pszzColorProfiles: T.LPSTR,
    pszInfPath: T.LPSTR,
    dwPrinterDriverAttributes: T.DWORD,
    pszzCoreDriverDependencies: T.LPSTR,
    ftMinInboxDriverVerDate: T.FILETIME,
    dwlMinInboxDriverVerVersion: T.DWORDLONG
}));
T.DRIVER_INFO_8W = Struct('_DRIVER_INFO_8W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPWSTR,
    pszOEMUrl: T.LPWSTR,
    pszHardwareID: T.LPWSTR,
    pszProvider: T.LPWSTR,
    pszPrintProcessor: T.LPWSTR,
    pszVendorSetup: T.LPWSTR,
    pszzColorProfiles: T.LPWSTR,
    pszInfPath: T.LPWSTR,
    dwPrinterDriverAttributes: T.DWORD,
    pszzCoreDriverDependencies: T.LPWSTR,
    ftMinInboxDriverVerDate: T.FILETIME,
    dwlMinInboxDriverVerVersion: T.DWORDLONG
});
T.PDRIVER_INFO_8W = Pointer(Struct('_DRIVER_INFO_8W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPWSTR,
    pszOEMUrl: T.LPWSTR,
    pszHardwareID: T.LPWSTR,
    pszProvider: T.LPWSTR,
    pszPrintProcessor: T.LPWSTR,
    pszVendorSetup: T.LPWSTR,
    pszzColorProfiles: T.LPWSTR,
    pszInfPath: T.LPWSTR,
    dwPrinterDriverAttributes: T.DWORD,
    pszzCoreDriverDependencies: T.LPWSTR,
    ftMinInboxDriverVerDate: T.FILETIME,
    dwlMinInboxDriverVerVersion: T.DWORDLONG
}));
T.LPDRIVER_INFO_8W = Pointer(Struct('_DRIVER_INFO_8W', {
    cVersion: T.DWORD,
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDriverPath: T.LPWSTR,
    pDataFile: T.LPWSTR,
    pConfigFile: T.LPWSTR,
    pHelpFile: T.LPWSTR,
    pDependentFiles: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDefaultDataType: T.LPWSTR,
    pszzPreviousNames: T.LPWSTR,
    ftDriverDate: T.FILETIME,
    dwlDriverVersion: T.DWORDLONG,
    pszMfgName: T.LPWSTR,
    pszOEMUrl: T.LPWSTR,
    pszHardwareID: T.LPWSTR,
    pszProvider: T.LPWSTR,
    pszPrintProcessor: T.LPWSTR,
    pszVendorSetup: T.LPWSTR,
    pszzColorProfiles: T.LPWSTR,
    pszInfPath: T.LPWSTR,
    dwPrinterDriverAttributes: T.DWORD,
    pszzCoreDriverDependencies: T.LPWSTR,
    ftMinInboxDriverVerDate: T.FILETIME,
    dwlMinInboxDriverVerVersion: T.DWORDLONG
}));
T.DRIVER_INFO_8 = T.DRIVER_INFO_8A;
T.PDRIVER_INFO_8 = T.PDRIVER_INFO_8A;
T.LPDRIVER_INFO_8 = T.LPDRIVER_INFO_8A;
T.PRINTER_INFO_1A = Struct('_PRINTER_INFO_1A', {
    Flags: T.DWORD,
    pDescription: T.LPSTR,
    pName: T.LPSTR,
    pComment: T.LPSTR
});
T.PPRINTER_INFO_1A = Pointer(Struct('_PRINTER_INFO_1A', {
    Flags: T.DWORD,
    pDescription: T.LPSTR,
    pName: T.LPSTR,
    pComment: T.LPSTR
}));
T.LPPRINTER_INFO_1A = Pointer(Struct('_PRINTER_INFO_1A', {
    Flags: T.DWORD,
    pDescription: T.LPSTR,
    pName: T.LPSTR,
    pComment: T.LPSTR
}));
T.PRINTER_INFO_1W = Struct('_PRINTER_INFO_1W', {
    Flags: T.DWORD,
    pDescription: T.LPWSTR,
    pName: T.LPWSTR,
    pComment: T.LPWSTR
});
T.PPRINTER_INFO_1W = Pointer(Struct('_PRINTER_INFO_1W', {
    Flags: T.DWORD,
    pDescription: T.LPWSTR,
    pName: T.LPWSTR,
    pComment: T.LPWSTR
}));
T.LPPRINTER_INFO_1W = Pointer(Struct('_PRINTER_INFO_1W', {
    Flags: T.DWORD,
    pDescription: T.LPWSTR,
    pName: T.LPWSTR,
    pComment: T.LPWSTR
}));
T.PRINTER_INFO_1 = T.PRINTER_INFO_1A;
T.PPRINTER_INFO_1 = T.PPRINTER_INFO_1A;
T.LPPRINTER_INFO_1 = T.LPPRINTER_INFO_1A;
T.PRINTER_INFO_2A = Struct('_PRINTER_INFO_2A', {
    pServerName: T.LPSTR,
    pPrinterName: T.LPSTR,
    pShareName: T.LPSTR,
    pPortName: T.LPSTR,
    pDriverName: T.LPSTR,
    pComment: T.LPSTR,
    pLocation: T.LPSTR,
    pDevMode: T.LPDEVMODEA,
    pSepFile: T.LPSTR,
    pPrintProcessor: T.LPSTR,
    pDatatype: T.LPSTR,
    pParameters: T.LPSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Attributes: T.DWORD,
    Priority: T.DWORD,
    DefaultPriority: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    Status: T.DWORD,
    cJobs: T.DWORD,
    AveragePPM: T.DWORD
});
T.PPRINTER_INFO_2A = Pointer(Struct('_PRINTER_INFO_2A', {
    pServerName: T.LPSTR,
    pPrinterName: T.LPSTR,
    pShareName: T.LPSTR,
    pPortName: T.LPSTR,
    pDriverName: T.LPSTR,
    pComment: T.LPSTR,
    pLocation: T.LPSTR,
    pDevMode: T.LPDEVMODEA,
    pSepFile: T.LPSTR,
    pPrintProcessor: T.LPSTR,
    pDatatype: T.LPSTR,
    pParameters: T.LPSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Attributes: T.DWORD,
    Priority: T.DWORD,
    DefaultPriority: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    Status: T.DWORD,
    cJobs: T.DWORD,
    AveragePPM: T.DWORD
}));
T.LPPRINTER_INFO_2A = Pointer(Struct('_PRINTER_INFO_2A', {
    pServerName: T.LPSTR,
    pPrinterName: T.LPSTR,
    pShareName: T.LPSTR,
    pPortName: T.LPSTR,
    pDriverName: T.LPSTR,
    pComment: T.LPSTR,
    pLocation: T.LPSTR,
    pDevMode: T.LPDEVMODEA,
    pSepFile: T.LPSTR,
    pPrintProcessor: T.LPSTR,
    pDatatype: T.LPSTR,
    pParameters: T.LPSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Attributes: T.DWORD,
    Priority: T.DWORD,
    DefaultPriority: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    Status: T.DWORD,
    cJobs: T.DWORD,
    AveragePPM: T.DWORD
}));
T.PRINTER_INFO_2W = Struct('_PRINTER_INFO_2W', {
    pServerName: T.LPWSTR,
    pPrinterName: T.LPWSTR,
    pShareName: T.LPWSTR,
    pPortName: T.LPWSTR,
    pDriverName: T.LPWSTR,
    pComment: T.LPWSTR,
    pLocation: T.LPWSTR,
    pDevMode: T.LPDEVMODEW,
    pSepFile: T.LPWSTR,
    pPrintProcessor: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pParameters: T.LPWSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Attributes: T.DWORD,
    Priority: T.DWORD,
    DefaultPriority: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    Status: T.DWORD,
    cJobs: T.DWORD,
    AveragePPM: T.DWORD
});
T.PPRINTER_INFO_2W = Pointer(Struct('_PRINTER_INFO_2W', {
    pServerName: T.LPWSTR,
    pPrinterName: T.LPWSTR,
    pShareName: T.LPWSTR,
    pPortName: T.LPWSTR,
    pDriverName: T.LPWSTR,
    pComment: T.LPWSTR,
    pLocation: T.LPWSTR,
    pDevMode: T.LPDEVMODEW,
    pSepFile: T.LPWSTR,
    pPrintProcessor: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pParameters: T.LPWSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Attributes: T.DWORD,
    Priority: T.DWORD,
    DefaultPriority: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    Status: T.DWORD,
    cJobs: T.DWORD,
    AveragePPM: T.DWORD
}));
T.LPPRINTER_INFO_2W = Pointer(Struct('_PRINTER_INFO_2W', {
    pServerName: T.LPWSTR,
    pPrinterName: T.LPWSTR,
    pShareName: T.LPWSTR,
    pPortName: T.LPWSTR,
    pDriverName: T.LPWSTR,
    pComment: T.LPWSTR,
    pLocation: T.LPWSTR,
    pDevMode: T.LPDEVMODEW,
    pSepFile: T.LPWSTR,
    pPrintProcessor: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pParameters: T.LPWSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Attributes: T.DWORD,
    Priority: T.DWORD,
    DefaultPriority: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    Status: T.DWORD,
    cJobs: T.DWORD,
    AveragePPM: T.DWORD
}));
T.PRINTER_INFO_2 = T.PRINTER_INFO_2A;
T.PPRINTER_INFO_2 = T.PPRINTER_INFO_2A;
T.LPPRINTER_INFO_2 = T.LPPRINTER_INFO_2A;
T.PRINTER_INFO_3 = Struct('_PRINTER_INFO_3', {
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR
});
T.PPRINTER_INFO_3 = Pointer(Struct('_PRINTER_INFO_3', {
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR
}));
T.LPPRINTER_INFO_3 = Pointer(Struct('_PRINTER_INFO_3', {
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR
}));
T.PRINTER_INFO_4A = Struct('_PRINTER_INFO_4A', {
    pPrinterName: T.LPSTR,
    pServerName: T.LPSTR,
    Attributes: T.DWORD
});
T.PPRINTER_INFO_4A = Pointer(Struct('_PRINTER_INFO_4A', {
    pPrinterName: T.LPSTR,
    pServerName: T.LPSTR,
    Attributes: T.DWORD
}));
T.LPPRINTER_INFO_4A = Pointer(Struct('_PRINTER_INFO_4A', {
    pPrinterName: T.LPSTR,
    pServerName: T.LPSTR,
    Attributes: T.DWORD
}));
T.PRINTER_INFO_4W = Struct('_PRINTER_INFO_4W', {
    pPrinterName: T.LPWSTR,
    pServerName: T.LPWSTR,
    Attributes: T.DWORD
});
T.PPRINTER_INFO_4W = Pointer(Struct('_PRINTER_INFO_4W', {
    pPrinterName: T.LPWSTR,
    pServerName: T.LPWSTR,
    Attributes: T.DWORD
}));
T.LPPRINTER_INFO_4W = Pointer(Struct('_PRINTER_INFO_4W', {
    pPrinterName: T.LPWSTR,
    pServerName: T.LPWSTR,
    Attributes: T.DWORD
}));
T.PRINTER_INFO_4 = T.PRINTER_INFO_4A;
T.PPRINTER_INFO_4 = T.PPRINTER_INFO_4A;
T.LPPRINTER_INFO_4 = T.LPPRINTER_INFO_4A;
T.PRINTER_INFO_5A = Struct('_PRINTER_INFO_5A', {
    pPrinterName: T.LPSTR,
    pPortName: T.LPSTR,
    Attributes: T.DWORD,
    DeviceNotSelectedTimeout: T.DWORD,
    TransmissionRetryTimeout: T.DWORD
});
T.PPRINTER_INFO_5A = Pointer(Struct('_PRINTER_INFO_5A', {
    pPrinterName: T.LPSTR,
    pPortName: T.LPSTR,
    Attributes: T.DWORD,
    DeviceNotSelectedTimeout: T.DWORD,
    TransmissionRetryTimeout: T.DWORD
}));
T.LPPRINTER_INFO_5A = Pointer(Struct('_PRINTER_INFO_5A', {
    pPrinterName: T.LPSTR,
    pPortName: T.LPSTR,
    Attributes: T.DWORD,
    DeviceNotSelectedTimeout: T.DWORD,
    TransmissionRetryTimeout: T.DWORD
}));
T.PRINTER_INFO_5W = Struct('_PRINTER_INFO_5W', {
    pPrinterName: T.LPWSTR,
    pPortName: T.LPWSTR,
    Attributes: T.DWORD,
    DeviceNotSelectedTimeout: T.DWORD,
    TransmissionRetryTimeout: T.DWORD
});
T.PPRINTER_INFO_5W = Pointer(Struct('_PRINTER_INFO_5W', {
    pPrinterName: T.LPWSTR,
    pPortName: T.LPWSTR,
    Attributes: T.DWORD,
    DeviceNotSelectedTimeout: T.DWORD,
    TransmissionRetryTimeout: T.DWORD
}));
T.LPPRINTER_INFO_5W = Pointer(Struct('_PRINTER_INFO_5W', {
    pPrinterName: T.LPWSTR,
    pPortName: T.LPWSTR,
    Attributes: T.DWORD,
    DeviceNotSelectedTimeout: T.DWORD,
    TransmissionRetryTimeout: T.DWORD
}));
T.PRINTER_INFO_5 = T.PRINTER_INFO_5A;
T.PPRINTER_INFO_5 = T.PPRINTER_INFO_5A;
T.LPPRINTER_INFO_5 = T.LPPRINTER_INFO_5A;
T.PRINTER_INFO_6 = Struct('_PRINTER_INFO_6', {
    dwStatus: T.DWORD
});
T.PPRINTER_INFO_6 = Pointer(Struct('_PRINTER_INFO_6', {
    dwStatus: T.DWORD
}));
T.LPPRINTER_INFO_6 = Pointer(Struct('_PRINTER_INFO_6', {
    dwStatus: T.DWORD
}));
T.PRINTER_INFO_7A = Struct('_PRINTER_INFO_7A', {
    pszObjectGUID: T.LPSTR,
    dwAction: T.DWORD
});
T.PPRINTER_INFO_7A = Pointer(Struct('_PRINTER_INFO_7A', {
    pszObjectGUID: T.LPSTR,
    dwAction: T.DWORD
}));
T.LPPRINTER_INFO_7A = Pointer(Struct('_PRINTER_INFO_7A', {
    pszObjectGUID: T.LPSTR,
    dwAction: T.DWORD
}));
T.PRINTER_INFO_7W = Struct('_PRINTER_INFO_7W', {
    pszObjectGUID: T.LPWSTR,
    dwAction: T.DWORD
});
T.PPRINTER_INFO_7W = Pointer(Struct('_PRINTER_INFO_7W', {
    pszObjectGUID: T.LPWSTR,
    dwAction: T.DWORD
}));
T.LPPRINTER_INFO_7W = Pointer(Struct('_PRINTER_INFO_7W', {
    pszObjectGUID: T.LPWSTR,
    dwAction: T.DWORD
}));
T.PRINTER_INFO_7 = T.PRINTER_INFO_7A;
T.PPRINTER_INFO_7 = T.PPRINTER_INFO_7A;
T.LPPRINTER_INFO_7 = T.LPPRINTER_INFO_7A;
T.PRINTER_INFO_8A = Struct('_PRINTER_INFO_8A', {
    pDevMode: T.LPDEVMODEA
});
T.PPRINTER_INFO_8A = Pointer(Struct('_PRINTER_INFO_8A', {
    pDevMode: T.LPDEVMODEA
}));
T.LPPRINTER_INFO_8A = Pointer(Struct('_PRINTER_INFO_8A', {
    pDevMode: T.LPDEVMODEA
}));
T.PRINTER_INFO_8W = Struct('_PRINTER_INFO_8W', {
    pDevMode: T.LPDEVMODEW
});
T.PPRINTER_INFO_8W = Pointer(Struct('_PRINTER_INFO_8W', {
    pDevMode: T.LPDEVMODEW
}));
T.LPPRINTER_INFO_8W = Pointer(Struct('_PRINTER_INFO_8W', {
    pDevMode: T.LPDEVMODEW
}));
T.PRINTER_INFO_8 = T.PRINTER_INFO_8A;
T.PPRINTER_INFO_8 = T.PPRINTER_INFO_8A;
T.LPPRINTER_INFO_8 = T.LPPRINTER_INFO_8A;
T.PRINTER_INFO_9A = Struct('_PRINTER_INFO_9A', {
    pDevMode: T.LPDEVMODEA
});
T.PPRINTER_INFO_9A = Pointer(Struct('_PRINTER_INFO_9A', {
    pDevMode: T.LPDEVMODEA
}));
T.LPPRINTER_INFO_9A = Pointer(Struct('_PRINTER_INFO_9A', {
    pDevMode: T.LPDEVMODEA
}));
T.PRINTER_INFO_9W = Struct('_PRINTER_INFO_9W', {
    pDevMode: T.LPDEVMODEW
});
T.PPRINTER_INFO_9W = Pointer(Struct('_PRINTER_INFO_9W', {
    pDevMode: T.LPDEVMODEW
}));
T.LPPRINTER_INFO_9W = Pointer(Struct('_PRINTER_INFO_9W', {
    pDevMode: T.LPDEVMODEW
}));
T.PRINTER_INFO_9 = T.PRINTER_INFO_9A;
T.PPRINTER_INFO_9 = T.PPRINTER_INFO_9A;
T.LPPRINTER_INFO_9 = T.LPPRINTER_INFO_9A;
T.JOB_INFO_1A = Struct('_JOB_INFO_1A', {
    JobId: T.DWORD,
    pPrinterName: T.LPSTR,
    pMachineName: T.LPSTR,
    pUserName: T.LPSTR,
    pDocument: T.LPSTR,
    pDatatype: T.LPSTR,
    pStatus: T.LPSTR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    TotalPages: T.DWORD,
    PagesPrinted: T.DWORD,
    Submitted: T.SYSTEMTIME
});
T.PJOB_INFO_1A = Pointer(Struct('_JOB_INFO_1A', {
    JobId: T.DWORD,
    pPrinterName: T.LPSTR,
    pMachineName: T.LPSTR,
    pUserName: T.LPSTR,
    pDocument: T.LPSTR,
    pDatatype: T.LPSTR,
    pStatus: T.LPSTR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    TotalPages: T.DWORD,
    PagesPrinted: T.DWORD,
    Submitted: T.SYSTEMTIME
}));
T.LPJOB_INFO_1A = Pointer(Struct('_JOB_INFO_1A', {
    JobId: T.DWORD,
    pPrinterName: T.LPSTR,
    pMachineName: T.LPSTR,
    pUserName: T.LPSTR,
    pDocument: T.LPSTR,
    pDatatype: T.LPSTR,
    pStatus: T.LPSTR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    TotalPages: T.DWORD,
    PagesPrinted: T.DWORD,
    Submitted: T.SYSTEMTIME
}));
T.JOB_INFO_1W = Struct('_JOB_INFO_1W', {
    JobId: T.DWORD,
    pPrinterName: T.LPWSTR,
    pMachineName: T.LPWSTR,
    pUserName: T.LPWSTR,
    pDocument: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pStatus: T.LPWSTR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    TotalPages: T.DWORD,
    PagesPrinted: T.DWORD,
    Submitted: T.SYSTEMTIME
});
T.PJOB_INFO_1W = Pointer(Struct('_JOB_INFO_1W', {
    JobId: T.DWORD,
    pPrinterName: T.LPWSTR,
    pMachineName: T.LPWSTR,
    pUserName: T.LPWSTR,
    pDocument: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pStatus: T.LPWSTR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    TotalPages: T.DWORD,
    PagesPrinted: T.DWORD,
    Submitted: T.SYSTEMTIME
}));
T.LPJOB_INFO_1W = Pointer(Struct('_JOB_INFO_1W', {
    JobId: T.DWORD,
    pPrinterName: T.LPWSTR,
    pMachineName: T.LPWSTR,
    pUserName: T.LPWSTR,
    pDocument: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pStatus: T.LPWSTR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    TotalPages: T.DWORD,
    PagesPrinted: T.DWORD,
    Submitted: T.SYSTEMTIME
}));
T.JOB_INFO_1 = T.JOB_INFO_1A;
T.PJOB_INFO_1 = T.PJOB_INFO_1A;
T.LPJOB_INFO_1 = T.LPJOB_INFO_1A;
T.JOB_INFO_2A = Struct('_JOB_INFO_2A', {
    JobId: T.DWORD,
    pPrinterName: T.LPSTR,
    pMachineName: T.LPSTR,
    pUserName: T.LPSTR,
    pDocument: T.LPSTR,
    pNotifyName: T.LPSTR,
    pDatatype: T.LPSTR,
    pPrintProcessor: T.LPSTR,
    pParameters: T.LPSTR,
    pDriverName: T.LPSTR,
    pDevMode: T.LPDEVMODEA,
    pStatus: T.LPSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    TotalPages: T.DWORD,
    Size: T.DWORD,
    Submitted: T.SYSTEMTIME,
    Time: T.DWORD,
    PagesPrinted: T.DWORD
});
T.PJOB_INFO_2A = Pointer(Struct('_JOB_INFO_2A', {
    JobId: T.DWORD,
    pPrinterName: T.LPSTR,
    pMachineName: T.LPSTR,
    pUserName: T.LPSTR,
    pDocument: T.LPSTR,
    pNotifyName: T.LPSTR,
    pDatatype: T.LPSTR,
    pPrintProcessor: T.LPSTR,
    pParameters: T.LPSTR,
    pDriverName: T.LPSTR,
    pDevMode: T.LPDEVMODEA,
    pStatus: T.LPSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    TotalPages: T.DWORD,
    Size: T.DWORD,
    Submitted: T.SYSTEMTIME,
    Time: T.DWORD,
    PagesPrinted: T.DWORD
}));
T.LPJOB_INFO_2A = Pointer(Struct('_JOB_INFO_2A', {
    JobId: T.DWORD,
    pPrinterName: T.LPSTR,
    pMachineName: T.LPSTR,
    pUserName: T.LPSTR,
    pDocument: T.LPSTR,
    pNotifyName: T.LPSTR,
    pDatatype: T.LPSTR,
    pPrintProcessor: T.LPSTR,
    pParameters: T.LPSTR,
    pDriverName: T.LPSTR,
    pDevMode: T.LPDEVMODEA,
    pStatus: T.LPSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    TotalPages: T.DWORD,
    Size: T.DWORD,
    Submitted: T.SYSTEMTIME,
    Time: T.DWORD,
    PagesPrinted: T.DWORD
}));
T.JOB_INFO_2W = Struct('_JOB_INFO_2W', {
    JobId: T.DWORD,
    pPrinterName: T.LPWSTR,
    pMachineName: T.LPWSTR,
    pUserName: T.LPWSTR,
    pDocument: T.LPWSTR,
    pNotifyName: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pPrintProcessor: T.LPWSTR,
    pParameters: T.LPWSTR,
    pDriverName: T.LPWSTR,
    pDevMode: T.LPDEVMODEW,
    pStatus: T.LPWSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    TotalPages: T.DWORD,
    Size: T.DWORD,
    Submitted: T.SYSTEMTIME,
    Time: T.DWORD,
    PagesPrinted: T.DWORD
});
T.PJOB_INFO_2W = Pointer(Struct('_JOB_INFO_2W', {
    JobId: T.DWORD,
    pPrinterName: T.LPWSTR,
    pMachineName: T.LPWSTR,
    pUserName: T.LPWSTR,
    pDocument: T.LPWSTR,
    pNotifyName: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pPrintProcessor: T.LPWSTR,
    pParameters: T.LPWSTR,
    pDriverName: T.LPWSTR,
    pDevMode: T.LPDEVMODEW,
    pStatus: T.LPWSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    TotalPages: T.DWORD,
    Size: T.DWORD,
    Submitted: T.SYSTEMTIME,
    Time: T.DWORD,
    PagesPrinted: T.DWORD
}));
T.LPJOB_INFO_2W = Pointer(Struct('_JOB_INFO_2W', {
    JobId: T.DWORD,
    pPrinterName: T.LPWSTR,
    pMachineName: T.LPWSTR,
    pUserName: T.LPWSTR,
    pDocument: T.LPWSTR,
    pNotifyName: T.LPWSTR,
    pDatatype: T.LPWSTR,
    pPrintProcessor: T.LPWSTR,
    pParameters: T.LPWSTR,
    pDriverName: T.LPWSTR,
    pDevMode: T.LPDEVMODEW,
    pStatus: T.LPWSTR,
    pSecurityDescriptor: T.PSECURITY_DESCRIPTOR,
    Status: T.DWORD,
    Priority: T.DWORD,
    Position: T.DWORD,
    StartTime: T.DWORD,
    UntilTime: T.DWORD,
    TotalPages: T.DWORD,
    Size: T.DWORD,
    Submitted: T.SYSTEMTIME,
    Time: T.DWORD,
    PagesPrinted: T.DWORD
}));
T.JOB_INFO_2 = T.JOB_INFO_2A;
T.PJOB_INFO_2 = T.PJOB_INFO_2A;
T.LPJOB_INFO_2 = T.LPJOB_INFO_2A;
T.JOB_INFO_3 = Struct('_JOB_INFO_3', {
    JobId: T.DWORD,
    NextJobId: T.DWORD,
    Reserved: T.DWORD
});
T.PJOB_INFO_3 = Pointer(Struct('_JOB_INFO_3', {
    JobId: T.DWORD,
    NextJobId: T.DWORD,
    Reserved: T.DWORD
}));
T.LPJOB_INFO_3 = Pointer(Struct('_JOB_INFO_3', {
    JobId: T.DWORD,
    NextJobId: T.DWORD,
    Reserved: T.DWORD
}));
T.ADDJOB_INFO_1A = Struct('_ADDJOB_INFO_1A', {
    Path: T.LPSTR,
    JobId: T.DWORD
});
T.PADDJOB_INFO_1A = Pointer(Struct('_ADDJOB_INFO_1A', {
    Path: T.LPSTR,
    JobId: T.DWORD
}));
T.LPADDJOB_INFO_1A = Pointer(Struct('_ADDJOB_INFO_1A', {
    Path: T.LPSTR,
    JobId: T.DWORD
}));
T.ADDJOB_INFO_1W = Struct('_ADDJOB_INFO_1W', {
    Path: T.LPWSTR,
    JobId: T.DWORD
});
T.PADDJOB_INFO_1W = Pointer(Struct('_ADDJOB_INFO_1W', {
    Path: T.LPWSTR,
    JobId: T.DWORD
}));
T.LPADDJOB_INFO_1W = Pointer(Struct('_ADDJOB_INFO_1W', {
    Path: T.LPWSTR,
    JobId: T.DWORD
}));
T.ADDJOB_INFO_1 = T.ADDJOB_INFO_1A;
T.PADDJOB_INFO_1 = T.PADDJOB_INFO_1A;
T.LPADDJOB_INFO_1 = T.LPADDJOB_INFO_1A;
T.DOC_INFO_1A = Struct('_DOC_INFO_1A', {
    pDocName: T.LPSTR,
    pOutputFile: T.LPSTR,
    pDatatype: T.LPSTR
});
T.PDOC_INFO_1A = Pointer(Struct('_DOC_INFO_1A', {
    pDocName: T.LPSTR,
    pOutputFile: T.LPSTR,
    pDatatype: T.LPSTR
}));
T.LPDOC_INFO_1A = Pointer(Struct('_DOC_INFO_1A', {
    pDocName: T.LPSTR,
    pOutputFile: T.LPSTR,
    pDatatype: T.LPSTR
}));
T.DOC_INFO_1W = Struct('_DOC_INFO_1W', {
    pDocName: T.LPWSTR,
    pOutputFile: T.LPWSTR,
    pDatatype: T.LPWSTR
});
T.PDOC_INFO_1W = Pointer(Struct('_DOC_INFO_1W', {
    pDocName: T.LPWSTR,
    pOutputFile: T.LPWSTR,
    pDatatype: T.LPWSTR
}));
T.LPDOC_INFO_1W = Pointer(Struct('_DOC_INFO_1W', {
    pDocName: T.LPWSTR,
    pOutputFile: T.LPWSTR,
    pDatatype: T.LPWSTR
}));
T.DOC_INFO_1 = T.DOC_INFO_1A;
T.PDOC_INFO_1 = T.PDOC_INFO_1A;
T.LPDOC_INFO_1 = T.LPDOC_INFO_1A;
T.DOC_INFO_2A = Struct('_DOC_INFO_2A', {
    pDocName: T.LPSTR,
    pOutputFile: T.LPSTR,
    pDatatype: T.LPSTR,
    dwMode: T.DWORD,
    JobId: T.DWORD
});
T.PDOC_INFO_2A = Pointer(Struct('_DOC_INFO_2A', {
    pDocName: T.LPSTR,
    pOutputFile: T.LPSTR,
    pDatatype: T.LPSTR,
    dwMode: T.DWORD,
    JobId: T.DWORD
}));
T.LPDOC_INFO_2A = Pointer(Struct('_DOC_INFO_2A', {
    pDocName: T.LPSTR,
    pOutputFile: T.LPSTR,
    pDatatype: T.LPSTR,
    dwMode: T.DWORD,
    JobId: T.DWORD
}));
T.DOC_INFO_2W = Struct('_DOC_INFO_2W', {
    pDocName: T.LPWSTR,
    pOutputFile: T.LPWSTR,
    pDatatype: T.LPWSTR,
    dwMode: T.DWORD,
    JobId: T.DWORD
});
T.PDOC_INFO_2W = Pointer(Struct('_DOC_INFO_2W', {
    pDocName: T.LPWSTR,
    pOutputFile: T.LPWSTR,
    pDatatype: T.LPWSTR,
    dwMode: T.DWORD,
    JobId: T.DWORD
}));
T.LPDOC_INFO_2W = Pointer(Struct('_DOC_INFO_2W', {
    pDocName: T.LPWSTR,
    pOutputFile: T.LPWSTR,
    pDatatype: T.LPWSTR,
    dwMode: T.DWORD,
    JobId: T.DWORD
}));
T.DOC_INFO_2 = T.DOC_INFO_2A;
T.PDOC_INFO_2 = T.PDOC_INFO_2A;
T.LPDOC_INFO_2 = T.LPDOC_INFO_2A;
T.FORM_INFO_1A = Struct('_FORM_INFO_1A', {
    Flags: T.DWORD,
    pName: T.LPSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL
});
T.PFORM_INFO_1A = Pointer(Struct('_FORM_INFO_1A', {
    Flags: T.DWORD,
    pName: T.LPSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL
}));
T.LPFORM_INFO_1A = Pointer(Struct('_FORM_INFO_1A', {
    Flags: T.DWORD,
    pName: T.LPSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL
}));
T.FORM_INFO_1W = Struct('_FORM_INFO_1W', {
    Flags: T.DWORD,
    pName: T.LPWSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL
});
T.PFORM_INFO_1W = Pointer(Struct('_FORM_INFO_1W', {
    Flags: T.DWORD,
    pName: T.LPWSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL
}));
T.LPFORM_INFO_1W = Pointer(Struct('_FORM_INFO_1W', {
    Flags: T.DWORD,
    pName: T.LPWSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL
}));
T.FORM_INFO_1 = T.FORM_INFO_1A;
T.PFORM_INFO_1 = T.PFORM_INFO_1A;
T.LPFORM_INFO_1 = T.LPFORM_INFO_1A;
T.FORM_INFO_2A = Struct('_FORM_INFO_2A', {
    Flags: T.DWORD,
    pName: T.LPSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL,
    pKeyword: T.LPCSTR,
    StringType: T.DWORD,
    pMuiDll: T.LPSTR,
    dwResourceId: T.DWORD,
    pDisplayName: T.LPSTR,
    wLangId: T.LANGID
});
T.PFORM_INFO_2A = Pointer(Struct('_FORM_INFO_2A', {
    Flags: T.DWORD,
    pName: T.LPSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL,
    pKeyword: T.LPCSTR,
    StringType: T.DWORD,
    pMuiDll: T.LPSTR,
    dwResourceId: T.DWORD,
    pDisplayName: T.LPSTR,
    wLangId: T.LANGID
}));
T.LPFORM_INFO_2A = Pointer(Struct('_FORM_INFO_2A', {
    Flags: T.DWORD,
    pName: T.LPSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL,
    pKeyword: T.LPCSTR,
    StringType: T.DWORD,
    pMuiDll: T.LPSTR,
    dwResourceId: T.DWORD,
    pDisplayName: T.LPSTR,
    wLangId: T.LANGID
}));
T.FORM_INFO_2W = Struct('_FORM_INFO_2W', {
    Flags: T.DWORD,
    pName: T.LPWSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL,
    pKeyword: T.LPCSTR,
    StringType: T.DWORD,
    pMuiDll: T.LPWSTR,
    dwResourceId: T.DWORD,
    pDisplayName: T.LPWSTR,
    wLangId: T.LANGID
});
T.PFORM_INFO_2W = Pointer(Struct('_FORM_INFO_2W', {
    Flags: T.DWORD,
    pName: T.LPWSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL,
    pKeyword: T.LPCSTR,
    StringType: T.DWORD,
    pMuiDll: T.LPWSTR,
    dwResourceId: T.DWORD,
    pDisplayName: T.LPWSTR,
    wLangId: T.LANGID
}));
T.LPFORM_INFO_2W = Pointer(Struct('_FORM_INFO_2W', {
    Flags: T.DWORD,
    pName: T.LPWSTR,
    Size: T.SIZEL,
    ImageableArea: T.RECTL,
    pKeyword: T.LPCSTR,
    StringType: T.DWORD,
    pMuiDll: T.LPWSTR,
    dwResourceId: T.DWORD,
    pDisplayName: T.LPWSTR,
    wLangId: T.LANGID
}));
T.FORM_INFO_2 = T.FORM_INFO_2A;
T.PFORM_INFO_2 = T.PFORM_INFO_2A;
T.LPFORM_INFO_2 = T.LPFORM_INFO_2A;
T.PRINTPROCESSOR_INFO_1A = Struct('_PRINTPROCESSOR_INFO_1A', {
    pName: T.LPSTR
});
T.PPRINTPROCESSOR_INFO_1A = Pointer(Struct('_PRINTPROCESSOR_INFO_1A', {
    pName: T.LPSTR
}));
T.LPPRINTPROCESSOR_INFO_1A = Pointer(Struct('_PRINTPROCESSOR_INFO_1A', {
    pName: T.LPSTR
}));
T.PRINTPROCESSOR_INFO_1W = Struct('_PRINTPROCESSOR_INFO_1W', {
    pName: T.LPWSTR
});
T.PPRINTPROCESSOR_INFO_1W = Pointer(Struct('_PRINTPROCESSOR_INFO_1W', {
    pName: T.LPWSTR
}));
T.LPPRINTPROCESSOR_INFO_1W = Pointer(Struct('_PRINTPROCESSOR_INFO_1W', {
    pName: T.LPWSTR
}));
T.PRINTPROCESSOR_INFO_1 = T.PRINTPROCESSOR_INFO_1A;
T.PPRINTPROCESSOR_INFO_1 = T.PPRINTPROCESSOR_INFO_1A;
T.LPPRINTPROCESSOR_INFO_1 = T.LPPRINTPROCESSOR_INFO_1A;
T.PORT_INFO_1A = Struct('_PORT_INFO_1A', {
    pName: T.LPSTR
});
T.PPORT_INFO_1A = Pointer(Struct('_PORT_INFO_1A', {
    pName: T.LPSTR
}));
T.LPPORT_INFO_1A = Pointer(Struct('_PORT_INFO_1A', {
    pName: T.LPSTR
}));
T.PORT_INFO_1W = Struct('_PORT_INFO_1W', {
    pName: T.LPWSTR
});
T.PPORT_INFO_1W = Pointer(Struct('_PORT_INFO_1W', {
    pName: T.LPWSTR
}));
T.LPPORT_INFO_1W = Pointer(Struct('_PORT_INFO_1W', {
    pName: T.LPWSTR
}));
T.PORT_INFO_1 = T.PORT_INFO_1A;
T.PPORT_INFO_1 = T.PPORT_INFO_1A;
T.LPPORT_INFO_1 = T.LPPORT_INFO_1A;
T.PORT_INFO_2A = Struct('_PORT_INFO_2A', {
    pPortName: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDescription: T.LPSTR,
    fPortType: T.DWORD,
    Reserved: T.DWORD
});
T.PPORT_INFO_2A = Pointer(Struct('_PORT_INFO_2A', {
    pPortName: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDescription: T.LPSTR,
    fPortType: T.DWORD,
    Reserved: T.DWORD
}));
T.LPPORT_INFO_2A = Pointer(Struct('_PORT_INFO_2A', {
    pPortName: T.LPSTR,
    pMonitorName: T.LPSTR,
    pDescription: T.LPSTR,
    fPortType: T.DWORD,
    Reserved: T.DWORD
}));
T.PORT_INFO_2W = Struct('_PORT_INFO_2W', {
    pPortName: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDescription: T.LPWSTR,
    fPortType: T.DWORD,
    Reserved: T.DWORD
});
T.PPORT_INFO_2W = Pointer(Struct('_PORT_INFO_2W', {
    pPortName: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDescription: T.LPWSTR,
    fPortType: T.DWORD,
    Reserved: T.DWORD
}));
T.LPPORT_INFO_2W = Pointer(Struct('_PORT_INFO_2W', {
    pPortName: T.LPWSTR,
    pMonitorName: T.LPWSTR,
    pDescription: T.LPWSTR,
    fPortType: T.DWORD,
    Reserved: T.DWORD
}));
T.PORT_INFO_2 = T.PORT_INFO_2A;
T.PPORT_INFO_2 = T.PPORT_INFO_2A;
T.LPPORT_INFO_2 = T.LPPORT_INFO_2A;
T.PORT_INFO_3A = Struct('_PORT_INFO_3A', {
    dwStatus: T.DWORD,
    pszStatus: T.LPSTR,
    dwSeverity: T.DWORD
});
T.PPORT_INFO_3A = Pointer(Struct('_PORT_INFO_3A', {
    dwStatus: T.DWORD,
    pszStatus: T.LPSTR,
    dwSeverity: T.DWORD
}));
T.LPPORT_INFO_3A = Pointer(Struct('_PORT_INFO_3A', {
    dwStatus: T.DWORD,
    pszStatus: T.LPSTR,
    dwSeverity: T.DWORD
}));
T.PORT_INFO_3W = Struct('_PORT_INFO_3W', {
    dwStatus: T.DWORD,
    pszStatus: T.LPWSTR,
    dwSeverity: T.DWORD
});
T.PPORT_INFO_3W = Pointer(Struct('_PORT_INFO_3W', {
    dwStatus: T.DWORD,
    pszStatus: T.LPWSTR,
    dwSeverity: T.DWORD
}));
T.LPPORT_INFO_3W = Pointer(Struct('_PORT_INFO_3W', {
    dwStatus: T.DWORD,
    pszStatus: T.LPWSTR,
    dwSeverity: T.DWORD
}));
T.PORT_INFO_3 = T.PORT_INFO_3A;
T.PPORT_INFO_3 = T.PPORT_INFO_3A;
T.LPPORT_INFO_3 = T.LPPORT_INFO_3A;
T.MONITOR_INFO_1A = Struct('_MONITOR_INFO_1A', {
    pName: T.LPSTR
});
T.PMONITOR_INFO_1A = Pointer(Struct('_MONITOR_INFO_1A', {
    pName: T.LPSTR
}));
T.LPMONITOR_INFO_1A = Pointer(Struct('_MONITOR_INFO_1A', {
    pName: T.LPSTR
}));
T.MONITOR_INFO_1W = Struct('_MONITOR_INFO_1W', {
    pName: T.LPWSTR
});
T.PMONITOR_INFO_1W = Pointer(Struct('_MONITOR_INFO_1W', {
    pName: T.LPWSTR
}));
T.LPMONITOR_INFO_1W = Pointer(Struct('_MONITOR_INFO_1W', {
    pName: T.LPWSTR
}));
T.MONITOR_INFO_1 = T.MONITOR_INFO_1A;
T.PMONITOR_INFO_1 = T.PMONITOR_INFO_1A;
T.LPMONITOR_INFO_1 = T.LPMONITOR_INFO_1A;
T.MONITOR_INFO_2A = Struct('_MONITOR_INFO_2A', {
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDLLName: T.LPSTR
});
T.PMONITOR_INFO_2A = Pointer(Struct('_MONITOR_INFO_2A', {
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDLLName: T.LPSTR
}));
T.LPMONITOR_INFO_2A = Pointer(Struct('_MONITOR_INFO_2A', {
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDLLName: T.LPSTR
}));
T.MONITOR_INFO_2W = Struct('_MONITOR_INFO_2W', {
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDLLName: T.LPWSTR
});
T.PMONITOR_INFO_2W = Pointer(Struct('_MONITOR_INFO_2W', {
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDLLName: T.LPWSTR
}));
T.LPMONITOR_INFO_2W = Pointer(Struct('_MONITOR_INFO_2W', {
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDLLName: T.LPWSTR
}));
T.MONITOR_INFO_2 = T.MONITOR_INFO_2A;
T.PMONITOR_INFO_2 = T.PMONITOR_INFO_2A;
T.LPMONITOR_INFO_2 = T.LPMONITOR_INFO_2A;
T.DATATYPES_INFO_1A = Struct('_DATATYPES_INFO_1A', {
    pName: T.LPSTR
});
T.PDATATYPES_INFO_1A = Pointer(Struct('_DATATYPES_INFO_1A', {
    pName: T.LPSTR
}));
T.LPDATATYPES_INFO_1A = Pointer(Struct('_DATATYPES_INFO_1A', {
    pName: T.LPSTR
}));
T.DATATYPES_INFO_1W = Struct('_DATATYPES_INFO_1W', {
    pName: T.LPWSTR
});
T.PDATATYPES_INFO_1W = Pointer(Struct('_DATATYPES_INFO_1W', {
    pName: T.LPWSTR
}));
T.LPDATATYPES_INFO_1W = Pointer(Struct('_DATATYPES_INFO_1W', {
    pName: T.LPWSTR
}));
T.DATATYPES_INFO_1 = T.DATATYPES_INFO_1A;
T.PDATATYPES_INFO_1 = T.PDATATYPES_INFO_1A;
T.LPDATATYPES_INFO_1 = T.LPDATATYPES_INFO_1A;
T.PRINTER_NOTIFY_OPTIONS_TYPE = Struct('_PRINTER_NOTIFY_OPTIONS_TYPE', {
    Type: T.WORD,
    Reserved0: T.WORD,
    Reserved1: T.DWORD,
    Reserved2: T.DWORD,
    Count: T.DWORD,
    pFields: T.PWORD
});
T.PPRINTER_NOTIFY_OPTIONS_TYPE = Pointer(Struct('_PRINTER_NOTIFY_OPTIONS_TYPE', {
    Type: T.WORD,
    Reserved0: T.WORD,
    Reserved1: T.DWORD,
    Reserved2: T.DWORD,
    Count: T.DWORD,
    pFields: T.PWORD
}));
T.LPPRINTER_NOTIFY_OPTIONS_TYPE = Pointer(Struct('_PRINTER_NOTIFY_OPTIONS_TYPE', {
    Type: T.WORD,
    Reserved0: T.WORD,
    Reserved1: T.DWORD,
    Reserved2: T.DWORD,
    Count: T.DWORD,
    pFields: T.PWORD
}));
T.PRINTER_NOTIFY_OPTIONS = Struct('_PRINTER_NOTIFY_OPTIONS', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    pTypes: T.PPRINTER_NOTIFY_OPTIONS_TYPE
});
T.PPRINTER_NOTIFY_OPTIONS = Pointer(Struct('_PRINTER_NOTIFY_OPTIONS', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    pTypes: T.PPRINTER_NOTIFY_OPTIONS_TYPE
}));
T.LPPRINTER_NOTIFY_OPTIONS = Pointer(Struct('_PRINTER_NOTIFY_OPTIONS', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    pTypes: T.PPRINTER_NOTIFY_OPTIONS_TYPE
}));
T.PRINTER_NOTIFY_INFO_DATA = Struct('_PRINTER_NOTIFY_INFO_DATA', {
    Type: T.WORD,
    Field: T.WORD,
    Reserved: T.DWORD,
    Id: T.DWORD,
    NotifyData: Union('', {
        adwData: ArrayType(T.DWORD, 2),
        Data: Struct('', {
            cbBuf: T.DWORD,
            pBuf: T.LPVOID
        })
    })
});
T.PPRINTER_NOTIFY_INFO_DATA = Pointer(Struct('_PRINTER_NOTIFY_INFO_DATA', {
    Type: T.WORD,
    Field: T.WORD,
    Reserved: T.DWORD,
    Id: T.DWORD,
    NotifyData: Union('', {
        adwData: ArrayType(T.DWORD, 2),
        Data: Struct('', {
            cbBuf: T.DWORD,
            pBuf: T.LPVOID
        })
    })
}));
T.LPPRINTER_NOTIFY_INFO_DATA = Pointer(Struct('_PRINTER_NOTIFY_INFO_DATA', {
    Type: T.WORD,
    Field: T.WORD,
    Reserved: T.DWORD,
    Id: T.DWORD,
    NotifyData: Union('', {
        adwData: ArrayType(T.DWORD, 2),
        Data: Struct('', {
            cbBuf: T.DWORD,
            pBuf: T.LPVOID
        })
    })
}));
T.PRINTER_NOTIFY_INFO = Struct('_PRINTER_NOTIFY_INFO', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.PRINTER_NOTIFY_INFO_DATA, 1)
});
T.PPRINTER_NOTIFY_INFO = Pointer(Struct('_PRINTER_NOTIFY_INFO', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.PRINTER_NOTIFY_INFO_DATA, 1)
}));
T.LPPRINTER_NOTIFY_INFO = Pointer(Struct('_PRINTER_NOTIFY_INFO', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.PRINTER_NOTIFY_INFO_DATA, 1)
}));
T.PROVIDOR_INFO_1A = Struct('_PROVIDOR_INFO_1A', {
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDLLName: T.LPSTR
});
T.PPROVIDOR_INFO_1A = Pointer(Struct('_PROVIDOR_INFO_1A', {
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDLLName: T.LPSTR
}));
T.LPPROVIDOR_INFO_1A = Pointer(Struct('_PROVIDOR_INFO_1A', {
    pName: T.LPSTR,
    pEnvironment: T.LPSTR,
    pDLLName: T.LPSTR
}));
T.PROVIDOR_INFO_1W = Struct('_PROVIDOR_INFO_1W', {
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDLLName: T.LPWSTR
});
T.PPROVIDOR_INFO_1W = Pointer(Struct('_PROVIDOR_INFO_1W', {
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDLLName: T.LPWSTR
}));
T.LPPROVIDOR_INFO_1W = Pointer(Struct('_PROVIDOR_INFO_1W', {
    pName: T.LPWSTR,
    pEnvironment: T.LPWSTR,
    pDLLName: T.LPWSTR
}));
T.PROVIDOR_INFO_1 = T.PROVIDOR_INFO_1A;
T.PPROVIDOR_INFO_1 = T.PPROVIDOR_INFO_1A;
T.LPPROVIDOR_INFO_1 = T.LPPROVIDOR_INFO_1A;
T.PRINTER_ENUM_VALUESA = Struct('_PRINTER_ENUM_VALUESA', {
    pValueName: T.LPSTR,
    cbValueName: T.DWORD,
    dwType: T.DWORD,
    pData: T.LPBYTE,
    cbData: T.DWORD
});
T.PPRINTER_ENUM_VALUESA = Pointer(Struct('_PRINTER_ENUM_VALUESA', {
    pValueName: T.LPSTR,
    cbValueName: T.DWORD,
    dwType: T.DWORD,
    pData: T.LPBYTE,
    cbData: T.DWORD
}));
T.PRINTER_ENUM_VALUESW = Struct('_PRINTER_ENUM_VALUESW', {
    pValueName: T.LPWSTR,
    cbValueName: T.DWORD,
    dwType: T.DWORD,
    pData: T.LPBYTE,
    cbData: T.DWORD
});
T.PPRINTER_ENUM_VALUESW = Pointer(Struct('_PRINTER_ENUM_VALUESW', {
    pValueName: T.LPWSTR,
    cbValueName: T.DWORD,
    dwType: T.DWORD,
    pData: T.LPBYTE,
    cbData: T.DWORD
}));
T.PRINTER_ENUM_VALUES = T.PRINTER_ENUM_VALUESA;
T.PPRINTER_ENUM_VALUES = T.PPRINTER_ENUM_VALUESA;
T.BIDI_TYPE = Enum('BIDI_BLOB', {
    BIDI_NULL: 0,
    BIDI_INT: 1,
    BIDI_FLOAT: 2,
    BIDI_BOOL: 3,
    BIDI_STRING: 4,
    BIDI_TEXT: 5,
    BIDI_ENUM: 6,
    BIDI_BLOB: 7
});
T.BINARY_CONTAINER = Struct('_BINARY_CONTAINER', {
    cbBuf: T.DWORD,
    pData: T.LPBYTE
});
T.PBINARY_CONTAINER = Pointer(Struct('_BINARY_CONTAINER', {
    cbBuf: T.DWORD,
    pData: T.LPBYTE
}));
T.BIDI_DATA = Struct('_BIDI_DATA', {
    dwBidiType: T.DWORD,
    u: Union('', {
        bData: T.BOOL,
        iData: T.INT,
        sData: T.LPWSTR,
        fData: T.FLOAT,
        biData: T.BINARY_CONTAINER
    })
});
T.LPBIDI_DATA = Pointer(Struct('_BIDI_DATA', {
    dwBidiType: T.DWORD,
    u: Union('', {
        bData: T.BOOL,
        iData: T.INT,
        sData: T.LPWSTR,
        fData: T.FLOAT,
        biData: T.BINARY_CONTAINER
    })
}));
T.PBIDI_DATA = Pointer(Struct('_BIDI_DATA', {
    dwBidiType: T.DWORD,
    u: Union('', {
        bData: T.BOOL,
        iData: T.INT,
        sData: T.LPWSTR,
        fData: T.FLOAT,
        biData: T.BINARY_CONTAINER
    })
}));
T.BIDI_REQUEST_DATA = Struct('_BIDI_REQUEST_DATA', {
    dwReqNumber: T.DWORD,
    pSchema: T.LPWSTR,
    data: T.BIDI_DATA
});
T.LPBIDI_REQUEST_DATA = Pointer(Struct('_BIDI_REQUEST_DATA', {
    dwReqNumber: T.DWORD,
    pSchema: T.LPWSTR,
    data: T.BIDI_DATA
}));
T.PBIDI_REQUEST_DATA = Pointer(Struct('_BIDI_REQUEST_DATA', {
    dwReqNumber: T.DWORD,
    pSchema: T.LPWSTR,
    data: T.BIDI_DATA
}));
T.BIDI_REQUEST_CONTAINER = Struct('_BIDI_REQUEST_CONTAINER', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.BIDI_REQUEST_DATA, 1)
});
T.LPBIDI_REQUEST_CONTAINER = Pointer(Struct('_BIDI_REQUEST_CONTAINER', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.BIDI_REQUEST_DATA, 1)
}));
T.PBIDI_REQUEST_CONTAINER = Pointer(Struct('_BIDI_REQUEST_CONTAINER', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.BIDI_REQUEST_DATA, 1)
}));
T.BIDI_RESPONSE_DATA = Struct('_BIDI_RESPONSE_DATA', {
    dwResult: T.DWORD,
    dwReqNumber: T.DWORD,
    pSchema: T.LPWSTR,
    data: T.BIDI_DATA
});
T.LPBIDI_RESPONSE_DATA = Pointer(Struct('_BIDI_RESPONSE_DATA', {
    dwResult: T.DWORD,
    dwReqNumber: T.DWORD,
    pSchema: T.LPWSTR,
    data: T.BIDI_DATA
}));
T.PBIDI_RESPONSE_DATA = Pointer(Struct('_BIDI_RESPONSE_DATA', {
    dwResult: T.DWORD,
    dwReqNumber: T.DWORD,
    pSchema: T.LPWSTR,
    data: T.BIDI_DATA
}));
T.BIDI_RESPONSE_CONTAINER = Struct('_BIDI_RESPONSE_CONTAINER', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.BIDI_RESPONSE_DATA, 1)
});
T.LPBIDI_RESPONSE_CONTAINER = Pointer(Struct('_BIDI_RESPONSE_CONTAINER', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.BIDI_RESPONSE_DATA, 1)
}));
T.PBIDI_RESPONSE_CONTAINER = Pointer(Struct('_BIDI_RESPONSE_CONTAINER', {
    Version: T.DWORD,
    Flags: T.DWORD,
    Count: T.DWORD,
    aData: ArrayType(T.BIDI_RESPONSE_DATA, 1)
}));
T.byte = T.u8;
T.hyper = T.INT64;
T.MIDL_uhyper = T.UINT64;
T.boolean = T.u8;
T.NDR_SCONTEXT = Pointer(Struct('', {
    pad: ArrayType(Pointer(null), 2),
    userContext: Pointer(null)
}));
T.NDR_RUNDOWN = Pointer(Fn(null, [[Pointer(null), 'context']]));
T.NDR_NOTIFY_ROUTINE = Pointer(Fn(null, [[null]]));
T.NDR_NOTIFY2_ROUTINE = Pointer(Fn(null, [[T.boolean, 'flag']]));
T.RPC_BUFPTR = Pointer(T.u8);
T.RPC_LENGTH = T.ULONG;
T.EXPR_EVAL = Pointer(Fn(null, [[Pointer(Struct('_MIDL_STUB_MESSAGE', null))]]));
T.PFORMAT_STRING = Pointer(T.u8);
T.ARRAY_INFO = Struct('', {
    Dimension: T.LONG,
    BufferConformanceMark: Pointer(T.ULONG),
    BufferVarianceMark: Pointer(T.ULONG),
    MaxCountArray: Pointer(T.ULONG),
    OffsetArray: Pointer(T.ULONG),
    ActualCountArray: Pointer(T.ULONG)
});
T.PARRAY_INFO = Pointer(Struct('', {
    Dimension: T.LONG,
    BufferConformanceMark: Pointer(T.ULONG),
    BufferVarianceMark: Pointer(T.ULONG),
    MaxCountArray: Pointer(T.ULONG),
    OffsetArray: Pointer(T.ULONG),
    ActualCountArray: Pointer(T.ULONG)
}));
T.CS_STUB_INFO = Struct('', {
    WireCodeset: T.ULONG,
    DesiredReceivingCodeset: T.ULONG,
    CSArrayInfo: Pointer(null)
});
T.PNDR_PIPE_DESC = Pointer(Struct('_NDR_PIPE_DESC', null));
T.PNDR_PIPE_MESSAGE = Pointer(Struct('_NDR_PIPE_MESSAGE', null));
T.PNDR_ASYNC_MESSAGE = Pointer(Struct('_NDR_ASYNC_MESSAGE', null));
T.PNDR_CORRELATION_INFO = Pointer(Struct('_NDR_CORRELATION_INFO', null));
T.MIDL_STUB_MESSAGE = Struct('_MIDL_STUB_MESSAGE', {
    RpcMsg: T.PRPC_MESSAGE,
    Buffer: Pointer(T.u8),
    BufferStart: Pointer(T.u8),
    BufferEnd: Pointer(T.u8),
    BufferMark: Pointer(T.u8),
    BufferLength: T.ULONG,
    MemorySize: T.ULONG,
    Memory: Pointer(T.u8),
    IsClient: T.u8,
    Pad: T.u8,
    uFlags2: T.u16,
    ReuseBuffer: T.i32,
    pAllocAllNodesContext: Pointer(Struct('NDR_ALLOC_ALL_NODES_CONTEXT', null)),
    pPointerQueueState: Pointer(Struct('NDR_POINTER_QUEUE_STATE', null)),
    IgnoreEmbeddedPointers: T.i32,
    PointerBufferMark: Pointer(T.u8),
    CorrDespIncrement: T.u8,
    uFlags: T.u8,
    UniquePtrCount: T.u16,
    MaxCount: T.ULONG_PTR,
    Offset: T.ULONG,
    ActualCount: T.ULONG,
    pfnAllocate: Pointer(Fn(Pointer(null), [[T.SIZE_T]])),
    pfnFree: Pointer(Fn(null, [[Pointer(null)]])),
    StackTop: Pointer(T.u8),
    pPresentedType: Pointer(T.u8),
    pTransmitType: Pointer(T.u8),
    SavedHandle: T.handle_t,
    StubDesc: Pointer(Struct('_MIDL_STUB_DESC', null)),
    FullPtrXlatTables: Pointer(Struct('_FULL_PTR_XLAT_TABLES', null)),
    FullPtrRefId: T.ULONG,
    PointerLength: T.ULONG,
    fInDontFree: [T.u32, 1],
    fDontCallFreeInst: [T.u32, 1],
    fInOnlyParam: [T.u32, 1],
    fHasReturn: [T.u32, 1],
    fHasExtensions: [T.u32, 1],
    fHasNewCorrDesc: [T.u32, 1],
    fIsIn: [T.u32, 1],
    fIsOut: [T.u32, 1],
    fIsOicf: [T.u32, 1],
    fBufferValid: [T.u32, 1],
    fHasMemoryValidateCallback: [T.u32, 1],
    fInFree: [T.u32, 1],
    fNeedMCCP: [T.u32, 1],
    fUnused: [T.i32, 3],
    fUnused2: [T.i32, 16],
    dwDestContext: T.DWORD,
    pvDestContext: Pointer(null),
    SavedContextHandles: Pointer(T.NDR_SCONTEXT),
    ParamNumber: T.LONG,
    pRpcChannelBuffer: Pointer(Struct('IRpcChannelBuffer', null)),
    pArrayInfo: T.PARRAY_INFO,
    SizePtrCountArray: Pointer(T.ULONG),
    SizePtrOffsetArray: Pointer(T.ULONG),
    SizePtrLengthArray: Pointer(T.ULONG),
    pArgQueue: Pointer(null),
    dwStubPhase: T.DWORD,
    LowStackMark: Pointer(null),
    pAsyncMsg: T.PNDR_ASYNC_MESSAGE,
    pCorrInfo: T.PNDR_CORRELATION_INFO,
    pCorrMemory: Pointer(T.u8),
    pMemoryList: Pointer(null),
    pCSInfo: Pointer(T.CS_STUB_INFO),
    ConformanceMark: Pointer(T.u8),
    VarianceMark: Pointer(T.u8),
    Unused: T.INT_PTR,
    pContext: Pointer(Struct('_NDR_PROC_CONTEXT', null)),
    ContextHandleHash: Pointer(null),
    pUserMarshalList: Pointer(null),
    Reserved51_3: T.INT_PTR,
    Reserved51_4: T.INT_PTR,
    Reserved51_5: T.INT_PTR
});
T.PMIDL_STUB_MESSAGE = Pointer(Struct('_MIDL_STUB_MESSAGE', {
    RpcMsg: T.PRPC_MESSAGE,
    Buffer: Pointer(T.u8),
    BufferStart: Pointer(T.u8),
    BufferEnd: Pointer(T.u8),
    BufferMark: Pointer(T.u8),
    BufferLength: T.ULONG,
    MemorySize: T.ULONG,
    Memory: Pointer(T.u8),
    IsClient: T.u8,
    Pad: T.u8,
    uFlags2: T.u16,
    ReuseBuffer: T.i32,
    pAllocAllNodesContext: Pointer(Struct('NDR_ALLOC_ALL_NODES_CONTEXT', null)),
    pPointerQueueState: Pointer(Struct('NDR_POINTER_QUEUE_STATE', null)),
    IgnoreEmbeddedPointers: T.i32,
    PointerBufferMark: Pointer(T.u8),
    CorrDespIncrement: T.u8,
    uFlags: T.u8,
    UniquePtrCount: T.u16,
    MaxCount: T.ULONG_PTR,
    Offset: T.ULONG,
    ActualCount: T.ULONG,
    pfnAllocate: Pointer(Fn(Pointer(null), [[T.SIZE_T]])),
    pfnFree: Pointer(Fn(null, [[Pointer(null)]])),
    StackTop: Pointer(T.u8),
    pPresentedType: Pointer(T.u8),
    pTransmitType: Pointer(T.u8),
    SavedHandle: T.handle_t,
    StubDesc: Pointer(Struct('_MIDL_STUB_DESC', null)),
    FullPtrXlatTables: Pointer(Struct('_FULL_PTR_XLAT_TABLES', null)),
    FullPtrRefId: T.ULONG,
    PointerLength: T.ULONG,
    fInDontFree: [T.u32, 1],
    fDontCallFreeInst: [T.u32, 1],
    fInOnlyParam: [T.u32, 1],
    fHasReturn: [T.u32, 1],
    fHasExtensions: [T.u32, 1],
    fHasNewCorrDesc: [T.u32, 1],
    fIsIn: [T.u32, 1],
    fIsOut: [T.u32, 1],
    fIsOicf: [T.u32, 1],
    fBufferValid: [T.u32, 1],
    fHasMemoryValidateCallback: [T.u32, 1],
    fInFree: [T.u32, 1],
    fNeedMCCP: [T.u32, 1],
    fUnused: [T.i32, 3],
    fUnused2: [T.i32, 16],
    dwDestContext: T.DWORD,
    pvDestContext: Pointer(null),
    SavedContextHandles: Pointer(T.NDR_SCONTEXT),
    ParamNumber: T.LONG,
    pRpcChannelBuffer: Pointer(Struct('IRpcChannelBuffer', null)),
    pArrayInfo: T.PARRAY_INFO,
    SizePtrCountArray: Pointer(T.ULONG),
    SizePtrOffsetArray: Pointer(T.ULONG),
    SizePtrLengthArray: Pointer(T.ULONG),
    pArgQueue: Pointer(null),
    dwStubPhase: T.DWORD,
    LowStackMark: Pointer(null),
    pAsyncMsg: T.PNDR_ASYNC_MESSAGE,
    pCorrInfo: T.PNDR_CORRELATION_INFO,
    pCorrMemory: Pointer(T.u8),
    pMemoryList: Pointer(null),
    pCSInfo: Pointer(T.CS_STUB_INFO),
    ConformanceMark: Pointer(T.u8),
    VarianceMark: Pointer(T.u8),
    Unused: T.INT_PTR,
    pContext: Pointer(Struct('_NDR_PROC_CONTEXT', null)),
    ContextHandleHash: Pointer(null),
    pUserMarshalList: Pointer(null),
    Reserved51_3: T.INT_PTR,
    Reserved51_4: T.INT_PTR,
    Reserved51_5: T.INT_PTR
}));
T.GENERIC_BINDING_ROUTINE = Pointer(Fn(Pointer(null), [[Pointer(null)]]));
T.GENERIC_UNBIND_ROUTINE = Pointer(Fn(null, [[Pointer(null)], [Pointer(T.u8)]]));
T.GENERIC_BINDING_ROUTINE_PAIR = Struct('_GENERIC_BINDING_ROUTINE_PAIR', {
    pfnBind: T.GENERIC_BINDING_ROUTINE,
    pfnUnbind: T.GENERIC_UNBIND_ROUTINE
});
T.PGENERIC_BINDING_ROUTINE_PAIR = Pointer(Struct('_GENERIC_BINDING_ROUTINE_PAIR', {
    pfnBind: T.GENERIC_BINDING_ROUTINE,
    pfnUnbind: T.GENERIC_UNBIND_ROUTINE
}));
T.GENERIC_BINDING_INFO = Struct('__GENERIC_BINDING_INFO', {
    pObj: Pointer(null),
    Size: T.u32,
    pfnBind: T.GENERIC_BINDING_ROUTINE,
    pfnUnbind: T.GENERIC_UNBIND_ROUTINE
});
T.PGENERIC_BINDING_INFO = Pointer(Struct('__GENERIC_BINDING_INFO', {
    pObj: Pointer(null),
    Size: T.u32,
    pfnBind: T.GENERIC_BINDING_ROUTINE,
    pfnUnbind: T.GENERIC_UNBIND_ROUTINE
}));
T.XMIT_HELPER_ROUTINE = Pointer(Fn(null, [[T.PMIDL_STUB_MESSAGE]]));
T.XMIT_ROUTINE_QUINTUPLE = Struct('_XMIT_ROUTINE_QUINTUPLE', {
    pfnTranslateToXmit: T.XMIT_HELPER_ROUTINE,
    pfnTranslateFromXmit: T.XMIT_HELPER_ROUTINE,
    pfnFreeXmit: T.XMIT_HELPER_ROUTINE,
    pfnFreeInst: T.XMIT_HELPER_ROUTINE
});
T.PXMIT_ROUTINE_QUINTUPLE = Pointer(Struct('_XMIT_ROUTINE_QUINTUPLE', {
    pfnTranslateToXmit: T.XMIT_HELPER_ROUTINE,
    pfnTranslateFromXmit: T.XMIT_HELPER_ROUTINE,
    pfnFreeXmit: T.XMIT_HELPER_ROUTINE,
    pfnFreeInst: T.XMIT_HELPER_ROUTINE
}));
T.USER_MARSHAL_SIZING_ROUTINE = Pointer(Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(null)]]));
T.USER_MARSHAL_MARSHALLING_ROUTINE = Pointer(Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(null)]]));
T.USER_MARSHAL_UNMARSHALLING_ROUTINE = Pointer(Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(null)]]));
T.USER_MARSHAL_FREEING_ROUTINE = Pointer(Fn(null, [[Pointer(T.ULONG)], [Pointer(null)]]));
T.USER_MARSHAL_ROUTINE_QUADRUPLE = Struct('_USER_MARSHAL_ROUTINE_QUADRUPLE', {
    pfnBufferSize: T.USER_MARSHAL_SIZING_ROUTINE,
    pfnMarshall: T.USER_MARSHAL_MARSHALLING_ROUTINE,
    pfnUnmarshall: T.USER_MARSHAL_UNMARSHALLING_ROUTINE,
    pfnFree: T.USER_MARSHAL_FREEING_ROUTINE
});
T.USER_MARSHAL_CB_TYPE = Enum('USER_MARSHAL_CB_FREE', {
    USER_MARSHAL_CB_BUFFER_SIZE: 0,
    USER_MARSHAL_CB_MARSHALL: 1,
    USER_MARSHAL_CB_UNMARSHALL: 2,
    USER_MARSHAL_CB_FREE: 3
});
T.USER_MARSHAL_CB = Struct('_USER_MARSHAL_CB', {
    Flags: T.ULONG,
    pStubMsg: T.PMIDL_STUB_MESSAGE,
    pReserve: T.PFORMAT_STRING,
    Signature: T.ULONG,
    CBType: T.USER_MARSHAL_CB_TYPE,
    pFormat: T.PFORMAT_STRING,
    pTypeFormat: T.PFORMAT_STRING
});
T.MALLOC_FREE_STRUCT = Struct('_MALLOC_FREE_STRUCT', {
    pfnAllocate: Pointer(Fn(Pointer(null), [[T.SIZE_T]])),
    pfnFree: Pointer(Fn(null, [[Pointer(null)]]))
});
T.COMM_FAULT_OFFSETS = Struct('_COMM_FAULT_OFFSETS', {
    CommOffset: T.i16,
    FaultOffset: T.i16
});
T.MIDL_STUB_DESC = Struct('_MIDL_STUB_DESC', {
    RpcInterfaceInformation: Pointer(null),
    pfnAllocate: Pointer(Fn(Pointer(null), [[T.SIZE_T]])),
    pfnFree: Pointer(Fn(null, [[Pointer(null)]])),
    IMPLICIT_HANDLE_INFO: Union('', {
        pAutoHandle: Pointer(T.handle_t),
        pPrimitiveHandle: Pointer(T.handle_t),
        pGenericBindingInfo: T.PGENERIC_BINDING_INFO
    }),
    apfnNdrRundownRoutines: Pointer(T.NDR_RUNDOWN),
    aGenericBindingRoutinePairs: Pointer(T.GENERIC_BINDING_ROUTINE_PAIR),
    apfnExprEval: Pointer(T.EXPR_EVAL),
    aXmitQuintuple: Pointer(T.XMIT_ROUTINE_QUINTUPLE),
    pFormatTypes: Pointer(T.u8),
    fCheckBounds: T.i32,
    Version: T.ULONG,
    pMallocFreeStruct: Pointer(T.MALLOC_FREE_STRUCT),
    MIDLVersion: T.LONG,
    CommFaultOffsets: Pointer(T.COMM_FAULT_OFFSETS),
    aUserMarshalQuadruple: Pointer(T.USER_MARSHAL_ROUTINE_QUADRUPLE),
    NotifyRoutineTable: Pointer(T.NDR_NOTIFY_ROUTINE),
    mFlags: T.ULONG_PTR,
    Reserved3: T.ULONG_PTR,
    Reserved4: T.ULONG_PTR,
    Reserved5: T.ULONG_PTR
});
T.PMIDL_STUB_DESC = Pointer(T.MIDL_STUB_DESC);
T.MIDL_FORMAT_STRING = Struct('_MIDL_FORMAT_STRING', {
    Pad: T.i16,
    Format: ArrayType(T.u8, 0)
});
T.MIDL_SYNTAX_INFO = Struct('_MIDL_SYNTAX_INFO', {
    TransferSyntax: T.RPC_SYNTAX_IDENTIFIER,
    DispatchTable: Pointer(T.RPC_DISPATCH_TABLE),
    ProcString: T.PFORMAT_STRING,
    FmtStringOffset: Pointer(T.u16),
    TypeString: T.PFORMAT_STRING,
    aUserMarshalQuadruple: Pointer(null),
    pReserved1: T.ULONG_PTR,
    pReserved2: T.ULONG_PTR
});
T.PMIDL_SYNTAX_INFO = Pointer(Struct('_MIDL_SYNTAX_INFO', {
    TransferSyntax: T.RPC_SYNTAX_IDENTIFIER,
    DispatchTable: Pointer(T.RPC_DISPATCH_TABLE),
    ProcString: T.PFORMAT_STRING,
    FmtStringOffset: Pointer(T.u16),
    TypeString: T.PFORMAT_STRING,
    aUserMarshalQuadruple: Pointer(null),
    pReserved1: T.ULONG_PTR,
    pReserved2: T.ULONG_PTR
}));
T.STUB_THUNK = Pointer(Fn(null, [[T.PMIDL_STUB_MESSAGE]]));
T.SERVER_ROUTINE = Pointer(Fn(T.LONG, []));
T.MIDL_SERVER_INFO = Struct('_MIDL_SERVER_INFO_', {
    pStubDesc: T.PMIDL_STUB_DESC,
    DispatchTable: Pointer(T.SERVER_ROUTINE),
    ProcString: T.PFORMAT_STRING,
    FmtStringOffset: Pointer(T.u16),
    ThunkTable: Pointer(T.STUB_THUNK),
    pTransferSyntax: T.PRPC_SYNTAX_IDENTIFIER,
    nCount: T.ULONG_PTR,
    pSyntaxInfo: T.PMIDL_SYNTAX_INFO
});
T.PMIDL_SERVER_INFO = Pointer(Struct('_MIDL_SERVER_INFO_', {
    pStubDesc: T.PMIDL_STUB_DESC,
    DispatchTable: Pointer(T.SERVER_ROUTINE),
    ProcString: T.PFORMAT_STRING,
    FmtStringOffset: Pointer(T.u16),
    ThunkTable: Pointer(T.STUB_THUNK),
    pTransferSyntax: T.PRPC_SYNTAX_IDENTIFIER,
    nCount: T.ULONG_PTR,
    pSyntaxInfo: T.PMIDL_SYNTAX_INFO
}));
T.MIDL_STUBLESS_PROXY_INFO = Struct('_MIDL_STUBLESS_PROXY_INFO', {
    pStubDesc: T.PMIDL_STUB_DESC,
    ProcFormatString: T.PFORMAT_STRING,
    FormatStringOffset: Pointer(T.u16),
    pTransferSyntax: T.PRPC_SYNTAX_IDENTIFIER,
    nCount: T.ULONG_PTR,
    pSyntaxInfo: T.PMIDL_SYNTAX_INFO
});
T.PMIDL_STUBLESS_PROXY_INFO = Pointer(Struct('_MIDL_STUBLESS_PROXY_INFO', {
    pStubDesc: T.PMIDL_STUB_DESC,
    ProcFormatString: T.PFORMAT_STRING,
    FormatStringOffset: Pointer(T.u16),
    pTransferSyntax: T.PRPC_SYNTAX_IDENTIFIER,
    nCount: T.ULONG_PTR,
    pSyntaxInfo: T.PMIDL_SYNTAX_INFO
}));
T.CLIENT_CALL_RETURN = Union('_CLIENT_CALL_RETURN', {
    Pointer: Pointer(null),
    Simple: T.LONG_PTR
});
T.STUB_PHASE = Enum('STUB_CALL_SERVER_NO_HRESULT', {
    STUB_UNMARSHAL: 0,
    STUB_CALL_SERVER: 1,
    STUB_MARSHAL: 2,
    STUB_CALL_SERVER_NO_HRESULT: 3
});
T.PROXY_PHASE = Enum('PROXY_UNMARSHAL', {
    PROXY_CALCSIZE: 0,
    PROXY_GETBUFFER: 1,
    PROXY_MARSHAL: 2,
    PROXY_SENDRECEIVE: 3,
    PROXY_UNMARSHAL: 4
});
T.XLAT_SIDE = Enum('XLAT_CLIENT', {
    XLAT_SERVER: 1,
    XLAT_CLIENT: 2
});
T.FULL_PTR_TO_REFID_ELEMENT = Struct('_FULL_PTR_TO_REFID_ELEMENT', {
    Next: Pointer(Struct('_FULL_PTR_TO_REFID_ELEMENT', null)),
    Pointer: Pointer(null),
    RefId: T.ULONG,
    State: T.u8
});
T.PFULL_PTR_TO_REFID_ELEMENT = Pointer(Struct('_FULL_PTR_TO_REFID_ELEMENT', {
    Next: Pointer(Struct('_FULL_PTR_TO_REFID_ELEMENT', null)),
    Pointer: Pointer(null),
    RefId: T.ULONG,
    State: T.u8
}));
T.FULL_PTR_XLAT_TABLES = Struct('_FULL_PTR_XLAT_TABLES', {
    RefIdToPointer: Struct('', {
        XlatTable: Pointer(Pointer(null)),
        StateTable: Pointer(T.u8),
        NumberOfEntries: T.ULONG
    }),
    PointerToRefId: Struct('', {
        XlatTable: Pointer(T.PFULL_PTR_TO_REFID_ELEMENT),
        NumberOfBuckets: T.ULONG,
        HashMask: T.ULONG
    }),
    NextRefId: T.ULONG,
    XlatSide: T.XLAT_SIDE
});
T.PFULL_PTR_XLAT_TABLES = Pointer(Struct('_FULL_PTR_XLAT_TABLES', {
    RefIdToPointer: Struct('', {
        XlatTable: Pointer(Pointer(null)),
        StateTable: Pointer(T.u8),
        NumberOfEntries: T.ULONG
    }),
    PointerToRefId: Struct('', {
        XlatTable: Pointer(T.PFULL_PTR_TO_REFID_ELEMENT),
        NumberOfBuckets: T.ULONG,
        HashMask: T.ULONG
    }),
    NextRefId: T.ULONG,
    XlatSide: T.XLAT_SIDE
}));
T.error_status_t = T.ULONG;
T.NDR_CCONTEXT = Pointer(null);
T.SCONTEXT_QUEUE = Struct('_SCONTEXT_QUEUE', {
    NumberOfObjects: T.ULONG,
    ArrayOfObjects: Pointer(T.NDR_SCONTEXT)
});
T.PSCONTEXT_QUEUE = Pointer(Struct('_SCONTEXT_QUEUE', {
    NumberOfObjects: T.ULONG,
    ArrayOfObjects: Pointer(T.NDR_SCONTEXT)
}));
T.NDR_USER_MARSHAL_INFO_LEVEL1 = Struct('_NDR_USER_MARSHAL_INFO_LEVEL1', {
    Buffer: Pointer(null),
    BufferSize: T.ULONG,
    pfnAllocate: Pointer(Fn(Pointer(null), [[T.SIZE_T]])),
    pfnFree: Pointer(Fn(null, [[Pointer(null)]])),
    pRpcChannelBuffer: Pointer(Struct('IRpcChannelBuffer', null)),
    Reserved: ArrayType(T.ULONG_PTR, 5)
});
T.NDR_USER_MARSHAL_INFO = Struct('_NDR_USER_MARSHAL_INFO', {
    InformationLevel: T.ULONG,
    __unnamed0: Union('', {
        Level1: T.NDR_USER_MARSHAL_INFO_LEVEL1
    })
});
T.IRpcStubBuffer = Struct('IRpcStubBuffer', null);
T.IRpcChannelBuffer = Struct('IRpcChannelBuffer', null);
T.DOUBLE = T.f64;
T.OLECHAR = T.WCHAR;
T.LPOLESTR = Pointer(T.OLECHAR);
T.LPCOLESTR = Pointer(T.OLECHAR);
T.SCODE = T.LONG;
T.COAUTHIDENTITY = Struct('_COAUTHIDENTITY', {
    User: Pointer(T.USHORT),
    UserLength: T.ULONG,
    Domain: Pointer(T.USHORT),
    DomainLength: T.ULONG,
    Password: Pointer(T.USHORT),
    PasswordLength: T.ULONG,
    Flags: T.ULONG
});
T.COAUTHINFO = Struct('_COAUTHINFO', {
    dwAuthnSvc: T.DWORD,
    dwAuthzSvc: T.DWORD,
    pwszServerPrincName: T.LPWSTR,
    dwAuthnLevel: T.DWORD,
    dwImpersonationLevel: T.DWORD,
    pAuthIdentityData: Pointer(T.COAUTHIDENTITY),
    dwCapabilities: T.DWORD
});
T.MEMCTX = Enum('MEMCTX_SAME', {
    MEMCTX_TASK: 1,
    MEMCTX_SHARED: 2,
    MEMCTX_MACSYSTEM: 3,
    MEMCTX_UNKNOWN: 4,
    MEMCTX_SAME: 5
});
T.CLSCTX = Enum('CLSCTX_FROM_DEFAULT_CONTEXT', {
    CLSCTX_INPROC_SERVER: 1,
    CLSCTX_INPROC_HANDLER: 2,
    CLSCTX_LOCAL_SERVER: 4,
    CLSCTX_INPROC_SERVER16: 8,
    CLSCTX_REMOTE_SERVER: 16,
    CLSCTX_INPROC_HANDLER16: 32,
    CLSCTX_INPROC_SERVERX86: 64,
    CLSCTX_INPROC_HANDLERX86: 128,
    CLSCTX_ESERVER_HANDLER: 256,
    CLSCTX_NO_CODE_DOWNLOAD: 1024,
    CLSCTX_NO_CUSTOM_MARSHAL: 4096,
    CLSCTX_ENABLE_CODE_DOWNLOAD: 8192,
    CLSCTX_NO_FAILURE_LOG: 16384,
    CLSCTX_DISABLE_AAA: 32768,
    CLSCTX_ENABLE_AAA: 65536,
    CLSCTX_FROM_DEFAULT_CONTEXT: 131072
});
T.MSHLFLAGS = Enum('MSHLFLAGS_NOPING', {
    MSHLFLAGS_NORMAL: 0,
    MSHLFLAGS_TABLESTRONG: 1,
    MSHLFLAGS_TABLEWEAK: 2,
    MSHLFLAGS_NOPING: 4
});
T.MSHCTX = Enum('MSHCTX_CROSSCTX', {
    MSHCTX_LOCAL: 0,
    MSHCTX_NOSHAREDMEM: 1,
    MSHCTX_DIFFERENTMACHINE: 2,
    MSHCTX_INPROC: 3,
    MSHCTX_CROSSCTX: 4
});
T.BYTE_BLOB = Struct('_BYTE_BLOB', {
    clSize: T.ULONG,
    abData: ArrayType(T.byte, 1)
});
T.UP_BYTE_BLOB = Pointer(T.BYTE_BLOB);
T.FLAGGED_BYTE_BLOB = Struct('_FLAGGED_BYTE_BLOB', {
    fFlags: T.ULONG,
    clSize: T.ULONG,
    abData: ArrayType(T.byte, 1)
});
T.UP_FLAGGED_BYTE_BLOB = Pointer(T.FLAGGED_BYTE_BLOB);
T.FLAGGED_WORD_BLOB = Struct('_FLAGGED_WORD_BLOB', {
    fFlags: T.ULONG,
    clSize: T.ULONG,
    asData: ArrayType(T.u16, 1)
});
T.UP_FLAGGED_WORD_BLOB = Pointer(T.FLAGGED_WORD_BLOB);
T.BYTE_SIZEDARR = Struct('_BYTE_SIZEDARR', {
    clSize: T.ULONG,
    pData: Pointer(T.byte)
});
T.WORD_SIZEDARR = Struct('_SHORT_SIZEDARR', {
    clSize: T.ULONG,
    pData: Pointer(T.u16)
});
T.DWORD_SIZEDARR = Struct('_LONG_SIZEDARR', {
    clSize: T.ULONG,
    pData: Pointer(T.ULONG)
});
T.HYPER_SIZEDARR = Struct('_HYPER_SIZEDARR', {
    clSize: T.ULONG,
    pData: Pointer(T.hyper)
});
T.userCLIPFORMAT = Struct('_userCLIPFORMAT', {
    fContext: T.LONG,
    u: Union('', {
        dwValue: T.DWORD,
        pwszName: T.LPWSTR
    })
});
T.wireCLIPFORMAT = Pointer(T.userCLIPFORMAT);
T.CLIPFORMAT = T.WORD;
T.RemHGLOBAL = Struct('tagRemHGLOBAL', {
    fNullHGlobal: T.LONG,
    cbData: T.ULONG,
    data: ArrayType(T.byte, 1)
});
T.userHGLOBAL = Struct('_userHGLOBAL', {
    fContext: T.LONG,
    u: Union('', {
        hInproc: T.LONG,
        hRemote: Pointer(T.FLAGGED_BYTE_BLOB),
        hInproc64: T.INT64
    })
});
T.wireHGLOBAL = Pointer(T.userHGLOBAL);
T.RemHMETAFILEPICT = Struct('tagRemHMETAFILEPICT', {
    mm: T.LONG,
    xExt: T.LONG,
    yExt: T.LONG,
    cbData: T.ULONG,
    data: ArrayType(T.byte, 1)
});
T.userHMETAFILE = Struct('_userHMETAFILE', {
    fContext: T.LONG,
    u: Union('', {
        hInproc: T.LONG,
        hRemote: Pointer(T.BYTE_BLOB),
        hInproc64: T.INT64
    })
});
T.wireHMETAFILE = Pointer(T.userHMETAFILE);
T.remoteMETAFILEPICT = Struct('_remoteMETAFILEPICT', {
    mm: T.LONG,
    xExt: T.LONG,
    yExt: T.LONG,
    hMF: Pointer(T.userHMETAFILE)
});
T.userHMETAFILEPICT = Struct('_userHMETAFILEPICT', {
    fContext: T.LONG,
    u: Union('', {
        hInproc: T.LONG,
        hRemote: Pointer(T.remoteMETAFILEPICT),
        hInproc64: T.INT64
    })
});
T.wireHMETAFILEPICT = Pointer(T.userHMETAFILEPICT);
T.RemHENHMETAFILE = Struct('tagRemHENHMETAFILE', {
    cbData: T.ULONG,
    data: ArrayType(T.byte, 1)
});
T.userHENHMETAFILE = Struct('_userHENHMETAFILE', {
    fContext: T.LONG,
    u: Union('', {
        hInproc: T.LONG,
        hRemote: Pointer(T.BYTE_BLOB),
        hInproc64: T.INT64
    })
});
T.wireHENHMETAFILE = Pointer(T.userHENHMETAFILE);
T.RemHBITMAP = Struct('tagRemHBITMAP', {
    cbData: T.ULONG,
    data: ArrayType(T.byte, 1)
});
T.userBITMAP = Struct('_userBITMAP', {
    bmType: T.LONG,
    bmWidth: T.LONG,
    bmHeight: T.LONG,
    bmWidthBytes: T.LONG,
    bmPlanes: T.WORD,
    bmBitsPixel: T.WORD,
    cbSize: T.ULONG,
    pBuffer: ArrayType(T.byte, 1)
});
T.userHBITMAP = Struct('_userHBITMAP', {
    fContext: T.LONG,
    u: Union('', {
        hInproc: T.LONG,
        hRemote: Pointer(T.userBITMAP),
        hInproc64: T.INT64
    })
});
T.wireHBITMAP = Pointer(T.userHBITMAP);
T.RemHPALETTE = Struct('tagRemHPALETTE', {
    cbData: T.ULONG,
    data: ArrayType(T.byte, 1)
});
T.rpcLOGPALETTE = Struct('tagrpcLOGPALETTE', {
    palVersion: T.WORD,
    palNumEntries: T.WORD,
    palPalEntry: ArrayType(T.PALETTEENTRY, 1)
});
T.userHPALETTE = Struct('_userHPALETTE', {
    fContext: T.LONG,
    u: Union('', {
        hInproc: T.LONG,
        hRemote: Pointer(T.rpcLOGPALETTE),
        hInproc64: T.INT64
    })
});
T.wireHPALETTE = Pointer(T.userHPALETTE);
T.HMETAFILEPICT = Pointer(null);
T.RemotableHandle = Struct('_RemotableHandle', {
    fContext: T.LONG,
    u: Union('', {
        hInproc: T.LONG,
        hRemote: T.LONG
    })
});
T.wireHACCEL = Pointer(T.RemotableHandle);
T.wireHBRUSH = Pointer(T.RemotableHandle);
T.wireHDC = Pointer(T.RemotableHandle);
T.wireHFONT = Pointer(T.RemotableHandle);
T.wireHICON = Pointer(T.RemotableHandle);
T.wireHMENU = Pointer(T.RemotableHandle);
T.wireHWND = Pointer(T.RemotableHandle);
T.DVASPECT = Enum('DVASPECT_DOCPRINT', {
    DVASPECT_CONTENT: 1,
    DVASPECT_THUMBNAIL: 2,
    DVASPECT_ICON: 4,
    DVASPECT_DOCPRINT: 8
});
T.STGC = Enum('STGC_CONSOLIDATE', {
    STGC_DEFAULT: 0,
    STGC_OVERWRITE: 1,
    STGC_ONLYIFCURRENT: 2,
    STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE: 4,
    STGC_CONSOLIDATE: 8
});
T.STGMOVE = Enum('STGMOVE_SHALLOWCOPY', {
    STGMOVE_MOVE: 0,
    STGMOVE_COPY: 1,
    STGMOVE_SHALLOWCOPY: 2
});
T.STATFLAG = Enum('STATFLAG_NOOPEN', {
    STATFLAG_DEFAULT: 0,
    STATFLAG_NONAME: 1,
    STATFLAG_NOOPEN: 2
});
T.DATE = T.f64;
T.CY = Union('tagCY', {
    __unnamed0: Struct('', {
        Lo: T.ULONG,
        Hi: T.LONG
    }),
    int64: T.LONGLONG
});
T.LPCY = Pointer(T.CY);
T.DECIMAL = Struct('tagDEC', {
    wReserved: T.USHORT,
    __unnamed0: Union('', {
        __unnamed0: Struct('', {
            scale: T.BYTE,
            sign: T.BYTE
        }),
        signscale: T.USHORT
    }),
    Hi32: T.ULONG,
    __unnamed1: Union('', {
        __unnamed0: Struct('', {
            Lo32: T.ULONG,
            Mid32: T.ULONG
        }),
        Lo64: T.ULONGLONG
    })
});
T.LPDECIMAL = Pointer(T.DECIMAL);
T.wireBSTR = Pointer(T.FLAGGED_WORD_BLOB);
T.BSTR = Pointer(T.OLECHAR);
T.LPBSTR = Pointer(T.BSTR);
T.VARIANT_BOOL = T.i16;
T._VARIANT_BOOL = T.VARIANT_BOOL;
T.BSTRBLOB = Struct('tagBSTRBLOB', {
    cbSize: T.ULONG,
    pData: Pointer(T.BYTE)
});
T.LPBSTRBLOB = Pointer(Struct('tagBSTRBLOB', null));
T.CLIPDATA = Struct('tagCLIPDATA', {
    cbSize: T.ULONG,
    ulClipFmt: T.LONG,
    pClipData: Pointer(T.BYTE)
});
T.PROPID = T.ULONG;
T.VARTYPE = T.u16;
T.CSPLATFORM = Struct('tagCSPLATFORM', {
    dwPlatformId: T.DWORD,
    dwVersionHi: T.DWORD,
    dwVersionLo: T.DWORD,
    dwProcessorArch: T.DWORD
});
T.QUERYCONTEXT = Struct('tagQUERYCONTEXT', {
    dwContext: T.DWORD,
    Platform: T.CSPLATFORM,
    Locale: T.LCID,
    dwVersionHi: T.DWORD,
    dwVersionLo: T.DWORD
});
T.TYSPEC = Enum('TYSPEC_OBJECTID', {
    TYSPEC_CLSID: 0,
    TYSPEC_FILEEXT: 1,
    TYSPEC_MIMETYPE: 2,
    TYSPEC_PROGID: 3,
    TYSPEC_FILENAME: 4,
    TYSPEC_PACKAGENAME: 5,
    TYSPEC_OBJECTID: 6
});
T.uCLSSPEC = Struct('__WIDL_wtypes_generated_name_00000000', {
    tyspec: T.DWORD,
    tagged_union: Union('', {
        clsid: T.CLSID,
        pFileExt: T.LPOLESTR,
        pMimeType: T.LPOLESTR,
        pProgId: T.LPOLESTR,
        pFileName: T.LPOLESTR,
        ByName: Struct('', {
            pPackageName: T.LPOLESTR,
            PolicyId: T.GUID
        }),
        ByObjectId: Struct('', {
            ObjectId: T.GUID,
            PolicyId: T.GUID
        })
    })
});
T.PROPERTYKEY = Struct('_tagpropertykey', {
    fmtid: T.GUID,
    pid: T.DWORD
});
T.IUnknown = Struct('IUnknown', null);
T.IClassFactory = Struct('IClassFactory', null);
T.LPUNKNOWN = Pointer(T.IUnknown);
T.IUnknownVtbl = Struct('IUnknownVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IUnknown), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IUnknown), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IUnknown), 'This']]))
});
T.LPCLASSFACTORY = Pointer(T.IClassFactory);
T.IClassFactoryVtbl = Struct('IClassFactoryVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IClassFactory), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IClassFactory), 'This']])),
    CreateInstance: Pointer(Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    LockServer: Pointer(Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [T.BOOL, 'fLock']]))
});
T.IMarshal = Struct('IMarshal', null);
T.IMarshal2 = Struct('IMarshal2', null);
T.IStdMarshalInfo = Struct('IStdMarshalInfo', null);
T.IExternalConnection = Struct('IExternalConnection', null);
T.IMultiQI = Struct('IMultiQI', null);
T.IMalloc = Struct('IMalloc', null);
T.IMallocSpy = Struct('IMallocSpy', null);
T.IInternalUnknown = Struct('IInternalUnknown', null);
T.IEnumUnknown = Struct('IEnumUnknown', null);
T.ISurrogate = Struct('ISurrogate', null);
T.IGlobalInterfaceTable = Struct('IGlobalInterfaceTable', null);
T.IBindCtx = Struct('IBindCtx', null);
T.IEnumMoniker = Struct('IEnumMoniker', null);
T.IRunnableObject = Struct('IRunnableObject', null);
T.IRunningObjectTable = Struct('IRunningObjectTable', null);
T.IPersist = Struct('IPersist', null);
T.IPersistStream = Struct('IPersistStream', null);
T.IMoniker = Struct('IMoniker', null);
T.IROTData = Struct('IROTData', null);
T.IEnumString = Struct('IEnumString', null);
T.IClassActivator = Struct('IClassActivator', null);
T.ISequentialStream = Struct('ISequentialStream', null);
T.IStream = Struct('IStream', null);
T.IEnumSTATSTG = Struct('IEnumSTATSTG', null);
T.IStorage = Struct('IStorage', null);
T.IPersistFile = Struct('IPersistFile', null);
T.IPersistStorage = Struct('IPersistStorage', null);
T.IRootStorage = Struct('IRootStorage', null);
T.ILockBytes = Struct('ILockBytes', null);
T.IFillLockBytes = Struct('IFillLockBytes', null);
T.IProgressNotify = Struct('IProgressNotify', null);
T.ILayoutStorage = Struct('ILayoutStorage', null);
T.IBlockingLock = Struct('IBlockingLock', null);
T.ITimeAndNoticeControl = Struct('ITimeAndNoticeControl', null);
T.IOplockStorage = Struct('IOplockStorage', null);
T.IEnumFORMATETC = Struct('IEnumFORMATETC', null);
T.IEnumSTATDATA = Struct('IEnumSTATDATA', null);
T.IAdviseSink = Struct('IAdviseSink', null);
T.IAdviseSink2 = Struct('IAdviseSink2', null);
T.IDataObject = Struct('IDataObject', null);
T.IDataAdviseHolder = Struct('IDataAdviseHolder', null);
T.IMessageFilter = Struct('IMessageFilter', null);
T.IRpcChannelBuffer2 = Struct('IRpcChannelBuffer2', null);
T.IRpcChannelBuffer3 = Struct('IRpcChannelBuffer3', null);
T.IAsyncRpcChannelBuffer = Struct('IAsyncRpcChannelBuffer', null);
T.IRpcSyntaxNegotiate = Struct('IRpcSyntaxNegotiate', null);
T.IRpcProxyBuffer = Struct('IRpcProxyBuffer', null);
T.IPSFactoryBuffer = Struct('IPSFactoryBuffer', null);
T.IChannelHook = Struct('IChannelHook', null);
T.IClientSecurity = Struct('IClientSecurity', null);
T.IServerSecurity = Struct('IServerSecurity', null);
T.IAsyncSetup = Struct('IAsyncSetup', null);
T.IDirectWriterLock = Struct('IDirectWriterLock', null);
T.ISynchronize = Struct('ISynchronize', null);
T.ISynchronizeHandle = Struct('ISynchronizeHandle', null);
T.ISynchronizeEvent = Struct('ISynchronizeEvent', null);
T.ISynchronizeContainer = Struct('ISynchronizeContainer', null);
T.ISynchronizeMutex = Struct('ISynchronizeMutex', null);
T.ICancelMethodCalls = Struct('ICancelMethodCalls', null);
T.IAsyncManager = Struct('IAsyncManager', null);
T.ICallFactory = Struct('ICallFactory', null);
T.IRpcOptions = Struct('IRpcOptions', null);
T.IRpcHelper = Struct('IRpcHelper', null);
T.IReleaseMarshalBuffers = Struct('IReleaseMarshalBuffers', null);
T.IWaitMultiple = Struct('IWaitMultiple', null);
T.IUrlMon = Struct('IUrlMon', null);
T.IForegroundTransfer = Struct('IForegroundTransfer', null);
T.IAddrTrackingControl = Struct('IAddrTrackingControl', null);
T.IAddrExclusionControl = Struct('IAddrExclusionControl', null);
T.IComThreadingInfo = Struct('IComThreadingInfo', null);
T.IProcessInitControl = Struct('IProcessInitControl', null);
T.IInitializeSpy = Struct('IInitializeSpy', null);
T.IThumbnailExtractor = Struct('IThumbnailExtractor', null);
T.IEnumContextProps = Struct('IEnumContextProps', null);
T.IContext = Struct('IContext', null);
T.IObjContext = Struct('IObjContext', null);
T.COSERVERINFO = Struct('_COSERVERINFO', {
    dwReserved1: T.DWORD,
    pwszName: T.LPWSTR,
    pAuthInfo: Pointer(T.COAUTHINFO),
    dwReserved2: T.DWORD
});
T.LPMARSHAL = Pointer(T.IMarshal);
T.IMarshalVtbl = Struct('IMarshalVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IMarshal), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IMarshal), 'This']])),
    GetUnmarshalClass: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags'], [Pointer(T.CLSID), 'pCid']])),
    GetMarshalSizeMax: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags'], [Pointer(T.DWORD), 'pSize']])),
    MarshalInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IStream), 'pStm'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags']])),
    UnmarshalInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IStream), 'pStm'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']])),
    ReleaseMarshalData: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IStream), 'pStm']])),
    DisconnectObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [T.DWORD, 'dwReserved']]))
});
T.LPMARSHAL2 = Pointer(T.IMarshal2);
T.IMarshal2Vtbl = Struct('IMarshal2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IMarshal2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IMarshal2), 'This']])),
    GetUnmarshalClass: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags'], [Pointer(T.CLSID), 'pCid']])),
    GetMarshalSizeMax: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags'], [Pointer(T.DWORD), 'pSize']])),
    MarshalInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal2), 'This'], [Pointer(T.IStream), 'pStm'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags']])),
    UnmarshalInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal2), 'This'], [Pointer(T.IStream), 'pStm'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']])),
    ReleaseMarshalData: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal2), 'This'], [Pointer(T.IStream), 'pStm']])),
    DisconnectObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IMarshal2), 'This'], [T.DWORD, 'dwReserved']]))
});
T.LPSTDMARSHALINFO = Pointer(T.IStdMarshalInfo);
T.IStdMarshalInfoVtbl = Struct('IStdMarshalInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IStdMarshalInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IStdMarshalInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IStdMarshalInfo), 'This']])),
    GetClassForHandler: Pointer(Fn(T.HRESULT, [[Pointer(T.IStdMarshalInfo), 'This'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [Pointer(T.CLSID), 'pClsid']]))
});
T.LPEXTERNALCONNECTION = Pointer(T.IExternalConnection);
T.EXTCONN = Enum('EXTCONN_CALLABLE', {
    EXTCONN_STRONG: 1,
    EXTCONN_WEAK: 2,
    EXTCONN_CALLABLE: 4
});
T.IExternalConnectionVtbl = Struct('IExternalConnectionVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IExternalConnection), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IExternalConnection), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IExternalConnection), 'This']])),
    AddConnection: Pointer(Fn(T.DWORD, [[Pointer(T.IExternalConnection), 'This'], [T.DWORD, 'extconn'], [T.DWORD, 'reserved']])),
    ReleaseConnection: Pointer(Fn(T.DWORD, [[Pointer(T.IExternalConnection), 'This'], [T.DWORD, 'extconn'], [T.DWORD, 'reserved'], [T.BOOL, 'fLastReleaseCloses']]))
});
T.LPMULTIQI = Pointer(T.IMultiQI);
T.MULTI_QI = Struct('tagMULTI_QI', {
    pIID: Pointer(T.IID),
    pItf: Pointer(T.IUnknown),
    hr: T.HRESULT
});
T.IMultiQIVtbl = Struct('IMultiQIVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMultiQI), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IMultiQI), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IMultiQI), 'This']])),
    QueryMultipleInterfaces: Pointer(Fn(T.HRESULT, [[Pointer(T.IMultiQI), 'This'], [T.ULONG, 'cMQIs'], [Pointer(T.MULTI_QI), 'pMQIs']]))
});
T.LPMALLOC = Pointer(T.IMalloc);
T.IMallocVtbl = Struct('IMallocVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMalloc), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IMalloc), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IMalloc), 'This']])),
    Alloc: Pointer(Fn(T.LPVOID, [[Pointer(T.IMalloc), 'This'], [T.ULONG, 'cb']])),
    Realloc: Pointer(Fn(T.LPVOID, [[Pointer(T.IMalloc), 'This'], [T.LPVOID, 'pv'], [T.ULONG, 'cb']])),
    Free: Pointer(Fn(null, [[Pointer(T.IMalloc), 'This'], [T.LPVOID, 'pv']])),
    GetSize: Pointer(Fn(T.ULONG, [[Pointer(T.IMalloc), 'This'], [T.LPVOID, 'pv']])),
    DidAlloc: Pointer(Fn(T.i32, [[Pointer(T.IMalloc), 'This'], [T.LPVOID, 'pv']])),
    HeapMinimize: Pointer(Fn(null, [[Pointer(T.IMalloc), 'This']]))
});
T.LPMALLOCSPY = Pointer(T.IMallocSpy);
T.IMallocSpyVtbl = Struct('IMallocSpyVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMallocSpy), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IMallocSpy), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IMallocSpy), 'This']])),
    PreAlloc: Pointer(Fn(T.ULONG, [[Pointer(T.IMallocSpy), 'This'], [T.ULONG, 'cbRequest']])),
    PostAlloc: Pointer(Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pActual']])),
    PreFree: Pointer(Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.BOOL, 'fSpyed']])),
    PostFree: Pointer(Fn(null, [[Pointer(T.IMallocSpy), 'This'], [T.BOOL, 'fSpyed']])),
    PreRealloc: Pointer(Fn(T.ULONG, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.ULONG, 'cbRequest'], [Pointer(T.LPVOID), 'ppNewRequest'], [T.BOOL, 'fSpyed']])),
    PostRealloc: Pointer(Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pActual'], [T.BOOL, 'fSpyed']])),
    PreGetSize: Pointer(Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.BOOL, 'fSpyed']])),
    PostGetSize: Pointer(Fn(T.ULONG, [[Pointer(T.IMallocSpy), 'This'], [T.ULONG, 'cbActual'], [T.BOOL, 'fSpyed']])),
    PreDidAlloc: Pointer(Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.BOOL, 'fSpyed']])),
    PostDidAlloc: Pointer(Fn(T.i32, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.BOOL, 'fSpyed'], [T.i32, 'fActual']])),
    PreHeapMinimize: Pointer(Fn(null, [[Pointer(T.IMallocSpy), 'This']])),
    PostHeapMinimize: Pointer(Fn(null, [[Pointer(T.IMallocSpy), 'This']]))
});
T.IInternalUnknownVtbl = Struct('IInternalUnknownVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternalUnknown), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternalUnknown), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternalUnknown), 'This']])),
    QueryInternalInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternalUnknown), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']]))
});
T.LPENUMUNKNOWN = Pointer(T.IEnumUnknown);
T.IEnumUnknownVtbl = Struct('IEnumUnknownVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumUnknown), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumUnknown), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [T.ULONG, 'celt'], [Pointer(Pointer(T.IUnknown)), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [Pointer(Pointer(T.IEnumUnknown)), 'ppenum']]))
});
T.LPSURROGATE = Pointer(T.ISurrogate);
T.ISurrogateVtbl = Struct('ISurrogateVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISurrogate), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISurrogate), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISurrogate), 'This']])),
    LoadDllServer: Pointer(Fn(T.HRESULT, [[Pointer(T.ISurrogate), 'This'], [Pointer(T.CLSID), 'Clsid']])),
    FreeSurrogate: Pointer(Fn(T.HRESULT, [[Pointer(T.ISurrogate), 'This']]))
});
T.LPGLOBALINTERFACETABLE = Pointer(T.IGlobalInterfaceTable);
T.IGlobalInterfaceTableVtbl = Struct('IGlobalInterfaceTableVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IGlobalInterfaceTable), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IGlobalInterfaceTable), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IGlobalInterfaceTable), 'This']])),
    RegisterInterfaceInGlobal: Pointer(Fn(T.HRESULT, [[Pointer(T.IGlobalInterfaceTable), 'This'], [Pointer(T.IUnknown), 'pUnk'], [Pointer(T.IID), 'riid'], [Pointer(T.DWORD), 'pdwCookie']])),
    RevokeInterfaceFromGlobal: Pointer(Fn(T.HRESULT, [[Pointer(T.IGlobalInterfaceTable), 'This'], [T.DWORD, 'dwCookie']])),
    GetInterfaceFromGlobal: Pointer(Fn(T.HRESULT, [[Pointer(T.IGlobalInterfaceTable), 'This'], [T.DWORD, 'dwCookie'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']]))
});
T.LPBINDCTX = Pointer(T.IBindCtx);
T.LPBC = Pointer(T.IBindCtx);
T.BIND_OPTS = Struct('tagBIND_OPTS', {
    cbStruct: T.DWORD,
    grfFlags: T.DWORD,
    grfMode: T.DWORD,
    dwTickCountDeadline: T.DWORD
});
T.LPBIND_OPTS = Pointer(Struct('tagBIND_OPTS', null));
T.BIND_OPTS2 = Struct('tagBIND_OPTS2', {
    cbStruct: T.DWORD,
    grfFlags: T.DWORD,
    grfMode: T.DWORD,
    dwTickCountDeadline: T.DWORD,
    dwTrackFlags: T.DWORD,
    dwClassContext: T.DWORD,
    locale: T.LCID,
    pServerInfo: Pointer(T.COSERVERINFO)
});
T.LPBIND_OPTS2 = Pointer(Struct('tagBIND_OPTS2', null));
T.BIND_OPTS3 = Struct('tagBIND_OPTS3', {
    cbStruct: T.DWORD,
    grfFlags: T.DWORD,
    grfMode: T.DWORD,
    dwTickCountDeadline: T.DWORD,
    dwTrackFlags: T.DWORD,
    dwClassContext: T.DWORD,
    locale: T.LCID,
    pServerInfo: Pointer(T.COSERVERINFO),
    hwnd: T.HWND
});
T.LPBIND_OPTS3 = Pointer(Struct('tagBIND_OPTS3', null));
T.BIND_FLAGS = Enum('BIND_JUSTTESTEXISTENCE', {
    BIND_MAYBOTHERUSER: 1,
    BIND_JUSTTESTEXISTENCE: 2
});
T.IBindCtxVtbl = Struct('IBindCtxVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IBindCtx), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IBindCtx), 'This']])),
    RegisterObjectBound: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.IUnknown), 'punk']])),
    RevokeObjectBound: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.IUnknown), 'punk']])),
    ReleaseBoundObjects: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This']])),
    SetBindOptions: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.BIND_OPTS), 'pbindopts']])),
    GetBindOptions: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.BIND_OPTS), 'pbindopts']])),
    GetRunningObjectTable: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(Pointer(T.IRunningObjectTable)), 'pprot']])),
    RegisterObjectParam: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [T.LPOLESTR, 'pszKey'], [Pointer(T.IUnknown), 'punk']])),
    GetObjectParam: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [T.LPOLESTR, 'pszKey'], [Pointer(Pointer(T.IUnknown)), 'ppunk']])),
    EnumObjectParam: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(Pointer(T.IEnumString)), 'ppenum']])),
    RevokeObjectParam: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [T.LPOLESTR, 'pszKey']]))
});
T.LPENUMMONIKER = Pointer(T.IEnumMoniker);
T.IEnumMonikerVtbl = Struct('IEnumMonikerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumMoniker), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumMoniker), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [T.ULONG, 'celt'], [Pointer(Pointer(T.IMoniker)), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [Pointer(Pointer(T.IEnumMoniker)), 'ppenum']]))
});
T.LPRUNNABLEOBJECT = Pointer(T.IRunnableObject);
T.IRunnableObjectVtbl = Struct('IRunnableObjectVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRunnableObject), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRunnableObject), 'This']])),
    GetRunningClass: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [T.LPCLSID, 'lpClsid']])),
    Run: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [T.LPBINDCTX, 'pbc']])),
    IsRunning: Pointer(Fn(T.BOOL, [[Pointer(T.IRunnableObject), 'This']])),
    LockRunning: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [T.BOOL, 'fLock'], [T.BOOL, 'fLastUnlockCloses']])),
    SetContainedObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [T.BOOL, 'fContained']]))
});
T.LPRUNNINGOBJECTTABLE = Pointer(T.IRunningObjectTable);
T.IRunningObjectTableVtbl = Struct('IRunningObjectTableVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRunningObjectTable), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRunningObjectTable), 'This']])),
    Register: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [T.DWORD, 'grfFlags'], [Pointer(T.IUnknown), 'punkObject'], [Pointer(T.IMoniker), 'pmkObjectName'], [Pointer(T.DWORD), 'pdwRegister']])),
    Revoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [T.DWORD, 'dwRegister']])),
    IsRunning: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(T.IMoniker), 'pmkObjectName']])),
    GetObjectA: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(T.IMoniker), 'pmkObjectName'], [Pointer(Pointer(T.IUnknown)), 'ppunkObject']])),
    NoteChangeTime: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [T.DWORD, 'dwRegister'], [Pointer(T.FILETIME), 'pfiletime']])),
    GetTimeOfLastChange: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(T.IMoniker), 'pmkObjectName'], [Pointer(T.FILETIME), 'pfiletime']])),
    EnumRunning: Pointer(Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(Pointer(T.IEnumMoniker)), 'ppenumMoniker']]))
});
T.LPPERSIST = Pointer(T.IPersist);
T.IPersistVtbl = Struct('IPersistVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersist), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPersist), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPersist), 'This']])),
    GetClassID: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersist), 'This'], [Pointer(T.CLSID), 'pClassID']]))
});
T.LPPERSISTSTREAM = Pointer(T.IPersistStream);
T.IPersistStreamVtbl = Struct('IPersistStreamVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPersistStream), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPersistStream), 'This']])),
    GetClassID: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This'], [Pointer(T.CLSID), 'pClassID']])),
    IsDirty: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This']])),
    Load: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This'], [Pointer(T.IStream), 'pStm']])),
    Save: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This'], [Pointer(T.IStream), 'pStm'], [T.BOOL, 'fClearDirty']])),
    GetSizeMax: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This'], [Pointer(T.ULARGE_INTEGER), 'pcbSize']]))
});
T.LPMONIKER = Pointer(T.IMoniker);
T.MKSYS = Enum('MKSYS_CLASSMONIKER', {
    MKSYS_NONE: 0,
    MKSYS_GENERICCOMPOSITE: 1,
    MKSYS_FILEMONIKER: 2,
    MKSYS_ANTIMONIKER: 3,
    MKSYS_ITEMMONIKER: 4,
    MKSYS_POINTERMONIKER: 5,
    MKSYS_CLASSMONIKER: 7
});
T.MKRREDUCE = Enum('MKRREDUCE_ALL', {
    MKRREDUCE_ONE: 0,
    MKRREDUCE_TOUSER: 1,
    MKRREDUCE_THROUGHUSER: 2,
    MKRREDUCE_ALL: 0
});
T.IMonikerVtbl = Struct('IMonikerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IMoniker), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IMoniker), 'This']])),
    GetClassID: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.CLSID), 'pClassID']])),
    IsDirty: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This']])),
    Load: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IStream), 'pStm']])),
    Save: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IStream), 'pStm'], [T.BOOL, 'fClearDirty']])),
    GetSizeMax: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.ULARGE_INTEGER), 'pcbSize']])),
    BindToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IID), 'riidResult'], [Pointer(Pointer(null)), 'ppvResult']])),
    BindToStorage: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObj']])),
    Reduce: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [T.DWORD, 'dwReduceHowFar'], [Pointer(Pointer(T.IMoniker)), 'ppmkToLeft'], [Pointer(Pointer(T.IMoniker)), 'ppmkReduced']])),
    ComposeWith: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IMoniker), 'pmkRight'], [T.BOOL, 'fOnlyIfNotGeneric'], [Pointer(Pointer(T.IMoniker)), 'ppmkComposite']])),
    Enum: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [T.BOOL, 'fForward'], [Pointer(Pointer(T.IEnumMoniker)), 'ppenumMoniker']])),
    IsEqual: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IMoniker), 'pmkOtherMoniker']])),
    Hash: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.DWORD), 'pdwHash']])),
    IsRunning: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IMoniker), 'pmkNewlyRunning']])),
    GetTimeOfLastChange: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.FILETIME), 'pFileTime']])),
    Inverse: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(Pointer(T.IMoniker)), 'ppmk']])),
    CommonPrefixWith: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IMoniker), 'pmkOther'], [Pointer(Pointer(T.IMoniker)), 'ppmkPrefix']])),
    RelativePathTo: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IMoniker), 'pmkOther'], [Pointer(Pointer(T.IMoniker)), 'ppmkRelPath']])),
    GetDisplayName: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.LPOLESTR), 'ppszDisplayName']])),
    ParseDisplayName: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [T.LPOLESTR, 'pszDisplayName'], [Pointer(T.ULONG), 'pchEaten'], [Pointer(Pointer(T.IMoniker)), 'ppmkOut']])),
    IsSystemMoniker: Pointer(Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.DWORD), 'pdwMksys']]))
});
T.IROTDataVtbl = Struct('IROTDataVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IROTData), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IROTData), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IROTData), 'This']])),
    GetComparisonData: Pointer(Fn(T.HRESULT, [[Pointer(T.IROTData), 'This'], [Pointer(T.byte), 'pbData'], [T.ULONG, 'cbMax'], [Pointer(T.ULONG), 'pcbData']]))
});
T.LPENUMSTRING = Pointer(T.IEnumString);
T.IEnumStringVtbl = Struct('IEnumStringVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumString), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumString), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [T.ULONG, 'celt'], [Pointer(T.LPOLESTR), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [Pointer(Pointer(T.IEnumString)), 'ppenum']]))
});
T.IClassActivatorVtbl = Struct('IClassActivatorVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IClassActivator), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IClassActivator), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IClassActivator), 'This']])),
    GetClassObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IClassActivator), 'This'], [Pointer(T.CLSID), 'rclsid'], [T.DWORD, 'dwClassContext'], [T.LCID, 'locale'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']]))
});
T.ISequentialStreamVtbl = Struct('ISequentialStreamVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISequentialStream), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISequentialStream), 'This']])),
    Read: Pointer(Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']])),
    Write: Pointer(Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']]))
});
T.LPSTREAM = Pointer(T.IStream);
T.STATSTG = Struct('tagSTATSTG', {
    pwcsName: T.LPOLESTR,
    type: T.DWORD,
    cbSize: T.ULARGE_INTEGER,
    mtime: T.FILETIME,
    ctime: T.FILETIME,
    atime: T.FILETIME,
    grfMode: T.DWORD,
    grfLocksSupported: T.DWORD,
    clsid: T.CLSID,
    grfStateBits: T.DWORD,
    reserved: T.DWORD
});
T.STGTY = Enum('STGTY_PROPERTY', {
    STGTY_STORAGE: 1,
    STGTY_STREAM: 2,
    STGTY_LOCKBYTES: 3,
    STGTY_PROPERTY: 4
});
T.STREAM_SEEK = Enum('STREAM_SEEK_END', {
    STREAM_SEEK_SET: 0,
    STREAM_SEEK_CUR: 1,
    STREAM_SEEK_END: 2
});
T.LOCKTYPE = Enum('LOCK_ONLYONCE', {
    LOCK_WRITE: 1,
    LOCK_EXCLUSIVE: 2,
    LOCK_ONLYONCE: 4
});
T.IStreamVtbl = Struct('IStreamVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IStream), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IStream), 'This']])),
    Read: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']])),
    Write: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']])),
    Seek: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.LARGE_INTEGER, 'dlibMove'], [T.DWORD, 'dwOrigin'], [Pointer(T.ULARGE_INTEGER), 'plibNewPosition']])),
    SetSize: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.ULARGE_INTEGER, 'libNewSize']])),
    CopyTo: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(T.IStream), 'pstm'], [T.ULARGE_INTEGER, 'cb'], [Pointer(T.ULARGE_INTEGER), 'pcbRead'], [Pointer(T.ULARGE_INTEGER), 'pcbWritten']])),
    Commit: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.DWORD, 'grfCommitFlags']])),
    Revert: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This']])),
    LockRegion: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.ULARGE_INTEGER, 'libOffset'], [T.ULARGE_INTEGER, 'cb'], [T.DWORD, 'dwLockType']])),
    UnlockRegion: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.ULARGE_INTEGER, 'libOffset'], [T.ULARGE_INTEGER, 'cb'], [T.DWORD, 'dwLockType']])),
    Stat: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(T.STATSTG), 'pstatstg'], [T.DWORD, 'grfStatFlag']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(Pointer(T.IStream)), 'ppstm']]))
});
T.LPENUMSTATSTG = Pointer(T.IEnumSTATSTG);
T.IEnumSTATSTGVtbl = Struct('IEnumSTATSTGVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumSTATSTG), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumSTATSTG), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [Pointer(Pointer(T.IEnumSTATSTG)), 'ppenum']]))
});
T.LPSTORAGE = Pointer(T.IStorage);
T.RemSNB = Struct('tagRemSNB', {
    ulCntStr: T.ULONG,
    ulCntChar: T.ULONG,
    rgString: ArrayType(T.OLECHAR, 1)
});
T.wireSNB = Pointer(T.RemSNB);
T.SNB = Pointer(Pointer(T.OLECHAR));
T.IStorageVtbl = Struct('IStorageVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IStorage), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IStorage), 'This']])),
    CreateStream: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'reserved1'], [T.DWORD, 'reserved2'], [Pointer(Pointer(T.IStream)), 'ppstm']])),
    OpenStream: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [Pointer(null), 'reserved1'], [T.DWORD, 'grfMode'], [T.DWORD, 'reserved2'], [Pointer(Pointer(T.IStream)), 'ppstm']])),
    CreateStorage: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'dwStgFmt'], [T.DWORD, 'reserved2'], [Pointer(Pointer(T.IStorage)), 'ppstg']])),
    OpenStorage: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [Pointer(T.IStorage), 'pstgPriority'], [T.DWORD, 'grfMode'], [T.SNB, 'snbExclude'], [T.DWORD, 'reserved'], [Pointer(Pointer(T.IStorage)), 'ppstg']])),
    CopyTo: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'ciidExclude'], [Pointer(T.IID), 'rgiidExclude'], [T.SNB, 'snbExclude'], [Pointer(T.IStorage), 'pstgDest']])),
    MoveElementTo: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [Pointer(T.IStorage), 'pstgDest'], [T.LPCOLESTR, 'pwcsNewName'], [T.DWORD, 'grfFlags']])),
    Commit: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'grfCommitFlags']])),
    Revert: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This']])),
    EnumElements: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'reserved1'], [Pointer(null), 'reserved2'], [T.DWORD, 'reserved3'], [Pointer(Pointer(T.IEnumSTATSTG)), 'ppenum']])),
    DestroyElement: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName']])),
    RenameElement: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsOldName'], [T.LPCOLESTR, 'pwcsNewName']])),
    SetElementTimes: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [Pointer(T.FILETIME), 'pctime'], [Pointer(T.FILETIME), 'patime'], [Pointer(T.FILETIME), 'pmtime']])),
    SetClass: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [Pointer(T.CLSID), 'clsid']])),
    SetStateBits: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'grfStateBits'], [T.DWORD, 'grfMask']])),
    Stat: Pointer(Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [Pointer(T.STATSTG), 'pstatstg'], [T.DWORD, 'grfStatFlag']]))
});
T.LPPERSISTFILE = Pointer(T.IPersistFile);
T.IPersistFileVtbl = Struct('IPersistFileVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPersistFile), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPersistFile), 'This']])),
    GetClassID: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [Pointer(T.CLSID), 'pClassID']])),
    IsDirty: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This']])),
    Load: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [T.LPCOLESTR, 'pszFileName'], [T.DWORD, 'dwMode']])),
    Save: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [T.LPCOLESTR, 'pszFileName'], [T.BOOL, 'fRemember']])),
    SaveCompleted: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [T.LPCOLESTR, 'pszFileName']])),
    GetCurFile: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [Pointer(T.LPOLESTR), 'ppszFileName']]))
});
T.LPPERSISTSTORAGE = Pointer(T.IPersistStorage);
T.IPersistStorageVtbl = Struct('IPersistStorageVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPersistStorage), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPersistStorage), 'This']])),
    GetClassID: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.CLSID), 'pClassID']])),
    IsDirty: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This']])),
    InitNew: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IStorage), 'pStg']])),
    Load: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IStorage), 'pStg']])),
    Save: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IStorage), 'pStgSave'], [T.BOOL, 'fSameAsLoad']])),
    SaveCompleted: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IStorage), 'pStgNew']])),
    HandsOffStorage: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This']]))
});
T.LPROOTSTORAGE = Pointer(T.IRootStorage);
T.IRootStorageVtbl = Struct('IRootStorageVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRootStorage), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRootStorage), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRootStorage), 'This']])),
    SwitchToFile: Pointer(Fn(T.HRESULT, [[Pointer(T.IRootStorage), 'This'], [T.LPOLESTR, 'pszFile']]))
});
T.LPLOCKBYTES = Pointer(T.ILockBytes);
T.ILockBytesVtbl = Struct('ILockBytesVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ILockBytes), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ILockBytes), 'This']])),
    ReadAt: Pointer(Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']])),
    WriteAt: Pointer(Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']])),
    Flush: Pointer(Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This']])),
    SetSize: Pointer(Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'cb']])),
    LockRegion: Pointer(Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'libOffset'], [T.ULARGE_INTEGER, 'cb'], [T.DWORD, 'dwLockType']])),
    UnlockRegion: Pointer(Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'libOffset'], [T.ULARGE_INTEGER, 'cb'], [T.DWORD, 'dwLockType']])),
    Stat: Pointer(Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [Pointer(T.STATSTG), 'pstatstg'], [T.DWORD, 'grfStatFlag']]))
});
T.IFillLockBytesVtbl = Struct('IFillLockBytesVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IFillLockBytes), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IFillLockBytes), 'This']])),
    FillAppend: Pointer(Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']])),
    FillAt: Pointer(Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']])),
    SetFillSize: Pointer(Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [T.ULARGE_INTEGER, 'ulSize']])),
    Terminate: Pointer(Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [T.BOOL, 'bCanceled']]))
});
T.IProgressNotifyVtbl = Struct('IProgressNotifyVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IProgressNotify), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IProgressNotify), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IProgressNotify), 'This']])),
    OnProgress: Pointer(Fn(T.HRESULT, [[Pointer(T.IProgressNotify), 'This'], [T.DWORD, 'dwProgressCurrent'], [T.DWORD, 'dwProgressMaximum'], [T.BOOL, 'fAccurate'], [T.BOOL, 'fOwner']]))
});
T.StorageLayout = Struct('tagStorageLayout', {
    LayoutType: T.DWORD,
    pwcsElementName: Pointer(T.OLECHAR),
    cOffset: T.LARGE_INTEGER,
    cBytes: T.LARGE_INTEGER
});
T.ILayoutStorageVtbl = Struct('ILayoutStorageVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ILayoutStorage), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ILayoutStorage), 'This']])),
    LayoutScript: Pointer(Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This'], [Pointer(T.StorageLayout), 'pStorageLayout'], [T.DWORD, 'nEntries'], [T.DWORD, 'glfInterleavedFlag']])),
    BeginMonitor: Pointer(Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This']])),
    EndMonitor: Pointer(Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This']])),
    ReLayoutDocfile: Pointer(Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This'], [Pointer(T.OLECHAR), 'pwcsNewDfName']])),
    ReLayoutDocfileOnILockBytes: Pointer(Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This'], [Pointer(T.ILockBytes), 'pILockBytes']]))
});
T.IBlockingLockVtbl = Struct('IBlockingLockVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IBlockingLock), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IBlockingLock), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IBlockingLock), 'This']])),
    Lock: Pointer(Fn(T.HRESULT, [[Pointer(T.IBlockingLock), 'This'], [T.DWORD, 'dwTimeout']])),
    Unlock: Pointer(Fn(T.HRESULT, [[Pointer(T.IBlockingLock), 'This']]))
});
T.ITimeAndNoticeControlVtbl = Struct('ITimeAndNoticeControlVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITimeAndNoticeControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITimeAndNoticeControl), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITimeAndNoticeControl), 'This']])),
    SuppressChanges: Pointer(Fn(T.HRESULT, [[Pointer(T.ITimeAndNoticeControl), 'This'], [T.DWORD, 'res1'], [T.DWORD, 'res2']]))
});
T.IOplockStorageVtbl = Struct('IOplockStorageVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOplockStorage), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOplockStorage), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOplockStorage), 'This']])),
    CreateStorageEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IOplockStorage), 'This'], [T.LPCWSTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'stgfmt'], [T.DWORD, 'grfAttrs'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppstgOpen']])),
    OpenStorageEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IOplockStorage), 'This'], [T.LPCWSTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'stgfmt'], [T.DWORD, 'grfAttrs'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppstgOpen']]))
});
T.LPENUMFORMATETC = Pointer(T.IEnumFORMATETC);
T.DVTARGETDEVICE = Struct('tagDVTARGETDEVICE', {
    tdSize: T.DWORD,
    tdDriverNameOffset: T.WORD,
    tdDeviceNameOffset: T.WORD,
    tdPortNameOffset: T.WORD,
    tdExtDevmodeOffset: T.WORD,
    tdData: ArrayType(T.BYTE, 1)
});
T.LPCLIPFORMAT = Pointer(T.CLIPFORMAT);
T.FORMATETC = Struct('tagFORMATETC', {
    cfFormat: T.CLIPFORMAT,
    ptd: Pointer(T.DVTARGETDEVICE),
    dwAspect: T.DWORD,
    lindex: T.LONG,
    tymed: T.DWORD
});
T.LPFORMATETC = Pointer(Struct('tagFORMATETC', null));
T.IEnumFORMATETCVtbl = Struct('IEnumFORMATETCVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumFORMATETC), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumFORMATETC), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [T.ULONG, 'celt'], [Pointer(T.FORMATETC), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [Pointer(Pointer(T.IEnumFORMATETC)), 'ppenum']]))
});
T.LPENUMSTATDATA = Pointer(T.IEnumSTATDATA);
T.ADVF = Enum('ADVFCACHE_ONSAVE', {
    ADVF_NODATA: 1,
    ADVF_PRIMEFIRST: 2,
    ADVF_ONLYONCE: 4,
    ADVF_DATAONSTOP: 64,
    ADVFCACHE_NOHANDLER: 8,
    ADVFCACHE_FORCEBUILTIN: 16,
    ADVFCACHE_ONSAVE: 32
});
T.STATDATA = Struct('tagSTATDATA', {
    formatetc: T.FORMATETC,
    advf: T.DWORD,
    pAdvSink: Pointer(T.IAdviseSink),
    dwConnection: T.DWORD
});
T.LPSTATDATA = Pointer(Struct('tagSTATDATA', null));
T.IEnumSTATDATAVtbl = Struct('IEnumSTATDATAVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumSTATDATA), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumSTATDATA), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATDATA), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenum']]))
});
T.LPADVISESINK = Pointer(T.IAdviseSink);
T.TYMED = Enum('TYMED_NULL', {
    TYMED_HGLOBAL: 1,
    TYMED_FILE: 2,
    TYMED_ISTREAM: 4,
    TYMED_ISTORAGE: 8,
    TYMED_GDI: 16,
    TYMED_MFPICT: 32,
    TYMED_ENHMF: 64,
    TYMED_NULL: 0
});
T.RemSTGMEDIUM = Struct('tagRemSTGMEDIUM', {
    tymed: T.DWORD,
    dwHandleType: T.DWORD,
    pData: T.ULONG,
    pUnkForRelease: T.ULONG,
    cbData: T.ULONG,
    data: ArrayType(T.byte, 1)
});
T.uSTGMEDIUM = Struct('tagSTGMEDIUM', {
    tymed: T.DWORD,
    __unnamed0: Union('', {
        hBitmap: T.HBITMAP,
        hMetaFilePict: T.HMETAFILEPICT,
        hEnhMetaFile: T.HENHMETAFILE,
        hGlobal: T.HGLOBAL,
        lpszFileName: T.LPOLESTR,
        pstm: Pointer(T.IStream),
        pstg: Pointer(T.IStorage)
    }),
    pUnkForRelease: Pointer(T.IUnknown)
});
T.GDI_OBJECT = Struct('_GDI_OBJECT', {
    ObjectType: T.DWORD,
    u: Union('', {
        hBitmap: T.wireHBITMAP,
        hPalette: T.wireHPALETTE,
        hGeneric: T.wireHGLOBAL
    })
});
T.userSTGMEDIUM = Struct('_userSTGMEDIUM', {
    __unnamed0: Struct('', {
        tymed: T.DWORD,
        u: Union('', {
            hMetaFilePict: T.wireHMETAFILEPICT,
            hHEnhMetaFile: T.wireHENHMETAFILE,
            hGdiHandle: Pointer(T.GDI_OBJECT),
            hGlobal: T.wireHGLOBAL,
            lpszFileName: T.LPOLESTR,
            pstm: Pointer(T.BYTE_BLOB),
            pstg: Pointer(T.BYTE_BLOB)
        })
    }),
    pUnkForRelease: Pointer(T.IUnknown)
});
T.wireSTGMEDIUM = Pointer(T.userSTGMEDIUM);
T.STGMEDIUM = T.uSTGMEDIUM;
T.wireASYNC_STGMEDIUM = Pointer(T.userSTGMEDIUM);
T.ASYNC_STGMEDIUM = T.STGMEDIUM;
T.LPSTGMEDIUM = Pointer(T.STGMEDIUM);
T.userFLAG_STGMEDIUM = Struct('_userFLAG_STGMEDIUM', {
    ContextFlags: T.LONG,
    fPassOwnership: T.LONG,
    Stgmed: T.userSTGMEDIUM
});
T.wireFLAG_STGMEDIUM = Pointer(T.userFLAG_STGMEDIUM);
T.FLAG_STGMEDIUM = Struct('_FLAG_STGMEDIUM', {
    ContextFlags: T.LONG,
    fPassOwnership: T.LONG,
    Stgmed: T.STGMEDIUM
});
T.IAdviseSinkVtbl = Struct('IAdviseSinkVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IAdviseSink), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IAdviseSink), 'This']])),
    OnDataChange: Pointer(Fn(null, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.FORMATETC), 'pFormatetc'], [Pointer(T.STGMEDIUM), 'pStgmed']])),
    OnViewChange: Pointer(Fn(null, [[Pointer(T.IAdviseSink), 'This'], [T.DWORD, 'dwAspect'], [T.LONG, 'lindex']])),
    OnRename: Pointer(Fn(null, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.IMoniker), 'pmk']])),
    OnSave: Pointer(Fn(null, [[Pointer(T.IAdviseSink), 'This']])),
    OnClose: Pointer(Fn(null, [[Pointer(T.IAdviseSink), 'This']]))
});
T.LPADVISESINK2 = Pointer(T.IAdviseSink2);
T.IAdviseSink2Vtbl = Struct('IAdviseSink2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IAdviseSink2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IAdviseSink2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IAdviseSink2), 'This']])),
    OnDataChange: Pointer(Fn(null, [[Pointer(T.IAdviseSink2), 'This'], [Pointer(T.FORMATETC), 'pFormatetc'], [Pointer(T.STGMEDIUM), 'pStgmed']])),
    OnViewChange: Pointer(Fn(null, [[Pointer(T.IAdviseSink2), 'This'], [T.DWORD, 'dwAspect'], [T.LONG, 'lindex']])),
    OnRename: Pointer(Fn(null, [[Pointer(T.IAdviseSink2), 'This'], [Pointer(T.IMoniker), 'pmk']])),
    OnSave: Pointer(Fn(null, [[Pointer(T.IAdviseSink2), 'This']])),
    OnClose: Pointer(Fn(null, [[Pointer(T.IAdviseSink2), 'This']])),
    OnLinkSrcChange: Pointer(Fn(null, [[Pointer(T.IAdviseSink2), 'This'], [Pointer(T.IMoniker), 'pmk']]))
});
T.LPDATAOBJECT = Pointer(T.IDataObject);
T.DATADIR = Enum('DATADIR_SET', {
    DATADIR_GET: 1,
    DATADIR_SET: 2
});
T.IDataObjectVtbl = Struct('IDataObjectVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IDataObject), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IDataObject), 'This']])),
    GetData: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetcIn'], [Pointer(T.STGMEDIUM), 'pmedium']])),
    GetDataHere: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pmedium']])),
    QueryGetData: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc']])),
    GetCanonicalFormatEtc: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatectIn'], [Pointer(T.FORMATETC), 'pformatetcOut']])),
    SetData: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pmedium'], [T.BOOL, 'fRelease']])),
    EnumFormatEtc: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [T.DWORD, 'dwDirection'], [Pointer(Pointer(T.IEnumFORMATETC)), 'ppenumFormatEtc']])),
    DAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [T.DWORD, 'advf'], [Pointer(T.IAdviseSink), 'pAdvSink'], [Pointer(T.DWORD), 'pdwConnection']])),
    DUnadvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [T.DWORD, 'dwConnection']])),
    EnumDAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumAdvise']]))
});
T.LPDATAADVISEHOLDER = Pointer(T.IDataAdviseHolder);
T.IDataAdviseHolderVtbl = Struct('IDataAdviseHolderVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IDataAdviseHolder), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IDataAdviseHolder), 'This']])),
    Advise: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [Pointer(T.IDataObject), 'pDataObject'], [Pointer(T.FORMATETC), 'pFetc'], [T.DWORD, 'advf'], [Pointer(T.IAdviseSink), 'pAdvise'], [Pointer(T.DWORD), 'pdwConnection']])),
    Unadvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [T.DWORD, 'dwConnection']])),
    EnumAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumAdvise']])),
    SendOnDataChange: Pointer(Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [Pointer(T.IDataObject), 'pDataObject'], [T.DWORD, 'dwReserved'], [T.DWORD, 'advf']]))
});
T.LPMESSAGEFILTER = Pointer(T.IMessageFilter);
T.CALLTYPE = Enum('CALLTYPE_ASYNC_CALLPENDING', {
    CALLTYPE_TOPLEVEL: 1,
    CALLTYPE_NESTED: 2,
    CALLTYPE_ASYNC: 3,
    CALLTYPE_TOPLEVEL_CALLPENDING: 4,
    CALLTYPE_ASYNC_CALLPENDING: 5
});
T.SERVERCALL = Enum('SERVERCALL_RETRYLATER', {
    SERVERCALL_ISHANDLED: 0,
    SERVERCALL_REJECTED: 1,
    SERVERCALL_RETRYLATER: 2
});
T.PENDINGTYPE = Enum('PENDINGTYPE_NESTED', {
    PENDINGTYPE_TOPLEVEL: 1,
    PENDINGTYPE_NESTED: 2
});
T.PENDINGMSG = Enum('PENDINGMSG_WAITDEFPROCESS', {
    PENDINGMSG_CANCELCALL: 0,
    PENDINGMSG_WAITNOPROCESS: 1,
    PENDINGMSG_WAITDEFPROCESS: 2
});
T.INTERFACEINFO = Struct('tagINTERFACEINFO', {
    pUnk: Pointer(T.IUnknown),
    iid: T.IID,
    wMethod: T.WORD
});
T.LPINTERFACEINFO = Pointer(Struct('tagINTERFACEINFO', null));
T.IMessageFilterVtbl = Struct('IMessageFilterVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMessageFilter), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IMessageFilter), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IMessageFilter), 'This']])),
    HandleInComingCall: Pointer(Fn(T.DWORD, [[Pointer(T.IMessageFilter), 'This'], [T.DWORD, 'dwCallType'], [T.HTASK, 'htaskCaller'], [T.DWORD, 'dwTickCount'], [T.LPINTERFACEINFO, 'lpInterfaceInfo']])),
    RetryRejectedCall: Pointer(Fn(T.DWORD, [[Pointer(T.IMessageFilter), 'This'], [T.HTASK, 'htaskCallee'], [T.DWORD, 'dwTickCount'], [T.DWORD, 'dwRejectType']])),
    MessagePending: Pointer(Fn(T.DWORD, [[Pointer(T.IMessageFilter), 'This'], [T.HTASK, 'htaskCallee'], [T.DWORD, 'dwTickCount'], [T.DWORD, 'dwPendingType']]))
});
T.LPRPCCHANNELBUFFER = Pointer(T.IRpcChannelBuffer);
T.RPCOLEDATAREP = T.ULONG;
T.RPCOLEMESSAGE = Struct('tagRPCOLEMESSAGE', {
    reserved1: Pointer(null),
    dataRepresentation: T.RPCOLEDATAREP,
    Buffer: Pointer(null),
    cbBuffer: T.ULONG,
    iMethod: T.ULONG,
    reserved2: ArrayType(Pointer(null), 5),
    rpcFlags: T.ULONG
});
T.PRPCOLEMESSAGE = Pointer(T.RPCOLEMESSAGE);
T.IRpcChannelBufferVtbl = Struct('IRpcChannelBufferVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcChannelBuffer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcChannelBuffer), 'This']])),
    GetBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.IID), 'riid']])),
    SendReceive: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.ULONG), 'pStatus']])),
    FreeBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage']])),
    GetDestCtx: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']])),
    IsConnected: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This']]))
});
T.LPRPCCHANNELBUFFER2 = Pointer(T.IRpcChannelBuffer2);
T.IRpcChannelBuffer2Vtbl = Struct('IRpcChannelBuffer2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcChannelBuffer2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcChannelBuffer2), 'This']])),
    GetBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer2), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.IID), 'riid']])),
    SendReceive: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer2), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.ULONG), 'pStatus']])),
    FreeBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer2), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage']])),
    GetDestCtx: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer2), 'This'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']])),
    IsConnected: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer2), 'This']])),
    GetProtocolVersion: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer2), 'This'], [Pointer(T.DWORD), 'pdwVersion']]))
});
T.LPRPCCHANNELBUFFER3 = Pointer(T.IRpcChannelBuffer3);
T.IRpcChannelBuffer3Vtbl = Struct('IRpcChannelBuffer3Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcChannelBuffer3), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcChannelBuffer3), 'This']])),
    GetBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.IID), 'riid']])),
    SendReceive: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.ULONG), 'pStatus']])),
    FreeBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage']])),
    GetDestCtx: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']])),
    IsConnected: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This']])),
    GetProtocolVersion: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.DWORD), 'pdwVersion']])),
    Send: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.ULONG), 'pulStatus']])),
    Receive: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [T.ULONG, 'ulSize'], [Pointer(T.ULONG), 'pulStatus']])),
    Cancel: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg']])),
    GetCallContext: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'pInterface']])),
    GetDestCtxEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']])),
    GetState: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.DWORD), 'pState']])),
    RegisterAsync: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.IAsyncManager), 'pAsyncMgr']]))
});
T.IAsyncRpcChannelBufferVtbl = Struct('IAsyncRpcChannelBufferVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IAsyncRpcChannelBuffer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IAsyncRpcChannelBuffer), 'This']])),
    GetBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.IID), 'riid']])),
    SendReceive: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.ULONG), 'pStatus']])),
    FreeBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage']])),
    GetDestCtx: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']])),
    IsConnected: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This']])),
    GetProtocolVersion: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.DWORD), 'pdwVersion']])),
    Send: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.ISynchronize), 'pSync'], [Pointer(T.ULONG), 'pulStatus']])),
    Receive: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.ULONG), 'pulStatus']])),
    GetDestCtxEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']]))
});
T.IRpcSyntaxNegotiateVtbl = Struct('IRpcSyntaxNegotiateVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcSyntaxNegotiate), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcSyntaxNegotiate), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcSyntaxNegotiate), 'This']])),
    NegotiateSyntax: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcSyntaxNegotiate), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg']]))
});
T.LPRPCPROXYBUFFER = Pointer(T.IRpcProxyBuffer);
T.IRpcProxyBufferVtbl = Struct('IRpcProxyBufferVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcProxyBuffer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcProxyBuffer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcProxyBuffer), 'This']])),
    Connect: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcProxyBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer']])),
    Disconnect: Pointer(Fn(null, [[Pointer(T.IRpcProxyBuffer), 'This']]))
});
T.LPRPCSTUBBUFFER = Pointer(T.IRpcStubBuffer);
T.IRpcStubBufferVtbl = Struct('IRpcStubBufferVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcStubBuffer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcStubBuffer), 'This']])),
    Connect: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IUnknown), 'pUnkServer']])),
    Disconnect: Pointer(Fn(null, [[Pointer(T.IRpcStubBuffer), 'This']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), '_prpcmsg'], [Pointer(T.IRpcChannelBuffer), '_pRpcChannelBuffer']])),
    IsIIDSupported: Pointer(Fn(Pointer(T.IRpcStubBuffer), [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IID), 'riid']])),
    CountRefs: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcStubBuffer), 'This']])),
    DebugServerQueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(Pointer(null)), 'ppv']])),
    DebugServerRelease: Pointer(Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(null), 'pv']]))
});
T.LPPSFACTORYBUFFER = Pointer(T.IPSFactoryBuffer);
T.IPSFactoryBufferVtbl = Struct('IPSFactoryBufferVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPSFactoryBuffer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPSFactoryBuffer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPSFactoryBuffer), 'This']])),
    CreateProxy: Pointer(Fn(T.HRESULT, [[Pointer(T.IPSFactoryBuffer), 'This'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IRpcProxyBuffer)), 'ppProxy'], [Pointer(Pointer(null)), 'ppv']])),
    CreateStub: Pointer(Fn(T.HRESULT, [[Pointer(T.IPSFactoryBuffer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'pUnkServer'], [Pointer(Pointer(T.IRpcStubBuffer)), 'ppStub']]))
});
T.LPCHANNELHOOK = Pointer(T.IChannelHook);
T.SChannelHookCallInfo = Struct('SChannelHookCallInfo', {
    iid: T.IID,
    cbSize: T.DWORD,
    uCausality: T.GUID,
    dwServerPid: T.DWORD,
    iMethod: T.DWORD,
    pObject: Pointer(null)
});
T.IChannelHookVtbl = Struct('IChannelHookVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IChannelHook), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IChannelHook), 'This']])),
    ClientGetSize: Pointer(Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [Pointer(T.ULONG), 'pDataSize']])),
    ClientFillBuffer: Pointer(Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [Pointer(T.ULONG), 'pDataSize'], [Pointer(null), 'pDataBuffer']])),
    ClientNotify: Pointer(Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [T.ULONG, 'cbDataSize'], [Pointer(null), 'pDataBuffer'], [T.DWORD, 'lDataRep'], [T.HRESULT, 'hrFault']])),
    ServerNotify: Pointer(Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [T.ULONG, 'cbDataSize'], [Pointer(null), 'pDataBuffer'], [T.DWORD, 'lDataRep']])),
    ServerGetSize: Pointer(Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [T.HRESULT, 'hrFault'], [Pointer(T.ULONG), 'pDataSize']])),
    ServerFillBuffer: Pointer(Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [Pointer(T.ULONG), 'pDataSize'], [Pointer(null), 'pDataBuffer'], [T.HRESULT, 'hrFault']]))
});
T.SOLE_AUTHENTICATION_SERVICE = Struct('tagSOLE_AUTHENTICATION_SERVICE', {
    dwAuthnSvc: T.DWORD,
    dwAuthzSvc: T.DWORD,
    pPrincipalName: Pointer(T.OLECHAR),
    hr: T.HRESULT
});
T.PSOLE_AUTHENTICATION_SERVICE = Pointer(T.SOLE_AUTHENTICATION_SERVICE);
T.SOLE_AUTHENTICATION_INFO = Struct('tagSOLE_AUTHENTICATION_INFO', {
    dwAuthnSvc: T.DWORD,
    dwAuthzSvc: T.DWORD,
    pAuthInfo: Pointer(null)
});
T.SOLE_AUTHENTICATION_LIST = Struct('tagSOLE_AUTHENTICATION_LIST', {
    cAuthInfo: T.DWORD,
    aAuthInfo: Pointer(T.SOLE_AUTHENTICATION_INFO)
});
T.EOLE_AUTHENTICATION_CAPABILITIES = Enum('EOAC_NO_CUSTOM_MARSHAL', {
    EOAC_NONE: 0,
    EOAC_MUTUAL_AUTH: 1,
    EOAC_SECURE_REFS: 2,
    EOAC_ACCESS_CONTROL: 4,
    EOAC_APPID: 8,
    EOAC_DYNAMIC: 16,
    EOAC_STATIC_CLOAKING: 32,
    EOAC_DYNAMIC_CLOAKING: 64,
    EOAC_ANY_AUTHORITY: 128,
    EOAC_MAKE_FULLSIC: 256,
    EOAC_REQUIRE_FULLSIC: 512,
    EOAC_AUTO_IMPERSONATE: 1024,
    EOAC_DEFAULT: 2048,
    EOAC_DISABLE_AAA: 4096,
    EOAC_NO_CUSTOM_MARSHAL: 8192
});
T.IClientSecurityVtbl = Struct('IClientSecurityVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IClientSecurity), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IClientSecurity), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IClientSecurity), 'This']])),
    QueryBlanket: Pointer(Fn(T.HRESULT, [[Pointer(T.IClientSecurity), 'This'], [Pointer(T.IUnknown), 'pProxy'], [Pointer(T.DWORD), 'pAuthnSvc'], [Pointer(T.DWORD), 'pAuthzSvc'], [Pointer(Pointer(T.OLECHAR)), 'pServerPrincName'], [Pointer(T.DWORD), 'pAuthnLevel'], [Pointer(T.DWORD), 'pImpLevel'], [Pointer(Pointer(null)), 'pAuthInfo'], [Pointer(T.DWORD), 'pCapabilities']])),
    SetBlanket: Pointer(Fn(T.HRESULT, [[Pointer(T.IClientSecurity), 'This'], [Pointer(T.IUnknown), 'pProxy'], [T.DWORD, 'AuthnSvc'], [T.DWORD, 'AuthzSvc'], [Pointer(T.OLECHAR), 'pServerPrincName'], [T.DWORD, 'AuthnLevel'], [T.DWORD, 'ImpLevel'], [Pointer(null), 'pAuthInfo'], [T.DWORD, 'Capabilities']])),
    CopyProxy: Pointer(Fn(T.HRESULT, [[Pointer(T.IClientSecurity), 'This'], [Pointer(T.IUnknown), 'pProxy'], [Pointer(Pointer(T.IUnknown)), 'ppCopy']]))
});
T.IServerSecurityVtbl = Struct('IServerSecurityVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IServerSecurity), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IServerSecurity), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IServerSecurity), 'This']])),
    QueryBlanket: Pointer(Fn(T.HRESULT, [[Pointer(T.IServerSecurity), 'This'], [Pointer(T.DWORD), 'pAuthnSvc'], [Pointer(T.DWORD), 'pAuthzSvc'], [Pointer(Pointer(T.OLECHAR)), 'pServerPrincName'], [Pointer(T.DWORD), 'pAuthnLevel'], [Pointer(T.DWORD), 'pImpLevel'], [Pointer(Pointer(null)), 'pPrivs'], [Pointer(T.DWORD), 'pCapabilities']])),
    ImpersonateClient: Pointer(Fn(T.HRESULT, [[Pointer(T.IServerSecurity), 'This']])),
    RevertToSelf: Pointer(Fn(T.HRESULT, [[Pointer(T.IServerSecurity), 'This']])),
    IsImpersonating: Pointer(Fn(T.BOOL, [[Pointer(T.IServerSecurity), 'This']]))
});
T.IAsyncSetupVtbl = Struct('IAsyncSetupVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncSetup), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IAsyncSetup), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IAsyncSetup), 'This']])),
    GetAsyncManager: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncSetup), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'pOuter'], [T.DWORD, 'dwFlags'], [Pointer(Pointer(T.IUnknown)), 'ppInner'], [Pointer(Pointer(T.IAsyncManager)), 'ppAsyncMgr']]))
});
T.IDirectWriterLockVtbl = Struct('IDirectWriterLockVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IDirectWriterLock), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IDirectWriterLock), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IDirectWriterLock), 'This']])),
    WaitForWriteAccess: Pointer(Fn(T.HRESULT, [[Pointer(T.IDirectWriterLock), 'This'], [T.DWORD, 'dwTimeout']])),
    ReleaseWriteAccess: Pointer(Fn(T.HRESULT, [[Pointer(T.IDirectWriterLock), 'This']])),
    HaveWriteAccess: Pointer(Fn(T.HRESULT, [[Pointer(T.IDirectWriterLock), 'This']]))
});
T.ISynchronizeVtbl = Struct('ISynchronizeVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronize), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronize), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronize), 'This']])),
    Wait: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronize), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwMilliseconds']])),
    Signal: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronize), 'This']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronize), 'This']]))
});
T.ISynchronizeHandleVtbl = Struct('ISynchronizeHandleVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeHandle), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronizeHandle), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronizeHandle), 'This']])),
    GetHandle: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeHandle), 'This'], [Pointer(T.HANDLE), 'ph']]))
});
T.ISynchronizeEventVtbl = Struct('ISynchronizeEventVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeEvent), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronizeEvent), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronizeEvent), 'This']])),
    GetHandle: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeEvent), 'This'], [Pointer(T.HANDLE), 'ph']])),
    SetEventHandle: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeEvent), 'This'], [Pointer(T.HANDLE), 'ph']]))
});
T.ISynchronizeContainerVtbl = Struct('ISynchronizeContainerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeContainer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronizeContainer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronizeContainer), 'This']])),
    AddSynchronize: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeContainer), 'This'], [Pointer(T.ISynchronize), 'pSync']])),
    WaitMultiple: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeContainer), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwTimeOut'], [Pointer(Pointer(T.ISynchronize)), 'ppSync']]))
});
T.ISynchronizeMutexVtbl = Struct('ISynchronizeMutexVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeMutex), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronizeMutex), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISynchronizeMutex), 'This']])),
    Wait: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeMutex), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwMilliseconds']])),
    Signal: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeMutex), 'This']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeMutex), 'This']])),
    ReleaseMutex: Pointer(Fn(T.HRESULT, [[Pointer(T.ISynchronizeMutex), 'This']]))
});
T.LPCANCELMETHODCALLS = Pointer(T.ICancelMethodCalls);
T.ICancelMethodCallsVtbl = Struct('ICancelMethodCallsVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ICancelMethodCalls), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ICancelMethodCalls), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ICancelMethodCalls), 'This']])),
    Cancel: Pointer(Fn(T.HRESULT, [[Pointer(T.ICancelMethodCalls), 'This'], [T.ULONG, 'ulSeconds']])),
    TestCancel: Pointer(Fn(T.HRESULT, [[Pointer(T.ICancelMethodCalls), 'This']]))
});
T.DCOM_CALL_STATE = Enum('DCOM_CALL_CANCELED', {
    DCOM_NONE: 0,
    DCOM_CALL_COMPLETE: 1,
    DCOM_CALL_CANCELED: 2
});
T.IAsyncManagerVtbl = Struct('IAsyncManagerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncManager), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IAsyncManager), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IAsyncManager), 'This']])),
    CompleteCall: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncManager), 'This'], [T.HRESULT, 'Result']])),
    GetCallContext: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncManager), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'pInterface']])),
    GetState: Pointer(Fn(T.HRESULT, [[Pointer(T.IAsyncManager), 'This'], [Pointer(T.ULONG), 'pulStateFlags']]))
});
T.ICallFactoryVtbl = Struct('ICallFactoryVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ICallFactory), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ICallFactory), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ICallFactory), 'This']])),
    CreateCall: Pointer(Fn(T.HRESULT, [[Pointer(T.ICallFactory), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'pCtrlUnk'], [Pointer(T.IID), 'riid2'], [Pointer(Pointer(T.IUnknown)), 'ppv']]))
});
T.IRpcOptionsVtbl = Struct('IRpcOptionsVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcOptions), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcOptions), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcOptions), 'This']])),
    Set: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcOptions), 'This'], [Pointer(T.IUnknown), 'pPrx'], [T.DWORD, 'dwProperty'], [T.ULONG_PTR, 'dwValue']])),
    Query: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcOptions), 'This'], [Pointer(T.IUnknown), 'pPrx'], [T.DWORD, 'dwProperty'], [Pointer(T.ULONG_PTR), 'pdwValue']]))
});
T.IRpcHelperVtbl = Struct('IRpcHelperVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcHelper), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcHelper), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRpcHelper), 'This']])),
    GetDCOMProtocolVersion: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcHelper), 'This'], [Pointer(T.DWORD), 'pComVersion']])),
    GetIIDFromOBJREF: Pointer(Fn(T.HRESULT, [[Pointer(T.IRpcHelper), 'This'], [Pointer(null), 'pObjRef'], [Pointer(Pointer(T.IID)), 'piid']]))
});
T.IReleaseMarshalBuffersVtbl = Struct('IReleaseMarshalBuffersVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IReleaseMarshalBuffers), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IReleaseMarshalBuffers), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IReleaseMarshalBuffers), 'This']])),
    ReleaseMarshalBuffer: Pointer(Fn(T.HRESULT, [[Pointer(T.IReleaseMarshalBuffers), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [T.DWORD, 'dwFlags'], [Pointer(T.IUnknown), 'pChnl']]))
});
T.IWaitMultipleVtbl = Struct('IWaitMultipleVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IWaitMultiple), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IWaitMultiple), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IWaitMultiple), 'This']])),
    WaitMultiple: Pointer(Fn(T.HRESULT, [[Pointer(T.IWaitMultiple), 'This'], [T.DWORD, 'timeout'], [Pointer(Pointer(T.ISynchronize)), 'pSync']])),
    AddSynchronize: Pointer(Fn(T.HRESULT, [[Pointer(T.IWaitMultiple), 'This'], [Pointer(T.ISynchronize), 'pSync']]))
});
T.IUrlMonVtbl = Struct('IUrlMonVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IUrlMon), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IUrlMon), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IUrlMon), 'This']])),
    AsyncGetClassBits: Pointer(Fn(T.HRESULT, [[Pointer(T.IUrlMon), 'This'], [Pointer(T.CLSID), 'rclsid'], [T.LPCWSTR, 'pszTYPE'], [T.LPCWSTR, 'pszExt'], [T.DWORD, 'dwFileVersionMS'], [T.DWORD, 'dwFileVersionLS'], [T.LPCWSTR, 'pszCodeBase'], [Pointer(T.IBindCtx), 'pbc'], [T.DWORD, 'dwClassContext'], [Pointer(T.IID), 'riid'], [T.DWORD, 'flags']]))
});
T.IForegroundTransferVtbl = Struct('IForegroundTransferVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IForegroundTransfer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IForegroundTransfer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IForegroundTransfer), 'This']])),
    AllowForegroundTransfer: Pointer(Fn(T.HRESULT, [[Pointer(T.IForegroundTransfer), 'This'], [Pointer(null), 'lpvReserved']]))
});
T.LPADDRTRACKINGCONTROL = Pointer(T.IAddrTrackingControl);
T.IAddrTrackingControlVtbl = Struct('IAddrTrackingControlVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IAddrTrackingControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IAddrTrackingControl), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IAddrTrackingControl), 'This']])),
    EnableCOMDynamicAddrTracking: Pointer(Fn(T.HRESULT, [[Pointer(T.IAddrTrackingControl), 'This']])),
    DisableCOMDynamicAddrTracking: Pointer(Fn(T.HRESULT, [[Pointer(T.IAddrTrackingControl), 'This']]))
});
T.LPADDREXCLUSIONCONTROL = Pointer(T.IAddrExclusionControl);
T.IAddrExclusionControlVtbl = Struct('IAddrExclusionControlVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IAddrExclusionControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IAddrExclusionControl), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IAddrExclusionControl), 'This']])),
    GetCurrentAddrExclusionList: Pointer(Fn(T.HRESULT, [[Pointer(T.IAddrExclusionControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppEnumerator']])),
    UpdateAddrExclusionList: Pointer(Fn(T.HRESULT, [[Pointer(T.IAddrExclusionControl), 'This'], [Pointer(T.IUnknown), 'pEnumerator']]))
});
T.APTTYPE = Enum('APTTYPE_MAINSTA', {
    APTTYPE_CURRENT: 0,
    APTTYPE_STA: 0,
    APTTYPE_MTA: 1,
    APTTYPE_NA: 2,
    APTTYPE_MAINSTA: 3
});
T.THDTYPE = Enum('THDTYPE_PROCESSMESSAGES', {
    THDTYPE_BLOCKMESSAGES: 0,
    THDTYPE_PROCESSMESSAGES: 1
});
T.IComThreadingInfoVtbl = Struct('IComThreadingInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IComThreadingInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IComThreadingInfo), 'This']])),
    GetCurrentApartmentType: Pointer(Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.APTTYPE), 'pAptType']])),
    GetCurrentThreadType: Pointer(Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.THDTYPE), 'pThreadType']])),
    GetCurrentLogicalThreadId: Pointer(Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.GUID), 'pguidLogicalThreadId']])),
    SetCurrentLogicalThreadId: Pointer(Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.GUID), 'rguid']]))
});
T.IProcessInitControlVtbl = Struct('IProcessInitControlVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IProcessInitControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IProcessInitControl), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IProcessInitControl), 'This']])),
    ResetInitializerTimeout: Pointer(Fn(T.HRESULT, [[Pointer(T.IProcessInitControl), 'This'], [T.DWORD, 'dwSecondsRemaining']]))
});
T.LPINITIALIZESPY = Pointer(T.IInitializeSpy);
T.IInitializeSpyVtbl = Struct('IInitializeSpyVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInitializeSpy), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInitializeSpy), 'This']])),
    PreInitialize: Pointer(Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [T.DWORD, 'dwCoInit'], [T.DWORD, 'dwCurThreadAptRefs']])),
    PostInitialize: Pointer(Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [T.HRESULT, 'hrCoInit'], [T.DWORD, 'dwCoInit'], [T.DWORD, 'dwNewThreadAptRefs']])),
    PreUninitialize: Pointer(Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [T.DWORD, 'dwCurThreadAptRefs']])),
    PostUninitialize: Pointer(Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [T.DWORD, 'dwNewThreadAptRefs']]))
});
T.IThumbnailExtractorVtbl = Struct('IThumbnailExtractorVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IThumbnailExtractor), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IThumbnailExtractor), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IThumbnailExtractor), 'This']])),
    ExtractThumbnail: Pointer(Fn(T.HRESULT, [[Pointer(T.IThumbnailExtractor), 'This'], [Pointer(T.IStorage), 'pStg'], [T.ULONG, 'ulLength'], [T.ULONG, 'ulHeight'], [Pointer(T.ULONG), 'pulOutputLength'], [Pointer(T.ULONG), 'pulOutputHeight'], [Pointer(T.HBITMAP), 'phOutputBitmap']])),
    OnFileUpdated: Pointer(Fn(T.HRESULT, [[Pointer(T.IThumbnailExtractor), 'This'], [Pointer(T.IStorage), 'pStg']]))
});
T.COINIT = Enum('COINIT_SPEED_OVER_MEMORY', {
    COINIT_APARTMENTTHREADED: 2,
    COINIT_MULTITHREADED: 0,
    COINIT_DISABLE_OLE1DDE: 4,
    COINIT_SPEED_OVER_MEMORY: 8
});
T.REGCLS = Enum('REGCLS_SURROGATE', {
    REGCLS_SINGLEUSE: 0,
    REGCLS_MULTIPLEUSE: 1,
    REGCLS_MULTI_SEPARATE: 2,
    REGCLS_SUSPENDED: 4,
    REGCLS_SURROGATE: 8
});
T.COWAIT_FLAGS = Enum('COWAIT_ALERTABLE', {
    COWAIT_WAITALL: 1,
    COWAIT_ALERTABLE: 2
});
T.STGOPTIONS = Struct('tagSTGOPTIONS', {
    usVersion: T.USHORT,
    reserved: T.USHORT,
    ulSectorSize: T.ULONG,
    pwcsTemplateFile: Pointer(T.WCHAR)
});
T.IInternet = Struct('IInternet', null);
T.IBinding = Struct('IBinding', null);
T.IBindStatusCallback = Struct('IBindStatusCallback', null);
T.IBindStatusCallbackEx = Struct('IBindStatusCallbackEx', null);
T.IAuthenticate = Struct('IAuthenticate', null);
T.IHttpNegotiate = Struct('IHttpNegotiate', null);
T.IHttpNegotiate2 = Struct('IHttpNegotiate2', null);
T.IBindHost = Struct('IBindHost', null);
T.IWinInetInfo = Struct('IWinInetInfo', null);
T.IWinInetHttpInfo = Struct('IWinInetHttpInfo', null);
T.IWindowForBindingUI = Struct('IWindowForBindingUI', null);
T.IHttpSecurity = Struct('IHttpSecurity', null);
T.IPersistMoniker = Struct('IPersistMoniker', null);
T.IMonikerProp = Struct('IMonikerProp', null);
T.IBindProtocol = Struct('IBindProtocol', null);
T.IInternetBindInfo = Struct('IInternetBindInfo', null);
T.IInternetPriority = Struct('IInternetPriority', null);
T.IInternetProtocolRoot = Struct('IInternetProtocolRoot', null);
T.IInternetProtocolSink = Struct('IInternetProtocolSink', null);
T.IInternetProtocol = Struct('IInternetProtocol', null);
T.IInternetProtocolInfo = Struct('IInternetProtocolInfo', null);
T.IInternetSession = Struct('IInternetSession', null);
T.IInternetSecurityMgrSite = Struct('IInternetSecurityMgrSite', null);
T.IInternetSecurityManager = Struct('IInternetSecurityManager', null);
T.IInternetHostSecurityManager = Struct('IInternetHostSecurityManager', null);
T.IInternetZoneManager = Struct('IInternetZoneManager', null);
T.IInternetZoneManagerEx = Struct('IInternetZoneManagerEx', null);
T.IInternetZoneManagerEx2 = Struct('IInternetZoneManagerEx2', null);
T.ISoftDistExt = Struct('ISoftDistExt', null);
T.IUri = Struct('IUri', null);
T.IUriContainer = Struct('IUriContainer', null);
T.IUriBuilder = Struct('IUriBuilder', null);
T.IUriBuilderFactory = Struct('IUriBuilderFactory', null);
T.IInternetProtocolEx = Struct('IInternetProtocolEx', null);
T.IOleWindow = Struct('IOleWindow', null);
T.IOleInPlaceObject = Struct('IOleInPlaceObject', null);
T.IOleInPlaceUIWindow = Struct('IOleInPlaceUIWindow', null);
T.IOleInPlaceFrame = Struct('IOleInPlaceFrame', null);
T.IOleInPlaceActiveObject = Struct('IOleInPlaceActiveObject', null);
T.IOleInPlaceSite = Struct('IOleInPlaceSite', null);
T.IParseDisplayName = Struct('IParseDisplayName', null);
T.IOleContainer = Struct('IOleContainer', null);
T.IOleItemContainer = Struct('IOleItemContainer', null);
T.IOleLink = Struct('IOleLink', null);
T.IOleClientSite = Struct('IOleClientSite', null);
T.IOleCache = Struct('IOleCache', null);
T.IOleCache2 = Struct('IOleCache2', null);
T.IOleCacheControl = Struct('IOleCacheControl', null);
T.IEnumOLEVERB = Struct('IEnumOLEVERB', null);
T.IOleObject = Struct('IOleObject', null);
T.IOleAdviseHolder = Struct('IOleAdviseHolder', null);
T.IContinue = Struct('IContinue', null);
T.IViewObject = Struct('IViewObject', null);
T.IViewObject2 = Struct('IViewObject2', null);
T.IDropSource = Struct('IDropSource', null);
T.IDropTarget = Struct('IDropTarget', null);
T.OLERENDER = Enum('OLERENDER_ASIS', {
    OLERENDER_NONE: 0,
    OLERENDER_DRAW: 1,
    OLERENDER_FORMAT: 2,
    OLERENDER_ASIS: 3
});
T.LPOLERENDER = Pointer(Enum('tagOLERENDER', null));
T.OBJECTDESCRIPTOR = Struct('tagOBJECTDESCRIPTOR', {
    cbSize: T.ULONG,
    clsid: T.CLSID,
    dwDrawAspect: T.DWORD,
    sizel: T.SIZEL,
    pointl: T.POINTL,
    dwStatus: T.DWORD,
    dwFullUserTypeName: T.DWORD,
    dwSrcOfCopy: T.DWORD
});
T.POBJECTDESCRIPTOR = Pointer(Struct('tagOBJECTDESCRIPTOR', null));
T.LPOBJECTDESCRIPTOR = Pointer(Struct('tagOBJECTDESCRIPTOR', null));
T.LINKSRCDESCRIPTOR = Struct('tagOBJECTDESCRIPTOR', null);
T.PLINKSRCDESCRIPTOR = Pointer(Struct('tagOBJECTDESCRIPTOR', null));
T.LPLINKSRCDESCRIPTOR = Pointer(Struct('tagOBJECTDESCRIPTOR', null));
T.LPOLEWINDOW = Pointer(T.IOleWindow);
T.IOleWindowVtbl = Struct('IOleWindowVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleWindow), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleWindow), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleWindow), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleWindow), 'This'], [Pointer(T.HWND), 'phwnd']])),
    ContextSensitiveHelp: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleWindow), 'This'], [T.BOOL, 'fEnterMode']]))
});
T.LPOLEINPLACEOBJECT = Pointer(T.IOleInPlaceObject);
T.IOleInPlaceObjectVtbl = Struct('IOleInPlaceObjectVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceObject), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceObject), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This'], [Pointer(T.HWND), 'phwnd']])),
    ContextSensitiveHelp: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This'], [T.BOOL, 'fEnterMode']])),
    InPlaceDeactivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This']])),
    UIDeactivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This']])),
    SetObjectRects: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This'], [T.LPCRECT, 'lprcPosRect'], [T.LPCRECT, 'lprcClipRect']])),
    ReactivateAndUndo: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This']]))
});
T.LPOLEINPLACEUIWINDOW = Pointer(T.IOleInPlaceUIWindow);
T.BORDERWIDTHS = T.RECT;
T.LPBORDERWIDTHS = T.LPRECT;
T.LPCBORDERWIDTHS = T.LPCRECT;
T.IOleInPlaceUIWindowVtbl = Struct('IOleInPlaceUIWindowVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceUIWindow), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceUIWindow), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [Pointer(T.HWND), 'phwnd']])),
    ContextSensitiveHelp: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [T.BOOL, 'fEnterMode']])),
    GetBorder: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [T.LPRECT, 'lprectBorder']])),
    RequestBorderSpace: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [T.LPCBORDERWIDTHS, 'pborderwidths']])),
    SetBorderSpace: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [T.LPCBORDERWIDTHS, 'pborderwidths']])),
    SetActiveObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [Pointer(T.IOleInPlaceActiveObject), 'pActiveObject'], [T.LPCOLESTR, 'pszObjName']]))
});
T.LPOLEINPLACEFRAME = Pointer(T.IOleInPlaceFrame);
T.OLEINPLACEFRAMEINFO = Struct('tagOleInPlaceFrameInfo', {
    cb: T.UINT,
    fMDIApp: T.BOOL,
    hwndFrame: T.HWND,
    haccel: T.HACCEL,
    cAccelEntries: T.UINT
});
T.LPOLEINPLACEFRAMEINFO = Pointer(Struct('tagOleInPlaceFrameInfo', null));
T.OLEMENUGROUPWIDTHS = Struct('tagOleMenuGroupWidths', {
    width: ArrayType(T.LONG, 6)
});
T.LPOLEMENUGROUPWIDTHS = Pointer(Struct('tagOleMenuGroupWidths', null));
T.HOLEMENU = T.HGLOBAL;
T.IOleInPlaceFrameVtbl = Struct('IOleInPlaceFrameVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceFrame), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceFrame), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [Pointer(T.HWND), 'phwnd']])),
    ContextSensitiveHelp: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.BOOL, 'fEnterMode']])),
    GetBorder: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.LPRECT, 'lprectBorder']])),
    RequestBorderSpace: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.LPCBORDERWIDTHS, 'pborderwidths']])),
    SetBorderSpace: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.LPCBORDERWIDTHS, 'pborderwidths']])),
    SetActiveObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [Pointer(T.IOleInPlaceActiveObject), 'pActiveObject'], [T.LPCOLESTR, 'pszObjName']])),
    InsertMenus: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.HMENU, 'hmenuShared'], [T.LPOLEMENUGROUPWIDTHS, 'lpMenuWidths']])),
    SetMenu: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.HMENU, 'hmenuShared'], [T.HOLEMENU, 'holemenu'], [T.HWND, 'hwndActiveObject']])),
    RemoveMenus: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.HMENU, 'hmenuShared']])),
    SetStatusText: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.LPCOLESTR, 'pszStatusText']])),
    EnableModeless: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.BOOL, 'fEnable']])),
    TranslateAcceleratorA: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.LPMSG, 'lpmsg'], [T.WORD, 'wID']]))
});
T.LPOLEINPLACEACTIVEOBJECT = Pointer(T.IOleInPlaceActiveObject);
T.IOleInPlaceActiveObjectVtbl = Struct('IOleInPlaceActiveObjectVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceActiveObject), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceActiveObject), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [Pointer(T.HWND), 'phwnd']])),
    ContextSensitiveHelp: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.BOOL, 'fEnterMode']])),
    TranslateAcceleratorA: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.LPMSG, 'lpmsg']])),
    OnFrameWindowActivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.BOOL, 'fActivate']])),
    OnDocWindowActivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.BOOL, 'fActivate']])),
    ResizeBorder: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.LPCRECT, 'prcBorder'], [Pointer(T.IOleInPlaceUIWindow), 'pUIWindow'], [T.BOOL, 'fFrameWindow']])),
    EnableModeless: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.BOOL, 'fEnable']]))
});
T.LPOLEINPLACESITE = Pointer(T.IOleInPlaceSite);
T.IOleInPlaceSiteVtbl = Struct('IOleInPlaceSiteVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceSite), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleInPlaceSite), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [Pointer(T.HWND), 'phwnd']])),
    ContextSensitiveHelp: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [T.BOOL, 'fEnterMode']])),
    CanInPlaceActivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']])),
    OnInPlaceActivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']])),
    OnUIActivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']])),
    GetWindowContext: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [Pointer(Pointer(T.IOleInPlaceFrame)), 'ppFrame'], [Pointer(Pointer(T.IOleInPlaceUIWindow)), 'ppDoc'], [T.LPRECT, 'lprcPosRect'], [T.LPRECT, 'lprcClipRect'], [T.LPOLEINPLACEFRAMEINFO, 'lpFrameInfo']])),
    Scroll: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [T.SIZE, 'scrollExtent']])),
    OnUIDeactivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [T.BOOL, 'fUndoable']])),
    OnInPlaceDeactivate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']])),
    DiscardUndoState: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']])),
    DeactivateAndUndo: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']])),
    OnPosRectChange: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [T.LPCRECT, 'lprcPosRect']]))
});
T.LPPARSEDISPLAYNAME = Pointer(T.IParseDisplayName);
T.IParseDisplayNameVtbl = Struct('IParseDisplayNameVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IParseDisplayName), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IParseDisplayName), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IParseDisplayName), 'This']])),
    ParseDisplayName: Pointer(Fn(T.HRESULT, [[Pointer(T.IParseDisplayName), 'This'], [Pointer(T.IBindCtx), 'pbc'], [T.LPOLESTR, 'pszDisplayName'], [Pointer(T.ULONG), 'pchEaten'], [Pointer(Pointer(T.IMoniker)), 'ppmkOut']]))
});
T.LPOLECONTAINER = Pointer(T.IOleContainer);
T.IOleContainerVtbl = Struct('IOleContainerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleContainer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleContainer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleContainer), 'This']])),
    ParseDisplayName: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleContainer), 'This'], [Pointer(T.IBindCtx), 'pbc'], [T.LPOLESTR, 'pszDisplayName'], [Pointer(T.ULONG), 'pchEaten'], [Pointer(Pointer(T.IMoniker)), 'ppmkOut']])),
    EnumObjects: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleContainer), 'This'], [T.DWORD, 'grfFlags'], [Pointer(Pointer(T.IEnumUnknown)), 'ppenum']])),
    LockContainer: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleContainer), 'This'], [T.BOOL, 'fLock']]))
});
T.LPOLEITEMCONTAINER = Pointer(T.IOleItemContainer);
T.BINDSPEED = Enum('BINDSPEED_IMMEDIATE', {
    BINDSPEED_INDEFINITE: 1,
    BINDSPEED_MODERATE: 2,
    BINDSPEED_IMMEDIATE: 3
});
T.OLECONTF = Enum('OLECONTF_ONLYIFRUNNING', {
    OLECONTF_EMBEDDINGS: 1,
    OLECONTF_LINKS: 2,
    OLECONTF_OTHERS: 4,
    OLECONTF_ONLYUSER: 8,
    OLECONTF_ONLYIFRUNNING: 16
});
T.IOleItemContainerVtbl = Struct('IOleItemContainerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleItemContainer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleItemContainer), 'This']])),
    ParseDisplayName: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [Pointer(T.IBindCtx), 'pbc'], [T.LPOLESTR, 'pszDisplayName'], [Pointer(T.ULONG), 'pchEaten'], [Pointer(Pointer(T.IMoniker)), 'ppmkOut']])),
    EnumObjects: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [T.DWORD, 'grfFlags'], [Pointer(Pointer(T.IEnumUnknown)), 'ppenum']])),
    LockContainer: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [T.BOOL, 'fLock']])),
    GetObjectA: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [T.LPOLESTR, 'pszItem'], [T.DWORD, 'dwSpeedNeeded'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    GetObjectStorage: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [T.LPOLESTR, 'pszItem'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvStorage']])),
    IsRunning: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [T.LPOLESTR, 'pszItem']]))
});
T.LPOLELINK = Pointer(T.IOleLink);
T.OLEUPDATE = Enum('OLEUPDATE_ONCALL', {
    OLEUPDATE_ALWAYS: 1,
    OLEUPDATE_ONCALL: 3
});
T.POLEUPDATE = Pointer(Enum('tagOLEUPDATE', null));
T.LPOLEUPDATE = Pointer(Enum('tagOLEUPDATE', null));
T.OLELINKBIND = Enum('OLELINKBIND_EVENIFCLASSDIFF', {
    OLELINKBIND_EVENIFCLASSDIFF: 1
});
T.IOleLinkVtbl = Struct('IOleLinkVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleLink), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleLink), 'This']])),
    SetUpdateOptions: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [T.DWORD, 'dwUpdateOpt']])),
    GetUpdateOptions: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.DWORD), 'pdwUpdateOpt']])),
    SetSourceMoniker: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.IMoniker), 'pmk'], [Pointer(T.CLSID), 'rclsid']])),
    GetSourceMoniker: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(Pointer(T.IMoniker)), 'ppmk']])),
    SetSourceDisplayName: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [T.LPCOLESTR, 'pszStatusText']])),
    GetSourceDisplayName: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.LPOLESTR), 'ppszDisplayName']])),
    BindToSource: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [T.DWORD, 'bindflags'], [Pointer(T.IBindCtx), 'pbc']])),
    BindIfRunning: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This']])),
    GetBoundSource: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(Pointer(T.IUnknown)), 'ppunk']])),
    UnbindSource: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This']])),
    Update: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.IBindCtx), 'pbc']]))
});
T.LPOLECLIENTSITE = Pointer(T.IOleClientSite);
T.IOleClientSiteVtbl = Struct('IOleClientSiteVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleClientSite), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleClientSite), 'This']])),
    SaveObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This']])),
    GetMoniker: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This'], [T.DWORD, 'dwAssign'], [T.DWORD, 'dwWhichMoniker'], [Pointer(Pointer(T.IMoniker)), 'ppmk']])),
    GetContainer: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This'], [Pointer(Pointer(T.IOleContainer)), 'ppContainer']])),
    ShowObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This']])),
    OnShowWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This'], [T.BOOL, 'fShow']])),
    RequestNewObjectLayout: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This']]))
});
T.LPOLECACHE = Pointer(T.IOleCache);
T.IOleCacheVtbl = Struct('IOleCacheVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleCache), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleCache), 'This']])),
    Cache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [T.DWORD, 'advf'], [Pointer(T.DWORD), 'pdwConnection']])),
    Uncache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [T.DWORD, 'dwConnection']])),
    EnumCache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumSTATDATA']])),
    InitCache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(T.IDataObject), 'pDataObject']])),
    SetData: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pmedium'], [T.BOOL, 'fRelease']]))
});
T.LPOLECACHE2 = Pointer(T.IOleCache2);
T.DISCARDCACHE = Enum('DISCARDCACHE_NOSAVE', {
    DISCARDCACHE_SAVEIFDIRTY: 0,
    DISCARDCACHE_NOSAVE: 1
});
T.IOleCache2Vtbl = Struct('IOleCache2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleCache2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleCache2), 'This']])),
    Cache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [T.DWORD, 'advf'], [Pointer(T.DWORD), 'pdwConnection']])),
    Uncache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [T.DWORD, 'dwConnection']])),
    EnumCache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumSTATDATA']])),
    InitCache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [Pointer(T.IDataObject), 'pDataObject']])),
    SetData: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pmedium'], [T.BOOL, 'fRelease']])),
    UpdateCache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [T.LPDATAOBJECT, 'pDataObject'], [T.DWORD, 'grfUpdf'], [T.LPVOID, 'pReserved']])),
    DiscardCache: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [T.DWORD, 'dwDiscardOptions']]))
});
T.LPOLECACHECONTROL = Pointer(T.IOleCacheControl);
T.IOleCacheControlVtbl = Struct('IOleCacheControlVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCacheControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleCacheControl), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleCacheControl), 'This']])),
    OnRun: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCacheControl), 'This'], [T.LPDATAOBJECT, 'pDataObject']])),
    OnStop: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleCacheControl), 'This']]))
});
T.LPENUMOLEVERB = Pointer(T.IEnumOLEVERB);
T.OLEVERB = Struct('tagOLEVERB', {
    lVerb: T.LONG,
    lpszVerbName: T.LPOLESTR,
    fuFlags: T.DWORD,
    grfAttribs: T.DWORD
});
T.LPOLEVERB = Pointer(Struct('tagOLEVERB', null));
T.OLEVERBATTRIB = Enum('OLEVERBATTRIB_ONCONTAINERMENU', {
    OLEVERBATTRIB_NEVERDIRTIES: 1,
    OLEVERBATTRIB_ONCONTAINERMENU: 2
});
T.IEnumOLEVERBVtbl = Struct('IEnumOLEVERBVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumOLEVERB), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumOLEVERB), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [T.ULONG, 'celt'], [T.LPOLEVERB, 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [Pointer(Pointer(T.IEnumOLEVERB)), 'ppenum']]))
});
T.LPOLEOBJECT = Pointer(T.IOleObject);
T.OLEGETMONIKER = Enum('OLEGETMONIKER_TEMPFORUSER', {
    OLEGETMONIKER_ONLYIFTHERE: 1,
    OLEGETMONIKER_FORCEASSIGN: 2,
    OLEGETMONIKER_UNASSIGN: 3,
    OLEGETMONIKER_TEMPFORUSER: 4
});
T.OLEWHICHMK = Enum('OLEWHICHMK_OBJFULL', {
    OLEWHICHMK_CONTAINER: 1,
    OLEWHICHMK_OBJREL: 2,
    OLEWHICHMK_OBJFULL: 3
});
T.USERCLASSTYPE = Enum('USERCLASSTYPE_APPNAME', {
    USERCLASSTYPE_FULL: 1,
    USERCLASSTYPE_SHORT: 2,
    USERCLASSTYPE_APPNAME: 3
});
T.OLEMISC = Enum('OLEMISC_SUPPORTSMULTILEVELUNDO', {
    OLEMISC_RECOMPOSEONRESIZE: 1,
    OLEMISC_ONLYICONIC: 2,
    OLEMISC_INSERTNOTREPLACE: 4,
    OLEMISC_STATIC: 8,
    OLEMISC_CANTLINKINSIDE: 16,
    OLEMISC_CANLINKBYOLE1: 32,
    OLEMISC_ISLINKOBJECT: 64,
    OLEMISC_INSIDEOUT: 128,
    OLEMISC_ACTIVATEWHENVISIBLE: 256,
    OLEMISC_RENDERINGISDEVICEINDEPENDENT: 512,
    OLEMISC_INVISIBLEATRUNTIME: 1024,
    OLEMISC_ALWAYSRUN: 2048,
    OLEMISC_ACTSLIKEBUTTON: 4096,
    OLEMISC_ACTSLIKELABEL: 8192,
    OLEMISC_NOUIACTIVATE: 16384,
    OLEMISC_ALIGNABLE: 32768,
    OLEMISC_SIMPLEFRAME: 65536,
    OLEMISC_SETCLIENTSITEFIRST: 131072,
    OLEMISC_IMEMODE: 262144,
    OLEMISC_IGNOREACTIVATEWHENVISIBLE: 524288,
    OLEMISC_WANTSTOMENUMERGE: 1048576,
    OLEMISC_SUPPORTSMULTILEVELUNDO: 2097152
});
T.OLECLOSE = Enum('OLECLOSE_PROMPTSAVE', {
    OLECLOSE_SAVEIFDIRTY: 0,
    OLECLOSE_NOSAVE: 1,
    OLECLOSE_PROMPTSAVE: 2
});
T.IOleObjectVtbl = Struct('IOleObjectVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleObject), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleObject), 'This']])),
    SetClientSite: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.IOleClientSite), 'pClientSite']])),
    GetClientSite: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(Pointer(T.IOleClientSite)), 'ppClientSite']])),
    SetHostNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.LPCOLESTR, 'szContainerApp'], [T.LPCOLESTR, 'szContainerObj']])),
    Close: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwSaveOption']])),
    SetMoniker: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwWhichMoniker'], [Pointer(T.IMoniker), 'pmk']])),
    GetMoniker: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwAssign'], [T.DWORD, 'dwWhichMoniker'], [Pointer(Pointer(T.IMoniker)), 'ppmk']])),
    InitFromData: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.IDataObject), 'pDataObject'], [T.BOOL, 'fCreation'], [T.DWORD, 'dwReserved']])),
    GetClipboardData: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwReserved'], [Pointer(Pointer(T.IDataObject)), 'ppDataObject']])),
    DoVerb: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.LONG, 'iVerb'], [T.LPMSG, 'lpmsg'], [Pointer(T.IOleClientSite), 'pActiveSite'], [T.LONG, 'lindex'], [T.HWND, 'hwndParent'], [T.LPCRECT, 'lprcPosRect']])),
    EnumVerbs: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(Pointer(T.IEnumOLEVERB)), 'ppEnumOleVerb']])),
    Update: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This']])),
    IsUpToDate: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This']])),
    GetUserClassID: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.CLSID), 'pClsid']])),
    GetUserType: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwFormOfType'], [Pointer(T.LPOLESTR), 'pszUserType']])),
    SetExtent: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwDrawAspect'], [Pointer(T.SIZEL), 'psizel']])),
    GetExtent: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwDrawAspect'], [Pointer(T.SIZEL), 'psizel']])),
    Advise: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.IAdviseSink), 'pAdvSink'], [Pointer(T.DWORD), 'pdwConnection']])),
    Unadvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwConnection']])),
    EnumAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumAdvise']])),
    GetMiscStatus: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwAspect'], [Pointer(T.DWORD), 'pdwStatus']])),
    SetColorScheme: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.LOGPALETTE), 'pLogpal']]))
});
T.LPOLEADVISEHOLDER = Pointer(T.IOleAdviseHolder);
T.IOleAdviseHolderVtbl = Struct('IOleAdviseHolderVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IOleAdviseHolder), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IOleAdviseHolder), 'This']])),
    Advise: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [Pointer(T.IAdviseSink), 'pAdvise'], [Pointer(T.DWORD), 'pdwConnection']])),
    Unadvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [T.DWORD, 'dwConnection']])),
    EnumAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumAdvise']])),
    SendOnRename: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [Pointer(T.IMoniker), 'pmk']])),
    SendOnSave: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This']])),
    SendOnClose: Pointer(Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This']]))
});
T.IContinueVtbl = Struct('IContinueVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IContinue), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IContinue), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IContinue), 'This']])),
    FContinue: Pointer(Fn(T.HRESULT, [[Pointer(T.IContinue), 'This']]))
});
T.LPVIEWOBJECT = Pointer(T.IViewObject);
T.IViewObjectVtbl = Struct('IViewObjectVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IViewObject), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IViewObject), 'This']])),
    Draw: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.HDC, 'hdcTargetDev'], [T.HDC, 'hdcDraw'], [T.LPCRECTL, 'lprcBounds'], [T.LPCRECTL, 'lprcWBounds'], [Pointer(Fn(T.BOOL, [[T.ULONG_PTR, 'dwContinue']])), 'pfnContinue'], [T.ULONG_PTR, 'dwContinue']])),
    GetColorSet: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.HDC, 'hicTargetDev'], [Pointer(Pointer(T.LOGPALETTE)), 'ppColorSet']])),
    Freeze: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DWORD), 'pdwFreeze']])),
    Unfreeze: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwFreeze']])),
    SetAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'aspects'], [T.DWORD, 'advf'], [Pointer(T.IAdviseSink), 'pAdvSink']])),
    GetAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [Pointer(T.DWORD), 'pAspects'], [Pointer(T.DWORD), 'pAdvf'], [Pointer(Pointer(T.IAdviseSink)), 'ppAdvSink']]))
});
T.LPVIEWOBJECT2 = Pointer(T.IViewObject2);
T.IViewObject2Vtbl = Struct('IViewObject2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IViewObject2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IViewObject2), 'This']])),
    Draw: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.HDC, 'hdcTargetDev'], [T.HDC, 'hdcDraw'], [T.LPCRECTL, 'lprcBounds'], [T.LPCRECTL, 'lprcWBounds'], [Pointer(Fn(T.BOOL, [[T.ULONG_PTR, 'dwContinue']])), 'pfnContinue'], [T.ULONG_PTR, 'dwContinue']])),
    GetColorSet: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.HDC, 'hicTargetDev'], [Pointer(Pointer(T.LOGPALETTE)), 'ppColorSet']])),
    Freeze: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DWORD), 'pdwFreeze']])),
    Unfreeze: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [T.DWORD, 'dwFreeze']])),
    SetAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [T.DWORD, 'aspects'], [T.DWORD, 'advf'], [Pointer(T.IAdviseSink), 'pAdvSink']])),
    GetAdvise: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [Pointer(T.DWORD), 'pAspects'], [Pointer(T.DWORD), 'pAdvf'], [Pointer(Pointer(T.IAdviseSink)), 'ppAdvSink']])),
    GetExtent: Pointer(Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.LPSIZEL, 'lpsizel']]))
});
T.LPDROPSOURCE = Pointer(T.IDropSource);
T.IDropSourceVtbl = Struct('IDropSourceVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IDropSource), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IDropSource), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IDropSource), 'This']])),
    QueryContinueDrag: Pointer(Fn(T.HRESULT, [[Pointer(T.IDropSource), 'This'], [T.BOOL, 'fEscapePressed'], [T.DWORD, 'grfKeyState']])),
    GiveFeedback: Pointer(Fn(T.HRESULT, [[Pointer(T.IDropSource), 'This'], [T.DWORD, 'dwEffect']]))
});
T.LPDROPTARGET = Pointer(T.IDropTarget);
T.IDropTargetVtbl = Struct('IDropTargetVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IDropTarget), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IDropTarget), 'This']])),
    DragEnter: Pointer(Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This'], [Pointer(T.IDataObject), 'pDataObj'], [T.DWORD, 'grfKeyState'], [T.POINTL, 'pt'], [Pointer(T.DWORD), 'pdwEffect']])),
    DragOver: Pointer(Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This'], [T.DWORD, 'grfKeyState'], [T.POINTL, 'pt'], [Pointer(T.DWORD), 'pdwEffect']])),
    DragLeave: Pointer(Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This']])),
    Drop: Pointer(Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This'], [Pointer(T.IDataObject), 'pDataObj'], [T.DWORD, 'grfKeyState'], [T.POINTL, 'pt'], [Pointer(T.DWORD), 'pdwEffect']]))
});
T.IServiceProvider = Struct('IServiceProvider', null);
T.LPSERVICEPROVIDER = Pointer(T.IServiceProvider);
T.IServiceProviderVtbl = Struct('IServiceProviderVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IServiceProvider), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IServiceProvider), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IServiceProvider), 'This']])),
    QueryService: Pointer(Fn(T.HRESULT, [[Pointer(T.IServiceProvider), 'This'], [Pointer(T.GUID), 'guidService'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']]))
});
T.IXMLDOMNode = Struct('IXMLDOMNode', null);
T.IXMLDOMDocument = Struct('IXMLDOMDocument', null);
T.IXMLDOMNodeList = Struct('IXMLDOMNodeList', null);
T.IXMLDOMNamedNodeMap = Struct('IXMLDOMNamedNodeMap', null);
T.IXMLDOMDocumentFragment = Struct('IXMLDOMDocumentFragment', null);
T.IXMLDOMCharacterData = Struct('IXMLDOMCharacterData', null);
T.IXMLDOMAttribute = Struct('IXMLDOMAttribute', null);
T.IXMLDOMElement = Struct('IXMLDOMElement', null);
T.IXMLDOMText = Struct('IXMLDOMText', null);
T.IXMLDOMComment = Struct('IXMLDOMComment', null);
T.IXMLDOMProcessingInstruction = Struct('IXMLDOMProcessingInstruction', null);
T.IXMLDOMCDATASection = Struct('IXMLDOMCDATASection', null);
T.IXMLDOMDocumentType = Struct('IXMLDOMDocumentType', null);
T.IXMLDOMNotation = Struct('IXMLDOMNotation', null);
T.IXMLDOMEntity = Struct('IXMLDOMEntity', null);
T.IXMLDOMEntityReference = Struct('IXMLDOMEntityReference', null);
T.IXMLDOMImplementation = Struct('IXMLDOMImplementation', null);
T.IXMLDOMParseError = Struct('IXMLDOMParseError', null);
T.XMLDOMDocumentEvents = Struct('XMLDOMDocumentEvents', null);
T.DOMDocument = Struct('DOMDocument', null);
T.DOMFreeThreadedDocument = Struct('DOMFreeThreadedDocument', null);
T.IXMLHttpRequest = Struct('IXMLHttpRequest', null);
T.XMLHTTPRequest = Struct('XMLHTTPRequest', null);
T.IXMLDSOControl = Struct('IXMLDSOControl', null);
T.XMLDSOControl = Struct('XMLDSOControl', null);
T.IXMLElementCollection = Struct('IXMLElementCollection', null);
T.IXMLElement = Struct('IXMLElement', null);
T.IXMLDocument = Struct('IXMLDocument', null);
T.IXMLElement2 = Struct('IXMLElement2', null);
T.IXMLDocument2 = Struct('IXMLDocument2', null);
T.IXMLAttribute = Struct('IXMLAttribute', null);
T.IXMLError = Struct('IXMLError', null);
T.IXMLElementNotificationSink = Struct('IXMLElementNotificationSink', null);
T.XMLDocument = Struct('XMLDocument', null);
T.IDispatch = Struct('IDispatch', null);
T.IEnumVARIANT = Struct('IEnumVARIANT', null);
T.ITypeComp = Struct('ITypeComp', null);
T.ITypeInfo = Struct('ITypeInfo', null);
T.ITypeInfo2 = Struct('ITypeInfo2', null);
T.ITypeLib = Struct('ITypeLib', null);
T.ITypeLib2 = Struct('ITypeLib2', null);
T.ITypeChangeEvents = Struct('ITypeChangeEvents', null);
T.IErrorInfo = Struct('IErrorInfo', null);
T.ICreateErrorInfo = Struct('ICreateErrorInfo', null);
T.ISupportErrorInfo = Struct('ISupportErrorInfo', null);
T.ITypeFactory = Struct('ITypeFactory', null);
T.ITypeMarshal = Struct('ITypeMarshal', null);
T.IRecordInfo = Struct('IRecordInfo', null);
T.ICreateTypeInfo = Struct('ICreateTypeInfo', null);
T.ICreateTypeInfo2 = Struct('ICreateTypeInfo2', null);
T.ICreateTypeLib = Struct('ICreateTypeLib', null);
T.ICreateTypeLib2 = Struct('ICreateTypeLib2', null);
T.IErrorLog = Struct('IErrorLog', null);
T.IPropertyBag = Struct('IPropertyBag', null);
T.CURRENCY = T.CY;
T.SAFEARRAYBOUND = Struct('tagSAFEARRAYBOUND', {
    cElements: T.ULONG,
    lLbound: T.LONG
});
T.LPSAFEARRAYBOUND = Pointer(Struct('tagSAFEARRAYBOUND', null));
T.wireVARIANT = Pointer(Struct('_wireVARIANT', null));
T.wireBRECORD = Pointer(Struct('_wireBRECORD', null));
T.SAFEARR_BSTR = Struct('_wireSAFEARR_BSTR', {
    Size: T.ULONG,
    aBstr: Pointer(T.wireBSTR)
});
T.SAFEARR_UNKNOWN = Struct('_wireSAFEARR_UNKNOWN', {
    Size: T.ULONG,
    apUnknown: Pointer(Pointer(T.IUnknown))
});
T.SAFEARR_DISPATCH = Struct('_wireSAFEARR_DISPATCH', {
    Size: T.ULONG,
    apDispatch: Pointer(Pointer(T.IDispatch))
});
T.SAFEARR_VARIANT = Struct('_wireSAFEARR_VARIANT', {
    Size: T.ULONG,
    aVariant: Pointer(T.wireVARIANT)
});
T.SAFEARR_BRECORD = Struct('_wireSAFEARR_BRECORD', {
    Size: T.ULONG,
    aRecord: Pointer(T.wireBRECORD)
});
T.SAFEARR_HAVEIID = Struct('_wireSAFEARR_HAVEIID', {
    Size: T.ULONG,
    apUnknown: Pointer(Pointer(T.IUnknown)),
    iid: T.IID
});
T.SF_TYPE = Enum('SF_HAVEIID', {
    SF_ERROR: 0,
    SF_I1: 1,
    SF_I2: 2,
    SF_I4: 3,
    SF_I8: 4,
    SF_BSTR: 5,
    SF_UNKNOWN: 6,
    SF_DISPATCH: 7,
    SF_VARIANT: 8,
    SF_RECORD: 9,
    SF_HAVEIID: 10
});
T.SAFEARRAYUNION = Struct('_wireSAFEARRAY_UNION', {
    sfType: T.ULONG,
    u: Union('', {
        BstrStr: T.SAFEARR_BSTR,
        UnknownStr: T.SAFEARR_UNKNOWN,
        DispatchStr: T.SAFEARR_DISPATCH,
        VariantStr: T.SAFEARR_VARIANT,
        RecordStr: T.SAFEARR_BRECORD,
        HaveIidStr: T.SAFEARR_HAVEIID,
        ByteStr: T.BYTE_SIZEDARR,
        WordStr: T.WORD_SIZEDARR,
        LongStr: T.DWORD_SIZEDARR,
        HyperStr: T.HYPER_SIZEDARR
    })
});
T.wireSAFEARRAY = Pointer(Struct('_wireSAFEARRAY', {
    cDims: T.USHORT,
    fFeatures: T.USHORT,
    cbElements: T.ULONG,
    cLocks: T.ULONG,
    uArrayStructs: T.SAFEARRAYUNION,
    rgsabound: ArrayType(T.SAFEARRAYBOUND, 1)
}));
T.wirePSAFEARRAY = Pointer(T.wireSAFEARRAY);
T.SAFEARRAY = Struct('tagSAFEARRAY', {
    cDims: T.USHORT,
    fFeatures: T.USHORT,
    cbElements: T.ULONG,
    cLocks: T.ULONG,
    pvData: T.PVOID,
    rgsabound: ArrayType(T.SAFEARRAYBOUND, 1)
});
T.LPSAFEARRAY = Pointer(T.SAFEARRAY);
T.VARIANT = Struct('tagVARIANT', null);
T.LPVARIANT = Pointer(T.VARIANT);
T.VARIANTARG = T.VARIANT;
T.LPVARIANTARG = Pointer(T.VARIANTARG);
T.DISPID = T.LONG;
T.HREFTYPE = T.DWORD;
T.MEMBERID = T.DISPID;
T.TYPEKIND = Enum('TKIND_MAX', {
    TKIND_ENUM: 0,
    TKIND_RECORD: 1,
    TKIND_MODULE: 2,
    TKIND_INTERFACE: 3,
    TKIND_DISPATCH: 4,
    TKIND_COCLASS: 5,
    TKIND_ALIAS: 6,
    TKIND_UNION: 7,
    TKIND_MAX: 8
});
T.TYPEDESC = Struct('tagTYPEDESC', {
    __unnamed0: Union('', {
        lptdesc: Pointer(Struct('tagTYPEDESC', null)),
        lpadesc: Pointer(Struct('tagARRAYDESC', null)),
        hreftype: T.HREFTYPE
    }),
    vt: T.VARTYPE
});
T.ARRAYDESC = Struct('tagARRAYDESC', {
    tdescElem: T.TYPEDESC,
    cDims: T.USHORT,
    rgbounds: ArrayType(T.SAFEARRAYBOUND, 1)
});
T.PARAMDESCEX = Struct('tagPARAMDESCEX', {
    cBytes: T.ULONG,
    varDefaultValue: T.VARIANTARG
});
T.LPPARAMDESCEX = Pointer(Struct('tagPARAMDESCEX', null));
T.PARAMDESC = Struct('tagPARAMDESC', {
    pparamdescex: T.LPPARAMDESCEX,
    wParamFlags: T.USHORT
});
T.LPPARAMDESC = Pointer(Struct('tagPARAMDESC', null));
T.IDLDESC = Struct('tagIDLDESC', {
    dwReserved: T.ULONG_PTR,
    wIDLFlags: T.USHORT
});
T.LPIDLDESC = Pointer(Struct('tagIDLDESC', null));
T.ELEMDESC = Struct('tagELEMDESC', {
    tdesc: T.TYPEDESC,
    __unnamed0: Union('', {
        idldesc: T.IDLDESC,
        paramdesc: T.PARAMDESC
    })
});
T.LPELEMDESC = Pointer(Struct('tagELEMDESC', {
    tdesc: T.TYPEDESC,
    __unnamed0: Union('', {
        idldesc: T.IDLDESC,
        paramdesc: T.PARAMDESC
    })
}));
T.TYPEATTR = Struct('tagTYPEATTR', {
    guid: T.GUID,
    lcid: T.LCID,
    dwReserved: T.DWORD,
    memidConstructor: T.MEMBERID,
    memidDestructor: T.MEMBERID,
    lpstrSchema: T.LPOLESTR,
    cbSizeInstance: T.ULONG,
    typekind: T.TYPEKIND,
    cFuncs: T.WORD,
    cVars: T.WORD,
    cImplTypes: T.WORD,
    cbSizeVft: T.WORD,
    cbAlignment: T.WORD,
    wTypeFlags: T.WORD,
    wMajorVerNum: T.WORD,
    wMinorVerNum: T.WORD,
    tdescAlias: T.TYPEDESC,
    idldescType: T.IDLDESC
});
T.LPTYPEATTR = Pointer(Struct('tagTYPEATTR', null));
T.DISPPARAMS = Struct('tagDISPPARAMS', {
    rgvarg: Pointer(T.VARIANTARG),
    rgdispidNamedArgs: Pointer(T.DISPID),
    cArgs: T.UINT,
    cNamedArgs: T.UINT
});
T.EXCEPINFO = Struct('tagEXCEPINFO', {
    wCode: T.WORD,
    wReserved: T.WORD,
    bstrSource: T.BSTR,
    bstrDescription: T.BSTR,
    bstrHelpFile: T.BSTR,
    dwHelpContext: T.DWORD,
    pvReserved: T.PVOID,
    pfnDeferredFillIn: Pointer(Fn(T.HRESULT, [[Pointer(Struct('tagEXCEPINFO', null))]])),
    scode: T.SCODE
});
T.LPEXCEPINFO = Pointer(Struct('tagEXCEPINFO', {
    wCode: T.WORD,
    wReserved: T.WORD,
    bstrSource: T.BSTR,
    bstrDescription: T.BSTR,
    bstrHelpFile: T.BSTR,
    dwHelpContext: T.DWORD,
    pvReserved: T.PVOID,
    pfnDeferredFillIn: Pointer(Fn(T.HRESULT, [[Pointer(Struct('tagEXCEPINFO', null))]])),
    scode: T.SCODE
}));
T.CALLCONV = Enum('CC_MAX', {
    CC_FASTCALL: 0,
    CC_CDECL: 1,
    CC_MSCPASCAL: 2,
    CC_PASCAL: 3,
    CC_MACPASCAL: 3,
    CC_STDCALL: 4,
    CC_FPFASTCALL: 5,
    CC_SYSCALL: 6,
    CC_MPWCDECL: 7,
    CC_MPWPASCAL: 8,
    CC_MAX: 9
});
T.FUNCKIND = Enum('FUNC_DISPATCH', {
    FUNC_VIRTUAL: 0,
    FUNC_PUREVIRTUAL: 1,
    FUNC_NONVIRTUAL: 2,
    FUNC_STATIC: 3,
    FUNC_DISPATCH: 4
});
T.INVOKEKIND = Enum('INVOKE_PROPERTYPUTREF', {
    INVOKE_FUNC: 1,
    INVOKE_PROPERTYGET: 2,
    INVOKE_PROPERTYPUT: 4,
    INVOKE_PROPERTYPUTREF: 8
});
T.FUNCDESC = Struct('tagFUNCDESC', {
    memid: T.MEMBERID,
    lprgscode: Pointer(T.SCODE),
    lprgelemdescParam: Pointer(T.ELEMDESC),
    funckind: T.FUNCKIND,
    invkind: T.INVOKEKIND,
    callconv: T.CALLCONV,
    cParams: T.SHORT,
    cParamsOpt: T.SHORT,
    oVft: T.SHORT,
    cScodes: T.SHORT,
    elemdescFunc: T.ELEMDESC,
    wFuncFlags: T.WORD
});
T.LPFUNCDESC = Pointer(Struct('tagFUNCDESC', null));
T.VARKIND = Enum('VAR_DISPATCH', {
    VAR_PERINSTANCE: 0,
    VAR_STATIC: 1,
    VAR_CONST: 2,
    VAR_DISPATCH: 3
});
T.VARDESC = Struct('tagVARDESC', {
    memid: T.MEMBERID,
    lpstrSchema: T.LPOLESTR,
    __unnamed0: Union('', {
        oInst: T.ULONG,
        lpvarValue: Pointer(T.VARIANT)
    }),
    elemdescVar: T.ELEMDESC,
    wVarFlags: T.WORD,
    varkind: T.VARKIND
});
T.LPVARDESC = Pointer(Struct('tagVARDESC', null));
T.TYPEFLAGS = Enum('TYPEFLAG_FPROXY', {
    TYPEFLAG_FAPPOBJECT: 1,
    TYPEFLAG_FCANCREATE: 2,
    TYPEFLAG_FLICENSED: 4,
    TYPEFLAG_FPREDECLID: 8,
    TYPEFLAG_FHIDDEN: 16,
    TYPEFLAG_FCONTROL: 32,
    TYPEFLAG_FDUAL: 64,
    TYPEFLAG_FNONEXTENSIBLE: 128,
    TYPEFLAG_FOLEAUTOMATION: 256,
    TYPEFLAG_FRESTRICTED: 512,
    TYPEFLAG_FAGGREGATABLE: 1024,
    TYPEFLAG_FREPLACEABLE: 2048,
    TYPEFLAG_FDISPATCHABLE: 4096,
    TYPEFLAG_FREVERSEBIND: 8192,
    TYPEFLAG_FPROXY: 16384
});
T.FUNCFLAGS = Enum('FUNCFLAG_FIMMEDIATEBIND', {
    FUNCFLAG_FRESTRICTED: 1,
    FUNCFLAG_FSOURCE: 2,
    FUNCFLAG_FBINDABLE: 4,
    FUNCFLAG_FREQUESTEDIT: 8,
    FUNCFLAG_FDISPLAYBIND: 16,
    FUNCFLAG_FDEFAULTBIND: 32,
    FUNCFLAG_FHIDDEN: 64,
    FUNCFLAG_FUSESGETLASTERROR: 128,
    FUNCFLAG_FDEFAULTCOLLELEM: 256,
    FUNCFLAG_FUIDEFAULT: 512,
    FUNCFLAG_FNONBROWSABLE: 1024,
    FUNCFLAG_FREPLACEABLE: 2048,
    FUNCFLAG_FIMMEDIATEBIND: 4096
});
T.VARFLAGS = Enum('VARFLAG_FIMMEDIATEBIND', {
    VARFLAG_FREADONLY: 1,
    VARFLAG_FSOURCE: 2,
    VARFLAG_FBINDABLE: 4,
    VARFLAG_FREQUESTEDIT: 8,
    VARFLAG_FDISPLAYBIND: 16,
    VARFLAG_FDEFAULTBIND: 32,
    VARFLAG_FHIDDEN: 64,
    VARFLAG_FRESTRICTED: 128,
    VARFLAG_FDEFAULTCOLLELEM: 256,
    VARFLAG_FUIDEFAULT: 512,
    VARFLAG_FNONBROWSABLE: 1024,
    VARFLAG_FREPLACEABLE: 2048,
    VARFLAG_FIMMEDIATEBIND: 4096
});
T.CLEANLOCALSTORAGE = Struct('tagCLEANLOCALSTORAGE', {
    pInterface: Pointer(T.IUnknown),
    pStorage: T.PVOID,
    flags: T.DWORD
});
T.CUSTDATAITEM = Struct('tagCUSTDATAITEM', {
    guid: T.GUID,
    varValue: T.VARIANTARG
});
T.LPCUSTDATAITEM = Pointer(Struct('tagCUSTDATAITEM', null));
T.CUSTDATA = Struct('tagCUSTDATA', {
    cCustData: T.DWORD,
    prgCustData: T.LPCUSTDATAITEM
});
T.LPCUSTDATA = Pointer(Struct('tagCUSTDATA', null));
T.LPDISPATCH = Pointer(T.IDispatch);
T.IDispatchVtbl = Struct('IDispatchVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IDispatch), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IDispatch), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']]))
});
T.LPENUMVARIANT = Pointer(T.IEnumVARIANT);
T.IEnumVARIANTVtbl = Struct('IEnumVARIANTVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumVARIANT), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumVARIANT), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [T.ULONG, 'celt'], [Pointer(T.VARIANT), 'rgVar'], [Pointer(T.ULONG), 'pCeltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [Pointer(Pointer(T.IEnumVARIANT)), 'ppEnum']]))
});
T.LPTYPECOMP = Pointer(T.ITypeComp);
T.DESCKIND = Enum('DESCKIND_MAX', {
    DESCKIND_NONE: 0,
    DESCKIND_FUNCDESC: 1,
    DESCKIND_VARDESC: 2,
    DESCKIND_TYPECOMP: 3,
    DESCKIND_IMPLICITAPPOBJ: 4,
    DESCKIND_MAX: 5
});
T.BINDPTR = Union('tagBINDPTR', {
    lpfuncdesc: Pointer(T.FUNCDESC),
    lpvardesc: Pointer(T.VARDESC),
    lptcomp: Pointer(T.ITypeComp)
});
T.LPBINDPTR = Pointer(Union('tagBINDPTR', null));
T.ITypeCompVtbl = Struct('ITypeCompVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeComp), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeComp), 'This']])),
    Bind: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [T.LPOLESTR, 'szName'], [T.ULONG, 'lHashVal'], [T.WORD, 'wFlags'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.DESCKIND), 'pDescKind'], [Pointer(T.BINDPTR), 'pBindPtr']])),
    BindType: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [T.LPOLESTR, 'szName'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(Pointer(T.ITypeComp)), 'ppTComp']]))
});
T.LPTYPEINFO = Pointer(T.ITypeInfo);
T.ITypeInfoVtbl = Struct('ITypeInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeInfo), 'This']])),
    GetTypeAttr: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(Pointer(T.TYPEATTR)), 'ppTypeAttr']])),
    GetTypeComp: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(Pointer(T.ITypeComp)), 'ppTComp']])),
    GetFuncDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.FUNCDESC)), 'ppFuncDesc']])),
    GetVarDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.VARDESC)), 'ppVarDesc']])),
    GetNames: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'rgBstrNames'], [T.UINT, 'cMaxNames'], [Pointer(T.UINT), 'pcNames']])),
    GetRefTypeOfImplType: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.HREFTYPE), 'pRefType']])),
    GetImplTypeFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.INT), 'pImplTypeFlags']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [Pointer(T.MEMBERID), 'pMemId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.PVOID, 'pvInstance'], [T.MEMBERID, 'memid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    GetDocumentation: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']])),
    GetDllEntry: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [Pointer(T.BSTR), 'pBstrDllName'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.WORD), 'pwOrdinal']])),
    GetRefTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.HREFTYPE, 'hRefType'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    AddressOfMember: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [Pointer(T.PVOID), 'ppv']])),
    CreateInstance: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(T.IID), 'riid'], [Pointer(T.PVOID), 'ppvObj']])),
    GetMops: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'pBstrMops']])),
    GetContainingTypeLib: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(Pointer(T.ITypeLib)), 'ppTLib'], [Pointer(T.UINT), 'pIndex']])),
    ReleaseTypeAttr: Pointer(Fn(null, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.TYPEATTR), 'pTypeAttr']])),
    ReleaseFuncDesc: Pointer(Fn(null, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.FUNCDESC), 'pFuncDesc']])),
    ReleaseVarDesc: Pointer(Fn(null, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.VARDESC), 'pVarDesc']]))
});
T.LPTYPEINFO2 = Pointer(T.ITypeInfo2);
T.ITypeInfo2Vtbl = Struct('ITypeInfo2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeInfo2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeInfo2), 'This']])),
    GetTypeAttr: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(Pointer(T.TYPEATTR)), 'ppTypeAttr']])),
    GetTypeComp: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(Pointer(T.ITypeComp)), 'ppTComp']])),
    GetFuncDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.FUNCDESC)), 'ppFuncDesc']])),
    GetVarDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.VARDESC)), 'ppVarDesc']])),
    GetNames: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'rgBstrNames'], [T.UINT, 'cMaxNames'], [Pointer(T.UINT), 'pcNames']])),
    GetRefTypeOfImplType: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.HREFTYPE), 'pRefType']])),
    GetImplTypeFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.INT), 'pImplTypeFlags']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [Pointer(T.MEMBERID), 'pMemId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.PVOID, 'pvInstance'], [T.MEMBERID, 'memid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    GetDocumentation: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']])),
    GetDllEntry: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [Pointer(T.BSTR), 'pBstrDllName'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.WORD), 'pwOrdinal']])),
    GetRefTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.HREFTYPE, 'hRefType'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    AddressOfMember: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [Pointer(T.PVOID), 'ppv']])),
    CreateInstance: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(T.IID), 'riid'], [Pointer(T.PVOID), 'ppvObj']])),
    GetMops: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'pBstrMops']])),
    GetContainingTypeLib: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(Pointer(T.ITypeLib)), 'ppTLib'], [Pointer(T.UINT), 'pIndex']])),
    ReleaseTypeAttr: Pointer(Fn(null, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.TYPEATTR), 'pTypeAttr']])),
    ReleaseFuncDesc: Pointer(Fn(null, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.FUNCDESC), 'pFuncDesc']])),
    ReleaseVarDesc: Pointer(Fn(null, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.VARDESC), 'pVarDesc']])),
    GetTypeKind: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.TYPEKIND), 'pTypeKind']])),
    GetTypeFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.ULONG), 'pTypeFlags']])),
    GetFuncIndexOfMemId: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [Pointer(T.UINT), 'pFuncIndex']])),
    GetVarIndexOfMemId: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.UINT), 'pVarIndex']])),
    GetCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    GetFuncCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    GetParamCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'indexFunc'], [T.UINT, 'indexParam'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    GetVarCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    GetImplTypeCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    GetDocumentation2: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.LCID, 'lcid'], [Pointer(T.BSTR), 'pbstrHelpString'], [Pointer(T.DWORD), 'pdwHelpStringContext'], [Pointer(T.BSTR), 'pbstrHelpStringDll']])),
    GetAllCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.CUSTDATA), 'pCustData']])),
    GetAllFuncCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.CUSTDATA), 'pCustData']])),
    GetAllParamCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'indexFunc'], [T.UINT, 'indexParam'], [Pointer(T.CUSTDATA), 'pCustData']])),
    GetAllVarCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.CUSTDATA), 'pCustData']])),
    GetAllImplTypeCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.CUSTDATA), 'pCustData']]))
});
T.LPTYPELIB = Pointer(T.ITypeLib);
T.SYSKIND = Enum('SYS_WIN64', {
    SYS_WIN16: 0,
    SYS_WIN32: 1,
    SYS_MAC: 2,
    SYS_WIN64: 3
});
T.LIBFLAGS = Enum('LIBFLAG_FHASDISKIMAGE', {
    LIBFLAG_FRESTRICTED: 1,
    LIBFLAG_FCONTROL: 2,
    LIBFLAG_FHIDDEN: 4,
    LIBFLAG_FHASDISKIMAGE: 8
});
T.TLIBATTR = Struct('tagTLIBATTR', {
    guid: T.GUID,
    lcid: T.LCID,
    syskind: T.SYSKIND,
    wMajorVerNum: T.WORD,
    wMinorVerNum: T.WORD,
    wLibFlags: T.WORD
});
T.LPTLIBATTR = Pointer(Struct('tagTLIBATTR', null));
T.ITypeLibVtbl = Struct('ITypeLibVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeLib), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeLib), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.UINT, [[Pointer(T.ITypeLib), 'This']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetTypeInfoType: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.UINT, 'index'], [Pointer(T.TYPEKIND), 'pTKind']])),
    GetTypeInfoOfGuid: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTinfo']])),
    GetLibAttr: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(Pointer(T.TLIBATTR)), 'ppTLibAttr']])),
    GetTypeComp: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(Pointer(T.ITypeComp)), 'ppTComp']])),
    GetDocumentation: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.INT, 'index'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']])),
    IsName: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(T.BOOL), 'pfName']])),
    FindName: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.MEMBERID), 'rgMemId'], [Pointer(T.USHORT), 'pcFound']])),
    ReleaseTLibAttr: Pointer(Fn(null, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.TLIBATTR), 'pTLibAttr']]))
});
T.LPTYPELIB2 = Pointer(T.ITypeLib2);
T.ITypeLib2Vtbl = Struct('ITypeLib2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeLib2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeLib2), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.UINT, [[Pointer(T.ITypeLib2), 'This']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetTypeInfoType: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.UINT, 'index'], [Pointer(T.TYPEKIND), 'pTKind']])),
    GetTypeInfoOfGuid: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTinfo']])),
    GetLibAttr: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(Pointer(T.TLIBATTR)), 'ppTLibAttr']])),
    GetTypeComp: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(Pointer(T.ITypeComp)), 'ppTComp']])),
    GetDocumentation: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.INT, 'index'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']])),
    IsName: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(T.BOOL), 'pfName']])),
    FindName: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.MEMBERID), 'rgMemId'], [Pointer(T.USHORT), 'pcFound']])),
    ReleaseTLibAttr: Pointer(Fn(null, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.TLIBATTR), 'pTLibAttr']])),
    GetCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    GetLibStatistics: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.ULONG), 'pcUniqueNames'], [Pointer(T.ULONG), 'pcchUniqueNames']])),
    GetDocumentation2: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.INT, 'index'], [T.LCID, 'lcid'], [Pointer(T.BSTR), 'pbstrHelpString'], [Pointer(T.DWORD), 'pdwHelpStringContext'], [Pointer(T.BSTR), 'pbstrHelpStringDll']])),
    GetAllCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.CUSTDATA), 'pCustData']]))
});
T.LPTYPECHANGEEVENTS = Pointer(T.ITypeChangeEvents);
T.CHANGEKIND = Enum('CHANGEKIND_MAX', {
    CHANGEKIND_ADDMEMBER: 0,
    CHANGEKIND_DELETEMEMBER: 1,
    CHANGEKIND_SETNAMES: 2,
    CHANGEKIND_SETDOCUMENTATION: 3,
    CHANGEKIND_GENERAL: 4,
    CHANGEKIND_INVALIDATE: 5,
    CHANGEKIND_CHANGEFAILED: 6,
    CHANGEKIND_MAX: 7
});
T.ITypeChangeEventsVtbl = Struct('ITypeChangeEventsVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeChangeEvents), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeChangeEvents), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeChangeEvents), 'This']])),
    RequestTypeChange: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeChangeEvents), 'This'], [T.CHANGEKIND, 'changeKind'], [Pointer(T.ITypeInfo), 'pTInfoBefore'], [T.LPOLESTR, 'pStrName'], [Pointer(T.INT), 'pfCancel']])),
    AfterTypeChange: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeChangeEvents), 'This'], [T.CHANGEKIND, 'changeKind'], [Pointer(T.ITypeInfo), 'pTInfoAfter'], [T.LPOLESTR, 'pStrName']]))
});
T.LPERRORINFO = Pointer(T.IErrorInfo);
T.IErrorInfoVtbl = Struct('IErrorInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IErrorInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IErrorInfo), 'This']])),
    GetGUID: Pointer(Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.GUID), 'pGUID']])),
    GetSource: Pointer(Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.BSTR), 'pBstrSource']])),
    GetDescription: Pointer(Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.BSTR), 'pBstrDescription']])),
    GetHelpFile: Pointer(Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.BSTR), 'pBstrHelpFile']])),
    GetHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.DWORD), 'pdwHelpContext']]))
});
T.LPCREATEERRORINFO = Pointer(T.ICreateErrorInfo);
T.ICreateErrorInfoVtbl = Struct('ICreateErrorInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateErrorInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateErrorInfo), 'This']])),
    SetGUID: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [Pointer(T.GUID), 'rguid']])),
    SetSource: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [T.LPOLESTR, 'szSource']])),
    SetDescription: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [T.LPOLESTR, 'szDescription']])),
    SetHelpFile: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [T.LPOLESTR, 'szHelpFile']])),
    SetHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [T.DWORD, 'dwHelpContext']]))
});
T.LPSUPPORTERRORINFO = Pointer(T.ISupportErrorInfo);
T.ISupportErrorInfoVtbl = Struct('ISupportErrorInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISupportErrorInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISupportErrorInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISupportErrorInfo), 'This']])),
    InterfaceSupportsErrorInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ISupportErrorInfo), 'This'], [Pointer(T.IID), 'riid']]))
});
T.ITypeFactoryVtbl = Struct('ITypeFactoryVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeFactory), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeFactory), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeFactory), 'This']])),
    CreateFromTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeFactory), 'This'], [Pointer(T.ITypeInfo), 'pTypeInfo'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppv']]))
});
T.ITypeMarshalVtbl = Struct('ITypeMarshalVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeMarshal), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ITypeMarshal), 'This']])),
    Size: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [T.PVOID, 'pvType'], [T.DWORD, 'dwDestContext'], [T.PVOID, 'pvDestContext'], [Pointer(T.ULONG), 'pSize']])),
    Marshal: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [T.PVOID, 'pvType'], [T.DWORD, 'dwDestContext'], [T.PVOID, 'pvDestContext'], [T.ULONG, 'cbBufferLength'], [Pointer(T.BYTE), 'pBuffer'], [Pointer(T.ULONG), 'pcbWritten']])),
    Unmarshal: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [T.PVOID, 'pvType'], [T.DWORD, 'dwFlags'], [T.ULONG, 'cbBufferLength'], [Pointer(T.BYTE), 'pBuffer'], [Pointer(T.ULONG), 'pcbRead']])),
    Free: Pointer(Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [T.PVOID, 'pvType']]))
});
T.LPRECORDINFO = Pointer(T.IRecordInfo);
T.IRecordInfoVtbl = Struct('IRecordInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IRecordInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IRecordInfo), 'This']])),
    RecordInit: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvNew']])),
    RecordClear: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvExisting']])),
    RecordCopy: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvExisting'], [T.PVOID, 'pvNew']])),
    GetGuid: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.GUID), 'pguid']])),
    GetName: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.BSTR), 'pbstrName']])),
    GetSize: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.ULONG), 'pcbSize']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(Pointer(T.ITypeInfo)), 'ppTypeInfo']])),
    GetField: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvData'], [T.LPCOLESTR, 'szFieldName'], [Pointer(T.VARIANT), 'pvarField']])),
    GetFieldNoCopy: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvData'], [T.LPCOLESTR, 'szFieldName'], [Pointer(T.VARIANT), 'pvarField'], [Pointer(T.PVOID), 'ppvDataCArray']])),
    PutField: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.ULONG, 'wFlags'], [T.PVOID, 'pvData'], [T.LPCOLESTR, 'szFieldName'], [Pointer(T.VARIANT), 'pvarField']])),
    PutFieldNoCopy: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.ULONG, 'wFlags'], [T.PVOID, 'pvData'], [T.LPCOLESTR, 'szFieldName'], [Pointer(T.VARIANT), 'pvarField']])),
    GetFieldNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.ULONG), 'pcNames'], [Pointer(T.BSTR), 'rgBstrNames']])),
    IsMatchingType: Pointer(Fn(T.BOOL, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.IRecordInfo), 'pRecordInfo']])),
    RecordCreate: Pointer(Fn(T.PVOID, [[Pointer(T.IRecordInfo), 'This']])),
    RecordCreateCopy: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvSource'], [Pointer(T.PVOID), 'ppvDest']])),
    RecordDestroy: Pointer(Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvRecord']]))
});
T.LPCREATETYPEINFO = Pointer(T.ICreateTypeInfo);
T.ICreateTypeInfoVtbl = Struct('ICreateTypeInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateTypeInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateTypeInfo), 'This']])),
    SetGuid: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.GUID), 'guid']])),
    SetTypeFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'uTypeFlags']])),
    SetDocString: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.LPOLESTR, 'pStrDoc']])),
    SetHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.DWORD, 'dwHelpContext']])),
    SetVersion: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.WORD, 'wMajorVerNum'], [T.WORD, 'wMinorVerNum']])),
    AddRefTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.ITypeInfo), 'pTInfo'], [Pointer(T.HREFTYPE), 'phRefType']])),
    AddFuncDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.FUNCDESC), 'pFuncDesc']])),
    AddImplType: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.HREFTYPE, 'hRefType']])),
    SetImplTypeFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.INT, 'implTypeFlags']])),
    SetAlignment: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.WORD, 'cbAlignment']])),
    SetSchema: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.LPOLESTR, 'pStrSchema']])),
    AddVarDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.VARDESC), 'pVarDesc']])),
    SetFuncAndParamNames: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames']])),
    SetVarName: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szName']])),
    SetTypeDescAlias: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.TYPEDESC), 'pTDescAlias']])),
    DefineFuncAsDllEntry: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDllName'], [T.LPOLESTR, 'szProcName']])),
    SetFuncDocString: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDocString']])),
    SetVarDocString: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDocString']])),
    SetFuncHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.DWORD, 'dwHelpContext']])),
    SetVarHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.DWORD, 'dwHelpContext']])),
    SetMops: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.BSTR, 'bstrMops']])),
    SetTypeIdldesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.IDLDESC), 'pIdlDesc']])),
    LayOut: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This']]))
});
T.LPCREATETYPEINFO2 = Pointer(T.ICreateTypeInfo2);
T.ICreateTypeInfo2Vtbl = Struct('ICreateTypeInfo2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateTypeInfo2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateTypeInfo2), 'This']])),
    SetGuid: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [Pointer(T.GUID), 'guid']])),
    SetTypeFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'uTypeFlags']])),
    SetDocString: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.LPOLESTR, 'pStrDoc']])),
    SetHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.DWORD, 'dwHelpContext']])),
    SetVersion: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.WORD, 'wMajorVerNum'], [T.WORD, 'wMinorVerNum']])),
    AddRefTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [Pointer(T.ITypeInfo), 'pTInfo'], [Pointer(T.HREFTYPE), 'phRefType']])),
    AddFuncDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.FUNCDESC), 'pFuncDesc']])),
    AddImplType: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.HREFTYPE, 'hRefType']])),
    SetImplTypeFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.INT, 'implTypeFlags']])),
    SetAlignment: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.WORD, 'cbAlignment']])),
    SetSchema: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.LPOLESTR, 'pStrSchema']])),
    AddVarDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.VARDESC), 'pVarDesc']])),
    SetFuncAndParamNames: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames']])),
    SetVarName: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szName']])),
    SetTypeDescAlias: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [Pointer(T.TYPEDESC), 'pTDescAlias']])),
    DefineFuncAsDllEntry: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDllName'], [T.LPOLESTR, 'szProcName']])),
    SetFuncDocString: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDocString']])),
    SetVarDocString: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDocString']])),
    SetFuncHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.DWORD, 'dwHelpContext']])),
    SetVarHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.DWORD, 'dwHelpContext']])),
    SetMops: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.BSTR, 'bstrMops']])),
    SetTypeIdldesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [Pointer(T.IDLDESC), 'pIdlDesc']])),
    LayOut: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This']])),
    DeleteFuncDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index']])),
    DeleteFuncDescByMemId: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind']])),
    DeleteVarDesc: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index']])),
    DeleteVarDescByMemId: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.MEMBERID, 'memid']])),
    DeleteImplType: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index']])),
    SetCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    SetFuncCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    SetParamCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'indexFunc'], [T.UINT, 'indexParam'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    SetVarCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    SetImplTypeCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    SetHelpStringContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.ULONG, 'dwHelpStringContext']])),
    SetFuncHelpStringContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.ULONG, 'dwHelpStringContext']])),
    SetVarHelpStringContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.ULONG, 'dwHelpStringContext']])),
    Invalidate: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This']])),
    SetName: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.LPOLESTR, 'szName']]))
});
T.LPCREATETYPELIB = Pointer(T.ICreateTypeLib);
T.ICreateTypeLibVtbl = Struct('ICreateTypeLibVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateTypeLib), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateTypeLib), 'This']])),
    CreateTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LPOLESTR, 'szName'], [T.TYPEKIND, 'tkind'], [Pointer(Pointer(T.ICreateTypeInfo)), 'ppCTInfo']])),
    SetName: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LPOLESTR, 'szName']])),
    SetVersion: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.WORD, 'wMajorVerNum'], [T.WORD, 'wMinorVerNum']])),
    SetGuid: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [Pointer(T.GUID), 'guid']])),
    SetDocString: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LPOLESTR, 'szDoc']])),
    SetHelpFileName: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LPOLESTR, 'szHelpFileName']])),
    SetHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.DWORD, 'dwHelpContext']])),
    SetLcid: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LCID, 'lcid']])),
    SetLibFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.UINT, 'uLibFlags']])),
    SaveAllChanges: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This']]))
});
T.LPCREATETYPELIB2 = Pointer(T.ICreateTypeLib2);
T.ICreateTypeLib2Vtbl = Struct('ICreateTypeLib2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateTypeLib2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ICreateTypeLib2), 'This']])),
    CreateTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LPOLESTR, 'szName'], [T.TYPEKIND, 'tkind'], [Pointer(Pointer(T.ICreateTypeInfo)), 'ppCTInfo']])),
    SetName: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LPOLESTR, 'szName']])),
    SetVersion: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.WORD, 'wMajorVerNum'], [T.WORD, 'wMinorVerNum']])),
    SetGuid: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [Pointer(T.GUID), 'guid']])),
    SetDocString: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LPOLESTR, 'szDoc']])),
    SetHelpFileName: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LPOLESTR, 'szHelpFileName']])),
    SetHelpContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.DWORD, 'dwHelpContext']])),
    SetLcid: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LCID, 'lcid']])),
    SetLibFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.UINT, 'uLibFlags']])),
    SaveAllChanges: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This']])),
    DeleteTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LPOLESTR, 'szName']])),
    SetCustData: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']])),
    SetHelpStringContext: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.ULONG, 'dwHelpStringContext']])),
    SetHelpStringDll: Pointer(Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LPOLESTR, 'szFileName']]))
});
T.LPERRORLOG = Pointer(T.IErrorLog);
T.IErrorLogVtbl = Struct('IErrorLogVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IErrorLog), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IErrorLog), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IErrorLog), 'This']])),
    AddError: Pointer(Fn(T.HRESULT, [[Pointer(T.IErrorLog), 'This'], [T.LPCOLESTR, 'pszPropName'], [Pointer(T.EXCEPINFO), 'pExcepInfo']]))
});
T.LPPROPERTYBAG = Pointer(T.IPropertyBag);
T.IPropertyBagVtbl = Struct('IPropertyBagVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyBag), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPropertyBag), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPropertyBag), 'This']])),
    Read: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyBag), 'This'], [T.LPCOLESTR, 'pszPropName'], [Pointer(T.VARIANT), 'pVar'], [Pointer(T.IErrorLog), 'pErrorLog']])),
    Write: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyBag), 'This'], [T.LPCOLESTR, 'pszPropName'], [Pointer(T.VARIANT), 'pVar']]))
});
T.DOMNodeType = Enum('NODE_NOTATION', {
    NODE_INVALID: 0,
    NODE_ELEMENT: 1,
    NODE_ATTRIBUTE: 2,
    NODE_TEXT: 3,
    NODE_CDATA_SECTION: 4,
    NODE_ENTITY_REFERENCE: 5,
    NODE_ENTITY: 6,
    NODE_PROCESSING_INSTRUCTION: 7,
    NODE_COMMENT: 8,
    NODE_DOCUMENT: 9,
    NODE_DOCUMENT_TYPE: 10,
    NODE_DOCUMENT_FRAGMENT: 11,
    NODE_NOTATION: 12
});
T.IXMLDOMNodeVtbl = Struct('IXMLDOMNodeVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMNode), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMNode), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']]))
});
T.IXMLDOMDocumentVtbl = Struct('IXMLDOMDocumentVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMDocument), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMDocument), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_doctype: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMDocumentType)), 'documentType']])),
    get_implementation: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMImplementation)), 'impl']])),
    get_documentElement: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMElement)), 'DOMElement']])),
    putref_documentElement: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IXMLDOMElement), 'DOMElement']])),
    createElement: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'tagname'], [Pointer(Pointer(T.IXMLDOMElement)), 'element']])),
    createDocumentFragment: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMDocumentFragment)), 'docFrag']])),
    createTextNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'data'], [Pointer(Pointer(T.IXMLDOMText)), 'text']])),
    createComment: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'data'], [Pointer(Pointer(T.IXMLDOMComment)), 'comment']])),
    createCDATASection: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'data'], [Pointer(Pointer(T.IXMLDOMCDATASection)), 'cdata']])),
    createProcessingInstruction: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'target'], [T.BSTR, 'data'], [Pointer(Pointer(T.IXMLDOMProcessingInstruction)), 'pi']])),
    createAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMAttribute)), 'attribute']])),
    createEntityReference: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMEntityReference)), 'entityRef']])),
    getElementsByTagName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'tagName'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    createNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'Type'], [T.BSTR, 'name'], [T.BSTR, 'namespaceURI'], [Pointer(Pointer(T.IXMLDOMNode)), 'node']])),
    nodeFromID: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'idString'], [Pointer(Pointer(T.IXMLDOMNode)), 'node']])),
    load: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'xmlSource'], [Pointer(T.VARIANT_BOOL), 'isSuccessful']])),
    get_readyState: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.LONG), 'value']])),
    get_parseError: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMParseError)), 'errorObj']])),
    get_url: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'urlString']])),
    get_async: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isAsync']])),
    put_async: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'isAsync']])),
    abort: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This']])),
    loadXML: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'bstrXML'], [Pointer(T.VARIANT_BOOL), 'isSuccessful']])),
    save: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'destination']])),
    get_validateOnParse: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isValidating']])),
    put_validateOnParse: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'isValidating']])),
    get_resolveExternals: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isResolving']])),
    put_resolveExternals: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'isValidating']])),
    get_preserveWhiteSpace: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isPreserving']])),
    put_preserveWhiteSpace: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'isPreserving']])),
    put_onreadystatechange: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'readystatechangeSink']])),
    put_ondataavailable: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'ondataavailableSink']])),
    put_ontransformnode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'ontransformnodeSink']]))
});
T.IXMLDOMNodeListVtbl = Struct('IXMLDOMNodeListVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMNodeList), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMNodeList), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_item: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [T.LONG, 'index'], [Pointer(Pointer(T.IXMLDOMNode)), 'listItem']])),
    get_length: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(T.LONG), 'listLength']])),
    nextNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextItem']])),
    reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This']])),
    _newEnum: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(Pointer(T.IUnknown)), 'ppUnk']]))
});
T.IXMLDOMNamedNodeMapVtbl = Struct('IXMLDOMNamedNodeMapVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMNamedNodeMap), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMNamedNodeMap), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    getNamedItem: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMNode)), 'namedItem']])),
    setNamedItem: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(T.IXMLDOMNode), 'newItem'], [Pointer(Pointer(T.IXMLDOMNode)), 'namedItem']])),
    removeNamedItem: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMNode)), 'namedItem']])),
    get_item: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.LONG, 'index'], [Pointer(Pointer(T.IXMLDOMNode)), 'listItem']])),
    get_length: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(T.LONG), 'listLength']])),
    getQualifiedItem: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.BSTR, 'baseName'], [T.BSTR, 'namespaceURI'], [Pointer(Pointer(T.IXMLDOMNode)), 'qualifiedItem']])),
    removeQualifiedItem: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.BSTR, 'baseName'], [T.BSTR, 'namespaceURI'], [Pointer(Pointer(T.IXMLDOMNode)), 'qualifiedItem']])),
    nextNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextItem']])),
    reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This']])),
    _newEnum: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(Pointer(T.IUnknown)), 'ppUnk']]))
});
T.IXMLDOMDocumentFragmentVtbl = Struct('IXMLDOMDocumentFragmentVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMDocumentFragment), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMDocumentFragment), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentFragment), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']]))
});
T.IXMLDOMCharacterDataVtbl = Struct('IXMLDOMCharacterDataVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMCharacterData), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMCharacterData), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'data']])),
    put_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.BSTR, 'data']])),
    get_length: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.LONG), 'dataLength']])),
    substringData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [Pointer(T.BSTR), 'data']])),
    appendData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.BSTR, 'data']])),
    insertData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.LONG, 'offset'], [T.BSTR, 'data']])),
    deleteData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.LONG, 'offset'], [T.LONG, 'count']])),
    replaceData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [T.BSTR, 'data']]))
});
T.IXMLDOMAttributeVtbl = Struct('IXMLDOMAttributeVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMAttribute), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMAttribute), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_name: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'attributeName']])),
    get_value: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.VARIANT), 'attributeValue']])),
    put_value: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.VARIANT, 'attributeValue']]))
});
T.IXMLDOMElementVtbl = Struct('IXMLDOMElementVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMElement), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMElement), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_tagName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'tagName']])),
    getAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'name'], [Pointer(T.VARIANT), 'value']])),
    setAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'name'], [T.VARIANT, 'value']])),
    removeAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'name']])),
    getAttributeNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMAttribute)), 'attributeNode']])),
    setAttributeNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMAttribute), 'DOMAttribute'], [Pointer(Pointer(T.IXMLDOMAttribute)), 'attributeNode']])),
    removeAttributeNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMAttribute), 'DOMAttribute'], [Pointer(Pointer(T.IXMLDOMAttribute)), 'attributeNode']])),
    getElementsByTagName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'tagName'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    normalize: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This']]))
});
T.IXMLDOMTextVtbl = Struct('IXMLDOMTextVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMText), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMText), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.BSTR), 'data']])),
    put_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.BSTR, 'data']])),
    get_length: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [Pointer(T.LONG), 'dataLength']])),
    substringData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [Pointer(T.BSTR), 'data']])),
    appendData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.BSTR, 'data']])),
    insertData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.LONG, 'offset'], [T.BSTR, 'data']])),
    deleteData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.LONG, 'offset'], [T.LONG, 'count']])),
    replaceData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [T.BSTR, 'data']])),
    splitText: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.LONG, 'offset'], [Pointer(Pointer(T.IXMLDOMText)), 'rightHandTextNode']]))
});
T.IXMLDOMCommentVtbl = Struct('IXMLDOMCommentVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMComment), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMComment), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.BSTR), 'data']])),
    put_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.BSTR, 'data']])),
    get_length: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [Pointer(T.LONG), 'dataLength']])),
    substringData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [Pointer(T.BSTR), 'data']])),
    appendData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.BSTR, 'data']])),
    insertData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.LONG, 'offset'], [T.BSTR, 'data']])),
    deleteData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.LONG, 'offset'], [T.LONG, 'count']])),
    replaceData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMComment), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [T.BSTR, 'data']]))
});
T.IXMLDOMProcessingInstructionVtbl = Struct('IXMLDOMProcessingInstructionVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMProcessingInstruction), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMProcessingInstruction), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_target: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'name']])),
    get_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'value']])),
    put_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.BSTR, 'value']]))
});
T.IXMLDOMCDATASectionVtbl = Struct('IXMLDOMCDATASectionVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMCDATASection), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMCDATASection), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.BSTR), 'data']])),
    put_data: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.BSTR, 'data']])),
    get_length: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [Pointer(T.LONG), 'dataLength']])),
    substringData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [Pointer(T.BSTR), 'data']])),
    appendData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.BSTR, 'data']])),
    insertData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.LONG, 'offset'], [T.BSTR, 'data']])),
    deleteData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.LONG, 'offset'], [T.LONG, 'count']])),
    replaceData: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [T.BSTR, 'data']])),
    splitText: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMCDATASection), 'This'], [T.LONG, 'offset'], [Pointer(Pointer(T.IXMLDOMText)), 'rightHandTextNode']]))
});
T.IXMLDOMDocumentTypeVtbl = Struct('IXMLDOMDocumentTypeVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMDocumentType), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMDocumentType), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_name: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'rootName']])),
    get_entities: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'entityMap']])),
    get_notations: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'notationMap']]))
});
T.IXMLDOMNotationVtbl = Struct('IXMLDOMNotationVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMNotation), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMNotation), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_publicId: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT), 'publicId']])),
    get_systemId: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT), 'systemId']]))
});
T.IXMLDOMEntityVtbl = Struct('IXMLDOMEntityVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMEntity), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMEntity), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']])),
    get_publicId: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT), 'publicId']])),
    get_systemId: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT), 'systemId']])),
    get_notationName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'name']]))
});
T.IXMLDOMEntityReferenceVtbl = Struct('IXMLDOMEntityReferenceVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMEntityReference), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMEntityReference), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_nodeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.BSTR), 'name']])),
    get_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.VARIANT), 'value']])),
    put_nodeValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.VARIANT, 'value']])),
    get_nodeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.DOMNodeType), 'type']])),
    get_parentNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']])),
    get_childNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']])),
    get_firstChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']])),
    get_lastChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']])),
    get_previousSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']])),
    get_nextSibling: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']])),
    insertBefore: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    replaceChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']])),
    appendChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']])),
    hasChildNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']])),
    get_ownerDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']])),
    cloneNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']])),
    get_nodeTypeString: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.BSTR), 'nodeType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.BSTR), 'text']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.BSTR, 'text']])),
    get_specified: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']])),
    get_definition: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']])),
    get_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.VARIANT), 'typedValue']])),
    put_nodeTypedValue: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.VARIANT, 'typedValue']])),
    get_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.VARIANT), 'dataTypeName']])),
    put_dataType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.BSTR, 'dataTypeName']])),
    get_xml: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.BSTR), 'xmlString']])),
    transformNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']])),
    selectNodes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']])),
    selectSingleNode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']])),
    get_parsed: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']])),
    get_namespaceURI: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.BSTR), 'namespaceURI']])),
    get_prefix: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.BSTR), 'prefixString']])),
    get_baseName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.BSTR), 'nameString']])),
    transformNodeToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntityReference), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']]))
});
T.IXMLDOMImplementationVtbl = Struct('IXMLDOMImplementationVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMImplementation), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMImplementation), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMImplementation), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMImplementation), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMImplementation), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMImplementation), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMImplementation), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    hasFeature: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMImplementation), 'This'], [T.BSTR, 'feature'], [T.BSTR, 'version'], [Pointer(T.VARIANT_BOOL), 'pbool']]))
});
T.IXMLDOMParseErrorVtbl = Struct('IXMLDOMParseErrorVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMParseError), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDOMParseError), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_errorCode: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.LONG), 'errCode']])),
    get_url: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.BSTR), 'p']])),
    get_reason: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.BSTR), 'p']])),
    get_srcText: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.BSTR), 'p']])),
    get_line: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.LONG), 'lineNo']])),
    get_linepos: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.LONG), 'linePos']])),
    get_filepos: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.LONG), 'filePos']]))
});
T.XMLDOMDocumentEventsVtbl = Struct('XMLDOMDocumentEventsVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.XMLDOMDocumentEvents), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.XMLDOMDocumentEvents), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.XMLDOMDocumentEvents), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.XMLDOMDocumentEvents), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.XMLDOMDocumentEvents), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.XMLDOMDocumentEvents), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.XMLDOMDocumentEvents), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']]))
});
T.IXMLHttpRequestVtbl = Struct('IXMLHttpRequestVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLHttpRequest), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLHttpRequest), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    open: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.BSTR, 'bstrMethod'], [T.BSTR, 'bstrUrl'], [T.VARIANT, 'varAsync'], [T.VARIANT, 'varUser'], [T.VARIANT, 'varPassword']])),
    setRequestHeader: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.BSTR, 'bstrHeader'], [T.BSTR, 'bstrValue']])),
    getResponseHeader: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.BSTR, 'bstrHeader'], [Pointer(T.BSTR), 'pbstrValue']])),
    getAllResponseHeaders: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.BSTR), 'pbstrHeaders']])),
    send: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.VARIANT, 'varBody']])),
    abort: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This']])),
    get_status: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.LONG), 'plStatus']])),
    get_statusText: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.BSTR), 'bstrStatus']])),
    get_responseXML: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(Pointer(T.IDispatch)), 'ppBody']])),
    get_responseText: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.BSTR), 'pbstrBody']])),
    get_responseBody: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.VARIANT), 'pvarBody']])),
    get_responseStream: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.VARIANT), 'pvarBody']])),
    get_readyState: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.LONG), 'plState']])),
    put_onreadystatechange: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.IDispatch), 'pReadyStateSink']]))
});
T.IXMLDSOControlVtbl = Struct('IXMLDSOControlVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDSOControl), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDSOControl), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_XMLDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'ppDoc']])),
    put_XMLDocument: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.IXMLDOMDocument), 'ppDoc']])),
    get_JavaDSOCompatible: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.BOOL), 'fJavaDSOCompatible']])),
    put_JavaDSOCompatible: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [T.BOOL, 'fJavaDSOCompatible']])),
    get_readyState: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.LONG), 'state']]))
});
T.IXMLElementCollectionVtbl = Struct('IXMLElementCollectionVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLElementCollection), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLElementCollection), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    put_length: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [T.LONG, 'v']])),
    get_length: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [Pointer(T.LONG), 'p']])),
    get__newEnum: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [Pointer(Pointer(T.IUnknown)), 'ppUnk']])),
    item: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [T.VARIANT, 'var1'], [T.VARIANT, 'var2'], [Pointer(Pointer(T.IDispatch)), 'ppDisp']]))
});
T.IXMLElementVtbl = Struct('IXMLElementVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLElement), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLElement), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_tagName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.BSTR), 'p']])),
    put_tagName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'p']])),
    get_parent: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(Pointer(T.IXMLElement)), 'parent']])),
    setAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'strPropertyName'], [T.VARIANT, 'PropertyValue']])),
    getAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'strPropertyName'], [Pointer(T.VARIANT), 'PropertyValue']])),
    removeAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'strPropertyName']])),
    get_children: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(Pointer(T.IXMLElementCollection)), 'p']])),
    get_type: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.LONG), 'p']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.BSTR), 'p']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'p']])),
    addChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.IXMLElement), 'pChildElem'], [T.LONG, 'lIndex'], [T.LONG, 'lreserved']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.IXMLElement), 'pChildElem']]))
});
T.IXMLDocumentVtbl = Struct('IXMLDocumentVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDocument), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDocument), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_root: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(Pointer(T.IXMLElement)), 'p']])),
    get_fileSize: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    get_fileModifiedDate: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    get_fileUpdatedDate: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    get_URL: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    put_URL: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [T.BSTR, 'p']])),
    get_mimeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    get_readyState: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.LONG), 'p']])),
    get_charset: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    put_charset: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [T.BSTR, 'p']])),
    get_version: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    get_doctype: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    get_dtdURl: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']])),
    createElement: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [T.VARIANT, 'vType'], [T.VARIANT, 'var1'], [Pointer(Pointer(T.IXMLElement)), 'ppElem']]))
});
T.IXMLElement2Vtbl = Struct('IXMLElement2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLElement2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLElement2), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_tagName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.BSTR), 'p']])),
    put_tagName: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'p']])),
    get_parent: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(Pointer(T.IXMLElement2)), 'ppParent']])),
    setAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'strPropertyName'], [T.VARIANT, 'PropertyValue']])),
    getAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'strPropertyName'], [Pointer(T.VARIANT), 'PropertyValue']])),
    removeAttribute: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'strPropertyName']])),
    get_children: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(Pointer(T.IXMLElementCollection)), 'pp']])),
    get_type: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.LONG), 'plType']])),
    get_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.BSTR), 'p']])),
    put_text: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'p']])),
    addChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.IXMLElement2), 'pChildElem'], [T.LONG, 'lIndex'], [T.LONG, 'lReserved']])),
    removeChild: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.IXMLElement2), 'pChildElem']])),
    get_attributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(Pointer(T.IXMLElementCollection)), 'pp']]))
});
T.IXMLDocument2Vtbl = Struct('IXMLDocument2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDocument2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLDocument2), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_root: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(Pointer(T.IXMLElement2)), 'p']])),
    get_fileSize: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    get_fileModifiedDate: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    get_fileUpdatedDate: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    get_URL: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    put_URL: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.BSTR, 'p']])),
    get_mimeType: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    get_readyState: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.LONG), 'pl']])),
    get_charset: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    put_charset: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.BSTR, 'p']])),
    get_version: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    get_doctype: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    get_dtdURL: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']])),
    createElement: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.VARIANT, 'vType'], [T.VARIANT, 'var'], [Pointer(Pointer(T.IXMLElement2)), 'ppElem']])),
    get_async: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.VARIANT_BOOL), 'pf']])),
    put_async: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.VARIANT_BOOL, 'f']]))
});
T.XMLELEM_TYPE = Enum('XMLELEMTYPE_OTHER', {
    XMLELEMTYPE_ELEMENT: 0,
    XMLELEMTYPE_TEXT: 1,
    XMLELEMTYPE_COMMENT: 2,
    XMLELEMTYPE_DOCUMENT: 3,
    XMLELEMTYPE_DTD: 4,
    XMLELEMTYPE_PI: 5,
    XMLELEMTYPE_OTHER: 6
});
T.XML_ERROR = Struct('_xml_error', {
    _nLine: T.UINT,
    _pchBuf: T.BSTR,
    _cchBuf: T.BSTR,
    _ich: T.UINT,
    _pszFound: T.BSTR,
    _pszExpected: T.BSTR,
    _reserved1: T.DWORD,
    _reserved2: T.DWORD
});
T.IXMLAttributeVtbl = Struct('IXMLAttributeVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLAttribute), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLAttribute), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    get_name: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [Pointer(T.BSTR), 'p']])),
    get_value: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [Pointer(T.BSTR), 'p']]))
});
T.IXMLErrorVtbl = Struct('IXMLErrorVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLError), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLError), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLError), 'This']])),
    GetErrorInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLError), 'This'], [Pointer(T.XML_ERROR), 'pErrorReturn']]))
});
T.IXMLElementNotificationSinkVtbl = Struct('IXMLElementNotificationSinkVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementNotificationSink), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLElementNotificationSink), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IXMLElementNotificationSink), 'This']])),
    GetTypeInfoCount: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementNotificationSink), 'This'], [Pointer(T.UINT), 'pctinfo']])),
    GetTypeInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementNotificationSink), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']])),
    GetIDsOfNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementNotificationSink), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']])),
    Invoke: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementNotificationSink), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']])),
    ChildAdded: Pointer(Fn(T.HRESULT, [[Pointer(T.IXMLElementNotificationSink), 'This'], [Pointer(T.IDispatch), 'pChildElem']]))
});
T.LPIINTERNET = Pointer(T.IInternet);
T.IInternetVtbl = Struct('IInternetVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternet), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternet), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternet), 'This']]))
});
T.LPBINDING = Pointer(T.IBinding);
T.IBindingVtbl = Struct('IBindingVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IBinding), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IBinding), 'This']])),
    Abort: Pointer(Fn(T.HRESULT, [[Pointer(T.IBinding), 'This']])),
    Suspend: Pointer(Fn(T.HRESULT, [[Pointer(T.IBinding), 'This']])),
    Resume: Pointer(Fn(T.HRESULT, [[Pointer(T.IBinding), 'This']])),
    SetPriority: Pointer(Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [T.LONG, 'nPriority']])),
    GetPriority: Pointer(Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [Pointer(T.LONG), 'pnPriority']])),
    GetBindResult: Pointer(Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [Pointer(T.CLSID), 'pclsidProtocol'], [Pointer(T.DWORD), 'pdwResult'], [Pointer(T.LPOLESTR), 'pszResult'], [Pointer(T.DWORD), 'pdwReserved']]))
});
T.LPBINDSTATUSCALLBACK = Pointer(T.IBindStatusCallback);
T.BINDVERB = Enum('BINDVERB_CUSTOM', {
    BINDVERB_GET: 0,
    BINDVERB_POST: 1,
    BINDVERB_PUT: 2,
    BINDVERB_CUSTOM: 3
});
T.BINDINFOF = Enum('BINDINFOF_URLENCODEDEXTRAINFO', {
    BINDINFOF_URLENCODESTGMEDDATA: 1,
    BINDINFOF_URLENCODEDEXTRAINFO: 2
});
T.BINDF = Enum('BINDF_ENFORCERESTRICTED', {
    BINDF_ASYNCHRONOUS: 1,
    BINDF_ASYNCSTORAGE: 2,
    BINDF_NOPROGRESSIVERENDERING: 4,
    BINDF_OFFLINEOPERATION: 8,
    BINDF_GETNEWESTVERSION: 16,
    BINDF_NOWRITECACHE: 32,
    BINDF_NEEDFILE: 64,
    BINDF_PULLDATA: 128,
    BINDF_IGNORESECURITYPROBLEM: 256,
    BINDF_RESYNCHRONIZE: 512,
    BINDF_HYPERLINK: 1024,
    BINDF_NO_UI: 2048,
    BINDF_SILENTOPERATION: 4096,
    BINDF_PRAGMA_NO_CACHE: 8192,
    BINDF_GETCLASSOBJECT: 16384,
    BINDF_RESERVED_1: 32768,
    BINDF_FREE_THREADED: 65536,
    BINDF_DIRECT_READ: 131072,
    BINDF_FORMS_SUBMIT: 262144,
    BINDF_GETFROMCACHE_IF_NET_FAIL: 524288,
    BINDF_FROMURLMON: 1048576,
    BINDF_FWD_BACK: 2097152,
    BINDF_PREFERDEFAULTHANDLER: 4194304,
    BINDF_ENFORCERESTRICTED: 8388608
});
T.URL_ENCODING = Enum('URL_ENCODING_DISABLE_UTF8', {
    URL_ENCODING_NONE: 0,
    URL_ENCODING_ENABLE_UTF8: 268435456,
    URL_ENCODING_DISABLE_UTF8: 536870912
});
T.BINDINFO = Struct('_tagBINDINFO', {
    cbSize: T.ULONG,
    szExtraInfo: T.LPWSTR,
    stgmedData: T.STGMEDIUM,
    grfBindInfoF: T.DWORD,
    dwBindVerb: T.DWORD,
    szCustomVerb: T.LPWSTR,
    cbstgmedData: T.DWORD,
    dwOptions: T.DWORD,
    dwOptionsFlags: T.DWORD,
    dwCodePage: T.DWORD,
    securityAttributes: T.SECURITY_ATTRIBUTES,
    iid: T.IID,
    pUnk: Pointer(T.IUnknown),
    dwReserved: T.DWORD
});
T.REMSECURITY_ATTRIBUTES = Struct('_REMSECURITY_ATTRIBUTES', {
    nLength: T.DWORD,
    lpSecurityDescriptor: T.DWORD,
    bInheritHandle: T.BOOL
});
T.PREMSECURITY_ATTRIBUTES = Pointer(Struct('_REMSECURITY_ATTRIBUTES', null));
T.LPREMSECURITY_ATTRIBUTES = Pointer(Struct('_REMSECURITY_ATTRIBUTES', null));
T.RemBINDINFO = Struct('_tagRemBINDINFO', {
    cbSize: T.ULONG,
    szExtraInfo: T.LPWSTR,
    grfBindInfoF: T.DWORD,
    dwBindVerb: T.DWORD,
    szCustomVerb: T.LPWSTR,
    cbstgmedData: T.DWORD,
    dwOptions: T.DWORD,
    dwOptionsFlags: T.DWORD,
    dwCodePage: T.DWORD,
    securityAttributes: T.REMSECURITY_ATTRIBUTES,
    iid: T.IID,
    pUnk: Pointer(T.IUnknown),
    dwReserved: T.DWORD
});
T.RemFORMATETC = Struct('tagRemFORMATETC', {
    cfFormat: T.DWORD,
    ptd: T.DWORD,
    dwAspect: T.DWORD,
    lindex: T.LONG,
    tymed: T.DWORD
});
T.LPREMFORMATETC = Pointer(Struct('tagRemFORMATETC', null));
T.BSCF = Enum('BSCF_64BITLENGTHDOWNLOAD', {
    BSCF_FIRSTDATANOTIFICATION: 1,
    BSCF_INTERMEDIATEDATANOTIFICATION: 2,
    BSCF_LASTDATANOTIFICATION: 4,
    BSCF_DATAFULLYAVAILABLE: 8,
    BSCF_AVAILABLEDATASIZEUNKNOWN: 16,
    BSCF_SKIPDRAINDATAFORFILEURLS: 32,
    BSCF_64BITLENGTHDOWNLOAD: 64
});
T.BINDSTATUS = Enum('BINDSTATUS_DISPLAYNAMEAVAILABLE', {
    BINDSTATUS_FINDINGRESOURCE: 1,
    BINDSTATUS_CONNECTING: 2,
    BINDSTATUS_REDIRECTING: 3,
    BINDSTATUS_BEGINDOWNLOADDATA: 4,
    BINDSTATUS_DOWNLOADINGDATA: 5,
    BINDSTATUS_ENDDOWNLOADDATA: 6,
    BINDSTATUS_BEGINDOWNLOADCOMPONENTS: 7,
    BINDSTATUS_INSTALLINGCOMPONENTS: 8,
    BINDSTATUS_ENDDOWNLOADCOMPONENTS: 9,
    BINDSTATUS_USINGCACHEDCOPY: 10,
    BINDSTATUS_SENDINGREQUEST: 11,
    BINDSTATUS_CLASSIDAVAILABLE: 12,
    BINDSTATUS_MIMETYPEAVAILABLE: 13,
    BINDSTATUS_CACHEFILENAMEAVAILABLE: 14,
    BINDSTATUS_BEGINSYNCOPERATION: 15,
    BINDSTATUS_ENDSYNCOPERATION: 16,
    BINDSTATUS_BEGINUPLOADDATA: 17,
    BINDSTATUS_UPLOADINGDATA: 18,
    BINDSTATUS_ENDUPLOADINGDATA: 19,
    BINDSTATUS_PROTOCOLCLASSID: 20,
    BINDSTATUS_ENCODING: 21,
    BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE: 22,
    BINDSTATUS_CLASSINSTALLLOCATION: 23,
    BINDSTATUS_DECODING: 24,
    BINDSTATUS_LOADINGMIMEHANDLER: 25,
    BINDSTATUS_CONTENTDISPOSITIONATTACH: 26,
    BINDSTATUS_FILTERREPORTMIMETYPE: 27,
    BINDSTATUS_CLSIDCANINSTANTIATE: 28,
    BINDSTATUS_IUNKNOWNAVAILABLE: 29,
    BINDSTATUS_DIRECTBIND: 30,
    BINDSTATUS_RAWMIMETYPE: 31,
    BINDSTATUS_PROXYDETECTING: 32,
    BINDSTATUS_ACCEPTRANGES: 33,
    BINDSTATUS_COOKIE_SENT: 34,
    BINDSTATUS_COMPACT_POLICY_RECEIVED: 35,
    BINDSTATUS_COOKIE_SUPPRESSED: 36,
    BINDSTATUS_COOKIE_STATE_UNKNOWN: 37,
    BINDSTATUS_COOKIE_STATE_ACCEPT: 38,
    BINDSTATUS_COOKIE_STATE_REJECT: 39,
    BINDSTATUS_COOKIE_STATE_PROMPT: 40,
    BINDSTATUS_COOKIE_STATE_LEASH: 41,
    BINDSTATUS_COOKIE_STATE_DOWNGRADE: 42,
    BINDSTATUS_POLICY_HREF: 43,
    BINDSTATUS_P3P_HEADER: 44,
    BINDSTATUS_SESSION_COOKIE_RECEIVED: 45,
    BINDSTATUS_PERSISTENT_COOKIE_RECEIVED: 46,
    BINDSTATUS_SESSION_COOKIES_ALLOWED: 47,
    BINDSTATUS_CACHECONTROL: 48,
    BINDSTATUS_CONTENTDISPOSITIONFILENAME: 49,
    BINDSTATUS_MIMETEXTPLAINMISMATCH: 50,
    BINDSTATUS_PUBLISHERAVAILABLE: 51,
    BINDSTATUS_DISPLAYNAMEAVAILABLE: 52
});
T.IBindStatusCallbackVtbl = Struct('IBindStatusCallbackVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IBindStatusCallback), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IBindStatusCallback), 'This']])),
    OnStartBinding: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.DWORD, 'dwReserved'], [Pointer(T.IBinding), 'pib']])),
    GetPriority: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.LONG), 'pnPriority']])),
    OnLowResource: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.DWORD, 'reserved']])),
    OnProgress: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.ULONG, 'ulProgress'], [T.ULONG, 'ulProgressMax'], [T.ULONG, 'ulStatusCode'], [T.LPCWSTR, 'szStatusText']])),
    OnStopBinding: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.HRESULT, 'hresult'], [T.LPCWSTR, 'szError']])),
    GetBindInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.BINDINFO), 'pbindinfo']])),
    OnDataAvailable: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.DWORD, 'grfBSCF'], [T.DWORD, 'dwSize'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pstgmed']])),
    OnObjectAvailable: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'punk']]))
});
T.LPBINDSTATUSCALLBACKEX = Pointer(T.IBindStatusCallbackEx);
T.BINDF2 = Enum('BINDF2_RESERVED_1', {
    BINDF2_DISABLEBASICOVERHTTP: 1,
    BINDF2_DISABLEAUTOCOOKIEHANDLING: 2,
    BINDF2_READ_DATA_GREATER_THAN_4GB: 4,
    BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID: 8,
    BINDF2_RESERVED_3: 536870912,
    BINDF2_RESERVED_2: 1073741824,
    BINDF2_RESERVED_1: 2147483648
});
T.IBindStatusCallbackExVtbl = Struct('IBindStatusCallbackExVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IBindStatusCallbackEx), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IBindStatusCallbackEx), 'This']])),
    OnStartBinding: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [T.DWORD, 'dwReserved'], [Pointer(T.IBinding), 'pib']])),
    GetPriority: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [Pointer(T.LONG), 'pnPriority']])),
    OnLowResource: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [T.DWORD, 'reserved']])),
    OnProgress: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [T.ULONG, 'ulProgress'], [T.ULONG, 'ulProgressMax'], [T.ULONG, 'ulStatusCode'], [T.LPCWSTR, 'szStatusText']])),
    OnStopBinding: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [T.HRESULT, 'hresult'], [T.LPCWSTR, 'szError']])),
    GetBindInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.BINDINFO), 'pbindinfo']])),
    OnDataAvailable: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [T.DWORD, 'grfBSCF'], [T.DWORD, 'dwSize'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pstgmed']])),
    OnObjectAvailable: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'punk']])),
    GetBindInfoEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.BINDINFO), 'pbindinfo'], [Pointer(T.DWORD), 'grfBINDF2'], [Pointer(T.DWORD), 'pdwReserved']]))
});
T.LPAUTHENTICATION = Pointer(T.IAuthenticate);
T.IAuthenticateVtbl = Struct('IAuthenticateVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IAuthenticate), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IAuthenticate), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IAuthenticate), 'This']])),
    Authenticate: Pointer(Fn(T.HRESULT, [[Pointer(T.IAuthenticate), 'This'], [Pointer(T.HWND), 'phwnd'], [Pointer(T.LPWSTR), 'pszUsername'], [Pointer(T.LPWSTR), 'pszPassword']]))
});
T.LPHTTPNEGOTIATE = Pointer(T.IHttpNegotiate);
T.IHttpNegotiateVtbl = Struct('IHttpNegotiateVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IHttpNegotiate), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IHttpNegotiate), 'This']])),
    BeginningTransaction: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate), 'This'], [T.LPCWSTR, 'szURL'], [T.LPCWSTR, 'szHeaders'], [T.DWORD, 'dwReserved'], [Pointer(T.LPWSTR), 'pszAdditionalHeaders']])),
    OnResponse: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate), 'This'], [T.DWORD, 'dwResponseCode'], [T.LPCWSTR, 'szResponseHeaders'], [T.LPCWSTR, 'szRequestHeaders'], [Pointer(T.LPWSTR), 'pszAdditionalRequestHeaders']]))
});
T.LPHTTPNEGOTIATE2 = Pointer(T.IHttpNegotiate2);
T.IHttpNegotiate2Vtbl = Struct('IHttpNegotiate2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IHttpNegotiate2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IHttpNegotiate2), 'This']])),
    BeginningTransaction: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate2), 'This'], [T.LPCWSTR, 'szURL'], [T.LPCWSTR, 'szHeaders'], [T.DWORD, 'dwReserved'], [Pointer(T.LPWSTR), 'pszAdditionalHeaders']])),
    OnResponse: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate2), 'This'], [T.DWORD, 'dwResponseCode'], [T.LPCWSTR, 'szResponseHeaders'], [T.LPCWSTR, 'szRequestHeaders'], [Pointer(T.LPWSTR), 'pszAdditionalRequestHeaders']])),
    GetRootSecurityId: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate2), 'This'], [Pointer(T.BYTE), 'pbSecurityId'], [Pointer(T.DWORD), 'pcbSecurityId'], [T.DWORD_PTR, 'dwReserved']]))
});
T.LPBINDHOST = Pointer(T.IBindHost);
T.IBindHostVtbl = Struct('IBindHostVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IBindHost), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IBindHost), 'This']])),
    CreateMoniker: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [T.LPOLESTR, 'szName'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(Pointer(T.IMoniker)), 'ppmk'], [T.DWORD, 'dwReserved']])),
    MonikerBindToStorage: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IMoniker), 'pMk'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(T.IBindStatusCallback), 'pBSC'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObj']])),
    MonikerBindToObject: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IMoniker), 'pMk'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(T.IBindStatusCallback), 'pBSC'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObj']]))
});
T.LPWININETINFO = Pointer(T.IWinInetInfo);
T.IWinInetInfoVtbl = Struct('IWinInetInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IWinInetInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IWinInetInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IWinInetInfo), 'This']])),
    QueryOption: Pointer(Fn(T.HRESULT, [[Pointer(T.IWinInetInfo), 'This'], [T.DWORD, 'dwOption'], [T.LPVOID, 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf']]))
});
T.LPWININETHTTPINFO = Pointer(T.IWinInetHttpInfo);
T.IWinInetHttpInfoVtbl = Struct('IWinInetHttpInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IWinInetHttpInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IWinInetHttpInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IWinInetHttpInfo), 'This']])),
    QueryOption: Pointer(Fn(T.HRESULT, [[Pointer(T.IWinInetHttpInfo), 'This'], [T.DWORD, 'dwOption'], [T.LPVOID, 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf']])),
    QueryInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IWinInetHttpInfo), 'This'], [T.DWORD, 'dwOption'], [T.LPVOID, 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf'], [Pointer(T.DWORD), 'pdwFlags'], [Pointer(T.DWORD), 'pdwReserved']]))
});
T.LPWINDOWFORBINDINGUI = Pointer(T.IWindowForBindingUI);
T.IWindowForBindingUIVtbl = Struct('IWindowForBindingUIVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IWindowForBindingUI), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IWindowForBindingUI), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IWindowForBindingUI), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IWindowForBindingUI), 'This'], [Pointer(T.GUID), 'rguidReason'], [Pointer(T.HWND), 'phwnd']]))
});
T.LPHTTPSECURITY = Pointer(T.IHttpSecurity);
T.IHttpSecurityVtbl = Struct('IHttpSecurityVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpSecurity), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IHttpSecurity), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IHttpSecurity), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpSecurity), 'This'], [Pointer(T.GUID), 'rguidReason'], [Pointer(T.HWND), 'phwnd']])),
    OnSecurityProblem: Pointer(Fn(T.HRESULT, [[Pointer(T.IHttpSecurity), 'This'], [T.DWORD, 'dwProblem']]))
});
T.LPPERSISTMONIKER = Pointer(T.IPersistMoniker);
T.IPersistMonikerVtbl = Struct('IPersistMonikerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPersistMoniker), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPersistMoniker), 'This']])),
    GetClassID: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(T.CLSID), 'pClassID']])),
    IsDirty: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This']])),
    Load: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [T.BOOL, 'fFullyAvailable'], [Pointer(T.IMoniker), 'pimkName'], [T.LPBC, 'pibc'], [T.DWORD, 'grfMode']])),
    Save: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(T.IMoniker), 'pimkName'], [T.LPBC, 'pbc'], [T.BOOL, 'fRemember']])),
    SaveCompleted: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(T.IMoniker), 'pimkName'], [T.LPBC, 'pibc']])),
    GetCurMoniker: Pointer(Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(Pointer(T.IMoniker)), 'ppimkName']]))
});
T.LPMONIKERPROP = Pointer(T.IMonikerProp);
T.MONIKERPROPERTY = Enum('POPUPLEVELPROP', {
    MIMETYPEPROP: 0,
    USE_SRC_URL: 1,
    CLASSIDPROP: 2,
    TRUSTEDDOWNLOADPROP: 3,
    POPUPLEVELPROP: 4
});
T.IMonikerPropVtbl = Struct('IMonikerPropVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IMonikerProp), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IMonikerProp), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IMonikerProp), 'This']])),
    PutProperty: Pointer(Fn(T.HRESULT, [[Pointer(T.IMonikerProp), 'This'], [T.MONIKERPROPERTY, 'mkp'], [T.LPCWSTR, 'val']]))
});
T.LPBINDPROTOCOL = Pointer(T.IBindProtocol);
T.IBindProtocolVtbl = Struct('IBindProtocolVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindProtocol), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IBindProtocol), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IBindProtocol), 'This']])),
    CreateBinding: Pointer(Fn(T.HRESULT, [[Pointer(T.IBindProtocol), 'This'], [T.LPCWSTR, 'szUrl'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(Pointer(T.IBinding)), 'ppb']]))
});
T.LPIINTERNETBINDINFO = Pointer(T.IInternetBindInfo);
T.BINDSTRING = Enum('BINDSTRING_PTR_BIND_CONTEXT', {
    BINDSTRING_HEADERS: 1,
    BINDSTRING_ACCEPT_MIMES: 2,
    BINDSTRING_EXTRA_URL: 3,
    BINDSTRING_LANGUAGE: 4,
    BINDSTRING_USERNAME: 5,
    BINDSTRING_PASSWORD: 6,
    BINDSTRING_UA_PIXELS: 7,
    BINDSTRING_UA_COLOR: 8,
    BINDSTRING_OS: 9,
    BINDSTRING_USER_AGENT: 10,
    BINDSTRING_ACCEPT_ENCODINGS: 11,
    BINDSTRING_POST_COOKIE: 12,
    BINDSTRING_POST_DATA_MIME: 13,
    BINDSTRING_URL: 14,
    BINDSTRING_IID: 15,
    BINDSTRING_FLAG_BIND_TO_OBJECT: 16,
    BINDSTRING_PTR_BIND_CONTEXT: 17
});
T.IInternetBindInfoVtbl = Struct('IInternetBindInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetBindInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetBindInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetBindInfo), 'This']])),
    GetBindInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetBindInfo), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.BINDINFO), 'pbindinfo']])),
    GetBindString: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetBindInfo), 'This'], [T.ULONG, 'ulStringType'], [Pointer(T.LPOLESTR), 'ppwzStr'], [T.ULONG, 'cEl'], [Pointer(T.ULONG), 'pcElFetched']]))
});
T.LPIINTERNETPRIORITY = Pointer(T.IInternetPriority);
T.IInternetPriorityVtbl = Struct('IInternetPriorityVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetPriority), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetPriority), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetPriority), 'This']])),
    SetPriority: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetPriority), 'This'], [T.LONG, 'nPriority']])),
    GetPriority: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetPriority), 'This'], [Pointer(T.LONG), 'pnPriority']]))
});
T.LPIINTERNETPROTOCOLROOT = Pointer(T.IInternetProtocolRoot);
T.PI_FLAGS = Enum('PD_FORCE_SWITCH', {
    PI_PARSE_URL: 1,
    PI_FILTER_MODE: 2,
    PI_FORCE_ASYNC: 4,
    PI_USE_WORKERTHREAD: 8,
    PI_MIMEVERIFICATION: 16,
    PI_CLSIDLOOKUP: 32,
    PI_DATAPROGRESS: 64,
    PI_SYNCHRONOUS: 128,
    PI_APARTMENTTHREADED: 256,
    PI_CLASSINSTALL: 512,
    PD_FORCE_SWITCH: 65536
});
T.PROTOCOLDATA = Struct('_tagPROTOCOLDATA', {
    grfFlags: T.DWORD,
    dwState: T.DWORD,
    pData: T.LPVOID,
    cbData: T.ULONG
});
T.IInternetProtocolRootVtbl = Struct('IInternetProtocolRootVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocolRoot), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocolRoot), 'This']])),
    Start: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [T.LPCWSTR, 'szUrl'], [Pointer(T.IInternetProtocolSink), 'pOIProtSink'], [Pointer(T.IInternetBindInfo), 'pOIBindInfo'], [T.DWORD, 'grfPI'], [T.HANDLE_PTR, 'dwReserved']])),
    Continue: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [Pointer(T.PROTOCOLDATA), 'pProtocolData']])),
    Abort: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [T.HRESULT, 'hrReason'], [T.DWORD, 'dwOptions']])),
    Terminate: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [T.DWORD, 'dwOptions']])),
    Suspend: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This']])),
    Resume: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This']]))
});
T.LPIINTERNETPROTOCOLSINK = Pointer(T.IInternetProtocolSink);
T.IInternetProtocolSinkVtbl = Struct('IInternetProtocolSinkVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocolSink), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocolSink), 'This']])),
    Switch: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [Pointer(T.PROTOCOLDATA), 'pProtocolData']])),
    ReportProgress: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [T.ULONG, 'ulStatusCode'], [T.LPCWSTR, 'szStatusText']])),
    ReportData: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [T.DWORD, 'grfBSCF'], [T.ULONG, 'ulProgress'], [T.ULONG, 'ulProgressMax']])),
    ReportResult: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [T.HRESULT, 'hrResult'], [T.DWORD, 'dwError'], [T.LPCWSTR, 'szResult']]))
});
T.LPIINTERNETPROTOCOL = Pointer(T.IInternetProtocol);
T.IInternetProtocolVtbl = Struct('IInternetProtocolVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocol), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocol), 'This']])),
    Start: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [T.LPCWSTR, 'szUrl'], [Pointer(T.IInternetProtocolSink), 'pOIProtSink'], [Pointer(T.IInternetBindInfo), 'pOIBindInfo'], [T.DWORD, 'grfPI'], [T.HANDLE_PTR, 'dwReserved']])),
    Continue: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [Pointer(T.PROTOCOLDATA), 'pProtocolData']])),
    Abort: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [T.HRESULT, 'hrReason'], [T.DWORD, 'dwOptions']])),
    Terminate: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [T.DWORD, 'dwOptions']])),
    Suspend: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This']])),
    Resume: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This']])),
    Read: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']])),
    Seek: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [T.LARGE_INTEGER, 'dlibMove'], [T.DWORD, 'dwOrigin'], [Pointer(T.ULARGE_INTEGER), 'plibNewPosition']])),
    LockRequest: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [T.DWORD, 'dwOptions']])),
    UnlockRequest: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This']]))
});
T.LPIINTERNETPROTOCOLINFO = Pointer(T.IInternetProtocolInfo);
T.PARSEACTION = Enum('PARSE_UNESCAPE', {
    PARSE_CANONICALIZE: 1,
    PARSE_FRIENDLY: 2,
    PARSE_SECURITY_URL: 3,
    PARSE_ROOTDOCUMENT: 4,
    PARSE_DOCUMENT: 5,
    PARSE_ANCHOR: 6,
    PARSE_ENCODE: 7,
    PARSE_DECODE: 8,
    PARSE_PATH_FROM_URL: 9,
    PARSE_URL_FROM_PATH: 10,
    PARSE_MIME: 11,
    PARSE_SERVER: 12,
    PARSE_SCHEMA: 13,
    PARSE_SITE: 14,
    PARSE_DOMAIN: 15,
    PARSE_LOCATION: 16,
    PARSE_SECURITY_DOMAIN: 17,
    PARSE_ESCAPE: 18,
    PARSE_UNESCAPE: 19
});
T.PSUACTION = Enum('PSU_SECURITY_URL_ONLY', {
    PSU_DEFAULT: 1,
    PSU_SECURITY_URL_ONLY: 2
});
T.QUERYOPTION = Enum('QUERY_USES_HISTORYFOLDER', {
    QUERY_EXPIRATION_DATE: 1,
    QUERY_TIME_OF_LAST_CHANGE: 2,
    QUERY_CONTENT_ENCODING: 3,
    QUERY_CONTENT_TYPE: 4,
    QUERY_REFRESH: 5,
    QUERY_RECOMBINE: 6,
    QUERY_CAN_NAVIGATE: 7,
    QUERY_USES_NETWORK: 8,
    QUERY_IS_CACHED: 9,
    QUERY_IS_INSTALLEDENTRY: 10,
    QUERY_IS_CACHED_OR_MAPPED: 11,
    QUERY_USES_CACHE: 12,
    QUERY_IS_SECURE: 13,
    QUERY_IS_SAFE: 14,
    QUERY_USES_HISTORYFOLDER: 15
});
T.IInternetProtocolInfoVtbl = Struct('IInternetProtocolInfoVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocolInfo), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocolInfo), 'This']])),
    ParseUrl: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [T.LPCWSTR, 'pwzUrl'], [T.PARSEACTION, 'ParseAction'], [T.DWORD, 'dwParseFlags'], [T.LPWSTR, 'pwzResult'], [T.DWORD, 'cchResult'], [Pointer(T.DWORD), 'pcchResult'], [T.DWORD, 'dwReserved']])),
    CombineUrl: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [T.LPCWSTR, 'pwzBaseUrl'], [T.LPCWSTR, 'pwzRelativeUrl'], [T.DWORD, 'dwCombineFlags'], [T.LPWSTR, 'pwzResult'], [T.DWORD, 'cchResult'], [Pointer(T.DWORD), 'pcchResult'], [T.DWORD, 'dwReserved']])),
    CompareUrl: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [T.LPCWSTR, 'pwzUrl1'], [T.LPCWSTR, 'pwzUrl2'], [T.DWORD, 'dwCompareFlags']])),
    QueryInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [T.LPCWSTR, 'pwzUrl'], [T.QUERYOPTION, 'OueryOption'], [T.DWORD, 'dwQueryFlags'], [T.LPVOID, 'pBuffer'], [T.DWORD, 'cbBuffer'], [Pointer(T.DWORD), 'pcbBuf'], [T.DWORD, 'dwReserved']]))
});
T.LPIINTERNETSESSION = Pointer(T.IInternetSession);
T.OIBDG_FLAGS = Enum('OIBDG_DATAONLY', {
    OIBDG_APARTMENTTHREADED: 256,
    OIBDG_DATAONLY: 4096
});
T.IInternetSessionVtbl = Struct('IInternetSessionVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetSession), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetSession), 'This']])),
    RegisterNameSpace: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IClassFactory), 'pCF'], [Pointer(T.CLSID), 'rclsid'], [T.LPCWSTR, 'pwzProtocol'], [T.ULONG, 'cPatterns'], [Pointer(T.LPCWSTR), 'ppwzPatterns'], [T.DWORD, 'dwReserved']])),
    UnregisterNameSpace: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IClassFactory), 'pCF'], [T.LPCWSTR, 'pszProtocol']])),
    RegisterMimeFilter: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IClassFactory), 'pCF'], [Pointer(T.CLSID), 'rclsid'], [T.LPCWSTR, 'pwzType']])),
    UnregisterMimeFilter: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IClassFactory), 'pCF'], [T.LPCWSTR, 'pwzType']])),
    CreateBinding: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [T.LPBC, 'pBC'], [T.LPCWSTR, 'szUrl'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(Pointer(T.IUnknown)), 'ppUnk'], [Pointer(Pointer(T.IInternetProtocol)), 'ppOInetProt'], [T.DWORD, 'dwOption']])),
    SetSessionOption: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [T.DWORD, 'dwOption'], [T.LPVOID, 'pBuffer'], [T.DWORD, 'dwBufferLength'], [T.DWORD, 'dwReserved']]))
});
T.IInternetSecurityMgrSiteVtbl = Struct('IInternetSecurityMgrSiteVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityMgrSite), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetSecurityMgrSite), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetSecurityMgrSite), 'This']])),
    GetWindow: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityMgrSite), 'This'], [Pointer(T.HWND), 'phwnd']])),
    EnableModeless: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityMgrSite), 'This'], [T.BOOL, 'fEnable']]))
});
T.PUAF = Enum('PUAF_CHECK_TIPS', {
    PUAF_DEFAULT: 0,
    PUAF_NOUI: 1,
    PUAF_ISFILE: 2,
    PUAF_WARN_IF_DENIED: 4,
    PUAF_FORCEUI_FOREGROUND: 8,
    PUAF_CHECK_TIPS: 16
});
T.SZM_FLAGS = Enum('SZM_DELETE', {
    SZM_CREATE: 0,
    SZM_DELETE: 1
});
T.IInternetSecurityManagerVtbl = Struct('IInternetSecurityManagerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetSecurityManager), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetSecurityManager), 'This']])),
    SetSecuritySite: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [Pointer(T.IInternetSecurityMgrSite), 'pSite']])),
    GetSecuritySite: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [Pointer(Pointer(T.IInternetSecurityMgrSite)), 'ppSite']])),
    MapUrlToZone: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.LPCWSTR, 'pwszUrl'], [Pointer(T.DWORD), 'pdwZone'], [T.DWORD, 'dwFlags']])),
    GetSecurityId: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.LPCWSTR, 'pwszUrl'], [Pointer(T.BYTE), 'pbSecurityId'], [Pointer(T.DWORD), 'pcbSecurityId'], [T.DWORD_PTR, 'dwReserved']])),
    ProcessUrlAction: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.LPCWSTR, 'pwszUrl'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [Pointer(T.BYTE), 'pContext'], [T.DWORD, 'cbContext'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwReserved']])),
    QueryCustomPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.LPCWSTR, 'pwszUrl'], [Pointer(T.GUID), 'guidKey'], [Pointer(Pointer(T.BYTE)), 'ppPolicy'], [Pointer(T.DWORD), 'pcbPolicy'], [Pointer(T.BYTE), 'pContext'], [T.DWORD, 'cbContext'], [T.DWORD, 'dwReserved']])),
    SetZoneMapping: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.DWORD, 'dwZone'], [T.LPCWSTR, 'lpszPattern'], [T.DWORD, 'dwFlags']])),
    GetZoneMappings: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(Pointer(T.IEnumString)), 'ppenumString'], [T.DWORD, 'dwFlags']]))
});
T.IInternetHostSecurityManagerVtbl = Struct('IInternetHostSecurityManagerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetHostSecurityManager), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetHostSecurityManager), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetHostSecurityManager), 'This']])),
    GetSecurityId: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetHostSecurityManager), 'This'], [Pointer(T.BYTE), 'pbSecurityId'], [Pointer(T.DWORD), 'pcbSecurityId'], [T.DWORD_PTR, 'dwReserved']])),
    ProcessUrlAction: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetHostSecurityManager), 'This'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [Pointer(T.BYTE), 'pContext'], [T.DWORD, 'cbContext'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwReserved']])),
    QueryCustomPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetHostSecurityManager), 'This'], [Pointer(T.GUID), 'guidKey'], [Pointer(Pointer(T.BYTE)), 'ppPolicy'], [Pointer(T.DWORD), 'pcbPolicy'], [Pointer(T.BYTE), 'pContext'], [T.DWORD, 'cbContext'], [T.DWORD, 'dwReserved']]))
});
T.LPURLZONEMANAGER = Pointer(T.IInternetZoneManager);
T.URLZONE = Enum('URLZONE_USER_MAX', {
    URLZONE_INVALID: 0,
    URLZONE_PREDEFINED_MIN: 0,
    URLZONE_LOCAL_MACHINE: 0,
    URLZONE_INTRANET: 1,
    URLZONE_TRUSTED: 2,
    URLZONE_INTERNET: 3,
    URLZONE_UNTRUSTED: 4,
    URLZONE_PREDEFINED_MAX: 999,
    URLZONE_USER_MIN: 1000,
    URLZONE_USER_MAX: 10000
});
T.URLTEMPLATE = Enum('URLTEMPLATE_PREDEFINED_MAX', {
    URLTEMPLATE_CUSTOM: 0,
    URLTEMPLATE_PREDEFINED_MIN: 65536,
    URLTEMPLATE_LOW: 65536,
    URLTEMPLATE_MEDLOW: 66816,
    URLTEMPLATE_MEDIUM: 69632,
    URLTEMPLATE_MEDHIGH: 70912,
    URLTEMPLATE_HIGH: 73728,
    URLTEMPLATE_PREDEFINED_MAX: 131072
});
T.ZAFLAGS = Enum('ZAFLAGS_NO_CACHE', {
    ZAFLAGS_CUSTOM_EDIT: 1,
    ZAFLAGS_ADD_SITES: 2,
    ZAFLAGS_REQUIRE_VERIFICATION: 4,
    ZAFLAGS_INCLUDE_PROXY_OVERRIDE: 8,
    ZAFLAGS_INCLUDE_INTRANET_SITES: 16,
    ZAFLAGS_NO_UI: 32,
    ZAFLAGS_SUPPORTS_VERIFICATION: 64,
    ZAFLAGS_UNC_AS_INTRANET: 128,
    ZAFLAGS_DETECT_INTRANET: 256,
    ZAFLAGS_USE_LOCKED_ZONES: 65536,
    ZAFLAGS_VERIFY_TEMPLATE_SETTINGS: 131072,
    ZAFLAGS_NO_CACHE: 262144
});
T.ZONEATTRIBUTES = Struct('_ZONEATTRIBUTES', {
    cbSize: T.ULONG,
    szDisplayName: ArrayType(T.WCHAR, 260),
    szDescription: ArrayType(T.WCHAR, 200),
    szIconPath: ArrayType(T.WCHAR, 260),
    dwTemplateMinLevel: T.DWORD,
    dwTemplateRecommended: T.DWORD,
    dwTemplateCurrentLevel: T.DWORD,
    dwFlags: T.DWORD
});
T.LPZONEATTRIBUTES = Pointer(Struct('_ZONEATTRIBUTES', null));
T.URLZONEREG = Enum('URLZONEREG_HKCU', {
    URLZONEREG_DEFAULT: 0,
    URLZONEREG_HKLM: 1,
    URLZONEREG_HKCU: 2
});
T.IInternetZoneManagerVtbl = Struct('IInternetZoneManagerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetZoneManager), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetZoneManager), 'This']])),
    GetZoneAttributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes']])),
    SetZoneAttributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes']])),
    GetZoneCustomPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.GUID), 'guidKey'], [Pointer(Pointer(T.BYTE)), 'ppPolicy'], [Pointer(T.DWORD), 'pcbPolicy'], [T.URLZONEREG, 'ulrZoneReg']])),
    SetZoneCustomPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.GUID), 'guidKey'], [Pointer(T.BYTE), 'ppPolicy'], [T.DWORD, 'pcbPolicy'], [T.URLZONEREG, 'ulrZoneReg']])),
    GetZoneActionPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg']])),
    SetZoneActionPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg']])),
    PromptAction: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwAction'], [T.HWND, 'hwndParent'], [T.LPCWSTR, 'pwszUrl'], [T.LPCWSTR, 'pwszText'], [T.DWORD, 'dwPromptFlags']])),
    LogAction: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwAction'], [T.LPCWSTR, 'pwszUrl'], [T.LPCWSTR, 'pwszText'], [T.DWORD, 'dwLogFlags']])),
    CreateZoneEnumerator: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [Pointer(T.DWORD), 'pdwEnum'], [Pointer(T.DWORD), 'pdwCount'], [T.DWORD, 'dwFlags']])),
    GetZoneAt: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwEnum'], [T.DWORD, 'dwIndex'], [Pointer(T.DWORD), 'pdwZone']])),
    DestroyZoneEnumerator: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwEnum']])),
    CopyTemplatePoliciesToZone: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwTemplate'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwReserved']]))
});
T.IInternetZoneManagerExVtbl = Struct('IInternetZoneManagerExVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetZoneManagerEx), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetZoneManagerEx), 'This']])),
    GetZoneAttributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes']])),
    SetZoneAttributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes']])),
    GetZoneCustomPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.GUID), 'guidKey'], [Pointer(Pointer(T.BYTE)), 'ppPolicy'], [Pointer(T.DWORD), 'pcbPolicy'], [T.URLZONEREG, 'ulrZoneReg']])),
    SetZoneCustomPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.GUID), 'guidKey'], [Pointer(T.BYTE), 'ppPolicy'], [T.DWORD, 'pcbPolicy'], [T.URLZONEREG, 'ulrZoneReg']])),
    GetZoneActionPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg']])),
    SetZoneActionPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg']])),
    PromptAction: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwAction'], [T.HWND, 'hwndParent'], [T.LPCWSTR, 'pwszUrl'], [T.LPCWSTR, 'pwszText'], [T.DWORD, 'dwPromptFlags']])),
    LogAction: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwAction'], [T.LPCWSTR, 'pwszUrl'], [T.LPCWSTR, 'pwszText'], [T.DWORD, 'dwLogFlags']])),
    CreateZoneEnumerator: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [Pointer(T.DWORD), 'pdwEnum'], [Pointer(T.DWORD), 'pdwCount'], [T.DWORD, 'dwFlags']])),
    GetZoneAt: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwEnum'], [T.DWORD, 'dwIndex'], [Pointer(T.DWORD), 'pdwZone']])),
    DestroyZoneEnumerator: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwEnum']])),
    CopyTemplatePoliciesToZone: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwTemplate'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwReserved']])),
    GetZoneActionPolicyEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg'], [T.DWORD, 'dwFlags']])),
    SetZoneActionPolicyEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg'], [T.DWORD, 'dwFlags']]))
});
T.IInternetZoneManagerEx2Vtbl = Struct('IInternetZoneManagerEx2Vtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetZoneManagerEx2), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetZoneManagerEx2), 'This']])),
    GetZoneAttributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes']])),
    SetZoneAttributes: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes']])),
    GetZoneCustomPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.GUID), 'guidKey'], [Pointer(Pointer(T.BYTE)), 'ppPolicy'], [Pointer(T.DWORD), 'pcbPolicy'], [T.URLZONEREG, 'ulrZoneReg']])),
    SetZoneCustomPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.GUID), 'guidKey'], [Pointer(T.BYTE), 'ppPolicy'], [T.DWORD, 'pcbPolicy'], [T.URLZONEREG, 'ulrZoneReg']])),
    GetZoneActionPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg']])),
    SetZoneActionPolicy: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg']])),
    PromptAction: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwAction'], [T.HWND, 'hwndParent'], [T.LPCWSTR, 'pwszUrl'], [T.LPCWSTR, 'pwszText'], [T.DWORD, 'dwPromptFlags']])),
    LogAction: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwAction'], [T.LPCWSTR, 'pwszUrl'], [T.LPCWSTR, 'pwszText'], [T.DWORD, 'dwLogFlags']])),
    CreateZoneEnumerator: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [Pointer(T.DWORD), 'pdwEnum'], [Pointer(T.DWORD), 'pdwCount'], [T.DWORD, 'dwFlags']])),
    GetZoneAt: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwEnum'], [T.DWORD, 'dwIndex'], [Pointer(T.DWORD), 'pdwZone']])),
    DestroyZoneEnumerator: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwEnum']])),
    CopyTemplatePoliciesToZone: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwTemplate'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwReserved']])),
    GetZoneActionPolicyEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg'], [T.DWORD, 'dwFlags']])),
    SetZoneActionPolicyEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg'], [T.DWORD, 'dwFlags']])),
    GetZoneAttributesEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes'], [T.DWORD, 'dwFlags']])),
    GetZoneSecurityState: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZoneIndex'], [T.BOOL, 'fRespectPolicy'], [T.LPDWORD, 'pdwState'], [Pointer(T.BOOL), 'pfPolicyEncountered']])),
    GetIESecurityState: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.BOOL, 'fRespectPolicy'], [T.LPDWORD, 'pdwState'], [Pointer(T.BOOL), 'pfPolicyEncountered'], [T.BOOL, 'fNoCache']])),
    FixInsecureSettings: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This']]))
});
T.SOFTDISTINFO = Struct('_tagSOFTDISTINFO', {
    cbSize: T.ULONG,
    dwFlags: T.DWORD,
    dwAdState: T.DWORD,
    szTitle: T.LPWSTR,
    szAbstract: T.LPWSTR,
    szHREF: T.LPWSTR,
    dwInstalledVersionMS: T.DWORD,
    dwInstalledVersionLS: T.DWORD,
    dwUpdateVersionMS: T.DWORD,
    dwUpdateVersionLS: T.DWORD,
    dwAdvertisedVersionMS: T.DWORD,
    dwAdvertisedVersionLS: T.DWORD,
    dwReserved: T.DWORD
});
T.LPSOFTDISTINFO = Pointer(Struct('_tagSOFTDISTINFO', null));
T.CODEBASEHOLD = Struct('_tagCODEBASEHOLD', {
    cbSize: T.DWORD,
    szDistUnit: T.LPWSTR,
    szCodeBase: T.LPWSTR,
    dwVersionMS: T.DWORD,
    dwVersionLS: T.DWORD,
    dwStyle: T.DWORD
});
T.LPCODEBASEHOLD = Pointer(Struct('_tagCODEBASEHOLD', null));
T.ISoftDistExtVtbl = Struct('ISoftDistExtVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.ISoftDistExt), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.ISoftDistExt), 'This']])),
    ProcessSoftDist: Pointer(Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [T.LPCWSTR, 'szCDFURL'], [Pointer(T.IXMLElement), 'pSoftDistElement'], [T.LPSOFTDISTINFO, 'lpsdi']])),
    GetFirstCodeBase: Pointer(Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [Pointer(T.LPWSTR), 'szCodeBase'], [T.LPDWORD, 'dwMaxSize']])),
    GetNextCodeBase: Pointer(Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [Pointer(T.LPWSTR), 'szCodeBase'], [T.LPDWORD, 'dwMaxSize']])),
    AsyncInstallDistributionUnit: Pointer(Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [Pointer(T.IBindCtx), 'pbc'], [T.LPVOID, 'lpReserved'], [T.DWORD, 'flags'], [T.LPCODEBASEHOLD, 'lpcbh']]))
});
T.INTERNETFEATURELIST = Enum('FEATURE_ENTRY_COUNT', {
    FEATURE_OBJECT_CACHING: 0,
    FEATURE_ZONE_ELEVATION: 1,
    FEATURE_MIME_HANDLING: 2,
    FEATURE_MIME_SNIFFING: 3,
    FEATURE_WINDOW_RESTRICTIONS: 4,
    FEATURE_WEBOC_POPUPMANAGEMENT: 5,
    FEATURE_BEHAVIORS: 6,
    FEATURE_DISABLE_MK_PROTOCOL: 7,
    FEATURE_LOCALMACHINE_LOCKDOWN: 8,
    FEATURE_SECURITYBAND: 9,
    FEATURE_RESTRICT_ACTIVEXINSTALL: 10,
    FEATURE_VALIDATE_NAVIGATE_URL: 11,
    FEATURE_RESTRICT_FILEDOWNLOAD: 12,
    FEATURE_ADDON_MANAGEMENT: 13,
    FEATURE_PROTOCOL_LOCKDOWN: 14,
    FEATURE_HTTP_USERNAME_PASSWORD_DISABLE: 15,
    FEATURE_SAFE_BINDTOOBJECT: 16,
    FEATURE_UNC_SAVEDFILECHECK: 17,
    FEATURE_GET_URL_DOM_FILEPATH_UNENCODED: 18,
    FEATURE_TABBED_BROWSING: 19,
    FEATURE_SSLUX: 20,
    FEATURE_DISABLE_NAVIGATION_SOUNDS: 21,
    FEATURE_DISABLE_LEGACY_COMPRESSION: 22,
    FEATURE_FORCE_ADDR_AND_STATUS: 23,
    FEATURE_XMLHTTP: 24,
    FEATURE_DISABLE_TELNET_PROTOCOL: 25,
    FEATURE_FEEDS: 26,
    FEATURE_BLOCK_INPUT_PROMPTS: 27,
    FEATURE_DOMSTORAGE: 28,
    FEATURE_XDOMAINREQUEST: 29,
    FEATURE_DATAURI: 30,
    FEATURE_AJAX_CONNECTIONSERVICES: 31,
    FEATURE_ENTRY_COUNT: 32
});
T.PROTOCOLFILTERDATA = Struct('_tagPROTOCOLFILTERDATA', {
    cbSize: T.DWORD,
    pProtocolSink: Pointer(T.IInternetProtocolSink),
    pProtocol: Pointer(T.IInternetProtocol),
    pUnk: Pointer(T.IUnknown),
    dwFilterFlags: T.DWORD
});
T.Uri_PROPERTY = Enum('Uri_PROPERTY_DWORD_LAST', {
    Uri_PROPERTY_ABSOLUTE_URI: 0,
    Uri_PROPERTY_STRING_START: 1,
    Uri_PROPERTY_AUTHORITY: 1,
    Uri_PROPERTY_DISPLAY_URI: 2,
    Uri_PROPERTY_DOMAIN: 3,
    Uri_PROPERTY_EXTENSION: 4,
    Uri_PROPERTY_FRAGMENT: 5,
    Uri_PROPERTY_HOST: 6,
    Uri_PROPERTY_PASSWORD: 7,
    Uri_PROPERTY_PATH: 8,
    Uri_PROPERTY_PATH_AND_QUERY: 9,
    Uri_PROPERTY_QUERY: 10,
    Uri_PROPERTY_RAW_URI: 11,
    Uri_PROPERTY_SCHEME_NAME: 12,
    Uri_PROPERTY_USER_INFO: 13,
    Uri_PROPERTY_USER_NAME: 14,
    Uri_PROPERTY_STRING_LAST: 15,
    Uri_PROPERTY_HOST_TYPE: 15,
    Uri_PROPERTY_DWORD_START: 16,
    Uri_PROPERTY_PORT: 16,
    Uri_PROPERTY_SCHEME: 17,
    Uri_PROPERTY_ZONE: 18,
    Uri_PROPERTY_DWORD_LAST: 19
});
T.Uri_HOST_TYPE = Enum('Uri_HOST_IDN', {
    Uri_HOST_UNKNOWN: 0,
    Uri_HOST_DNS: 1,
    Uri_HOST_IPV4: 2,
    Uri_HOST_IPV6: 3,
    Uri_HOST_IDN: 4
});
T.IUriVtbl = Struct('IUriVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IUri), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IUri), 'This']])),
    GetPropertyBSTR: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.Uri_PROPERTY, 'uriProp'], [Pointer(T.BSTR), 'pbstrProperty'], [T.DWORD, 'dwFlags']])),
    GetPropertyLength: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.Uri_PROPERTY, 'uriProp'], [Pointer(T.DWORD), 'pcchProperty'], [T.DWORD, 'dwFlags']])),
    GetPropertyDWORD: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.Uri_PROPERTY, 'uriProp'], [Pointer(T.DWORD), 'pdwProperty'], [T.DWORD, 'dwFlags']])),
    HasProperty: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.Uri_PROPERTY, 'uriProp'], [Pointer(T.BOOL), 'pfHasProperty']])),
    GetAbsoluteUri: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrAbsoluteUri']])),
    GetAuthority: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrAuthority']])),
    GetDisplayUri: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrDisplayString']])),
    GetDomain: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrDomain']])),
    GetExtension: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrExtension']])),
    GetFragment: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrFragment']])),
    GetHost: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrHost']])),
    GetPassword: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrPassword']])),
    GetPath: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrPath']])),
    GetPathAndQuery: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrPathAndQuery']])),
    GetQuery: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrQuery']])),
    GetRawUri: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrRawUri']])),
    GetSchemeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrSchemeName']])),
    GetUserInfo: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrUserInfo']])),
    GetUserNameA: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrUserName']])),
    GetHostType: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.DWORD), 'pdwHostType']])),
    GetPort: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.DWORD), 'pdwPort']])),
    GetScheme: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.DWORD), 'pdwScheme']])),
    GetZone: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.DWORD), 'pdwZone']])),
    GetProperties: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.LPDWORD, 'pdwFlags']])),
    IsEqual: Pointer(Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.IUri), 'pUri'], [Pointer(T.BOOL), 'pfEqual']]))
});
T.IUriContainerVtbl = Struct('IUriContainerVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriContainer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IUriContainer), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IUriContainer), 'This']])),
    GetIUri: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriContainer), 'This'], [Pointer(Pointer(T.IUri)), 'ppIUri']]))
});
T.IUriBuilderVtbl = Struct('IUriBuilderVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IUriBuilder), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IUriBuilder), 'This']])),
    CreateUriSimple: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.DWORD, 'dwAllowEncodingPropertyMask'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUri)), 'ppIUri']])),
    CreateUri: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.DWORD, 'dwCreateFlags'], [T.DWORD, 'dwAllowEncodingPropertyMask'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUri)), 'ppIUri']])),
    CreateUriWithFlags: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.DWORD, 'dwCreateFlags'], [T.DWORD, 'dwUriBuilderFlags'], [T.DWORD, 'dwAllowEncodingPropertyMask'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUri)), 'ppIUri']])),
    GetIUri: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(Pointer(T.IUri)), 'ppIUri']])),
    SetIUri: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.IUri), 'pIUri']])),
    GetFragment: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchFragment'], [Pointer(T.LPCWSTR), 'ppwzFragment']])),
    GetHost: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchHost'], [Pointer(T.LPCWSTR), 'ppwzHost']])),
    GetPassword: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchPassword'], [Pointer(T.LPCWSTR), 'ppwzPassword']])),
    GetPath: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchPath'], [Pointer(T.LPCWSTR), 'ppwzPath']])),
    GetPort: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.BOOL), 'pfHasPort'], [Pointer(T.DWORD), 'pdwPort']])),
    GetQuery: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchQuery'], [Pointer(T.LPCWSTR), 'ppwzQuery']])),
    GetSchemeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchSchemeName'], [Pointer(T.LPCWSTR), 'ppwzSchemeName']])),
    GetUserNameA: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchUserName'], [Pointer(T.LPCWSTR), 'ppwzUserName']])),
    SetFragment: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']])),
    SetHost: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']])),
    SetPassword: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']])),
    SetPath: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']])),
    SetPortA: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.BOOL, 'fHasPort'], [T.DWORD, 'dwNewValue']])),
    SetQuery: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']])),
    SetSchemeName: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']])),
    SetUserName: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']])),
    RemoveProperties: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.DWORD, 'dwPropertyMask']])),
    HasBeenModified: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.BOOL), 'pfModified']]))
});
T.IUriBuilderFactoryVtbl = Struct('IUriBuilderFactoryVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilderFactory), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IUriBuilderFactory), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IUriBuilderFactory), 'This']])),
    CreateIUriBuilder: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilderFactory), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUriBuilder)), 'ppIUriBuilder']])),
    CreateInitializedIUriBuilder: Pointer(Fn(T.HRESULT, [[Pointer(T.IUriBuilderFactory), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUriBuilder)), 'ppIUriBuilder']]))
});
T.IInternetProtocolExVtbl = Struct('IInternetProtocolExVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocolEx), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IInternetProtocolEx), 'This']])),
    Start: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [T.LPCWSTR, 'szUrl'], [Pointer(T.IInternetProtocolSink), 'pOIProtSink'], [Pointer(T.IInternetBindInfo), 'pOIBindInfo'], [T.DWORD, 'grfPI'], [T.HANDLE_PTR, 'dwReserved']])),
    Continue: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [Pointer(T.PROTOCOLDATA), 'pProtocolData']])),
    Abort: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [T.HRESULT, 'hrReason'], [T.DWORD, 'dwOptions']])),
    Terminate: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [T.DWORD, 'dwOptions']])),
    Suspend: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This']])),
    Resume: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This']])),
    Read: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']])),
    Seek: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [T.LARGE_INTEGER, 'dlibMove'], [T.DWORD, 'dwOrigin'], [Pointer(T.ULARGE_INTEGER), 'plibNewPosition']])),
    LockRequest: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [T.DWORD, 'dwOptions']])),
    UnlockRequest: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This']])),
    StartEx: Pointer(Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [Pointer(T.IUri), 'pUri'], [Pointer(T.IInternetProtocolSink), 'pOIProtSink'], [Pointer(T.IInternetBindInfo), 'pOIBindInfo'], [T.DWORD, 'grfPI'], [Pointer(T.HANDLE), 'dwReserved']]))
});
T.IPropertyStorage = Struct('IPropertyStorage', null);
T.IPropertySetStorage = Struct('IPropertySetStorage', null);
T.IEnumSTATPROPSTG = Struct('IEnumSTATPROPSTG', null);
T.IEnumSTATPROPSETSTG = Struct('IEnumSTATPROPSETSTG', null);
T.LPPROPERTYSTORAGE = Pointer(T.IPropertyStorage);
T.PROPVARIANT = Struct('tagPROPVARIANT', null);
T.CAUB = Struct('tagCAUB', {
    cElems: T.ULONG,
    pElems: Pointer(T.u8)
});
T.CAI = Struct('tagCAI', {
    cElems: T.ULONG,
    pElems: Pointer(T.i16)
});
T.CAUI = Struct('tagCAUI', {
    cElems: T.ULONG,
    pElems: Pointer(T.USHORT)
});
T.CAL = Struct('tagCAL', {
    cElems: T.ULONG,
    pElems: Pointer(T.LONG)
});
T.CAUL = Struct('tagCAUL', {
    cElems: T.ULONG,
    pElems: Pointer(T.ULONG)
});
T.CAFLT = Struct('tagCAFLT', {
    cElems: T.ULONG,
    pElems: Pointer(T.f32)
});
T.CADBL = Struct('tagCADBL', {
    cElems: T.ULONG,
    pElems: Pointer(T.f64)
});
T.CACY = Struct('tagCACY', {
    cElems: T.ULONG,
    pElems: Pointer(T.CY)
});
T.CADATE = Struct('tagCADATE', {
    cElems: T.ULONG,
    pElems: Pointer(T.DATE)
});
T.CABSTR = Struct('tagCABSTR', {
    cElems: T.ULONG,
    pElems: Pointer(T.BSTR)
});
T.CABSTRBLOB = Struct('tagCABSTRBLOB', {
    cElems: T.ULONG,
    pElems: Pointer(T.BSTRBLOB)
});
T.CABOOL = Struct('tagCABOOL', {
    cElems: T.ULONG,
    pElems: Pointer(T.VARIANT_BOOL)
});
T.CASCODE = Struct('tagCASCODE', {
    cElems: T.ULONG,
    pElems: Pointer(T.SCODE)
});
T.CAPROPVARIANT = Struct('tagCAPROPVARIANT', {
    cElems: T.ULONG,
    pElems: Pointer(T.PROPVARIANT)
});
T.CAH = Struct('tagCAH', {
    cElems: T.ULONG,
    pElems: Pointer(T.LARGE_INTEGER)
});
T.CAUH = Struct('tagCAUH', {
    cElems: T.ULONG,
    pElems: Pointer(T.ULARGE_INTEGER)
});
T.CALPSTR = Struct('tagCALPSTR', {
    cElems: T.ULONG,
    pElems: Pointer(T.LPSTR)
});
T.CALPWSTR = Struct('tagCALPWSTR', {
    cElems: T.ULONG,
    pElems: Pointer(T.LPWSTR)
});
T.CAFILETIME = Struct('tagCAFILETIME', {
    cElems: T.ULONG,
    pElems: Pointer(T.FILETIME)
});
T.CACLIPDATA = Struct('tagCACLIPDATA', {
    cElems: T.ULONG,
    pElems: Pointer(T.CLIPDATA)
});
T.CACLSID = Struct('tagCACLSID', {
    cElems: T.ULONG,
    pElems: Pointer(T.CLSID)
});
T.LPPROPVARIANT = Pointer(Struct('tagPROPVARIANT', null));
T.PROPSPEC = Struct('tagPROPSPEC', {
    ulKind: T.ULONG,
    __unnamed0: Union('', {
        propid: T.PROPID,
        lpwstr: T.LPOLESTR
    })
});
T.STATPROPSTG = Struct('tagSTATPROPSTG', {
    lpwstrName: T.LPOLESTR,
    propid: T.PROPID,
    vt: T.VARTYPE
});
T.STATPROPSETSTG = Struct('tagSTATPROPSETSTG', {
    fmtid: T.FMTID,
    clsid: T.CLSID,
    grfFlags: T.DWORD,
    mtime: T.FILETIME,
    ctime: T.FILETIME,
    atime: T.FILETIME,
    dwOSVersion: T.DWORD
});
T.IPropertyStorageVtbl = Struct('IPropertyStorageVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPropertyStorage), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPropertyStorage), 'This']])),
    ReadMultiple: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpspec'], [Pointer(T.PROPSPEC), 'rgpspec'], [Pointer(T.PROPVARIANT), 'rgpropvar']])),
    WriteMultiple: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpspec'], [Pointer(T.PROPSPEC), 'rgpspec'], [Pointer(T.PROPVARIANT), 'rgpropvar'], [T.PROPID, 'propidNameFirst']])),
    DeleteMultiple: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpspec'], [Pointer(T.PROPSPEC), 'rgpspec']])),
    ReadPropertyNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpropid'], [Pointer(T.PROPID), 'rgpropid'], [Pointer(T.LPOLESTR), 'rglpwstrName']])),
    WritePropertyNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpropid'], [Pointer(T.PROPID), 'rgpropid'], [Pointer(T.LPOLESTR), 'rglpwstrName']])),
    DeletePropertyNames: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpropid'], [Pointer(T.PROPID), 'rgpropid']])),
    Commit: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.DWORD, 'grfCommitFlags']])),
    Revert: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This']])),
    Enum: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(Pointer(T.IEnumSTATPROPSTG)), 'ppenum']])),
    SetTimes: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(T.FILETIME), 'pctime'], [Pointer(T.FILETIME), 'patime'], [Pointer(T.FILETIME), 'pmtime']])),
    SetClass: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(T.CLSID), 'clsid']])),
    Stat: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(T.STATPROPSETSTG), 'statpsstg']]))
});
T.LPPROPERTYSETSTORAGE = Pointer(T.IPropertySetStorage);
T.IPropertySetStorageVtbl = Struct('IPropertySetStorageVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IPropertySetStorage), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IPropertySetStorage), 'This']])),
    Create: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(T.FMTID), 'rfmtid'], [Pointer(T.CLSID), 'pclsid'], [T.DWORD, 'grfFlags'], [T.DWORD, 'grfMode'], [Pointer(Pointer(T.IPropertyStorage)), 'ppprstg']])),
    Open: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(T.FMTID), 'rfmtid'], [T.DWORD, 'grfMode'], [Pointer(Pointer(T.IPropertyStorage)), 'ppprstg']])),
    Delete: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(T.FMTID), 'rfmtid']])),
    Enum: Pointer(Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(Pointer(T.IEnumSTATPROPSETSTG)), 'ppenum']]))
});
T.LPENUMSTATPROPSTG = Pointer(T.IEnumSTATPROPSTG);
T.IEnumSTATPROPSTGVtbl = Struct('IEnumSTATPROPSTGVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumSTATPROPSTG), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumSTATPROPSTG), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATPROPSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [Pointer(Pointer(T.IEnumSTATPROPSTG)), 'ppenum']]))
});
T.LPENUMSTATPROPSETSTG = Pointer(T.IEnumSTATPROPSETSTG);
T.IEnumSTATPROPSETSTGVtbl = Struct('IEnumSTATPROPSETSTGVtbl', {
    QueryInterface: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']])),
    AddRef: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumSTATPROPSETSTG), 'This']])),
    Release: Pointer(Fn(T.ULONG, [[Pointer(T.IEnumSTATPROPSETSTG), 'This']])),
    Next: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATPROPSETSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']])),
    Skip: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [T.ULONG, 'celt']])),
    Reset: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This']])),
    Clone: Pointer(Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [Pointer(Pointer(T.IEnumSTATPROPSETSTG)), 'ppenum']]))
});
T.UDATE = Struct('', {
    st: T.SYSTEMTIME,
    wDayOfYear: T.USHORT
});
T.NUMPARSE = Struct('', {
    cDig: T.INT,
    dwInFlags: T.ULONG,
    dwOutFlags: T.ULONG,
    cchUsed: T.INT,
    nBaseShift: T.INT,
    nPwr10: T.INT
});
T.PARAMDATA = Struct('tagPARAMDATA', {
    szName: Pointer(T.OLECHAR),
    vt: T.VARTYPE
});
T.LPPARAMDATA = Pointer(Struct('tagPARAMDATA', {
    szName: Pointer(T.OLECHAR),
    vt: T.VARTYPE
}));
T.METHODDATA = Struct('tagMETHODDATA', {
    szName: Pointer(T.OLECHAR),
    ppdata: Pointer(T.PARAMDATA),
    dispid: T.DISPID,
    iMeth: T.UINT,
    cc: T.CALLCONV,
    cArgs: T.UINT,
    wFlags: T.WORD,
    vtReturn: T.VARTYPE
});
T.LPMETHODDATA = Pointer(Struct('tagMETHODDATA', {
    szName: Pointer(T.OLECHAR),
    ppdata: Pointer(T.PARAMDATA),
    dispid: T.DISPID,
    iMeth: T.UINT,
    cc: T.CALLCONV,
    cArgs: T.UINT,
    wFlags: T.WORD,
    vtReturn: T.VARTYPE
}));
T.INTERFACEDATA = Struct('tagINTERFACEDATA', {
    pmethdata: Pointer(T.METHODDATA),
    cMembers: T.UINT
});
T.LPINTERFACEDATA = Pointer(Struct('tagINTERFACEDATA', {
    pmethdata: Pointer(T.METHODDATA),
    cMembers: T.UINT
}));
T.REGKIND = Enum('REGKIND_NONE', {
    REGKIND_DEFAULT: 0,
    REGKIND_REGISTER: 1,
    REGKIND_NONE: 2
});
T.LPOLESTREAM = Pointer(Struct('_OLESTREAM', null));
T.OLESTREAMVTBL = Struct('_OLESTREAMVTBL', {
    Get: Pointer(Fn(T.DWORD, [[T.LPOLESTREAM], [T.LPSTR], [T.DWORD]])),
    Put: Pointer(Fn(T.DWORD, [[T.LPOLESTREAM], [T.LPSTR], [T.DWORD]]))
});
T.LPOLESTREAMVTBL = Pointer(T.OLESTREAMVTBL);
T.OLESTREAM = Struct('_OLESTREAM', {
    lpstbl: T.LPOLESTREAMVTBL
});
T.HPROPSHEETPAGE = Pointer(Struct('_PSP', null));
T.LPFNPSPCALLBACKA = Pointer(Fn(T.UINT, [[T.HWND], [T.UINT], [Pointer(Struct('_PROPSHEETPAGEA', null))]]));
T.LPFNPSPCALLBACKW = Pointer(Fn(T.UINT, [[T.HWND], [T.UINT], [Pointer(Struct('_PROPSHEETPAGEW', null))]]));
T.PFNPROPSHEETCALLBACK = Pointer(Fn(T.INT, [[T.HWND], [T.UINT], [T.LPARAM]]));
T.LPFNADDPROPSHEETPAGE = Pointer(Fn(T.BOOL, [[T.HPROPSHEETPAGE], [T.LPARAM]]));
T.LPFNADDPROPSHEETPAGES = Pointer(Fn(T.BOOL, [[T.LPVOID], [T.LPFNADDPROPSHEETPAGE], [T.LPARAM]]));
T.PROPSHEETPAGEA = Struct('_PROPSHEETPAGEA', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    hInstance: T.HINSTANCE,
    __unnamed0: Union('', {
        pszTemplate: T.LPCSTR,
        pResource: T.LPCDLGTEMPLATEA
    }),
    __unnamed1: Union('', {
        hIcon: T.HICON,
        pszIcon: T.LPCSTR
    }),
    pszTitle: T.LPCSTR,
    pfnDlgProc: T.DLGPROC,
    lParam: T.LPARAM,
    pfnCallback: T.LPFNPSPCALLBACKA,
    pcRefParent: Pointer(T.UINT),
    pszHeaderTitle: T.LPCSTR,
    pszHeaderSubTitle: T.LPCSTR
});
T.LPPROPSHEETPAGEA = Pointer(Struct('_PROPSHEETPAGEA', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    hInstance: T.HINSTANCE,
    __unnamed0: Union('', {
        pszTemplate: T.LPCSTR,
        pResource: T.LPCDLGTEMPLATEA
    }),
    __unnamed1: Union('', {
        hIcon: T.HICON,
        pszIcon: T.LPCSTR
    }),
    pszTitle: T.LPCSTR,
    pfnDlgProc: T.DLGPROC,
    lParam: T.LPARAM,
    pfnCallback: T.LPFNPSPCALLBACKA,
    pcRefParent: Pointer(T.UINT),
    pszHeaderTitle: T.LPCSTR,
    pszHeaderSubTitle: T.LPCSTR
}));
T.LPCPROPSHEETPAGEA = Pointer(T.PROPSHEETPAGEA);
T.PROPSHEETPAGEW = Struct('_PROPSHEETPAGEW', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    hInstance: T.HINSTANCE,
    __unnamed0: Union('', {
        pszTemplate: T.LPCWSTR,
        pResource: T.LPCDLGTEMPLATEW
    }),
    __unnamed1: Union('', {
        hIcon: T.HICON,
        pszIcon: T.LPCWSTR
    }),
    pszTitle: T.LPCWSTR,
    pfnDlgProc: T.DLGPROC,
    lParam: T.LPARAM,
    pfnCallback: T.LPFNPSPCALLBACKW,
    pcRefParent: Pointer(T.UINT),
    pszHeaderTitle: T.LPCWSTR,
    pszHeaderSubTitle: T.LPCWSTR
});
T.LPPROPSHEETPAGEW = Pointer(Struct('_PROPSHEETPAGEW', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    hInstance: T.HINSTANCE,
    __unnamed0: Union('', {
        pszTemplate: T.LPCWSTR,
        pResource: T.LPCDLGTEMPLATEW
    }),
    __unnamed1: Union('', {
        hIcon: T.HICON,
        pszIcon: T.LPCWSTR
    }),
    pszTitle: T.LPCWSTR,
    pfnDlgProc: T.DLGPROC,
    lParam: T.LPARAM,
    pfnCallback: T.LPFNPSPCALLBACKW,
    pcRefParent: Pointer(T.UINT),
    pszHeaderTitle: T.LPCWSTR,
    pszHeaderSubTitle: T.LPCWSTR
}));
T.LPCPROPSHEETPAGEW = Pointer(T.PROPSHEETPAGEW);
T.PROPSHEETHEADERA = Struct('_PROPSHEETHEADERA', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    hwndParent: T.HWND,
    hInstance: T.HINSTANCE,
    __unnamed0: Union('', {
        hIcon: T.HICON,
        pszIcon: T.LPCSTR
    }),
    pszCaption: T.LPCSTR,
    nPages: T.UINT,
    __unnamed1: Union('', {
        nStartPage: T.UINT,
        pStartPage: T.LPCSTR
    }),
    __unnamed2: Union('', {
        ppsp: T.LPCPROPSHEETPAGEA,
        phpage: Pointer(T.HPROPSHEETPAGE)
    }),
    pfnCallback: T.PFNPROPSHEETCALLBACK,
    __unnamed3: Union('', {
        hbmWatermark: T.HBITMAP,
        pszbmWatermark: T.LPCSTR
    }),
    hplWatermark: T.HPALETTE,
    __unnamed4: Union('', {
        hbmHeader: T.HBITMAP,
        pszbmHeader: T.LPCSTR
    })
});
T.LPPROPSHEETHEADERA = Pointer(Struct('_PROPSHEETHEADERA', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    hwndParent: T.HWND,
    hInstance: T.HINSTANCE,
    __unnamed0: Union('', {
        hIcon: T.HICON,
        pszIcon: T.LPCSTR
    }),
    pszCaption: T.LPCSTR,
    nPages: T.UINT,
    __unnamed1: Union('', {
        nStartPage: T.UINT,
        pStartPage: T.LPCSTR
    }),
    __unnamed2: Union('', {
        ppsp: T.LPCPROPSHEETPAGEA,
        phpage: Pointer(T.HPROPSHEETPAGE)
    }),
    pfnCallback: T.PFNPROPSHEETCALLBACK,
    __unnamed3: Union('', {
        hbmWatermark: T.HBITMAP,
        pszbmWatermark: T.LPCSTR
    }),
    hplWatermark: T.HPALETTE,
    __unnamed4: Union('', {
        hbmHeader: T.HBITMAP,
        pszbmHeader: T.LPCSTR
    })
}));
T.LPCPROPSHEETHEADERA = Pointer(T.PROPSHEETHEADERA);
T.PROPSHEETHEADERW = Struct('_PROPSHEETHEADERW', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    hwndParent: T.HWND,
    hInstance: T.HINSTANCE,
    __unnamed0: Union('', {
        hIcon: T.HICON,
        pszIcon: T.LPCWSTR
    }),
    pszCaption: T.LPCWSTR,
    nPages: T.UINT,
    __unnamed1: Union('', {
        nStartPage: T.UINT,
        pStartPage: T.LPCWSTR
    }),
    __unnamed2: Union('', {
        ppsp: T.LPCPROPSHEETPAGEW,
        phpage: Pointer(T.HPROPSHEETPAGE)
    }),
    pfnCallback: T.PFNPROPSHEETCALLBACK,
    __unnamed3: Union('', {
        hbmWatermark: T.HBITMAP,
        pszbmWatermark: T.LPCWSTR
    }),
    hplWatermark: T.HPALETTE,
    __unnamed4: Union('', {
        hbmHeader: T.HBITMAP,
        pszbmHeader: T.LPCWSTR
    })
});
T.LPPROPSHEETHEADERW = Pointer(Struct('_PROPSHEETHEADERW', {
    dwSize: T.DWORD,
    dwFlags: T.DWORD,
    hwndParent: T.HWND,
    hInstance: T.HINSTANCE,
    __unnamed0: Union('', {
        hIcon: T.HICON,
        pszIcon: T.LPCWSTR
    }),
    pszCaption: T.LPCWSTR,
    nPages: T.UINT,
    __unnamed1: Union('', {
        nStartPage: T.UINT,
        pStartPage: T.LPCWSTR
    }),
    __unnamed2: Union('', {
        ppsp: T.LPCPROPSHEETPAGEW,
        phpage: Pointer(T.HPROPSHEETPAGE)
    }),
    pfnCallback: T.PFNPROPSHEETCALLBACK,
    __unnamed3: Union('', {
        hbmWatermark: T.HBITMAP,
        pszbmWatermark: T.LPCWSTR
    }),
    hplWatermark: T.HPALETTE,
    __unnamed4: Union('', {
        hbmHeader: T.HBITMAP,
        pszbmHeader: T.LPCWSTR
    })
}));
T.LPCPROPSHEETHEADERW = Pointer(T.PROPSHEETHEADERW);
T.PROPSHEETPAGE = T.PROPSHEETPAGEA;
T.LPPROPSHEETPAGE = T.LPPROPSHEETPAGEA;
T.LPCPROPSHEETPAGE = T.LPCPROPSHEETPAGEA;
T.PROPSHEETHEADER = T.PROPSHEETHEADERA;
T.LPPROPSHEETHEADER = T.LPPROPSHEETHEADERA;
T.LPCPROPSHEETHEADER = T.LPCPROPSHEETHEADERA;
T.LPFNPSPCALLBACK = T.LPFNPSPCALLBACKA;
T.PSHNOTIFY = Struct('_PSHNOTIFY', {
    hdr: T.NMHDR,
    lParam: T.LPARAM
});
T.LPPSHNOTIFY = Pointer(Struct('_PSHNOTIFY', {
    hdr: T.NMHDR,
    lParam: T.LPARAM
}));
T.LPOFNHOOKPROC = Pointer(Fn(T.UINT_PTR, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]));
T.OPENFILENAMEA = Struct('tagOFNA', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpstrFilter: T.LPCSTR,
    lpstrCustomFilter: T.LPSTR,
    nMaxCustFilter: T.DWORD,
    nFilterIndex: T.DWORD,
    lpstrFile: T.LPSTR,
    nMaxFile: T.DWORD,
    lpstrFileTitle: T.LPSTR,
    nMaxFileTitle: T.DWORD,
    lpstrInitialDir: T.LPCSTR,
    lpstrTitle: T.LPCSTR,
    Flags: T.DWORD,
    nFileOffset: T.WORD,
    nFileExtension: T.WORD,
    lpstrDefExt: T.LPCSTR,
    lCustData: T.LPARAM,
    lpfnHook: T.LPOFNHOOKPROC,
    lpTemplateName: T.LPCSTR
});
T.LPOPENFILENAMEA = Pointer(Struct('tagOFNA', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpstrFilter: T.LPCSTR,
    lpstrCustomFilter: T.LPSTR,
    nMaxCustFilter: T.DWORD,
    nFilterIndex: T.DWORD,
    lpstrFile: T.LPSTR,
    nMaxFile: T.DWORD,
    lpstrFileTitle: T.LPSTR,
    nMaxFileTitle: T.DWORD,
    lpstrInitialDir: T.LPCSTR,
    lpstrTitle: T.LPCSTR,
    Flags: T.DWORD,
    nFileOffset: T.WORD,
    nFileExtension: T.WORD,
    lpstrDefExt: T.LPCSTR,
    lCustData: T.LPARAM,
    lpfnHook: T.LPOFNHOOKPROC,
    lpTemplateName: T.LPCSTR
}));
T.OPENFILENAMEW = Struct('tagOFNW', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpstrFilter: T.LPCWSTR,
    lpstrCustomFilter: T.LPWSTR,
    nMaxCustFilter: T.DWORD,
    nFilterIndex: T.DWORD,
    lpstrFile: T.LPWSTR,
    nMaxFile: T.DWORD,
    lpstrFileTitle: T.LPWSTR,
    nMaxFileTitle: T.DWORD,
    lpstrInitialDir: T.LPCWSTR,
    lpstrTitle: T.LPCWSTR,
    Flags: T.DWORD,
    nFileOffset: T.WORD,
    nFileExtension: T.WORD,
    lpstrDefExt: T.LPCWSTR,
    lCustData: T.LPARAM,
    lpfnHook: T.LPOFNHOOKPROC,
    lpTemplateName: T.LPCWSTR
});
T.LPOPENFILENAMEW = Pointer(Struct('tagOFNW', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    lpstrFilter: T.LPCWSTR,
    lpstrCustomFilter: T.LPWSTR,
    nMaxCustFilter: T.DWORD,
    nFilterIndex: T.DWORD,
    lpstrFile: T.LPWSTR,
    nMaxFile: T.DWORD,
    lpstrFileTitle: T.LPWSTR,
    nMaxFileTitle: T.DWORD,
    lpstrInitialDir: T.LPCWSTR,
    lpstrTitle: T.LPCWSTR,
    Flags: T.DWORD,
    nFileOffset: T.WORD,
    nFileExtension: T.WORD,
    lpstrDefExt: T.LPCWSTR,
    lCustData: T.LPARAM,
    lpfnHook: T.LPOFNHOOKPROC,
    lpTemplateName: T.LPCWSTR
}));
T.OPENFILENAME = T.OPENFILENAMEA;
T.LPOPENFILENAME = T.LPOPENFILENAMEA;
T.OFNOTIFYA = Struct('', {
    hdr: T.NMHDR,
    lpOFN: T.LPOPENFILENAMEA,
    pszFile: T.LPSTR
});
T.LPOFNOTIFYA = Pointer(Struct('', {
    hdr: T.NMHDR,
    lpOFN: T.LPOPENFILENAMEA,
    pszFile: T.LPSTR
}));
T.OFNOTIFYW = Struct('', {
    hdr: T.NMHDR,
    lpOFN: T.LPOPENFILENAMEW,
    pszFile: T.LPWSTR
});
T.LPOFNOTIFYW = Pointer(Struct('', {
    hdr: T.NMHDR,
    lpOFN: T.LPOPENFILENAMEW,
    pszFile: T.LPWSTR
}));
T.OFNOTIFY = T.OFNOTIFYA;
T.LPOFNOTIFY = T.LPOFNOTIFYA;
T.OFNOTIFYEXA = Struct('_OFNOTIFYEXA', {
    hdr: T.NMHDR,
    lpOFN: T.LPOPENFILENAMEA,
    psf: T.LPVOID,
    pidl: T.LPVOID
});
T.LPOFNOTIFYEXA = Pointer(Struct('_OFNOTIFYEXA', {
    hdr: T.NMHDR,
    lpOFN: T.LPOPENFILENAMEA,
    psf: T.LPVOID,
    pidl: T.LPVOID
}));
T.OFNOTIFYEXW = Struct('_OFNOTIFYEXW', {
    hdr: T.NMHDR,
    lpOFN: T.LPOPENFILENAMEW,
    psf: T.LPVOID,
    pidl: T.LPVOID
});
T.LPOFNOTIFYEXW = Pointer(Struct('_OFNOTIFYEXW', {
    hdr: T.NMHDR,
    lpOFN: T.LPOPENFILENAMEW,
    psf: T.LPVOID,
    pidl: T.LPVOID
}));
T.OFNOTIFYEX = T.OFNOTIFYEXA;
T.LPOFNOTIFYEX = T.LPOFNOTIFYEXA;
T.LPCCHOOKPROC = Pointer(Fn(T.UINT_PTR, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]));
T.CHOOSECOLORA = Struct('', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HWND,
    rgbResult: T.DWORD,
    lpCustColors: T.LPDWORD,
    Flags: T.DWORD,
    lCustData: T.DWORD,
    lpfnHook: T.LPCCHOOKPROC,
    lpTemplateName: T.LPCSTR
});
T.LPCHOOSECOLORA = Pointer(T.CHOOSECOLORA);
T.CHOOSECOLORW = Struct('', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HWND,
    rgbResult: T.DWORD,
    lpCustColors: T.LPDWORD,
    Flags: T.DWORD,
    lCustData: T.DWORD,
    lpfnHook: T.LPCCHOOKPROC,
    lpTemplateName: T.LPCWSTR
});
T.LPCHOOSECOLORW = Pointer(T.CHOOSECOLORW);
T.CHOOSECOLOR = T.CHOOSECOLORA;
T.LPCHOOSECOLOR = T.LPCHOOSECOLORA;
T.LPFRHOOKPROC = Pointer(Fn(T.UINT_PTR, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]));
T.FINDREPLACEA = Struct('', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    Flags: T.DWORD,
    lpstrFindWhat: T.LPSTR,
    lpstrReplaceWith: T.LPSTR,
    wFindWhatLen: T.WORD,
    wReplaceWithLen: T.WORD,
    lCustData: T.LPARAM,
    lpfnHook: T.LPFRHOOKPROC,
    lpTemplateName: T.LPCSTR
});
T.LPFINDREPLACEA = Pointer(Struct('', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    Flags: T.DWORD,
    lpstrFindWhat: T.LPSTR,
    lpstrReplaceWith: T.LPSTR,
    wFindWhatLen: T.WORD,
    wReplaceWithLen: T.WORD,
    lCustData: T.LPARAM,
    lpfnHook: T.LPFRHOOKPROC,
    lpTemplateName: T.LPCSTR
}));
T.FINDREPLACEW = Struct('', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    Flags: T.DWORD,
    lpstrFindWhat: T.LPWSTR,
    lpstrReplaceWith: T.LPWSTR,
    wFindWhatLen: T.WORD,
    wReplaceWithLen: T.WORD,
    lCustData: T.LPARAM,
    lpfnHook: T.LPFRHOOKPROC,
    lpTemplateName: T.LPCWSTR
});
T.LPFINDREPLACEW = Pointer(Struct('', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hInstance: T.HINSTANCE,
    Flags: T.DWORD,
    lpstrFindWhat: T.LPWSTR,
    lpstrReplaceWith: T.LPWSTR,
    wFindWhatLen: T.WORD,
    wReplaceWithLen: T.WORD,
    lCustData: T.LPARAM,
    lpfnHook: T.LPFRHOOKPROC,
    lpTemplateName: T.LPCWSTR
}));
T.FINDREPLACE = T.FINDREPLACEA;
T.LPFINDREPLACE = T.LPFINDREPLACEA;
T.LPCFHOOKPROC = Pointer(Fn(T.UINT_PTR, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]));
T.CHOOSEFONTA = Struct('tagCHOOSEFONTA', {
    lStructSize: T.UINT,
    hwndOwner: T.HWND,
    hDC: T.HDC,
    lpLogFont: T.LPLOGFONTA,
    iPointSize: T.INT,
    Flags: T.DWORD,
    rgbColors: T.COLORREF,
    lCustData: T.LPARAM,
    lpfnHook: T.LPCFHOOKPROC,
    lpTemplateName: T.LPCSTR,
    hInstance: T.HINSTANCE,
    lpszStyle: T.LPSTR,
    nFontType: T.WORD,
    ___MISSING_ALIGNMENT__: T.WORD,
    nSizeMin: T.INT,
    nSizeMax: T.INT
});
T.LPCHOOSEFONTA = Pointer(Struct('tagCHOOSEFONTA', {
    lStructSize: T.UINT,
    hwndOwner: T.HWND,
    hDC: T.HDC,
    lpLogFont: T.LPLOGFONTA,
    iPointSize: T.INT,
    Flags: T.DWORD,
    rgbColors: T.COLORREF,
    lCustData: T.LPARAM,
    lpfnHook: T.LPCFHOOKPROC,
    lpTemplateName: T.LPCSTR,
    hInstance: T.HINSTANCE,
    lpszStyle: T.LPSTR,
    nFontType: T.WORD,
    ___MISSING_ALIGNMENT__: T.WORD,
    nSizeMin: T.INT,
    nSizeMax: T.INT
}));
T.CHOOSEFONTW = Struct('tagCHOOSEFONTW', {
    lStructSize: T.UINT,
    hwndOwner: T.HWND,
    hDC: T.HDC,
    lpLogFont: T.LPLOGFONTW,
    iPointSize: T.INT,
    Flags: T.DWORD,
    rgbColors: T.COLORREF,
    lCustData: T.LPARAM,
    lpfnHook: T.LPCFHOOKPROC,
    lpTemplateName: T.LPCWSTR,
    hInstance: T.HINSTANCE,
    lpszStyle: T.LPWSTR,
    nFontType: T.WORD,
    ___MISSING_ALIGNMENT__: T.WORD,
    nSizeMin: T.INT,
    nSizeMax: T.INT
});
T.LPCHOOSEFONTW = Pointer(Struct('tagCHOOSEFONTW', {
    lStructSize: T.UINT,
    hwndOwner: T.HWND,
    hDC: T.HDC,
    lpLogFont: T.LPLOGFONTW,
    iPointSize: T.INT,
    Flags: T.DWORD,
    rgbColors: T.COLORREF,
    lCustData: T.LPARAM,
    lpfnHook: T.LPCFHOOKPROC,
    lpTemplateName: T.LPCWSTR,
    hInstance: T.HINSTANCE,
    lpszStyle: T.LPWSTR,
    nFontType: T.WORD,
    ___MISSING_ALIGNMENT__: T.WORD,
    nSizeMin: T.INT,
    nSizeMax: T.INT
}));
T.CHOOSEFONT = T.CHOOSEFONTA;
T.LPCHOOSEFONT = T.LPCHOOSEFONTA;
T.LPPRINTHOOKPROC = Pointer(Fn(T.UINT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]));
T.LPSETUPHOOKPROC = Pointer(Fn(T.UINT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]));
T.PRINTDLGA = Struct('tagPDA', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    hDC: T.HDC,
    Flags: T.DWORD,
    nFromPage: T.WORD,
    nToPage: T.WORD,
    nMinPage: T.WORD,
    nMaxPage: T.WORD,
    nCopies: T.WORD,
    hInstance: T.HINSTANCE,
    lCustData: T.LPARAM,
    lpfnPrintHook: T.LPPRINTHOOKPROC,
    lpfnSetupHook: T.LPSETUPHOOKPROC,
    lpPrintTemplateName: T.LPCSTR,
    lpSetupTemplateName: T.LPCSTR,
    hPrintTemplate: T.HGLOBAL,
    hSetupTemplate: T.HGLOBAL
});
T.LPPRINTDLGA = Pointer(Struct('tagPDA', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    hDC: T.HDC,
    Flags: T.DWORD,
    nFromPage: T.WORD,
    nToPage: T.WORD,
    nMinPage: T.WORD,
    nMaxPage: T.WORD,
    nCopies: T.WORD,
    hInstance: T.HINSTANCE,
    lCustData: T.LPARAM,
    lpfnPrintHook: T.LPPRINTHOOKPROC,
    lpfnSetupHook: T.LPSETUPHOOKPROC,
    lpPrintTemplateName: T.LPCSTR,
    lpSetupTemplateName: T.LPCSTR,
    hPrintTemplate: T.HGLOBAL,
    hSetupTemplate: T.HGLOBAL
}));
T.PRINTDLGW = Struct('tagPDW', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    hDC: T.HDC,
    Flags: T.DWORD,
    nFromPage: T.WORD,
    nToPage: T.WORD,
    nMinPage: T.WORD,
    nMaxPage: T.WORD,
    nCopies: T.WORD,
    hInstance: T.HINSTANCE,
    lCustData: T.LPARAM,
    lpfnPrintHook: T.LPPRINTHOOKPROC,
    lpfnSetupHook: T.LPSETUPHOOKPROC,
    lpPrintTemplateName: T.LPCWSTR,
    lpSetupTemplateName: T.LPCWSTR,
    hPrintTemplate: T.HGLOBAL,
    hSetupTemplate: T.HGLOBAL
});
T.LPPRINTDLGW = Pointer(Struct('tagPDW', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    hDC: T.HDC,
    Flags: T.DWORD,
    nFromPage: T.WORD,
    nToPage: T.WORD,
    nMinPage: T.WORD,
    nMaxPage: T.WORD,
    nCopies: T.WORD,
    hInstance: T.HINSTANCE,
    lCustData: T.LPARAM,
    lpfnPrintHook: T.LPPRINTHOOKPROC,
    lpfnSetupHook: T.LPSETUPHOOKPROC,
    lpPrintTemplateName: T.LPCWSTR,
    lpSetupTemplateName: T.LPCWSTR,
    hPrintTemplate: T.HGLOBAL,
    hSetupTemplate: T.HGLOBAL
}));
T.PRINTDLG = T.PRINTDLGA;
T.LPPRINTDLG = T.LPPRINTDLGA;
T.DEVNAMES = Struct('', {
    wDriverOffset: T.WORD,
    wDeviceOffset: T.WORD,
    wOutputOffset: T.WORD,
    wDefault: T.WORD
});
T.LPDEVNAMES = Pointer(T.DEVNAMES);
T.LPPAGEPAINTHOOK = Pointer(Fn(T.UINT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]));
T.LPPAGESETUPHOOK = Pointer(Fn(T.UINT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]));
T.PAGESETUPDLGA = Struct('tagPSDA', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    Flags: T.DWORD,
    ptPaperSize: T.POINT,
    rtMinMargin: T.RECT,
    rtMargin: T.RECT,
    hInstance: T.HINSTANCE,
    lCustData: T.LPARAM,
    lpfnPageSetupHook: T.LPPAGESETUPHOOK,
    lpfnPagePaintHook: T.LPPAGEPAINTHOOK,
    lpPageSetupTemplateName: T.LPCSTR,
    hPageSetupTemplate: T.HGLOBAL
});
T.LPPAGESETUPDLGA = Pointer(Struct('tagPSDA', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    Flags: T.DWORD,
    ptPaperSize: T.POINT,
    rtMinMargin: T.RECT,
    rtMargin: T.RECT,
    hInstance: T.HINSTANCE,
    lCustData: T.LPARAM,
    lpfnPageSetupHook: T.LPPAGESETUPHOOK,
    lpfnPagePaintHook: T.LPPAGEPAINTHOOK,
    lpPageSetupTemplateName: T.LPCSTR,
    hPageSetupTemplate: T.HGLOBAL
}));
T.PAGESETUPDLGW = Struct('tagPSDW', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    Flags: T.DWORD,
    ptPaperSize: T.POINT,
    rtMinMargin: T.RECT,
    rtMargin: T.RECT,
    hInstance: T.HINSTANCE,
    lCustData: T.LPARAM,
    lpfnPageSetupHook: T.LPPAGESETUPHOOK,
    lpfnPagePaintHook: T.LPPAGEPAINTHOOK,
    lpPageSetupTemplateName: T.LPCWSTR,
    hPageSetupTemplate: T.HGLOBAL
});
T.LPPAGESETUPDLGW = Pointer(Struct('tagPSDW', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    Flags: T.DWORD,
    ptPaperSize: T.POINT,
    rtMinMargin: T.RECT,
    rtMargin: T.RECT,
    hInstance: T.HINSTANCE,
    lCustData: T.LPARAM,
    lpfnPageSetupHook: T.LPPAGESETUPHOOK,
    lpfnPagePaintHook: T.LPPAGEPAINTHOOK,
    lpPageSetupTemplateName: T.LPCWSTR,
    hPageSetupTemplate: T.HGLOBAL
}));
T.PAGESETUPDLG = T.PAGESETUPDLGA;
T.LPPAGESETUPDLG = T.LPPAGESETUPDLGA;
T.PRINTPAGERANGE = Struct('tagPRINTPAGERANGE', {
    nFromPage: T.DWORD,
    nToPage: T.DWORD
});
T.LPPRINTPAGERANGE = Pointer(Struct('tagPRINTPAGERANGE', {
    nFromPage: T.DWORD,
    nToPage: T.DWORD
}));
T.PRINTDLGEXA = Struct('tagPDEXA', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    hDC: T.HDC,
    Flags: T.DWORD,
    Flags2: T.DWORD,
    ExclusionFlags: T.DWORD,
    nPageRanges: T.DWORD,
    nMaxPageRanges: T.DWORD,
    lpPageRanges: T.LPPRINTPAGERANGE,
    nMinPage: T.DWORD,
    nMaxPage: T.DWORD,
    nCopies: T.DWORD,
    hInstance: T.HINSTANCE,
    lpPrintTemplateName: T.LPCSTR,
    lpCallback: Pointer(null),
    nPropertyPages: T.DWORD,
    lphPropertyPages: Pointer(T.HPROPSHEETPAGE),
    nStartPage: T.DWORD,
    dwResultAction: T.DWORD
});
T.LPPRINTDLGEXA = Pointer(Struct('tagPDEXA', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    hDC: T.HDC,
    Flags: T.DWORD,
    Flags2: T.DWORD,
    ExclusionFlags: T.DWORD,
    nPageRanges: T.DWORD,
    nMaxPageRanges: T.DWORD,
    lpPageRanges: T.LPPRINTPAGERANGE,
    nMinPage: T.DWORD,
    nMaxPage: T.DWORD,
    nCopies: T.DWORD,
    hInstance: T.HINSTANCE,
    lpPrintTemplateName: T.LPCSTR,
    lpCallback: Pointer(null),
    nPropertyPages: T.DWORD,
    lphPropertyPages: Pointer(T.HPROPSHEETPAGE),
    nStartPage: T.DWORD,
    dwResultAction: T.DWORD
}));
T.PRINTDLGEXW = Struct('tagPDEXW', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    hDC: T.HDC,
    Flags: T.DWORD,
    Flags2: T.DWORD,
    ExclusionFlags: T.DWORD,
    nPageRanges: T.DWORD,
    nMaxPageRanges: T.DWORD,
    lpPageRanges: T.LPPRINTPAGERANGE,
    nMinPage: T.DWORD,
    nMaxPage: T.DWORD,
    nCopies: T.DWORD,
    hInstance: T.HINSTANCE,
    lpPrintTemplateName: T.LPCWSTR,
    lpCallback: Pointer(null),
    nPropertyPages: T.DWORD,
    lphPropertyPages: Pointer(T.HPROPSHEETPAGE),
    nStartPage: T.DWORD,
    dwResultAction: T.DWORD
});
T.LPPRINTDLGEXW = Pointer(Struct('tagPDEXW', {
    lStructSize: T.DWORD,
    hwndOwner: T.HWND,
    hDevMode: T.HGLOBAL,
    hDevNames: T.HGLOBAL,
    hDC: T.HDC,
    Flags: T.DWORD,
    Flags2: T.DWORD,
    ExclusionFlags: T.DWORD,
    nPageRanges: T.DWORD,
    nMaxPageRanges: T.DWORD,
    lpPageRanges: T.LPPRINTPAGERANGE,
    nMinPage: T.DWORD,
    nMaxPage: T.DWORD,
    nCopies: T.DWORD,
    hInstance: T.HINSTANCE,
    lpPrintTemplateName: T.LPCWSTR,
    lpCallback: Pointer(null),
    nPropertyPages: T.DWORD,
    lphPropertyPages: Pointer(T.HPROPSHEETPAGE),
    nStartPage: T.DWORD,
    dwResultAction: T.DWORD
}));
T.PRINTDLGEX = T.PRINTDLGEXA;
T.LPPRINTDLGEX = T.LPPRINTDLGEXA;
T.SC_HANDLE = Pointer(Struct('SC_HANDLE__', {
    unused: T.i32
}));
T.LPSC_HANDLE = Pointer(T.SC_HANDLE);
T.SERVICE_STATUS_HANDLE = Pointer(Struct('SERVICE_STATUS_HANDLE__', {
    unused: T.i32
}));
T.SC_LOCK = T.LPVOID;
T.SERVICE_STATUS = Struct('_SERVICE_STATUS', {
    dwServiceType: T.DWORD,
    dwCurrentState: T.DWORD,
    dwControlsAccepted: T.DWORD,
    dwWin32ExitCode: T.DWORD,
    dwServiceSpecificExitCode: T.DWORD,
    dwCheckPoint: T.DWORD,
    dwWaitHint: T.DWORD
});
T.LPSERVICE_STATUS = Pointer(Struct('_SERVICE_STATUS', {
    dwServiceType: T.DWORD,
    dwCurrentState: T.DWORD,
    dwControlsAccepted: T.DWORD,
    dwWin32ExitCode: T.DWORD,
    dwServiceSpecificExitCode: T.DWORD,
    dwCheckPoint: T.DWORD,
    dwWaitHint: T.DWORD
}));
T.SERVICE_STATUS_PROCESS = Struct('_SERVICE_STATUS_PROCESS', {
    dwServiceType: T.DWORD,
    dwCurrentState: T.DWORD,
    dwControlsAccepted: T.DWORD,
    dwWin32ExitCode: T.DWORD,
    dwServiceSpecificExitCode: T.DWORD,
    dwCheckPoint: T.DWORD,
    dwWaitHint: T.DWORD,
    dwProcessId: T.DWORD,
    dwServiceFlags: T.DWORD
});
T.LPSERVICE_STATUS_PROCESS = Pointer(Struct('_SERVICE_STATUS_PROCESS', {
    dwServiceType: T.DWORD,
    dwCurrentState: T.DWORD,
    dwControlsAccepted: T.DWORD,
    dwWin32ExitCode: T.DWORD,
    dwServiceSpecificExitCode: T.DWORD,
    dwCheckPoint: T.DWORD,
    dwWaitHint: T.DWORD,
    dwProcessId: T.DWORD,
    dwServiceFlags: T.DWORD
}));
T.SC_STATUS_TYPE = Enum('SC_STATUS_PROCESS_INFO', {
    SC_STATUS_PROCESS_INFO: 0
});
T.LPSERVICE_MAIN_FUNCTIONA = Pointer(Fn(null, [[T.DWORD], [Pointer(T.LPSTR)]]));
T.LPSERVICE_MAIN_FUNCTIONW = Pointer(Fn(null, [[T.DWORD], [Pointer(T.LPWSTR)]]));
T.LPSERVICE_MAIN_FUNCTION = T.LPSERVICE_MAIN_FUNCTIONA;
T.SERVICE_TABLE_ENTRYA = Struct('_SERVICE_TABLE_ENTRYA', {
    lpServiceName: T.LPSTR,
    lpServiceProc: T.LPSERVICE_MAIN_FUNCTIONA
});
T.LPSERVICE_TABLE_ENTRYA = Pointer(Struct('_SERVICE_TABLE_ENTRYA', {
    lpServiceName: T.LPSTR,
    lpServiceProc: T.LPSERVICE_MAIN_FUNCTIONA
}));
T.SERVICE_TABLE_ENTRYW = Struct('_SERVICE_TABLE_ENTRYW', {
    lpServiceName: T.LPWSTR,
    lpServiceProc: T.LPSERVICE_MAIN_FUNCTIONW
});
T.LPSERVICE_TABLE_ENTRYW = Pointer(Struct('_SERVICE_TABLE_ENTRYW', {
    lpServiceName: T.LPWSTR,
    lpServiceProc: T.LPSERVICE_MAIN_FUNCTIONW
}));
T.SERVICE_TABLE_ENTRY = T.SERVICE_TABLE_ENTRYA;
T.LPSERVICE_TABLE_ENTRY = T.LPSERVICE_TABLE_ENTRYA;
T.ENUM_SERVICE_STATUSA = Struct('_ENUM_SERVICE_STATUSA', {
    lpServiceName: T.LPSTR,
    lpDisplayName: T.LPSTR,
    ServiceStatus: T.SERVICE_STATUS
});
T.LPENUM_SERVICE_STATUSA = Pointer(Struct('_ENUM_SERVICE_STATUSA', {
    lpServiceName: T.LPSTR,
    lpDisplayName: T.LPSTR,
    ServiceStatus: T.SERVICE_STATUS
}));
T.ENUM_SERVICE_STATUSW = Struct('_ENUM_SERVICE_STATUSW', {
    lpServiceName: T.LPWSTR,
    lpDisplayName: T.LPWSTR,
    ServiceStatus: T.SERVICE_STATUS
});
T.LPENUM_SERVICE_STATUSW = Pointer(Struct('_ENUM_SERVICE_STATUSW', {
    lpServiceName: T.LPWSTR,
    lpDisplayName: T.LPWSTR,
    ServiceStatus: T.SERVICE_STATUS
}));
T.ENUM_SERVICE_STATUS = T.ENUM_SERVICE_STATUSA;
T.LPENUM_SERVICE_STATUS = T.LPENUM_SERVICE_STATUSA;
T.ENUM_SERVICE_STATUS_PROCESSA = Struct('_ENUM_SERVICE_STATUS_PROCESSA', {
    lpServiceName: T.LPSTR,
    lpDisplayName: T.LPSTR,
    ServiceStatusProcess: T.SERVICE_STATUS_PROCESS
});
T.LPENUM_SERVICE_STATUS_PROCESSA = Pointer(Struct('_ENUM_SERVICE_STATUS_PROCESSA', {
    lpServiceName: T.LPSTR,
    lpDisplayName: T.LPSTR,
    ServiceStatusProcess: T.SERVICE_STATUS_PROCESS
}));
T.ENUM_SERVICE_STATUS_PROCESSW = Struct('_ENUM_SERVICE_STATUS_PROCESSW', {
    lpServiceName: T.LPWSTR,
    lpDisplayName: T.LPWSTR,
    ServiceStatusProcess: T.SERVICE_STATUS_PROCESS
});
T.LPENUM_SERVICE_STATUS_PROCESSW = Pointer(Struct('_ENUM_SERVICE_STATUS_PROCESSW', {
    lpServiceName: T.LPWSTR,
    lpDisplayName: T.LPWSTR,
    ServiceStatusProcess: T.SERVICE_STATUS_PROCESS
}));
T.ENUM_SERVICE_STATUS_PROCESS = T.ENUM_SERVICE_STATUS_PROCESSA;
T.LPENUM_SERVICE_STATUS_PROCESS = T.LPENUM_SERVICE_STATUS_PROCESSA;
T.SC_ENUM_TYPE = Enum('SC_ENUM_PROCESS_INFO', {
    SC_ENUM_PROCESS_INFO: 0
});
T.QUERY_SERVICE_CONFIGA = Struct('_QUERY_SERVICE_CONFIGA', {
    dwServiceType: T.DWORD,
    dwStartType: T.DWORD,
    dwErrorControl: T.DWORD,
    lpBinaryPathName: T.LPSTR,
    lpLoadOrderGroup: T.LPSTR,
    dwTagId: T.DWORD,
    lpDependencies: T.LPSTR,
    lpServiceStartName: T.LPSTR,
    lpDisplayName: T.LPSTR
});
T.LPQUERY_SERVICE_CONFIGA = Pointer(Struct('_QUERY_SERVICE_CONFIGA', {
    dwServiceType: T.DWORD,
    dwStartType: T.DWORD,
    dwErrorControl: T.DWORD,
    lpBinaryPathName: T.LPSTR,
    lpLoadOrderGroup: T.LPSTR,
    dwTagId: T.DWORD,
    lpDependencies: T.LPSTR,
    lpServiceStartName: T.LPSTR,
    lpDisplayName: T.LPSTR
}));
T.QUERY_SERVICE_CONFIGW = Struct('_QUERY_SERVICE_CONFIGW', {
    dwServiceType: T.DWORD,
    dwStartType: T.DWORD,
    dwErrorControl: T.DWORD,
    lpBinaryPathName: T.LPWSTR,
    lpLoadOrderGroup: T.LPWSTR,
    dwTagId: T.DWORD,
    lpDependencies: T.LPWSTR,
    lpServiceStartName: T.LPWSTR,
    lpDisplayName: T.LPWSTR
});
T.LPQUERY_SERVICE_CONFIGW = Pointer(Struct('_QUERY_SERVICE_CONFIGW', {
    dwServiceType: T.DWORD,
    dwStartType: T.DWORD,
    dwErrorControl: T.DWORD,
    lpBinaryPathName: T.LPWSTR,
    lpLoadOrderGroup: T.LPWSTR,
    dwTagId: T.DWORD,
    lpDependencies: T.LPWSTR,
    lpServiceStartName: T.LPWSTR,
    lpDisplayName: T.LPWSTR
}));
T.SERVICE_DESCRIPTIONA = Struct('_SERVICE_DESCRIPTIONA', {
    lpDescription: T.LPSTR
});
T.LPSERVICE_DESCRIPTIONA = Pointer(Struct('_SERVICE_DESCRIPTIONA', {
    lpDescription: T.LPSTR
}));
T.SERVICE_DESCRIPTIONW = Struct('_SERVICE_DESCRIPTIONW', {
    lpDescription: T.LPWSTR
});
T.LPSERVICE_DESCRIPTIONW = Pointer(Struct('_SERVICE_DESCRIPTIONW', {
    lpDescription: T.LPWSTR
}));
T.SERVICE_DESCRIPTION = T.SERVICE_DESCRIPTIONA;
T.LPSERVICE_DESCRIPTION = T.LPSERVICE_DESCRIPTIONA;
T.SC_ACTION_TYPE = Enum('SC_ACTION_RUN_COMMAND', {
    SC_ACTION_NONE: 0,
    SC_ACTION_RESTART: 1,
    SC_ACTION_REBOOT: 2,
    SC_ACTION_RUN_COMMAND: 3
});
T.SC_ACTION = Struct('_SC_ACTION', {
    Type: T.SC_ACTION_TYPE,
    Delay: T.DWORD
});
T.LPSC_ACTION = Pointer(Struct('_SC_ACTION', {
    Type: T.SC_ACTION_TYPE,
    Delay: T.DWORD
}));
T.SERVICE_FAILURE_ACTIONSA = Struct('_SERVICE_FAILURE_ACTIONSA', {
    dwResetPeriod: T.DWORD,
    lpRebootMsg: T.LPSTR,
    lpCommand: T.LPSTR,
    cActions: T.DWORD,
    lpsaActions: Pointer(T.SC_ACTION)
});
T.LPSERVICE_FAILURE_ACTIONSA = Pointer(Struct('_SERVICE_FAILURE_ACTIONSA', {
    dwResetPeriod: T.DWORD,
    lpRebootMsg: T.LPSTR,
    lpCommand: T.LPSTR,
    cActions: T.DWORD,
    lpsaActions: Pointer(T.SC_ACTION)
}));
T.SERVICE_FAILURE_ACTIONSW = Struct('_SERVICE_FAILURE_ACTIONSW', {
    dwResetPeriod: T.DWORD,
    lpRebootMsg: T.LPWSTR,
    lpCommand: T.LPWSTR,
    cActions: T.DWORD,
    lpsaActions: Pointer(T.SC_ACTION)
});
T.LPSERVICE_FAILURE_ACTIONSW = Pointer(Struct('_SERVICE_FAILURE_ACTIONSW', {
    dwResetPeriod: T.DWORD,
    lpRebootMsg: T.LPWSTR,
    lpCommand: T.LPWSTR,
    cActions: T.DWORD,
    lpsaActions: Pointer(T.SC_ACTION)
}));
T.SERVICE_FAILURE_ACTIONS = T.SERVICE_FAILURE_ACTIONSA;
T.LPSERVICE_FAILURE_ACTIONS = T.LPSERVICE_FAILURE_ACTIONSA;
T.QUERY_SERVICE_LOCK_STATUSA = Struct('_QUERY_SERVICE_LOCK_STATUSA', {
    fIsLocked: T.DWORD,
    lpLockOwner: T.LPSTR,
    dwLockDuration: T.DWORD
});
T.LPQUERY_SERVICE_LOCK_STATUSA = Pointer(Struct('_QUERY_SERVICE_LOCK_STATUSA', {
    fIsLocked: T.DWORD,
    lpLockOwner: T.LPSTR,
    dwLockDuration: T.DWORD
}));
T.QUERY_SERVICE_LOCK_STATUSW = Struct('_QUERY_SERVICE_LOCK_STATUSW', {
    fIsLocked: T.DWORD,
    lpLockOwner: T.LPWSTR,
    dwLockDuration: T.DWORD
});
T.LPQUERY_SERVICE_LOCK_STATUSW = Pointer(Struct('_QUERY_SERVICE_LOCK_STATUSW', {
    fIsLocked: T.DWORD,
    lpLockOwner: T.LPWSTR,
    dwLockDuration: T.DWORD
}));
T.QUERY_SERVICE_LOCK_STATUS = T.QUERY_SERVICE_LOCK_STATUSA;
T.LPHANDLER_FUNCTION = Pointer(Fn(null, [[T.DWORD]]));
T.LPHANDLER_FUNCTION_EX = Pointer(Fn(T.DWORD, [[T.DWORD], [T.DWORD], [T.LPVOID], [T.LPVOID]]));
T.MODEMDEVCAPS = Struct('tagMODEMDEVCAPS', {
    dwActualSize: T.DWORD,
    dwRequiredSize: T.DWORD,
    dwDevSpecificOffset: T.DWORD,
    dwDevSpecificSize: T.DWORD,
    dwModemProviderVersion: T.DWORD,
    dwModemManufacturerOffset: T.DWORD,
    dwModemManufacturerSize: T.DWORD,
    dwModemModelOffset: T.DWORD,
    dwModemModelSize: T.DWORD,
    dwModemVersionOffset: T.DWORD,
    dwModemVersionSize: T.DWORD,
    dwDialOptions: T.DWORD,
    dwCallSetupFailTimer: T.DWORD,
    dwInactivityTimeout: T.DWORD,
    dwSpeakerVolume: T.DWORD,
    dwSpeakerMode: T.DWORD,
    dwModemoptions: T.DWORD,
    dwMaxDTERate: T.DWORD,
    dwMaxDCERate: T.DWORD,
    abVariablePortion: ArrayType(T.BYTE, 1)
});
T.LPMODEMDEVCAPS = Pointer(Struct('tagMODEMDEVCAPS', {
    dwActualSize: T.DWORD,
    dwRequiredSize: T.DWORD,
    dwDevSpecificOffset: T.DWORD,
    dwDevSpecificSize: T.DWORD,
    dwModemProviderVersion: T.DWORD,
    dwModemManufacturerOffset: T.DWORD,
    dwModemManufacturerSize: T.DWORD,
    dwModemModelOffset: T.DWORD,
    dwModemModelSize: T.DWORD,
    dwModemVersionOffset: T.DWORD,
    dwModemVersionSize: T.DWORD,
    dwDialOptions: T.DWORD,
    dwCallSetupFailTimer: T.DWORD,
    dwInactivityTimeout: T.DWORD,
    dwSpeakerVolume: T.DWORD,
    dwSpeakerMode: T.DWORD,
    dwModemoptions: T.DWORD,
    dwMaxDTERate: T.DWORD,
    dwMaxDCERate: T.DWORD,
    abVariablePortion: ArrayType(T.BYTE, 1)
}));
T.MODEMSETTINGS = Struct('tagMODEMSETTINGS', {
    dwActualSize: T.DWORD,
    dwRequiredSize: T.DWORD,
    dwDevSpecificOffset: T.DWORD,
    dwDevSpecificSize: T.DWORD,
    dwCallSetupFailTimer: T.DWORD,
    dwInactivityTimeout: T.DWORD,
    dwSpeakerVolume: T.DWORD,
    dwSpeakerMode: T.DWORD,
    dwPreferredModemOptions: T.DWORD,
    dwNegotiatedModemOptions: T.DWORD,
    dwNegotiatedDCERate: T.DWORD,
    abVariablePortion: ArrayType(T.BYTE, 1)
});
T.LPMODEMSETTINGS = Pointer(Struct('tagMODEMSETTINGS', {
    dwActualSize: T.DWORD,
    dwRequiredSize: T.DWORD,
    dwDevSpecificOffset: T.DWORD,
    dwDevSpecificSize: T.DWORD,
    dwCallSetupFailTimer: T.DWORD,
    dwInactivityTimeout: T.DWORD,
    dwSpeakerVolume: T.DWORD,
    dwSpeakerMode: T.DWORD,
    dwPreferredModemOptions: T.DWORD,
    dwNegotiatedModemOptions: T.DWORD,
    dwNegotiatedDCERate: T.DWORD,
    abVariablePortion: ArrayType(T.BYTE, 1)
}));
T.HIMC = T.HANDLE;
T.HIMCC = T.HANDLE;
T.REGISTERWORDA = Struct('tagREGISTERWORDA', {
    lpReading: T.LPSTR,
    lpWord: T.LPSTR
});
T.PREGISTERWORDA = Pointer(Struct('tagREGISTERWORDA', {
    lpReading: T.LPSTR,
    lpWord: T.LPSTR
}));
T.NPREGISTERWORDA = Pointer(Struct('tagREGISTERWORDA', {
    lpReading: T.LPSTR,
    lpWord: T.LPSTR
}));
T.LPREGISTERWORDA = Pointer(Struct('tagREGISTERWORDA', {
    lpReading: T.LPSTR,
    lpWord: T.LPSTR
}));
T.REGISTERWORDW = Struct('tagREGISTERWORDW', {
    lpReading: T.LPWSTR,
    lpWord: T.LPWSTR
});
T.PREGISTERWORDW = Pointer(Struct('tagREGISTERWORDW', {
    lpReading: T.LPWSTR,
    lpWord: T.LPWSTR
}));
T.NPREGISTERWORDW = Pointer(Struct('tagREGISTERWORDW', {
    lpReading: T.LPWSTR,
    lpWord: T.LPWSTR
}));
T.LPREGISTERWORDW = Pointer(Struct('tagREGISTERWORDW', {
    lpReading: T.LPWSTR,
    lpWord: T.LPWSTR
}));
T.REGISTERWORDENUMPROCA = Pointer(Fn(T.i32, [[T.LPCSTR], [T.DWORD], [T.LPCSTR], [T.LPVOID]]));
T.REGISTERWORDENUMPROCW = Pointer(Fn(T.i32, [[T.LPCWSTR], [T.DWORD], [T.LPCWSTR], [T.LPVOID]]));
T.CANDIDATEFORM = Struct('tagCANDIDATEFORM', {
    dwIndex: T.DWORD,
    dwStyle: T.DWORD,
    ptCurrentPos: T.POINT,
    rcArea: T.RECT
});
T.LPCANDIDATEFORM = Pointer(Struct('tagCANDIDATEFORM', {
    dwIndex: T.DWORD,
    dwStyle: T.DWORD,
    ptCurrentPos: T.POINT,
    rcArea: T.RECT
}));
T.CANDIDATELIST = Struct('tagCANDIDATELIST', {
    dwSize: T.DWORD,
    dwStyle: T.DWORD,
    dwCount: T.DWORD,
    dwSelection: T.DWORD,
    dwPageStart: T.DWORD,
    dwPageSize: T.DWORD,
    dwOffset: ArrayType(T.DWORD, 1)
});
T.LPCANDIDATELIST = Pointer(Struct('tagCANDIDATELIST', {
    dwSize: T.DWORD,
    dwStyle: T.DWORD,
    dwCount: T.DWORD,
    dwSelection: T.DWORD,
    dwPageStart: T.DWORD,
    dwPageSize: T.DWORD,
    dwOffset: ArrayType(T.DWORD, 1)
}));
T.STYLEBUFA = Struct('tagSTYLEBUFA', {
    dwStyle: T.DWORD,
    szDescription: ArrayType(T.CHAR, 32)
});
T.LPSTYLEBUFA = Pointer(Struct('tagSTYLEBUFA', {
    dwStyle: T.DWORD,
    szDescription: ArrayType(T.CHAR, 32)
}));
T.STYLEBUFW = Struct('tagSTYLEBUFW', {
    dwStyle: T.DWORD,
    szDescription: ArrayType(T.WCHAR, 32)
});
T.LPSTYLEBUFW = Pointer(Struct('tagSTYLEBUFW', {
    dwStyle: T.DWORD,
    szDescription: ArrayType(T.WCHAR, 32)
}));
T.STYLEBUF = T.STYLEBUFA;
T.LPSTYLEBUF = T.LPSTYLEBUFA;
T.RECONVERTSTRING = Struct('tagRECONVERTSTRING', {
    dwSize: T.DWORD,
    dwVersion: T.DWORD,
    dwStrLen: T.DWORD,
    dwStrOffset: T.DWORD,
    dwCompStrLen: T.DWORD,
    dwCompStrOffset: T.DWORD,
    dwTargetStrLen: T.DWORD,
    dwTargetStrOffset: T.DWORD
});
T.LPRECONVERTSTRING = Pointer(Struct('tagRECONVERTSTRING', {
    dwSize: T.DWORD,
    dwVersion: T.DWORD,
    dwStrLen: T.DWORD,
    dwStrOffset: T.DWORD,
    dwCompStrLen: T.DWORD,
    dwCompStrOffset: T.DWORD,
    dwTargetStrLen: T.DWORD,
    dwTargetStrOffset: T.DWORD
}));
T.IMEMENUITEMINFOA = Struct('tagIMEMENUITEMINFOA', {
    cbSize: T.UINT,
    fType: T.UINT,
    fState: T.UINT,
    wID: T.UINT,
    hbmpChecked: T.HBITMAP,
    hbmpUnchecked: T.HBITMAP,
    dwItemData: T.DWORD,
    szString: ArrayType(T.CHAR, 80),
    hbmpItem: T.HBITMAP
});
T.LPIMEMENUITEMINFOA = Pointer(Struct('tagIMEMENUITEMINFOA', {
    cbSize: T.UINT,
    fType: T.UINT,
    fState: T.UINT,
    wID: T.UINT,
    hbmpChecked: T.HBITMAP,
    hbmpUnchecked: T.HBITMAP,
    dwItemData: T.DWORD,
    szString: ArrayType(T.CHAR, 80),
    hbmpItem: T.HBITMAP
}));
T.IMEMENUITEMINFOW = Struct('tagIMEMENUITEMINFOW', {
    cbSize: T.UINT,
    fType: T.UINT,
    fState: T.UINT,
    wID: T.UINT,
    hbmpChecked: T.HBITMAP,
    hbmpUnchecked: T.HBITMAP,
    dwItemData: T.DWORD,
    szString: ArrayType(T.WCHAR, 80),
    hbmpItem: T.HBITMAP
});
T.LPIMEMENUITEMINFOW = Pointer(Struct('tagIMEMENUITEMINFOW', {
    cbSize: T.UINT,
    fType: T.UINT,
    fState: T.UINT,
    wID: T.UINT,
    hbmpChecked: T.HBITMAP,
    hbmpUnchecked: T.HBITMAP,
    dwItemData: T.DWORD,
    szString: ArrayType(T.WCHAR, 80),
    hbmpItem: T.HBITMAP
}));
T.IMEMENUITEMINFO = T.IMEMENUITEMINFOA;
T.LPIMEMENUITEMINFO = T.LPIMEMENUITEMINFOA;
T.COMPOSITIONFORM = Struct('_tagCOMPOSITIONFORM', {
    dwStyle: T.DWORD,
    ptCurrentPos: T.POINT,
    rcArea: T.RECT
});
T.LPCOMPOSITIONFORM = Pointer(Struct('_tagCOMPOSITIONFORM', {
    dwStyle: T.DWORD,
    ptCurrentPos: T.POINT,
    rcArea: T.RECT
}));
T._PVFV = Pointer(Fn(null, [[null]]));
T._PIFV = Pointer(Fn(T.i32, [[null]]));
T._PVFI = Pointer(Fn(null, [[T.i32]]));
T.ioinfo = Struct('', {
    osfhnd: T.intptr_t,
    osfile: T.char,
    pipech: T.char,
    lockinitflag: T.i32,
    lock: T.CRITICAL_SECTION,
    textmode: [T.char, 7],
    unicode: [T.char, 1],
    pipech2: ArrayType(T.char, 2)
});
T.FILE = Struct('_iobuf', null);
T._startupinfo = Struct('', {
    newmode: T.i32
});
T.__enative_startup_state = Enum('__initialized', {
    __uninitialized: 0,
    __initializing: 1,
    __initialized: 2
});
T._HFILE = Pointer(null);
T._CRT_REPORT_HOOK = Pointer(Fn(T.i32, [[T.i32], [Pointer(T.char)], [Pointer(T.i32)]]));
T._CRT_REPORT_HOOKW = Pointer(Fn(T.i32, [[T.i32], [Pointer(T.wchar_t)], [Pointer(T.i32)]]));
T._CRT_ALLOC_HOOK = Pointer(Fn(T.i32, [[T.i32], [Pointer(null)], [T.size_t], [T.i32], [T.i32], [Pointer(T.u8)], [T.i32]]));
T._CRT_DUMP_CLIENT = Pointer(Fn(null, [[Pointer(null)], [T.size_t]]));
T._CrtMemState = Struct('_CrtMemState', {
    pBlockHeader: Pointer(Struct('_CrtMemBlockHeader', null)),
    lCounts: ArrayType(T.size_t, 5),
    lSizes: ArrayType(T.size_t, 5),
    lHighWaterCount: T.size_t,
    lTotalCount: T.size_t
});
T.float_t = T.f128;
T.double_t = T.f128;
T.fpos_t = T.i64;
T._fsize_t = T.u32;
T.INITCOMMONCONTROLSEX = Struct('tagINITCOMMONCONTROLSEX', {
    dwSize: T.DWORD,
    dwICC: T.DWORD
});
T.LPINITCOMMONCONTROLSEX = Pointer(Struct('tagINITCOMMONCONTROLSEX', {
    dwSize: T.DWORD,
    dwICC: T.DWORD
}));
T.NMTOOLTIPSCREATED = Struct('tagNMTOOLTIPSCREATED', {
    hdr: T.NMHDR,
    hwndToolTips: T.HWND
});
T.LPNMTOOLTIPSCREATED = Pointer(Struct('tagNMTOOLTIPSCREATED', {
    hdr: T.NMHDR,
    hwndToolTips: T.HWND
}));
T.NMMOUSE = Struct('tagNMMOUSE', {
    hdr: T.NMHDR,
    dwItemSpec: T.DWORD_PTR,
    dwItemData: T.DWORD_PTR,
    pt: T.POINT,
    dwHitInfo: T.DWORD
});
T.LPNMMOUSE = Pointer(Struct('tagNMMOUSE', {
    hdr: T.NMHDR,
    dwItemSpec: T.DWORD_PTR,
    dwItemData: T.DWORD_PTR,
    pt: T.POINT,
    dwHitInfo: T.DWORD
}));
T.NMOBJECTNOTIFY = Struct('tagNMOBJECTNOTIFY', {
    hdr: T.NMHDR,
    iItem: T.i32,
    piid: Pointer(T.IID),
    pObject: Pointer(null),
    hResult: T.HRESULT,
    dwFlags: T.DWORD
});
T.LPNMOBJECTNOTIFY = Pointer(Struct('tagNMOBJECTNOTIFY', {
    hdr: T.NMHDR,
    iItem: T.i32,
    piid: Pointer(T.IID),
    pObject: Pointer(null),
    hResult: T.HRESULT,
    dwFlags: T.DWORD
}));
T.NMKEY = Struct('tagNMKEY', {
    hdr: T.NMHDR,
    nVKey: T.UINT,
    uFlags: T.UINT
});
T.LPNMKEY = Pointer(Struct('tagNMKEY', {
    hdr: T.NMHDR,
    nVKey: T.UINT,
    uFlags: T.UINT
}));
T.NMCHAR = Struct('tagNMCHAR', {
    hdr: T.NMHDR,
    ch: T.UINT,
    dwItemPrev: T.DWORD,
    dwItemNext: T.DWORD
});
T.LPNMCHAR = Pointer(Struct('tagNMCHAR', {
    hdr: T.NMHDR,
    ch: T.UINT,
    dwItemPrev: T.DWORD,
    dwItemNext: T.DWORD
}));
T.NMCUSTOMDRAW = Struct('tagNMCUSTOMDRAWINFO', {
    hdr: T.NMHDR,
    dwDrawStage: T.DWORD,
    hdc: T.HDC,
    rc: T.RECT,
    dwItemSpec: T.DWORD_PTR,
    uItemState: T.UINT,
    lItemlParam: T.LPARAM
});
T.LPNMCUSTOMDRAW = Pointer(Struct('tagNMCUSTOMDRAWINFO', {
    hdr: T.NMHDR,
    dwDrawStage: T.DWORD,
    hdc: T.HDC,
    rc: T.RECT,
    dwItemSpec: T.DWORD_PTR,
    uItemState: T.UINT,
    lItemlParam: T.LPARAM
}));
T.NMTTCUSTOMDRAW = Struct('tagNMTTCUSTOMDRAW', {
    nmcd: T.NMCUSTOMDRAW,
    uDrawFlags: T.UINT
});
T.LPNMTTCUSTOMDRAW = Pointer(Struct('tagNMTTCUSTOMDRAW', {
    nmcd: T.NMCUSTOMDRAW,
    uDrawFlags: T.UINT
}));
T.COLORSCHEME = Struct('tagCOLORSCHEME', {
    dwSize: T.DWORD,
    clrBtnHighlight: T.COLORREF,
    clrBtnShadow: T.COLORREF
});
T.LPCOLORSCHEME = Pointer(Struct('tagCOLORSCHEME', {
    dwSize: T.DWORD,
    clrBtnHighlight: T.COLORREF,
    clrBtnShadow: T.COLORREF
}));
T.DRAGLISTINFO = Struct('tagDRAGLISTINFO', {
    uNotification: T.UINT,
    hWnd: T.HWND,
    ptCursor: T.POINT
});
T.LPDRAGLISTINFO = Pointer(Struct('tagDRAGLISTINFO', {
    uNotification: T.UINT,
    hWnd: T.HWND,
    ptCursor: T.POINT
}));
T.UDACCEL = Struct('_UDACCEL', {
    nSec: T.UINT,
    nInc: T.UINT
});
T.LPUDACCEL = Pointer(Struct('_UDACCEL', {
    nSec: T.UINT,
    nInc: T.UINT
}));
T.NM_UPDOWN = Struct('tagNM_UPDOWN', {
    hdr: T.NMHDR,
    iPos: T.i32,
    iDelta: T.i32
});
T.LPNM_UPDOWN = Pointer(Struct('tagNM_UPDOWN', {
    hdr: T.NMHDR,
    iPos: T.i32,
    iDelta: T.i32
}));
T.PBRANGE = Struct('', {
    iLow: T.INT,
    iHigh: T.INT
});
T.PPBRANGE = Pointer(Struct('', {
    iLow: T.INT,
    iHigh: T.INT
}));
T.HIMAGELIST = Pointer(Struct('_IMAGELIST', null));
T.IMAGEINFO = Struct('_IMAGEINFO', {
    hbmImage: T.HBITMAP,
    hbmMask: T.HBITMAP,
    Unused1: T.INT,
    Unused2: T.INT,
    rcImage: T.RECT
});
T.LPIMAGEINFO = Pointer(Struct('_IMAGEINFO', {
    hbmImage: T.HBITMAP,
    hbmMask: T.HBITMAP,
    Unused1: T.INT,
    Unused2: T.INT,
    rcImage: T.RECT
}));
T.IMAGELISTDRAWPARAMS = Struct('_IMAGELISTDRAWPARAMS', {
    cbSize: T.DWORD,
    himl: T.HIMAGELIST,
    i: T.INT,
    hdcDst: T.HDC,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    xBitmap: T.INT,
    yBitmap: T.INT,
    rgbBk: T.COLORREF,
    rgbFg: T.COLORREF,
    fStyle: T.UINT,
    dwRop: T.DWORD,
    fState: T.DWORD,
    Frame: T.DWORD,
    crEffect: T.COLORREF
});
T.LPIMAGELISTDRAWPARAMS = Pointer(Struct('_IMAGELISTDRAWPARAMS', {
    cbSize: T.DWORD,
    himl: T.HIMAGELIST,
    i: T.INT,
    hdcDst: T.HDC,
    x: T.INT,
    y: T.INT,
    cx: T.INT,
    cy: T.INT,
    xBitmap: T.INT,
    yBitmap: T.INT,
    rgbBk: T.COLORREF,
    rgbFg: T.COLORREF,
    fStyle: T.UINT,
    dwRop: T.DWORD,
    fState: T.DWORD,
    Frame: T.DWORD,
    crEffect: T.COLORREF
}));
T.SUBCLASSPROC = Pointer(Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM], [T.UINT_PTR], [T.DWORD_PTR]]));
T.HDLAYOUT = Struct('_HD_LAYOUT', {
    prc: Pointer(T.RECT),
    pwpos: Pointer(T.WINDOWPOS)
});
T.LPHDLAYOUT = Pointer(Struct('_HD_LAYOUT', {
    prc: Pointer(T.RECT),
    pwpos: Pointer(T.WINDOWPOS)
}));
T.HDITEMA = Struct('_HD_ITEMA', {
    mask: T.UINT,
    cxy: T.INT,
    pszText: T.LPSTR,
    hbm: T.HBITMAP,
    cchTextMax: T.INT,
    fmt: T.INT,
    lParam: T.LPARAM,
    iImage: T.INT,
    iOrder: T.INT,
    type: T.UINT,
    pvFilter: T.LPVOID,
    state: T.UINT
});
T.LPHDITEMA = Pointer(Struct('_HD_ITEMA', {
    mask: T.UINT,
    cxy: T.INT,
    pszText: T.LPSTR,
    hbm: T.HBITMAP,
    cchTextMax: T.INT,
    fmt: T.INT,
    lParam: T.LPARAM,
    iImage: T.INT,
    iOrder: T.INT,
    type: T.UINT,
    pvFilter: T.LPVOID,
    state: T.UINT
}));
T.HDITEMW = Struct('_HD_ITEMW', {
    mask: T.UINT,
    cxy: T.INT,
    pszText: T.LPWSTR,
    hbm: T.HBITMAP,
    cchTextMax: T.INT,
    fmt: T.INT,
    lParam: T.LPARAM,
    iImage: T.INT,
    iOrder: T.INT,
    type: T.UINT,
    pvFilter: T.LPVOID,
    state: T.UINT
});
T.LPHDITEMW = Pointer(Struct('_HD_ITEMW', {
    mask: T.UINT,
    cxy: T.INT,
    pszText: T.LPWSTR,
    hbm: T.HBITMAP,
    cchTextMax: T.INT,
    fmt: T.INT,
    lParam: T.LPARAM,
    iImage: T.INT,
    iOrder: T.INT,
    type: T.UINT,
    pvFilter: T.LPVOID,
    state: T.UINT
}));
T.HD_TEXTFILTERA = Struct('_HD_TEXTFILTERA', {
    pszText: T.LPSTR,
    cchTextMax: T.INT
});
T.LPHD_TEXTFILTERA = Pointer(Struct('_HD_TEXTFILTERA', {
    pszText: T.LPSTR,
    cchTextMax: T.INT
}));
T.HD_TEXTFILTERW = Struct('_HD_TEXTFILTERW', {
    pszText: T.LPWSTR,
    cchTextMax: T.INT
});
T.LPHD_TEXTFILTERW = Pointer(Struct('_HD_TEXTFILTERW', {
    pszText: T.LPWSTR,
    cchTextMax: T.INT
}));
T.HDHITTESTINFO = Struct('_HD_HITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT,
    iItem: T.INT
});
T.LPHDHITTESTINFO = Pointer(Struct('_HD_HITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT,
    iItem: T.INT
}));
T.NMHEADERA = Struct('tagNMHEADERA', {
    hdr: T.NMHDR,
    iItem: T.INT,
    iButton: T.INT,
    pitem: Pointer(T.HDITEMA)
});
T.LPNMHEADERA = Pointer(Struct('tagNMHEADERA', {
    hdr: T.NMHDR,
    iItem: T.INT,
    iButton: T.INT,
    pitem: Pointer(T.HDITEMA)
}));
T.NMHEADERW = Struct('tagNMHEADERW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    iButton: T.INT,
    pitem: Pointer(T.HDITEMW)
});
T.LPNMHEADERW = Pointer(Struct('tagNMHEADERW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    iButton: T.INT,
    pitem: Pointer(T.HDITEMW)
}));
T.NMHDDISPINFOA = Struct('tagNMHDDISPINFOA', {
    hdr: T.NMHDR,
    iItem: T.INT,
    mask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM
});
T.LPNMHDDISPINFOA = Pointer(Struct('tagNMHDDISPINFOA', {
    hdr: T.NMHDR,
    iItem: T.INT,
    mask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM
}));
T.NMHDDISPINFOW = Struct('tagNMHDDISPINFOW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    mask: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM
});
T.LPNMHDDISPINFOW = Pointer(Struct('tagNMHDDISPINFOW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    mask: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM
}));
T.NMHDFILTERBTNCLICK = Struct('tagNMHDFILTERBTNCLICK', {
    hdr: T.NMHDR,
    iItem: T.INT,
    rc: T.RECT
});
T.LPNMHDFILTERBTNCLICK = Pointer(Struct('tagNMHDFILTERBTNCLICK', {
    hdr: T.NMHDR,
    iItem: T.INT,
    rc: T.RECT
}));
T.NMBCHOTITEM = Struct('tagNMBCHOTITEM', {
    hdr: T.NMHDR,
    dwFlags: T.DWORD
});
T.LPNMBCHOTITEM = Pointer(Struct('tagNMBCHOTITEM', {
    hdr: T.NMHDR,
    dwFlags: T.DWORD
}));
T.NMTBCUSTOMDRAW = Struct('_NMTBCUSTOMDRAW', {
    nmcd: T.NMCUSTOMDRAW,
    hbrMonoDither: T.HBRUSH,
    hbrLines: T.HBRUSH,
    hpenLines: T.HPEN,
    clrText: T.COLORREF,
    clrMark: T.COLORREF,
    clrTextHighlight: T.COLORREF,
    clrBtnFace: T.COLORREF,
    clrBtnHighlight: T.COLORREF,
    clrHighlightHotTrack: T.COLORREF,
    rcText: T.RECT,
    nStringBkMode: T.i32,
    nHLStringBkMode: T.i32,
    iListGap: T.i32
});
T.LPNMTBCUSTOMDRAW = Pointer(Struct('_NMTBCUSTOMDRAW', {
    nmcd: T.NMCUSTOMDRAW,
    hbrMonoDither: T.HBRUSH,
    hbrLines: T.HBRUSH,
    hpenLines: T.HPEN,
    clrText: T.COLORREF,
    clrMark: T.COLORREF,
    clrTextHighlight: T.COLORREF,
    clrBtnFace: T.COLORREF,
    clrBtnHighlight: T.COLORREF,
    clrHighlightHotTrack: T.COLORREF,
    rcText: T.RECT,
    nStringBkMode: T.i32,
    nHLStringBkMode: T.i32,
    iListGap: T.i32
}));
T.OLDTBBUTTON = Struct('_OLDTBBUTTON', {
    iBitmap: T.INT,
    idCommand: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    bReserved: ArrayType(T.BYTE, 2),
    dwData: T.DWORD
});
T.POLDTBBUTTON = Pointer(Struct('_OLDTBBUTTON', {
    iBitmap: T.INT,
    idCommand: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    bReserved: ArrayType(T.BYTE, 2),
    dwData: T.DWORD
}));
T.LPOLDTBBUTTON = Pointer(Struct('_OLDTBBUTTON', {
    iBitmap: T.INT,
    idCommand: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    bReserved: ArrayType(T.BYTE, 2),
    dwData: T.DWORD
}));
T.LPCOLDTBBUTTON = Pointer(T.OLDTBBUTTON);
T.TBBUTTON = Struct('_TBBUTTON', {
    iBitmap: T.INT,
    idCommand: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    bReserved: ArrayType(T.BYTE, 2),
    dwData: T.DWORD_PTR,
    iString: T.INT_PTR
});
T.PTBBUTTON = Pointer(Struct('_TBBUTTON', {
    iBitmap: T.INT,
    idCommand: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    bReserved: ArrayType(T.BYTE, 2),
    dwData: T.DWORD_PTR,
    iString: T.INT_PTR
}));
T.LPTBBUTTON = Pointer(Struct('_TBBUTTON', {
    iBitmap: T.INT,
    idCommand: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    bReserved: ArrayType(T.BYTE, 2),
    dwData: T.DWORD_PTR,
    iString: T.INT_PTR
}));
T.LPCTBBUTTON = Pointer(T.TBBUTTON);
T.COLORMAP = Struct('_COLORMAP', {
    from: T.COLORREF,
    to: T.COLORREF
});
T.LPCOLORMAP = Pointer(Struct('_COLORMAP', {
    from: T.COLORREF,
    to: T.COLORREF
}));
T.TBADDBITMAP = Struct('tagTBADDBITMAP', {
    hInst: T.HINSTANCE,
    nID: T.UINT_PTR
});
T.LPTBADDBITMAP = Pointer(Struct('tagTBADDBITMAP', {
    hInst: T.HINSTANCE,
    nID: T.UINT_PTR
}));
T.TBSAVEPARAMSA = Struct('tagTBSAVEPARAMSA', {
    hkr: T.HKEY,
    pszSubKey: T.LPCSTR,
    pszValueName: T.LPCSTR
});
T.LPTBSAVEPARAMSA = Pointer(Struct('tagTBSAVEPARAMSA', {
    hkr: T.HKEY,
    pszSubKey: T.LPCSTR,
    pszValueName: T.LPCSTR
}));
T.TBSAVEPARAMSW = Struct('tagTBSAVEPARAMSW', {
    hkr: T.HKEY,
    pszSubKey: T.LPCWSTR,
    pszValueName: T.LPCWSTR
});
T.LPTBSAVEPARAMSW = Pointer(Struct('tagTBSAVEPARAMSW', {
    hkr: T.HKEY,
    pszSubKey: T.LPCWSTR,
    pszValueName: T.LPCWSTR
}));
T.TBBUTTONINFOA = Struct('', {
    cbSize: T.UINT,
    dwMask: T.DWORD,
    idCommand: T.INT,
    iImage: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    cx: T.WORD,
    lParam: T.DWORD_PTR,
    pszText: T.LPSTR,
    cchText: T.INT
});
T.LPTBBUTTONINFOA = Pointer(Struct('', {
    cbSize: T.UINT,
    dwMask: T.DWORD,
    idCommand: T.INT,
    iImage: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    cx: T.WORD,
    lParam: T.DWORD_PTR,
    pszText: T.LPSTR,
    cchText: T.INT
}));
T.TBBUTTONINFOW = Struct('', {
    cbSize: T.UINT,
    dwMask: T.DWORD,
    idCommand: T.INT,
    iImage: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    cx: T.WORD,
    lParam: T.DWORD_PTR,
    pszText: T.LPWSTR,
    cchText: T.INT
});
T.LPTBBUTTONINFOW = Pointer(Struct('', {
    cbSize: T.UINT,
    dwMask: T.DWORD,
    idCommand: T.INT,
    iImage: T.INT,
    fsState: T.BYTE,
    fsStyle: T.BYTE,
    cx: T.WORD,
    lParam: T.DWORD_PTR,
    pszText: T.LPWSTR,
    cchText: T.INT
}));
T.NMTBHOTITEM = Struct('tagNMTBHOTITEM', {
    hdr: T.NMHDR,
    idOld: T.i32,
    idNew: T.i32,
    dwFlags: T.DWORD
});
T.LPNMTBHOTITEM = Pointer(Struct('tagNMTBHOTITEM', {
    hdr: T.NMHDR,
    idOld: T.i32,
    idNew: T.i32,
    dwFlags: T.DWORD
}));
T.NMTBGETINFOTIPA = Struct('tagNMTBGETINFOTIPA', {
    hdr: T.NMHDR,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iItem: T.INT,
    lParam: T.LPARAM
});
T.LPNMTBGETINFOTIPA = Pointer(Struct('tagNMTBGETINFOTIPA', {
    hdr: T.NMHDR,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iItem: T.INT,
    lParam: T.LPARAM
}));
T.NMTBGETINFOTIPW = Struct('tagNMTBGETINFOTIPW', {
    hdr: T.NMHDR,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iItem: T.INT,
    lParam: T.LPARAM
});
T.LPNMTBGETINFOTIPW = Pointer(Struct('tagNMTBGETINFOTIPW', {
    hdr: T.NMHDR,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iItem: T.INT,
    lParam: T.LPARAM
}));
T.NMTBDISPINFOA = Struct('', {
    hdr: T.NMHDR,
    dwMask: T.DWORD,
    idCommand: T.i32,
    lParam: T.DWORD_PTR,
    iImage: T.i32,
    pszText: T.LPSTR,
    cchText: T.i32
});
T.LPNMTBDISPINFOA = Pointer(Struct('', {
    hdr: T.NMHDR,
    dwMask: T.DWORD,
    idCommand: T.i32,
    lParam: T.DWORD_PTR,
    iImage: T.i32,
    pszText: T.LPSTR,
    cchText: T.i32
}));
T.NMTBDISPINFOW = Struct('', {
    hdr: T.NMHDR,
    dwMask: T.DWORD,
    idCommand: T.i32,
    lParam: T.DWORD_PTR,
    iImage: T.i32,
    pszText: T.LPWSTR,
    cchText: T.i32
});
T.LPNMTBDISPINFOW = Pointer(Struct('', {
    hdr: T.NMHDR,
    dwMask: T.DWORD,
    idCommand: T.i32,
    lParam: T.DWORD_PTR,
    iImage: T.i32,
    pszText: T.LPWSTR,
    cchText: T.i32
}));
T.NMTOOLBARA = Struct('tagNMTOOLBARA', {
    hdr: T.NMHDR,
    iItem: T.INT,
    tbButton: T.TBBUTTON,
    cchText: T.INT,
    pszText: T.LPSTR,
    rcButton: T.RECT
});
T.LPNMTOOLBARA = Pointer(Struct('tagNMTOOLBARA', {
    hdr: T.NMHDR,
    iItem: T.INT,
    tbButton: T.TBBUTTON,
    cchText: T.INT,
    pszText: T.LPSTR,
    rcButton: T.RECT
}));
T.TBNOTIFYA = Struct('tagNMTOOLBARA', {
    hdr: T.NMHDR,
    iItem: T.INT,
    tbButton: T.TBBUTTON,
    cchText: T.INT,
    pszText: T.LPSTR,
    rcButton: T.RECT
});
T.LPTBNOTIFYA = Pointer(Struct('tagNMTOOLBARA', {
    hdr: T.NMHDR,
    iItem: T.INT,
    tbButton: T.TBBUTTON,
    cchText: T.INT,
    pszText: T.LPSTR,
    rcButton: T.RECT
}));
T.NMTOOLBARW = Struct('tagNMTOOLBARW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    tbButton: T.TBBUTTON,
    cchText: T.INT,
    pszText: T.LPWSTR,
    rcButton: T.RECT
});
T.LPNMTOOLBARW = Pointer(Struct('tagNMTOOLBARW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    tbButton: T.TBBUTTON,
    cchText: T.INT,
    pszText: T.LPWSTR,
    rcButton: T.RECT
}));
T.TBNOTIFYW = Struct('tagNMTOOLBARW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    tbButton: T.TBBUTTON,
    cchText: T.INT,
    pszText: T.LPWSTR,
    rcButton: T.RECT
});
T.LPTBNOTIFYW = Pointer(Struct('tagNMTOOLBARW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    tbButton: T.TBBUTTON,
    cchText: T.INT,
    pszText: T.LPWSTR,
    rcButton: T.RECT
}));
T.TBREPLACEBITMAP = Struct('', {
    hInstOld: T.HINSTANCE,
    nIDOld: T.UINT_PTR,
    hInstNew: T.HINSTANCE,
    nIDNew: T.UINT_PTR,
    nButtons: T.INT
});
T.LPTBREPLACEBITMAP = Pointer(Struct('', {
    hInstOld: T.HINSTANCE,
    nIDOld: T.UINT_PTR,
    hInstNew: T.HINSTANCE,
    nIDNew: T.UINT_PTR,
    nButtons: T.INT
}));
T.TBINSERTMARK = Struct('', {
    iButton: T.i32,
    dwFlags: T.DWORD
});
T.LPTBINSERTMARK = Pointer(Struct('', {
    iButton: T.i32,
    dwFlags: T.DWORD
}));
T.NMTBSAVE = Struct('tagNMTBSAVE', {
    hdr: T.NMHDR,
    pData: Pointer(T.DWORD),
    pCurrent: Pointer(T.DWORD),
    cbData: T.UINT,
    iItem: T.i32,
    cButtons: T.i32,
    tbButton: T.TBBUTTON
});
T.LPNMTBSAVE = Pointer(Struct('tagNMTBSAVE', {
    hdr: T.NMHDR,
    pData: Pointer(T.DWORD),
    pCurrent: Pointer(T.DWORD),
    cbData: T.UINT,
    iItem: T.i32,
    cButtons: T.i32,
    tbButton: T.TBBUTTON
}));
T.NMTBRESTORE = Struct('tagNMTBRESTORE', {
    hdr: T.NMHDR,
    pData: Pointer(T.DWORD),
    pCurrent: Pointer(T.DWORD),
    cbData: T.UINT,
    iItem: T.i32,
    cButtons: T.i32,
    cbBytesPerRecord: T.i32,
    tbButton: T.TBBUTTON
});
T.LPNMTBRESTORE = Pointer(Struct('tagNMTBRESTORE', {
    hdr: T.NMHDR,
    pData: Pointer(T.DWORD),
    pCurrent: Pointer(T.DWORD),
    cbData: T.UINT,
    iItem: T.i32,
    cButtons: T.i32,
    cbBytesPerRecord: T.i32,
    tbButton: T.TBBUTTON
}));
T.TBMETRICS = Struct('', {
    cbSize: T.UINT,
    dwMask: T.DWORD,
    cxPad: T.INT,
    cyPad: T.INT,
    cxBarPad: T.INT,
    cyBarPad: T.INT,
    cxButtonSpacing: T.INT,
    cyButtonSpacing: T.INT
});
T.LPTBMETRICS = Pointer(Struct('', {
    cbSize: T.UINT,
    dwMask: T.DWORD,
    cxPad: T.INT,
    cyPad: T.INT,
    cxBarPad: T.INT,
    cyBarPad: T.INT,
    cxButtonSpacing: T.INT,
    cyButtonSpacing: T.INT
}));
T.NMTBINITCUSTOMIZE = Struct('', {
    hdr: T.NMHDR,
    hwndDialog: T.HWND
});
T.NMTBWRAPHOTITEM = Struct('', {
    hdr: T.NMHDR,
    idNew: T.INT,
    iDirection: T.INT,
    dwReason: T.DWORD
});
T.TTTOOLINFOA = Struct('tagTOOLINFOA', {
    cbSize: T.UINT,
    uFlags: T.UINT,
    hwnd: T.HWND,
    uId: T.UINT_PTR,
    rect: T.RECT,
    hinst: T.HINSTANCE,
    lpszText: T.LPSTR,
    lParam: T.LPARAM,
    lpReserved: Pointer(null)
});
T.LPTOOLINFOA = Pointer(Struct('tagTOOLINFOA', {
    cbSize: T.UINT,
    uFlags: T.UINT,
    hwnd: T.HWND,
    uId: T.UINT_PTR,
    rect: T.RECT,
    hinst: T.HINSTANCE,
    lpszText: T.LPSTR,
    lParam: T.LPARAM,
    lpReserved: Pointer(null)
}));
T.PTOOLINFOA = Pointer(Struct('tagTOOLINFOA', {
    cbSize: T.UINT,
    uFlags: T.UINT,
    hwnd: T.HWND,
    uId: T.UINT_PTR,
    rect: T.RECT,
    hinst: T.HINSTANCE,
    lpszText: T.LPSTR,
    lParam: T.LPARAM,
    lpReserved: Pointer(null)
}));
T.LPTTTOOLINFOA = Pointer(Struct('tagTOOLINFOA', {
    cbSize: T.UINT,
    uFlags: T.UINT,
    hwnd: T.HWND,
    uId: T.UINT_PTR,
    rect: T.RECT,
    hinst: T.HINSTANCE,
    lpszText: T.LPSTR,
    lParam: T.LPARAM,
    lpReserved: Pointer(null)
}));
T.TTTOOLINFOW = Struct('tagTOOLINFOW', {
    cbSize: T.UINT,
    uFlags: T.UINT,
    hwnd: T.HWND,
    uId: T.UINT_PTR,
    rect: T.RECT,
    hinst: T.HINSTANCE,
    lpszText: T.LPWSTR,
    lParam: T.LPARAM,
    lpReserved: Pointer(null)
});
T.LPTOOLINFOW = Pointer(Struct('tagTOOLINFOW', {
    cbSize: T.UINT,
    uFlags: T.UINT,
    hwnd: T.HWND,
    uId: T.UINT_PTR,
    rect: T.RECT,
    hinst: T.HINSTANCE,
    lpszText: T.LPWSTR,
    lParam: T.LPARAM,
    lpReserved: Pointer(null)
}));
T.PTOOLINFOW = Pointer(Struct('tagTOOLINFOW', {
    cbSize: T.UINT,
    uFlags: T.UINT,
    hwnd: T.HWND,
    uId: T.UINT_PTR,
    rect: T.RECT,
    hinst: T.HINSTANCE,
    lpszText: T.LPWSTR,
    lParam: T.LPARAM,
    lpReserved: Pointer(null)
}));
T.LPTTTOOLINFOW = Pointer(Struct('tagTOOLINFOW', {
    cbSize: T.UINT,
    uFlags: T.UINT,
    hwnd: T.HWND,
    uId: T.UINT_PTR,
    rect: T.RECT,
    hinst: T.HINSTANCE,
    lpszText: T.LPWSTR,
    lParam: T.LPARAM,
    lpReserved: Pointer(null)
}));
T.TTHITTESTINFOA = Struct('_TT_HITTESTINFOA', {
    hwnd: T.HWND,
    pt: T.POINT,
    ti: T.TTTOOLINFOA
});
T.LPTTHITTESTINFOA = Pointer(Struct('_TT_HITTESTINFOA', {
    hwnd: T.HWND,
    pt: T.POINT,
    ti: T.TTTOOLINFOA
}));
T.TTHITTESTINFOW = Struct('_TT_HITTESTINFOW', {
    hwnd: T.HWND,
    pt: T.POINT,
    ti: T.TTTOOLINFOW
});
T.LPTTHITTESTINFOW = Pointer(Struct('_TT_HITTESTINFOW', {
    hwnd: T.HWND,
    pt: T.POINT,
    ti: T.TTTOOLINFOW
}));
T.NMTTDISPINFOA = Struct('tagNMTTDISPINFOA', {
    hdr: T.NMHDR,
    lpszText: T.LPSTR,
    szText: ArrayType(T.CHAR, 80),
    hinst: T.HINSTANCE,
    uFlags: T.UINT,
    lParam: T.LPARAM
});
T.LPNMTTDISPINFOA = Pointer(Struct('tagNMTTDISPINFOA', {
    hdr: T.NMHDR,
    lpszText: T.LPSTR,
    szText: ArrayType(T.CHAR, 80),
    hinst: T.HINSTANCE,
    uFlags: T.UINT,
    lParam: T.LPARAM
}));
T.NMTTDISPINFOW = Struct('tagNMTTDISPINFOW', {
    hdr: T.NMHDR,
    lpszText: T.LPWSTR,
    szText: ArrayType(T.WCHAR, 80),
    hinst: T.HINSTANCE,
    uFlags: T.UINT,
    lParam: T.LPARAM
});
T.LPNMTTDISPINFOW = Pointer(Struct('tagNMTTDISPINFOW', {
    hdr: T.NMHDR,
    lpszText: T.LPWSTR,
    szText: ArrayType(T.WCHAR, 80),
    hinst: T.HINSTANCE,
    uFlags: T.UINT,
    lParam: T.LPARAM
}));
T.TTGETTITLE = Struct('_TTGETTITLE', {
    dwSize: T.DWORD,
    uTitleBitmap: T.UINT,
    cch: T.UINT,
    pszTitle: Pointer(T.WCHAR)
});
T.PTTGETTITLE = Pointer(Struct('_TTGETTITLE', {
    dwSize: T.DWORD,
    uTitleBitmap: T.UINT,
    cch: T.UINT,
    pszTitle: Pointer(T.WCHAR)
}));
T.REBARINFO = Struct('tagREBARINFO', {
    cbSize: T.UINT,
    fMask: T.UINT,
    himl: T.HIMAGELIST
});
T.LPREBARINFO = Pointer(Struct('tagREBARINFO', {
    cbSize: T.UINT,
    fMask: T.UINT,
    himl: T.HIMAGELIST
}));
T.REBARBANDINFOA = Struct('tagREBARBANDINFOA', {
    cbSize: T.UINT,
    fMask: T.UINT,
    fStyle: T.UINT,
    clrFore: T.COLORREF,
    clrBack: T.COLORREF,
    lpText: T.LPSTR,
    cch: T.UINT,
    iImage: T.INT,
    hwndChild: T.HWND,
    cxMinChild: T.UINT,
    cyMinChild: T.UINT,
    cx: T.UINT,
    hbmBack: T.HBITMAP,
    wID: T.UINT,
    cyChild: T.UINT,
    cyMaxChild: T.UINT,
    cyIntegral: T.UINT,
    cxIdeal: T.UINT,
    lParam: T.LPARAM,
    cxHeader: T.UINT,
    rcChevronLocation: T.RECT,
    uChevronState: T.UINT
});
T.LPREBARBANDINFOA = Pointer(Struct('tagREBARBANDINFOA', {
    cbSize: T.UINT,
    fMask: T.UINT,
    fStyle: T.UINT,
    clrFore: T.COLORREF,
    clrBack: T.COLORREF,
    lpText: T.LPSTR,
    cch: T.UINT,
    iImage: T.INT,
    hwndChild: T.HWND,
    cxMinChild: T.UINT,
    cyMinChild: T.UINT,
    cx: T.UINT,
    hbmBack: T.HBITMAP,
    wID: T.UINT,
    cyChild: T.UINT,
    cyMaxChild: T.UINT,
    cyIntegral: T.UINT,
    cxIdeal: T.UINT,
    lParam: T.LPARAM,
    cxHeader: T.UINT,
    rcChevronLocation: T.RECT,
    uChevronState: T.UINT
}));
T.LPCREBARBANDINFOA = Pointer(T.REBARBANDINFOA);
T.REBARBANDINFOW = Struct('tagREBARBANDINFOW', {
    cbSize: T.UINT,
    fMask: T.UINT,
    fStyle: T.UINT,
    clrFore: T.COLORREF,
    clrBack: T.COLORREF,
    lpText: T.LPWSTR,
    cch: T.UINT,
    iImage: T.INT,
    hwndChild: T.HWND,
    cxMinChild: T.UINT,
    cyMinChild: T.UINT,
    cx: T.UINT,
    hbmBack: T.HBITMAP,
    wID: T.UINT,
    cyChild: T.UINT,
    cyMaxChild: T.UINT,
    cyIntegral: T.UINT,
    cxIdeal: T.UINT,
    lParam: T.LPARAM,
    cxHeader: T.UINT,
    rcChevronLocation: T.RECT,
    uChevronState: T.UINT
});
T.LPREBARBANDINFOW = Pointer(Struct('tagREBARBANDINFOW', {
    cbSize: T.UINT,
    fMask: T.UINT,
    fStyle: T.UINT,
    clrFore: T.COLORREF,
    clrBack: T.COLORREF,
    lpText: T.LPWSTR,
    cch: T.UINT,
    iImage: T.INT,
    hwndChild: T.HWND,
    cxMinChild: T.UINT,
    cyMinChild: T.UINT,
    cx: T.UINT,
    hbmBack: T.HBITMAP,
    wID: T.UINT,
    cyChild: T.UINT,
    cyMaxChild: T.UINT,
    cyIntegral: T.UINT,
    cxIdeal: T.UINT,
    lParam: T.LPARAM,
    cxHeader: T.UINT,
    rcChevronLocation: T.RECT,
    uChevronState: T.UINT
}));
T.LPCREBARBANDINFOW = Pointer(T.REBARBANDINFOW);
T.NMREBARCHILDSIZE = Struct('tagNMREBARCHILDSIZE', {
    hdr: T.NMHDR,
    uBand: T.UINT,
    wID: T.UINT,
    rcChild: T.RECT,
    rcBand: T.RECT
});
T.LPNMREBARCHILDSIZE = Pointer(Struct('tagNMREBARCHILDSIZE', {
    hdr: T.NMHDR,
    uBand: T.UINT,
    wID: T.UINT,
    rcChild: T.RECT,
    rcBand: T.RECT
}));
T.NMREBAR = Struct('tagNMREBAR', {
    hdr: T.NMHDR,
    dwMask: T.DWORD,
    uBand: T.UINT,
    fStyle: T.UINT,
    wID: T.UINT,
    lParam: T.LPARAM
});
T.LPNMREBAR = Pointer(Struct('tagNMREBAR', {
    hdr: T.NMHDR,
    dwMask: T.DWORD,
    uBand: T.UINT,
    fStyle: T.UINT,
    wID: T.UINT,
    lParam: T.LPARAM
}));
T.NMRBAUTOSIZE = Struct('tagNMRBAUTOSIZE', {
    hdr: T.NMHDR,
    fChanged: T.BOOL,
    rcTarget: T.RECT,
    rcActual: T.RECT
});
T.LPNMRBAUTOSIZE = Pointer(Struct('tagNMRBAUTOSIZE', {
    hdr: T.NMHDR,
    fChanged: T.BOOL,
    rcTarget: T.RECT,
    rcActual: T.RECT
}));
T.NMREBARCHEVRON = Struct('tagNMREBARCHEVRON', {
    hdr: T.NMHDR,
    uBand: T.UINT,
    wID: T.UINT,
    lParam: T.LPARAM,
    rc: T.RECT,
    lParamNM: T.LPARAM
});
T.LPNMREBARCHEVRON = Pointer(Struct('tagNMREBARCHEVRON', {
    hdr: T.NMHDR,
    uBand: T.UINT,
    wID: T.UINT,
    lParam: T.LPARAM,
    rc: T.RECT,
    lParamNM: T.LPARAM
}));
T.RBHITTESTINFO = Struct('_RB_HITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT,
    iBand: T.INT
});
T.LPRBHITTESTINFO = Pointer(Struct('_RB_HITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT,
    iBand: T.INT
}));
T.NMREBARAUTOBREAK = Struct('tagNMREBARAUTOBREAK', {
    hdr: T.NMHDR,
    uBand: T.UINT,
    wID: T.UINT,
    lParam: T.LPARAM,
    uMsg: T.UINT,
    fStyleCurrent: T.UINT,
    fAutoBreak: T.BOOL
});
T.LPNMREBARAUTOBREAK = Pointer(Struct('tagNMREBARAUTOBREAK', {
    hdr: T.NMHDR,
    uBand: T.UINT,
    wID: T.UINT,
    lParam: T.LPARAM,
    uMsg: T.UINT,
    fStyleCurrent: T.UINT,
    fAutoBreak: T.BOOL
}));
T.NMPGSCROLL = Struct('', {
    hdr: T.NMHDR,
    fwKeys: T.WORD,
    rcParent: T.RECT,
    iDir: T.INT,
    iXpos: T.INT,
    iYpos: T.INT,
    iScroll: T.INT
});
T.LPNMPGSCROLL = Pointer(Struct('', {
    hdr: T.NMHDR,
    fwKeys: T.WORD,
    rcParent: T.RECT,
    iDir: T.INT,
    iXpos: T.INT,
    iYpos: T.INT,
    iScroll: T.INT
}));
T.NMPGCALCSIZE = Struct('', {
    hdr: T.NMHDR,
    dwFlag: T.DWORD,
    iWidth: T.INT,
    iHeight: T.INT
});
T.LPNMPGCALCSIZE = Pointer(Struct('', {
    hdr: T.NMHDR,
    dwFlag: T.DWORD,
    iWidth: T.INT,
    iHeight: T.INT
}));
T.HTREEITEM = Pointer(Struct('_TREEITEM', null));
T.TVITEMA = Struct('', {
    mask: T.UINT,
    hItem: T.HTREEITEM,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    iSelectedImage: T.INT,
    cChildren: T.INT,
    lParam: T.LPARAM
});
T.LPTVITEMA = Pointer(Struct('', {
    mask: T.UINT,
    hItem: T.HTREEITEM,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    iSelectedImage: T.INT,
    cChildren: T.INT,
    lParam: T.LPARAM
}));
T.TVITEMW = Struct('', {
    mask: T.UINT,
    hItem: T.HTREEITEM,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    iSelectedImage: T.INT,
    cChildren: T.INT,
    lParam: T.LPARAM
});
T.LPTVITEMW = Pointer(Struct('', {
    mask: T.UINT,
    hItem: T.HTREEITEM,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    iSelectedImage: T.INT,
    cChildren: T.INT,
    lParam: T.LPARAM
}));
T.TVITEMEXA = Struct('', {
    mask: T.UINT,
    hItem: T.HTREEITEM,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    iSelectedImage: T.INT,
    cChildren: T.INT,
    lParam: T.LPARAM,
    iIntegral: T.INT,
    uStateEx: T.UINT,
    hwnd: T.HWND,
    iExpandedImage: T.INT
});
T.LPTVITEMEXA = Pointer(Struct('', {
    mask: T.UINT,
    hItem: T.HTREEITEM,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    iSelectedImage: T.INT,
    cChildren: T.INT,
    lParam: T.LPARAM,
    iIntegral: T.INT,
    uStateEx: T.UINT,
    hwnd: T.HWND,
    iExpandedImage: T.INT
}));
T.TVITEMEXW = Struct('', {
    mask: T.UINT,
    hItem: T.HTREEITEM,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    iSelectedImage: T.INT,
    cChildren: T.INT,
    lParam: T.LPARAM,
    iIntegral: T.INT,
    uStateEx: T.UINT,
    hwnd: T.HWND,
    iExpandedImage: T.INT
});
T.LPTVITEMEXW = Pointer(Struct('', {
    mask: T.UINT,
    hItem: T.HTREEITEM,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    iSelectedImage: T.INT,
    cChildren: T.INT,
    lParam: T.LPARAM,
    iIntegral: T.INT,
    uStateEx: T.UINT,
    hwnd: T.HWND,
    iExpandedImage: T.INT
}));
T.TVINSERTSTRUCTA = Struct('tagTVINSERTSTRUCTA', {
    hParent: T.HTREEITEM,
    hInsertAfter: T.HTREEITEM,
    __unnamed0: Union('', {
        itemex: T.TVITEMEXA,
        item: T.TVITEMA
    })
});
T.LPTVINSERTSTRUCTA = Pointer(Struct('tagTVINSERTSTRUCTA', {
    hParent: T.HTREEITEM,
    hInsertAfter: T.HTREEITEM,
    __unnamed0: Union('', {
        itemex: T.TVITEMEXA,
        item: T.TVITEMA
    })
}));
T.TVINSERTSTRUCTW = Struct('tagTVINSERTSTRUCTW', {
    hParent: T.HTREEITEM,
    hInsertAfter: T.HTREEITEM,
    __unnamed0: Union('', {
        itemex: T.TVITEMEXW,
        item: T.TVITEMW
    })
});
T.LPTVINSERTSTRUCTW = Pointer(Struct('tagTVINSERTSTRUCTW', {
    hParent: T.HTREEITEM,
    hInsertAfter: T.HTREEITEM,
    __unnamed0: Union('', {
        itemex: T.TVITEMEXW,
        item: T.TVITEMW
    })
}));
T.NMTREEVIEWA = Struct('tagNMTREEVIEWA', {
    hdr: T.NMHDR,
    action: T.UINT,
    itemOld: T.TVITEMA,
    itemNew: T.TVITEMA,
    ptDrag: T.POINT
});
T.LPNMTREEVIEWA = Pointer(Struct('tagNMTREEVIEWA', {
    hdr: T.NMHDR,
    action: T.UINT,
    itemOld: T.TVITEMA,
    itemNew: T.TVITEMA,
    ptDrag: T.POINT
}));
T.NMTREEVIEWW = Struct('tagNMTREEVIEWW', {
    hdr: T.NMHDR,
    action: T.UINT,
    itemOld: T.TVITEMW,
    itemNew: T.TVITEMW,
    ptDrag: T.POINT
});
T.LPNMTREEVIEWW = Pointer(Struct('tagNMTREEVIEWW', {
    hdr: T.NMHDR,
    action: T.UINT,
    itemOld: T.TVITEMW,
    itemNew: T.TVITEMW,
    ptDrag: T.POINT
}));
T.NMTVDISPINFOA = Struct('tagTVDISPINFOA', {
    hdr: T.NMHDR,
    item: T.TVITEMA
});
T.LPNMTVDISPINFOA = Pointer(Struct('tagTVDISPINFOA', {
    hdr: T.NMHDR,
    item: T.TVITEMA
}));
T.NMTVDISPINFOW = Struct('tagTVDISPINFOW', {
    hdr: T.NMHDR,
    item: T.TVITEMW
});
T.LPNMTVDISPINFOW = Pointer(Struct('tagTVDISPINFOW', {
    hdr: T.NMHDR,
    item: T.TVITEMW
}));
T.NMTVDISPINFOEXA = Struct('tagTVDISPINFOEXA', {
    hdr: T.NMHDR,
    item: T.TVITEMEXA
});
T.LPNMTVDISPINFOEXA = Pointer(Struct('tagTVDISPINFOEXA', {
    hdr: T.NMHDR,
    item: T.TVITEMEXA
}));
T.NMTVDISPINFOEXW = Struct('tagTVDISPINFOEXW', {
    hdr: T.NMHDR,
    item: T.TVITEMEXW
});
T.LPNMTVDISPINFOEXW = Pointer(Struct('tagTVDISPINFOEXW', {
    hdr: T.NMHDR,
    item: T.TVITEMEXW
}));
T.PFNTVCOMPARE = Pointer(Fn(T.INT, [[T.LPARAM], [T.LPARAM], [T.LPARAM]]));
T.TVSORTCB = Struct('tagTVSORTCB', {
    hParent: T.HTREEITEM,
    lpfnCompare: T.PFNTVCOMPARE,
    lParam: T.LPARAM
});
T.LPTVSORTCB = Pointer(Struct('tagTVSORTCB', {
    hParent: T.HTREEITEM,
    lpfnCompare: T.PFNTVCOMPARE,
    lParam: T.LPARAM
}));
T.TVHITTESTINFO = Struct('tagTVHITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT,
    hItem: T.HTREEITEM
});
T.LPTVHITTESTINFO = Pointer(Struct('tagTVHITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT,
    hItem: T.HTREEITEM
}));
T.NMTVCUSTOMDRAW = Struct('tagNMTVCUSTOMDRAW', {
    nmcd: T.NMCUSTOMDRAW,
    clrText: T.COLORREF,
    clrTextBk: T.COLORREF,
    iLevel: T.INT
});
T.LPNMTVCUSTOMDRAW = Pointer(Struct('tagNMTVCUSTOMDRAW', {
    nmcd: T.NMCUSTOMDRAW,
    clrText: T.COLORREF,
    clrTextBk: T.COLORREF,
    iLevel: T.INT
}));
T.NMTVGETINFOTIPA = Struct('tagNMTVGETINFOTIPA', {
    hdr: T.NMHDR,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    hItem: T.HTREEITEM,
    lParam: T.LPARAM
});
T.LPNMTVGETINFOTIPA = Pointer(Struct('tagNMTVGETINFOTIPA', {
    hdr: T.NMHDR,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    hItem: T.HTREEITEM,
    lParam: T.LPARAM
}));
T.NMTVGETINFOTIPW = Struct('tagNMTVGETINFOTIPW', {
    hdr: T.NMHDR,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    hItem: T.HTREEITEM,
    lParam: T.LPARAM
});
T.LPNMTVGETINFOTIPW = Pointer(Struct('tagNMTVGETINFOTIPW', {
    hdr: T.NMHDR,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    hItem: T.HTREEITEM,
    lParam: T.LPARAM
}));
T.NMTVKEYDOWN = Struct('tagTVKEYDOWN', {
    hdr: T.NMHDR,
    wVKey: T.WORD,
    flags: T.UINT
});
T.LPNMTVKEYDOWN = Pointer(Struct('tagTVKEYDOWN', {
    hdr: T.NMHDR,
    wVKey: T.WORD,
    flags: T.UINT
}));
T.LVITEMA = Struct('tagLVITEMA', {
    mask: T.UINT,
    iItem: T.INT,
    iSubItem: T.INT,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM,
    iIndent: T.INT,
    iGroupId: T.INT,
    cColumns: T.UINT,
    puColumns: T.PUINT,
    piColFmt: T.PINT,
    iGroup: T.INT
});
T.LPLVITEMA = Pointer(Struct('tagLVITEMA', {
    mask: T.UINT,
    iItem: T.INT,
    iSubItem: T.INT,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM,
    iIndent: T.INT,
    iGroupId: T.INT,
    cColumns: T.UINT,
    puColumns: T.PUINT,
    piColFmt: T.PINT,
    iGroup: T.INT
}));
T.LVITEMW = Struct('tagLVITEMW', {
    mask: T.UINT,
    iItem: T.INT,
    iSubItem: T.INT,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM,
    iIndent: T.INT,
    iGroupId: T.INT,
    cColumns: T.UINT,
    puColumns: T.PUINT,
    piColFmt: T.PINT,
    iGroup: T.INT
});
T.LPLVITEMW = Pointer(Struct('tagLVITEMW', {
    mask: T.UINT,
    iItem: T.INT,
    iSubItem: T.INT,
    state: T.UINT,
    stateMask: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM,
    iIndent: T.INT,
    iGroupId: T.INT,
    cColumns: T.UINT,
    puColumns: T.PUINT,
    piColFmt: T.PINT,
    iGroup: T.INT
}));
T.LVSETINFOTIP = Struct('LVSETINFOTIP', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    pszText: T.LPWSTR,
    iItem: T.i32,
    iSubItem: T.i32
});
T.PLVSETINFOTIP = Pointer(Struct('LVSETINFOTIP', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    pszText: T.LPWSTR,
    iItem: T.i32,
    iSubItem: T.i32
}));
T.LVBKIMAGEA = Struct('tagLVBKIMAGEA', {
    ulFlags: T.ULONG,
    hbm: T.HBITMAP,
    pszImage: T.LPSTR,
    cchImageMax: T.UINT,
    xOffsetPercent: T.i32,
    yOffsetPercent: T.i32
});
T.LPLVBKIMAGEA = Pointer(Struct('tagLVBKIMAGEA', {
    ulFlags: T.ULONG,
    hbm: T.HBITMAP,
    pszImage: T.LPSTR,
    cchImageMax: T.UINT,
    xOffsetPercent: T.i32,
    yOffsetPercent: T.i32
}));
T.LVBKIMAGEW = Struct('tagLVBKIMAGEW', {
    ulFlags: T.ULONG,
    hbm: T.HBITMAP,
    pszImage: T.LPWSTR,
    cchImageMax: T.UINT,
    xOffsetPercent: T.i32,
    yOffsetPercent: T.i32
});
T.LPLVBKIMAGEW = Pointer(Struct('tagLVBKIMAGEW', {
    ulFlags: T.ULONG,
    hbm: T.HBITMAP,
    pszImage: T.LPWSTR,
    cchImageMax: T.UINT,
    xOffsetPercent: T.i32,
    yOffsetPercent: T.i32
}));
T.LVCOLUMNA = Struct('tagLVCOLUMNA', {
    mask: T.UINT,
    fmt: T.INT,
    cx: T.INT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iSubItem: T.INT,
    iImage: T.INT,
    iOrder: T.INT,
    cxMin: T.INT,
    cxDefault: T.INT,
    cxIdeal: T.INT
});
T.LPLVCOLUMNA = Pointer(Struct('tagLVCOLUMNA', {
    mask: T.UINT,
    fmt: T.INT,
    cx: T.INT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iSubItem: T.INT,
    iImage: T.INT,
    iOrder: T.INT,
    cxMin: T.INT,
    cxDefault: T.INT,
    cxIdeal: T.INT
}));
T.LVCOLUMNW = Struct('tagLVCOLUMNW', {
    mask: T.UINT,
    fmt: T.INT,
    cx: T.INT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iSubItem: T.INT,
    iImage: T.INT,
    iOrder: T.INT,
    cxMin: T.INT,
    cxDefault: T.INT,
    cxIdeal: T.INT
});
T.LPLVCOLUMNW = Pointer(Struct('tagLVCOLUMNW', {
    mask: T.UINT,
    fmt: T.INT,
    cx: T.INT,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iSubItem: T.INT,
    iImage: T.INT,
    iOrder: T.INT,
    cxMin: T.INT,
    cxDefault: T.INT,
    cxIdeal: T.INT
}));
T.NMLISTVIEW = Struct('tagNMLISTVIEW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    iSubItem: T.INT,
    uNewState: T.UINT,
    uOldState: T.UINT,
    uChanged: T.UINT,
    ptAction: T.POINT,
    lParam: T.LPARAM
});
T.LPNMLISTVIEW = Pointer(Struct('tagNMLISTVIEW', {
    hdr: T.NMHDR,
    iItem: T.INT,
    iSubItem: T.INT,
    uNewState: T.UINT,
    uOldState: T.UINT,
    uChanged: T.UINT,
    ptAction: T.POINT,
    lParam: T.LPARAM
}));
T.NMITEMACTIVATE = Struct('tagNMITEMACTIVATE', {
    hdr: T.NMHDR,
    iItem: T.i32,
    iSubItem: T.i32,
    uNewState: T.UINT,
    uOldState: T.UINT,
    uChanged: T.UINT,
    ptAction: T.POINT,
    lParam: T.LPARAM,
    uKeyFlags: T.UINT
});
T.LPNMITEMACTIVATE = Pointer(Struct('tagNMITEMACTIVATE', {
    hdr: T.NMHDR,
    iItem: T.i32,
    iSubItem: T.i32,
    uNewState: T.UINT,
    uOldState: T.UINT,
    uChanged: T.UINT,
    ptAction: T.POINT,
    lParam: T.LPARAM,
    uKeyFlags: T.UINT
}));
T.NMLVDISPINFOA = Struct('tagLVDISPINFO', {
    hdr: T.NMHDR,
    item: T.LVITEMA
});
T.LPNMLVDISPINFOA = Pointer(Struct('tagLVDISPINFO', {
    hdr: T.NMHDR,
    item: T.LVITEMA
}));
T.NMLVDISPINFOW = Struct('tagLVDISPINFOW', {
    hdr: T.NMHDR,
    item: T.LVITEMW
});
T.LPNMLVDISPINFOW = Pointer(Struct('tagLVDISPINFOW', {
    hdr: T.NMHDR,
    item: T.LVITEMW
}));
T.NMLVKEYDOWN = Struct('tagLVKEYDOWN', {
    hdr: T.NMHDR,
    wVKey: T.WORD,
    flags: T.UINT
});
T.LPNMLVKEYDOWN = Pointer(Struct('tagLVKEYDOWN', {
    hdr: T.NMHDR,
    wVKey: T.WORD,
    flags: T.UINT
}));
T.NMLVGETINFOTIPA = Struct('tagNMLVGETINFOTIPA', {
    hdr: T.NMHDR,
    dwFlags: T.DWORD,
    pszText: T.LPSTR,
    cchTextMax: T.i32,
    iItem: T.i32,
    iSubItem: T.i32,
    lParam: T.LPARAM
});
T.LPNMLVGETINFOTIPA = Pointer(Struct('tagNMLVGETINFOTIPA', {
    hdr: T.NMHDR,
    dwFlags: T.DWORD,
    pszText: T.LPSTR,
    cchTextMax: T.i32,
    iItem: T.i32,
    iSubItem: T.i32,
    lParam: T.LPARAM
}));
T.NMLVGETINFOTIPW = Struct('tagNMLVGETINFOTIPW', {
    hdr: T.NMHDR,
    dwFlags: T.DWORD,
    pszText: T.LPWSTR,
    cchTextMax: T.i32,
    iItem: T.i32,
    iSubItem: T.i32,
    lParam: T.LPARAM
});
T.LPNMLVGETINFOTIPW = Pointer(Struct('tagNMLVGETINFOTIPW', {
    hdr: T.NMHDR,
    dwFlags: T.DWORD,
    pszText: T.LPWSTR,
    cchTextMax: T.i32,
    iItem: T.i32,
    iSubItem: T.i32,
    lParam: T.LPARAM
}));
T.LVHITTESTINFO = Struct('tagLVHITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT,
    iItem: T.INT,
    iSubItem: T.INT,
    iGroup: T.INT
});
T.LPLVHITTESTINFO = Pointer(Struct('tagLVHITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT,
    iItem: T.INT,
    iSubItem: T.INT,
    iGroup: T.INT
}));
T.LVFINDINFOA = Struct('tagLVFINDINFOA', {
    flags: T.UINT,
    psz: T.LPCSTR,
    lParam: T.LPARAM,
    pt: T.POINT,
    vkDirection: T.UINT
});
T.LPLVFINDINFOA = Pointer(Struct('tagLVFINDINFOA', {
    flags: T.UINT,
    psz: T.LPCSTR,
    lParam: T.LPARAM,
    pt: T.POINT,
    vkDirection: T.UINT
}));
T.LVFINDINFOW = Struct('tagLVFINDINFOW', {
    flags: T.UINT,
    psz: T.LPCWSTR,
    lParam: T.LPARAM,
    pt: T.POINT,
    vkDirection: T.UINT
});
T.LPLVFINDINFOW = Pointer(Struct('tagLVFINDINFOW', {
    flags: T.UINT,
    psz: T.LPCWSTR,
    lParam: T.LPARAM,
    pt: T.POINT,
    vkDirection: T.UINT
}));
T.LVGROUP = Struct('LVGROUP', {
    cbSize: T.UINT,
    mask: T.UINT,
    pszHeader: T.LPWSTR,
    cchHeader: T.INT,
    pszFooter: T.LPWSTR,
    cchFooter: T.INT,
    iGroupId: T.INT,
    stateMask: T.UINT,
    state: T.UINT,
    uAlign: T.UINT,
    pszSubtitle: T.LPWSTR,
    cchSubtitle: T.UINT,
    pszTask: T.LPWSTR,
    cchTask: T.UINT,
    pszDescriptionTop: T.LPWSTR,
    cchDescriptionTop: T.UINT,
    pszDescriptionBottom: T.LPWSTR,
    cchDescriptionBottom: T.UINT,
    iTitleImage: T.INT,
    iExtendedImage: T.INT,
    iFirstItem: T.INT,
    cItems: T.UINT,
    pszSubsetTitle: T.LPWSTR,
    cchSubsetTitle: T.UINT
});
T.PLVGROUP = Pointer(Struct('LVGROUP', {
    cbSize: T.UINT,
    mask: T.UINT,
    pszHeader: T.LPWSTR,
    cchHeader: T.INT,
    pszFooter: T.LPWSTR,
    cchFooter: T.INT,
    iGroupId: T.INT,
    stateMask: T.UINT,
    state: T.UINT,
    uAlign: T.UINT,
    pszSubtitle: T.LPWSTR,
    cchSubtitle: T.UINT,
    pszTask: T.LPWSTR,
    cchTask: T.UINT,
    pszDescriptionTop: T.LPWSTR,
    cchDescriptionTop: T.UINT,
    pszDescriptionBottom: T.LPWSTR,
    cchDescriptionBottom: T.UINT,
    iTitleImage: T.INT,
    iExtendedImage: T.INT,
    iFirstItem: T.INT,
    cItems: T.UINT,
    pszSubsetTitle: T.LPWSTR,
    cchSubsetTitle: T.UINT
}));
T.LVGROUPMETRICS = Struct('LVGROUPMETRICS', {
    cbSize: T.UINT,
    mask: T.UINT,
    Left: T.UINT,
    Top: T.UINT,
    Right: T.UINT,
    Bottom: T.UINT,
    crLeft: T.COLORREF,
    crTop: T.COLORREF,
    crRight: T.COLORREF,
    crBottom: T.COLORREF,
    crRightHeader: T.COLORREF,
    crFooter: T.COLORREF
});
T.PLVGROUPMETRICS = Pointer(Struct('LVGROUPMETRICS', {
    cbSize: T.UINT,
    mask: T.UINT,
    Left: T.UINT,
    Top: T.UINT,
    Right: T.UINT,
    Bottom: T.UINT,
    crLeft: T.COLORREF,
    crTop: T.COLORREF,
    crRight: T.COLORREF,
    crBottom: T.COLORREF,
    crRightHeader: T.COLORREF,
    crFooter: T.COLORREF
}));
T.PFNLVGROUPCOMPARE = Pointer(Fn(T.INT, [[T.INT], [T.INT], [Pointer(null)]]));
T.LVINSERTGROUPSORTED = Struct('LVINSERTGROUPSORTED', {
    pfnGroupCompare: T.PFNLVGROUPCOMPARE,
    pvData: Pointer(T.LPVOID),
    lvGroup: T.LVGROUP
});
T.PLVINSERTGROUPSORTED = Pointer(Struct('LVINSERTGROUPSORTED', {
    pfnGroupCompare: T.PFNLVGROUPCOMPARE,
    pvData: Pointer(T.LPVOID),
    lvGroup: T.LVGROUP
}));
T.LVTILEINFO = Struct('LVTILEINFO', {
    cbSize: T.UINT,
    iItem: T.i32,
    cColumns: T.UINT,
    puColumns: T.PUINT,
    piColFmt: Pointer(T.i32)
});
T.PLVTILEINFO = Pointer(Struct('LVTILEINFO', {
    cbSize: T.UINT,
    iItem: T.i32,
    cColumns: T.UINT,
    puColumns: T.PUINT,
    piColFmt: Pointer(T.i32)
}));
T.LVTILEVIEWINFO = Struct('LVTILEVIEWINFO', {
    cbSize: T.UINT,
    dwMask: T.DWORD,
    dwFlags: T.DWORD,
    sizeTile: T.SIZE,
    cLines: T.i32,
    rcLabelMargin: T.RECT
});
T.PLVTILEVIEWINFO = Pointer(Struct('LVTILEVIEWINFO', {
    cbSize: T.UINT,
    dwMask: T.DWORD,
    dwFlags: T.DWORD,
    sizeTile: T.SIZE,
    cLines: T.i32,
    rcLabelMargin: T.RECT
}));
T.LVINSERTMARK = Struct('LVINSERTMARK', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iItem: T.i32,
    dwReserved: T.DWORD
});
T.PLVINSERTMARK = Pointer(Struct('LVINSERTMARK', {
    cbSize: T.UINT,
    dwFlags: T.DWORD,
    iItem: T.i32,
    dwReserved: T.DWORD
}));
T.TCHITTESTINFO = Struct('tagTCHITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT
});
T.LPTCHITTESTINFO = Pointer(Struct('tagTCHITTESTINFO', {
    pt: T.POINT,
    flags: T.UINT
}));
T.PFNLVCOMPARE = Pointer(Fn(T.INT, [[T.LPARAM], [T.LPARAM], [T.LPARAM]]));
T.NMLVCUSTOMDRAW = Struct('tagNMLVCUSTOMDRAW', {
    nmcd: T.NMCUSTOMDRAW,
    clrText: T.COLORREF,
    clrTextBk: T.COLORREF,
    iSubItem: T.i32,
    dwItemType: T.DWORD,
    clrFace: T.COLORREF,
    iIconEffect: T.i32,
    iIconPhase: T.i32,
    iPartId: T.i32,
    iStateId: T.i32,
    rcText: T.RECT,
    uAlign: T.UINT
});
T.LPNMLVCUSTOMDRAW = Pointer(Struct('tagNMLVCUSTOMDRAW', {
    nmcd: T.NMCUSTOMDRAW,
    clrText: T.COLORREF,
    clrTextBk: T.COLORREF,
    iSubItem: T.i32,
    dwItemType: T.DWORD,
    clrFace: T.COLORREF,
    iIconEffect: T.i32,
    iIconPhase: T.i32,
    iPartId: T.i32,
    iStateId: T.i32,
    rcText: T.RECT,
    uAlign: T.UINT
}));
T.NMLVCACHEHINT = Struct('tagNMLVCACHEHINT', {
    hdr: T.NMHDR,
    iFrom: T.INT,
    iTo: T.INT
});
T.LPNMLVCACHEHINT = Pointer(Struct('tagNMLVCACHEHINT', {
    hdr: T.NMHDR,
    iFrom: T.INT,
    iTo: T.INT
}));
T.NMLVFINDITEMA = Struct('tagNMLVFINDITEMA', {
    hdr: T.NMHDR,
    iStart: T.i32,
    lvfi: T.LVFINDINFOA
});
T.LPNMLVFINDITEMA = Pointer(Struct('tagNMLVFINDITEMA', {
    hdr: T.NMHDR,
    iStart: T.i32,
    lvfi: T.LVFINDINFOA
}));
T.NMLVFINDITEMW = Struct('tagNMLVFINDITEMW', {
    hdr: T.NMHDR,
    iStart: T.i32,
    lvfi: T.LVFINDINFOW
});
T.LPNMLVFINDITEMW = Pointer(Struct('tagNMLVFINDITEMW', {
    hdr: T.NMHDR,
    iStart: T.i32,
    lvfi: T.LVFINDINFOW
}));
T.NMLVODSTATECHANGE = Struct('tagNMLVODSTATECHANGE', {
    hdr: T.NMHDR,
    iFrom: T.i32,
    iTo: T.i32,
    uNewState: T.UINT,
    uOldState: T.UINT
});
T.LPNMLVODSTATECHANGE = Pointer(Struct('tagNMLVODSTATECHANGE', {
    hdr: T.NMHDR,
    iFrom: T.i32,
    iTo: T.i32,
    uNewState: T.UINT,
    uOldState: T.UINT
}));
T.NMLVSCROLL = Struct('NMLVSCROLL', {
    hdr: T.NMHDR,
    dx: T.i32,
    dy: T.i32
});
T.LPNMLVSCROLL = Pointer(Struct('NMLVSCROLL', {
    hdr: T.NMHDR,
    dx: T.i32,
    dy: T.i32
}));
T.TCITEMHEADERA = Struct('tagTCITEMHEADERA', {
    mask: T.UINT,
    lpReserved1: T.UINT,
    lpReserved2: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.i32,
    iImage: T.i32
});
T.LPTCITEMHEADERA = Pointer(Struct('tagTCITEMHEADERA', {
    mask: T.UINT,
    lpReserved1: T.UINT,
    lpReserved2: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.i32,
    iImage: T.i32
}));
T.TCITEMHEADERW = Struct('tagTCITEMHEADERW', {
    mask: T.UINT,
    lpReserved1: T.UINT,
    lpReserved2: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.i32,
    iImage: T.i32
});
T.LPTCITEMHEADERW = Pointer(Struct('tagTCITEMHEADERW', {
    mask: T.UINT,
    lpReserved1: T.UINT,
    lpReserved2: T.UINT,
    pszText: T.LPWSTR,
    cchTextMax: T.i32,
    iImage: T.i32
}));
T.TCITEMA = Struct('tagTCITEMA', {
    mask: T.UINT,
    dwState: T.UINT,
    dwStateMask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM
});
T.LPTCITEMA = Pointer(Struct('tagTCITEMA', {
    mask: T.UINT,
    dwState: T.UINT,
    dwStateMask: T.UINT,
    pszText: T.LPSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM
}));
T.TCITEMW = Struct('tagTCITEMW', {
    mask: T.UINT,
    dwState: T.DWORD,
    dwStateMask: T.DWORD,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM
});
T.LPTCITEMW = Pointer(Struct('tagTCITEMW', {
    mask: T.UINT,
    dwState: T.DWORD,
    dwStateMask: T.DWORD,
    pszText: T.LPWSTR,
    cchTextMax: T.INT,
    iImage: T.INT,
    lParam: T.LPARAM
}));
T.NMTCKEYDOWN = Struct('tagTCKEYDOWN', {
    hdr: T.NMHDR,
    wVKey: T.WORD,
    flags: T.UINT
});
T.COMBOBOXEXITEMA = Struct('tagCOMBOBOXEXITEMA', {
    mask: T.UINT,
    iItem: T.INT_PTR,
    pszText: T.LPSTR,
    cchTextMax: T.i32,
    iImage: T.i32,
    iSelectedImage: T.i32,
    iOverlay: T.i32,
    iIndent: T.i32,
    lParam: T.LPARAM
});
T.PCOMBOBOXEXITEMA = Pointer(Struct('tagCOMBOBOXEXITEMA', {
    mask: T.UINT,
    iItem: T.INT_PTR,
    pszText: T.LPSTR,
    cchTextMax: T.i32,
    iImage: T.i32,
    iSelectedImage: T.i32,
    iOverlay: T.i32,
    iIndent: T.i32,
    lParam: T.LPARAM
}));
T.PCCOMBOEXITEMA = Pointer(T.COMBOBOXEXITEMA);
T.COMBOBOXEXITEMW = Struct('tagCOMBOBOXEXITEMW', {
    mask: T.UINT,
    iItem: T.INT_PTR,
    pszText: T.LPWSTR,
    cchTextMax: T.i32,
    iImage: T.i32,
    iSelectedImage: T.i32,
    iOverlay: T.i32,
    iIndent: T.i32,
    lParam: T.LPARAM
});
T.PCOMBOBOXEXITEMW = Pointer(Struct('tagCOMBOBOXEXITEMW', {
    mask: T.UINT,
    iItem: T.INT_PTR,
    pszText: T.LPWSTR,
    cchTextMax: T.i32,
    iImage: T.i32,
    iSelectedImage: T.i32,
    iOverlay: T.i32,
    iIndent: T.i32,
    lParam: T.LPARAM
}));
T.PCCOMBOEXITEMW = Pointer(T.COMBOBOXEXITEMW);
T.NMCBEENDEDITW = Struct('tagNMCBEENDEDITW', {
    hdr: T.NMHDR,
    fChanged: T.BOOL,
    iNewSelection: T.i32,
    szText: ArrayType(T.WCHAR, 260),
    iWhy: T.i32
});
T.LPNMCBEENDEDITW = Pointer(Struct('tagNMCBEENDEDITW', {
    hdr: T.NMHDR,
    fChanged: T.BOOL,
    iNewSelection: T.i32,
    szText: ArrayType(T.WCHAR, 260),
    iWhy: T.i32
}));
T.PNMCBEENDEDITW = Pointer(Struct('tagNMCBEENDEDITW', {
    hdr: T.NMHDR,
    fChanged: T.BOOL,
    iNewSelection: T.i32,
    szText: ArrayType(T.WCHAR, 260),
    iWhy: T.i32
}));
T.NMCBEENDEDITA = Struct('tagNMCBEENDEDITA', {
    hdr: T.NMHDR,
    fChanged: T.BOOL,
    iNewSelection: T.i32,
    szText: ArrayType(T.char, 260),
    iWhy: T.i32
});
T.LPNMCBEENDEDITA = Pointer(Struct('tagNMCBEENDEDITA', {
    hdr: T.NMHDR,
    fChanged: T.BOOL,
    iNewSelection: T.i32,
    szText: ArrayType(T.char, 260),
    iWhy: T.i32
}));
T.PNMCBEENDEDITA = Pointer(Struct('tagNMCBEENDEDITA', {
    hdr: T.NMHDR,
    fChanged: T.BOOL,
    iNewSelection: T.i32,
    szText: ArrayType(T.char, 260),
    iWhy: T.i32
}));
T.NMCOMBOBOXEXA = Struct('', {
    hdr: T.NMHDR,
    ceItem: T.COMBOBOXEXITEMA
});
T.PNMCOMBOBOXEXA = Pointer(Struct('', {
    hdr: T.NMHDR,
    ceItem: T.COMBOBOXEXITEMA
}));
T.NMCOMBOBOXEXW = Struct('', {
    hdr: T.NMHDR,
    ceItem: T.COMBOBOXEXITEMW
});
T.PNMCOMBOBOXEXW = Pointer(Struct('', {
    hdr: T.NMHDR,
    ceItem: T.COMBOBOXEXITEMW
}));
T.NMCBEDRAGBEGINA = Struct('', {
    hdr: T.NMHDR,
    iItemid: T.i32,
    szText: ArrayType(T.char, 260)
});
T.PNMCBEDRAGBEGINA = Pointer(Struct('', {
    hdr: T.NMHDR,
    iItemid: T.i32,
    szText: ArrayType(T.char, 260)
}));
T.LPNMCBEDRAGBEGINA = Pointer(Struct('', {
    hdr: T.NMHDR,
    iItemid: T.i32,
    szText: ArrayType(T.char, 260)
}));
T.NMCBEDRAGBEGINW = Struct('', {
    hdr: T.NMHDR,
    iItemid: T.i32,
    szText: ArrayType(T.WCHAR, 260)
});
T.PNMCBEDRAGBEGINW = Pointer(Struct('', {
    hdr: T.NMHDR,
    iItemid: T.i32,
    szText: ArrayType(T.WCHAR, 260)
}));
T.LPNMCBEDRAGBEGINW = Pointer(Struct('', {
    hdr: T.NMHDR,
    iItemid: T.i32,
    szText: ArrayType(T.WCHAR, 260)
}));
T.NMIPADDRESS = Struct('tagNMIPADDRESS', {
    hdr: T.NMHDR,
    iField: T.INT,
    iValue: T.INT
});
T.LPNMIPADDRESS = Pointer(Struct('tagNMIPADDRESS', {
    hdr: T.NMHDR,
    iField: T.INT,
    iValue: T.INT
}));
T.MCHITTESTINFO = Struct('', {
    cbSize: T.UINT,
    pt: T.POINT,
    uHit: T.UINT,
    st: T.SYSTEMTIME,
    rc: T.RECT,
    iOffset: T.INT,
    iRow: T.INT,
    iCol: T.INT
});
T.PMCHITTESTINFO = Pointer(Struct('', {
    cbSize: T.UINT,
    pt: T.POINT,
    uHit: T.UINT,
    st: T.SYSTEMTIME,
    rc: T.RECT,
    iOffset: T.INT,
    iRow: T.INT,
    iCol: T.INT
}));
T.NMSELCHANGE = Struct('tagNMSELCHANGE', {
    nmhdr: T.NMHDR,
    stSelStart: T.SYSTEMTIME,
    stSelEnd: T.SYSTEMTIME
});
T.LPNMSELCHANGE = Pointer(Struct('tagNMSELCHANGE', {
    nmhdr: T.NMHDR,
    stSelStart: T.SYSTEMTIME,
    stSelEnd: T.SYSTEMTIME
}));
T.NMSELECT = T.NMSELCHANGE;
T.LPNMSELECT = Pointer(T.NMSELCHANGE);
T.MONTHDAYSTATE = T.DWORD;
T.LPMONTHDAYSTATE = Pointer(T.DWORD);
T.NMDAYSTATE = Struct('tagNMDAYSTATE', {
    nmhdr: T.NMHDR,
    stStart: T.SYSTEMTIME,
    cDayState: T.i32,
    prgDayState: T.LPMONTHDAYSTATE
});
T.LPNMDAYSTATE = Pointer(Struct('tagNMDAYSTATE', {
    nmhdr: T.NMHDR,
    stStart: T.SYSTEMTIME,
    cDayState: T.i32,
    prgDayState: T.LPMONTHDAYSTATE
}));
T.NMDATETIMECHANGE = Struct('tagNMDATETIMECHANGE', {
    nmhdr: T.NMHDR,
    dwFlags: T.DWORD,
    st: T.SYSTEMTIME
});
T.LPNMDATETIMECHANGE = Pointer(Struct('tagNMDATETIMECHANGE', {
    nmhdr: T.NMHDR,
    dwFlags: T.DWORD,
    st: T.SYSTEMTIME
}));
T.NMDATETIMESTRINGA = Struct('tagNMDATETIMESTRINGA', {
    nmhdr: T.NMHDR,
    pszUserString: T.LPCSTR,
    st: T.SYSTEMTIME,
    dwFlags: T.DWORD
});
T.LPNMDATETIMESTRINGA = Pointer(Struct('tagNMDATETIMESTRINGA', {
    nmhdr: T.NMHDR,
    pszUserString: T.LPCSTR,
    st: T.SYSTEMTIME,
    dwFlags: T.DWORD
}));
T.NMDATETIMESTRINGW = Struct('tagNMDATETIMESTRINGW', {
    nmhdr: T.NMHDR,
    pszUserString: T.LPCWSTR,
    st: T.SYSTEMTIME,
    dwFlags: T.DWORD
});
T.LPNMDATETIMESTRINGW = Pointer(Struct('tagNMDATETIMESTRINGW', {
    nmhdr: T.NMHDR,
    pszUserString: T.LPCWSTR,
    st: T.SYSTEMTIME,
    dwFlags: T.DWORD
}));
T.NMDATETIMESTRING = T.NMDATETIMESTRINGA;
T.LPNMDATETIMESTRING = T.LPNMDATETIMESTRINGA;
T.NMDATETIMEWMKEYDOWNA = Struct('tagNMDATETIMEWMKEYDOWNA', {
    nmhdr: T.NMHDR,
    nVirtKey: T.i32,
    pszFormat: T.LPCSTR,
    st: T.SYSTEMTIME
});
T.LPNMDATETIMEWMKEYDOWNA = Pointer(Struct('tagNMDATETIMEWMKEYDOWNA', {
    nmhdr: T.NMHDR,
    nVirtKey: T.i32,
    pszFormat: T.LPCSTR,
    st: T.SYSTEMTIME
}));
T.NMDATETIMEWMKEYDOWNW = Struct('tagNMDATETIMEWMKEYDOWNW', {
    nmhdr: T.NMHDR,
    nVirtKey: T.i32,
    pszFormat: T.LPCWSTR,
    st: T.SYSTEMTIME
});
T.LPNMDATETIMEWMKEYDOWNW = Pointer(Struct('tagNMDATETIMEWMKEYDOWNW', {
    nmhdr: T.NMHDR,
    nVirtKey: T.i32,
    pszFormat: T.LPCWSTR,
    st: T.SYSTEMTIME
}));
T.NMDATETIMEWMKEYDOWN = T.NMDATETIMEWMKEYDOWNA;
T.LPNMDATETIMEWMKEYDOWN = T.LPNMDATETIMEWMKEYDOWNA;
T.NMDATETIMEFORMATA = Struct('tagNMDATETIMEFORMATA', {
    nmhdr: T.NMHDR,
    pszFormat: T.LPCSTR,
    st: T.SYSTEMTIME,
    pszDisplay: T.LPCSTR,
    szDisplay: ArrayType(T.CHAR, 64)
});
T.LPNMDATETIMEFORMATA = Pointer(Struct('tagNMDATETIMEFORMATA', {
    nmhdr: T.NMHDR,
    pszFormat: T.LPCSTR,
    st: T.SYSTEMTIME,
    pszDisplay: T.LPCSTR,
    szDisplay: ArrayType(T.CHAR, 64)
}));
T.NMDATETIMEFORMATW = Struct('tagNMDATETIMEFORMATW', {
    nmhdr: T.NMHDR,
    pszFormat: T.LPCWSTR,
    st: T.SYSTEMTIME,
    pszDisplay: T.LPCWSTR,
    szDisplay: ArrayType(T.WCHAR, 64)
});
T.LPNMDATETIMEFORMATW = Pointer(Struct('tagNMDATETIMEFORMATW', {
    nmhdr: T.NMHDR,
    pszFormat: T.LPCWSTR,
    st: T.SYSTEMTIME,
    pszDisplay: T.LPCWSTR,
    szDisplay: ArrayType(T.WCHAR, 64)
}));
T.NMDATETIMEFORMAT = T.NMDATETIMEFORMATA;
T.LPNMDATETIMEFORMAT = T.LPNMDATETIMEFORMATA;
T.NMDATETIMEFORMATQUERYA = Struct('tagNMDATETIMEFORMATQUERYA', {
    nmhdr: T.NMHDR,
    pszFormat: T.LPCSTR,
    szMax: T.SIZE
});
T.LPNMDATETIMEFORMATQUERYA = Pointer(Struct('tagNMDATETIMEFORMATQUERYA', {
    nmhdr: T.NMHDR,
    pszFormat: T.LPCSTR,
    szMax: T.SIZE
}));
T.NMDATETIMEFORMATQUERYW = Struct('tagNMDATETIMEFORMATQUERYW', {
    nmhdr: T.NMHDR,
    pszFormat: T.LPCWSTR,
    szMax: T.SIZE
});
T.LPNMDATETIMEFORMATQUERYW = Pointer(Struct('tagNMDATETIMEFORMATQUERYW', {
    nmhdr: T.NMHDR,
    pszFormat: T.LPCWSTR,
    szMax: T.SIZE
}));
T.NMDATETIMEFORMATQUERY = T.NMDATETIMEFORMATQUERYA;
T.LPNMDATETIMEFORMATQUERY = T.LPNMDATETIMEFORMATQUERYA;
T.HDSA = Pointer(Struct('_DSA', null));
T.PFNDSAENUMCALLBACK = Pointer(Fn(T.INT, [[T.LPVOID], [T.LPVOID]]));
T.HDPA = Pointer(Struct('_DPA', null));
T.PFNDPAENUMCALLBACK = Pointer(Fn(T.INT, [[T.LPVOID], [T.LPVOID]]));
T.PFNDPACOMPARE = Pointer(Fn(T.INT, [[T.LPVOID], [T.LPVOID], [T.LPARAM]]));
T.PFNDPAMERGE = Pointer(Fn(T.PVOID, [[T.UINT], [T.PVOID], [T.PVOID], [T.LPARAM]]));
T.DPASTREAMINFO = Struct('_DPASTREAMINFO', {
    iPos: T.INT,
    pvItem: T.LPVOID
});
T.PFNDPASTREAM = Pointer(Fn(T.HRESULT, [[Pointer(T.DPASTREAMINFO)], [Pointer(Struct('IStream', null))], [T.LPVOID]]));
T.LITEM = Struct('tagLITEM', {
    mask: T.UINT,
    iLink: T.i32,
    state: T.UINT,
    stateMask: T.UINT,
    szID: ArrayType(T.WCHAR, 48),
    szUrl: ArrayType(T.WCHAR, 2084)
});
T.PLITEM = Pointer(Struct('tagLITEM', {
    mask: T.UINT,
    iLink: T.i32,
    state: T.UINT,
    stateMask: T.UINT,
    szID: ArrayType(T.WCHAR, 48),
    szUrl: ArrayType(T.WCHAR, 2084)
}));
T.LHITTESTINFO = Struct('tagLHITTESTINFO', {
    pt: T.POINT,
    item: T.LITEM
});
T.PLHITTESTINFO = Pointer(Struct('tagLHITTESTINFO', {
    pt: T.POINT,
    item: T.LITEM
}));
T.NMLINK = Struct('tagNMLINK', {
    hdr: T.NMHDR,
    item: T.LITEM
});
T.PNMLINK = Pointer(Struct('tagNMLINK', {
    hdr: T.NMHDR,
    item: T.LITEM
}));
T.NMLVLINK = Struct('tagNMLVLINK', {
    hdr: T.NMHDR,
    link: T.LITEM,
    iItem: T.i32,
    iSubItem: T.i32
});
T.PNMLVLINK = Pointer(Struct('tagNMLVLINK', {
    hdr: T.NMHDR,
    link: T.LITEM,
    iItem: T.i32,
    iSubItem: T.i32
}));
T.TASKDIALOG_FLAGS = T.i32;
T.TASKDIALOG_COMMON_BUTTON_FLAGS = T.i32;
T.TASKDIALOG_BUTTON = Struct('_TASKDIALOG_BUTTON', {
    nButtonID: T.i32,
    pszButtonText: T.PCWSTR
});
T.PFTASKDIALOGCALLBACK = Pointer(Fn(T.HRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM], [T.LONG_PTR]]));
T.TASKDIALOGCONFIG = Struct('_TASKDIALOGCONFIG', {
    cbSize: T.UINT,
    hwndParent: T.HWND,
    hInstance: T.HINSTANCE,
    dwFlags: T.TASKDIALOG_FLAGS,
    dwCommonButtons: T.TASKDIALOG_COMMON_BUTTON_FLAGS,
    pszWindowTitle: T.PCWSTR,
    __unnamed0: Union('', {
        hMainIcon: T.HICON,
        pszMainIcon: T.PCWSTR
    }),
    pszMainInstruction: T.PCWSTR,
    pszContent: T.PCWSTR,
    cButtons: T.UINT,
    pButtons: Pointer(T.TASKDIALOG_BUTTON),
    nDefaultButton: T.i32,
    cRadioButtons: T.UINT,
    pRadioButtons: Pointer(T.TASKDIALOG_BUTTON),
    nDefaultRadioButton: T.i32,
    pszVerificationText: T.PCWSTR,
    pszExpandedInformation: T.PCWSTR,
    pszExpandedControlText: T.PCWSTR,
    pszCollapsedControlText: T.PCWSTR,
    __unnamed1: Union('', {
        hFooterIcon: T.HICON,
        pszFooterIcon: T.PCWSTR
    }),
    pszFooter: T.PCWSTR,
    pfCallback: T.PFTASKDIALOGCALLBACK,
    lpCallbackData: T.LONG_PTR,
    cxWidth: T.UINT
});
var globals = {
    __debugbreak: Fn(null, [[null]]),
    __mingw_get_crt_info: Fn(Pointer(T.char), [[null]]),
    GUID_NULL: T.IID,
    _imp___pctype: Pointer(Pointer(T.u16)),
    _imp___wctype: Pointer(Pointer(T.u16)),
    _imp___pwctype: Pointer(Pointer(T.u16)),
    __newclmap: Pointer(T.u8),
    __newcumap: Pointer(T.u8),
    __ptlocinfo: T.pthreadlocinfo,
    __ptmbcinfo: T.pthreadmbcinfo,
    __globallocalestatus: T.i32,
    __locale_changed: T.i32,
    __initiallocinfo: Struct('threadlocaleinfostruct', null),
    __initiallocalestructinfo: T._locale_tstruct,
    __updatetlocinfo: Fn(T.pthreadlocinfo, [[null]]),
    __updatetmbcinfo: Fn(T.pthreadmbcinfo, [[null]]),
    _isctype: Fn(T.i32, [[T.i32, '_C'], [T.i32, '_Type']]),
    _isctype_l: Fn(T.i32, [[T.i32, '_C'], [T.i32, '_Type'], [T._locale_t, '_Locale']]),
    isalpha: Fn(T.i32, [[T.i32, '_C']]),
    _isalpha_l: Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']]),
    isupper: Fn(T.i32, [[T.i32, '_C']]),
    _isupper_l: Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']]),
    islower: Fn(T.i32, [[T.i32, '_C']]),
    _islower_l: Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']]),
    isdigit: Fn(T.i32, [[T.i32, '_C']]),
    _isdigit_l: Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']]),
    isxdigit: Fn(T.i32, [[T.i32, '_C']]),
    _isxdigit_l: Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']]),
    isspace: Fn(T.i32, [[T.i32, '_C']]),
    _isspace_l: Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']]),
    ispunct: Fn(T.i32, [[T.i32, '_C']]),
    _ispunct_l: Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']]),
    isalnum: Fn(T.i32, [[T.i32, '_C']]),
    _isalnum_l: Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']]),
    isprint: Fn(T.i32, [[T.i32, '_C']]),
    _isprint_l: Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']]),
    isgraph: Fn(T.i32, [[T.i32, '_C']]),
    _isgraph_l: Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']]),
    iscntrl: Fn(T.i32, [[T.i32, '_C']]),
    _iscntrl_l: Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']]),
    toupper: Fn(T.i32, [[T.i32, '_C']]),
    tolower: Fn(T.i32, [[T.i32, '_C']]),
    _tolower: Fn(T.i32, [[T.i32, '_C']]),
    _tolower_l: Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']]),
    _toupper: Fn(T.i32, [[T.i32, '_C']]),
    _toupper_l: Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']]),
    __isascii: Fn(T.i32, [[T.i32, '_C']]),
    __toascii: Fn(T.i32, [[T.i32, '_C']]),
    __iscsymf: Fn(T.i32, [[T.i32, '_C']]),
    __iscsym: Fn(T.i32, [[T.i32, '_C']]),
    isblank: Fn(T.i32, [[T.i32, '_C']]),
    iswalpha: Fn(T.i32, [[T.wint_t, '_C']]),
    _iswalpha_l: Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']]),
    iswupper: Fn(T.i32, [[T.wint_t, '_C']]),
    _iswupper_l: Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']]),
    iswlower: Fn(T.i32, [[T.wint_t, '_C']]),
    _iswlower_l: Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']]),
    iswdigit: Fn(T.i32, [[T.wint_t, '_C']]),
    _iswdigit_l: Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']]),
    iswxdigit: Fn(T.i32, [[T.wint_t, '_C']]),
    _iswxdigit_l: Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']]),
    iswspace: Fn(T.i32, [[T.wint_t, '_C']]),
    _iswspace_l: Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']]),
    iswpunct: Fn(T.i32, [[T.wint_t, '_C']]),
    _iswpunct_l: Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']]),
    iswalnum: Fn(T.i32, [[T.wint_t, '_C']]),
    _iswalnum_l: Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']]),
    iswprint: Fn(T.i32, [[T.wint_t, '_C']]),
    _iswprint_l: Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']]),
    iswgraph: Fn(T.i32, [[T.wint_t, '_C']]),
    _iswgraph_l: Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']]),
    iswcntrl: Fn(T.i32, [[T.wint_t, '_C']]),
    _iswcntrl_l: Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']]),
    iswascii: Fn(T.i32, [[T.wint_t, '_C']]),
    isleadbyte: Fn(T.i32, [[T.i32, '_C']]),
    _isleadbyte_l: Fn(T.i32, [[T.i32, '_C'], [T._locale_t, '_Locale']]),
    towupper: Fn(T.wint_t, [[T.wint_t, '_C']]),
    _towupper_l: Fn(T.wint_t, [[T.wint_t, '_C'], [T._locale_t, '_Locale']]),
    towlower: Fn(T.wint_t, [[T.wint_t, '_C']]),
    _towlower_l: Fn(T.wint_t, [[T.wint_t, '_C'], [T._locale_t, '_Locale']]),
    iswctype: Fn(T.i32, [[T.wint_t, '_C'], [T.wctype_t, '_Type']]),
    _iswctype_l: Fn(T.i32, [[T.wint_t, '_C'], [T.wctype_t, '_Type'], [T._locale_t, '_Locale']]),
    __iswcsymf: Fn(T.i32, [[T.wint_t, '_C']]),
    _iswcsymf_l: Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']]),
    __iswcsym: Fn(T.i32, [[T.wint_t, '_C']]),
    _iswcsym_l: Fn(T.i32, [[T.wint_t, '_C'], [T._locale_t, '_Locale']]),
    is_wctype: Fn(T.i32, [[T.wint_t, '_C'], [T.wctype_t, '_Type']]),
    iswblank: Fn(T.i32, [[T.wint_t, '_C']]),
    _imp____mb_cur_max: Pointer(T.i32),
    _errno: Fn(Pointer(T.i32), [[null]]),
    _set_errno: Fn(T.errno_t, [[T.i32, '_Value']]),
    _get_errno: Fn(T.errno_t, [[Pointer(T.i32), '_Value']]),
    __threadid: Fn(T.u32, [[null]]),
    __threadhandle: Fn(T.uintptr_t, [[null]]),
    _memccpy: Fn(Pointer(null), [[Pointer(null), '_Dst'], [Pointer(null), '_Src'], [T.i32, '_Val'], [T.size_t, '_MaxCount']]),
    memchr: Fn(Pointer(null), [[Pointer(null), '_Buf'], [T.i32, '_Val'], [T.size_t, '_MaxCount']]),
    _memicmp: Fn(T.i32, [[Pointer(null), '_Buf1'], [Pointer(null), '_Buf2'], [T.size_t, '_Size']]),
    _memicmp_l: Fn(T.i32, [[Pointer(null), '_Buf1'], [Pointer(null), '_Buf2'], [T.size_t, '_Size'], [T._locale_t, '_Locale']]),
    memcmp: Fn(T.i32, [[Pointer(null), '_Buf1'], [Pointer(null), '_Buf2'], [T.size_t, '_Size']]),
    memcpy: Fn(Pointer(null), [[Pointer(null), '_Dst'], [Pointer(null), '_Src'], [T.size_t, '_Size']]),
    mempcpy: Fn(Pointer(null), [[Pointer(null), '_Dst'], [Pointer(null), '_Src'], [T.size_t, '_Size']]),
    memset: Fn(Pointer(null), [[Pointer(null), '_Dst'], [T.i32, '_Val'], [T.size_t, '_Size']]),
    memccpy: Fn(Pointer(null), [[Pointer(null), '_Dst'], [Pointer(null), '_Src'], [T.i32, '_Val'], [T.size_t, '_Size']]),
    memicmp: Fn(T.i32, [[Pointer(null), '_Buf1'], [Pointer(null), '_Buf2'], [T.size_t, '_Size']]),
    _strset: Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [T.i32, '_Val']]),
    _strset_l: Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [T.i32, '_Val'], [T._locale_t, '_Locale']]),
    strcpy: Fn(Pointer(T.char), [[Pointer(T.char), '_Dest'], [Pointer(T.char), '_Source']]),
    strcat: Fn(Pointer(T.char), [[Pointer(T.char), '_Dest'], [Pointer(T.char), '_Source']]),
    strcmp: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2']]),
    strlen: Fn(T.size_t, [[Pointer(T.char), '_Str']]),
    strnlen: Fn(T.size_t, [[Pointer(T.char), '_Str'], [T.size_t, '_MaxCount']]),
    memmove: Fn(Pointer(null), [[Pointer(null), '_Dst'], [Pointer(null), '_Src'], [T.size_t, '_Size']]),
    _strdup: Fn(Pointer(T.char), [[Pointer(T.char), '_Src']]),
    strchr: Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [T.i32, '_Val']]),
    _stricmp: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2']]),
    _strcmpi: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2']]),
    _stricmp_l: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T._locale_t, '_Locale']]),
    strcoll: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2']]),
    _strcoll_l: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T._locale_t, '_Locale']]),
    _stricoll: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2']]),
    _stricoll_l: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T._locale_t, '_Locale']]),
    _strncoll: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T.size_t, '_MaxCount']]),
    _strncoll_l: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']]),
    _strnicoll: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T.size_t, '_MaxCount']]),
    _strnicoll_l: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']]),
    strcspn: Fn(T.size_t, [[Pointer(T.char), '_Str'], [Pointer(T.char), '_Control']]),
    _strerror: Fn(Pointer(T.char), [[Pointer(T.char), '_ErrMsg']]),
    strerror: Fn(Pointer(T.char), [[T.i32]]),
    _strlwr: Fn(Pointer(T.char), [[Pointer(T.char), '_String']]),
    strlwr_l: Fn(Pointer(T.char), [[Pointer(T.char), '_String'], [T._locale_t, '_Locale']]),
    strncat: Fn(Pointer(T.char), [[Pointer(T.char), '_Dest'], [Pointer(T.char), '_Source'], [T.size_t, '_Count']]),
    strncmp: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T.size_t, '_MaxCount']]),
    _strnicmp: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T.size_t, '_MaxCount']]),
    _strnicmp_l: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']]),
    strncpy: Fn(Pointer(T.char), [[Pointer(T.char), '_Dest'], [Pointer(T.char), '_Source'], [T.size_t, '_Count']]),
    _strnset: Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [T.i32, '_Val'], [T.size_t, '_MaxCount']]),
    _strnset_l: Fn(Pointer(T.char), [[Pointer(T.char), 'str'], [T.i32, 'c'], [T.size_t, 'count'], [T._locale_t, '_Locale']]),
    strpbrk: Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [Pointer(T.char), '_Control']]),
    strrchr: Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [T.i32, '_Ch']]),
    _strrev: Fn(Pointer(T.char), [[Pointer(T.char), '_Str']]),
    strspn: Fn(T.size_t, [[Pointer(T.char), '_Str'], [Pointer(T.char), '_Control']]),
    strstr: Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [Pointer(T.char), '_SubStr']]),
    strtok: Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [Pointer(T.char), '_Delim']]),
    _strupr: Fn(Pointer(T.char), [[Pointer(T.char), '_String']]),
    _strupr_l: Fn(Pointer(T.char), [[Pointer(T.char), '_String'], [T._locale_t, '_Locale']]),
    strxfrm: Fn(T.size_t, [[Pointer(T.char), '_Dst'], [Pointer(T.char), '_Src'], [T.size_t, '_MaxCount']]),
    _strxfrm_l: Fn(T.size_t, [[Pointer(T.char), '_Dst'], [Pointer(T.char), '_Src'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']]),
    strdup: Fn(Pointer(T.char), [[Pointer(T.char), '_Src']]),
    strcmpi: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2']]),
    stricmp: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str2']]),
    strlwr: Fn(Pointer(T.char), [[Pointer(T.char), '_Str']]),
    strnicmp: Fn(T.i32, [[Pointer(T.char), '_Str1'], [Pointer(T.char), '_Str'], [T.size_t, '_MaxCount']]),
    strncasecmp: Fn(T.i32, [[Pointer(T.char)], [Pointer(T.char)], [T.size_t]]),
    strcasecmp: Fn(T.i32, [[Pointer(T.char)], [Pointer(T.char)]]),
    strnset: Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [T.i32, '_Val'], [T.size_t, '_MaxCount']]),
    strrev: Fn(Pointer(T.char), [[Pointer(T.char), '_Str']]),
    strset: Fn(Pointer(T.char), [[Pointer(T.char), '_Str'], [T.i32, '_Val']]),
    strupr: Fn(Pointer(T.char), [[Pointer(T.char), '_Str']]),
    _wcsdup: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str']]),
    wcscat: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Source']]),
    wcschr: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [T.wchar_t, '_Ch']]),
    wcscmp: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2']]),
    wcscpy: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Source']]),
    wcscspn: Fn(T.size_t, [[Pointer(T.wchar_t), '_Str'], [Pointer(T.wchar_t), '_Control']]),
    wcslen: Fn(T.size_t, [[Pointer(T.wchar_t), '_Str']]),
    wcsnlen: Fn(T.size_t, [[Pointer(T.wchar_t), '_Src'], [T.size_t, '_MaxCount']]),
    wcsncat: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Source'], [T.size_t, '_Count']]),
    wcsncmp: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T.size_t, '_MaxCount']]),
    wcsncpy: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Source'], [T.size_t, '_Count']]),
    _wcsncpy_l: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Source'], [T.size_t, '_Count'], [T._locale_t, '_Locale']]),
    wcspbrk: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [Pointer(T.wchar_t), '_Control']]),
    wcsrchr: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [T.wchar_t, '_Ch']]),
    wcsspn: Fn(T.size_t, [[Pointer(T.wchar_t), '_Str'], [Pointer(T.wchar_t), '_Control']]),
    wcsstr: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [Pointer(T.wchar_t), '_SubStr']]),
    wcstok: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [Pointer(T.wchar_t), '_Delim']]),
    _wcserror: Fn(Pointer(T.wchar_t), [[T.i32, '_ErrNum']]),
    __wcserror: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str']]),
    _wcsicmp: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2']]),
    _wcsicmp_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T._locale_t, '_Locale']]),
    _wcsnicmp: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T.size_t, '_MaxCount']]),
    _wcsnicmp_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']]),
    _wcsnset: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [T.wchar_t, '_Val'], [T.size_t, '_MaxCount']]),
    _wcsrev: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str']]),
    _wcsset: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [T.wchar_t, '_Val']]),
    _wcslwr: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_String']]),
    _wcslwr_l: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_String'], [T._locale_t, '_Locale']]),
    _wcsupr: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_String']]),
    _wcsupr_l: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_String'], [T._locale_t, '_Locale']]),
    wcsxfrm: Fn(T.size_t, [[Pointer(T.wchar_t), '_Dst'], [Pointer(T.wchar_t), '_Src'], [T.size_t, '_MaxCount']]),
    _wcsxfrm_l: Fn(T.size_t, [[Pointer(T.wchar_t), '_Dst'], [Pointer(T.wchar_t), '_Src'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']]),
    wcscoll: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2']]),
    _wcscoll_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T._locale_t, '_Locale']]),
    _wcsicoll: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2']]),
    _wcsicoll_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T._locale_t, '_Locale']]),
    _wcsncoll: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T.size_t, '_MaxCount']]),
    _wcsncoll_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']]),
    _wcsnicoll: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T.size_t, '_MaxCount']]),
    _wcsnicoll_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']]),
    wcsdup: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str']]),
    wcsicmp: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2']]),
    wcsnicmp: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2'], [T.size_t, '_MaxCount']]),
    wcsnset: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [T.wchar_t, '_Val'], [T.size_t, '_MaxCount']]),
    wcsrev: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str']]),
    wcsset: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str'], [T.wchar_t, '_Val']]),
    wcslwr: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str']]),
    wcsupr: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Str']]),
    wcsicoll: Fn(T.i32, [[Pointer(T.wchar_t), '_Str1'], [Pointer(T.wchar_t), '_Str2']]),
    RtlFirstEntrySList: Fn(T.PSINGLE_LIST_ENTRY, [[Pointer(T.SLIST_HEADER)]]),
    RtlInitializeSListHead: Fn(null, [[T.PSLIST_HEADER]]),
    RtlInterlockedFlushSList: Fn(T.PSINGLE_LIST_ENTRY, [[T.PSLIST_HEADER]]),
    RtlInterlockedPopEntrySList: Fn(T.PSINGLE_LIST_ENTRY, [[T.PSLIST_HEADER]]),
    RtlInterlockedPushEntrySList: Fn(T.PSINGLE_LIST_ENTRY, [[T.PSLIST_HEADER], [T.PSINGLE_LIST_ENTRY]]),
    RtlQueryDepthSList: Fn(T.WORD, [[T.PSLIST_HEADER]]),
    RtlCaptureContext: Fn(null, [[Pointer(T.CONTEXT)]]),
    VerSetConditionMask: Fn(T.ULONGLONG, [[T.ULONGLONG], [T.DWORD], [T.BYTE]]),
    RtlGetProductInfo: Fn(T.BOOLEAN, [[T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.PDWORD]]),
    ActivateActCtx: Fn(T.BOOL, [[T.HANDLE], [Pointer(T.ULONG_PTR)]]),
    AddAccessAllowedAce: Fn(T.BOOL, [[T.PACL], [T.DWORD], [T.DWORD], [T.PSID]]),
    AddAccessAllowedAceEx: Fn(T.BOOL, [[T.PACL], [T.DWORD], [T.DWORD], [T.DWORD], [T.PSID]]),
    AddAccessDeniedAce: Fn(T.BOOL, [[T.PACL], [T.DWORD], [T.DWORD], [T.PSID]]),
    AddAccessDeniedAceEx: Fn(T.BOOL, [[T.PACL], [T.DWORD], [T.DWORD], [T.DWORD], [T.PSID]]),
    AddAce: Fn(T.BOOL, [[T.PACL], [T.DWORD], [T.DWORD], [T.LPVOID], [T.DWORD]]),
    AddAtomA: Fn(T.ATOM, [[T.LPCSTR]]),
    AddAtomW: Fn(T.ATOM, [[T.LPCWSTR]]),
    AddAuditAccessAce: Fn(T.BOOL, [[T.PACL], [T.DWORD], [T.DWORD], [T.PSID], [T.BOOL], [T.BOOL]]),
    AddAuditAccessAceEx: Fn(T.BOOL, [[T.PACL], [T.DWORD], [T.DWORD], [T.DWORD], [T.PSID], [T.BOOL], [T.BOOL]]),
    AddRefActCtx: Fn(null, [[T.HANDLE]]),
    AddVectoredExceptionHandler: Fn(T.PVOID, [[T.ULONG], [T.PVECTORED_EXCEPTION_HANDLER]]),
    AdjustTokenGroups: Fn(T.BOOL, [[T.HANDLE], [T.BOOL], [T.PTOKEN_GROUPS], [T.DWORD], [T.PTOKEN_GROUPS], [T.PDWORD]]),
    AccessCheck: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.HANDLE], [T.DWORD], [T.PGENERIC_MAPPING], [T.PPRIVILEGE_SET], [T.LPDWORD], [T.LPDWORD], [T.LPBOOL]]),
    AccessCheckAndAuditAlarmA: Fn(T.BOOL, [[T.LPCSTR], [T.LPVOID], [T.LPSTR], [T.LPSTR], [T.PSECURITY_DESCRIPTOR], [T.DWORD], [T.PGENERIC_MAPPING], [T.BOOL], [T.LPDWORD], [T.LPBOOL], [T.LPBOOL]]),
    AccessCheckAndAuditAlarmW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPVOID], [T.LPWSTR], [T.LPWSTR], [T.PSECURITY_DESCRIPTOR], [T.DWORD], [T.PGENERIC_MAPPING], [T.BOOL], [T.LPDWORD], [T.LPBOOL], [T.LPBOOL]]),
    AccessCheckByType: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.PSID], [T.HANDLE], [T.DWORD], [T.POBJECT_TYPE_LIST], [T.DWORD], [T.PGENERIC_MAPPING], [T.PPRIVILEGE_SET], [T.LPDWORD], [T.LPDWORD], [T.LPBOOL]]),
    AdjustTokenPrivileges: Fn(T.BOOL, [[T.HANDLE], [T.BOOL], [T.PTOKEN_PRIVILEGES], [T.DWORD], [T.PTOKEN_PRIVILEGES], [T.PDWORD]]),
    AllocateAndInitializeSid: Fn(T.BOOL, [[T.PSID_IDENTIFIER_AUTHORITY], [T.BYTE], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [Pointer(T.PSID)]]),
    AllocateLocallyUniqueId: Fn(T.BOOL, [[T.PLUID]]),
    AreAllAccessesGranted: Fn(T.BOOL, [[T.DWORD], [T.DWORD]]),
    AreAnyAccessesGranted: Fn(T.BOOL, [[T.DWORD], [T.DWORD]]),
    AreFileApisANSI: Fn(T.BOOL, [[null]]),
    AssignProcessToJobObject: Fn(T.BOOL, [[T.HANDLE], [T.HANDLE]]),
    BackupEventLogA: Fn(T.BOOL, [[T.HANDLE], [T.LPCSTR]]),
    BackupEventLogW: Fn(T.BOOL, [[T.HANDLE], [T.LPCWSTR]]),
    BackupRead: Fn(T.BOOL, [[T.HANDLE], [T.LPBYTE], [T.DWORD], [T.LPDWORD], [T.BOOL], [T.BOOL], [Pointer(T.LPVOID)]]),
    BackupSeek: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [Pointer(T.LPVOID)]]),
    BackupWrite: Fn(T.BOOL, [[T.HANDLE], [T.LPBYTE], [T.DWORD], [T.LPDWORD], [T.BOOL], [T.BOOL], [Pointer(T.LPVOID)]]),
    Beep: Fn(T.BOOL, [[T.DWORD], [T.DWORD]]),
    BeginUpdateResourceA: Fn(T.HANDLE, [[T.LPCSTR], [T.BOOL]]),
    BeginUpdateResourceW: Fn(T.HANDLE, [[T.LPCWSTR], [T.BOOL]]),
    BindIoCompletionCallback: Fn(T.BOOL, [[T.HANDLE], [T.LPOVERLAPPED_COMPLETION_ROUTINE], [T.ULONG]]),
    BuildCommDCBA: Fn(T.BOOL, [[T.LPCSTR], [T.LPDCB]]),
    BuildCommDCBW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPDCB]]),
    BuildCommDCBAndTimeoutsA: Fn(T.BOOL, [[T.LPCSTR], [T.LPDCB], [T.LPCOMMTIMEOUTS]]),
    BuildCommDCBAndTimeoutsW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPDCB], [T.LPCOMMTIMEOUTS]]),
    CallNamedPipeA: Fn(T.BOOL, [[T.LPCSTR], [T.LPVOID], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.DWORD]]),
    CallNamedPipeW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPVOID], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.DWORD]]),
    CancelIo: Fn(T.BOOL, [[T.HANDLE]]),
    CancelIoEx: Fn(T.BOOL, [[T.HANDLE], [T.LPOVERLAPPED]]),
    CancelWaitableTimer: Fn(T.BOOL, [[T.HANDLE]]),
    ChangeTimerQueueTimer: Fn(T.BOOL, [[T.HANDLE], [T.HANDLE], [T.ULONG], [T.ULONG]]),
    CheckTokenMembership: Fn(T.BOOL, [[T.HANDLE], [T.PSID], [T.PBOOL]]),
    ClearCommBreak: Fn(T.BOOL, [[T.HANDLE]]),
    ClearCommError: Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD], [T.LPCOMSTAT]]),
    ClearEventLogA: Fn(T.BOOL, [[T.HANDLE], [T.LPCSTR]]),
    ClearEventLogW: Fn(T.BOOL, [[T.HANDLE], [T.LPCWSTR]]),
    CloseEventLog: Fn(T.BOOL, [[T.HANDLE]]),
    CloseHandle: Fn(T.BOOL, [[T.HANDLE]]),
    CommConfigDialogA: Fn(T.BOOL, [[T.LPCSTR], [T.HWND], [T.LPCOMMCONFIG]]),
    CommConfigDialogW: Fn(T.BOOL, [[T.LPCWSTR], [T.HWND], [T.LPCOMMCONFIG]]),
    ConnectNamedPipe: Fn(T.BOOL, [[T.HANDLE], [T.LPOVERLAPPED]]),
    ContinueDebugEvent: Fn(T.BOOL, [[T.DWORD], [T.DWORD], [T.DWORD]]),
    ConvertToGlobalHandle: Fn(T.HANDLE, [[T.HANDLE, 'hSrc']]),
    CopyFileA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.BOOL]]),
    CopyFileW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.BOOL]]),
    CopyFileExA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPPROGRESS_ROUTINE], [T.LPVOID], [T.LPBOOL], [T.DWORD]]),
    CopyFileExW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPPROGRESS_ROUTINE], [T.LPVOID], [T.LPBOOL], [T.DWORD]]),
    CopySid: Fn(T.BOOL, [[T.DWORD], [T.PSID], [T.PSID]]),
    CompareFileTime: Fn(T.INT, [[Pointer(T.FILETIME)], [Pointer(T.FILETIME)]]),
    ConvertFiberToThread: Fn(T.BOOL, [[null]]),
    ConvertThreadToFiber: Fn(T.LPVOID, [[T.LPVOID]]),
    ConvertThreadToFiberEx: Fn(T.LPVOID, [[T.LPVOID], [T.DWORD]]),
    ConvertToAutoInheritPrivateObjectSecurity: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.PSECURITY_DESCRIPTOR], [Pointer(T.PSECURITY_DESCRIPTOR)], [Pointer(T.GUID)], [T.BOOL], [T.PGENERIC_MAPPING]]),
    CreateActCtxA: Fn(T.HANDLE, [[T.PCACTCTXA]]),
    CreateActCtxW: Fn(T.HANDLE, [[T.PCACTCTXW]]),
    CreateDirectoryA: Fn(T.BOOL, [[T.LPCSTR], [T.LPSECURITY_ATTRIBUTES]]),
    CreateDirectoryW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPSECURITY_ATTRIBUTES]]),
    CreateDirectoryExA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPSECURITY_ATTRIBUTES]]),
    CreateDirectoryExW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPSECURITY_ATTRIBUTES]]),
    CreateEventA: Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.BOOL], [T.LPCSTR]]),
    CreateEventW: Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.BOOL], [T.LPCWSTR]]),
    CreateEventExA: Fn(T.HANDLE, [[Pointer(T.SECURITY_ATTRIBUTES)], [T.LPCSTR], [T.DWORD], [T.DWORD]]),
    CreateEventExW: Fn(T.HANDLE, [[Pointer(T.SECURITY_ATTRIBUTES)], [T.LPCWSTR], [T.DWORD], [T.DWORD]]),
    CreateFiber: Fn(T.LPVOID, [[T.SIZE_T], [T.LPFIBER_START_ROUTINE], [T.LPVOID]]),
    CreateFiberEx: Fn(T.LPVOID, [[T.SIZE_T], [T.SIZE_T], [T.DWORD], [T.LPFIBER_START_ROUTINE], [T.LPVOID]]),
    CreateFileA: Fn(T.HANDLE, [[T.LPCSTR], [T.DWORD], [T.DWORD], [T.LPSECURITY_ATTRIBUTES], [T.DWORD], [T.DWORD], [T.HANDLE]]),
    CreateFileW: Fn(T.HANDLE, [[T.LPCWSTR], [T.DWORD], [T.DWORD], [T.LPSECURITY_ATTRIBUTES], [T.DWORD], [T.DWORD], [T.HANDLE]]),
    CreateFileMappingA: Fn(T.HANDLE, [[T.HANDLE], [T.LPSECURITY_ATTRIBUTES], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPCSTR]]),
    CreateFileMappingW: Fn(T.HANDLE, [[T.HANDLE], [T.LPSECURITY_ATTRIBUTES], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPCWSTR]]),
    CreateIoCompletionPort: Fn(T.HANDLE, [[T.HANDLE], [T.HANDLE], [T.ULONG_PTR], [T.DWORD]]),
    CreateJobObjectA: Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.LPCSTR]]),
    CreateJobObjectW: Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.LPCWSTR]]),
    CreateMailslotA: Fn(T.HANDLE, [[T.LPCSTR], [T.DWORD], [T.DWORD], [T.LPSECURITY_ATTRIBUTES]]),
    CreateMailslotW: Fn(T.HANDLE, [[T.LPCWSTR], [T.DWORD], [T.DWORD], [T.LPSECURITY_ATTRIBUTES]]),
    CreateMemoryResourceNotification: Fn(T.HANDLE, [[T.MEMORY_RESOURCE_NOTIFICATION_TYPE]]),
    CreateMutexA: Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.LPCSTR]]),
    CreateMutexW: Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.LPCWSTR]]),
    CreateMutexExA: Fn(T.HANDLE, [[Pointer(T.SECURITY_ATTRIBUTES)], [T.LPCSTR], [T.DWORD], [T.DWORD]]),
    CreateMutexExW: Fn(T.HANDLE, [[Pointer(T.SECURITY_ATTRIBUTES)], [T.LPCWSTR], [T.DWORD], [T.DWORD]]),
    CreateNamedPipeA: Fn(T.HANDLE, [[T.LPCSTR], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPSECURITY_ATTRIBUTES]]),
    CreateNamedPipeW: Fn(T.HANDLE, [[T.LPCWSTR], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPSECURITY_ATTRIBUTES]]),
    CreatePipe: Fn(T.BOOL, [[T.PHANDLE], [T.PHANDLE], [T.LPSECURITY_ATTRIBUTES], [T.DWORD]]),
    CreatePrivateObjectSecurity: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.PSECURITY_DESCRIPTOR], [Pointer(T.PSECURITY_DESCRIPTOR)], [T.BOOL], [T.HANDLE], [T.PGENERIC_MAPPING]]),
    CreateProcessA: Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR], [T.LPSECURITY_ATTRIBUTES], [T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.DWORD], [T.LPVOID], [T.LPCSTR], [T.LPSTARTUPINFOA], [T.LPPROCESS_INFORMATION]]),
    CreateProcessW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPWSTR], [T.LPSECURITY_ATTRIBUTES], [T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.DWORD], [T.LPVOID], [T.LPCWSTR], [T.LPSTARTUPINFOW], [T.LPPROCESS_INFORMATION]]),
    CreateProcessAsUserA: Fn(T.BOOL, [[T.HANDLE], [T.LPCSTR], [T.LPSTR], [T.LPSECURITY_ATTRIBUTES], [T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.DWORD], [T.LPVOID], [T.LPCSTR], [T.LPSTARTUPINFOA], [T.LPPROCESS_INFORMATION]]),
    CreateProcessAsUserW: Fn(T.BOOL, [[T.HANDLE], [T.LPCWSTR], [T.LPWSTR], [T.LPSECURITY_ATTRIBUTES], [T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.DWORD], [T.LPVOID], [T.LPCWSTR], [T.LPSTARTUPINFOW], [T.LPPROCESS_INFORMATION]]),
    CreateProcessWithLogonW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.LPCWSTR], [T.LPWSTR], [T.DWORD], [T.LPVOID], [T.LPCWSTR], [T.LPSTARTUPINFOW], [T.LPPROCESS_INFORMATION]]),
    CreateRemoteThread: Fn(T.HANDLE, [[T.HANDLE], [T.LPSECURITY_ATTRIBUTES], [T.SIZE_T], [T.LPTHREAD_START_ROUTINE], [T.LPVOID], [T.DWORD], [T.LPDWORD]]),
    CreateRestrictedToken: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.PSID_AND_ATTRIBUTES], [T.DWORD], [T.PLUID_AND_ATTRIBUTES], [T.DWORD], [T.PSID_AND_ATTRIBUTES], [T.PHANDLE]]),
    CreateSemaphoreA: Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.LONG], [T.LONG], [T.LPCSTR]]),
    CreateSemaphoreW: Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.LONG], [T.LONG], [T.LPCWSTR]]),
    CreateSemaphoreExA: Fn(T.HANDLE, [[Pointer(T.SECURITY_ATTRIBUTES)], [T.LONG], [T.LONG], [T.LPCSTR], [T.DWORD], [T.DWORD]]),
    CreateSemaphoreExW: Fn(T.HANDLE, [[Pointer(T.SECURITY_ATTRIBUTES)], [T.LONG], [T.LONG], [T.LPCWSTR], [T.DWORD], [T.DWORD]]),
    CreateTapePartition: Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.DWORD]]),
    CreateThread: Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.SIZE_T], [T.LPTHREAD_START_ROUTINE], [T.LPVOID], [T.DWORD], [T.LPDWORD]]),
    CreateTimerQueue: Fn(T.HANDLE, [[null]]),
    CreateTimerQueueTimer: Fn(T.BOOL, [[T.PHANDLE], [T.HANDLE], [T.WAITORTIMERCALLBACK], [T.PVOID], [T.DWORD], [T.DWORD], [T.ULONG]]),
    CreateWaitableTimerA: Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.LPCSTR]]),
    CreateWaitableTimerW: Fn(T.HANDLE, [[T.LPSECURITY_ATTRIBUTES], [T.BOOL], [T.LPCWSTR]]),
    CreateWaitableTimerExA: Fn(T.HANDLE, [[Pointer(T.SECURITY_ATTRIBUTES)], [T.LPCSTR], [T.DWORD], [T.DWORD]]),
    CreateWaitableTimerExW: Fn(T.HANDLE, [[Pointer(T.SECURITY_ATTRIBUTES)], [T.LPCWSTR], [T.DWORD], [T.DWORD]]),
    CreateWellKnownSid: Fn(T.BOOL, [[T.WELL_KNOWN_SID_TYPE], [T.PSID], [T.PSID], [Pointer(T.DWORD)]]),
    DeactivateActCtx: Fn(T.BOOL, [[T.DWORD], [T.ULONG_PTR]]),
    DebugActiveProcess: Fn(T.BOOL, [[T.DWORD]]),
    DebugActiveProcessStop: Fn(T.BOOL, [[T.DWORD]]),
    DebugBreak: Fn(null, [[null]]),
    DebugBreakProcess: Fn(T.BOOL, [[T.HANDLE]]),
    DebugSetProcessKillOnExit: Fn(T.BOOL, [[T.BOOL]]),
    DecodePointer: Fn(T.PVOID, [[T.PVOID]]),
    DecryptFileA: Fn(T.BOOL, [[T.LPCSTR], [T.DWORD]]),
    DecryptFileW: Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD]]),
    DefineDosDeviceA: Fn(T.BOOL, [[T.DWORD], [T.LPCSTR], [T.LPCSTR]]),
    DefineDosDeviceW: Fn(T.BOOL, [[T.DWORD], [T.LPCWSTR], [T.LPCWSTR]]),
    DeleteAce: Fn(T.BOOL, [[T.PACL], [T.DWORD]]),
    DeleteAtom: Fn(T.ATOM, [[T.ATOM]]),
    DeleteCriticalSection: Fn(null, [[Pointer(T.CRITICAL_SECTION), 'lpCrit']]),
    DeleteFiber: Fn(null, [[T.LPVOID]]),
    DeleteFileA: Fn(T.BOOL, [[T.LPCSTR]]),
    DeleteFileW: Fn(T.BOOL, [[T.LPCWSTR]]),
    DeleteTimerQueueEx: Fn(T.BOOL, [[T.HANDLE], [T.HANDLE]]),
    DeleteTimerQueueTimer: Fn(T.BOOL, [[T.HANDLE], [T.HANDLE], [T.HANDLE]]),
    DeleteVolumeMountPointA: Fn(T.BOOL, [[T.LPCSTR]]),
    DeleteVolumeMountPointW: Fn(T.BOOL, [[T.LPCWSTR]]),
    DeregisterEventSource: Fn(T.BOOL, [[T.HANDLE]]),
    DestroyPrivateObjectSecurity: Fn(T.BOOL, [[Pointer(T.PSECURITY_DESCRIPTOR)]]),
    DeviceIoControl: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.LPOVERLAPPED]]),
    DisableThreadLibraryCalls: Fn(T.BOOL, [[T.HMODULE]]),
    DisconnectNamedPipe: Fn(T.BOOL, [[T.HANDLE]]),
    DnsHostnameToComputerNameA: Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR], [T.LPDWORD]]),
    DnsHostnameToComputerNameW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPWSTR], [T.LPDWORD]]),
    DosDateTimeToFileTime: Fn(T.BOOL, [[T.WORD], [T.WORD], [T.LPFILETIME]]),
    DuplicateHandle: Fn(T.BOOL, [[T.HANDLE], [T.HANDLE], [T.HANDLE], [Pointer(T.HANDLE)], [T.DWORD], [T.BOOL], [T.DWORD]]),
    DuplicateToken: Fn(T.BOOL, [[T.HANDLE], [T.SECURITY_IMPERSONATION_LEVEL], [T.PHANDLE]]),
    DuplicateTokenEx: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPSECURITY_ATTRIBUTES], [T.SECURITY_IMPERSONATION_LEVEL], [T.TOKEN_TYPE], [T.PHANDLE]]),
    EscapeCommFunction: Fn(T.BOOL, [[T.HANDLE], [T.UINT]]),
    EncodePointer: Fn(T.PVOID, [[T.PVOID]]),
    EncryptFileA: Fn(T.BOOL, [[T.LPCSTR]]),
    EncryptFileW: Fn(T.BOOL, [[T.LPCWSTR]]),
    EndUpdateResourceA: Fn(T.BOOL, [[T.HANDLE], [T.BOOL]]),
    EndUpdateResourceW: Fn(T.BOOL, [[T.HANDLE], [T.BOOL]]),
    EnterCriticalSection: Fn(null, [[Pointer(T.CRITICAL_SECTION), 'lpCrit']]),
    EnumResourceLanguagesA: Fn(T.BOOL, [[T.HMODULE], [T.LPCSTR], [T.LPCSTR], [T.ENUMRESLANGPROCA], [T.LONG_PTR]]),
    EnumResourceLanguagesW: Fn(T.BOOL, [[T.HMODULE], [T.LPCWSTR], [T.LPCWSTR], [T.ENUMRESLANGPROCW], [T.LONG_PTR]]),
    EnumResourceNamesA: Fn(T.BOOL, [[T.HMODULE], [T.LPCSTR], [T.ENUMRESNAMEPROCA], [T.LONG_PTR]]),
    EnumResourceNamesW: Fn(T.BOOL, [[T.HMODULE], [T.LPCWSTR], [T.ENUMRESNAMEPROCW], [T.LONG_PTR]]),
    EnumResourceTypesA: Fn(T.BOOL, [[T.HMODULE], [T.ENUMRESTYPEPROCA], [T.LONG_PTR]]),
    EnumResourceTypesW: Fn(T.BOOL, [[T.HMODULE], [T.ENUMRESTYPEPROCW], [T.LONG_PTR]]),
    EqualSid: Fn(T.BOOL, [[T.PSID], [T.PSID]]),
    EqualPrefixSid: Fn(T.BOOL, [[T.PSID], [T.PSID]]),
    EraseTape: Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.BOOL]]),
    ExitProcess: Fn(null, [[T.DWORD]]),
    ExitThread: Fn(null, [[T.DWORD]]),
    ExpandEnvironmentStringsA: Fn(T.DWORD, [[T.LPCSTR], [T.LPSTR], [T.DWORD]]),
    ExpandEnvironmentStringsW: Fn(T.DWORD, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]]),
    FatalAppExitA: Fn(null, [[T.UINT], [T.LPCSTR]]),
    FatalAppExitW: Fn(null, [[T.UINT], [T.LPCWSTR]]),
    FatalExit: Fn(null, [[T.i32]]),
    FileEncryptionStatusA: Fn(T.BOOL, [[T.LPCSTR], [T.LPDWORD]]),
    FileEncryptionStatusW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPDWORD]]),
    FileTimeToDosDateTime: Fn(T.BOOL, [[Pointer(T.FILETIME)], [T.LPWORD], [T.LPWORD]]),
    FileTimeToLocalFileTime: Fn(T.BOOL, [[Pointer(T.FILETIME)], [T.LPFILETIME]]),
    FileTimeToSystemTime: Fn(T.BOOL, [[Pointer(T.FILETIME)], [T.LPSYSTEMTIME]]),
    FindActCtxSectionStringA: Fn(T.BOOL, [[T.DWORD], [Pointer(T.GUID)], [T.ULONG], [T.LPCSTR], [T.PACTCTX_SECTION_KEYED_DATA]]),
    FindActCtxSectionStringW: Fn(T.BOOL, [[T.DWORD], [Pointer(T.GUID)], [T.ULONG], [T.LPCWSTR], [T.PACTCTX_SECTION_KEYED_DATA]]),
    FindActCtxSectionGuid: Fn(T.BOOL, [[T.DWORD], [Pointer(T.GUID)], [T.ULONG], [Pointer(T.GUID)], [T.PACTCTX_SECTION_KEYED_DATA]]),
    FindAtomA: Fn(T.ATOM, [[T.LPCSTR]]),
    FindAtomW: Fn(T.ATOM, [[T.LPCWSTR]]),
    FindClose: Fn(T.BOOL, [[T.HANDLE]]),
    FindFirstChangeNotificationA: Fn(T.HANDLE, [[T.LPCSTR], [T.BOOL], [T.DWORD]]),
    FindFirstChangeNotificationW: Fn(T.HANDLE, [[T.LPCWSTR], [T.BOOL], [T.DWORD]]),
    FindFirstFileA: Fn(T.HANDLE, [[T.LPCSTR], [T.LPWIN32_FIND_DATAA]]),
    FindFirstFileW: Fn(T.HANDLE, [[T.LPCWSTR], [T.LPWIN32_FIND_DATAW]]),
    FindFirstFileExA: Fn(T.HANDLE, [[T.LPCSTR], [T.FINDEX_INFO_LEVELS], [T.LPVOID], [T.FINDEX_SEARCH_OPS], [T.LPVOID], [T.DWORD]]),
    FindFirstFileExW: Fn(T.HANDLE, [[T.LPCWSTR], [T.FINDEX_INFO_LEVELS], [T.LPVOID], [T.FINDEX_SEARCH_OPS], [T.LPVOID], [T.DWORD]]),
    FindFirstFreeAce: Fn(T.BOOL, [[T.PACL], [Pointer(T.LPVOID)]]),
    FindNextChangeNotification: Fn(T.BOOL, [[T.HANDLE]]),
    FindNextFileA: Fn(T.BOOL, [[T.HANDLE], [T.LPWIN32_FIND_DATAA]]),
    FindNextFileW: Fn(T.BOOL, [[T.HANDLE], [T.LPWIN32_FIND_DATAW]]),
    FindCloseChangeNotification: Fn(T.BOOL, [[T.HANDLE]]),
    FindResourceA: Fn(T.HRSRC, [[T.HMODULE], [T.LPCSTR], [T.LPCSTR]]),
    FindResourceW: Fn(T.HRSRC, [[T.HMODULE], [T.LPCWSTR], [T.LPCWSTR]]),
    FindResourceExA: Fn(T.HRSRC, [[T.HMODULE], [T.LPCSTR], [T.LPCSTR], [T.WORD]]),
    FindResourceExW: Fn(T.HRSRC, [[T.HMODULE], [T.LPCWSTR], [T.LPCWSTR], [T.WORD]]),
    FindFirstVolumeA: Fn(T.HANDLE, [[T.LPSTR], [T.DWORD]]),
    FindFirstVolumeW: Fn(T.HANDLE, [[T.LPWSTR], [T.DWORD]]),
    FindFirstVolumeMountPointA: Fn(T.HANDLE, [[T.LPCSTR], [T.LPSTR], [T.DWORD]]),
    FindFirstVolumeMountPointW: Fn(T.HANDLE, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]]),
    FindNextVolumeA: Fn(T.BOOL, [[T.HANDLE], [T.LPSTR], [T.DWORD]]),
    FindNextVolumeW: Fn(T.BOOL, [[T.HANDLE], [T.LPWSTR], [T.DWORD]]),
    FindNextVolumeMountPointA: Fn(T.BOOL, [[T.HANDLE], [T.LPSTR], [T.DWORD]]),
    FindNextVolumeMountPointW: Fn(T.BOOL, [[T.HANDLE], [T.LPWSTR], [T.DWORD]]),
    FindVolumeClose: Fn(T.BOOL, [[T.HANDLE]]),
    FindVolumeMountPointClose: Fn(T.BOOL, [[T.HANDLE]]),
    FlsAlloc: Fn(T.DWORD, [[T.PFLS_CALLBACK_FUNCTION]]),
    FlsFree: Fn(T.BOOL, [[T.DWORD]]),
    FlsGetValue: Fn(T.PVOID, [[T.DWORD]]),
    FlsSetValue: Fn(T.BOOL, [[T.DWORD], [T.PVOID]]),
    FlushFileBuffers: Fn(T.BOOL, [[T.HANDLE]]),
    FlushInstructionCache: Fn(T.BOOL, [[T.HANDLE], [T.LPCVOID], [T.SIZE_T]]),
    FlushViewOfFile: Fn(T.BOOL, [[T.LPCVOID], [T.SIZE_T]]),
    FormatMessageA: Fn(T.DWORD, [[T.DWORD], [T.LPCVOID], [T.DWORD], [T.DWORD], [T.LPSTR], [T.DWORD], [Pointer(T.va_list)]]),
    FormatMessageW: Fn(T.DWORD, [[T.DWORD], [T.LPCVOID], [T.DWORD], [T.DWORD], [T.LPWSTR], [T.DWORD], [Pointer(T.va_list)]]),
    FreeEnvironmentStringsA: Fn(T.BOOL, [[T.LPSTR]]),
    FreeEnvironmentStringsW: Fn(T.BOOL, [[T.LPWSTR]]),
    FreeLibrary: Fn(T.BOOL, [[T.HMODULE]]),
    FreeLibraryAndExitThread: Fn(null, [[T.HINSTANCE], [T.DWORD]]),
    FreeResource: Fn(T.BOOL, [[T.HGLOBAL]]),
    FreeSid: Fn(T.PVOID, [[T.PSID]]),
    GetAce: Fn(T.BOOL, [[T.PACL], [T.DWORD], [Pointer(T.LPVOID)]]),
    GetAclInformation: Fn(T.BOOL, [[T.PACL], [T.LPVOID], [T.DWORD], [T.ACL_INFORMATION_CLASS]]),
    GetAtomNameA: Fn(T.UINT, [[T.ATOM], [T.LPSTR], [T.INT]]),
    GetAtomNameW: Fn(T.UINT, [[T.ATOM], [T.LPWSTR], [T.INT]]),
    GetBinaryTypeA: Fn(T.BOOL, [[T.LPCSTR, 'lpApplicationName'], [T.LPDWORD, 'lpBinaryType']]),
    GetBinaryTypeW: Fn(T.BOOL, [[T.LPCWSTR, 'lpApplicationName'], [T.LPDWORD, 'lpBinaryType']]),
    GetCurrentActCtx: Fn(T.BOOL, [[Pointer(T.HANDLE)]]),
    GetCommConfig: Fn(T.BOOL, [[T.HANDLE], [T.LPCOMMCONFIG], [T.LPDWORD]]),
    GetCommMask: Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD]]),
    GetCommModemStatus: Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD]]),
    GetCommProperties: Fn(T.BOOL, [[T.HANDLE], [T.LPCOMMPROP]]),
    GetCommState: Fn(T.BOOL, [[T.HANDLE], [T.LPDCB]]),
    GetCommTimeouts: Fn(T.BOOL, [[T.HANDLE], [T.LPCOMMTIMEOUTS]]),
    GetCommandLineA: Fn(T.LPSTR, [[null]]),
    GetCommandLineW: Fn(T.LPWSTR, [[null]]),
    GetCompressedFileSizeA: Fn(T.DWORD, [[T.LPCSTR], [T.LPDWORD]]),
    GetCompressedFileSizeW: Fn(T.DWORD, [[T.LPCWSTR], [T.LPDWORD]]),
    GetComputerNameA: Fn(T.BOOL, [[T.LPSTR], [T.LPDWORD]]),
    GetComputerNameW: Fn(T.BOOL, [[T.LPWSTR], [T.LPDWORD]]),
    GetComputerNameExA: Fn(T.BOOL, [[T.COMPUTER_NAME_FORMAT], [T.LPSTR], [T.LPDWORD]]),
    GetComputerNameExW: Fn(T.BOOL, [[T.COMPUTER_NAME_FORMAT], [T.LPWSTR], [T.LPDWORD]]),
    GetCurrentDirectoryA: Fn(T.UINT, [[T.UINT], [T.LPSTR]]),
    GetCurrentDirectoryW: Fn(T.UINT, [[T.UINT], [T.LPWSTR]]),
    GetCurrentHwProfileA: Fn(T.BOOL, [[T.LPHW_PROFILE_INFOA]]),
    GetCurrentHwProfileW: Fn(T.BOOL, [[T.LPHW_PROFILE_INFOW]]),
    GetCurrentProcess: Fn(T.HANDLE, [[null]]),
    GetCurrentThread: Fn(T.HANDLE, [[null]]),
    GetDefaultCommConfigA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCOMMCONFIG], [T.LPDWORD]]),
    GetDefaultCommConfigW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCOMMCONFIG], [T.LPDWORD]]),
    GetDevicePowerState: Fn(T.BOOL, [[T.HANDLE], [Pointer(T.BOOL)]]),
    GetDiskFreeSpaceA: Fn(T.BOOL, [[T.LPCSTR], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD]]),
    GetDiskFreeSpaceW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD]]),
    GetDiskFreeSpaceExA: Fn(T.BOOL, [[T.LPCSTR], [T.PULARGE_INTEGER], [T.PULARGE_INTEGER], [T.PULARGE_INTEGER]]),
    GetDiskFreeSpaceExW: Fn(T.BOOL, [[T.LPCWSTR], [T.PULARGE_INTEGER], [T.PULARGE_INTEGER], [T.PULARGE_INTEGER]]),
    GetDllDirectoryA: Fn(T.DWORD, [[T.DWORD], [T.LPSTR]]),
    GetDllDirectoryW: Fn(T.DWORD, [[T.DWORD], [T.LPWSTR]]),
    GetDriveTypeA: Fn(T.UINT, [[T.LPCSTR]]),
    GetDriveTypeW: Fn(T.UINT, [[T.LPCWSTR]]),
    GetDynamicTimeZoneInformation: Fn(T.DWORD, [[T.PDYNAMIC_TIME_ZONE_INFORMATION]]),
    GetEnvironmentStringsA: Fn(T.LPSTR, [[null]]),
    GetEnvironmentStringsW: Fn(T.LPWSTR, [[null]]),
    GetEnvironmentVariableA: Fn(T.DWORD, [[T.LPCSTR], [T.LPSTR], [T.DWORD]]),
    GetEnvironmentVariableW: Fn(T.DWORD, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]]),
    GetErrorMode: Fn(T.UINT, [[null]]),
    GetEventLogInformation: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPDWORD]]),
    GetExitCodeProcess: Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD]]),
    GetExitCodeThread: Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD]]),
    GetFileAttributesA: Fn(T.DWORD, [[T.LPCSTR]]),
    GetFileAttributesW: Fn(T.DWORD, [[T.LPCWSTR]]),
    GetFileAttributesExA: Fn(T.BOOL, [[T.LPCSTR], [T.GET_FILEEX_INFO_LEVELS], [T.LPVOID]]),
    GetFileAttributesExW: Fn(T.BOOL, [[T.LPCWSTR], [T.GET_FILEEX_INFO_LEVELS], [T.LPVOID]]),
    GetFileInformationByHandle: Fn(T.BOOL, [[T.HANDLE], [Pointer(T.BY_HANDLE_FILE_INFORMATION)]]),
    GetFileSecurityA: Fn(T.BOOL, [[T.LPCSTR], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR], [T.DWORD], [T.LPDWORD]]),
    GetFileSecurityW: Fn(T.BOOL, [[T.LPCWSTR], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR], [T.DWORD], [T.LPDWORD]]),
    GetFileSize: Fn(T.DWORD, [[T.HANDLE], [T.LPDWORD]]),
    GetFileSizeEx: Fn(T.BOOL, [[T.HANDLE], [T.PLARGE_INTEGER]]),
    GetFileTime: Fn(T.BOOL, [[T.HANDLE], [T.LPFILETIME], [T.LPFILETIME], [T.LPFILETIME]]),
    GetFileType: Fn(T.DWORD, [[T.HANDLE]]),
    GetFullPathNameA: Fn(T.DWORD, [[T.LPCSTR], [T.DWORD], [T.LPSTR], [Pointer(T.LPSTR)]]),
    GetFullPathNameW: Fn(T.DWORD, [[T.LPCWSTR], [T.DWORD], [T.LPWSTR], [Pointer(T.LPWSTR)]]),
    GetHandleInformation: Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD]]),
    GetKernelObjectSecurity: Fn(T.BOOL, [[T.HANDLE], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR], [T.DWORD], [T.LPDWORD]]),
    GetLengthSid: Fn(T.DWORD, [[T.PSID]]),
    GetLocalTime: Fn(null, [[T.LPSYSTEMTIME]]),
    GetLogicalDrives: Fn(T.DWORD, [[null]]),
    GetLogicalDriveStringsA: Fn(T.UINT, [[T.UINT], [T.LPSTR]]),
    GetLogicalDriveStringsW: Fn(T.UINT, [[T.UINT], [T.LPWSTR]]),
    GetLongPathNameA: Fn(T.DWORD, [[T.LPCSTR], [T.LPSTR], [T.DWORD]]),
    GetLongPathNameW: Fn(T.DWORD, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]]),
    GetMailslotInfo: Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD]]),
    GetModuleFileNameA: Fn(T.DWORD, [[T.HMODULE], [T.LPSTR], [T.DWORD]]),
    GetModuleFileNameW: Fn(T.DWORD, [[T.HMODULE], [T.LPWSTR], [T.DWORD]]),
    GetModuleHandleA: Fn(T.HMODULE, [[T.LPCSTR]]),
    GetModuleHandleW: Fn(T.HMODULE, [[T.LPCWSTR]]),
    GetModuleHandleExA: Fn(T.BOOL, [[T.DWORD], [T.LPCSTR], [Pointer(T.HMODULE)]]),
    GetModuleHandleExW: Fn(T.BOOL, [[T.DWORD], [T.LPCWSTR], [Pointer(T.HMODULE)]]),
    GetNamedPipeHandleStateA: Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPSTR], [T.DWORD]]),
    GetNamedPipeHandleStateW: Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPWSTR], [T.DWORD]]),
    GetNamedPipeInfo: Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD]]),
    GetNativeSystemInfo: Fn(null, [[T.LPSYSTEM_INFO]]),
    GetNumberOfEventLogRecords: Fn(T.BOOL, [[T.HANDLE], [T.PDWORD]]),
    GetOldestEventLogRecord: Fn(T.BOOL, [[T.HANDLE], [T.PDWORD]]),
    GetOverlappedResult: Fn(T.BOOL, [[T.HANDLE], [T.LPOVERLAPPED], [T.LPDWORD], [T.BOOL]]),
    GetPriorityClass: Fn(T.DWORD, [[T.HANDLE]]),
    GetPrivateObjectSecurity: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR], [T.DWORD], [T.PDWORD]]),
    GetPrivateProfileIntA: Fn(T.UINT, [[T.LPCSTR], [T.LPCSTR], [T.INT], [T.LPCSTR]]),
    GetPrivateProfileIntW: Fn(T.UINT, [[T.LPCWSTR], [T.LPCWSTR], [T.INT], [T.LPCWSTR]]),
    GetPrivateProfileSectionA: Fn(T.INT, [[T.LPCSTR], [T.LPSTR], [T.DWORD], [T.LPCSTR]]),
    GetPrivateProfileSectionW: Fn(T.INT, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD], [T.LPCWSTR]]),
    GetPrivateProfileSectionNamesA: Fn(T.DWORD, [[T.LPSTR], [T.DWORD], [T.LPCSTR]]),
    GetPrivateProfileSectionNamesW: Fn(T.DWORD, [[T.LPWSTR], [T.DWORD], [T.LPCWSTR]]),
    GetPrivateProfileStringA: Fn(T.INT, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPSTR], [T.UINT], [T.LPCSTR]]),
    GetPrivateProfileStringW: Fn(T.INT, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPWSTR], [T.UINT], [T.LPCWSTR]]),
    GetPrivateProfileStructA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPVOID], [T.UINT], [T.LPCSTR]]),
    GetPrivateProfileStructW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPVOID], [T.UINT], [T.LPCWSTR]]),
    GetProcAddress: Fn(T.FARPROC, [[T.HMODULE], [T.LPCSTR]]),
    GetProcessAffinityMask: Fn(T.BOOL, [[T.HANDLE], [T.PDWORD_PTR], [T.PDWORD_PTR]]),
    GetLogicalProcessorInformation: Fn(T.BOOL, [[T.PSYSTEM_LOGICAL_PROCESSOR_INFORMATION], [T.PDWORD]]),
    GetLogicalProcessorInformationEx: Fn(T.BOOL, [[T.LOGICAL_PROCESSOR_RELATIONSHIP], [T.PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX], [T.PDWORD]]),
    GetProcessHeaps: Fn(T.DWORD, [[T.DWORD], [T.PHANDLE]]),
    GetProcessId: Fn(T.DWORD, [[T.HANDLE]]),
    GetProcessIoCounters: Fn(T.BOOL, [[T.HANDLE], [T.PIO_COUNTERS]]),
    GetProcessPriorityBoost: Fn(T.BOOL, [[T.HANDLE], [T.PBOOL]]),
    GetProcessShutdownParameters: Fn(T.BOOL, [[T.LPDWORD], [T.LPDWORD]]),
    GetProcessTimes: Fn(T.BOOL, [[T.HANDLE], [T.LPFILETIME], [T.LPFILETIME], [T.LPFILETIME], [T.LPFILETIME]]),
    GetProcessVersion: Fn(T.DWORD, [[T.DWORD]]),
    GetProcessWorkingSetSize: Fn(T.BOOL, [[T.HANDLE], [T.PSIZE_T], [T.PSIZE_T]]),
    GetProductInfo: Fn(T.BOOL, [[T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.PDWORD]]),
    GetProfileIntA: Fn(T.UINT, [[T.LPCSTR], [T.LPCSTR], [T.INT]]),
    GetProfileIntW: Fn(T.UINT, [[T.LPCWSTR], [T.LPCWSTR], [T.INT]]),
    GetProfileSectionA: Fn(T.INT, [[T.LPCSTR], [T.LPSTR], [T.DWORD]]),
    GetProfileSectionW: Fn(T.INT, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]]),
    GetProfileStringA: Fn(T.INT, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPSTR], [T.UINT]]),
    GetProfileStringW: Fn(T.INT, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPWSTR], [T.UINT]]),
    GetQueuedCompletionStatus: Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD], [T.PULONG_PTR], [Pointer(T.LPOVERLAPPED)], [T.DWORD]]),
    GetSecurityDescriptorControl: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.PSECURITY_DESCRIPTOR_CONTROL], [T.LPDWORD]]),
    GetSecurityDescriptorDacl: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.LPBOOL], [Pointer(T.PACL)], [T.LPBOOL]]),
    GetSecurityDescriptorGroup: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [Pointer(T.PSID)], [T.LPBOOL]]),
    GetSecurityDescriptorLength: Fn(T.DWORD, [[T.PSECURITY_DESCRIPTOR]]),
    GetSecurityDescriptorOwner: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [Pointer(T.PSID)], [T.LPBOOL]]),
    GetSecurityDescriptorSacl: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.LPBOOL], [Pointer(T.PACL)], [T.LPBOOL]]),
    GetSidIdentifierAuthority: Fn(T.PSID_IDENTIFIER_AUTHORITY, [[T.PSID]]),
    GetSidLengthRequired: Fn(T.DWORD, [[T.BYTE]]),
    GetSidSubAuthority: Fn(T.PDWORD, [[T.PSID], [T.DWORD]]),
    GetSidSubAuthorityCount: Fn(T.PUCHAR, [[T.PSID]]),
    GetShortPathNameA: Fn(T.DWORD, [[T.LPCSTR], [T.LPSTR], [T.DWORD]]),
    GetShortPathNameW: Fn(T.DWORD, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]]),
    GetStartupInfoA: Fn(null, [[T.LPSTARTUPINFOA]]),
    GetStartupInfoW: Fn(null, [[T.LPSTARTUPINFOW]]),
    GetStdHandle: Fn(T.HANDLE, [[T.DWORD]]),
    GetSystemDirectoryA: Fn(T.UINT, [[T.LPSTR], [T.UINT]]),
    GetSystemDirectoryW: Fn(T.UINT, [[T.LPWSTR], [T.UINT]]),
    GetSystemInfo: Fn(null, [[T.LPSYSTEM_INFO]]),
    GetSystemPowerStatus: Fn(T.BOOL, [[T.LPSYSTEM_POWER_STATUS]]),
    GetSystemRegistryQuota: Fn(T.BOOL, [[T.PDWORD], [T.PDWORD]]),
    GetSystemTime: Fn(null, [[T.LPSYSTEMTIME]]),
    GetSystemTimeAdjustment: Fn(T.BOOL, [[T.PDWORD], [T.PDWORD], [T.PBOOL]]),
    GetSystemTimeAsFileTime: Fn(null, [[T.LPFILETIME]]),
    GetSystemWindowsDirectoryA: Fn(T.UINT, [[T.LPSTR], [T.UINT]]),
    GetSystemWindowsDirectoryW: Fn(T.UINT, [[T.LPWSTR], [T.UINT]]),
    GetSystemWow64DirectoryA: Fn(T.UINT, [[T.LPSTR], [T.UINT]]),
    GetSystemWow64DirectoryW: Fn(T.UINT, [[T.LPWSTR], [T.UINT]]),
    GetTapeParameters: Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.LPDWORD], [T.LPVOID]]),
    GetTapePosition: Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD]]),
    GetTapeStatus: Fn(T.DWORD, [[T.HANDLE]]),
    GetTempFileNameA: Fn(T.UINT, [[T.LPCSTR], [T.LPCSTR], [T.UINT], [T.LPSTR]]),
    GetTempFileNameW: Fn(T.UINT, [[T.LPCWSTR], [T.LPCWSTR], [T.UINT], [T.LPWSTR]]),
    GetTempPathA: Fn(T.DWORD, [[T.DWORD], [T.LPSTR]]),
    GetTempPathW: Fn(T.DWORD, [[T.DWORD], [T.LPWSTR]]),
    GetThreadId: Fn(T.DWORD, [[T.HANDLE]]),
    GetThreadIOPendingFlag: Fn(T.BOOL, [[T.HANDLE], [T.PBOOL]]),
    GetTickCount: Fn(T.DWORD, [[null]]),
    GetTickCount64: Fn(T.ULONGLONG, [[null]]),
    GetTimeZoneInformation: Fn(T.DWORD, [[T.LPTIME_ZONE_INFORMATION]]),
    GetThreadContext: Fn(T.BOOL, [[T.HANDLE], [Pointer(T.CONTEXT)]]),
    GetThreadErrorMode: Fn(T.DWORD, [[null]]),
    GetThreadPriority: Fn(T.INT, [[T.HANDLE]]),
    GetThreadPriorityBoost: Fn(T.BOOL, [[T.HANDLE], [T.PBOOL]]),
    GetThreadSelectorEntry: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPLDT_ENTRY]]),
    GetThreadTimes: Fn(T.BOOL, [[T.HANDLE], [T.LPFILETIME], [T.LPFILETIME], [T.LPFILETIME], [T.LPFILETIME]]),
    GetTokenInformation: Fn(T.BOOL, [[T.HANDLE], [T.TOKEN_INFORMATION_CLASS], [T.LPVOID], [T.DWORD], [T.LPDWORD]]),
    GetUserNameA: Fn(T.BOOL, [[T.LPSTR], [T.LPDWORD]]),
    GetUserNameW: Fn(T.BOOL, [[T.LPWSTR], [T.LPDWORD]]),
    GetVersion: Fn(T.DWORD, [[null]]),
    GetVersionExA: Fn(T.BOOL, [[Pointer(T.OSVERSIONINFOA)]]),
    GetVersionExW: Fn(T.BOOL, [[Pointer(T.OSVERSIONINFOW)]]),
    GetVolumeInformationA: Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPSTR], [T.DWORD]]),
    GetVolumeInformationW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPWSTR], [T.DWORD]]),
    GetVolumeNameForVolumeMountPointA: Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR], [T.DWORD]]),
    GetVolumeNameForVolumeMountPointW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]]),
    GetVolumePathNameA: Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR], [T.DWORD]]),
    GetVolumePathNameW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]]),
    GetVolumePathNamesForVolumeNameA: Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR], [T.DWORD], [T.PDWORD]]),
    GetVolumePathNamesForVolumeNameW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD], [T.PDWORD]]),
    GetWindowsDirectoryA: Fn(T.UINT, [[T.LPSTR], [T.UINT]]),
    GetWindowsDirectoryW: Fn(T.UINT, [[T.LPWSTR], [T.UINT]]),
    GetWriteWatch: Fn(T.UINT, [[T.DWORD], [T.LPVOID], [T.SIZE_T], [Pointer(T.LPVOID)], [Pointer(T.ULONG_PTR)], [Pointer(T.ULONG)]]),
    GlobalAddAtomA: Fn(T.ATOM, [[T.LPCSTR]]),
    GlobalAddAtomW: Fn(T.ATOM, [[T.LPCWSTR]]),
    GlobalAlloc: Fn(T.HGLOBAL, [[T.UINT], [T.SIZE_T]]),
    GlobalCompact: Fn(T.SIZE_T, [[T.DWORD]]),
    GlobalDeleteAtom: Fn(T.ATOM, [[T.ATOM]]),
    GlobalFindAtomA: Fn(T.ATOM, [[T.LPCSTR]]),
    GlobalFindAtomW: Fn(T.ATOM, [[T.LPCWSTR]]),
    GlobalFix: Fn(null, [[T.HGLOBAL]]),
    GlobalFlags: Fn(T.UINT, [[T.HGLOBAL]]),
    GlobalFree: Fn(T.HGLOBAL, [[T.HGLOBAL]]),
    GlobalGetAtomNameA: Fn(T.UINT, [[T.ATOM], [T.LPSTR], [T.INT]]),
    GlobalGetAtomNameW: Fn(T.UINT, [[T.ATOM], [T.LPWSTR], [T.INT]]),
    GlobalHandle: Fn(T.HGLOBAL, [[T.LPCVOID]]),
    GlobalLock: Fn(T.LPVOID, [[T.HGLOBAL]]),
    GlobalMemoryStatus: Fn(null, [[T.LPMEMORYSTATUS]]),
    GlobalMemoryStatusEx: Fn(T.BOOL, [[T.LPMEMORYSTATUSEX]]),
    GlobalReAlloc: Fn(T.HGLOBAL, [[T.HGLOBAL], [T.SIZE_T], [T.UINT]]),
    GlobalSize: Fn(T.SIZE_T, [[T.HGLOBAL]]),
    GlobalUnfix: Fn(null, [[T.HGLOBAL]]),
    GlobalUnlock: Fn(T.BOOL, [[T.HGLOBAL]]),
    GlobalUnWire: Fn(T.BOOL, [[T.HGLOBAL]]),
    GlobalWire: Fn(T.LPVOID, [[T.HGLOBAL]]),
    HeapAlloc: Fn(T.LPVOID, [[T.HANDLE], [T.DWORD], [T.SIZE_T]]),
    HeapCompact: Fn(T.SIZE_T, [[T.HANDLE], [T.DWORD]]),
    HeapCreate: Fn(T.HANDLE, [[T.DWORD], [T.SIZE_T], [T.SIZE_T]]),
    HeapDestroy: Fn(T.BOOL, [[T.HANDLE]]),
    HeapFree: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPVOID]]),
    HeapLock: Fn(T.BOOL, [[T.HANDLE]]),
    HeapReAlloc: Fn(T.LPVOID, [[T.HANDLE], [T.DWORD], [T.LPVOID], [T.SIZE_T]]),
    HeapQueryInformation: Fn(T.BOOL, [[T.HANDLE], [T.HEAP_INFORMATION_CLASS], [T.PVOID], [T.SIZE_T], [T.PSIZE_T]]),
    HeapSetInformation: Fn(T.BOOL, [[T.HANDLE], [T.HEAP_INFORMATION_CLASS], [T.PVOID], [T.SIZE_T]]),
    HeapSize: Fn(T.SIZE_T, [[T.HANDLE], [T.DWORD], [T.LPCVOID]]),
    HeapUnlock: Fn(T.BOOL, [[T.HANDLE]]),
    HeapValidate: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPCVOID]]),
    HeapWalk: Fn(T.BOOL, [[T.HANDLE], [T.LPPROCESS_HEAP_ENTRY]]),
    InitAtomTable: Fn(T.BOOL, [[T.DWORD]]),
    InitializeAcl: Fn(T.BOOL, [[T.PACL], [T.DWORD], [T.DWORD]]),
    InitializeCriticalSection: Fn(null, [[Pointer(T.CRITICAL_SECTION), 'lpCrit']]),
    InitializeCriticalSectionAndSpinCount: Fn(T.BOOL, [[Pointer(T.CRITICAL_SECTION)], [T.DWORD]]),
    InitializeCriticalSectionEx: Fn(T.BOOL, [[Pointer(T.CRITICAL_SECTION)], [T.DWORD], [T.DWORD]]),
    InitializeSecurityDescriptor: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.DWORD]]),
    InitializeSid: Fn(T.BOOL, [[T.PSID], [T.PSID_IDENTIFIER_AUTHORITY], [T.BYTE]]),
    InitializeSListHead: Fn(null, [[T.PSLIST_HEADER]]),
    InterlockedFlushSList: Fn(T.PSINGLE_LIST_ENTRY, [[T.PSLIST_HEADER]]),
    InterlockedPopEntrySList: Fn(T.PSINGLE_LIST_ENTRY, [[T.PSLIST_HEADER]]),
    InterlockedPushEntrySList: Fn(T.PSINGLE_LIST_ENTRY, [[T.PSLIST_HEADER], [T.PSINGLE_LIST_ENTRY]]),
    IsBadCodePtr: Fn(T.BOOL, [[T.FARPROC]]),
    IsBadHugeReadPtr: Fn(T.BOOL, [[T.LPCVOID], [T.UINT]]),
    IsBadHugeWritePtr: Fn(T.BOOL, [[T.LPVOID], [T.UINT]]),
    IsBadReadPtr: Fn(T.BOOL, [[T.LPCVOID], [T.UINT]]),
    IsBadStringPtrA: Fn(T.BOOL, [[T.LPCSTR], [T.UINT]]),
    IsBadStringPtrW: Fn(T.BOOL, [[T.LPCWSTR], [T.UINT]]),
    IsBadWritePtr: Fn(T.BOOL, [[T.LPVOID], [T.UINT]]),
    IsDebuggerPresent: Fn(T.BOOL, [[null]]),
    IsSystemResumeAutomatic: Fn(T.BOOL, [[null]]),
    IsTextUnicode: Fn(T.BOOL, [[T.LPCVOID], [T.INT], [T.LPINT]]),
    IsTokenRestricted: Fn(T.BOOL, [[T.HANDLE]]),
    IsValidAcl: Fn(T.BOOL, [[T.PACL]]),
    IsValidSecurityDescriptor: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR]]),
    IsValidSid: Fn(T.BOOL, [[T.PSID]]),
    IsWellKnownSid: Fn(T.BOOL, [[T.PSID], [T.WELL_KNOWN_SID_TYPE]]),
    IsWow64Process: Fn(T.BOOL, [[T.HANDLE], [T.PBOOL]]),
    ImpersonateLoggedOnUser: Fn(T.BOOL, [[T.HANDLE]]),
    ImpersonateNamedPipeClient: Fn(T.BOOL, [[T.HANDLE]]),
    ImpersonateSelf: Fn(T.BOOL, [[T.SECURITY_IMPERSONATION_LEVEL]]),
    IsProcessInJob: Fn(T.BOOL, [[T.HANDLE], [T.HANDLE], [T.PBOOL]]),
    IsProcessorFeaturePresent: Fn(T.BOOL, [[T.DWORD]]),
    LeaveCriticalSection: Fn(null, [[Pointer(T.CRITICAL_SECTION), 'lpCrit']]),
    LoadLibraryA: Fn(T.HMODULE, [[T.LPCSTR]]),
    LoadLibraryW: Fn(T.HMODULE, [[T.LPCWSTR]]),
    LoadLibraryExA: Fn(T.HMODULE, [[T.LPCSTR], [T.HANDLE], [T.DWORD]]),
    LoadLibraryExW: Fn(T.HMODULE, [[T.LPCWSTR], [T.HANDLE], [T.DWORD]]),
    LoadModule: Fn(T.DWORD, [[T.LPCSTR], [T.LPVOID]]),
    LoadResource: Fn(T.HGLOBAL, [[T.HMODULE], [T.HRSRC]]),
    LocalAlloc: Fn(T.HLOCAL, [[T.UINT], [T.SIZE_T]]),
    LocalCompact: Fn(T.SIZE_T, [[T.UINT]]),
    LocalFlags: Fn(T.UINT, [[T.HLOCAL]]),
    LocalFree: Fn(T.HLOCAL, [[T.HLOCAL]]),
    LocalHandle: Fn(T.HLOCAL, [[T.LPCVOID]]),
    LocalLock: Fn(T.LPVOID, [[T.HLOCAL]]),
    LocalReAlloc: Fn(T.HLOCAL, [[T.HLOCAL], [T.SIZE_T], [T.UINT]]),
    LocalShrink: Fn(T.SIZE_T, [[T.HGLOBAL], [T.UINT]]),
    LocalSize: Fn(T.SIZE_T, [[T.HLOCAL]]),
    LocalUnlock: Fn(T.BOOL, [[T.HLOCAL]]),
    LockResource: Fn(T.LPVOID, [[T.HGLOBAL]]),
    LookupAccountNameA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.PSID], [T.LPDWORD], [T.LPSTR], [T.LPDWORD], [T.PSID_NAME_USE]]),
    LookupAccountNameW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.PSID], [T.LPDWORD], [T.LPWSTR], [T.LPDWORD], [T.PSID_NAME_USE]]),
    LookupAccountSidA: Fn(T.BOOL, [[T.LPCSTR], [T.PSID], [T.LPSTR], [T.LPDWORD], [T.LPSTR], [T.LPDWORD], [T.PSID_NAME_USE]]),
    LookupAccountSidW: Fn(T.BOOL, [[T.LPCWSTR], [T.PSID], [T.LPWSTR], [T.LPDWORD], [T.LPWSTR], [T.LPDWORD], [T.PSID_NAME_USE]]),
    LocalFileTimeToFileTime: Fn(T.BOOL, [[Pointer(T.FILETIME)], [T.LPFILETIME]]),
    LockFile: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD]]),
    LockFileEx: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPOVERLAPPED]]),
    LogonUserA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.DWORD], [T.PHANDLE]]),
    LogonUserW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.DWORD], [T.PHANDLE]]),
    LookupPrivilegeDisplayNameA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPSTR], [T.LPDWORD], [T.LPDWORD]]),
    LookupPrivilegeDisplayNameW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPWSTR], [T.LPDWORD], [T.LPDWORD]]),
    LookupPrivilegeNameA: Fn(T.BOOL, [[T.LPCSTR], [T.PLUID], [T.LPSTR], [T.LPDWORD]]),
    LookupPrivilegeNameW: Fn(T.BOOL, [[T.LPCWSTR], [T.PLUID], [T.LPWSTR], [T.LPDWORD]]),
    LookupPrivilegeValueA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.PLUID]]),
    LookupPrivilegeValueW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.PLUID]]),
    MakeAbsoluteSD: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.PSECURITY_DESCRIPTOR], [T.LPDWORD], [T.PACL], [T.LPDWORD], [T.PACL], [T.LPDWORD], [T.PSID], [T.LPDWORD], [T.PSID], [T.LPDWORD]]),
    MakeCriticalSectionGlobal: Fn(null, [[Pointer(T.CRITICAL_SECTION), 'lpCrit']]),
    MakeSelfRelativeSD: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.PSECURITY_DESCRIPTOR], [T.LPDWORD]]),
    MapGenericMask: Fn(null, [[T.PDWORD], [T.PGENERIC_MAPPING]]),
    MapHModuleSL: Fn(T.HMODULE, [[T.WORD]]),
    MapHModuleLS: Fn(T.WORD, [[T.HMODULE]]),
    MapViewOfFile: Fn(T.LPVOID, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.SIZE_T]]),
    MapViewOfFileEx: Fn(T.LPVOID, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.SIZE_T], [T.LPVOID]]),
    MoveFileA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR]]),
    MoveFileW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR]]),
    MoveFileExA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.DWORD]]),
    MoveFileExW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.DWORD]]),
    MoveFileWithProgressA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPPROGRESS_ROUTINE], [T.LPVOID], [T.DWORD]]),
    MoveFileWithProgressW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPPROGRESS_ROUTINE], [T.LPVOID], [T.DWORD]]),
    MulDiv: Fn(T.INT, [[T.INT], [T.INT], [T.INT]]),
    NeedCurrentDirectoryForExePathA: Fn(T.BOOL, [[T.LPCSTR]]),
    NeedCurrentDirectoryForExePathW: Fn(T.BOOL, [[T.LPCWSTR]]),
    NotifyChangeEventLog: Fn(T.BOOL, [[T.HANDLE], [T.HANDLE]]),
    ObjectCloseAuditAlarmA: Fn(T.BOOL, [[T.LPCSTR], [T.LPVOID], [T.BOOL]]),
    ObjectCloseAuditAlarmW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPVOID], [T.BOOL]]),
    ObjectDeleteAuditAlarmA: Fn(T.BOOL, [[T.LPCSTR], [T.LPVOID], [T.BOOL]]),
    ObjectDeleteAuditAlarmW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPVOID], [T.BOOL]]),
    ObjectOpenAuditAlarmA: Fn(T.BOOL, [[T.LPCSTR], [T.LPVOID], [T.LPSTR], [T.LPSTR], [T.PSECURITY_DESCRIPTOR], [T.HANDLE], [T.DWORD], [T.DWORD], [T.PPRIVILEGE_SET], [T.BOOL], [T.BOOL], [T.LPBOOL]]),
    ObjectOpenAuditAlarmW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPVOID], [T.LPWSTR], [T.LPWSTR], [T.PSECURITY_DESCRIPTOR], [T.HANDLE], [T.DWORD], [T.DWORD], [T.PPRIVILEGE_SET], [T.BOOL], [T.BOOL], [T.LPBOOL]]),
    ObjectPrivilegeAuditAlarmA: Fn(T.BOOL, [[T.LPCSTR], [T.LPVOID], [T.HANDLE], [T.DWORD], [T.PPRIVILEGE_SET], [T.BOOL]]),
    ObjectPrivilegeAuditAlarmW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPVOID], [T.HANDLE], [T.DWORD], [T.PPRIVILEGE_SET], [T.BOOL]]),
    OpenBackupEventLogA: Fn(T.HANDLE, [[T.LPCSTR], [T.LPCSTR]]),
    OpenBackupEventLogW: Fn(T.HANDLE, [[T.LPCWSTR], [T.LPCWSTR]]),
    OpenEventA: Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCSTR]]),
    OpenEventW: Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCWSTR]]),
    OpenEventLogA: Fn(T.HANDLE, [[T.LPCSTR], [T.LPCSTR]]),
    OpenEventLogW: Fn(T.HANDLE, [[T.LPCWSTR], [T.LPCWSTR]]),
    OpenFile: Fn(T.HFILE, [[T.LPCSTR], [Pointer(T.OFSTRUCT)], [T.UINT]]),
    OpenFileMappingA: Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCSTR]]),
    OpenFileMappingW: Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCWSTR]]),
    OpenJobObjectA: Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCSTR]]),
    OpenJobObjectW: Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCWSTR]]),
    OpenMutexA: Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCSTR]]),
    OpenMutexW: Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCWSTR]]),
    OpenProcess: Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.DWORD]]),
    OpenProcessToken: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.PHANDLE]]),
    OpenSemaphoreA: Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCSTR]]),
    OpenSemaphoreW: Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCWSTR]]),
    OpenThread: Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.DWORD]]),
    OpenThreadToken: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.BOOL], [T.PHANDLE]]),
    OpenWaitableTimerA: Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCSTR]]),
    OpenWaitableTimerW: Fn(T.HANDLE, [[T.DWORD], [T.BOOL], [T.LPCWSTR]]),
    OutputDebugStringA: Fn(null, [[T.LPCSTR]]),
    OutputDebugStringW: Fn(null, [[T.LPCWSTR]]),
    PeekNamedPipe: Fn(T.BOOL, [[T.HANDLE], [T.PVOID], [T.DWORD], [T.PDWORD], [T.PDWORD], [T.PDWORD]]),
    PostQueuedCompletionStatus: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.ULONG_PTR], [T.LPOVERLAPPED]]),
    PrepareTape: Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.BOOL]]),
    ProcessIdToSessionId: Fn(T.BOOL, [[T.DWORD], [Pointer(T.DWORD)]]),
    PrivilegeCheck: Fn(T.BOOL, [[T.HANDLE], [T.PPRIVILEGE_SET], [T.LPBOOL]]),
    PrivilegedServiceAuditAlarmA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.HANDLE], [T.PPRIVILEGE_SET], [T.BOOL]]),
    PrivilegedServiceAuditAlarmW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.HANDLE], [T.PPRIVILEGE_SET], [T.BOOL]]),
    PulseEvent: Fn(T.BOOL, [[T.HANDLE]]),
    PurgeComm: Fn(T.BOOL, [[T.HANDLE], [T.DWORD]]),
    QueryActCtxW: Fn(T.BOOL, [[T.DWORD], [T.HANDLE], [T.PVOID], [T.ULONG], [T.PVOID], [T.SIZE_T], [Pointer(T.SIZE_T)]]),
    QueryDepthSList: Fn(T.USHORT, [[T.PSLIST_HEADER]]),
    QueryDosDeviceA: Fn(T.DWORD, [[T.LPCSTR], [T.LPSTR], [T.DWORD]]),
    QueryDosDeviceW: Fn(T.DWORD, [[T.LPCWSTR], [T.LPWSTR], [T.DWORD]]),
    QueryFullProcessImageNameA: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPSTR], [T.PDWORD]]),
    QueryFullProcessImageNameW: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPWSTR], [T.PDWORD]]),
    QueryInformationJobObject: Fn(T.BOOL, [[T.HANDLE], [T.JOBOBJECTINFOCLASS], [T.LPVOID], [T.DWORD], [Pointer(T.DWORD)]]),
    QueryPerformanceCounter: Fn(T.BOOL, [[Pointer(T.LARGE_INTEGER)]]),
    QueryPerformanceFrequency: Fn(T.BOOL, [[Pointer(T.LARGE_INTEGER)]]),
    QueueUserAPC: Fn(T.DWORD, [[T.PAPCFUNC], [T.HANDLE], [T.ULONG_PTR]]),
    QueueUserWorkItem: Fn(T.BOOL, [[T.LPTHREAD_START_ROUTINE], [T.PVOID], [T.ULONG]]),
    RaiseException: Fn(null, [[T.DWORD], [T.DWORD], [T.DWORD], [Pointer(T.ULONG_PTR)]]),
    ReadEventLogA: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.LPVOID], [T.DWORD], [Pointer(T.DWORD)], [Pointer(T.DWORD)]]),
    ReadEventLogW: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.LPVOID], [T.DWORD], [Pointer(T.DWORD)], [Pointer(T.DWORD)]]),
    ReadDirectoryChangesW: Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.DWORD], [T.BOOL], [T.DWORD], [T.LPDWORD], [T.LPOVERLAPPED], [T.LPOVERLAPPED_COMPLETION_ROUTINE]]),
    ReadFile: Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.LPOVERLAPPED]]),
    ReadFileEx: Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.DWORD], [T.LPOVERLAPPED], [T.LPOVERLAPPED_COMPLETION_ROUTINE]]),
    ReadFileScatter: Fn(T.BOOL, [[T.HANDLE], [Pointer(T.FILE_SEGMENT_ELEMENT)], [T.DWORD], [T.LPDWORD], [T.LPOVERLAPPED]]),
    ReadProcessMemory: Fn(T.BOOL, [[T.HANDLE], [T.LPCVOID], [T.LPVOID], [T.SIZE_T], [Pointer(T.SIZE_T)]]),
    RegisterEventSourceA: Fn(T.HANDLE, [[T.LPCSTR], [T.LPCSTR]]),
    RegisterEventSourceW: Fn(T.HANDLE, [[T.LPCWSTR], [T.LPCWSTR]]),
    RegisterWaitForSingleObject: Fn(T.BOOL, [[T.PHANDLE], [T.HANDLE], [T.WAITORTIMERCALLBACK], [T.PVOID], [T.ULONG], [T.ULONG]]),
    RegisterWaitForSingleObjectEx: Fn(T.HANDLE, [[T.HANDLE], [T.WAITORTIMERCALLBACK], [T.PVOID], [T.ULONG], [T.ULONG]]),
    ReleaseActCtx: Fn(null, [[T.HANDLE]]),
    ReleaseMutex: Fn(T.BOOL, [[T.HANDLE]]),
    ReleaseSemaphore: Fn(T.BOOL, [[T.HANDLE], [T.LONG], [T.LPLONG]]),
    RemoveVectoredExceptionHandler: Fn(T.ULONG, [[T.PVOID]]),
    ReplaceFileA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.LPVOID], [T.LPVOID]]),
    ReplaceFileW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.LPVOID], [T.LPVOID]]),
    RemoveDirectoryA: Fn(T.BOOL, [[T.LPCSTR]]),
    RemoveDirectoryW: Fn(T.BOOL, [[T.LPCWSTR]]),
    ReportEventA: Fn(T.BOOL, [[T.HANDLE], [T.WORD], [T.WORD], [T.DWORD], [T.PSID], [T.WORD], [T.DWORD], [Pointer(T.LPCSTR)], [T.LPVOID]]),
    ReportEventW: Fn(T.BOOL, [[T.HANDLE], [T.WORD], [T.WORD], [T.DWORD], [T.PSID], [T.WORD], [T.DWORD], [Pointer(T.LPCWSTR)], [T.LPVOID]]),
    RequestWakeupLatency: Fn(T.BOOL, [[T.LATENCY_TIME, 'latency']]),
    ResetEvent: Fn(T.BOOL, [[T.HANDLE]]),
    ResetWriteWatch: Fn(T.UINT, [[T.LPVOID], [T.SIZE_T]]),
    ResumeThread: Fn(T.DWORD, [[T.HANDLE]]),
    RevertToSelf: Fn(T.BOOL, [[null]]),
    SearchPathA: Fn(T.DWORD, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.LPSTR], [Pointer(T.LPSTR)]]),
    SearchPathW: Fn(T.DWORD, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.LPWSTR], [Pointer(T.LPWSTR)]]),
    SetAclInformation: Fn(T.BOOL, [[T.PACL], [T.LPVOID], [T.DWORD], [T.ACL_INFORMATION_CLASS]]),
    SetCommConfig: Fn(T.BOOL, [[T.HANDLE], [T.LPCOMMCONFIG], [T.DWORD]]),
    SetCommBreak: Fn(T.BOOL, [[T.HANDLE]]),
    SetCommMask: Fn(T.BOOL, [[T.HANDLE], [T.DWORD]]),
    SetCommState: Fn(T.BOOL, [[T.HANDLE], [T.LPDCB]]),
    SetCommTimeouts: Fn(T.BOOL, [[T.HANDLE], [T.LPCOMMTIMEOUTS]]),
    SetComputerNameA: Fn(T.BOOL, [[T.LPCSTR]]),
    SetComputerNameW: Fn(T.BOOL, [[T.LPCWSTR]]),
    SetComputerNameExA: Fn(T.BOOL, [[T.COMPUTER_NAME_FORMAT], [T.LPCSTR]]),
    SetComputerNameExW: Fn(T.BOOL, [[T.COMPUTER_NAME_FORMAT], [T.LPCWSTR]]),
    SetCriticalSectionSpinCount: Fn(T.DWORD, [[T.LPCRITICAL_SECTION], [T.DWORD]]),
    SetCurrentDirectoryA: Fn(T.BOOL, [[T.LPCSTR]]),
    SetCurrentDirectoryW: Fn(T.BOOL, [[T.LPCWSTR]]),
    SetDefaultCommConfigA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCOMMCONFIG], [T.DWORD]]),
    SetDefaultCommConfigW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCOMMCONFIG], [T.DWORD]]),
    SetDllDirectoryA: Fn(T.BOOL, [[T.LPCSTR]]),
    SetDllDirectoryW: Fn(T.BOOL, [[T.LPCWSTR]]),
    SetDynamicTimeZoneInformation: Fn(T.BOOL, [[Pointer(T.DYNAMIC_TIME_ZONE_INFORMATION)]]),
    SetEndOfFile: Fn(T.BOOL, [[T.HANDLE]]),
    SetEnvironmentVariableA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR]]),
    SetEnvironmentVariableW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR]]),
    SetErrorMode: Fn(T.UINT, [[T.UINT]]),
    SetEvent: Fn(T.BOOL, [[T.HANDLE]]),
    SetFileApisToANSI: Fn(null, [[null]]),
    SetFileApisToOEM: Fn(null, [[null]]),
    SetFileAttributesA: Fn(T.BOOL, [[T.LPCSTR], [T.DWORD]]),
    SetFileAttributesW: Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD]]),
    SetFilePointer: Fn(T.DWORD, [[T.HANDLE], [T.LONG], [T.LPLONG], [T.DWORD]]),
    SetFilePointerEx: Fn(T.BOOL, [[T.HANDLE], [T.LARGE_INTEGER], [Pointer(T.LARGE_INTEGER)], [T.DWORD]]),
    SetFileSecurityA: Fn(T.BOOL, [[T.LPCSTR], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR]]),
    SetFileSecurityW: Fn(T.BOOL, [[T.LPCWSTR], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR]]),
    SetFileTime: Fn(T.BOOL, [[T.HANDLE], [Pointer(T.FILETIME)], [Pointer(T.FILETIME)], [Pointer(T.FILETIME)]]),
    SetHandleCount: Fn(T.UINT, [[T.UINT]]),
    SetHandleInformation: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD]]),
    SetInformationJobObject: Fn(T.BOOL, [[T.HANDLE], [T.JOBOBJECTINFOCLASS], [T.LPVOID], [T.DWORD]]),
    SetKernelObjectSecurity: Fn(T.BOOL, [[T.HANDLE], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR]]),
    SetLocalTime: Fn(T.BOOL, [[Pointer(T.SYSTEMTIME)]]),
    SetMailslotInfo: Fn(T.BOOL, [[T.HANDLE], [T.DWORD]]),
    SetNamedPipeHandleState: Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD]]),
    SetPriorityClass: Fn(T.BOOL, [[T.HANDLE], [T.DWORD]]),
    SetPrivateObjectSecurity: Fn(T.BOOL, [[T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR], [Pointer(T.PSECURITY_DESCRIPTOR)], [T.PGENERIC_MAPPING], [T.HANDLE]]),
    SetProcessAffinityMask: Fn(T.BOOL, [[T.HANDLE], [T.DWORD_PTR]]),
    SetProcessPriorityBoost: Fn(T.BOOL, [[T.HANDLE], [T.BOOL]]),
    SetProcessShutdownParameters: Fn(T.BOOL, [[T.DWORD], [T.DWORD]]),
    SetProcessWorkingSetSize: Fn(T.BOOL, [[T.HANDLE], [T.SIZE_T], [T.SIZE_T]]),
    SetSecurityDescriptorControl: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.SECURITY_DESCRIPTOR_CONTROL], [T.SECURITY_DESCRIPTOR_CONTROL]]),
    SetSecurityDescriptorDacl: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.BOOL], [T.PACL], [T.BOOL]]),
    SetSecurityDescriptorGroup: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.PSID], [T.BOOL]]),
    SetSecurityDescriptorOwner: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.PSID], [T.BOOL]]),
    SetSecurityDescriptorSacl: Fn(T.BOOL, [[T.PSECURITY_DESCRIPTOR], [T.BOOL], [T.PACL], [T.BOOL]]),
    SetStdHandle: Fn(T.BOOL, [[T.DWORD], [T.HANDLE]]),
    SetSystemPowerState: Fn(T.BOOL, [[T.BOOL], [T.BOOL]]),
    SetSystemTime: Fn(T.BOOL, [[Pointer(T.SYSTEMTIME)]]),
    SetSystemTimeAdjustment: Fn(T.BOOL, [[T.DWORD], [T.BOOL]]),
    SetTapeParameters: Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.LPVOID]]),
    SetTapePosition: Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.BOOL]]),
    SetThreadAffinityMask: Fn(T.DWORD_PTR, [[T.HANDLE], [T.DWORD_PTR]]),
    SetThreadContext: Fn(T.BOOL, [[T.HANDLE], [Pointer(T.CONTEXT)]]),
    SetThreadErrorMode: Fn(T.BOOL, [[T.DWORD], [T.LPDWORD]]),
    SetThreadExecutionState: Fn(T.DWORD, [[T.EXECUTION_STATE]]),
    SetThreadIdealProcessor: Fn(T.DWORD, [[T.HANDLE], [T.DWORD]]),
    SetThreadPriority: Fn(T.BOOL, [[T.HANDLE], [T.INT]]),
    SetThreadPriorityBoost: Fn(T.BOOL, [[T.HANDLE], [T.BOOL]]),
    SetThreadToken: Fn(T.BOOL, [[T.PHANDLE], [T.HANDLE]]),
    SetTimeZoneInformation: Fn(T.BOOL, [[Pointer(T.TIME_ZONE_INFORMATION)]]),
    SetTokenInformation: Fn(T.BOOL, [[T.HANDLE], [T.TOKEN_INFORMATION_CLASS], [T.LPVOID], [T.DWORD]]),
    SetUnhandledExceptionFilter: Fn(T.LPTOP_LEVEL_EXCEPTION_FILTER, [[T.LPTOP_LEVEL_EXCEPTION_FILTER]]),
    SetVolumeLabelA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR]]),
    SetVolumeLabelW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR]]),
    SetVolumeMountPointA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR]]),
    SetVolumeMountPointW: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR]]),
    SetWaitableTimer: Fn(T.BOOL, [[T.HANDLE], [Pointer(T.LARGE_INTEGER)], [T.LONG], [T.PTIMERAPCROUTINE], [T.LPVOID], [T.BOOL]]),
    SetupComm: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD]]),
    SignalObjectAndWait: Fn(T.DWORD, [[T.HANDLE], [T.HANDLE], [T.DWORD], [T.BOOL]]),
    SizeofResource: Fn(T.DWORD, [[T.HMODULE], [T.HRSRC]]),
    Sleep: Fn(null, [[T.DWORD]]),
    SleepEx: Fn(T.DWORD, [[T.DWORD], [T.BOOL]]),
    SuspendThread: Fn(T.DWORD, [[T.HANDLE]]),
    SwitchToFiber: Fn(null, [[T.LPVOID]]),
    SwitchToThread: Fn(T.BOOL, [[null]]),
    SystemTimeToFileTime: Fn(T.BOOL, [[Pointer(T.SYSTEMTIME)], [T.LPFILETIME]]),
    SystemTimeToTzSpecificLocalTime: Fn(T.BOOL, [[Pointer(T.TIME_ZONE_INFORMATION)], [Pointer(T.SYSTEMTIME)], [T.LPSYSTEMTIME]]),
    TerminateJobObject: Fn(T.BOOL, [[T.HANDLE], [T.UINT]]),
    TerminateProcess: Fn(T.BOOL, [[T.HANDLE], [T.DWORD]]),
    TerminateThread: Fn(T.BOOL, [[T.HANDLE], [T.DWORD]]),
    TlsAlloc: Fn(T.DWORD, [[null]]),
    TlsFree: Fn(T.BOOL, [[T.DWORD]]),
    TlsGetValue: Fn(T.LPVOID, [[T.DWORD]]),
    TlsSetValue: Fn(T.BOOL, [[T.DWORD], [T.LPVOID]]),
    TransactNamedPipe: Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.LPOVERLAPPED]]),
    TransmitCommChar: Fn(T.BOOL, [[T.HANDLE], [T.CHAR]]),
    TryEnterCriticalSection: Fn(T.BOOL, [[Pointer(T.CRITICAL_SECTION), 'lpCrit']]),
    TzSpecificLocalTimeToSystemTime: Fn(T.BOOL, [[Pointer(T.TIME_ZONE_INFORMATION)], [Pointer(T.SYSTEMTIME)], [T.LPSYSTEMTIME]]),
    UnhandledExceptionFilter: Fn(T.LONG, [[T.PEXCEPTION_POINTERS]]),
    UnlockFile: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD]]),
    UnlockFileEx: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPOVERLAPPED]]),
    UnmapViewOfFile: Fn(T.BOOL, [[T.LPCVOID]]),
    UnregisterWait: Fn(T.BOOL, [[T.HANDLE]]),
    UnregisterWaitEx: Fn(T.BOOL, [[T.HANDLE], [T.HANDLE]]),
    UpdateResourceA: Fn(T.BOOL, [[T.HANDLE], [T.LPCSTR], [T.LPCSTR], [T.WORD], [T.LPVOID], [T.DWORD]]),
    UpdateResourceW: Fn(T.BOOL, [[T.HANDLE], [T.LPCWSTR], [T.LPCWSTR], [T.WORD], [T.LPVOID], [T.DWORD]]),
    VerifyVersionInfoA: Fn(T.BOOL, [[T.LPOSVERSIONINFOEXA], [T.DWORD], [T.DWORDLONG]]),
    VerifyVersionInfoW: Fn(T.BOOL, [[T.LPOSVERSIONINFOEXW], [T.DWORD], [T.DWORDLONG]]),
    VirtualAlloc: Fn(T.LPVOID, [[T.LPVOID], [T.SIZE_T], [T.DWORD], [T.DWORD]]),
    VirtualAllocEx: Fn(T.LPVOID, [[T.HANDLE], [T.LPVOID], [T.SIZE_T], [T.DWORD], [T.DWORD]]),
    VirtualFree: Fn(T.BOOL, [[T.LPVOID], [T.SIZE_T], [T.DWORD]]),
    VirtualFreeEx: Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.SIZE_T], [T.DWORD]]),
    VirtualLock: Fn(T.BOOL, [[T.LPVOID], [T.SIZE_T]]),
    VirtualProtect: Fn(T.BOOL, [[T.LPVOID], [T.SIZE_T], [T.DWORD], [T.LPDWORD]]),
    VirtualProtectEx: Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.SIZE_T], [T.DWORD], [T.LPDWORD]]),
    VirtualQuery: Fn(T.SIZE_T, [[T.LPCVOID], [T.PMEMORY_BASIC_INFORMATION], [T.SIZE_T]]),
    VirtualQueryEx: Fn(T.SIZE_T, [[T.HANDLE], [T.LPCVOID], [T.PMEMORY_BASIC_INFORMATION], [T.SIZE_T]]),
    VirtualUnlock: Fn(T.BOOL, [[T.LPVOID], [T.SIZE_T]]),
    WTSGetActiveConsoleSessionId: Fn(T.DWORD, [[null]]),
    WaitCommEvent: Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD], [T.LPOVERLAPPED]]),
    WaitForDebugEvent: Fn(T.BOOL, [[T.LPDEBUG_EVENT], [T.DWORD]]),
    WaitForMultipleObjects: Fn(T.DWORD, [[T.DWORD], [Pointer(T.HANDLE)], [T.BOOL], [T.DWORD]]),
    WaitForMultipleObjectsEx: Fn(T.DWORD, [[T.DWORD], [Pointer(T.HANDLE)], [T.BOOL], [T.DWORD], [T.BOOL]]),
    WaitForSingleObject: Fn(T.DWORD, [[T.HANDLE], [T.DWORD]]),
    WaitForSingleObjectEx: Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.BOOL]]),
    WaitNamedPipeA: Fn(T.BOOL, [[T.LPCSTR], [T.DWORD]]),
    WaitNamedPipeW: Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD]]),
    WinExec: Fn(T.UINT, [[T.LPCSTR], [T.UINT]]),
    Wow64DisableWow64FsRedirection: Fn(T.BOOL, [[Pointer(T.PVOID)]]),
    Wow64EnableWow64FsRedirection: Fn(T.BOOLEAN, [[T.BOOLEAN]]),
    Wow64RevertWow64FsRedirection: Fn(T.BOOL, [[T.PVOID]]),
    WriteFile: Fn(T.BOOL, [[T.HANDLE], [T.LPCVOID], [T.DWORD], [T.LPDWORD], [T.LPOVERLAPPED]]),
    WriteFileEx: Fn(T.BOOL, [[T.HANDLE], [T.LPCVOID], [T.DWORD], [T.LPOVERLAPPED], [T.LPOVERLAPPED_COMPLETION_ROUTINE]]),
    WriteFileGather: Fn(T.BOOL, [[T.HANDLE], [Pointer(T.FILE_SEGMENT_ELEMENT)], [T.DWORD], [T.LPDWORD], [T.LPOVERLAPPED]]),
    WritePrivateProfileSectionA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR]]),
    WritePrivateProfileSectionW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR]]),
    WritePrivateProfileStringA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR]]),
    WritePrivateProfileStringW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR]]),
    WritePrivateProfileStructA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPVOID], [T.UINT], [T.LPCSTR]]),
    WritePrivateProfileStructW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPVOID], [T.UINT], [T.LPCWSTR]]),
    WriteProcessMemory: Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.LPCVOID], [T.SIZE_T], [Pointer(T.SIZE_T)]]),
    WriteProfileSectionA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR]]),
    WriteProfileSectionW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR]]),
    WriteProfileStringA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR]]),
    WriteProfileStringW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR]]),
    WriteTapemark: Fn(T.DWORD, [[T.HANDLE], [T.DWORD], [T.DWORD], [T.BOOL]]),
    ZombifyActCtx: Fn(T.BOOL, [[T.HANDLE]]),
    lstrcmpA: Fn(T.INT, [[T.LPCSTR], [T.LPCSTR]]),
    lstrcmpW: Fn(T.INT, [[T.LPCWSTR], [T.LPCWSTR]]),
    lstrcmpiA: Fn(T.INT, [[T.LPCSTR], [T.LPCSTR]]),
    lstrcmpiW: Fn(T.INT, [[T.LPCWSTR], [T.LPCWSTR]]),
    lstrcatA: Fn(T.LPSTR, [[T.LPSTR], [T.LPCSTR]]),
    lstrcatW: Fn(T.LPWSTR, [[T.LPWSTR], [T.LPCWSTR]]),
    lstrcpyA: Fn(T.LPSTR, [[T.LPSTR], [T.LPCSTR]]),
    lstrcpyW: Fn(T.LPWSTR, [[T.LPWSTR], [T.LPCWSTR]]),
    lstrcpynA: Fn(T.LPSTR, [[T.LPSTR], [T.LPCSTR], [T.INT]]),
    lstrcpynW: Fn(T.LPWSTR, [[T.LPWSTR], [T.LPCWSTR], [T.INT]]),
    lstrlenA: Fn(T.INT, [[T.LPCSTR]]),
    lstrlenW: Fn(T.INT, [[T.LPCWSTR]]),
    _hread: Fn(T.LONG, [[T.HFILE], [T.LPVOID], [T.LONG]]),
    _hwrite: Fn(T.LONG, [[T.HFILE], [T.LPCSTR], [T.LONG]]),
    _lcreat: Fn(T.HFILE, [[T.LPCSTR], [T.INT]]),
    _lclose: Fn(T.HFILE, [[T.HFILE]]),
    _llseek: Fn(T.LONG, [[T.HFILE], [T.LONG], [T.INT]]),
    _lopen: Fn(T.HFILE, [[T.LPCSTR], [T.INT]]),
    _lread: Fn(T.UINT, [[T.HFILE], [T.LPVOID], [T.UINT]]),
    _lwrite: Fn(T.UINT, [[T.HFILE], [T.LPCSTR], [T.UINT]]),
    wine_get_unix_file_name: Fn(Pointer(T.char), [[T.LPCWSTR, 'dos']]),
    wine_get_dos_file_name: Fn(Pointer(T.WCHAR), [[T.LPCSTR, 'str']]),
    InterlockedCompareExchange64: Fn(T.LONGLONG, [[Pointer(T.LONGLONG)], [T.LONGLONG], [T.LONGLONG]]),
    GetCurrentProcessId: Fn(T.DWORD, [[null]]),
    GetCurrentThreadId: Fn(T.DWORD, [[null]]),
    GetLastError: Fn(T.DWORD, [[null]]),
    GetProcessHeap: Fn(T.HANDLE, [[null]]),
    SetLastError: Fn(null, [[T.DWORD]]),
    WinMain: Fn(T.i32, [[T.HINSTANCE], [T.HINSTANCE], [T.LPSTR], [T.i32]]),
    AbortDoc: Fn(T.INT, [[T.HDC]]),
    AbortPath: Fn(T.BOOL, [[T.HDC]]),
    AddFontResourceA: Fn(T.INT, [[T.LPCSTR]]),
    AddFontResourceW: Fn(T.INT, [[T.LPCWSTR]]),
    AddFontResourceExA: Fn(T.INT, [[T.LPCSTR], [T.DWORD], [T.PVOID]]),
    AddFontResourceExW: Fn(T.INT, [[T.LPCWSTR], [T.DWORD], [T.PVOID]]),
    AddFontMemResourceEx: Fn(T.HANDLE, [[T.PVOID], [T.DWORD], [T.PVOID], [Pointer(T.DWORD)]]),
    AlphaBlend: Fn(T.BOOL, [[T.HDC], [T.i32], [T.i32], [T.i32], [T.i32], [T.HDC], [T.i32], [T.i32], [T.i32], [T.i32], [T.BLENDFUNCTION]]),
    AngleArc: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.DWORD], [T.FLOAT], [T.FLOAT]]),
    AnimatePalette: Fn(T.BOOL, [[T.HPALETTE], [T.UINT], [T.UINT], [Pointer(T.PALETTEENTRY)]]),
    Arc: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT]]),
    ArcTo: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT]]),
    BeginPath: Fn(T.BOOL, [[T.HDC]]),
    BitBlt: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.HDC], [T.INT], [T.INT], [T.DWORD]]),
    ChoosePixelFormat: Fn(T.INT, [[T.HDC], [Pointer(T.PIXELFORMATDESCRIPTOR)]]),
    Chord: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT]]),
    CloseEnhMetaFile: Fn(T.HENHMETAFILE, [[T.HDC]]),
    CloseFigure: Fn(T.BOOL, [[T.HDC]]),
    CloseMetaFile: Fn(T.HMETAFILE, [[T.HDC]]),
    CombineRgn: Fn(T.INT, [[T.HRGN], [T.HRGN], [T.HRGN], [T.INT]]),
    CombineTransform: Fn(T.BOOL, [[T.LPXFORM], [Pointer(T.XFORM)], [Pointer(T.XFORM)]]),
    CopyEnhMetaFileA: Fn(T.HENHMETAFILE, [[T.HENHMETAFILE], [T.LPCSTR]]),
    CopyEnhMetaFileW: Fn(T.HENHMETAFILE, [[T.HENHMETAFILE], [T.LPCWSTR]]),
    CopyMetaFileA: Fn(T.HMETAFILE, [[T.HMETAFILE], [T.LPCSTR]]),
    CopyMetaFileW: Fn(T.HMETAFILE, [[T.HMETAFILE], [T.LPCWSTR]]),
    CreateBitmap: Fn(T.HBITMAP, [[T.INT], [T.INT], [T.UINT], [T.UINT], [T.LPCVOID]]),
    CreateBitmapIndirect: Fn(T.HBITMAP, [[Pointer(T.BITMAP)]]),
    CreateBrushIndirect: Fn(T.HBRUSH, [[Pointer(T.LOGBRUSH)]]),
    CreateColorSpaceA: Fn(T.HCOLORSPACE, [[T.LPLOGCOLORSPACEA]]),
    CreateColorSpaceW: Fn(T.HCOLORSPACE, [[T.LPLOGCOLORSPACEW]]),
    CreateCompatibleBitmap: Fn(T.HBITMAP, [[T.HDC], [T.INT], [T.INT]]),
    CreateCompatibleDC: Fn(T.HDC, [[T.HDC]]),
    CreateDCA: Fn(T.HDC, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [Pointer(T.DEVMODEA)]]),
    CreateDCW: Fn(T.HDC, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [Pointer(T.DEVMODEW)]]),
    CreateDIBitmap: Fn(T.HBITMAP, [[T.HDC], [Pointer(T.BITMAPINFOHEADER)], [T.DWORD], [T.LPCVOID], [Pointer(T.BITMAPINFO)], [T.UINT]]),
    CreateDIBPatternBrush: Fn(T.HBRUSH, [[T.HGLOBAL], [T.UINT]]),
    CreateDIBPatternBrushPt: Fn(T.HBRUSH, [[Pointer(null)], [T.UINT]]),
    CreateDIBSection: Fn(T.HBITMAP, [[T.HDC], [Pointer(T.BITMAPINFO)], [T.UINT], [Pointer(Pointer(null))], [T.HANDLE], [T.DWORD, 'offset']]),
    CreateDiscardableBitmap: Fn(T.HBITMAP, [[T.HDC], [T.INT], [T.INT]]),
    CreateEllipticRgn: Fn(T.HRGN, [[T.INT], [T.INT], [T.INT], [T.INT]]),
    CreateEllipticRgnIndirect: Fn(T.HRGN, [[Pointer(T.RECT)]]),
    CreateEnhMetaFileA: Fn(T.HDC, [[T.HDC], [T.LPCSTR], [Pointer(T.RECT)], [T.LPCSTR]]),
    CreateEnhMetaFileW: Fn(T.HDC, [[T.HDC], [T.LPCWSTR], [Pointer(T.RECT)], [T.LPCWSTR]]),
    CreateFontA: Fn(T.HFONT, [[T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPCSTR]]),
    CreateFontW: Fn(T.HFONT, [[T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPCWSTR]]),
    CreateFontIndirectA: Fn(T.HFONT, [[Pointer(T.LOGFONTA)]]),
    CreateFontIndirectW: Fn(T.HFONT, [[Pointer(T.LOGFONTW)]]),
    CreateFontIndirectExA: Fn(T.HFONT, [[Pointer(T.ENUMLOGFONTEXDVA)]]),
    CreateFontIndirectExW: Fn(T.HFONT, [[Pointer(T.ENUMLOGFONTEXDVW)]]),
    CreateHalftonePalette: Fn(T.HPALETTE, [[T.HDC]]),
    CreateHatchBrush: Fn(T.HBRUSH, [[T.INT], [T.COLORREF]]),
    CreateICA: Fn(T.HDC, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [Pointer(T.DEVMODEA)]]),
    CreateICW: Fn(T.HDC, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [Pointer(T.DEVMODEW)]]),
    CreateMetaFileA: Fn(T.HDC, [[T.LPCSTR]]),
    CreateMetaFileW: Fn(T.HDC, [[T.LPCWSTR]]),
    CreatePalette: Fn(T.HPALETTE, [[Pointer(T.LOGPALETTE)]]),
    CreatePatternBrush: Fn(T.HBRUSH, [[T.HBITMAP]]),
    CreatePen: Fn(T.HPEN, [[T.INT], [T.INT], [T.COLORREF]]),
    CreatePenIndirect: Fn(T.HPEN, [[Pointer(T.LOGPEN)]]),
    CreatePolyPolygonRgn: Fn(T.HRGN, [[Pointer(T.POINT)], [Pointer(T.INT)], [T.INT], [T.INT]]),
    CreatePolygonRgn: Fn(T.HRGN, [[Pointer(T.POINT)], [T.INT], [T.INT]]),
    CreateRectRgn: Fn(T.HRGN, [[T.INT], [T.INT], [T.INT], [T.INT]]),
    CreateRectRgnIndirect: Fn(T.HRGN, [[Pointer(T.RECT)]]),
    CreateRoundRectRgn: Fn(T.HRGN, [[T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT]]),
    CreateScalableFontResourceA: Fn(T.BOOL, [[T.DWORD], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR]]),
    CreateScalableFontResourceW: Fn(T.BOOL, [[T.DWORD], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR]]),
    CreateSolidBrush: Fn(T.HBRUSH, [[T.COLORREF]]),
    DPtoLP: Fn(T.BOOL, [[T.HDC], [T.LPPOINT], [T.INT]]),
    DeleteColorSpace: Fn(T.BOOL, [[T.HCOLORSPACE]]),
    DeleteDC: Fn(T.BOOL, [[T.HDC]]),
    DeleteEnhMetaFile: Fn(T.BOOL, [[T.HENHMETAFILE]]),
    DeleteMetaFile: Fn(T.BOOL, [[T.HMETAFILE]]),
    DeleteObject: Fn(T.BOOL, [[T.HGDIOBJ]]),
    DescribePixelFormat: Fn(T.INT, [[T.HDC], [T.i32], [T.UINT], [T.LPPIXELFORMATDESCRIPTOR]]),
    DrawEscape: Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.LPCSTR]]),
    Ellipse: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT]]),
    EndDoc: Fn(T.INT, [[T.HDC]]),
    EndPath: Fn(T.BOOL, [[T.HDC]]),
    EnumEnhMetaFile: Fn(T.BOOL, [[T.HDC], [T.HENHMETAFILE], [T.ENHMFENUMPROC], [T.LPVOID], [Pointer(T.RECT)]]),
    EnumFontFamiliesA: Fn(T.INT, [[T.HDC], [T.LPCSTR], [T.FONTENUMPROCA], [T.LPARAM]]),
    EnumFontFamiliesW: Fn(T.INT, [[T.HDC], [T.LPCWSTR], [T.FONTENUMPROCW], [T.LPARAM]]),
    EnumFontFamiliesExA: Fn(T.INT, [[T.HDC], [T.LPLOGFONTA], [T.FONTENUMPROCA], [T.LPARAM], [T.DWORD]]),
    EnumFontFamiliesExW: Fn(T.INT, [[T.HDC], [T.LPLOGFONTW], [T.FONTENUMPROCW], [T.LPARAM], [T.DWORD]]),
    EnumFontsA: Fn(T.INT, [[T.HDC], [T.LPCSTR], [T.FONTENUMPROCA], [T.LPARAM]]),
    EnumFontsW: Fn(T.INT, [[T.HDC], [T.LPCWSTR], [T.FONTENUMPROCW], [T.LPARAM]]),
    EnumICMProfilesA: Fn(T.INT, [[T.HDC], [T.ICMENUMPROCA], [T.LPARAM]]),
    EnumICMProfilesW: Fn(T.INT, [[T.HDC], [T.ICMENUMPROCW], [T.LPARAM]]),
    EnumMetaFile: Fn(T.BOOL, [[T.HDC], [T.HMETAFILE], [T.MFENUMPROC], [T.LPARAM]]),
    EnumObjects: Fn(T.INT, [[T.HDC], [T.INT], [T.GOBJENUMPROC], [T.LPARAM]]),
    EqualRgn: Fn(T.BOOL, [[T.HRGN], [T.HRGN]]),
    Escape: Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.LPCSTR], [T.LPVOID]]),
    ExcludeClipRect: Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT]]),
    ExtCreatePen: Fn(T.HPEN, [[T.DWORD], [T.DWORD], [Pointer(T.LOGBRUSH)], [T.DWORD], [Pointer(T.DWORD)]]),
    ExtCreateRegion: Fn(T.HRGN, [[Pointer(T.XFORM)], [T.DWORD], [Pointer(T.RGNDATA)]]),
    ExtEscape: Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.LPCSTR], [T.INT], [T.LPSTR]]),
    ExtFloodFill: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.COLORREF], [T.UINT]]),
    ExtSelectClipRgn: Fn(T.INT, [[T.HDC], [T.HRGN], [T.INT]]),
    ExtTextOutA: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.UINT], [Pointer(T.RECT)], [T.LPCSTR], [T.UINT], [Pointer(T.INT)]]),
    ExtTextOutW: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.UINT], [Pointer(T.RECT)], [T.LPCWSTR], [T.UINT], [Pointer(T.INT)]]),
    FillPath: Fn(T.BOOL, [[T.HDC]]),
    FillRgn: Fn(T.BOOL, [[T.HDC], [T.HRGN], [T.HBRUSH]]),
    FixBrushOrgEx: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPPOINT]]),
    FlattenPath: Fn(T.BOOL, [[T.HDC]]),
    FloodFill: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.COLORREF]]),
    FrameRgn: Fn(T.BOOL, [[T.HDC], [T.HRGN], [T.HBRUSH], [T.INT], [T.INT]]),
    GdiAlphaBlend: Fn(T.BOOL, [[T.HDC], [T.i32], [T.i32], [T.i32], [T.i32], [T.HDC], [T.i32], [T.i32], [T.i32], [T.i32], [T.BLENDFUNCTION]]),
    GdiComment: Fn(T.BOOL, [[T.HDC], [T.UINT], [Pointer(T.BYTE)]]),
    GdiConvertToDevmodeW: Fn(Pointer(T.DEVMODEW), [[Pointer(T.DEVMODEA)]]),
    GdiFlush: Fn(T.BOOL, [[null]]),
    GdiGetCharDimensions: Fn(T.LONG, [[T.HDC], [T.LPTEXTMETRICW], [Pointer(T.LONG)]]),
    GdiGetCodePage: Fn(T.DWORD, [[T.HDC]]),
    GdiGradientFill: Fn(T.BOOL, [[T.HDC], [T.PTRIVERTEX], [T.ULONG], [T.PVOID], [T.ULONG], [T.ULONG]]),
    GdiIsMetaFileDC: Fn(T.BOOL, [[T.HDC]]),
    GdiIsMetaPrintDC: Fn(T.BOOL, [[T.HDC]]),
    GdiIsPlayMetafileDC: Fn(T.BOOL, [[T.HDC]]),
    GdiTransparentBlt: Fn(T.BOOL, [[T.HDC], [T.i32], [T.i32], [T.i32], [T.i32], [T.HDC], [T.i32], [T.i32], [T.i32], [T.i32], [T.UINT]]),
    GetArcDirection: Fn(T.INT, [[T.HDC]]),
    GetAspectRatioFilterEx: Fn(T.BOOL, [[T.HDC], [T.LPSIZE]]),
    GetBitmapBits: Fn(T.LONG, [[T.HBITMAP], [T.LONG], [T.LPVOID]]),
    GetBitmapDimensionEx: Fn(T.BOOL, [[T.HBITMAP], [T.LPSIZE]]),
    GetBrushOrgEx: Fn(T.BOOL, [[T.HDC], [T.LPPOINT]]),
    GetBkColor: Fn(T.COLORREF, [[T.HDC]]),
    GetBkMode: Fn(T.INT, [[T.HDC]]),
    GetBoundsRect: Fn(T.UINT, [[T.HDC], [T.LPRECT], [T.UINT]]),
    GetCharABCWidthsA: Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPABC]]),
    GetCharABCWidthsW: Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPABC]]),
    GetCharABCWidthsFloatA: Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPABCFLOAT]]),
    GetCharABCWidthsFloatW: Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPABCFLOAT]]),
    GetCharABCWidthsI: Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPWORD], [T.LPABC]]),
    GetCharacterPlacementA: Fn(T.DWORD, [[T.HDC], [T.LPCSTR], [T.INT], [T.INT], [Pointer(T.GCP_RESULTSA)], [T.DWORD]]),
    GetCharacterPlacementW: Fn(T.DWORD, [[T.HDC], [T.LPCWSTR], [T.INT], [T.INT], [Pointer(T.GCP_RESULTSW)], [T.DWORD]]),
    GetCharWidth32A: Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPINT]]),
    GetCharWidth32W: Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPINT]]),
    GetCharWidthA: Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPINT]]),
    GetCharWidthI: Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPWORD], [T.LPINT]]),
    GetCharWidthW: Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.LPINT]]),
    GetCharWidthFloatA: Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.PFLOAT]]),
    GetCharWidthFloatW: Fn(T.BOOL, [[T.HDC], [T.UINT], [T.UINT], [T.PFLOAT]]),
    GetClipBox: Fn(T.INT, [[T.HDC], [T.LPRECT]]),
    GetClipRgn: Fn(T.INT, [[T.HDC], [T.HRGN]]),
    GetColorAdjustment: Fn(T.BOOL, [[T.HDC], [T.LPCOLORADJUSTMENT]]),
    GetColorSpace: Fn(T.HCOLORSPACE, [[T.HDC]]),
    GetCurrentObject: Fn(T.HGDIOBJ, [[T.HDC], [T.UINT]]),
    GetCurrentPositionEx: Fn(T.BOOL, [[T.HDC], [T.LPPOINT]]),
    GetDeviceCaps: Fn(T.INT, [[T.HDC], [T.INT]]),
    GetDeviceGammaRamp: Fn(T.BOOL, [[T.HDC], [T.LPVOID]]),
    GetDCBrushColor: Fn(T.COLORREF, [[T.HDC]]),
    GetDCOrgEx: Fn(T.BOOL, [[T.HDC], [T.LPPOINT]]),
    GetDCPenColor: Fn(T.COLORREF, [[T.HDC]]),
    GetDIBColorTable: Fn(T.UINT, [[T.HDC], [T.UINT], [T.UINT], [Pointer(T.RGBQUAD)]]),
    GetDIBits: Fn(T.INT, [[T.HDC], [T.HBITMAP], [T.UINT], [T.UINT], [T.LPVOID], [T.LPBITMAPINFO], [T.UINT]]),
    GetEnhMetaFileA: Fn(T.HENHMETAFILE, [[T.LPCSTR]]),
    GetEnhMetaFileW: Fn(T.HENHMETAFILE, [[T.LPCWSTR]]),
    GetEnhMetaFileBits: Fn(T.UINT, [[T.HENHMETAFILE], [T.UINT], [T.LPBYTE]]),
    GetEnhMetaFileDescriptionA: Fn(T.UINT, [[T.HENHMETAFILE], [T.UINT], [T.LPSTR]]),
    GetEnhMetaFileDescriptionW: Fn(T.UINT, [[T.HENHMETAFILE], [T.UINT], [T.LPWSTR]]),
    GetEnhMetaFileHeader: Fn(T.UINT, [[T.HENHMETAFILE], [T.UINT], [T.LPENHMETAHEADER]]),
    GetEnhMetaFilePaletteEntries: Fn(T.UINT, [[T.HENHMETAFILE], [T.UINT], [T.LPPALETTEENTRY]]),
    GetFontData: Fn(T.DWORD, [[T.HDC], [T.DWORD], [T.DWORD], [T.LPVOID], [T.DWORD]]),
    GetFontLanguageInfo: Fn(T.DWORD, [[T.HDC]]),
    GetFontUnicodeRanges: Fn(T.DWORD, [[T.HDC], [T.LPGLYPHSET]]),
    GetGlyphIndicesA: Fn(T.DWORD, [[T.HDC], [T.LPCSTR], [T.INT], [T.LPWORD], [T.DWORD]]),
    GetGlyphIndicesW: Fn(T.DWORD, [[T.HDC], [T.LPCWSTR], [T.INT], [T.LPWORD], [T.DWORD]]),
    GetGlyphOutlineA: Fn(T.DWORD, [[T.HDC], [T.UINT], [T.UINT], [T.LPGLYPHMETRICS], [T.DWORD], [T.LPVOID], [Pointer(T.MAT2)]]),
    GetGlyphOutlineW: Fn(T.DWORD, [[T.HDC], [T.UINT], [T.UINT], [T.LPGLYPHMETRICS], [T.DWORD], [T.LPVOID], [Pointer(T.MAT2)]]),
    GetGraphicsMode: Fn(T.INT, [[T.HDC]]),
    GetICMProfileA: Fn(T.BOOL, [[T.HDC], [T.LPDWORD], [T.LPSTR]]),
    GetICMProfileW: Fn(T.BOOL, [[T.HDC], [T.LPDWORD], [T.LPWSTR]]),
    GetKerningPairsA: Fn(T.DWORD, [[T.HDC], [T.DWORD], [T.LPKERNINGPAIR]]),
    GetKerningPairsW: Fn(T.DWORD, [[T.HDC], [T.DWORD], [T.LPKERNINGPAIR]]),
    GetLayout: Fn(T.DWORD, [[T.HDC]]),
    GetLogColorSpaceA: Fn(T.BOOL, [[T.HCOLORSPACE], [T.LPLOGCOLORSPACEA], [T.DWORD]]),
    GetLogColorSpaceW: Fn(T.BOOL, [[T.HCOLORSPACE], [T.LPLOGCOLORSPACEW], [T.DWORD]]),
    GetMapMode: Fn(T.INT, [[T.HDC]]),
    GetMetaFileA: Fn(T.HMETAFILE, [[T.LPCSTR]]),
    GetMetaFileW: Fn(T.HMETAFILE, [[T.LPCWSTR]]),
    GetMetaFileBitsEx: Fn(T.UINT, [[T.HMETAFILE], [T.UINT], [T.LPVOID]]),
    GetMetaRgn: Fn(T.INT, [[T.HDC], [T.HRGN]]),
    GetMiterLimit: Fn(T.BOOL, [[T.HDC], [T.PFLOAT]]),
    GetNearestColor: Fn(T.DWORD, [[T.HDC], [T.DWORD]]),
    GetNearestPaletteIndex: Fn(T.UINT, [[T.HPALETTE], [T.COLORREF]]),
    GetObjectA: Fn(T.INT, [[T.HGDIOBJ], [T.INT], [T.LPVOID]]),
    GetObjectW: Fn(T.INT, [[T.HGDIOBJ], [T.INT], [T.LPVOID]]),
    GetObjectType: Fn(T.DWORD, [[T.HGDIOBJ]]),
    GetOutlineTextMetricsA: Fn(T.UINT, [[T.HDC], [T.UINT], [T.LPOUTLINETEXTMETRICA]]),
    GetOutlineTextMetricsW: Fn(T.UINT, [[T.HDC], [T.UINT], [T.LPOUTLINETEXTMETRICW]]),
    GetPaletteEntries: Fn(T.UINT, [[T.HPALETTE], [T.UINT], [T.UINT], [T.LPPALETTEENTRY]]),
    GetPath: Fn(T.INT, [[T.HDC], [T.LPPOINT], [T.LPBYTE], [T.INT]]),
    GetPixel: Fn(T.COLORREF, [[T.HDC], [T.INT], [T.INT]]),
    GetPixelFormat: Fn(T.INT, [[T.HDC]]),
    GetPolyFillMode: Fn(T.INT, [[T.HDC]]),
    GetRandomRgn: Fn(T.INT, [[T.HDC], [T.HRGN], [T.INT]]),
    GetRasterizerCaps: Fn(T.BOOL, [[T.LPRASTERIZER_STATUS], [T.UINT]]),
    GetRegionData: Fn(T.DWORD, [[T.HRGN], [T.DWORD], [T.LPRGNDATA]]),
    GetRelAbs: Fn(T.INT, [[T.HDC], [T.DWORD]]),
    GetRgnBox: Fn(T.INT, [[T.HRGN], [T.LPRECT]]),
    GetROP2: Fn(T.INT, [[T.HDC]]),
    GetStockObject: Fn(T.HGDIOBJ, [[T.INT]]),
    GetStretchBltMode: Fn(T.INT, [[T.HDC]]),
    GetSystemPaletteEntries: Fn(T.UINT, [[T.HDC], [T.UINT], [T.UINT], [T.LPPALETTEENTRY]]),
    GetSystemPaletteUse: Fn(T.UINT, [[T.HDC]]),
    GetTextAlign: Fn(T.UINT, [[T.HDC]]),
    GetTextCharacterExtra: Fn(T.INT, [[T.HDC]]),
    GetTextCharset: Fn(T.UINT, [[T.HDC]]),
    GetTextCharsetInfo: Fn(T.UINT, [[T.HDC], [T.LPFONTSIGNATURE], [T.DWORD]]),
    GetTextColor: Fn(T.COLORREF, [[T.HDC]]),
    GetTextExtentExPointA: Fn(T.BOOL, [[T.HDC], [T.LPCSTR], [T.INT], [T.INT], [T.LPINT], [T.LPINT], [T.LPSIZE]]),
    GetTextExtentExPointW: Fn(T.BOOL, [[T.HDC], [T.LPCWSTR], [T.INT], [T.INT], [T.LPINT], [T.LPINT], [T.LPSIZE]]),
    GetTextExtentPointA: Fn(T.BOOL, [[T.HDC], [T.LPCSTR], [T.INT], [T.LPSIZE]]),
    GetTextExtentPointW: Fn(T.BOOL, [[T.HDC], [T.LPCWSTR], [T.INT], [T.LPSIZE]]),
    GetTextExtentPoint32A: Fn(T.BOOL, [[T.HDC], [T.LPCSTR], [T.INT], [T.LPSIZE]]),
    GetTextExtentPoint32W: Fn(T.BOOL, [[T.HDC], [T.LPCWSTR], [T.INT], [T.LPSIZE]]),
    GetTextExtentExPointI: Fn(T.BOOL, [[T.HDC], [Pointer(T.WORD)], [T.INT], [T.INT], [T.LPINT], [T.LPINT], [T.LPSIZE]]),
    GetTextExtentPointI: Fn(T.BOOL, [[T.HDC], [Pointer(T.WORD)], [T.INT], [T.LPSIZE]]),
    GetTextFaceA: Fn(T.INT, [[T.HDC], [T.INT], [T.LPSTR]]),
    GetTextFaceW: Fn(T.INT, [[T.HDC], [T.INT], [T.LPWSTR]]),
    GetTextMetricsA: Fn(T.BOOL, [[T.HDC], [T.LPTEXTMETRICA]]),
    GetTextMetricsW: Fn(T.BOOL, [[T.HDC], [T.LPTEXTMETRICW]]),
    GetTransform: Fn(T.BOOL, [[T.HDC], [T.DWORD], [Pointer(T.XFORM)]]),
    GetViewportExtEx: Fn(T.BOOL, [[T.HDC], [T.LPSIZE]]),
    GetViewportOrgEx: Fn(T.BOOL, [[T.HDC], [T.LPPOINT]]),
    GetWindowExtEx: Fn(T.BOOL, [[T.HDC], [T.LPSIZE]]),
    GetWindowOrgEx: Fn(T.BOOL, [[T.HDC], [T.LPPOINT]]),
    GetWinMetaFileBits: Fn(T.UINT, [[T.HENHMETAFILE], [T.UINT], [T.LPBYTE], [T.INT], [T.HDC]]),
    GetWorldTransform: Fn(T.BOOL, [[T.HDC], [T.LPXFORM]]),
    GradientFill: Fn(T.BOOL, [[T.HDC], [T.PTRIVERTEX], [T.ULONG], [T.PVOID], [T.ULONG], [T.ULONG]]),
    IntersectClipRect: Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT]]),
    InvertRgn: Fn(T.BOOL, [[T.HDC], [T.HRGN]]),
    LineDDA: Fn(T.BOOL, [[T.INT], [T.INT], [T.INT], [T.INT], [T.LINEDDAPROC], [T.LPARAM]]),
    LineTo: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT]]),
    LPtoDP: Fn(T.BOOL, [[T.HDC], [T.LPPOINT], [T.INT]]),
    MaskBlt: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.HDC], [T.INT], [T.INT], [T.HBITMAP], [T.INT], [T.INT], [T.DWORD]]),
    MirrorRgn: Fn(T.BOOL, [[T.HWND], [T.HRGN]]),
    ModifyWorldTransform: Fn(T.BOOL, [[T.HDC], [Pointer(T.XFORM)], [T.DWORD]]),
    MoveToEx: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPPOINT]]),
    OffsetClipRgn: Fn(T.INT, [[T.HDC], [T.INT], [T.INT]]),
    OffsetRgn: Fn(T.INT, [[T.HRGN], [T.INT], [T.INT]]),
    OffsetViewportOrgEx: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPPOINT]]),
    OffsetWindowOrgEx: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPPOINT]]),
    PaintRgn: Fn(T.BOOL, [[T.HDC], [T.HRGN]]),
    PatBlt: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.DWORD]]),
    PathToRegion: Fn(T.HRGN, [[T.HDC]]),
    Pie: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT]]),
    PlayEnhMetaFile: Fn(T.BOOL, [[T.HDC], [T.HENHMETAFILE], [Pointer(T.RECT)]]),
    PlayEnhMetaFileRecord: Fn(T.BOOL, [[T.HDC], [T.LPHANDLETABLE], [Pointer(T.ENHMETARECORD)], [T.UINT]]),
    PlayMetaFile: Fn(T.BOOL, [[T.HDC], [T.HMETAFILE]]),
    PlayMetaFileRecord: Fn(T.BOOL, [[T.HDC], [T.LPHANDLETABLE], [T.LPMETARECORD], [T.UINT]]),
    PlgBlt: Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.HBITMAP], [T.INT], [T.INT]]),
    PolyBezier: Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [T.DWORD]]),
    PolyBezierTo: Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [T.DWORD]]),
    PolyDraw: Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [Pointer(T.BYTE)], [T.DWORD]]),
    PolyPolygon: Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [Pointer(T.INT)], [T.UINT]]),
    PolyPolyline: Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [Pointer(T.DWORD)], [T.DWORD]]),
    Polygon: Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [T.INT]]),
    Polyline: Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [T.INT]]),
    PolylineTo: Fn(T.BOOL, [[T.HDC], [Pointer(T.POINT)], [T.DWORD]]),
    PtInRegion: Fn(T.BOOL, [[T.HRGN], [T.INT], [T.INT]]),
    PtVisible: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT]]),
    RealizePalette: Fn(T.UINT, [[T.HDC]]),
    Rectangle: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT]]),
    RectInRegion: Fn(T.BOOL, [[T.HRGN], [Pointer(T.RECT)]]),
    RectVisible: Fn(T.BOOL, [[T.HDC], [Pointer(T.RECT)]]),
    RemoveFontMemResourceEx: Fn(T.BOOL, [[T.HANDLE]]),
    RemoveFontResourceA: Fn(T.BOOL, [[T.LPCSTR]]),
    RemoveFontResourceW: Fn(T.BOOL, [[T.LPCWSTR]]),
    RemoveFontResourceExA: Fn(T.BOOL, [[T.LPCSTR], [T.DWORD], [T.PVOID]]),
    RemoveFontResourceExW: Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD], [T.PVOID]]),
    ResetDCA: Fn(T.HDC, [[T.HDC], [Pointer(T.DEVMODEA)]]),
    ResetDCW: Fn(T.HDC, [[T.HDC], [Pointer(T.DEVMODEW)]]),
    ResizePalette: Fn(T.BOOL, [[T.HPALETTE], [T.UINT]]),
    RestoreDC: Fn(T.BOOL, [[T.HDC], [T.INT]]),
    RoundRect: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT]]),
    SaveDC: Fn(T.INT, [[T.HDC]]),
    ScaleViewportExtEx: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.LPSIZE]]),
    ScaleWindowExtEx: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.LPSIZE]]),
    SelectClipPath: Fn(T.BOOL, [[T.HDC], [T.INT]]),
    SelectClipRgn: Fn(T.INT, [[T.HDC], [T.HRGN]]),
    SelectObject: Fn(T.HGDIOBJ, [[T.HDC], [T.HGDIOBJ]]),
    SelectPalette: Fn(T.HPALETTE, [[T.HDC], [T.HPALETTE], [T.BOOL]]),
    SetAbortProc: Fn(T.INT, [[T.HDC], [T.ABORTPROC]]),
    SetArcDirection: Fn(T.INT, [[T.HDC], [T.INT]]),
    SetBitmapBits: Fn(T.LONG, [[T.HBITMAP], [T.LONG], [T.LPCVOID]]),
    SetBitmapDimensionEx: Fn(T.BOOL, [[T.HBITMAP], [T.INT], [T.INT], [T.LPSIZE]]),
    SetBkColor: Fn(T.COLORREF, [[T.HDC], [T.COLORREF]]),
    SetBkMode: Fn(T.INT, [[T.HDC], [T.INT]]),
    SetBoundsRect: Fn(T.UINT, [[T.HDC], [Pointer(T.RECT)], [T.UINT]]),
    SetBrushOrgEx: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPPOINT]]),
    SetColorAdjustment: Fn(T.BOOL, [[T.HDC], [Pointer(T.COLORADJUSTMENT)]]),
    SetColorSpace: Fn(T.HCOLORSPACE, [[T.HDC], [T.HCOLORSPACE]]),
    SetDeviceGammaRamp: Fn(T.BOOL, [[T.HDC], [T.LPVOID]]),
    SetDCBrushColor: Fn(T.COLORREF, [[T.HDC], [T.COLORREF]]),
    SetDCPenColor: Fn(T.COLORREF, [[T.HDC], [T.COLORREF]]),
    SetDIBColorTable: Fn(T.UINT, [[T.HDC], [T.UINT], [T.UINT], [Pointer(T.RGBQUAD)]]),
    SetDIBits: Fn(T.INT, [[T.HDC], [T.HBITMAP], [T.UINT], [T.UINT], [T.LPCVOID], [Pointer(T.BITMAPINFO)], [T.UINT]]),
    SetDIBitsToDevice: Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.DWORD], [T.DWORD], [T.INT], [T.INT], [T.UINT], [T.UINT], [T.LPCVOID], [Pointer(T.BITMAPINFO)], [T.UINT]]),
    SetEnhMetaFileBits: Fn(T.HENHMETAFILE, [[T.UINT], [Pointer(T.BYTE)]]),
    SetGraphicsMode: Fn(T.INT, [[T.HDC], [T.INT]]),
    SetICMMode: Fn(T.INT, [[T.HDC], [T.INT]]),
    SetICMProfileA: Fn(T.BOOL, [[T.HDC], [T.LPSTR]]),
    SetICMProfileW: Fn(T.BOOL, [[T.HDC], [T.LPWSTR]]),
    SetLayout: Fn(T.DWORD, [[T.HDC], [T.DWORD]]),
    SetMapMode: Fn(T.INT, [[T.HDC], [T.INT]]),
    SetMapperFlags: Fn(T.DWORD, [[T.HDC], [T.DWORD]]),
    SetMetaFileBitsEx: Fn(T.HMETAFILE, [[T.UINT], [Pointer(T.BYTE)]]),
    SetMetaRgn: Fn(T.INT, [[T.HDC]]),
    SetMiterLimit: Fn(T.BOOL, [[T.HDC], [T.FLOAT], [T.PFLOAT]]),
    SetPaletteEntries: Fn(T.UINT, [[T.HPALETTE], [T.UINT], [T.UINT], [Pointer(T.PALETTEENTRY)]]),
    SetPixel: Fn(T.COLORREF, [[T.HDC], [T.INT], [T.INT], [T.COLORREF]]),
    SetPixelV: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.COLORREF]]),
    SetPixelFormat: Fn(T.BOOL, [[T.HDC], [T.i32], [Pointer(T.PIXELFORMATDESCRIPTOR)]]),
    SetPolyFillMode: Fn(T.INT, [[T.HDC], [T.INT]]),
    SetRectRgn: Fn(T.BOOL, [[T.HRGN], [T.INT], [T.INT], [T.INT], [T.INT]]),
    SetRelAbs: Fn(T.INT, [[T.HDC], [T.INT]]),
    SetROP2: Fn(T.INT, [[T.HDC], [T.INT]]),
    SetStretchBltMode: Fn(T.INT, [[T.HDC], [T.INT]]),
    SetSystemPaletteUse: Fn(T.UINT, [[T.HDC], [T.UINT]]),
    SetTextAlign: Fn(T.UINT, [[T.HDC], [T.UINT]]),
    SetTextCharacterExtra: Fn(T.INT, [[T.HDC], [T.INT]]),
    SetTextColor: Fn(T.COLORREF, [[T.HDC], [T.COLORREF]]),
    SetTextJustification: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT]]),
    SetViewportExtEx: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPSIZE]]),
    SetViewportOrgEx: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPPOINT]]),
    SetWindowExtEx: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPSIZE]]),
    SetWindowOrgEx: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPPOINT]]),
    SetWinMetaFileBits: Fn(T.HENHMETAFILE, [[T.UINT], [Pointer(T.BYTE)], [T.HDC], [Pointer(T.METAFILEPICT)]]),
    SetWorldTransform: Fn(T.BOOL, [[T.HDC], [Pointer(T.XFORM)]]),
    StartDocA: Fn(T.INT, [[T.HDC], [Pointer(T.DOCINFOA)]]),
    StartDocW: Fn(T.INT, [[T.HDC], [Pointer(T.DOCINFOW)]]),
    StartPage: Fn(T.INT, [[T.HDC]]),
    EndPage: Fn(T.INT, [[T.HDC]]),
    StretchBlt: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.DWORD]]),
    StretchDIBits: Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [Pointer(null)], [Pointer(T.BITMAPINFO)], [T.UINT], [T.DWORD]]),
    StrokeAndFillPath: Fn(T.BOOL, [[T.HDC]]),
    StrokePath: Fn(T.BOOL, [[T.HDC]]),
    SwapBuffers: Fn(T.BOOL, [[T.HDC]]),
    TextOutA: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPCSTR], [T.INT]]),
    TextOutW: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.LPCWSTR], [T.INT]]),
    TranslateCharsetInfo: Fn(T.BOOL, [[T.LPDWORD], [T.LPCHARSETINFO], [T.DWORD]]),
    TransparentBlt: Fn(T.BOOL, [[T.HDC], [T.i32], [T.i32], [T.i32], [T.i32], [T.HDC], [T.i32], [T.i32], [T.i32], [T.i32], [T.UINT]]),
    UnrealizeObject: Fn(T.BOOL, [[T.HGDIOBJ]]),
    UpdateColors: Fn(T.BOOL, [[T.HDC]]),
    UpdateICMRegKeyA: Fn(T.BOOL, [[T.DWORD], [T.LPSTR], [T.LPSTR], [T.UINT]]),
    UpdateICMRegKeyW: Fn(T.BOOL, [[T.DWORD], [T.LPWSTR], [T.LPWSTR], [T.UINT]]),
    WidenPath: Fn(T.BOOL, [[T.HDC]]),
    PolyTextOutA: Fn(T.BOOL, [[T.HDC], [Pointer(T.POLYTEXTA)], [T.INT]]),
    PolyTextOutW: Fn(T.BOOL, [[T.HDC], [Pointer(T.POLYTEXTW)], [T.INT]]),
    wglCreateContext: Fn(T.HGLRC, [[T.HDC]]),
    wglCreateLayerContext: Fn(T.HGLRC, [[T.HDC], [T.INT]]),
    wglCopyContext: Fn(T.BOOL, [[T.HGLRC], [T.HGLRC], [T.UINT]]),
    wglDeleteContext: Fn(T.BOOL, [[T.HGLRC]]),
    wglDescribeLayerPlane: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.UINT], [T.LPLAYERPLANEDESCRIPTOR]]),
    wglGetCurrentContext: Fn(T.HGLRC, [[null]]),
    wglGetCurrentDC: Fn(T.HDC, [[null]]),
    wglGetLayerPaletteEntries: Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.INT], [Pointer(T.COLORREF)]]),
    wglGetProcAddress: Fn(T.PROC, [[T.LPCSTR]]),
    wglMakeCurrent: Fn(T.BOOL, [[T.HDC], [T.HGLRC]]),
    wglRealizeLayerPalette: Fn(T.BOOL, [[T.HDC], [T.INT], [T.BOOL]]),
    wglSetLayerPaletteEntries: Fn(T.INT, [[T.HDC], [T.INT], [T.INT], [T.INT], [Pointer(T.COLORREF)]]),
    wglShareLists: Fn(T.BOOL, [[T.HGLRC], [T.HGLRC]]),
    wglSwapLayerBuffers: Fn(T.BOOL, [[T.HDC], [T.UINT]]),
    wglUseFontBitmapsA: Fn(T.BOOL, [[T.HDC], [T.DWORD], [T.DWORD], [T.DWORD]]),
    wglUseFontBitmapsW: Fn(T.BOOL, [[T.HDC], [T.DWORD], [T.DWORD], [T.DWORD]]),
    wglUseFontOutlinesA: Fn(T.BOOL, [[T.HDC], [T.DWORD], [T.DWORD], [T.DWORD], [T.FLOAT], [T.FLOAT], [T.INT], [T.LPGLYPHMETRICSFLOAT]]),
    wglUseFontOutlinesW: Fn(T.BOOL, [[T.HDC], [T.DWORD], [T.DWORD], [T.DWORD], [T.FLOAT], [T.FLOAT], [T.INT], [T.LPGLYPHMETRICSFLOAT]]),
    GetSysColor: Fn(T.COLORREF, [[T.INT]]),
    SetSysColors: Fn(T.BOOL, [[T.INT], [Pointer(T.INT)], [Pointer(T.COLORREF)]]),
    ChangeDisplaySettingsA: Fn(T.LONG, [[T.LPDEVMODEA], [T.DWORD]]),
    ChangeDisplaySettingsW: Fn(T.LONG, [[T.LPDEVMODEW], [T.DWORD]]),
    ChangeDisplaySettingsExA: Fn(T.LONG, [[T.LPCSTR], [T.LPDEVMODEA], [T.HWND], [T.DWORD], [T.LPVOID]]),
    ChangeDisplaySettingsExW: Fn(T.LONG, [[T.LPCWSTR], [T.LPDEVMODEW], [T.HWND], [T.DWORD], [T.LPVOID]]),
    CreateDesktopA: Fn(T.HDESK, [[T.LPCSTR], [T.LPCSTR], [T.LPDEVMODEA], [T.DWORD], [T.ACCESS_MASK], [T.LPSECURITY_ATTRIBUTES]]),
    CreateDesktopW: Fn(T.HDESK, [[T.LPCWSTR], [T.LPCWSTR], [T.LPDEVMODEW], [T.DWORD], [T.ACCESS_MASK], [T.LPSECURITY_ATTRIBUTES]]),
    EnumDisplayDevicesA: Fn(T.BOOL, [[T.LPCSTR], [T.DWORD], [T.LPDISPLAY_DEVICEA], [T.DWORD]]),
    EnumDisplayDevicesW: Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD], [T.LPDISPLAY_DEVICEW], [T.DWORD]]),
    EnumDisplaySettingsA: Fn(T.BOOL, [[T.LPCSTR], [T.DWORD], [T.LPDEVMODEA]]),
    EnumDisplaySettingsW: Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD], [T.LPDEVMODEW]]),
    EnumDisplaySettingsExA: Fn(T.BOOL, [[T.LPCSTR], [T.DWORD], [T.LPDEVMODEA], [T.DWORD]]),
    EnumDisplaySettingsExW: Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD], [T.LPDEVMODEW], [T.DWORD]]),
    UpdateLayeredWindow: Fn(T.BOOL, [[T.HWND], [T.HDC], [Pointer(T.POINT)], [Pointer(T.SIZE)], [T.HDC], [Pointer(T.POINT)], [T.COLORREF], [Pointer(T.BLENDFUNCTION)], [T.DWORD]]),
    UpdateLayeredWindowIndirect: Fn(T.BOOL, [[T.HWND], [Pointer(T.UPDATELAYEREDWINDOWINFO)]]),
    ActivateKeyboardLayout: Fn(T.HKL, [[T.HKL], [T.UINT]]),
    AdjustWindowRect: Fn(T.BOOL, [[T.LPRECT], [T.DWORD], [T.BOOL]]),
    AdjustWindowRectEx: Fn(T.BOOL, [[T.LPRECT], [T.DWORD], [T.BOOL], [T.DWORD]]),
    AllowSetForegroundWindow: Fn(T.BOOL, [[T.DWORD]]),
    AnimateWindow: Fn(T.BOOL, [[T.HWND], [T.DWORD], [T.DWORD]]),
    AnyPopup: Fn(T.BOOL, [[null]]),
    AppendMenuA: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT_PTR], [T.LPCSTR]]),
    AppendMenuW: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT_PTR], [T.LPCWSTR]]),
    ArrangeIconicWindows: Fn(T.UINT, [[T.HWND]]),
    AttachThreadInput: Fn(T.BOOL, [[T.DWORD], [T.DWORD], [T.BOOL]]),
    BeginDeferWindowPos: Fn(T.HDWP, [[T.INT]]),
    BeginPaint: Fn(T.HDC, [[T.HWND], [T.LPPAINTSTRUCT]]),
    BringWindowToTop: Fn(T.BOOL, [[T.HWND]]),
    BroadcastSystemMessageA: Fn(T.LONG, [[T.DWORD], [T.LPDWORD], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    BroadcastSystemMessageW: Fn(T.LONG, [[T.DWORD], [T.LPDWORD], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    BroadcastSystemMessageExA: Fn(T.LONG, [[T.DWORD], [T.LPDWORD], [T.UINT], [T.WPARAM], [T.LPARAM], [T.PBSMINFO]]),
    BroadcastSystemMessageExW: Fn(T.LONG, [[T.DWORD], [T.LPDWORD], [T.UINT], [T.WPARAM], [T.LPARAM], [T.PBSMINFO]]),
    CalcChildScroll: Fn(null, [[T.HWND], [T.INT]]),
    CallMsgFilterA: Fn(T.BOOL, [[T.LPMSG], [T.INT]]),
    CallMsgFilterW: Fn(T.BOOL, [[T.LPMSG], [T.INT]]),
    CallNextHookEx: Fn(T.LRESULT, [[T.HHOOK], [T.INT], [T.WPARAM], [T.LPARAM]]),
    CallWindowProcA: Fn(T.LRESULT, [[T.WNDPROC], [T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    CallWindowProcW: Fn(T.LRESULT, [[T.WNDPROC], [T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    CascadeWindows: Fn(T.WORD, [[T.HWND], [T.UINT], [Pointer(T.RECT)], [T.UINT], [Pointer(T.HWND)]]),
    ChangeClipboardChain: Fn(T.BOOL, [[T.HWND], [T.HWND]]),
    ChangeMenuA: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.LPCSTR], [T.UINT], [T.UINT]]),
    ChangeMenuW: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.LPCWSTR], [T.UINT], [T.UINT]]),
    CharLowerA: Fn(T.LPSTR, [[T.LPSTR]]),
    CharLowerW: Fn(T.LPWSTR, [[T.LPWSTR]]),
    CharLowerBuffA: Fn(T.DWORD, [[T.LPSTR], [T.DWORD]]),
    CharLowerBuffW: Fn(T.DWORD, [[T.LPWSTR], [T.DWORD]]),
    CharNextA: Fn(T.LPSTR, [[T.LPCSTR]]),
    CharNextW: Fn(T.LPWSTR, [[T.LPCWSTR]]),
    CharNextExA: Fn(T.LPSTR, [[T.WORD], [T.LPCSTR], [T.DWORD]]),
    CharPrevA: Fn(T.LPSTR, [[T.LPCSTR], [T.LPCSTR]]),
    CharPrevW: Fn(T.LPWSTR, [[T.LPCWSTR], [T.LPCWSTR]]),
    CharPrevExA: Fn(T.LPSTR, [[T.WORD], [T.LPCSTR], [T.LPCSTR], [T.DWORD]]),
    CharUpperA: Fn(T.LPSTR, [[T.LPSTR]]),
    CharUpperW: Fn(T.LPWSTR, [[T.LPWSTR]]),
    CharUpperBuffA: Fn(T.DWORD, [[T.LPSTR], [T.DWORD]]),
    CharUpperBuffW: Fn(T.DWORD, [[T.LPWSTR], [T.DWORD]]),
    CharToOemA: Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR]]),
    CharToOemW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPSTR]]),
    CharToOemBuffA: Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR], [T.DWORD]]),
    CharToOemBuffW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPSTR], [T.DWORD]]),
    CheckDlgButton: Fn(T.BOOL, [[T.HWND], [T.INT], [T.UINT]]),
    CheckMenuItem: Fn(T.DWORD, [[T.HMENU], [T.UINT], [T.UINT]]),
    CheckMenuRadioItem: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT], [T.UINT], [T.UINT]]),
    CheckRadioButton: Fn(T.BOOL, [[T.HWND], [T.i32], [T.i32], [T.i32]]),
    ChildWindowFromPoint: Fn(T.HWND, [[T.HWND], [T.POINT]]),
    ChildWindowFromPointEx: Fn(T.HWND, [[T.HWND], [T.POINT], [T.UINT]]),
    ClientToScreen: Fn(T.BOOL, [[T.HWND], [T.LPPOINT]]),
    ClipCursor: Fn(T.BOOL, [[Pointer(T.RECT)]]),
    CloseClipboard: Fn(T.BOOL, [[null]]),
    CloseDesktop: Fn(T.BOOL, [[T.HDESK]]),
    CloseWindow: Fn(T.BOOL, [[T.HWND]]),
    CloseWindowStation: Fn(T.BOOL, [[T.HWINSTA]]),
    CopyAcceleratorTableA: Fn(T.INT, [[T.HACCEL], [T.LPACCEL], [T.INT]]),
    CopyAcceleratorTableW: Fn(T.INT, [[T.HACCEL], [T.LPACCEL], [T.INT]]),
    CopyIcon: Fn(T.HICON, [[T.HICON]]),
    CopyImage: Fn(T.HANDLE, [[T.HANDLE], [T.UINT], [T.INT], [T.INT], [T.UINT]]),
    CopyRect: Fn(T.BOOL, [[Pointer(T.RECT)], [Pointer(T.RECT)]]),
    CountClipboardFormats: Fn(T.INT, [[null]]),
    CreateAcceleratorTableA: Fn(T.HACCEL, [[T.LPACCEL], [T.INT]]),
    CreateAcceleratorTableW: Fn(T.HACCEL, [[T.LPACCEL], [T.INT]]),
    CreateIconIndirect: Fn(T.HICON, [[T.PICONINFO]]),
    CreateCaret: Fn(T.BOOL, [[T.HWND], [T.HBITMAP], [T.INT], [T.INT]]),
    CreateCursor: Fn(T.HCURSOR, [[T.HINSTANCE], [T.INT], [T.INT], [T.INT], [T.INT], [T.LPCVOID], [T.LPCVOID]]),
    CreateDialogIndirectParamA: Fn(T.HWND, [[T.HINSTANCE], [T.LPCDLGTEMPLATEA], [T.HWND], [T.DLGPROC], [T.LPARAM]]),
    CreateDialogIndirectParamW: Fn(T.HWND, [[T.HINSTANCE], [T.LPCDLGTEMPLATEW], [T.HWND], [T.DLGPROC], [T.LPARAM]]),
    CreateDialogParamA: Fn(T.HWND, [[T.HINSTANCE], [T.LPCSTR], [T.HWND], [T.DLGPROC], [T.LPARAM]]),
    CreateDialogParamW: Fn(T.HWND, [[T.HINSTANCE], [T.LPCWSTR], [T.HWND], [T.DLGPROC], [T.LPARAM]]),
    CreateIcon: Fn(T.HICON, [[T.HINSTANCE], [T.INT], [T.INT], [T.BYTE], [T.BYTE], [T.LPCVOID], [T.LPCVOID]]),
    CreateIconFromResource: Fn(T.HICON, [[T.LPBYTE], [T.UINT], [T.BOOL], [T.DWORD]]),
    CreateIconFromResourceEx: Fn(T.HICON, [[T.LPBYTE], [T.UINT], [T.BOOL], [T.DWORD], [T.INT], [T.INT], [T.UINT]]),
    CreateMenu: Fn(T.HMENU, [[null]]),
    CreatePopupMenu: Fn(T.HMENU, [[null]]),
    CreateWindowExA: Fn(T.HWND, [[T.DWORD], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.INT], [T.INT], [T.INT], [T.INT], [T.HWND], [T.HMENU], [T.HINSTANCE], [T.LPVOID]]),
    CreateWindowExW: Fn(T.HWND, [[T.DWORD], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.INT], [T.INT], [T.INT], [T.INT], [T.HWND], [T.HMENU], [T.HINSTANCE], [T.LPVOID]]),
    CreateWindowStationA: Fn(T.HWINSTA, [[T.LPCSTR], [T.DWORD], [T.ACCESS_MASK], [T.LPSECURITY_ATTRIBUTES]]),
    CreateWindowStationW: Fn(T.HWINSTA, [[T.LPCWSTR], [T.DWORD], [T.ACCESS_MASK], [T.LPSECURITY_ATTRIBUTES]]),
    CreateMDIWindowA: Fn(T.HWND, [[T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.INT], [T.INT], [T.INT], [T.INT], [T.HWND], [T.HINSTANCE], [T.LPARAM]]),
    CreateMDIWindowW: Fn(T.HWND, [[T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.INT], [T.INT], [T.INT], [T.INT], [T.HWND], [T.HINSTANCE], [T.LPARAM]]),
    DefDlgProcA: Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    DefDlgProcW: Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    DeferWindowPos: Fn(T.HDWP, [[T.HDWP], [T.HWND], [T.HWND], [T.INT], [T.INT], [T.INT], [T.INT], [T.UINT]]),
    DefFrameProcA: Fn(T.LRESULT, [[T.HWND], [T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    DefFrameProcW: Fn(T.LRESULT, [[T.HWND], [T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    DefMDIChildProcA: Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    DefMDIChildProcW: Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    DefRawInputProc: Fn(T.LRESULT, [[Pointer(T.PRAWINPUT)], [T.INT], [T.UINT]]),
    DefWindowProcA: Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    DefWindowProcW: Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    DeleteMenu: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT]]),
    DestroyAcceleratorTable: Fn(T.BOOL, [[T.HACCEL]]),
    DestroyCaret: Fn(T.BOOL, [[null]]),
    DestroyCursor: Fn(T.BOOL, [[T.HCURSOR]]),
    DestroyIcon: Fn(T.BOOL, [[T.HICON]]),
    DestroyMenu: Fn(T.BOOL, [[T.HMENU]]),
    DestroyWindow: Fn(T.BOOL, [[T.HWND]]),
    DialogBoxIndirectParamA: Fn(T.INT_PTR, [[T.HINSTANCE], [T.LPCDLGTEMPLATEA], [T.HWND], [T.DLGPROC], [T.LPARAM]]),
    DialogBoxIndirectParamW: Fn(T.INT_PTR, [[T.HINSTANCE], [T.LPCDLGTEMPLATEW], [T.HWND], [T.DLGPROC], [T.LPARAM]]),
    DialogBoxParamA: Fn(T.INT_PTR, [[T.HINSTANCE], [T.LPCSTR], [T.HWND], [T.DLGPROC], [T.LPARAM]]),
    DialogBoxParamW: Fn(T.INT_PTR, [[T.HINSTANCE], [T.LPCWSTR], [T.HWND], [T.DLGPROC], [T.LPARAM]]),
    DispatchMessageA: Fn(T.LRESULT, [[Pointer(T.MSG)]]),
    DispatchMessageW: Fn(T.LRESULT, [[Pointer(T.MSG)]]),
    DlgDirListA: Fn(T.INT, [[T.HWND], [T.LPSTR], [T.INT], [T.INT], [T.UINT]]),
    DlgDirListW: Fn(T.INT, [[T.HWND], [T.LPWSTR], [T.INT], [T.INT], [T.UINT]]),
    DlgDirListComboBoxA: Fn(T.INT, [[T.HWND], [T.LPSTR], [T.INT], [T.INT], [T.UINT]]),
    DlgDirListComboBoxW: Fn(T.INT, [[T.HWND], [T.LPWSTR], [T.INT], [T.INT], [T.UINT]]),
    DlgDirSelectComboBoxExA: Fn(T.BOOL, [[T.HWND], [T.LPSTR], [T.INT], [T.INT]]),
    DlgDirSelectComboBoxExW: Fn(T.BOOL, [[T.HWND], [T.LPWSTR], [T.INT], [T.INT]]),
    DlgDirSelectExA: Fn(T.BOOL, [[T.HWND], [T.LPSTR], [T.INT], [T.INT]]),
    DlgDirSelectExW: Fn(T.BOOL, [[T.HWND], [T.LPWSTR], [T.INT], [T.INT]]),
    DragDetect: Fn(T.BOOL, [[T.HWND], [T.POINT]]),
    DragObject: Fn(T.DWORD, [[T.HWND], [T.HWND], [T.UINT], [T.ULONG_PTR], [T.HCURSOR]]),
    DrawAnimatedRects: Fn(T.BOOL, [[T.HWND], [T.i32], [Pointer(T.RECT)], [Pointer(T.RECT)]]),
    DrawCaption: Fn(T.BOOL, [[T.HWND], [T.HDC], [Pointer(T.RECT)], [T.UINT]]),
    DrawCaptionTempA: Fn(T.BOOL, [[T.HWND], [T.HDC], [Pointer(T.RECT)], [T.HFONT], [T.HICON], [T.LPCSTR], [T.UINT]]),
    DrawCaptionTempW: Fn(T.BOOL, [[T.HWND], [T.HDC], [Pointer(T.RECT)], [T.HFONT], [T.HICON], [T.LPCWSTR], [T.UINT]]),
    DrawEdge: Fn(T.BOOL, [[T.HDC], [T.LPRECT], [T.UINT], [T.UINT]]),
    DrawFocusRect: Fn(T.BOOL, [[T.HDC], [Pointer(T.RECT)]]),
    DrawFrameControl: Fn(T.BOOL, [[T.HDC], [T.LPRECT], [T.UINT], [T.UINT]]),
    DrawIcon: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.HICON]]),
    DrawIconEx: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [T.HICON], [T.INT], [T.INT], [T.UINT], [T.HBRUSH], [T.UINT]]),
    DrawMenuBar: Fn(T.BOOL, [[T.HWND]]),
    DrawStateA: Fn(T.BOOL, [[T.HDC], [T.HBRUSH], [T.DRAWSTATEPROC], [T.LPARAM], [T.WPARAM], [T.INT], [T.INT], [T.INT], [T.INT], [T.UINT]]),
    DrawStateW: Fn(T.BOOL, [[T.HDC], [T.HBRUSH], [T.DRAWSTATEPROC], [T.LPARAM], [T.WPARAM], [T.INT], [T.INT], [T.INT], [T.INT], [T.UINT]]),
    DrawTextA: Fn(T.INT, [[T.HDC], [T.LPCSTR], [T.INT], [T.LPRECT], [T.UINT]]),
    DrawTextW: Fn(T.INT, [[T.HDC], [T.LPCWSTR], [T.INT], [T.LPRECT], [T.UINT]]),
    DrawTextExA: Fn(T.INT, [[T.HDC], [T.LPSTR], [T.INT], [T.LPRECT], [T.UINT], [T.LPDRAWTEXTPARAMS]]),
    DrawTextExW: Fn(T.INT, [[T.HDC], [T.LPWSTR], [T.INT], [T.LPRECT], [T.UINT], [T.LPDRAWTEXTPARAMS]]),
    EmptyClipboard: Fn(T.BOOL, [[null]]),
    EnableMenuItem: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT]]),
    EnableScrollBar: Fn(T.BOOL, [[T.HWND], [T.UINT], [T.UINT]]),
    EnableWindow: Fn(T.BOOL, [[T.HWND], [T.BOOL]]),
    EndDeferWindowPos: Fn(T.BOOL, [[T.HDWP]]),
    EndDialog: Fn(T.BOOL, [[T.HWND], [T.INT_PTR]]),
    EndMenu: Fn(T.BOOL, [[null]]),
    EndPaint: Fn(T.BOOL, [[T.HWND], [Pointer(T.PAINTSTRUCT)]]),
    EnumChildWindows: Fn(T.BOOL, [[T.HWND], [T.WNDENUMPROC], [T.LPARAM]]),
    EnumClipboardFormats: Fn(T.UINT, [[T.UINT]]),
    EnumDesktopsA: Fn(T.BOOL, [[T.HWINSTA], [T.DESKTOPENUMPROCA], [T.LPARAM]]),
    EnumDesktopsW: Fn(T.BOOL, [[T.HWINSTA], [T.DESKTOPENUMPROCW], [T.LPARAM]]),
    EnumDesktopWindows: Fn(T.BOOL, [[T.HDESK], [T.WNDENUMPROC], [T.LPARAM]]),
    EnumDisplayMonitors: Fn(T.BOOL, [[T.HDC], [T.LPRECT], [T.MONITORENUMPROC], [T.LPARAM]]),
    EnumPropsA: Fn(T.INT, [[T.HWND], [T.PROPENUMPROCA]]),
    EnumPropsW: Fn(T.INT, [[T.HWND], [T.PROPENUMPROCW]]),
    EnumPropsExA: Fn(T.INT, [[T.HWND], [T.PROPENUMPROCEXA], [T.LPARAM]]),
    EnumPropsExW: Fn(T.INT, [[T.HWND], [T.PROPENUMPROCEXW], [T.LPARAM]]),
    EnumThreadWindows: Fn(T.BOOL, [[T.DWORD], [T.WNDENUMPROC], [T.LPARAM]]),
    EnumWindows: Fn(T.BOOL, [[T.WNDENUMPROC], [T.LPARAM]]),
    EnumWindowStationsA: Fn(T.BOOL, [[T.WINSTAENUMPROCA], [T.LPARAM]]),
    EnumWindowStationsW: Fn(T.BOOL, [[T.WINSTAENUMPROCW], [T.LPARAM]]),
    EqualRect: Fn(T.BOOL, [[Pointer(T.RECT)], [Pointer(T.RECT)]]),
    ExcludeUpdateRgn: Fn(T.INT, [[T.HDC], [T.HWND]]),
    ExitWindowsEx: Fn(T.BOOL, [[T.UINT], [T.DWORD]]),
    FillRect: Fn(T.INT, [[T.HDC], [Pointer(T.RECT)], [T.HBRUSH]]),
    FindWindowA: Fn(T.HWND, [[T.LPCSTR], [T.LPCSTR]]),
    FindWindowW: Fn(T.HWND, [[T.LPCWSTR], [T.LPCWSTR]]),
    FindWindowExA: Fn(T.HWND, [[T.HWND], [T.HWND], [T.LPCSTR], [T.LPCSTR]]),
    FindWindowExW: Fn(T.HWND, [[T.HWND], [T.HWND], [T.LPCWSTR], [T.LPCWSTR]]),
    FlashWindow: Fn(T.BOOL, [[T.HWND], [T.BOOL]]),
    FlashWindowEx: Fn(T.BOOL, [[T.PFLASHWINFO]]),
    FrameRect: Fn(T.INT, [[T.HDC], [Pointer(T.RECT)], [T.HBRUSH]]),
    GetActiveWindow: Fn(T.HWND, [[null]]),
    GetAltTabInfoA: Fn(T.BOOL, [[T.HWND], [T.INT], [T.PALTTABINFO], [T.LPSTR], [T.UINT]]),
    GetAltTabInfoW: Fn(T.BOOL, [[T.HWND], [T.INT], [T.PALTTABINFO], [T.LPWSTR], [T.UINT]]),
    GetAncestor: Fn(T.HWND, [[T.HWND], [T.UINT]]),
    GetAppCompatFlags: Fn(T.DWORD, [[T.HTASK]]),
    GetAsyncKeyState: Fn(T.SHORT, [[T.INT]]),
    GetCapture: Fn(T.HWND, [[null]]),
    GetCaretBlinkTime: Fn(T.UINT, [[null]]),
    GetCaretPos: Fn(T.BOOL, [[T.LPPOINT]]),
    GetClassInfoA: Fn(T.BOOL, [[T.HINSTANCE], [T.LPCSTR], [Pointer(T.WNDCLASSA)]]),
    GetClassInfoW: Fn(T.BOOL, [[T.HINSTANCE], [T.LPCWSTR], [Pointer(T.WNDCLASSW)]]),
    GetClassInfoExA: Fn(T.BOOL, [[T.HINSTANCE], [T.LPCSTR], [Pointer(T.WNDCLASSEXA)]]),
    GetClassInfoExW: Fn(T.BOOL, [[T.HINSTANCE], [T.LPCWSTR], [Pointer(T.WNDCLASSEXW)]]),
    GetClassLongA: Fn(T.DWORD, [[T.HWND], [T.INT]]),
    GetClassLongW: Fn(T.DWORD, [[T.HWND], [T.INT]]),
    GetClassNameA: Fn(T.INT, [[T.HWND], [T.LPSTR], [T.INT]]),
    GetClassNameW: Fn(T.INT, [[T.HWND], [T.LPWSTR], [T.INT]]),
    GetClassWord: Fn(T.WORD, [[T.HWND], [T.INT]]),
    GetClientRect: Fn(T.BOOL, [[T.HWND], [T.LPRECT]]),
    GetClipboardData: Fn(T.HANDLE, [[T.UINT]]),
    GetClipboardFormatNameA: Fn(T.INT, [[T.UINT], [T.LPSTR], [T.INT]]),
    GetClipboardFormatNameW: Fn(T.INT, [[T.UINT], [T.LPWSTR], [T.INT]]),
    GetClipboardOwner: Fn(T.HWND, [[null]]),
    GetClipboardSequenceNumber: Fn(T.DWORD, [[null]]),
    GetClipboardViewer: Fn(T.HWND, [[null]]),
    GetClipCursor: Fn(T.BOOL, [[T.LPRECT]]),
    GetComboBoxInfo: Fn(T.BOOL, [[T.HWND], [T.PCOMBOBOXINFO]]),
    GetCursor: Fn(T.HCURSOR, [[null]]),
    GetCursorInfo: Fn(T.BOOL, [[T.PCURSORINFO]]),
    GetCursorFrameInfo: Fn(T.HCURSOR, [[T.HCURSOR], [T.DWORD], [T.DWORD], [Pointer(T.DWORD)], [Pointer(T.DWORD)]]),
    GetCursorPos: Fn(T.BOOL, [[T.LPPOINT]]),
    GetDC: Fn(T.HDC, [[T.HWND]]),
    GetDCEx: Fn(T.HDC, [[T.HWND], [T.HRGN], [T.DWORD]]),
    GetDesktopWindow: Fn(T.HWND, [[null]]),
    GetDialogBaseUnits: Fn(T.DWORD, [[null]]),
    GetDlgCtrlID: Fn(T.INT, [[T.HWND]]),
    GetDlgItem: Fn(T.HWND, [[T.HWND], [T.INT]]),
    GetDlgItemInt: Fn(T.UINT, [[T.HWND], [T.INT], [Pointer(T.BOOL)], [T.BOOL]]),
    GetDlgItemTextA: Fn(T.UINT, [[T.HWND], [T.INT], [T.LPSTR], [T.INT]]),
    GetDlgItemTextW: Fn(T.UINT, [[T.HWND], [T.INT], [T.LPWSTR], [T.INT]]),
    GetDoubleClickTime: Fn(T.UINT, [[null]]),
    GetFocus: Fn(T.HWND, [[null]]),
    GetForegroundWindow: Fn(T.HWND, [[null]]),
    GetGUIThreadInfo: Fn(T.BOOL, [[T.DWORD], [Pointer(T.GUITHREADINFO)]]),
    GetIconInfo: Fn(T.BOOL, [[T.HICON], [T.PICONINFO]]),
    GetIconInfoExA: Fn(T.BOOL, [[T.HICON], [Pointer(T.ICONINFOEXA)]]),
    GetIconInfoExW: Fn(T.BOOL, [[T.HICON], [Pointer(T.ICONINFOEXW)]]),
    GetInputState: Fn(T.BOOL, [[null]]),
    GetInternalWindowPos: Fn(T.UINT, [[T.HWND], [T.LPRECT], [T.LPPOINT]]),
    GetKBCodePage: Fn(T.UINT, [[null]]),
    GetKeyboardLayout: Fn(T.HKL, [[T.DWORD]]),
    GetKeyboardLayoutList: Fn(T.UINT, [[T.INT], [Pointer(T.HKL)]]),
    GetKeyboardState: Fn(T.BOOL, [[T.LPBYTE]]),
    GetKeyboardType: Fn(T.INT, [[T.INT]]),
    GetKeyNameTextA: Fn(T.INT, [[T.LONG], [T.LPSTR], [T.INT]]),
    GetKeyNameTextW: Fn(T.INT, [[T.LONG], [T.LPWSTR], [T.INT]]),
    GetKeyboardLayoutNameA: Fn(T.BOOL, [[T.LPSTR]]),
    GetKeyboardLayoutNameW: Fn(T.BOOL, [[T.LPWSTR]]),
    GetKeyState: Fn(T.SHORT, [[T.INT]]),
    GetLastActivePopup: Fn(T.HWND, [[T.HWND]]),
    GetLastInputInfo: Fn(T.BOOL, [[T.PLASTINPUTINFO]]),
    GetRawInputBuffer: Fn(T.UINT, [[T.PRAWINPUT], [T.PUINT], [T.UINT]]),
    GetRawInputData: Fn(T.UINT, [[T.HRAWINPUT], [T.UINT], [T.LPVOID], [T.PUINT], [T.UINT]]),
    GetRawInputDeviceInfoA: Fn(T.UINT, [[T.HANDLE], [T.UINT], [T.LPVOID], [T.PUINT]]),
    GetRawInputDeviceInfoW: Fn(T.UINT, [[T.HANDLE], [T.UINT], [T.LPVOID], [T.PUINT]]),
    GetRawInputDeviceList: Fn(T.UINT, [[T.PRAWINPUTDEVICELIST], [T.PUINT], [T.UINT]]),
    GetLayeredWindowAttributes: Fn(T.BOOL, [[T.HWND], [Pointer(T.COLORREF)], [Pointer(T.BYTE)], [Pointer(T.DWORD)]]),
    GetMenu: Fn(T.HMENU, [[T.HWND]]),
    GetMenuBarInfo: Fn(T.BOOL, [[T.HWND], [T.LONG], [T.LONG], [T.PMENUBARINFO]]),
    GetMenuCheckMarkDimensions: Fn(T.DWORD, [[null]]),
    GetMenuContextHelpId: Fn(T.DWORD, [[T.HMENU]]),
    GetMenuDefaultItem: Fn(T.UINT, [[T.HMENU], [T.UINT], [T.UINT]]),
    GetMenuInfo: Fn(T.BOOL, [[T.HMENU], [T.LPMENUINFO]]),
    GetMenuItemCount: Fn(T.INT, [[T.HMENU]]),
    GetMenuItemID: Fn(T.UINT, [[T.HMENU], [T.INT]]),
    GetMenuItemInfoA: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.BOOL], [Pointer(T.MENUITEMINFOA)]]),
    GetMenuItemInfoW: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.BOOL], [Pointer(T.MENUITEMINFOW)]]),
    GetMenuItemRect: Fn(T.BOOL, [[T.HWND], [T.HMENU], [T.UINT], [T.LPRECT]]),
    GetMenuState: Fn(T.UINT, [[T.HMENU], [T.UINT], [T.UINT]]),
    GetMenuStringA: Fn(T.INT, [[T.HMENU], [T.UINT], [T.LPSTR], [T.INT], [T.UINT]]),
    GetMenuStringW: Fn(T.INT, [[T.HMENU], [T.UINT], [T.LPWSTR], [T.INT], [T.UINT]]),
    GetMessageA: Fn(T.BOOL, [[T.LPMSG], [T.HWND], [T.UINT], [T.UINT]]),
    GetMessageW: Fn(T.BOOL, [[T.LPMSG], [T.HWND], [T.UINT], [T.UINT]]),
    GetMessageExtraInfo: Fn(T.LPARAM, [[null]]),
    GetMessagePos: Fn(T.DWORD, [[null]]),
    GetMessageTime: Fn(T.LONG, [[null]]),
    GetMonitorInfoA: Fn(T.BOOL, [[T.HMONITOR], [T.LPMONITORINFO]]),
    GetMonitorInfoW: Fn(T.BOOL, [[T.HMONITOR], [T.LPMONITORINFO]]),
    GetNextDlgGroupItem: Fn(T.HWND, [[T.HWND], [T.HWND], [T.BOOL]]),
    GetNextDlgTabItem: Fn(T.HWND, [[T.HWND], [T.HWND], [T.BOOL]]),
    GetOpenClipboardWindow: Fn(T.HWND, [[null]]),
    GetParent: Fn(T.HWND, [[T.HWND]]),
    GetPriorityClipboardFormat: Fn(T.INT, [[Pointer(T.UINT)], [T.INT]]),
    GetProcessDefaultLayout: Fn(T.BOOL, [[Pointer(T.DWORD)]]),
    GetPropA: Fn(T.HANDLE, [[T.HWND], [T.LPCSTR]]),
    GetPropW: Fn(T.HANDLE, [[T.HWND], [T.LPCWSTR]]),
    GetQueueStatus: Fn(T.DWORD, [[T.UINT]]),
    GetScrollInfo: Fn(T.BOOL, [[T.HWND], [T.INT], [T.LPSCROLLINFO]]),
    GetScrollBarInfo: Fn(T.BOOL, [[T.HWND], [T.LONG], [T.LPSCROLLBARINFO]]),
    GetScrollPos: Fn(T.INT, [[T.HWND], [T.INT]]),
    GetScrollRange: Fn(T.BOOL, [[T.HWND], [T.INT], [T.LPINT], [T.LPINT]]),
    GetShellWindow: Fn(T.HWND, [[null]]),
    GetSubMenu: Fn(T.HMENU, [[T.HMENU], [T.INT]]),
    GetSysColorBrush: Fn(T.HBRUSH, [[T.INT]]),
    GetSystemMenu: Fn(T.HMENU, [[T.HWND], [T.BOOL]]),
    GetSystemMetrics: Fn(T.INT, [[T.INT]]),
    GetTabbedTextExtentA: Fn(T.DWORD, [[T.HDC], [T.LPCSTR], [T.INT], [T.INT], [Pointer(T.INT)]]),
    GetTabbedTextExtentW: Fn(T.DWORD, [[T.HDC], [T.LPCWSTR], [T.INT], [T.INT], [Pointer(T.INT)]]),
    GetTitleBarInfo: Fn(T.BOOL, [[T.HWND], [T.PTITLEBARINFO]]),
    GetThreadDesktop: Fn(T.HDESK, [[T.DWORD]]),
    GetTopWindow: Fn(T.HWND, [[T.HWND]]),
    GetUpdateRect: Fn(T.BOOL, [[T.HWND], [T.LPRECT], [T.BOOL]]),
    GetUpdateRgn: Fn(T.INT, [[T.HWND], [T.HRGN], [T.BOOL]]),
    GetUserObjectInformationA: Fn(T.BOOL, [[T.HANDLE], [T.INT], [T.LPVOID], [T.DWORD], [T.LPDWORD]]),
    GetUserObjectInformationW: Fn(T.BOOL, [[T.HANDLE], [T.INT], [T.LPVOID], [T.DWORD], [T.LPDWORD]]),
    GetUserObjectSecurity: Fn(T.BOOL, [[T.HANDLE], [T.PSECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR], [T.DWORD], [T.LPDWORD]]),
    GetWindow: Fn(T.HWND, [[T.HWND], [T.UINT]]),
    GetWindowContextHelpId: Fn(T.DWORD, [[T.HWND]]),
    GetWindowDC: Fn(T.HDC, [[T.HWND]]),
    GetWindowInfo: Fn(T.BOOL, [[T.HWND], [T.PWINDOWINFO]]),
    GetWindowLongA: Fn(T.LONG, [[T.HWND], [T.INT]]),
    GetWindowLongW: Fn(T.LONG, [[T.HWND], [T.INT]]),
    GetWindowModuleFileNameA: Fn(T.UINT, [[T.HWND], [T.LPSTR], [T.UINT]]),
    GetWindowModuleFileNameW: Fn(T.UINT, [[T.HWND], [T.LPWSTR], [T.UINT]]),
    GetWindowPlacement: Fn(T.BOOL, [[T.HWND], [T.LPWINDOWPLACEMENT]]),
    GetWindowRect: Fn(T.BOOL, [[T.HWND], [T.LPRECT]]),
    GetWindowRgn: Fn(T.INT, [[T.HWND], [T.HRGN]]),
    GetProcessWindowStation: Fn(T.HWINSTA, [[null]]),
    GetWindowTextA: Fn(T.INT, [[T.HWND], [T.LPSTR], [T.INT]]),
    GetWindowTextW: Fn(T.INT, [[T.HWND], [T.LPWSTR], [T.INT]]),
    GetWindowTextLengthA: Fn(T.INT, [[T.HWND]]),
    GetWindowTextLengthW: Fn(T.INT, [[T.HWND]]),
    GetWindowThreadProcessId: Fn(T.DWORD, [[T.HWND], [T.LPDWORD]]),
    GetWindowWord: Fn(T.WORD, [[T.HWND], [T.INT]]),
    GrayStringA: Fn(T.BOOL, [[T.HDC], [T.HBRUSH], [T.GRAYSTRINGPROC], [T.LPARAM], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT]]),
    GrayStringW: Fn(T.BOOL, [[T.HDC], [T.HBRUSH], [T.GRAYSTRINGPROC], [T.LPARAM], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT]]),
    HideCaret: Fn(T.BOOL, [[T.HWND]]),
    HiliteMenuItem: Fn(T.BOOL, [[T.HWND], [T.HMENU], [T.UINT], [T.UINT]]),
    InflateRect: Fn(T.BOOL, [[T.LPRECT], [T.INT], [T.INT]]),
    InSendMessage: Fn(T.BOOL, [[null]]),
    InSendMessageEx: Fn(T.DWORD, [[T.LPVOID]]),
    InsertMenuA: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT], [T.UINT_PTR], [T.LPCSTR]]),
    InsertMenuW: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT], [T.UINT_PTR], [T.LPCWSTR]]),
    InsertMenuItemA: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.BOOL], [Pointer(T.MENUITEMINFOA)]]),
    InsertMenuItemW: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.BOOL], [Pointer(T.MENUITEMINFOW)]]),
    InternalGetWindowText: Fn(T.INT, [[T.HWND], [T.LPWSTR], [T.INT]]),
    IntersectRect: Fn(T.BOOL, [[T.LPRECT], [Pointer(T.RECT)], [Pointer(T.RECT)]]),
    InvalidateRect: Fn(T.BOOL, [[T.HWND], [Pointer(T.RECT)], [T.BOOL]]),
    InvalidateRgn: Fn(T.BOOL, [[T.HWND], [T.HRGN], [T.BOOL]]),
    InvertRect: Fn(T.BOOL, [[T.HDC], [Pointer(T.RECT)]]),
    IsCharAlphaA: Fn(T.BOOL, [[T.CHAR]]),
    IsCharAlphaW: Fn(T.BOOL, [[T.WCHAR]]),
    IsCharAlphaNumericA: Fn(T.BOOL, [[T.CHAR]]),
    IsCharAlphaNumericW: Fn(T.BOOL, [[T.WCHAR]]),
    IsCharLowerA: Fn(T.BOOL, [[T.CHAR]]),
    IsCharLowerW: Fn(T.BOOL, [[T.WCHAR]]),
    IsCharUpperA: Fn(T.BOOL, [[T.CHAR]]),
    IsCharUpperW: Fn(T.BOOL, [[T.WCHAR]]),
    IsChild: Fn(T.BOOL, [[T.HWND], [T.HWND]]),
    IsClipboardFormatAvailable: Fn(T.BOOL, [[T.UINT]]),
    IsDialogMessageA: Fn(T.BOOL, [[T.HWND], [T.LPMSG]]),
    IsDialogMessageW: Fn(T.BOOL, [[T.HWND], [T.LPMSG]]),
    IsDlgButtonChecked: Fn(T.UINT, [[T.HWND], [T.i32]]),
    IsGUIThread: Fn(T.BOOL, [[T.BOOL]]),
    IsHungAppWindow: Fn(T.BOOL, [[T.HWND]]),
    IsIconic: Fn(T.BOOL, [[T.HWND]]),
    IsMenu: Fn(T.BOOL, [[T.HMENU]]),
    IsRectEmpty: Fn(T.BOOL, [[Pointer(T.RECT)]]),
    IsWinEventHookInstalled: Fn(T.BOOL, [[T.DWORD]]),
    IsWindow: Fn(T.BOOL, [[T.HWND]]),
    IsWindowEnabled: Fn(T.BOOL, [[T.HWND]]),
    IsWindowUnicode: Fn(T.BOOL, [[T.HWND]]),
    IsWindowVisible: Fn(T.BOOL, [[T.HWND]]),
    IsZoomed: Fn(T.BOOL, [[T.HWND]]),
    KillSystemTimer: Fn(T.BOOL, [[T.HWND], [T.UINT_PTR]]),
    KillTimer: Fn(T.BOOL, [[T.HWND], [T.UINT_PTR]]),
    LoadAcceleratorsA: Fn(T.HACCEL, [[T.HINSTANCE], [T.LPCSTR]]),
    LoadAcceleratorsW: Fn(T.HACCEL, [[T.HINSTANCE], [T.LPCWSTR]]),
    LoadBitmapA: Fn(T.HBITMAP, [[T.HINSTANCE], [T.LPCSTR]]),
    LoadBitmapW: Fn(T.HBITMAP, [[T.HINSTANCE], [T.LPCWSTR]]),
    LoadCursorA: Fn(T.HCURSOR, [[T.HINSTANCE], [T.LPCSTR]]),
    LoadCursorW: Fn(T.HCURSOR, [[T.HINSTANCE], [T.LPCWSTR]]),
    LoadCursorFromFileA: Fn(T.HCURSOR, [[T.LPCSTR]]),
    LoadCursorFromFileW: Fn(T.HCURSOR, [[T.LPCWSTR]]),
    LoadIconA: Fn(T.HICON, [[T.HINSTANCE], [T.LPCSTR]]),
    LoadIconW: Fn(T.HICON, [[T.HINSTANCE], [T.LPCWSTR]]),
    LoadImageA: Fn(T.HANDLE, [[T.HINSTANCE], [T.LPCSTR], [T.UINT], [T.INT], [T.INT], [T.UINT]]),
    LoadImageW: Fn(T.HANDLE, [[T.HINSTANCE], [T.LPCWSTR], [T.UINT], [T.INT], [T.INT], [T.UINT]]),
    LoadKeyboardLayoutA: Fn(T.HKL, [[T.LPCSTR], [T.UINT]]),
    LoadKeyboardLayoutW: Fn(T.HKL, [[T.LPCWSTR], [T.UINT]]),
    LoadMenuA: Fn(T.HMENU, [[T.HINSTANCE], [T.LPCSTR]]),
    LoadMenuW: Fn(T.HMENU, [[T.HINSTANCE], [T.LPCWSTR]]),
    LoadMenuIndirectA: Fn(T.HMENU, [[T.LPCVOID]]),
    LoadMenuIndirectW: Fn(T.HMENU, [[T.LPCVOID]]),
    LoadStringA: Fn(T.INT, [[T.HINSTANCE], [T.UINT], [T.LPSTR], [T.INT]]),
    LoadStringW: Fn(T.INT, [[T.HINSTANCE], [T.UINT], [T.LPWSTR], [T.INT]]),
    LockSetForegroundWindow: Fn(T.BOOL, [[T.UINT]]),
    LockWindowUpdate: Fn(T.BOOL, [[T.HWND]]),
    LookupIconIdFromDirectory: Fn(T.INT, [[T.LPBYTE], [T.BOOL]]),
    LookupIconIdFromDirectoryEx: Fn(T.INT, [[T.LPBYTE], [T.BOOL], [T.INT], [T.INT], [T.UINT]]),
    MapVirtualKeyA: Fn(T.UINT, [[T.UINT], [T.UINT]]),
    MapVirtualKeyW: Fn(T.UINT, [[T.UINT], [T.UINT]]),
    MapVirtualKeyExA: Fn(T.UINT, [[T.UINT], [T.UINT], [T.HKL]]),
    MapVirtualKeyExW: Fn(T.UINT, [[T.UINT], [T.UINT], [T.HKL]]),
    MapDialogRect: Fn(T.BOOL, [[T.HWND], [T.LPRECT]]),
    MapWindowPoints: Fn(T.INT, [[T.HWND], [T.HWND], [T.LPPOINT], [T.UINT]]),
    MenuItemFromPoint: Fn(T.INT, [[T.HWND], [T.HMENU], [T.POINT]]),
    MessageBeep: Fn(T.BOOL, [[T.UINT]]),
    MessageBoxA: Fn(T.INT, [[T.HWND], [T.LPCSTR], [T.LPCSTR], [T.UINT]]),
    MessageBoxW: Fn(T.INT, [[T.HWND], [T.LPCWSTR], [T.LPCWSTR], [T.UINT]]),
    MessageBoxExA: Fn(T.INT, [[T.HWND], [T.LPCSTR], [T.LPCSTR], [T.UINT], [T.WORD]]),
    MessageBoxExW: Fn(T.INT, [[T.HWND], [T.LPCWSTR], [T.LPCWSTR], [T.UINT], [T.WORD]]),
    MessageBoxIndirectA: Fn(T.INT, [[T.LPMSGBOXPARAMSA]]),
    MessageBoxIndirectW: Fn(T.INT, [[T.LPMSGBOXPARAMSW]]),
    ModifyMenuA: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT], [T.UINT_PTR], [T.LPCSTR]]),
    ModifyMenuW: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT], [T.UINT_PTR], [T.LPCWSTR]]),
    MonitorFromPoint: Fn(T.HMONITOR, [[T.POINT], [T.DWORD]]),
    MonitorFromRect: Fn(T.HMONITOR, [[T.LPRECT], [T.DWORD]]),
    MonitorFromWindow: Fn(T.HMONITOR, [[T.HWND], [T.DWORD]]),
    MoveWindow: Fn(T.BOOL, [[T.HWND], [T.INT], [T.INT], [T.INT], [T.INT], [T.BOOL]]),
    MsgWaitForMultipleObjects: Fn(T.DWORD, [[T.DWORD], [Pointer(T.HANDLE)], [T.BOOL], [T.DWORD], [T.DWORD]]),
    MsgWaitForMultipleObjectsEx: Fn(T.DWORD, [[T.DWORD], [Pointer(T.HANDLE)], [T.DWORD], [T.DWORD], [T.DWORD]]),
    NotifyWinEvent: Fn(null, [[T.DWORD], [T.HWND], [T.LONG], [T.LONG]]),
    OemKeyScan: Fn(T.DWORD, [[T.WORD]]),
    OemToCharA: Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR]]),
    OemToCharW: Fn(T.BOOL, [[T.LPCSTR], [T.LPWSTR]]),
    OemToCharBuffA: Fn(T.BOOL, [[T.LPCSTR], [T.LPSTR], [T.DWORD]]),
    OemToCharBuffW: Fn(T.BOOL, [[T.LPCSTR], [T.LPWSTR], [T.DWORD]]),
    OffsetRect: Fn(T.BOOL, [[T.LPRECT], [T.INT], [T.INT]]),
    OpenClipboard: Fn(T.BOOL, [[T.HWND]]),
    OpenDesktopA: Fn(T.HDESK, [[T.LPCSTR], [T.DWORD], [T.BOOL], [T.ACCESS_MASK]]),
    OpenDesktopW: Fn(T.HDESK, [[T.LPCWSTR], [T.DWORD], [T.BOOL], [T.ACCESS_MASK]]),
    OpenIcon: Fn(T.BOOL, [[T.HWND]]),
    OpenInputDesktop: Fn(T.HDESK, [[T.DWORD], [T.BOOL], [T.ACCESS_MASK]]),
    OpenWindowStationA: Fn(T.HWINSTA, [[T.LPCSTR], [T.BOOL], [T.ACCESS_MASK]]),
    OpenWindowStationW: Fn(T.HWINSTA, [[T.LPCWSTR], [T.BOOL], [T.ACCESS_MASK]]),
    PaintDesktop: Fn(T.BOOL, [[T.HDC]]),
    PeekMessageA: Fn(T.BOOL, [[T.LPMSG], [T.HWND], [T.UINT], [T.UINT], [T.UINT]]),
    PeekMessageW: Fn(T.BOOL, [[T.LPMSG], [T.HWND], [T.UINT], [T.UINT], [T.UINT]]),
    PostMessageA: Fn(T.BOOL, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    PostMessageW: Fn(T.BOOL, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    PostQuitMessage: Fn(null, [[T.INT]]),
    PostThreadMessageA: Fn(T.BOOL, [[T.DWORD], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    PostThreadMessageW: Fn(T.BOOL, [[T.DWORD], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    PrivateExtractIconExA: Fn(T.UINT, [[T.LPCSTR], [T.i32], [Pointer(T.HICON)], [Pointer(T.HICON)], [T.UINT]]),
    PrivateExtractIconExW: Fn(T.UINT, [[T.LPCWSTR], [T.i32], [Pointer(T.HICON)], [Pointer(T.HICON)], [T.UINT]]),
    PrivateExtractIconsA: Fn(T.UINT, [[T.LPCSTR], [T.i32], [T.i32], [T.i32], [Pointer(T.HICON)], [Pointer(T.UINT)], [T.UINT], [T.UINT]]),
    PrivateExtractIconsW: Fn(T.UINT, [[T.LPCWSTR], [T.i32], [T.i32], [T.i32], [Pointer(T.HICON)], [Pointer(T.UINT)], [T.UINT], [T.UINT]]),
    PtInRect: Fn(T.BOOL, [[Pointer(T.RECT)], [T.POINT]]),
    RealChildWindowFromPoint: Fn(T.HWND, [[T.HWND], [T.POINT]]),
    RealGetWindowClassA: Fn(T.UINT, [[T.HWND], [T.LPSTR], [T.UINT]]),
    RealGetWindowClassW: Fn(T.UINT, [[T.HWND], [T.LPWSTR], [T.UINT]]),
    RedrawWindow: Fn(T.BOOL, [[T.HWND], [Pointer(T.RECT)], [T.HRGN], [T.UINT]]),
    RegisterClassA: Fn(T.ATOM, [[Pointer(T.WNDCLASSA)]]),
    RegisterClassW: Fn(T.ATOM, [[Pointer(T.WNDCLASSW)]]),
    RegisterClassExA: Fn(T.ATOM, [[Pointer(T.WNDCLASSEXA)]]),
    RegisterClassExW: Fn(T.ATOM, [[Pointer(T.WNDCLASSEXW)]]),
    RegisterClipboardFormatA: Fn(T.UINT, [[T.LPCSTR]]),
    RegisterClipboardFormatW: Fn(T.UINT, [[T.LPCWSTR]]),
    RegisterDeviceNotificationA: Fn(T.HDEVNOTIFY, [[T.HANDLE], [T.LPVOID], [T.DWORD]]),
    RegisterDeviceNotificationW: Fn(T.HDEVNOTIFY, [[T.HANDLE], [T.LPVOID], [T.DWORD]]),
    RegisterHotKey: Fn(T.BOOL, [[T.HWND], [T.INT], [T.UINT], [T.UINT]]),
    RegisterRawInputDevices: Fn(T.BOOL, [[T.PRAWINPUTDEVICE], [T.UINT], [T.UINT]]),
    RegisterWindowMessageA: Fn(T.UINT, [[T.LPCSTR]]),
    RegisterWindowMessageW: Fn(T.UINT, [[T.LPCWSTR]]),
    ReleaseCapture: Fn(T.BOOL, [[null]]),
    ReleaseDC: Fn(T.INT, [[T.HWND], [T.HDC]]),
    RemoveMenu: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT]]),
    RemovePropA: Fn(T.HANDLE, [[T.HWND], [T.LPCSTR]]),
    RemovePropW: Fn(T.HANDLE, [[T.HWND], [T.LPCWSTR]]),
    ReplyMessage: Fn(T.BOOL, [[T.LRESULT]]),
    ScreenToClient: Fn(T.BOOL, [[T.HWND], [T.LPPOINT]]),
    ScrollChildren: Fn(null, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    ScrollDC: Fn(T.BOOL, [[T.HDC], [T.INT], [T.INT], [Pointer(T.RECT)], [Pointer(T.RECT)], [T.HRGN], [T.LPRECT]]),
    ScrollWindow: Fn(T.BOOL, [[T.HWND], [T.INT], [T.INT], [Pointer(T.RECT)], [Pointer(T.RECT)]]),
    ScrollWindowEx: Fn(T.INT, [[T.HWND], [T.INT], [T.INT], [Pointer(T.RECT)], [Pointer(T.RECT)], [T.HRGN], [T.LPRECT], [T.UINT]]),
    SendDlgItemMessageA: Fn(T.LRESULT, [[T.HWND], [T.INT], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    SendDlgItemMessageW: Fn(T.LRESULT, [[T.HWND], [T.INT], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    SendInput: Fn(T.UINT, [[T.UINT], [T.LPINPUT], [T.i32]]),
    SendMessageA: Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    SendMessageW: Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    SendMessageCallbackA: Fn(T.BOOL, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM], [T.SENDASYNCPROC], [T.ULONG_PTR]]),
    SendMessageCallbackW: Fn(T.BOOL, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM], [T.SENDASYNCPROC], [T.ULONG_PTR]]),
    SendMessageTimeoutA: Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM], [T.UINT], [T.UINT], [T.PDWORD_PTR]]),
    SendMessageTimeoutW: Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM], [T.UINT], [T.UINT], [T.PDWORD_PTR]]),
    SendNotifyMessageA: Fn(T.BOOL, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    SendNotifyMessageW: Fn(T.BOOL, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    SetActiveWindow: Fn(T.HWND, [[T.HWND]]),
    SetCapture: Fn(T.HWND, [[T.HWND]]),
    SetCaretBlinkTime: Fn(T.BOOL, [[T.UINT]]),
    SetCaretPos: Fn(T.BOOL, [[T.INT], [T.INT]]),
    SetClassLongA: Fn(T.DWORD, [[T.HWND], [T.INT], [T.LONG]]),
    SetClassLongW: Fn(T.DWORD, [[T.HWND], [T.INT], [T.LONG]]),
    SetClassWord: Fn(T.WORD, [[T.HWND], [T.INT], [T.WORD]]),
    SetClipboardData: Fn(T.HANDLE, [[T.UINT], [T.HANDLE]]),
    SetClipboardViewer: Fn(T.HWND, [[T.HWND]]),
    SetCursor: Fn(T.HCURSOR, [[T.HCURSOR]]),
    SetCursorPos: Fn(T.BOOL, [[T.INT], [T.INT]]),
    SetDebugErrorLevel: Fn(null, [[T.DWORD]]),
    SetDeskWallPaper: Fn(T.BOOL, [[T.LPCSTR]]),
    SetDlgItemInt: Fn(T.BOOL, [[T.HWND], [T.INT], [T.UINT], [T.BOOL]]),
    SetDlgItemTextA: Fn(T.BOOL, [[T.HWND], [T.INT], [T.LPCSTR]]),
    SetDlgItemTextW: Fn(T.BOOL, [[T.HWND], [T.INT], [T.LPCWSTR]]),
    SetDoubleClickTime: Fn(T.BOOL, [[T.UINT]]),
    SetFocus: Fn(T.HWND, [[T.HWND]]),
    SetForegroundWindow: Fn(T.BOOL, [[T.HWND]]),
    SetInternalWindowPos: Fn(null, [[T.HWND], [T.UINT], [T.LPRECT], [T.LPPOINT]]),
    SetKeyboardState: Fn(T.BOOL, [[T.LPBYTE]]),
    SetLastErrorEx: Fn(null, [[T.DWORD], [T.DWORD]]),
    SetLayeredWindowAttributes: Fn(T.BOOL, [[T.HWND], [T.COLORREF], [T.BYTE], [T.DWORD]]),
    SetMenu: Fn(T.BOOL, [[T.HWND], [T.HMENU]]),
    SetMenuContextHelpId: Fn(T.BOOL, [[T.HMENU], [T.DWORD]]),
    SetMenuDefaultItem: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT]]),
    SetMenuInfo: Fn(T.BOOL, [[T.HMENU], [T.LPCMENUINFO]]),
    SetMenuItemBitmaps: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.UINT], [T.HBITMAP], [T.HBITMAP]]),
    SetMenuItemInfoA: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.BOOL], [Pointer(T.MENUITEMINFOA)]]),
    SetMenuItemInfoW: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.BOOL], [Pointer(T.MENUITEMINFOW)]]),
    SetMessageExtraInfo: Fn(T.LPARAM, [[T.LPARAM]]),
    SetMessageQueue: Fn(T.BOOL, [[T.INT]]),
    SetProcessDefaultLayout: Fn(T.BOOL, [[T.DWORD]]),
    SetProcessWindowStation: Fn(T.BOOL, [[T.HWINSTA]]),
    SetParent: Fn(T.HWND, [[T.HWND], [T.HWND]]),
    SetPropA: Fn(T.BOOL, [[T.HWND], [T.LPCSTR], [T.HANDLE]]),
    SetPropW: Fn(T.BOOL, [[T.HWND], [T.LPCWSTR], [T.HANDLE]]),
    SetRect: Fn(T.BOOL, [[T.LPRECT], [T.INT], [T.INT], [T.INT], [T.INT]]),
    SetRectEmpty: Fn(T.BOOL, [[T.LPRECT]]),
    SetScrollInfo: Fn(T.INT, [[T.HWND], [T.INT], [Pointer(T.SCROLLINFO)], [T.BOOL]]),
    SetScrollPos: Fn(T.INT, [[T.HWND], [T.INT], [T.INT], [T.BOOL]]),
    SetScrollRange: Fn(T.BOOL, [[T.HWND], [T.INT], [T.INT], [T.INT], [T.BOOL]]),
    SetSystemCursor: Fn(T.BOOL, [[T.HCURSOR], [T.DWORD]]),
    SetSystemMenu: Fn(T.BOOL, [[T.HWND], [T.HMENU]]),
    SetSystemTimer: Fn(T.UINT_PTR, [[T.HWND], [T.UINT_PTR], [T.UINT], [T.TIMERPROC]]),
    SetThreadDesktop: Fn(T.BOOL, [[T.HDESK]]),
    SetTimer: Fn(T.UINT_PTR, [[T.HWND], [T.UINT_PTR], [T.UINT], [T.TIMERPROC]]),
    SetUserObjectInformationA: Fn(T.BOOL, [[T.HANDLE], [T.INT], [T.LPVOID], [T.DWORD]]),
    SetUserObjectInformationW: Fn(T.BOOL, [[T.HANDLE], [T.INT], [T.LPVOID], [T.DWORD]]),
    SetUserObjectSecurity: Fn(T.BOOL, [[T.HANDLE], [T.PSECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR]]),
    SetWindowContextHelpId: Fn(T.BOOL, [[T.HWND], [T.DWORD]]),
    SetWindowLongA: Fn(T.LONG, [[T.HWND], [T.INT], [T.LONG]]),
    SetWindowLongW: Fn(T.LONG, [[T.HWND], [T.INT], [T.LONG]]),
    SetWindowPlacement: Fn(T.BOOL, [[T.HWND], [Pointer(T.WINDOWPLACEMENT)]]),
    SetWindowsHookA: Fn(T.HHOOK, [[T.INT], [T.HOOKPROC]]),
    SetWindowsHookW: Fn(T.HHOOK, [[T.INT], [T.HOOKPROC]]),
    SetWindowsHookExA: Fn(T.HHOOK, [[T.INT], [T.HOOKPROC], [T.HINSTANCE], [T.DWORD]]),
    SetWindowsHookExW: Fn(T.HHOOK, [[T.INT], [T.HOOKPROC], [T.HINSTANCE], [T.DWORD]]),
    SetWindowPos: Fn(T.BOOL, [[T.HWND], [T.HWND], [T.INT], [T.INT], [T.INT], [T.INT], [T.UINT]]),
    SetWindowRgn: Fn(T.INT, [[T.HWND], [T.HRGN], [T.BOOL]]),
    SetWindowTextA: Fn(T.BOOL, [[T.HWND], [T.LPCSTR]]),
    SetWindowTextW: Fn(T.BOOL, [[T.HWND], [T.LPCWSTR]]),
    SetWindowWord: Fn(T.WORD, [[T.HWND], [T.INT], [T.WORD]]),
    SetWinEventHook: Fn(T.HWINEVENTHOOK, [[T.DWORD], [T.DWORD], [T.HMODULE], [T.WINEVENTPROC], [T.DWORD], [T.DWORD], [T.DWORD]]),
    ShowCaret: Fn(T.BOOL, [[T.HWND]]),
    ShowCursor: Fn(T.INT, [[T.BOOL]]),
    ShowScrollBar: Fn(T.BOOL, [[T.HWND], [T.INT], [T.BOOL]]),
    ShowOwnedPopups: Fn(T.BOOL, [[T.HWND], [T.BOOL]]),
    ShowWindow: Fn(T.BOOL, [[T.HWND], [T.INT]]),
    ShowWindowAsync: Fn(T.BOOL, [[T.HWND], [T.INT]]),
    SubtractRect: Fn(T.BOOL, [[T.LPRECT], [Pointer(T.RECT)], [Pointer(T.RECT)]]),
    SwapMouseButton: Fn(T.BOOL, [[T.BOOL]]),
    SwitchDesktop: Fn(T.BOOL, [[T.HDESK]]),
    SwitchToThisWindow: Fn(null, [[T.HWND], [T.BOOL]]),
    SystemParametersInfoA: Fn(T.BOOL, [[T.UINT], [T.UINT], [T.LPVOID], [T.UINT]]),
    SystemParametersInfoW: Fn(T.BOOL, [[T.UINT], [T.UINT], [T.LPVOID], [T.UINT]]),
    TabbedTextOutA: Fn(T.LONG, [[T.HDC], [T.INT], [T.INT], [T.LPCSTR], [T.INT], [T.INT], [Pointer(T.INT)], [T.INT]]),
    TabbedTextOutW: Fn(T.LONG, [[T.HDC], [T.INT], [T.INT], [T.LPCWSTR], [T.INT], [T.INT], [Pointer(T.INT)], [T.INT]]),
    TileWindows: Fn(T.WORD, [[T.HWND], [T.UINT], [Pointer(T.RECT)], [T.UINT], [Pointer(T.HWND)]]),
    ToAscii: Fn(T.INT, [[T.UINT], [T.UINT], [Pointer(T.BYTE)], [T.LPWORD], [T.UINT]]),
    ToAsciiEx: Fn(T.INT, [[T.UINT], [T.UINT], [Pointer(T.BYTE)], [T.LPWORD], [T.UINT], [T.HKL]]),
    ToUnicode: Fn(T.INT, [[T.UINT], [T.UINT], [Pointer(T.BYTE)], [T.LPWSTR], [T.i32], [T.UINT]]),
    ToUnicodeEx: Fn(T.INT, [[T.UINT], [T.UINT], [Pointer(T.BYTE)], [T.LPWSTR], [T.i32], [T.UINT], [T.HKL]]),
    TrackMouseEvent: Fn(T.BOOL, [[T.LPTRACKMOUSEEVENT]]),
    TrackPopupMenu: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.INT], [T.INT], [T.INT], [T.HWND], [Pointer(T.RECT)]]),
    TrackPopupMenuEx: Fn(T.BOOL, [[T.HMENU], [T.UINT], [T.INT], [T.INT], [T.HWND], [T.LPTPMPARAMS]]),
    TranslateAcceleratorA: Fn(T.INT, [[T.HWND], [T.HACCEL], [T.LPMSG]]),
    TranslateAcceleratorW: Fn(T.INT, [[T.HWND], [T.HACCEL], [T.LPMSG]]),
    TranslateMDISysAccel: Fn(T.BOOL, [[T.HWND], [T.LPMSG]]),
    TranslateMessage: Fn(T.BOOL, [[Pointer(T.MSG)]]),
    UnhookWinEvent: Fn(T.BOOL, [[T.HWINEVENTHOOK]]),
    UnhookWindowsHook: Fn(T.BOOL, [[T.INT], [T.HOOKPROC]]),
    UnhookWindowsHookEx: Fn(T.BOOL, [[T.HHOOK]]),
    UnloadKeyboardLayout: Fn(T.BOOL, [[T.HKL]]),
    UnionRect: Fn(T.BOOL, [[T.LPRECT], [Pointer(T.RECT)], [Pointer(T.RECT)]]),
    UnregisterClassA: Fn(T.BOOL, [[T.LPCSTR], [T.HINSTANCE]]),
    UnregisterClassW: Fn(T.BOOL, [[T.LPCWSTR], [T.HINSTANCE]]),
    UnregisterDeviceNotification: Fn(T.BOOL, [[T.HDEVNOTIFY]]),
    UnregisterHotKey: Fn(T.BOOL, [[T.HWND], [T.INT]]),
    UpdateWindow: Fn(T.BOOL, [[T.HWND]]),
    UserRealizePalette: Fn(T.UINT, [[T.HDC]]),
    ValidateRect: Fn(T.BOOL, [[T.HWND], [Pointer(T.RECT)]]),
    ValidateRgn: Fn(T.BOOL, [[T.HWND], [T.HRGN]]),
    VkKeyScanA: Fn(T.SHORT, [[T.CHAR]]),
    VkKeyScanW: Fn(T.SHORT, [[T.WCHAR]]),
    VkKeyScanExA: Fn(T.WORD, [[T.CHAR], [T.HKL]]),
    VkKeyScanExW: Fn(T.WORD, [[T.WCHAR], [T.HKL]]),
    WaitForInputIdle: Fn(T.DWORD, [[T.HANDLE], [T.DWORD]]),
    WaitMessage: Fn(T.BOOL, [[null]]),
    WindowFromDC: Fn(T.HWND, [[T.HDC]]),
    WindowFromPoint: Fn(T.HWND, [[T.POINT]]),
    WinHelpA: Fn(T.BOOL, [[T.HWND], [T.LPCSTR], [T.UINT], [T.ULONG_PTR]]),
    WinHelpW: Fn(T.BOOL, [[T.HWND], [T.LPCWSTR], [T.UINT], [T.ULONG_PTR]]),
    keybd_event: Fn(null, [[T.BYTE], [T.BYTE], [T.DWORD], [T.ULONG_PTR]]),
    mouse_event: Fn(null, [[T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.ULONG_PTR]]),
    wsprintfA: Fn(T.INT, [[T.LPSTR], [T.LPCSTR], '...']),
    wsprintfW: Fn(T.INT, [[T.LPWSTR], [T.LPCWSTR], '...']),
    wvsprintfA: Fn(T.INT, [[T.LPSTR], [T.LPCSTR], [T.va_list]]),
    wvsprintfW: Fn(T.INT, [[T.LPWSTR], [T.LPCWSTR], [T.va_list]]),
    SYSTEM_KillSystemTimer: Fn(T.WORD, [[T.WORD]]),
    CompareStringA: Fn(T.INT, [[T.LCID], [T.DWORD], [T.LPCSTR], [T.INT], [T.LPCSTR], [T.INT]]),
    CompareStringW: Fn(T.INT, [[T.LCID], [T.DWORD], [T.LPCWSTR], [T.INT], [T.LPCWSTR], [T.INT]]),
    ConvertDefaultLocale: Fn(T.LCID, [[T.LCID]]),
    EnumCalendarInfoA: Fn(T.BOOL, [[T.CALINFO_ENUMPROCA], [T.LCID], [T.CALID], [T.CALTYPE]]),
    EnumCalendarInfoW: Fn(T.BOOL, [[T.CALINFO_ENUMPROCW], [T.LCID], [T.CALID], [T.CALTYPE]]),
    EnumCalendarInfoExA: Fn(T.BOOL, [[T.CALINFO_ENUMPROCEXA], [T.LCID], [T.CALID], [T.CALTYPE]]),
    EnumCalendarInfoExW: Fn(T.BOOL, [[T.CALINFO_ENUMPROCEXW], [T.LCID], [T.CALID], [T.CALTYPE]]),
    EnumDateFormatsA: Fn(T.BOOL, [[T.DATEFMT_ENUMPROCA], [T.LCID], [T.DWORD]]),
    EnumDateFormatsW: Fn(T.BOOL, [[T.DATEFMT_ENUMPROCW], [T.LCID], [T.DWORD]]),
    EnumDateFormatsExA: Fn(T.BOOL, [[T.DATEFMT_ENUMPROCEXA], [T.LCID], [T.DWORD]]),
    EnumDateFormatsExW: Fn(T.BOOL, [[T.DATEFMT_ENUMPROCEXW], [T.LCID], [T.DWORD]]),
    EnumSystemCodePagesA: Fn(T.BOOL, [[T.CODEPAGE_ENUMPROCA], [T.DWORD]]),
    EnumSystemCodePagesW: Fn(T.BOOL, [[T.CODEPAGE_ENUMPROCW], [T.DWORD]]),
    EnumSystemGeoID: Fn(T.BOOL, [[T.GEOCLASS], [T.GEOID], [T.GEO_ENUMPROC]]),
    EnumSystemLocalesA: Fn(T.BOOL, [[T.LOCALE_ENUMPROCA], [T.DWORD]]),
    EnumSystemLocalesW: Fn(T.BOOL, [[T.LOCALE_ENUMPROCW], [T.DWORD]]),
    EnumSystemLocalesEx: Fn(T.BOOL, [[T.LOCALE_ENUMPROCEX], [T.DWORD], [T.LPARAM], [T.LPVOID]]),
    EnumSystemLanguageGroupsA: Fn(T.BOOL, [[T.LANGUAGEGROUP_ENUMPROCA], [T.DWORD], [T.LONG_PTR]]),
    EnumSystemLanguageGroupsW: Fn(T.BOOL, [[T.LANGUAGEGROUP_ENUMPROCW], [T.DWORD], [T.LONG_PTR]]),
    EnumLanguageGroupLocalesA: Fn(T.BOOL, [[T.LANGGROUPLOCALE_ENUMPROCA], [T.LGRPID], [T.DWORD], [T.LONG_PTR]]),
    EnumLanguageGroupLocalesW: Fn(T.BOOL, [[T.LANGGROUPLOCALE_ENUMPROCW], [T.LGRPID], [T.DWORD], [T.LONG_PTR]]),
    EnumTimeFormatsA: Fn(T.BOOL, [[T.TIMEFMT_ENUMPROCA], [T.LCID], [T.DWORD]]),
    EnumTimeFormatsW: Fn(T.BOOL, [[T.TIMEFMT_ENUMPROCW], [T.LCID], [T.DWORD]]),
    EnumUILanguagesA: Fn(T.BOOL, [[T.UILANGUAGE_ENUMPROCA], [T.DWORD], [T.LONG_PTR]]),
    EnumUILanguagesW: Fn(T.BOOL, [[T.UILANGUAGE_ENUMPROCW], [T.DWORD], [T.LONG_PTR]]),
    FoldStringA: Fn(T.INT, [[T.DWORD], [T.LPCSTR], [T.INT], [T.LPSTR], [T.INT]]),
    FoldStringW: Fn(T.INT, [[T.DWORD], [T.LPCWSTR], [T.INT], [T.LPWSTR], [T.INT]]),
    GetACP: Fn(T.UINT, [[null]]),
    GetCPInfo: Fn(T.BOOL, [[T.UINT], [T.LPCPINFO]]),
    GetCPInfoExA: Fn(T.BOOL, [[T.UINT], [T.DWORD], [T.LPCPINFOEXA]]),
    GetCPInfoExW: Fn(T.BOOL, [[T.UINT], [T.DWORD], [T.LPCPINFOEXW]]),
    GetCalendarInfoA: Fn(T.INT, [[T.LCID], [T.DWORD], [T.DWORD], [T.LPSTR], [T.INT], [T.LPDWORD]]),
    GetCalendarInfoW: Fn(T.INT, [[T.LCID], [T.DWORD], [T.DWORD], [T.LPWSTR], [T.INT], [T.LPDWORD]]),
    GetCurrencyFormatA: Fn(T.INT, [[T.LCID], [T.DWORD], [T.LPCSTR], [Pointer(T.CURRENCYFMTA)], [T.LPSTR], [T.INT]]),
    GetCurrencyFormatW: Fn(T.INT, [[T.LCID], [T.DWORD], [T.LPCWSTR], [Pointer(T.CURRENCYFMTW)], [T.LPWSTR], [T.INT]]),
    GetDateFormatA: Fn(T.INT, [[T.LCID], [T.DWORD], [Pointer(T.SYSTEMTIME)], [T.LPCSTR], [T.LPSTR], [T.INT]]),
    GetDateFormatW: Fn(T.INT, [[T.LCID], [T.DWORD], [Pointer(T.SYSTEMTIME)], [T.LPCWSTR], [T.LPWSTR], [T.INT]]),
    GetGeoInfoA: Fn(T.INT, [[T.GEOID], [T.GEOTYPE], [T.LPSTR], [T.INT], [T.LANGID]]),
    GetGeoInfoW: Fn(T.INT, [[T.GEOID], [T.GEOTYPE], [T.LPWSTR], [T.INT], [T.LANGID]]),
    GetLocaleInfoA: Fn(T.INT, [[T.LCID], [T.LCTYPE], [T.LPSTR], [T.INT]]),
    GetLocaleInfoW: Fn(T.INT, [[T.LCID], [T.LCTYPE], [T.LPWSTR], [T.INT]]),
    GetNumberFormatA: Fn(T.INT, [[T.LCID], [T.DWORD], [T.LPCSTR], [Pointer(T.NUMBERFMTA)], [T.LPSTR], [T.INT]]),
    GetNumberFormatW: Fn(T.INT, [[T.LCID], [T.DWORD], [T.LPCWSTR], [Pointer(T.NUMBERFMTW)], [T.LPWSTR], [T.INT]]),
    GetOEMCP: Fn(T.UINT, [[null]]),
    GetStringTypeA: Fn(T.BOOL, [[T.LCID], [T.DWORD], [T.LPCSTR], [T.INT], [T.LPWORD]]),
    GetStringTypeW: Fn(T.BOOL, [[T.DWORD], [T.LPCWSTR], [T.INT], [T.LPWORD]]),
    GetStringTypeExA: Fn(T.BOOL, [[T.LCID], [T.DWORD], [T.LPCSTR], [T.INT], [T.LPWORD]]),
    GetStringTypeExW: Fn(T.BOOL, [[T.LCID], [T.DWORD], [T.LPCWSTR], [T.INT], [T.LPWORD]]),
    GetSystemDefaultLangID: Fn(T.LANGID, [[null]]),
    GetSystemDefaultLCID: Fn(T.LCID, [[null]]),
    GetSystemDefaultUILanguage: Fn(T.LANGID, [[null]]),
    GetThreadLocale: Fn(T.LCID, [[null]]),
    GetTimeFormatA: Fn(T.INT, [[T.LCID], [T.DWORD], [Pointer(T.SYSTEMTIME)], [T.LPCSTR], [T.LPSTR], [T.INT]]),
    GetTimeFormatW: Fn(T.INT, [[T.LCID], [T.DWORD], [Pointer(T.SYSTEMTIME)], [T.LPCWSTR], [T.LPWSTR], [T.INT]]),
    GetUserDefaultLangID: Fn(T.LANGID, [[null]]),
    GetUserDefaultLCID: Fn(T.LCID, [[null]]),
    GetUserDefaultLocaleName: Fn(T.INT, [[T.LPWSTR], [T.i32]]),
    GetUserDefaultUILanguage: Fn(T.LANGID, [[null]]),
    GetUserGeoID: Fn(T.GEOID, [[T.GEOCLASS]]),
    IdnToAscii: Fn(T.INT, [[T.DWORD], [T.LPCWSTR], [T.INT], [T.LPWSTR], [T.INT]]),
    IdnToNameprepUnicode: Fn(T.INT, [[T.DWORD], [T.LPCWSTR], [T.INT], [T.LPWSTR], [T.INT]]),
    IdnToUnicode: Fn(T.INT, [[T.DWORD], [T.LPCWSTR], [T.INT], [T.LPWSTR], [T.INT]]),
    IsDBCSLeadByte: Fn(T.BOOL, [[T.BYTE]]),
    IsDBCSLeadByteEx: Fn(T.BOOL, [[T.UINT], [T.BYTE]]),
    IsNormalizedString: Fn(T.BOOL, [[T.NORM_FORM], [T.LPCWSTR], [T.INT]]),
    IsValidCodePage: Fn(T.BOOL, [[T.UINT]]),
    IsValidLocale: Fn(T.BOOL, [[T.LCID], [T.DWORD]]),
    IsValidLanguageGroup: Fn(T.BOOL, [[T.LGRPID], [T.DWORD]]),
    LCIDToLocaleName: Fn(T.INT, [[T.LCID], [T.LPWSTR], [T.INT], [T.DWORD]]),
    LCMapStringA: Fn(T.INT, [[T.LCID], [T.DWORD], [T.LPCSTR], [T.INT], [T.LPSTR], [T.INT]]),
    LCMapStringW: Fn(T.INT, [[T.LCID], [T.DWORD], [T.LPCWSTR], [T.INT], [T.LPWSTR], [T.INT]]),
    LocaleNameToLCID: Fn(T.LCID, [[T.LPCWSTR], [T.DWORD]]),
    MultiByteToWideChar: Fn(T.INT, [[T.UINT], [T.DWORD], [T.LPCSTR], [T.INT], [T.LPWSTR], [T.INT]]),
    NormalizeString: Fn(T.INT, [[T.NORM_FORM], [T.LPCWSTR], [T.INT], [T.LPWSTR], [T.INT]]),
    SetCalendarInfoA: Fn(T.INT, [[T.LCID], [T.CALID], [T.CALTYPE], [T.LPCSTR]]),
    SetCalendarInfoW: Fn(T.INT, [[T.LCID], [T.CALID], [T.CALTYPE], [T.LPCWSTR]]),
    SetLocaleInfoA: Fn(T.BOOL, [[T.LCID], [T.LCTYPE], [T.LPCSTR]]),
    SetLocaleInfoW: Fn(T.BOOL, [[T.LCID], [T.LCTYPE], [T.LPCWSTR]]),
    SetThreadLocale: Fn(T.BOOL, [[T.LCID]]),
    SetUserGeoID: Fn(T.BOOL, [[T.GEOID]]),
    WideCharToMultiByte: Fn(T.INT, [[T.UINT], [T.DWORD], [T.LPCWSTR], [T.INT], [T.LPSTR], [T.INT], [T.LPCSTR], [T.LPBOOL]]),
    GetLargestConsoleWindowSize: Fn(T.DWORD, [[T.HANDLE]]),
    AddConsoleAliasA: Fn(T.BOOL, [[T.LPSTR], [T.LPSTR], [T.LPSTR]]),
    AddConsoleAliasW: Fn(T.BOOL, [[T.LPWSTR], [T.LPWSTR], [T.LPWSTR]]),
    AllocConsole: Fn(T.BOOL, [[null]]),
    AttachConsole: Fn(T.BOOL, [[T.DWORD]]),
    CreateConsoleScreenBuffer: Fn(T.HANDLE, [[T.DWORD], [T.DWORD], [T.LPSECURITY_ATTRIBUTES], [T.DWORD], [T.LPVOID]]),
    FillConsoleOutputAttribute: Fn(T.BOOL, [[T.HANDLE], [T.WORD], [T.DWORD], [T.COORD], [T.LPDWORD]]),
    FillConsoleOutputCharacterA: Fn(T.BOOL, [[T.HANDLE], [T.CHAR], [T.DWORD], [T.COORD], [T.LPDWORD]]),
    FillConsoleOutputCharacterW: Fn(T.BOOL, [[T.HANDLE], [T.WCHAR], [T.DWORD], [T.COORD], [T.LPDWORD]]),
    FlushConsoleInputBuffer: Fn(T.BOOL, [[T.HANDLE]]),
    FreeConsole: Fn(T.BOOL, [[null]]),
    GenerateConsoleCtrlEvent: Fn(T.BOOL, [[T.DWORD], [T.DWORD]]),
    GetConsoleAliasA: Fn(T.DWORD, [[T.LPSTR], [T.LPSTR], [T.DWORD], [T.LPSTR]]),
    GetConsoleAliasW: Fn(T.DWORD, [[T.LPWSTR], [T.LPWSTR], [T.DWORD], [T.LPWSTR]]),
    GetConsoleAliasesA: Fn(T.DWORD, [[T.LPSTR], [T.DWORD], [T.LPSTR]]),
    GetConsoleAliasesW: Fn(T.DWORD, [[T.LPWSTR], [T.DWORD], [T.LPWSTR]]),
    GetConsoleAliasesLengthA: Fn(T.DWORD, [[T.LPSTR]]),
    GetConsoleAliasesLengthW: Fn(T.DWORD, [[T.LPWSTR]]),
    GetConsoleAliasExesA: Fn(T.DWORD, [[T.LPSTR], [T.DWORD]]),
    GetConsoleAliasExesW: Fn(T.DWORD, [[T.LPWSTR], [T.DWORD]]),
    GetConsoleAliasExesLengthA: Fn(T.DWORD, [[null]]),
    GetConsoleAliasExesLengthW: Fn(T.DWORD, [[null]]),
    GetConsoleCP: Fn(T.UINT, [[null]]),
    GetConsoleCursorInfo: Fn(T.BOOL, [[T.HANDLE], [T.LPCONSOLE_CURSOR_INFO]]),
    GetConsoleDisplayMode: Fn(T.BOOL, [[T.LPDWORD]]),
    GetConsoleFontSize: Fn(T.COORD, [[T.HANDLE], [T.DWORD]]),
    GetConsoleHistoryInfo: Fn(T.BOOL, [[T.LPCONSOLE_HISTORY_INFO]]),
    GetConsoleInputExeNameA: Fn(T.BOOL, [[T.DWORD], [T.LPSTR]]),
    GetConsoleInputExeNameW: Fn(T.BOOL, [[T.DWORD], [T.LPWSTR]]),
    GetConsoleMode: Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD]]),
    GetConsoleOriginalTitleA: Fn(T.DWORD, [[T.LPSTR], [T.DWORD]]),
    GetConsoleOriginalTitleW: Fn(T.DWORD, [[T.LPWSTR], [T.DWORD]]),
    GetConsoleOutputCP: Fn(T.UINT, [[null]]),
    GetConsoleProcessList: Fn(T.DWORD, [[T.LPDWORD], [T.DWORD]]),
    GetConsoleScreenBufferInfo: Fn(T.BOOL, [[T.HANDLE], [T.LPCONSOLE_SCREEN_BUFFER_INFO]]),
    GetConsoleScreenBufferInfoEx: Fn(T.BOOL, [[T.HANDLE], [T.LPCONSOLE_SCREEN_BUFFER_INFOEX]]),
    GetConsoleTitleA: Fn(T.DWORD, [[T.LPSTR], [T.DWORD]]),
    GetConsoleTitleW: Fn(T.DWORD, [[T.LPWSTR], [T.DWORD]]),
    GetConsoleWindow: Fn(T.HWND, [[null]]),
    GetCurrentConsoleFont: Fn(T.BOOL, [[T.HANDLE], [T.BOOL], [T.LPCONSOLE_FONT_INFO]]),
    GetCurrentConsoleFontEx: Fn(T.BOOL, [[T.HANDLE], [T.BOOL], [T.LPCONSOLE_FONT_INFOEX]]),
    GetNumberOfConsoleInputEvents: Fn(T.BOOL, [[T.HANDLE], [T.LPDWORD]]),
    GetNumberOfConsoleMouseButtons: Fn(T.BOOL, [[T.LPDWORD]]),
    PeekConsoleInputA: Fn(T.BOOL, [[T.HANDLE], [T.PINPUT_RECORD], [T.DWORD], [T.LPDWORD]]),
    PeekConsoleInputW: Fn(T.BOOL, [[T.HANDLE], [T.PINPUT_RECORD], [T.DWORD], [T.LPDWORD]]),
    ReadConsoleA: Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.LPVOID]]),
    ReadConsoleW: Fn(T.BOOL, [[T.HANDLE], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.LPVOID]]),
    ReadConsoleInputA: Fn(T.BOOL, [[T.HANDLE], [T.PINPUT_RECORD], [T.DWORD], [T.LPDWORD]]),
    ReadConsoleInputW: Fn(T.BOOL, [[T.HANDLE], [T.PINPUT_RECORD], [T.DWORD], [T.LPDWORD]]),
    ReadConsoleOutputA: Fn(T.BOOL, [[T.HANDLE], [T.LPCHAR_INFO], [T.COORD], [T.COORD], [T.LPSMALL_RECT]]),
    ReadConsoleOutputW: Fn(T.BOOL, [[T.HANDLE], [T.LPCHAR_INFO], [T.COORD], [T.COORD], [T.LPSMALL_RECT]]),
    ReadConsoleOutputAttribute: Fn(T.BOOL, [[T.HANDLE], [T.LPWORD], [T.DWORD], [T.COORD], [T.LPDWORD]]),
    ReadConsoleOutputCharacterA: Fn(T.BOOL, [[T.HANDLE], [T.LPSTR], [T.DWORD], [T.COORD], [T.LPDWORD]]),
    ReadConsoleOutputCharacterW: Fn(T.BOOL, [[T.HANDLE], [T.LPWSTR], [T.DWORD], [T.COORD], [T.LPDWORD]]),
    ScrollConsoleScreenBufferA: Fn(T.BOOL, [[T.HANDLE], [T.LPSMALL_RECT], [T.LPSMALL_RECT], [T.COORD], [T.LPCHAR_INFO]]),
    ScrollConsoleScreenBufferW: Fn(T.BOOL, [[T.HANDLE], [T.LPSMALL_RECT], [T.LPSMALL_RECT], [T.COORD], [T.LPCHAR_INFO]]),
    SetConsoleActiveScreenBuffer: Fn(T.BOOL, [[T.HANDLE]]),
    SetConsoleCP: Fn(T.BOOL, [[T.UINT]]),
    SetConsoleCtrlHandler: Fn(T.BOOL, [[T.PHANDLER_ROUTINE], [T.BOOL]]),
    SetConsoleCursorInfo: Fn(T.BOOL, [[T.HANDLE], [T.LPCONSOLE_CURSOR_INFO]]),
    SetConsoleCursorPosition: Fn(T.BOOL, [[T.HANDLE], [T.COORD]]),
    SetConsoleDisplayMode: Fn(T.BOOL, [[T.HANDLE], [T.DWORD], [T.LPCOORD]]),
    SetConsoleHistoryInfo: Fn(T.BOOL, [[T.LPCONSOLE_HISTORY_INFO]]),
    SetConsoleMode: Fn(T.BOOL, [[T.HANDLE], [T.DWORD]]),
    SetConsoleOutputCP: Fn(T.BOOL, [[T.UINT]]),
    SetConsoleScreenBufferInfoEx: Fn(T.BOOL, [[T.HANDLE], [T.LPCONSOLE_SCREEN_BUFFER_INFOEX]]),
    SetConsoleScreenBufferSize: Fn(T.BOOL, [[T.HANDLE], [T.COORD]]),
    SetConsoleTextAttribute: Fn(T.BOOL, [[T.HANDLE], [T.WORD]]),
    SetConsoleTitleA: Fn(T.BOOL, [[T.LPCSTR]]),
    SetConsoleTitleW: Fn(T.BOOL, [[T.LPCWSTR]]),
    SetConsoleWindowInfo: Fn(T.BOOL, [[T.HANDLE], [T.BOOL], [T.LPSMALL_RECT]]),
    SetCurrentConsoleFontEx: Fn(T.BOOL, [[T.HANDLE], [T.BOOL], [T.LPCONSOLE_FONT_INFOEX]]),
    WriteConsoleA: Fn(T.BOOL, [[T.HANDLE], [Pointer(null)], [T.DWORD], [T.LPDWORD], [T.LPVOID]]),
    WriteConsoleW: Fn(T.BOOL, [[T.HANDLE], [Pointer(null)], [T.DWORD], [T.LPDWORD], [T.LPVOID]]),
    WriteConsoleInputA: Fn(T.BOOL, [[T.HANDLE], [Pointer(T.INPUT_RECORD)], [T.DWORD], [T.LPDWORD]]),
    WriteConsoleInputW: Fn(T.BOOL, [[T.HANDLE], [Pointer(T.INPUT_RECORD)], [T.DWORD], [T.LPDWORD]]),
    WriteConsoleOutputA: Fn(T.BOOL, [[T.HANDLE], [Pointer(T.CHAR_INFO)], [T.COORD], [T.COORD], [T.LPSMALL_RECT]]),
    WriteConsoleOutputW: Fn(T.BOOL, [[T.HANDLE], [Pointer(T.CHAR_INFO)], [T.COORD], [T.COORD], [T.LPSMALL_RECT]]),
    WriteConsoleOutputAttribute: Fn(T.BOOL, [[T.HANDLE], [Pointer(T.WORD)], [T.DWORD], [T.COORD], [T.LPDWORD]]),
    WriteConsoleOutputCharacterA: Fn(T.BOOL, [[T.HANDLE], [T.LPCSTR], [T.DWORD], [T.COORD], [T.LPDWORD]]),
    WriteConsoleOutputCharacterW: Fn(T.BOOL, [[T.HANDLE], [T.LPCWSTR], [T.DWORD], [T.COORD], [T.LPDWORD]]),
    VerFindFileA: Fn(T.DWORD, [[T.DWORD], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPSTR], [T.PUINT], [T.LPSTR], [T.PUINT]]),
    VerFindFileW: Fn(T.DWORD, [[T.DWORD], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPWSTR], [T.PUINT], [T.LPWSTR], [T.PUINT]]),
    VerInstallFileA: Fn(T.DWORD, [[T.DWORD], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPSTR], [T.PUINT]]),
    VerInstallFileW: Fn(T.DWORD, [[T.DWORD], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPWSTR], [T.PUINT]]),
    VerLanguageNameA: Fn(T.DWORD, [[T.DWORD], [T.LPSTR], [T.DWORD]]),
    VerLanguageNameW: Fn(T.DWORD, [[T.DWORD], [T.LPWSTR], [T.DWORD]]),
    VerQueryValueA: Fn(T.BOOL, [[T.LPCVOID], [T.LPCSTR], [Pointer(T.LPVOID)], [T.PUINT]]),
    VerQueryValueW: Fn(T.BOOL, [[T.LPCVOID], [T.LPCWSTR], [Pointer(T.LPVOID)], [T.PUINT]]),
    GetFileVersionInfoSizeA: Fn(T.DWORD, [[T.LPCSTR], [T.LPDWORD]]),
    GetFileVersionInfoSizeW: Fn(T.DWORD, [[T.LPCWSTR], [T.LPDWORD]]),
    GetFileVersionInfoA: Fn(T.BOOL, [[T.LPCSTR], [T.DWORD], [T.DWORD], [T.LPVOID]]),
    GetFileVersionInfoW: Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD], [T.DWORD], [T.LPVOID]]),
    AbortSystemShutdownA: Fn(T.BOOL, [[T.LPSTR]]),
    AbortSystemShutdownW: Fn(T.BOOL, [[T.LPWSTR]]),
    InitiateSystemShutdownA: Fn(T.BOOL, [[T.LPSTR], [T.LPSTR], [T.DWORD], [T.BOOL], [T.BOOL]]),
    InitiateSystemShutdownW: Fn(T.BOOL, [[T.LPWSTR], [T.LPWSTR], [T.DWORD], [T.BOOL], [T.BOOL]]),
    InitiateSystemShutdownExA: Fn(T.BOOL, [[T.LPSTR], [T.LPSTR], [T.DWORD], [T.BOOL], [T.BOOL], [T.DWORD]]),
    InitiateSystemShutdownExW: Fn(T.BOOL, [[T.LPWSTR], [T.LPWSTR], [T.DWORD], [T.BOOL], [T.BOOL], [T.DWORD]]),
    RegCloseKey: Fn(T.LSTATUS, [[T.HKEY]]),
    RegConnectRegistryA: Fn(T.LSTATUS, [[T.LPCSTR], [T.HKEY], [T.PHKEY]]),
    RegConnectRegistryW: Fn(T.LSTATUS, [[T.LPCWSTR], [T.HKEY], [T.PHKEY]]),
    RegCreateKeyA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.PHKEY]]),
    RegCreateKeyW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.PHKEY]]),
    RegCreateKeyExA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.DWORD], [T.LPSTR], [T.DWORD], [T.REGSAM], [T.LPSECURITY_ATTRIBUTES], [T.PHKEY], [T.LPDWORD]]),
    RegCreateKeyExW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.DWORD], [T.LPWSTR], [T.DWORD], [T.REGSAM], [T.LPSECURITY_ATTRIBUTES], [T.PHKEY], [T.LPDWORD]]),
    RegDeleteKeyA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR]]),
    RegDeleteKeyW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR]]),
    RegDeleteKeyExA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.REGSAM], [T.DWORD]]),
    RegDeleteKeyExW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.REGSAM], [T.DWORD]]),
    RegDeleteKeyValueA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.LPCSTR]]),
    RegDeleteKeyValueW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.LPCWSTR]]),
    RegDeleteTreeA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR]]),
    RegDeleteTreeW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR]]),
    RegDeleteValueA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR]]),
    RegDeleteValueW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR]]),
    RegDisablePredefinedCache: Fn(T.LSTATUS, [[null]]),
    RegEnumKeyA: Fn(T.LSTATUS, [[T.HKEY], [T.DWORD], [T.LPSTR], [T.DWORD]]),
    RegEnumKeyW: Fn(T.LSTATUS, [[T.HKEY], [T.DWORD], [T.LPWSTR], [T.DWORD]]),
    RegEnumKeyExA: Fn(T.LSTATUS, [[T.HKEY], [T.DWORD], [T.LPSTR], [T.LPDWORD], [T.LPDWORD], [T.LPSTR], [T.LPDWORD], [T.LPFILETIME]]),
    RegEnumKeyExW: Fn(T.LSTATUS, [[T.HKEY], [T.DWORD], [T.LPWSTR], [T.LPDWORD], [T.LPDWORD], [T.LPWSTR], [T.LPDWORD], [T.LPFILETIME]]),
    RegEnumValueA: Fn(T.LSTATUS, [[T.HKEY], [T.DWORD], [T.LPSTR], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPBYTE], [T.LPDWORD]]),
    RegEnumValueW: Fn(T.LSTATUS, [[T.HKEY], [T.DWORD], [T.LPWSTR], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPBYTE], [T.LPDWORD]]),
    RegFlushKey: Fn(T.LSTATUS, [[T.HKEY]]),
    RegGetKeySecurity: Fn(T.LSTATUS, [[T.HKEY], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR], [T.LPDWORD]]),
    RegGetValueA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.LPDWORD], [T.PVOID], [T.LPDWORD]]),
    RegGetValueW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.LPDWORD], [T.PVOID], [T.LPDWORD]]),
    RegLoadKeyA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.LPCSTR]]),
    RegLoadKeyW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.LPCWSTR]]),
    RegLoadMUIStringA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.LPSTR], [T.DWORD], [T.LPDWORD], [T.DWORD], [T.LPCSTR]]),
    RegLoadMUIStringW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.LPWSTR], [T.DWORD], [T.LPDWORD], [T.DWORD], [T.LPCWSTR]]),
    RegNotifyChangeKeyValue: Fn(T.LSTATUS, [[T.HKEY], [T.BOOL], [T.DWORD], [T.HANDLE], [T.BOOL]]),
    RegOpenCurrentUser: Fn(T.LSTATUS, [[T.REGSAM], [T.PHKEY]]),
    RegOpenKeyA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.PHKEY]]),
    RegOpenKeyW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.PHKEY]]),
    RegOpenKeyExW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.DWORD], [T.REGSAM], [T.PHKEY]]),
    RegOpenKeyExA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.DWORD], [T.REGSAM], [T.PHKEY]]),
    RegOpenUserClassesRoot: Fn(T.LSTATUS, [[T.HANDLE], [T.DWORD], [T.REGSAM], [T.PHKEY]]),
    RegOverridePredefKey: Fn(T.LSTATUS, [[T.HKEY], [T.HKEY]]),
    RegQueryInfoKeyW: Fn(T.LSTATUS, [[T.HKEY], [T.LPWSTR], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPFILETIME]]),
    RegQueryInfoKeyA: Fn(T.LSTATUS, [[T.HKEY], [T.LPSTR], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPFILETIME]]),
    RegQueryMultipleValuesA: Fn(T.LSTATUS, [[T.HKEY], [T.PVALENTA], [T.DWORD], [T.LPSTR], [T.LPDWORD]]),
    RegQueryMultipleValuesW: Fn(T.LSTATUS, [[T.HKEY], [T.PVALENTW], [T.DWORD], [T.LPWSTR], [T.LPDWORD]]),
    RegQueryValueA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.LPSTR], [T.LPLONG]]),
    RegQueryValueW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.LPWSTR], [T.LPLONG]]),
    RegQueryValueExA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.LPDWORD], [T.LPDWORD], [T.LPBYTE], [T.LPDWORD]]),
    RegQueryValueExW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.LPDWORD], [T.LPDWORD], [T.LPBYTE], [T.LPDWORD]]),
    RegReplaceKeyA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR]]),
    RegReplaceKeyW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR]]),
    RegRestoreKeyA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.DWORD]]),
    RegRestoreKeyW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.DWORD]]),
    RegSaveKeyA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.LPSECURITY_ATTRIBUTES]]),
    RegSaveKeyW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.LPSECURITY_ATTRIBUTES]]),
    RegSetKeySecurity: Fn(T.LSTATUS, [[T.HKEY], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR]]),
    RegSetValueA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.DWORD], [T.LPCSTR], [T.DWORD]]),
    RegSetValueW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.DWORD], [T.LPCWSTR], [T.DWORD]]),
    RegSetValueExA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR], [T.DWORD], [T.DWORD], [Pointer(T.BYTE)], [T.DWORD]]),
    RegSetValueExW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR], [T.DWORD], [T.DWORD], [Pointer(T.BYTE)], [T.DWORD]]),
    RegUnLoadKeyA: Fn(T.LSTATUS, [[T.HKEY], [T.LPCSTR]]),
    RegUnLoadKeyW: Fn(T.LSTATUS, [[T.HKEY], [T.LPCWSTR]]),
    WNetAddConnectionA: Fn(T.DWORD, [[T.LPCSTR], [T.LPCSTR], [T.LPCSTR]]),
    WNetAddConnectionW: Fn(T.DWORD, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR]]),
    WNetAddConnection2A: Fn(T.DWORD, [[T.LPNETRESOURCEA], [T.LPCSTR], [T.LPCSTR], [T.DWORD]]),
    WNetAddConnection2W: Fn(T.DWORD, [[T.LPNETRESOURCEW], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD]]),
    WNetAddConnection3A: Fn(T.DWORD, [[T.HWND], [T.LPNETRESOURCEA], [T.LPCSTR], [T.LPCSTR], [T.DWORD]]),
    WNetAddConnection3W: Fn(T.DWORD, [[T.HWND], [T.LPNETRESOURCEW], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD]]),
    WNetCancelConnectionA: Fn(T.DWORD, [[T.LPCSTR], [T.BOOL]]),
    WNetCancelConnectionW: Fn(T.DWORD, [[T.LPCWSTR], [T.BOOL]]),
    WNetCancelConnection2A: Fn(T.DWORD, [[T.LPCSTR], [T.DWORD], [T.BOOL]]),
    WNetCancelConnection2W: Fn(T.DWORD, [[T.LPCWSTR], [T.DWORD], [T.BOOL]]),
    WNetGetConnectionA: Fn(T.DWORD, [[T.LPCSTR], [T.LPSTR], [T.LPDWORD]]),
    WNetGetConnectionW: Fn(T.DWORD, [[T.LPCWSTR], [T.LPWSTR], [T.LPDWORD]]),
    WNetGetLastErrorA: Fn(T.DWORD, [[T.LPDWORD], [T.LPSTR], [T.DWORD], [T.LPSTR], [T.DWORD]]),
    WNetGetLastErrorW: Fn(T.DWORD, [[T.LPDWORD], [T.LPWSTR], [T.DWORD], [T.LPWSTR], [T.DWORD]]),
    WNetRestoreConnectionA: Fn(T.DWORD, [[T.HWND], [T.LPCSTR]]),
    WNetRestoreConnectionW: Fn(T.DWORD, [[T.HWND], [T.LPCWSTR]]),
    WNetUseConnectionA: Fn(T.DWORD, [[T.HWND], [T.LPNETRESOURCEA], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.LPSTR], [T.LPDWORD], [T.LPDWORD]]),
    WNetUseConnectionW: Fn(T.DWORD, [[T.HWND], [T.LPNETRESOURCEW], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.LPWSTR], [T.LPDWORD], [T.LPDWORD]]),
    WNetSetConnectionA: Fn(T.DWORD, [[T.LPCSTR], [T.DWORD], [T.LPVOID]]),
    WNetSetConnectionW: Fn(T.DWORD, [[T.LPCWSTR], [T.DWORD], [T.LPVOID]]),
    WNetConnectionDialog: Fn(T.DWORD, [[T.HWND], [T.DWORD]]),
    WNetDisconnectDialog: Fn(T.DWORD, [[T.HWND], [T.DWORD]]),
    WNetConnectionDialog1A: Fn(T.DWORD, [[T.LPCONNECTDLGSTRUCTA]]),
    WNetConnectionDialog1W: Fn(T.DWORD, [[T.LPCONNECTDLGSTRUCTW]]),
    WNetDisconnectDialog1A: Fn(T.DWORD, [[T.LPDISCDLGSTRUCTA]]),
    WNetDisconnectDialog1W: Fn(T.DWORD, [[T.LPDISCDLGSTRUCTW]]),
    WNetOpenEnumA: Fn(T.DWORD, [[T.DWORD], [T.DWORD], [T.DWORD], [T.LPNETRESOURCEA], [T.LPHANDLE]]),
    WNetOpenEnumW: Fn(T.DWORD, [[T.DWORD], [T.DWORD], [T.DWORD], [T.LPNETRESOURCEW], [T.LPHANDLE]]),
    WNetEnumResourceA: Fn(T.DWORD, [[T.HANDLE], [T.LPDWORD], [T.LPVOID], [T.LPDWORD]]),
    WNetEnumResourceW: Fn(T.DWORD, [[T.HANDLE], [T.LPDWORD], [T.LPVOID], [T.LPDWORD]]),
    WNetGetResourceInformationA: Fn(T.DWORD, [[T.LPNETRESOURCEA], [T.LPVOID], [T.LPDWORD], [Pointer(T.LPSTR)]]),
    WNetGetResourceInformationW: Fn(T.DWORD, [[T.LPNETRESOURCEW], [T.LPVOID], [T.LPDWORD], [Pointer(T.LPWSTR)]]),
    WNetGetResourceParentA: Fn(T.DWORD, [[T.LPNETRESOURCEA], [T.LPVOID], [T.LPDWORD]]),
    WNetGetResourceParentW: Fn(T.DWORD, [[T.LPNETRESOURCEW], [T.LPVOID], [T.LPDWORD]]),
    WNetCloseEnum: Fn(T.DWORD, [[T.HANDLE]]),
    WNetGetUniversalNameA: Fn(T.DWORD, [[T.LPCSTR], [T.DWORD], [T.LPVOID], [T.LPDWORD]]),
    WNetGetUniversalNameW: Fn(T.DWORD, [[T.LPCWSTR], [T.DWORD], [T.LPVOID], [T.LPDWORD]]),
    WNetGetUserA: Fn(T.DWORD, [[T.LPCSTR], [T.LPSTR], [T.LPDWORD]]),
    WNetGetUserW: Fn(T.DWORD, [[T.LPCWSTR], [T.LPWSTR], [T.LPDWORD]]),
    WNetGetProviderNameA: Fn(T.DWORD, [[T.DWORD], [T.LPSTR], [T.LPDWORD]]),
    WNetGetProviderNameW: Fn(T.DWORD, [[T.DWORD], [T.LPWSTR], [T.LPDWORD]]),
    WNetGetNetworkInformationA: Fn(T.DWORD, [[T.LPCSTR], [T.LPNETINFOSTRUCT]]),
    WNetGetNetworkInformationW: Fn(T.DWORD, [[T.LPCWSTR], [T.LPNETINFOSTRUCT]]),
    MultinetGetConnectionPerformanceA: Fn(T.DWORD, [[T.LPNETRESOURCEA], [T.LPNETCONNECTINFOSTRUCT]]),
    MultinetGetConnectionPerformanceW: Fn(T.DWORD, [[T.LPNETRESOURCEW], [T.LPNETCONNECTINFOSTRUCT]]),
    MultinetGetErrorTextA: Fn(T.DWORD, [[T.DWORD], [T.DWORD], [T.DWORD]]),
    MultinetGetErrorTextW: Fn(T.DWORD, [[T.DWORD], [T.DWORD], [T.DWORD]]),
    WNetEnumCachedPasswords: Fn(T.UINT, [[T.LPSTR], [T.WORD], [T.BYTE], [T.ENUMPASSWORDPROC], [T.DWORD]]),
    WNetGetCachedPassword: Fn(T.DWORD, [[T.LPSTR], [T.WORD], [T.LPSTR], [T.LPWORD], [T.BYTE]]),
    WNetCachePassword: Fn(T.DWORD, [[T.LPSTR], [T.WORD], [T.LPSTR], [T.WORD], [T.BYTE], [T.WORD]]),
    DdeSetQualityOfService: Fn(T.BOOL, [[T.HWND], [Pointer(T.SECURITY_QUALITY_OF_SERVICE)], [T.PSECURITY_QUALITY_OF_SERVICE]]),
    FreeDDElParam: Fn(T.BOOL, [[T.UINT], [T.LPARAM]]),
    ImpersonateDdeClientWindow: Fn(T.BOOL, [[T.HWND], [T.HWND]]),
    PackDDElParam: Fn(T.LPARAM, [[T.UINT], [T.UINT_PTR], [T.UINT_PTR]]),
    ReuseDDElParam: Fn(T.LPARAM, [[T.LPARAM], [T.UINT], [T.UINT], [T.UINT_PTR], [T.UINT_PTR]]),
    UnpackDDElParam: Fn(T.BOOL, [[T.UINT], [T.LPARAM], [T.PUINT_PTR], [T.PUINT_PTR]]),
    DdeAbandonTransaction: Fn(T.BOOL, [[T.DWORD, 'idInst'], [T.HCONV, 'hConv'], [T.DWORD, 'idTransaction']]),
    DdeAccessData: Fn(T.LPBYTE, [[T.HDDEDATA], [T.LPDWORD]]),
    DdeAddData: Fn(T.HDDEDATA, [[T.HDDEDATA], [T.LPBYTE], [T.DWORD], [T.DWORD]]),
    DdeClientTransaction: Fn(T.HDDEDATA, [[T.LPBYTE], [T.DWORD], [T.HCONV], [T.HSZ], [T.UINT], [T.UINT], [T.DWORD], [T.LPDWORD]]),
    DdeCmpStringHandles: Fn(T.INT, [[T.HSZ], [T.HSZ]]),
    DdeConnect: Fn(T.HCONV, [[T.DWORD], [T.HSZ], [T.HSZ], [T.PCONVCONTEXT]]),
    DdeConnectList: Fn(T.HCONVLIST, [[T.DWORD], [T.HSZ], [T.HSZ], [T.HCONVLIST], [T.PCONVCONTEXT]]),
    DdeCreateDataHandle: Fn(T.HDDEDATA, [[T.DWORD], [T.LPBYTE], [T.DWORD], [T.DWORD], [T.HSZ], [T.UINT], [T.UINT]]),
    DdeCreateStringHandleA: Fn(T.HSZ, [[T.DWORD], [T.LPCSTR], [T.INT]]),
    DdeCreateStringHandleW: Fn(T.HSZ, [[T.DWORD], [T.LPCWSTR], [T.INT]]),
    DdeDisconnect: Fn(T.BOOL, [[T.HCONV]]),
    DdeDisconnectList: Fn(T.BOOL, [[T.HCONVLIST]]),
    DdeEnableCallback: Fn(T.BOOL, [[T.DWORD], [T.HCONV], [T.UINT]]),
    DdeFreeDataHandle: Fn(T.BOOL, [[T.HDDEDATA]]),
    DdeFreeStringHandle: Fn(T.BOOL, [[T.DWORD], [T.HSZ]]),
    DdeGetData: Fn(T.DWORD, [[T.HDDEDATA], [T.LPBYTE], [T.DWORD], [T.DWORD]]),
    DdeGetLastError: Fn(T.UINT, [[T.DWORD]]),
    DdeImpersonateClient: Fn(T.BOOL, [[T.HCONV]]),
    DdeInitializeA: Fn(T.UINT, [[T.LPDWORD], [T.PFNCALLBACK], [T.DWORD], [T.DWORD]]),
    DdeInitializeW: Fn(T.UINT, [[T.LPDWORD], [T.PFNCALLBACK], [T.DWORD], [T.DWORD]]),
    DdeKeepStringHandle: Fn(T.BOOL, [[T.DWORD], [T.HSZ]]),
    DdeNameService: Fn(T.HDDEDATA, [[T.DWORD], [T.HSZ], [T.HSZ], [T.UINT]]),
    DdePostAdvise: Fn(T.BOOL, [[T.DWORD], [T.HSZ], [T.HSZ]]),
    DdeQueryConvInfo: Fn(T.UINT, [[T.HCONV], [T.DWORD], [T.PCONVINFO]]),
    DdeQueryNextServer: Fn(T.HCONV, [[T.HCONVLIST], [T.HCONV]]),
    DdeQueryStringA: Fn(T.DWORD, [[T.DWORD], [T.HSZ], [T.LPSTR], [T.DWORD], [T.INT]]),
    DdeQueryStringW: Fn(T.DWORD, [[T.DWORD], [T.HSZ], [T.LPWSTR], [T.DWORD], [T.INT]]),
    DdeReconnect: Fn(T.HCONV, [[T.HCONV]]),
    DdeSetUserHandle: Fn(T.BOOL, [[T.HCONV], [T.DWORD], [T.DWORD]]),
    DdeUnaccessData: Fn(T.BOOL, [[T.HDDEDATA]]),
    DdeUninitialize: Fn(T.BOOL, [[T.DWORD]]),
    LZDone: Fn(null, [[null]]),
    CopyLZFile: Fn(T.LONG, [[T.HFILE], [T.HFILE]]),
    LZOpenFileA: Fn(T.HFILE, [[T.LPSTR], [T.LPOFSTRUCT], [T.WORD]]),
    LZOpenFileW: Fn(T.HFILE, [[T.LPWSTR], [T.LPOFSTRUCT], [T.WORD]]),
    LZRead: Fn(T.INT, [[T.INT], [T.LPSTR], [T.INT]]),
    LZStart: Fn(T.INT, [[null]]),
    LZClose: Fn(null, [[T.HFILE]]),
    LZCopy: Fn(T.LONG, [[T.HFILE], [T.HFILE]]),
    LZInit: Fn(T.HFILE, [[T.HFILE]]),
    LZSeek: Fn(T.LONG, [[T.HFILE], [T.LONG], [T.INT]]),
    GetExpandedNameA: Fn(T.INT, [[T.LPSTR], [T.LPSTR]]),
    GetExpandedNameW: Fn(T.INT, [[T.LPWSTR], [T.LPWSTR]]),
    DefDriverProc: Fn(T.LRESULT, [[T.DWORD_PTR], [T.HDRVR], [T.UINT], [T.LPARAM], [T.LPARAM]]),
    OpenDriverA: Fn(T.HDRVR, [[T.LPCSTR, 'szDriverName'], [T.LPCSTR, 'szSectionName'], [T.LPARAM, 'lParam2']]),
    OpenDriver: Fn(T.HDRVR, [[T.LPCWSTR, 'szDriverName'], [T.LPCWSTR, 'szSectionName'], [T.LPARAM, 'lParam2']]),
    CloseDriver: Fn(T.LRESULT, [[T.HDRVR, 'hDriver'], [T.LPARAM, 'lParam1'], [T.LPARAM, 'lParam2']]),
    SendDriverMessage: Fn(T.LRESULT, [[T.HDRVR, 'hDriver'], [T.UINT, 'message'], [T.LPARAM, 'lParam1'], [T.LPARAM, 'lParam2']]),
    GetDriverModuleHandle: Fn(T.HMODULE, [[T.HDRVR, 'hDriver']]),
    GetDriverFlags: Fn(T.DWORD, [[T.HDRVR, 'hDriver']]),
    mmsystemGetVersion: Fn(T.UINT, [[null]]),
    sndPlaySoundA: Fn(T.BOOL, [[T.LPCSTR, 'lpszSound'], [T.UINT, 'fuSound']]),
    sndPlaySoundW: Fn(T.BOOL, [[T.LPCWSTR, 'lpszSound'], [T.UINT, 'fuSound']]),
    PlaySoundA: Fn(T.BOOL, [[T.LPCSTR, 'pszSound'], [T.HMODULE, 'hmod'], [T.DWORD, 'fdwSound']]),
    PlaySoundW: Fn(T.BOOL, [[T.LPCWSTR, 'pszSound'], [T.HMODULE, 'hmod'], [T.DWORD, 'fdwSound']]),
    waveOutGetNumDevs: Fn(T.UINT, [[null]]),
    waveOutGetDevCapsA: Fn(T.UINT, [[T.UINT_PTR], [T.LPWAVEOUTCAPSA], [T.UINT]]),
    waveOutGetDevCapsW: Fn(T.UINT, [[T.UINT_PTR], [T.LPWAVEOUTCAPSW], [T.UINT]]),
    waveOutGetVolume: Fn(T.UINT, [[T.HWAVEOUT], [Pointer(T.DWORD)]]),
    waveOutSetVolume: Fn(T.UINT, [[T.HWAVEOUT], [T.DWORD]]),
    waveOutGetErrorTextA: Fn(T.UINT, [[T.UINT], [T.LPSTR], [T.UINT]]),
    waveOutGetErrorTextW: Fn(T.UINT, [[T.UINT], [T.LPWSTR], [T.UINT]]),
    waveOutOpen: Fn(T.MMRESULT, [[Pointer(T.HWAVEOUT)], [T.UINT], [T.LPCWAVEFORMATEX], [T.DWORD_PTR], [T.DWORD_PTR], [T.DWORD]]),
    waveOutClose: Fn(T.UINT, [[T.HWAVEOUT]]),
    waveOutPrepareHeader: Fn(T.UINT, [[T.HWAVEOUT], [Pointer(T.WAVEHDR)], [T.UINT]]),
    waveOutUnprepareHeader: Fn(T.UINT, [[T.HWAVEOUT], [Pointer(T.WAVEHDR)], [T.UINT]]),
    waveOutWrite: Fn(T.UINT, [[T.HWAVEOUT], [Pointer(T.WAVEHDR)], [T.UINT]]),
    waveOutPause: Fn(T.UINT, [[T.HWAVEOUT]]),
    waveOutRestart: Fn(T.UINT, [[T.HWAVEOUT]]),
    waveOutReset: Fn(T.UINT, [[T.HWAVEOUT]]),
    waveOutBreakLoop: Fn(T.UINT, [[T.HWAVEOUT]]),
    waveOutGetPosition: Fn(T.UINT, [[T.HWAVEOUT], [T.LPMMTIME], [T.UINT]]),
    waveOutGetPitch: Fn(T.UINT, [[T.HWAVEOUT], [Pointer(T.DWORD)]]),
    waveOutSetPitch: Fn(T.UINT, [[T.HWAVEOUT], [T.DWORD]]),
    waveOutGetPlaybackRate: Fn(T.UINT, [[T.HWAVEOUT], [Pointer(T.DWORD)]]),
    waveOutSetPlaybackRate: Fn(T.UINT, [[T.HWAVEOUT], [T.DWORD]]),
    waveOutGetID: Fn(T.UINT, [[T.HWAVEOUT], [Pointer(T.UINT)]]),
    waveOutMessage: Fn(T.UINT, [[T.HWAVEOUT], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR]]),
    waveInGetNumDevs: Fn(T.UINT, [[null]]),
    waveInGetDevCapsA: Fn(T.UINT, [[T.UINT_PTR], [T.LPWAVEINCAPSA], [T.UINT]]),
    waveInGetDevCapsW: Fn(T.UINT, [[T.UINT_PTR], [T.LPWAVEINCAPSW], [T.UINT]]),
    waveInGetErrorTextA: Fn(T.UINT, [[T.UINT], [T.LPSTR], [T.UINT]]),
    waveInGetErrorTextW: Fn(T.UINT, [[T.UINT], [T.LPWSTR], [T.UINT]]),
    waveInOpen: Fn(T.MMRESULT, [[Pointer(T.HWAVEIN)], [T.UINT], [T.LPCWAVEFORMATEX], [T.DWORD_PTR], [T.DWORD_PTR], [T.DWORD]]),
    waveInClose: Fn(T.UINT, [[T.HWAVEIN]]),
    waveInPrepareHeader: Fn(T.UINT, [[T.HWAVEIN], [Pointer(T.WAVEHDR)], [T.UINT]]),
    waveInUnprepareHeader: Fn(T.UINT, [[T.HWAVEIN], [Pointer(T.WAVEHDR)], [T.UINT]]),
    waveInAddBuffer: Fn(T.UINT, [[T.HWAVEIN], [Pointer(T.WAVEHDR)], [T.UINT]]),
    waveInStart: Fn(T.UINT, [[T.HWAVEIN]]),
    waveInStop: Fn(T.UINT, [[T.HWAVEIN]]),
    waveInReset: Fn(T.UINT, [[T.HWAVEIN]]),
    waveInGetPosition: Fn(T.UINT, [[T.HWAVEIN], [T.LPMMTIME], [T.UINT]]),
    waveInGetID: Fn(T.UINT, [[T.HWAVEIN], [Pointer(T.UINT)]]),
    waveInMessage: Fn(T.UINT, [[T.HWAVEIN], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR]]),
    midiOutGetNumDevs: Fn(T.UINT, [[null]]),
    midiOutGetDevCapsA: Fn(T.UINT, [[T.UINT_PTR], [T.LPMIDIOUTCAPSA], [T.UINT]]),
    midiOutGetDevCapsW: Fn(T.UINT, [[T.UINT_PTR], [T.LPMIDIOUTCAPSW], [T.UINT]]),
    midiOutGetVolume: Fn(T.UINT, [[T.HMIDIOUT], [Pointer(T.DWORD)]]),
    midiOutSetVolume: Fn(T.UINT, [[T.HMIDIOUT], [T.DWORD]]),
    midiOutGetErrorTextA: Fn(T.UINT, [[T.UINT], [T.LPSTR], [T.UINT]]),
    midiOutGetErrorTextW: Fn(T.UINT, [[T.UINT], [T.LPWSTR], [T.UINT]]),
    midiOutOpen: Fn(T.UINT, [[T.LPHMIDIOUT], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR], [T.DWORD]]),
    midiOutClose: Fn(T.UINT, [[T.HMIDIOUT]]),
    midiOutPrepareHeader: Fn(T.UINT, [[T.HMIDIOUT], [Pointer(T.MIDIHDR)], [T.UINT]]),
    midiOutUnprepareHeader: Fn(T.UINT, [[T.HMIDIOUT], [Pointer(T.MIDIHDR)], [T.UINT]]),
    midiOutShortMsg: Fn(T.UINT, [[T.HMIDIOUT], [T.DWORD]]),
    midiOutLongMsg: Fn(T.UINT, [[T.HMIDIOUT], [Pointer(T.MIDIHDR)], [T.UINT]]),
    midiOutReset: Fn(T.UINT, [[T.HMIDIOUT]]),
    midiOutCachePatches: Fn(T.UINT, [[T.HMIDIOUT], [T.UINT], [Pointer(T.WORD)], [T.UINT]]),
    midiOutCacheDrumPatches: Fn(T.UINT, [[T.HMIDIOUT], [T.UINT], [Pointer(T.WORD)], [T.UINT]]),
    midiOutGetID: Fn(T.UINT, [[T.HMIDIOUT], [Pointer(T.UINT)]]),
    midiOutMessage: Fn(T.UINT, [[T.HMIDIOUT], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR]]),
    midiInGetNumDevs: Fn(T.UINT, [[null]]),
    midiInGetDevCapsA: Fn(T.UINT, [[T.UINT_PTR], [T.LPMIDIINCAPSA], [T.UINT]]),
    midiInGetDevCapsW: Fn(T.UINT, [[T.UINT_PTR], [T.LPMIDIINCAPSW], [T.UINT]]),
    midiInGetErrorTextA: Fn(T.UINT, [[T.UINT], [T.LPSTR], [T.UINT]]),
    midiInGetErrorTextW: Fn(T.UINT, [[T.UINT], [T.LPWSTR], [T.UINT]]),
    midiInOpen: Fn(T.UINT, [[T.LPHMIDIIN], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR], [T.DWORD]]),
    midiInClose: Fn(T.UINT, [[T.HMIDIIN]]),
    midiInPrepareHeader: Fn(T.UINT, [[T.HMIDIIN], [Pointer(T.MIDIHDR)], [T.UINT]]),
    midiInUnprepareHeader: Fn(T.UINT, [[T.HMIDIIN], [Pointer(T.MIDIHDR)], [T.UINT]]),
    midiInAddBuffer: Fn(T.UINT, [[T.HMIDIIN], [Pointer(T.MIDIHDR)], [T.UINT]]),
    midiInStart: Fn(T.UINT, [[T.HMIDIIN]]),
    midiInStop: Fn(T.UINT, [[T.HMIDIIN]]),
    midiInReset: Fn(T.UINT, [[T.HMIDIIN]]),
    midiInGetID: Fn(T.UINT, [[T.HMIDIIN], [Pointer(T.UINT)]]),
    midiInMessage: Fn(T.UINT, [[T.HMIDIIN], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR]]),
    midiStreamClose: Fn(T.MMRESULT, [[T.HMIDISTRM, 'hms']]),
    midiStreamOpen: Fn(T.MMRESULT, [[T.LPHMIDISTRM], [T.LPUINT], [T.DWORD], [T.DWORD_PTR], [T.DWORD_PTR], [T.DWORD]]),
    midiStreamOut: Fn(T.MMRESULT, [[T.HMIDISTRM, 'hms'], [T.LPMIDIHDR, 'lpMidiHdr'], [T.UINT, 'cbMidiHdr']]),
    midiStreamPause: Fn(T.MMRESULT, [[T.HMIDISTRM, 'hms']]),
    midiStreamPosition: Fn(T.MMRESULT, [[T.HMIDISTRM, 'hms'], [T.LPMMTIME, 'lpmmt'], [T.UINT, 'cbmmt']]),
    midiStreamProperty: Fn(T.MMRESULT, [[T.HMIDISTRM, 'hms'], [T.LPBYTE, 'lpPropData'], [T.DWORD, 'dwProperty']]),
    midiStreamRestart: Fn(T.MMRESULT, [[T.HMIDISTRM, 'hms']]),
    midiStreamStop: Fn(T.MMRESULT, [[T.HMIDISTRM, 'hms']]),
    auxGetNumDevs: Fn(T.UINT, [[null]]),
    auxGetDevCapsA: Fn(T.UINT, [[T.UINT_PTR], [T.LPAUXCAPSA], [T.UINT]]),
    auxGetDevCapsW: Fn(T.UINT, [[T.UINT_PTR], [T.LPAUXCAPSW], [T.UINT]]),
    auxSetVolume: Fn(T.UINT, [[T.UINT], [T.DWORD]]),
    auxGetVolume: Fn(T.UINT, [[T.UINT], [T.LPDWORD]]),
    auxOutMessage: Fn(T.UINT, [[T.UINT], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR]]),
    timeGetSystemTime: Fn(T.MMRESULT, [[T.LPMMTIME], [T.UINT]]),
    timeGetTime: Fn(T.DWORD, [[null]]),
    timeSetEvent: Fn(T.MMRESULT, [[T.UINT], [T.UINT], [T.LPTIMECALLBACK], [T.DWORD_PTR], [T.UINT]]),
    timeKillEvent: Fn(T.MMRESULT, [[T.UINT]]),
    timeGetDevCaps: Fn(T.MMRESULT, [[T.LPTIMECAPS], [T.UINT]]),
    timeBeginPeriod: Fn(T.MMRESULT, [[T.UINT]]),
    timeEndPeriod: Fn(T.MMRESULT, [[T.UINT]]),
    joyGetDevCapsA: Fn(T.MMRESULT, [[T.UINT_PTR], [T.LPJOYCAPSA], [T.UINT]]),
    joyGetDevCapsW: Fn(T.MMRESULT, [[T.UINT_PTR], [T.LPJOYCAPSW], [T.UINT]]),
    joyGetNumDevs: Fn(T.UINT, [[null]]),
    joyGetPos: Fn(T.MMRESULT, [[T.UINT], [T.LPJOYINFO]]),
    joyGetPosEx: Fn(T.MMRESULT, [[T.UINT], [T.LPJOYINFOEX]]),
    joyGetThreshold: Fn(T.MMRESULT, [[T.UINT], [Pointer(T.UINT)]]),
    joyReleaseCapture: Fn(T.MMRESULT, [[T.UINT]]),
    joySetCapture: Fn(T.MMRESULT, [[T.HWND], [T.UINT], [T.UINT], [T.BOOL]]),
    joySetThreshold: Fn(T.MMRESULT, [[T.UINT], [T.UINT]]),
    mixerGetNumDevs: Fn(T.UINT, [[null]]),
    mixerOpen: Fn(T.UINT, [[T.LPHMIXER], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR], [T.DWORD]]),
    mixerClose: Fn(T.UINT, [[T.HMIXER]]),
    mixerMessage: Fn(T.DWORD, [[T.HMIXER], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR]]),
    mixerGetDevCapsA: Fn(T.UINT, [[T.UINT_PTR], [T.LPMIXERCAPSA], [T.UINT]]),
    mixerGetDevCapsW: Fn(T.UINT, [[T.UINT_PTR], [T.LPMIXERCAPSW], [T.UINT]]),
    mixerGetLineInfoA: Fn(T.UINT, [[T.HMIXEROBJ], [T.LPMIXERLINEA], [T.DWORD]]),
    mixerGetLineInfoW: Fn(T.UINT, [[T.HMIXEROBJ], [T.LPMIXERLINEW], [T.DWORD]]),
    mixerGetID: Fn(T.UINT, [[T.HMIXEROBJ], [T.LPUINT], [T.DWORD]]),
    mixerGetLineControlsA: Fn(T.UINT, [[T.HMIXEROBJ], [T.LPMIXERLINECONTROLSA], [T.DWORD]]),
    mixerGetLineControlsW: Fn(T.UINT, [[T.HMIXEROBJ], [T.LPMIXERLINECONTROLSW], [T.DWORD]]),
    mixerGetControlDetailsA: Fn(T.UINT, [[T.HMIXEROBJ], [T.LPMIXERCONTROLDETAILS], [T.DWORD]]),
    mixerGetControlDetailsW: Fn(T.UINT, [[T.HMIXEROBJ], [T.LPMIXERCONTROLDETAILS], [T.DWORD]]),
    mixerSetControlDetails: Fn(T.UINT, [[T.HMIXEROBJ], [T.LPMIXERCONTROLDETAILS], [T.DWORD]]),
    mmioInstallIOProcA: Fn(T.LPMMIOPROC, [[T.FOURCC], [T.LPMMIOPROC], [T.DWORD]]),
    mmioInstallIOProcW: Fn(T.LPMMIOPROC, [[T.FOURCC], [T.LPMMIOPROC], [T.DWORD]]),
    mmioStringToFOURCCA: Fn(T.FOURCC, [[T.LPCSTR], [T.UINT]]),
    mmioStringToFOURCCW: Fn(T.FOURCC, [[T.LPCWSTR], [T.UINT]]),
    mmioOpenA: Fn(T.HMMIO, [[T.LPSTR], [Pointer(T.MMIOINFO)], [T.DWORD]]),
    mmioOpenW: Fn(T.HMMIO, [[T.LPWSTR], [Pointer(T.MMIOINFO)], [T.DWORD]]),
    mmioRenameA: Fn(T.MMRESULT, [[T.LPCSTR, 'szFileName'], [T.LPCSTR, 'szNewFileName'], [Pointer(T.MMIOINFO), 'lpmmioinfo'], [T.DWORD, 'dwRenameFlags']]),
    mmioRenameW: Fn(T.MMRESULT, [[T.LPCWSTR, 'szFileName'], [T.LPCWSTR, 'szNewFileName'], [Pointer(T.MMIOINFO), 'lpmmioinfo'], [T.DWORD, 'dwRenameFlags']]),
    mmioClose: Fn(T.MMRESULT, [[T.HMMIO], [T.UINT]]),
    mmioRead: Fn(T.LONG, [[T.HMMIO], [T.HPSTR], [T.LONG]]),
    mmioWrite: Fn(T.LONG, [[T.HMMIO], [T.HPCSTR], [T.LONG]]),
    mmioSeek: Fn(T.LONG, [[T.HMMIO], [T.LONG], [T.INT]]),
    mmioGetInfo: Fn(T.MMRESULT, [[T.HMMIO], [Pointer(T.MMIOINFO)], [T.UINT]]),
    mmioSetInfo: Fn(T.MMRESULT, [[T.HMMIO], [Pointer(T.MMIOINFO)], [T.UINT]]),
    mmioSetBuffer: Fn(T.MMRESULT, [[T.HMMIO], [T.LPSTR], [T.LONG], [T.UINT]]),
    mmioFlush: Fn(T.MMRESULT, [[T.HMMIO], [T.UINT]]),
    mmioAdvance: Fn(T.MMRESULT, [[T.HMMIO], [Pointer(T.MMIOINFO)], [T.UINT]]),
    mmioSendMessage: Fn(T.LRESULT, [[T.HMMIO], [T.UINT], [T.LPARAM], [T.LPARAM]]),
    mmioDescend: Fn(T.MMRESULT, [[T.HMMIO], [Pointer(T.MMCKINFO)], [Pointer(T.MMCKINFO)], [T.UINT]]),
    mmioAscend: Fn(T.MMRESULT, [[T.HMMIO], [Pointer(T.MMCKINFO)], [T.UINT]]),
    mmioCreateChunk: Fn(T.MMRESULT, [[T.HMMIO], [Pointer(T.MMCKINFO)], [T.UINT]]),
    mciExecute: Fn(T.BOOL, [[T.LPCSTR]]),
    mciSendCommandA: Fn(T.DWORD, [[T.MCIDEVICEID], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR]]),
    mciSendCommandW: Fn(T.DWORD, [[T.MCIDEVICEID], [T.UINT], [T.DWORD_PTR], [T.DWORD_PTR]]),
    mciSendStringA: Fn(T.DWORD, [[T.LPCSTR], [T.LPSTR], [T.UINT], [T.HWND]]),
    mciSendStringW: Fn(T.DWORD, [[T.LPCWSTR], [T.LPWSTR], [T.UINT], [T.HWND]]),
    mciGetDeviceIDA: Fn(T.MCIDEVICEID, [[T.LPCSTR]]),
    mciGetDeviceIDW: Fn(T.MCIDEVICEID, [[T.LPCWSTR]]),
    mciGetDeviceIDFromElementIDA: Fn(T.MCIDEVICEID, [[T.DWORD], [T.LPCSTR]]),
    mciGetDeviceIDFromElementIDW: Fn(T.MCIDEVICEID, [[T.DWORD], [T.LPCWSTR]]),
    mciGetErrorStringA: Fn(T.BOOL, [[T.MCIERROR], [T.LPSTR], [T.UINT]]),
    mciGetErrorStringW: Fn(T.BOOL, [[T.MCIERROR], [T.LPWSTR], [T.UINT]]),
    mciSetYieldProc: Fn(T.BOOL, [[T.MCIDEVICEID], [T.YIELDPROC], [T.DWORD]]),
    mciGetCreatorTask: Fn(T.HTASK, [[T.MCIDEVICEID]]),
    mciGetYieldProc: Fn(T.YIELDPROC, [[T.MCIDEVICEID], [Pointer(T.DWORD)]]),
    Netbios: Fn(T.UCHAR, [[T.PNCB, 'pncb']]),
    DceErrorInqTextA: Fn(T.RPC_STATUS, [[T.RPC_STATUS, 'e'], [T.RPC_CSTR, 'buffer']]),
    DceErrorInqTextW: Fn(T.RPC_STATUS, [[T.RPC_STATUS, 'e'], [T.RPC_WSTR, 'buffer']]),
    RpcRaiseException: Fn(null, [[T.RPC_STATUS, 'exception']]),
    RpcBindingCopy: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'SourceBinding'], [Pointer(T.RPC_BINDING_HANDLE), 'DestinationBinding']]),
    RpcBindingFree: Fn(T.RPC_STATUS, [[Pointer(T.RPC_BINDING_HANDLE), 'Binding']]),
    RpcBindingInqObject: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.UUID), 'ObjectUuid']]),
    RpcBindingInqOption: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [T.ULONG, 'Option'], [Pointer(T.ULONG_PTR), 'OptionValue']]),
    RpcBindingReset: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding']]),
    RpcBindingSetObject: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.UUID), 'ObjectUuid']]),
    RpcBindingSetOption: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [T.ULONG, 'Option'], [T.ULONG_PTR, 'OptionValue']]),
    RpcObjectSetType: Fn(T.RPC_STATUS, [[Pointer(T.UUID), 'ObjUuid'], [Pointer(T.UUID), 'TypeUuid']]),
    RpcBindingFromStringBindingA: Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'StringBinding'], [Pointer(T.RPC_BINDING_HANDLE), 'Binding']]),
    RpcBindingFromStringBindingW: Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'StringBinding'], [Pointer(T.RPC_BINDING_HANDLE), 'Binding']]),
    RpcBindingToStringBindingA: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.RPC_CSTR), 'StringBinding']]),
    RpcBindingToStringBindingW: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.RPC_WSTR), 'StringBinding']]),
    RpcBindingVectorFree: Fn(T.RPC_STATUS, [[Pointer(Pointer(T.RPC_BINDING_VECTOR)), 'BindingVector']]),
    RpcStringBindingComposeA: Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'ObjUuid'], [T.RPC_CSTR, 'Protseq'], [T.RPC_CSTR, 'NetworkAddr'], [T.RPC_CSTR, 'Endpoint'], [T.RPC_CSTR, 'Options'], [Pointer(T.RPC_CSTR), 'StringBinding']]),
    RpcStringBindingComposeW: Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'ObjUuid'], [T.RPC_WSTR, 'Protseq'], [T.RPC_WSTR, 'NetworkAddr'], [T.RPC_WSTR, 'Endpoint'], [T.RPC_WSTR, 'Options'], [Pointer(T.RPC_WSTR), 'StringBinding']]),
    RpcStringBindingParseA: Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'StringBinding'], [Pointer(T.RPC_CSTR), 'ObjUuid'], [Pointer(T.RPC_CSTR), 'Protseq'], [Pointer(T.RPC_CSTR), 'NetworkAddr'], [Pointer(T.RPC_CSTR), 'Endpoint'], [Pointer(T.RPC_CSTR), 'NetworkOptions']]),
    RpcStringBindingParseW: Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'StringBinding'], [Pointer(T.RPC_WSTR), 'ObjUuid'], [Pointer(T.RPC_WSTR), 'Protseq'], [Pointer(T.RPC_WSTR), 'NetworkAddr'], [Pointer(T.RPC_WSTR), 'Endpoint'], [Pointer(T.RPC_WSTR), 'NetworkOptions']]),
    RpcEpResolveBinding: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [T.RPC_IF_HANDLE, 'IfSpec']]),
    RpcEpRegisterA: Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.RPC_BINDING_VECTOR), 'BindingVector'], [Pointer(T.UUID_VECTOR), 'UuidVector'], [T.RPC_CSTR, 'Annotation']]),
    RpcEpRegisterW: Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.RPC_BINDING_VECTOR), 'BindingVector'], [Pointer(T.UUID_VECTOR), 'UuidVector'], [T.RPC_WSTR, 'Annotation']]),
    RpcEpRegisterNoReplaceA: Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.RPC_BINDING_VECTOR), 'BindingVector'], [Pointer(T.UUID_VECTOR), 'UuidVector'], [T.RPC_CSTR, 'Annotation']]),
    RpcEpRegisterNoReplaceW: Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.RPC_BINDING_VECTOR), 'BindingVector'], [Pointer(T.UUID_VECTOR), 'UuidVector'], [T.RPC_WSTR, 'Annotation']]),
    RpcEpUnregister: Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.RPC_BINDING_VECTOR), 'BindingVector'], [Pointer(T.UUID_VECTOR), 'UuidVector']]),
    RpcServerInqBindings: Fn(T.RPC_STATUS, [[Pointer(Pointer(T.RPC_BINDING_VECTOR)), 'BindingVector']]),
    RpcServerListen: Fn(T.RPC_STATUS, [[T.u32, 'MinimumCallThreads'], [T.u32, 'MaxCalls'], [T.u32, 'DontWait']]),
    RpcMgmtEnableIdleCleanup: Fn(T.RPC_STATUS, [[null]]),
    RpcMgmtSetAuthorizationFn: Fn(T.RPC_STATUS, [[T.RPC_MGMT_AUTHORIZATION_FN]]),
    RpcMgmtSetCancelTimeout: Fn(T.RPC_STATUS, [[T.LONG]]),
    RpcMgmtWaitServerListen: Fn(T.RPC_STATUS, [[null]]),
    RpcMgmtInqStats: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(Pointer(T.RPC_STATS_VECTOR)), 'Statistics']]),
    RpcMgmtStopServerListening: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding']]),
    RpcMgmtIsServerListening: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding']]),
    RpcMgmtInqIfIds: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(Pointer(T.RPC_IF_ID_VECTOR)), 'IfIdVector']]),
    RpcMgmtEpEltInqBegin: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'EpBinding'], [T.ULONG, 'InquiryType'], [Pointer(T.RPC_IF_ID), 'IfId'], [T.ULONG, 'VersOption'], [Pointer(T.UUID), 'ObjectUuid'], [Pointer(T.RPC_EP_INQ_HANDLE), 'InquiryContext']]),
    RpcMgmtSetComTimeout: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [T.u32, 'Timeout']]),
    RpcMgmtSetServerStackSize: Fn(T.RPC_STATUS, [[T.ULONG, 'ThreadStackSize']]),
    RpcMgmtStatsVectorFree: Fn(T.RPC_STATUS, [[Pointer(Pointer(T.RPC_STATS_VECTOR)), 'StatsVector']]),
    RpcServerRegisterIf: Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.UUID), 'MgrTypeUuid'], [Pointer(null), 'MgrEpv']]),
    RpcServerRegisterIfEx: Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.UUID), 'MgrTypeUuid'], [Pointer(null), 'MgrEpv'], [T.u32, 'Flags'], [T.u32, 'MaxCalls'], [Pointer(T.RPC_IF_CALLBACK_FN), 'IfCallbackFn']]),
    RpcServerRegisterIf2: Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.UUID), 'MgrTypeUuid'], [Pointer(null), 'MgrEpv'], [T.u32, 'Flags'], [T.u32, 'MaxCalls'], [T.u32, 'MaxRpcSize'], [Pointer(T.RPC_IF_CALLBACK_FN), 'IfCallbackFn']]),
    RpcServerUnregisterIf: Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.UUID), 'MgrTypeUuid'], [T.u32, 'WaitForCallsToComplete']]),
    RpcServerUnregisterIfEx: Fn(T.RPC_STATUS, [[T.RPC_IF_HANDLE, 'IfSpec'], [Pointer(T.UUID), 'MgrTypeUuid'], [T.i32, 'RundownContextHandles']]),
    RpcServerUseProtseqA: Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'Protseq'], [T.u32, 'MaxCalls'], [Pointer(null), 'SecurityDescriptor']]),
    RpcServerUseProtseqW: Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'Protseq'], [T.u32, 'MaxCalls'], [Pointer(null), 'SecurityDescriptor']]),
    RpcServerUseProtseqEpA: Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'Protseq'], [T.u32, 'MaxCalls'], [T.RPC_CSTR, 'Endpoint'], [Pointer(null), 'SecurityDescriptor']]),
    RpcServerUseProtseqEpW: Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'Protseq'], [T.u32, 'MaxCalls'], [T.RPC_WSTR, 'Endpoint'], [Pointer(null), 'SecurityDescriptor']]),
    RpcServerUseProtseqEpExA: Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'Protseq'], [T.u32, 'MaxCalls'], [T.RPC_CSTR, 'Endpoint'], [Pointer(null), 'SecurityDescriptor'], [T.PRPC_POLICY, 'Policy']]),
    RpcServerUseProtseqEpExW: Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'Protseq'], [T.u32, 'MaxCalls'], [T.RPC_WSTR, 'Endpoint'], [Pointer(null), 'SecurityDescriptor'], [T.PRPC_POLICY, 'Policy']]),
    RpcServerRegisterAuthInfoA: Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'ServerPrincName'], [T.ULONG, 'AuthnSvc'], [T.RPC_AUTH_KEY_RETRIEVAL_FN, 'GetKeyFn'], [Pointer(null), 'Arg']]),
    RpcServerRegisterAuthInfoW: Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'ServerPrincName'], [T.ULONG, 'AuthnSvc'], [T.RPC_AUTH_KEY_RETRIEVAL_FN, 'GetKeyFn'], [Pointer(null), 'Arg']]),
    RpcBindingSetAuthInfoExA: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [T.RPC_CSTR, 'ServerPrincName'], [T.ULONG, 'AuthnLevel'], [T.ULONG, 'AuthnSvc'], [T.RPC_AUTH_IDENTITY_HANDLE, 'AuthIdentity'], [T.ULONG, 'AuthzSvr'], [Pointer(T.RPC_SECURITY_QOS), 'SecurityQos']]),
    RpcBindingSetAuthInfoExW: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [T.RPC_WSTR, 'ServerPrincName'], [T.ULONG, 'AuthnLevel'], [T.ULONG, 'AuthnSvc'], [T.RPC_AUTH_IDENTITY_HANDLE, 'AuthIdentity'], [T.ULONG, 'AuthzSvr'], [Pointer(T.RPC_SECURITY_QOS), 'SecurityQos']]),
    RpcBindingSetAuthInfoA: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [T.RPC_CSTR, 'ServerPrincName'], [T.ULONG, 'AuthnLevel'], [T.ULONG, 'AuthnSvc'], [T.RPC_AUTH_IDENTITY_HANDLE, 'AuthIdentity'], [T.ULONG, 'AuthzSvr']]),
    RpcBindingSetAuthInfoW: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [T.RPC_WSTR, 'ServerPrincName'], [T.ULONG, 'AuthnLevel'], [T.ULONG, 'AuthnSvc'], [T.RPC_AUTH_IDENTITY_HANDLE, 'AuthIdentity'], [T.ULONG, 'AuthzSvr']]),
    RpcBindingInqAuthInfoExA: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.RPC_CSTR), 'ServerPrincName'], [Pointer(T.ULONG), 'AuthnLevel'], [Pointer(T.ULONG), 'AuthnSvc'], [Pointer(T.RPC_AUTH_IDENTITY_HANDLE), 'AuthIdentity'], [Pointer(T.ULONG), 'AuthzSvc'], [T.ULONG, 'RpcQosVersion'], [Pointer(T.RPC_SECURITY_QOS), 'SecurityQOS']]),
    RpcBindingInqAuthInfoExW: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.RPC_WSTR), 'ServerPrincName'], [Pointer(T.ULONG), 'AuthnLevel'], [Pointer(T.ULONG), 'AuthnSvc'], [Pointer(T.RPC_AUTH_IDENTITY_HANDLE), 'AuthIdentity'], [Pointer(T.ULONG), 'AuthzSvc'], [T.ULONG, 'RpcQosVersion'], [Pointer(T.RPC_SECURITY_QOS), 'SecurityQOS']]),
    RpcBindingInqAuthInfoA: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.RPC_CSTR), 'ServerPrincName'], [Pointer(T.ULONG), 'AuthnLevel'], [Pointer(T.ULONG), 'AuthnSvc'], [Pointer(T.RPC_AUTH_IDENTITY_HANDLE), 'AuthIdentity'], [Pointer(T.ULONG), 'AuthzSvc']]),
    RpcBindingInqAuthInfoW: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.RPC_WSTR), 'ServerPrincName'], [Pointer(T.ULONG), 'AuthnLevel'], [Pointer(T.ULONG), 'AuthnSvc'], [Pointer(T.RPC_AUTH_IDENTITY_HANDLE), 'AuthIdentity'], [Pointer(T.ULONG), 'AuthzSvc']]),
    RpcBindingInqAuthClientA: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'ClientBinding'], [Pointer(T.RPC_AUTHZ_HANDLE), 'Privs'], [Pointer(T.RPC_CSTR), 'ServerPrincName'], [Pointer(T.ULONG), 'AuthnLevel'], [Pointer(T.ULONG), 'AuthnSvc'], [Pointer(T.ULONG), 'AuthzSvc']]),
    RpcBindingInqAuthClientW: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'ClientBinding'], [Pointer(T.RPC_AUTHZ_HANDLE), 'Privs'], [Pointer(T.RPC_WSTR), 'ServerPrincName'], [Pointer(T.ULONG), 'AuthnLevel'], [Pointer(T.ULONG), 'AuthnSvc'], [Pointer(T.ULONG), 'AuthzSvc']]),
    RpcBindingInqAuthClientExA: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'ClientBinding'], [Pointer(T.RPC_AUTHZ_HANDLE), 'Privs'], [Pointer(T.RPC_CSTR), 'ServerPrincName'], [Pointer(T.ULONG), 'AuthnLevel'], [Pointer(T.ULONG), 'AuthnSvc'], [Pointer(T.ULONG), 'AuthzSvc'], [T.ULONG, 'Flags']]),
    RpcBindingInqAuthClientExW: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'ClientBinding'], [Pointer(T.RPC_AUTHZ_HANDLE), 'Privs'], [Pointer(T.RPC_WSTR), 'ServerPrincName'], [Pointer(T.ULONG), 'AuthnLevel'], [Pointer(T.ULONG), 'AuthnSvc'], [Pointer(T.ULONG), 'AuthzSvc'], [T.ULONG, 'Flags']]),
    RpcCancelThread: Fn(T.RPC_STATUS, [[Pointer(null)]]),
    RpcCancelThreadEx: Fn(T.RPC_STATUS, [[Pointer(null)], [T.LONG]]),
    RpcImpersonateClient: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding']]),
    RpcNetworkIsProtseqValidA: Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'protseq']]),
    RpcNetworkIsProtseqValidW: Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'protseq']]),
    RpcRevertToSelf: Fn(T.RPC_STATUS, [[null]]),
    RpcRevertToSelfEx: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding']]),
    RpcStringFreeA: Fn(T.RPC_STATUS, [[Pointer(T.RPC_CSTR), 'String']]),
    RpcStringFreeW: Fn(T.RPC_STATUS, [[Pointer(T.RPC_WSTR), 'String']]),
    UuidToStringA: Fn(T.RPC_STATUS, [[Pointer(T.UUID), 'Uuid'], [Pointer(T.RPC_CSTR), 'StringUuid']]),
    UuidToStringW: Fn(T.RPC_STATUS, [[Pointer(T.UUID), 'Uuid'], [Pointer(T.RPC_WSTR), 'StringUuid']]),
    UuidFromStringA: Fn(T.RPC_STATUS, [[T.RPC_CSTR, 'StringUuid'], [Pointer(T.UUID), 'Uuid']]),
    UuidFromStringW: Fn(T.RPC_STATUS, [[T.RPC_WSTR, 'StringUuid'], [Pointer(T.UUID), 'Uuid']]),
    UuidCreate: Fn(T.RPC_STATUS, [[Pointer(T.UUID), 'Uuid']]),
    UuidCreateSequential: Fn(T.RPC_STATUS, [[Pointer(T.UUID), 'Uuid']]),
    UuidCreateNil: Fn(T.RPC_STATUS, [[Pointer(T.UUID), 'Uuid']]),
    UuidCompare: Fn(T.i32, [[Pointer(T.UUID), 'Uuid1'], [Pointer(T.UUID), 'Uuid2'], [Pointer(T.RPC_STATUS), 'Status_']]),
    UuidEqual: Fn(T.i32, [[Pointer(T.UUID), 'Uuid1'], [Pointer(T.UUID), 'Uuid2'], [Pointer(T.RPC_STATUS), 'Status_']]),
    UuidHash: Fn(T.u16, [[Pointer(T.UUID), 'Uuid'], [Pointer(T.RPC_STATUS), 'Status_']]),
    UuidIsNil: Fn(T.i32, [[Pointer(T.UUID), 'Uuid'], [Pointer(T.RPC_STATUS), 'Status_']]),
    I_RpcNegotiateTransferSyntax: Fn(T.RPC_STATUS, [[Pointer(T.RPC_MESSAGE), 'Message']]),
    I_RpcGetBuffer: Fn(T.RPC_STATUS, [[Pointer(T.RPC_MESSAGE), 'Message']]),
    I_RpcGetBufferWithObject: Fn(T.RPC_STATUS, [[Pointer(T.RPC_MESSAGE), 'Message'], [Pointer(T.UUID), 'ObjectUuid']]),
    I_RpcSendReceive: Fn(T.RPC_STATUS, [[Pointer(T.RPC_MESSAGE), 'Message']]),
    I_RpcFreeBuffer: Fn(T.RPC_STATUS, [[Pointer(T.RPC_MESSAGE), 'Message']]),
    I_RpcSend: Fn(T.RPC_STATUS, [[Pointer(T.RPC_MESSAGE), 'Message']]),
    I_RpcReceive: Fn(T.RPC_STATUS, [[Pointer(T.RPC_MESSAGE), 'Message']]),
    I_RpcAllocate: Fn(Pointer(null), [[T.u32, 'Size']]),
    I_RpcFree: Fn(null, [[Pointer(null), 'Object']]),
    I_RpcGetCurrentCallHandle: Fn(T.RPC_BINDING_HANDLE, [[null]]),
    I_RpcBindingInqTransportType: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE, 'Binding'], [Pointer(T.u32), 'Type']]),
    I_RpcMapWin32Status: Fn(T.LONG, [[T.RPC_STATUS]]),
    RpcAsyncInitializeHandle: Fn(T.RPC_STATUS, [[T.PRPC_ASYNC_STATE], [T.u32]]),
    RpcAsyncRegisterInfo: Fn(T.RPC_STATUS, [[T.PRPC_ASYNC_STATE]]),
    RpcAsyncGetCallStatus: Fn(T.RPC_STATUS, [[T.PRPC_ASYNC_STATE]]),
    RpcAsyncCompleteCall: Fn(T.RPC_STATUS, [[T.PRPC_ASYNC_STATE], [Pointer(null)]]),
    RpcAsyncAbortCall: Fn(T.RPC_STATUS, [[T.PRPC_ASYNC_STATE], [T.ULONG]]),
    RpcAsyncCancelCall: Fn(T.RPC_STATUS, [[T.PRPC_ASYNC_STATE], [T.BOOL]]),
    RpcAsyncCleanupThread: Fn(T.RPC_STATUS, [[T.DWORD]]),
    RpcErrorStartEnumeration: Fn(T.RPC_STATUS, [[Pointer(T.RPC_ERROR_ENUM_HANDLE)]]),
    RpcErrorGetNextRecord: Fn(T.RPC_STATUS, [[Pointer(T.RPC_ERROR_ENUM_HANDLE)], [T.BOOL], [Pointer(T.RPC_EXTENDED_ERROR_INFO)]]),
    RpcErrorEndEnumeration: Fn(T.RPC_STATUS, [[Pointer(T.RPC_ERROR_ENUM_HANDLE)]]),
    RpcErrorResetEnumeration: Fn(T.RPC_STATUS, [[Pointer(T.RPC_ERROR_ENUM_HANDLE)]]),
    RpcErrorGetNumberOfRecords: Fn(T.RPC_STATUS, [[Pointer(T.RPC_ERROR_ENUM_HANDLE)], [Pointer(T.i32)]]),
    RpcErrorSaveErrorInfo: Fn(T.RPC_STATUS, [[Pointer(T.RPC_ERROR_ENUM_HANDLE)], [Pointer(T.PVOID)], [Pointer(T.SIZE_T)]]),
    RpcErrorLoadErrorInfo: Fn(T.RPC_STATUS, [[T.PVOID], [T.SIZE_T], [Pointer(T.RPC_ERROR_ENUM_HANDLE)]]),
    RpcErrorAddRecord: Fn(T.RPC_STATUS, [[Pointer(T.RPC_EXTENDED_ERROR_INFO)]]),
    RpcErrorClearInformation: Fn(T.RPC_STATUS, [[null]]),
    RpcGetAuthorizationContextForClient: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE], [T.BOOL], [T.LPVOID], [T.PLARGE_INTEGER], [T.LUID], [T.DWORD], [T.PVOID], [Pointer(T.PVOID)]]),
    RpcFreeAuthorizationContext: Fn(T.RPC_STATUS, [[Pointer(T.PVOID)]]),
    RpcSsContextLockExclusive: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE], [T.PVOID]]),
    RpcSsContextLockShared: Fn(T.RPC_STATUS, [[T.RPC_BINDING_HANDLE], [T.PVOID]]),
    I_RpcAsyncSetHandle: Fn(T.RPC_STATUS, [[T.PRPC_MESSAGE], [T.PRPC_ASYNC_STATE]]),
    I_RpcAsyncAbortCall: Fn(T.RPC_STATUS, [[T.PRPC_ASYNC_STATE], [T.ULONG]]),
    I_RpcExceptionFilter: Fn(T.i32, [[T.ULONG]]),
    DragAcceptFiles: Fn(null, [[T.HWND, 'hWnd'], [T.BOOL, 'b']]),
    DragQueryFileA: Fn(T.UINT, [[T.HDROP, 'hDrop'], [T.UINT, 'lFile'], [T.LPSTR, 'lpszFile'], [T.UINT, 'lLength']]),
    DragQueryFileW: Fn(T.UINT, [[T.HDROP, 'hDrop'], [T.UINT, 'lFile'], [T.LPWSTR, 'lpszFile'], [T.UINT, 'lLength']]),
    DragFinish: Fn(null, [[T.HDROP, 'h']]),
    DragQueryPoint: Fn(T.BOOL, [[T.HDROP, 'hDrop'], [Pointer(T.POINT), 'p']]),
    SHAppBarMessage: Fn(T.UINT_PTR, [[T.DWORD], [T.PAPPBARDATA]]),
    SHGetFileInfoA: Fn(T.DWORD_PTR, [[T.LPCSTR], [T.DWORD], [Pointer(T.SHFILEINFOA)], [T.UINT], [T.UINT]]),
    SHGetFileInfoW: Fn(T.DWORD_PTR, [[T.LPCWSTR], [T.DWORD], [Pointer(T.SHFILEINFOW)], [T.UINT], [T.UINT]]),
    SHGetImageList: Fn(T.HRESULT, [[T.INT], [Pointer(T.IID)], [Pointer(Pointer(null))]]),
    SHFileOperationA: Fn(T.i32, [[T.LPSHFILEOPSTRUCTA, 'lpFileOp']]),
    SHFileOperationW: Fn(T.i32, [[T.LPSHFILEOPSTRUCTW, 'lpFileOp']]),
    SHFreeNameMappings: Fn(null, [[T.HANDLE, 'hNameMappings']]),
    ShellExecuteA: Fn(T.HINSTANCE, [[T.HWND], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.INT]]),
    ShellExecuteW: Fn(T.HINSTANCE, [[T.HWND], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.INT]]),
    ShellExecuteExA: Fn(T.BOOL, [[T.LPSHELLEXECUTEINFOA, 'lpExecInfo']]),
    ShellExecuteExW: Fn(T.BOOL, [[T.LPSHELLEXECUTEINFOW, 'lpExecInfo']]),
    WinExecErrorA: Fn(null, [[T.HWND, 'hwnd'], [T.INT, 'error'], [T.LPCSTR, 'lpstrFileName'], [T.LPCSTR, 'lpstrTitle']]),
    WinExecErrorW: Fn(null, [[T.HWND, 'hwnd'], [T.INT, 'error'], [T.LPCWSTR, 'lpstrFileName'], [T.LPCWSTR, 'lpstrTitle']]),
    Shell_NotifyIconA: Fn(T.BOOL, [[T.DWORD, 'dwMessage'], [T.PNOTIFYICONDATAA, 'lpData']]),
    Shell_NotifyIconW: Fn(T.BOOL, [[T.DWORD, 'dwMessage'], [T.PNOTIFYICONDATAW, 'lpData']]),
    SHGetNewLinkInfoA: Fn(T.BOOL, [[T.LPCSTR], [T.LPCSTR], [T.LPSTR], [Pointer(T.BOOL)], [T.UINT]]),
    SHGetNewLinkInfoW: Fn(T.BOOL, [[T.LPCWSTR], [T.LPCWSTR], [T.LPWSTR], [Pointer(T.BOOL)], [T.UINT]]),
    SHEmptyRecycleBinA: Fn(T.HRESULT, [[T.HWND], [T.LPCSTR], [T.DWORD]]),
    SHEmptyRecycleBinW: Fn(T.HRESULT, [[T.HWND], [T.LPCWSTR], [T.DWORD]]),
    SHQueryRecycleBinA: Fn(T.HRESULT, [[T.LPCSTR], [T.LPSHQUERYRBINFO]]),
    SHQueryRecycleBinW: Fn(T.HRESULT, [[T.LPCWSTR], [T.LPSHQUERYRBINFO]]),
    CommandLineToArgvW: Fn(Pointer(T.LPWSTR), [[T.LPCWSTR], [Pointer(T.i32)]]),
    ExtractIconA: Fn(T.HICON, [[T.HINSTANCE], [T.LPCSTR], [T.UINT]]),
    ExtractIconW: Fn(T.HICON, [[T.HINSTANCE], [T.LPCWSTR], [T.UINT]]),
    ExtractAssociatedIconA: Fn(T.HICON, [[T.HINSTANCE], [T.LPSTR], [T.LPWORD]]),
    ExtractAssociatedIconW: Fn(T.HICON, [[T.HINSTANCE], [T.LPWSTR], [T.LPWORD]]),
    ExtractAssociatedIconExA: Fn(T.HICON, [[T.HINSTANCE], [T.LPSTR], [T.LPWORD], [T.LPWORD]]),
    ExtractAssociatedIconExW: Fn(T.HICON, [[T.HINSTANCE], [T.LPWSTR], [T.LPWORD], [T.LPWORD]]),
    ExtractIconExA: Fn(T.UINT, [[T.LPCSTR], [T.INT], [Pointer(T.HICON)], [Pointer(T.HICON)], [T.UINT]]),
    ExtractIconExW: Fn(T.UINT, [[T.LPCWSTR], [T.INT], [Pointer(T.HICON)], [Pointer(T.HICON)], [T.UINT]]),
    FindExecutableA: Fn(T.HINSTANCE, [[T.LPCSTR], [T.LPCSTR], [T.LPSTR]]),
    FindExecutableW: Fn(T.HINSTANCE, [[T.LPCWSTR], [T.LPCWSTR], [T.LPWSTR]]),
    ShellAboutA: Fn(T.BOOL, [[T.HWND], [T.LPCSTR], [T.LPCSTR], [T.HICON]]),
    ShellAboutW: Fn(T.BOOL, [[T.HWND], [T.LPCWSTR], [T.LPCWSTR], [T.HICON]]),
    ShellMessageBoxA: Fn(T.i32, [[T.HINSTANCE], [T.HWND], [T.LPCSTR], [T.LPCSTR], [T.UINT], '...']),
    ShellMessageBoxW: Fn(T.i32, [[T.HINSTANCE], [T.HWND], [T.LPCWSTR], [T.LPCWSTR], [T.UINT], '...']),
    DoEnvironmentSubstA: Fn(T.DWORD, [[T.LPSTR], [T.UINT]]),
    DoEnvironmentSubstW: Fn(T.DWORD, [[T.LPWSTR], [T.UINT]]),
    _daylight: T.i32,
    _dstbias: T.i32,
    _timezone: T.i32,
    _tzname: ArrayType(Pointer(T.char), 2),
    _get_daylight: Fn(T.errno_t, [[Pointer(T.i32), '_Daylight']]),
    _get_dstbias: Fn(T.errno_t, [[Pointer(T.i32), '_Daylight_savings_bias']]),
    _get_timezone: Fn(T.errno_t, [[Pointer(T.i32), '_Timezone']]),
    _get_tzname: Fn(T.errno_t, [[Pointer(T.size_t), '_ReturnValue'], [Pointer(T.char), '_Buffer'], [T.size_t, '_SizeInBytes'], [T.i32, '_Index']]),
    asctime: Fn(Pointer(T.char), [[Pointer(Struct('tm', null)), '_Tm']]),
    _ctime32: Fn(Pointer(T.char), [[Pointer(T.__time32_t), '_Time']]),
    clock: Fn(T.clock_t, [[null]]),
    _difftime32: Fn(T.f64, [[T.__time32_t, '_Time1'], [T.__time32_t, '_Time2']]),
    _gmtime32: Fn(Pointer(Struct('tm', null)), [[Pointer(T.__time32_t), '_Time']]),
    _localtime32: Fn(Pointer(Struct('tm', null)), [[Pointer(T.__time32_t), '_Time']]),
    strftime: Fn(T.size_t, [[Pointer(T.char), '_Buf'], [T.size_t, '_SizeInBytes'], [Pointer(T.char), '_Format'], [Pointer(Struct('tm', null)), '_Tm']]),
    _strftime_l: Fn(T.size_t, [[Pointer(T.char), '_Buf'], [T.size_t, '_Max_size'], [Pointer(T.char), '_Format'], [Pointer(Struct('tm', null)), '_Tm'], [T._locale_t, '_Locale']]),
    _strdate: Fn(Pointer(T.char), [[Pointer(T.char), '_Buffer']]),
    _strtime: Fn(Pointer(T.char), [[Pointer(T.char), '_Buffer']]),
    _time32: Fn(T.__time32_t, [[Pointer(T.__time32_t), '_Time']]),
    _mktime32: Fn(T.__time32_t, [[Pointer(Struct('tm', null)), '_Tm']]),
    _mkgmtime32: Fn(T.__time32_t, [[Pointer(Struct('tm', null)), '_Tm']]),
    tzset: Fn(null, [[null]]),
    _tzset: Fn(null, [[null]]),
    _difftime64: Fn(T.f64, [[T.__time64_t, '_Time1'], [T.__time64_t, '_Time2']]),
    _ctime64: Fn(Pointer(T.char), [[Pointer(T.__time64_t), '_Time']]),
    _gmtime64: Fn(Pointer(Struct('tm', null)), [[Pointer(T.__time64_t), '_Time']]),
    _localtime64: Fn(Pointer(Struct('tm', null)), [[Pointer(T.__time64_t), '_Time']]),
    _mktime64: Fn(T.__time64_t, [[Pointer(Struct('tm', null)), '_Tm']]),
    _mkgmtime64: Fn(T.__time64_t, [[Pointer(Struct('tm', null)), '_Tm']]),
    _time64: Fn(T.__time64_t, [[Pointer(T.__time64_t), '_Time']]),
    _getsystime: Fn(T.u32, [[Pointer(Struct('tm', null)), '_Tm']]),
    _setsystime: Fn(T.u32, [[Pointer(Struct('tm', null)), '_Tm'], [T.u32, '_MilliSec']]),
    _wasctime: Fn(Pointer(T.wchar_t), [[Pointer(Struct('tm', null)), '_Tm']]),
    _wctime32: Fn(Pointer(T.wchar_t), [[Pointer(T.__time32_t), '_Time']]),
    wcsftime: Fn(T.size_t, [[Pointer(T.wchar_t), '_Buf'], [T.size_t, '_SizeInWords'], [Pointer(T.wchar_t), '_Format'], [Pointer(Struct('tm', null)), '_Tm']]),
    _wcsftime_l: Fn(T.size_t, [[Pointer(T.wchar_t), '_Buf'], [T.size_t, '_SizeInWords'], [Pointer(T.wchar_t), '_Format'], [Pointer(Struct('tm', null)), '_Tm'], [T._locale_t, '_Locale']]),
    _wstrdate: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Buffer']]),
    _wstrtime: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Buffer']]),
    _wctime64: Fn(Pointer(T.wchar_t), [[Pointer(T.__time64_t), '_Time']]),
    _wctime: Fn(Pointer(T.wchar_t), [[Pointer(T.time_t)]]),
    difftime: Fn(T.f64, [[T.time_t, '_Time1'], [T.time_t, '_Time2']]),
    ctime: Fn(Pointer(T.char), [[Pointer(T.time_t), '_Time']]),
    gmtime: Fn(Pointer(Struct('tm', null)), [[Pointer(T.time_t), '_Time']]),
    localtime: Fn(Pointer(Struct('tm', null)), [[Pointer(T.time_t), '_Time']]),
    mktime: Fn(T.time_t, [[Pointer(Struct('tm', null)), '_Tm']]),
    _mkgmtime: Fn(T.time_t, [[Pointer(Struct('tm', null)), '_Tm']]),
    time: Fn(T.time_t, [[Pointer(T.time_t), '_Time']]),
    daylight: T.i32,
    timezone: T.i32,
    tzname: ArrayType(Pointer(T.char), 2),
    mingw_gettimeofday: Fn(T.i32, [[Pointer(Struct('unix_timeval', null)), 'p'], [Pointer(Struct('timezone', null)), 'z']]),
    _ftime64: Fn(null, [[Pointer(Struct('__timeb64', null)), '_Time']]),
    _ftime: Fn(null, [[Pointer(Struct('__timeb32', null))]]),
    ftime: Fn(null, [[Pointer(Struct('timeb', null))]]),
    _set_purecall_handler: Fn(T._purecall_handler, [[T._purecall_handler, '_Handler']]),
    _get_purecall_handler: Fn(T._purecall_handler, [[null]]),
    _set_invalid_parameter_handler: Fn(T._invalid_parameter_handler, [[T._invalid_parameter_handler, '_Handler']]),
    _get_invalid_parameter_handler: Fn(T._invalid_parameter_handler, [[null]]),
    __doserrno: Fn(Pointer(T.u32), [[null]]),
    _set_doserrno: Fn(T.errno_t, [[T.u32, '_Value']]),
    _get_doserrno: Fn(T.errno_t, [[Pointer(T.u32), '_Value']]),
    _sys_errlist: ArrayType(Pointer(T.char), 1),
    _sys_nerr: T.i32,
    __p___argc: Fn(Pointer(T.i32), [[null]]),
    __p___argv: Fn(Pointer(Pointer(Pointer(T.char))), [[null]]),
    __p___wargv: Fn(Pointer(Pointer(Pointer(T.wchar_t))), [[null]]),
    __p__environ: Fn(Pointer(Pointer(Pointer(T.char))), [[null]]),
    __p__wenviron: Fn(Pointer(Pointer(Pointer(T.wchar_t))), [[null]]),
    __p__pgmptr: Fn(Pointer(Pointer(T.char)), [[null]]),
    __p__wpgmptr: Fn(Pointer(Pointer(T.wchar_t)), [[null]]),
    _imp____argc: Pointer(T.i32),
    _imp____argv: Pointer(Pointer(Pointer(T.char))),
    _imp____wargv: Pointer(Pointer(Pointer(T.wchar_t))),
    _imp___environ: Pointer(Pointer(Pointer(T.char))),
    _imp___wenviron: Pointer(Pointer(Pointer(T.wchar_t))),
    _imp___pgmptr: Pointer(Pointer(T.char)),
    _imp___wpgmptr: Pointer(Pointer(T.wchar_t)),
    _get_pgmptr: Fn(T.errno_t, [[Pointer(Pointer(T.char)), '_Value']]),
    _get_wpgmptr: Fn(T.errno_t, [[Pointer(Pointer(T.wchar_t)), '_Value']]),
    _imp___fmode: Pointer(T.i32),
    _set_fmode: Fn(T.errno_t, [[T.i32, '_Mode']]),
    _get_fmode: Fn(T.errno_t, [[Pointer(T.i32), '_PMode']]),
    _imp___osplatform: Pointer(T.u32),
    _imp___osver: Pointer(T.u32),
    _imp___winver: Pointer(T.u32),
    _imp___winmajor: Pointer(T.u32),
    _imp___winminor: Pointer(T.u32),
    _get_osplatform: Fn(T.errno_t, [[Pointer(T.u32), '_Value']]),
    _get_osver: Fn(T.errno_t, [[Pointer(T.u32), '_Value']]),
    _get_winver: Fn(T.errno_t, [[Pointer(T.u32), '_Value']]),
    _get_winmajor: Fn(T.errno_t, [[Pointer(T.u32), '_Value']]),
    _get_winminor: Fn(T.errno_t, [[Pointer(T.u32), '_Value']]),
    exit: Fn(null, [[T.i32, '_Code']]),
    _exit: Fn(null, [[T.i32, '_Code']]),
    _Exit: Fn(null, [[T.i32]]),
    abort: Fn(null, [[null]]),
    _set_abort_behavior: Fn(T.u32, [[T.u32, '_Flags'], [T.u32, '_Mask']]),
    abs: Fn(T.i32, [[T.i32, '_X']]),
    labs: Fn(T.i32, [[T.i32, '_X']]),
    _abs64: Fn(T.i64, [[T.i64]]),
    atexit: Fn(T.i32, [[Pointer(Fn(null, [[null]]))]]),
    atof: Fn(T.f64, [[Pointer(T.char), '_String']]),
    _atof_l: Fn(T.f64, [[Pointer(T.char), '_String'], [T._locale_t, '_Locale']]),
    atoi: Fn(T.i32, [[Pointer(T.char), '_Str']]),
    _atoi_l: Fn(T.i32, [[Pointer(T.char), '_Str'], [T._locale_t, '_Locale']]),
    atol: Fn(T.i32, [[Pointer(T.char), '_Str']]),
    _atol_l: Fn(T.i32, [[Pointer(T.char), '_Str'], [T._locale_t, '_Locale']]),
    bsearch: Fn(Pointer(null), [[Pointer(null), '_Key'], [Pointer(null), '_Base'], [T.size_t, '_NumOfElements'], [T.size_t, '_SizeOfElements'], [Pointer(Fn(T.i32, [[Pointer(null)], [Pointer(null)]])), '_PtFuncCompare']]),
    qsort: Fn(null, [[Pointer(null), '_Base'], [T.size_t, '_NumOfElements'], [T.size_t, '_SizeOfElements'], [Pointer(Fn(T.i32, [[Pointer(null)], [Pointer(null)]])), '_PtFuncCompare']]),
    _byteswap_ushort: Fn(T.u16, [[T.u16, '_Short']]),
    _byteswap_uint64: Fn(T.u64, [[T.u64, '_Int64']]),
    div: Fn(T.div_t, [[T.i32, '_Numerator'], [T.i32, '_Denominator']]),
    getenv: Fn(Pointer(T.char), [[Pointer(T.char), '_VarName']]),
    _itoa: Fn(Pointer(T.char), [[T.i32, '_Value'], [Pointer(T.char), '_Dest'], [T.i32, '_Radix']]),
    _i64toa: Fn(Pointer(T.char), [[T.i64, '_Val'], [Pointer(T.char), '_DstBuf'], [T.i32, '_Radix']]),
    _ui64toa: Fn(Pointer(T.char), [[T.u64, '_Val'], [Pointer(T.char), '_DstBuf'], [T.i32, '_Radix']]),
    _atoi64: Fn(T.i64, [[Pointer(T.char), '_String']]),
    _atoi64_l: Fn(T.i64, [[Pointer(T.char), '_String'], [T._locale_t, '_Locale']]),
    _strtoi64: Fn(T.i64, [[Pointer(T.char), '_String'], [Pointer(Pointer(T.char)), '_EndPtr'], [T.i32, '_Radix']]),
    _strtoi64_l: Fn(T.i64, [[Pointer(T.char), '_String'], [Pointer(Pointer(T.char)), '_EndPtr'], [T.i32, '_Radix'], [T._locale_t, '_Locale']]),
    _strtoui64: Fn(T.u64, [[Pointer(T.char), '_String'], [Pointer(Pointer(T.char)), '_EndPtr'], [T.i32, '_Radix']]),
    _strtoui64_l: Fn(T.u64, [[Pointer(T.char), '_String'], [Pointer(Pointer(T.char)), '_EndPtr'], [T.i32, '_Radix'], [T._locale_t, '_Locale']]),
    ldiv: Fn(T.ldiv_t, [[T.i32, '_Numerator'], [T.i32, '_Denominator']]),
    _ltoa: Fn(Pointer(T.char), [[T.i32, '_Value'], [Pointer(T.char), '_Dest'], [T.i32, '_Radix']]),
    mblen: Fn(T.i32, [[Pointer(T.char), '_Ch'], [T.size_t, '_MaxCount']]),
    _mblen_l: Fn(T.i32, [[Pointer(T.char), '_Ch'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']]),
    _mbstrlen: Fn(T.size_t, [[Pointer(T.char), '_Str']]),
    _mbstrlen_l: Fn(T.size_t, [[Pointer(T.char), '_Str'], [T._locale_t, '_Locale']]),
    _mbstrnlen: Fn(T.size_t, [[Pointer(T.char), '_Str'], [T.size_t, '_MaxCount']]),
    _mbstrnlen_l: Fn(T.size_t, [[Pointer(T.char), '_Str'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']]),
    mbtowc: Fn(T.i32, [[Pointer(T.wchar_t), '_DstCh'], [Pointer(T.char), '_SrcCh'], [T.size_t, '_SrcSizeInBytes']]),
    _mbtowc_l: Fn(T.i32, [[Pointer(T.wchar_t), '_DstCh'], [Pointer(T.char), '_SrcCh'], [T.size_t, '_SrcSizeInBytes'], [T._locale_t, '_Locale']]),
    mbstowcs: Fn(T.size_t, [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.char), '_Source'], [T.size_t, '_MaxCount']]),
    _mbstowcs_l: Fn(T.size_t, [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.char), '_Source'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']]),
    rand: Fn(T.i32, [[null]]),
    _set_error_mode: Fn(T.i32, [[T.i32, '_Mode']]),
    srand: Fn(null, [[T.u32, '_Seed']]),
    strtod: Fn(T.f64, [[Pointer(T.char), '_Str'], [Pointer(Pointer(T.char)), '_EndPtr']]),
    strtof: Fn(T.f32, [[Pointer(T.char), 'nptr'], [Pointer(Pointer(T.char)), 'endptr']]),
    strtold: Fn(T.f128, [[Pointer(T.char)], [Pointer(Pointer(T.char))]]),
    __strtod: Fn(T.f64, [[Pointer(T.char)], [Pointer(Pointer(T.char))]]),
    __mingw_strtof: Fn(T.f32, [[Pointer(T.char)], [Pointer(Pointer(T.char))]]),
    __mingw_strtold: Fn(T.f128, [[Pointer(T.char)], [Pointer(Pointer(T.char))]]),
    _strtod_l: Fn(T.f64, [[Pointer(T.char), '_Str'], [Pointer(Pointer(T.char)), '_EndPtr'], [T._locale_t, '_Locale']]),
    strtol: Fn(T.i32, [[Pointer(T.char), '_Str'], [Pointer(Pointer(T.char)), '_EndPtr'], [T.i32, '_Radix']]),
    _strtol_l: Fn(T.i32, [[Pointer(T.char), '_Str'], [Pointer(Pointer(T.char)), '_EndPtr'], [T.i32, '_Radix'], [T._locale_t, '_Locale']]),
    strtoul: Fn(T.u32, [[Pointer(T.char), '_Str'], [Pointer(Pointer(T.char)), '_EndPtr'], [T.i32, '_Radix']]),
    _strtoul_l: Fn(T.u32, [[Pointer(T.char), '_Str'], [Pointer(Pointer(T.char)), '_EndPtr'], [T.i32, '_Radix'], [T._locale_t, '_Locale']]),
    system: Fn(T.i32, [[Pointer(T.char), '_Command']]),
    _ultoa: Fn(Pointer(T.char), [[T.u32, '_Value'], [Pointer(T.char), '_Dest'], [T.i32, '_Radix']]),
    wctomb: Fn(T.i32, [[Pointer(T.char), '_MbCh'], [T.wchar_t, '_WCh']]),
    _wctomb_l: Fn(T.i32, [[Pointer(T.char), '_MbCh'], [T.wchar_t, '_WCh'], [T._locale_t, '_Locale']]),
    wcstombs: Fn(T.size_t, [[Pointer(T.char), '_Dest'], [Pointer(T.wchar_t), '_Source'], [T.size_t, '_MaxCount']]),
    _wcstombs_l: Fn(T.size_t, [[Pointer(T.char), '_Dest'], [Pointer(T.wchar_t), '_Source'], [T.size_t, '_MaxCount'], [T._locale_t, '_Locale']]),
    calloc: Fn(Pointer(null), [[T.size_t, '_NumOfElements'], [T.size_t, '_SizeOfElements']]),
    free: Fn(null, [[Pointer(null), '_Memory']]),
    malloc: Fn(Pointer(null), [[T.size_t, '_Size']]),
    realloc: Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_NewSize']]),
    _recalloc: Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_Count'], [T.size_t, '_Size']]),
    _aligned_free: Fn(null, [[Pointer(null), '_Memory']]),
    _aligned_malloc: Fn(Pointer(null), [[T.size_t, '_Size'], [T.size_t, '_Alignment']]),
    _aligned_offset_malloc: Fn(Pointer(null), [[T.size_t, '_Size'], [T.size_t, '_Alignment'], [T.size_t, '_Offset']]),
    _aligned_realloc: Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_Size'], [T.size_t, '_Alignment']]),
    _aligned_recalloc: Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_Count'], [T.size_t, '_Size'], [T.size_t, '_Alignment']]),
    _aligned_offset_realloc: Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_Size'], [T.size_t, '_Alignment'], [T.size_t, '_Offset']]),
    _aligned_offset_recalloc: Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_Count'], [T.size_t, '_Size'], [T.size_t, '_Alignment'], [T.size_t, '_Offset']]),
    _itow: Fn(Pointer(T.wchar_t), [[T.i32, '_Value'], [Pointer(T.wchar_t), '_Dest'], [T.i32, '_Radix']]),
    _ltow: Fn(Pointer(T.wchar_t), [[T.i32, '_Value'], [Pointer(T.wchar_t), '_Dest'], [T.i32, '_Radix']]),
    _ultow: Fn(Pointer(T.wchar_t), [[T.u32, '_Value'], [Pointer(T.wchar_t), '_Dest'], [T.i32, '_Radix']]),
    wcstod: Fn(T.f64, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr']]),
    wcstof: Fn(T.f32, [[Pointer(T.wchar_t)], [Pointer(Pointer(T.wchar_t))]]),
    __mingw_wcstod: Fn(T.f64, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr']]),
    __mingw_wcstof: Fn(T.f32, [[Pointer(T.wchar_t), 'nptr'], [Pointer(Pointer(T.wchar_t)), 'endptr']]),
    __mingw_wcstold: Fn(T.f128, [[Pointer(T.wchar_t)], [Pointer(Pointer(T.wchar_t))]]),
    wcstold: Fn(T.f128, [[Pointer(T.wchar_t)], [Pointer(Pointer(T.wchar_t))]]),
    _wcstod_l: Fn(T.f64, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T._locale_t, '_Locale']]),
    wcstol: Fn(T.i32, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T.i32, '_Radix']]),
    _wcstol_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T.i32, '_Radix'], [T._locale_t, '_Locale']]),
    wcstoul: Fn(T.u32, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T.i32, '_Radix']]),
    _wcstoul_l: Fn(T.u32, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T.i32, '_Radix'], [T._locale_t, '_Locale']]),
    _wgetenv: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_VarName']]),
    _wsystem: Fn(T.i32, [[Pointer(T.wchar_t), '_Command']]),
    _wtof: Fn(T.f64, [[Pointer(T.wchar_t), '_Str']]),
    _wtof_l: Fn(T.f64, [[Pointer(T.wchar_t), '_Str'], [T._locale_t, '_Locale']]),
    _wtoi: Fn(T.i32, [[Pointer(T.wchar_t), '_Str']]),
    _wtoi_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Str'], [T._locale_t, '_Locale']]),
    _wtol: Fn(T.i32, [[Pointer(T.wchar_t), '_Str']]),
    _wtol_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Str'], [T._locale_t, '_Locale']]),
    _i64tow: Fn(Pointer(T.wchar_t), [[T.i64, '_Val'], [Pointer(T.wchar_t), '_DstBuf'], [T.i32, '_Radix']]),
    _ui64tow: Fn(Pointer(T.wchar_t), [[T.u64, '_Val'], [Pointer(T.wchar_t), '_DstBuf'], [T.i32, '_Radix']]),
    _wtoi64: Fn(T.i64, [[Pointer(T.wchar_t), '_Str']]),
    _wtoi64_l: Fn(T.i64, [[Pointer(T.wchar_t), '_Str'], [T._locale_t, '_Locale']]),
    _wcstoi64: Fn(T.i64, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T.i32, '_Radix']]),
    _wcstoi64_l: Fn(T.i64, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T.i32, '_Radix'], [T._locale_t, '_Locale']]),
    _wcstoui64: Fn(T.u64, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T.i32, '_Radix']]),
    _wcstoui64_l: Fn(T.u64, [[Pointer(T.wchar_t), '_Str'], [Pointer(Pointer(T.wchar_t)), '_EndPtr'], [T.i32, '_Radix'], [T._locale_t, '_Locale']]),
    _fullpath: Fn(Pointer(T.char), [[Pointer(T.char), '_FullPath'], [Pointer(T.char), '_Path'], [T.size_t, '_SizeInBytes']]),
    _ecvt: Fn(Pointer(T.char), [[T.f64, '_Val'], [T.i32, '_NumOfDigits'], [Pointer(T.i32), '_PtDec'], [Pointer(T.i32), '_PtSign']]),
    _fcvt: Fn(Pointer(T.char), [[T.f64, '_Val'], [T.i32, '_NumOfDec'], [Pointer(T.i32), '_PtDec'], [Pointer(T.i32), '_PtSign']]),
    _gcvt: Fn(Pointer(T.char), [[T.f64, '_Val'], [T.i32, '_NumOfDigits'], [Pointer(T.char), '_DstBuf']]),
    _atodbl: Fn(T.i32, [[Pointer(T._CRT_DOUBLE), '_Result'], [Pointer(T.char), '_Str']]),
    _atoldbl: Fn(T.i32, [[Pointer(T._LDOUBLE), '_Result'], [Pointer(T.char), '_Str']]),
    _atoflt: Fn(T.i32, [[Pointer(T._CRT_FLOAT), '_Result'], [Pointer(T.char), '_Str']]),
    _atodbl_l: Fn(T.i32, [[Pointer(T._CRT_DOUBLE), '_Result'], [Pointer(T.char), '_Str'], [T._locale_t, '_Locale']]),
    _atoldbl_l: Fn(T.i32, [[Pointer(T._LDOUBLE), '_Result'], [Pointer(T.char), '_Str'], [T._locale_t, '_Locale']]),
    _atoflt_l: Fn(T.i32, [[Pointer(T._CRT_FLOAT), '_Result'], [Pointer(T.char), '_Str'], [T._locale_t, '_Locale']]),
    _lrotl: Fn(T.u32, [[T.u32, '_Val'], [T.i32, '_Shift']]),
    _lrotr: Fn(T.u32, [[T.u32, '_Val'], [T.i32, '_Shift']]),
    _makepath: Fn(null, [[Pointer(T.char), '_Path'], [Pointer(T.char), '_Drive'], [Pointer(T.char), '_Dir'], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_Ext']]),
    _onexit: Fn(T._onexit_t, [[T._onexit_t, '_Func']]),
    perror: Fn(null, [[Pointer(T.char), '_ErrMsg']]),
    _putenv: Fn(T.i32, [[Pointer(T.char), '_EnvString']]),
    _rotl64: Fn(T.u64, [[T.u64, '_Val'], [T.i32, '_Shift']]),
    _rotr64: Fn(T.u64, [[T.u64, '_Val'], [T.i32, '_Shift']]),
    _rotr: Fn(T.u32, [[T.u32, '_Val'], [T.i32, '_Shift']]),
    _rotl: Fn(T.u32, [[T.u32, '_Val'], [T.i32, '_Shift']]),
    _searchenv: Fn(null, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_EnvVar'], [Pointer(T.char), '_ResultPath']]),
    _splitpath: Fn(null, [[Pointer(T.char), '_FullPath'], [Pointer(T.char), '_Drive'], [Pointer(T.char), '_Dir'], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_Ext']]),
    _swab: Fn(null, [[Pointer(T.char), '_Buf1'], [Pointer(T.char), '_Buf2'], [T.i32, '_SizeInBytes']]),
    _wfullpath: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_FullPath'], [Pointer(T.wchar_t), '_Path'], [T.size_t, '_SizeInWords']]),
    _wmakepath: Fn(null, [[Pointer(T.wchar_t), '_ResultPath'], [Pointer(T.wchar_t), '_Drive'], [Pointer(T.wchar_t), '_Dir'], [Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_Ext']]),
    _wperror: Fn(null, [[Pointer(T.wchar_t), '_ErrMsg']]),
    _wputenv: Fn(T.i32, [[Pointer(T.wchar_t), '_EnvString']]),
    _wsearchenv: Fn(null, [[Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_EnvVar'], [Pointer(T.wchar_t), '_ResultPath']]),
    _wsplitpath: Fn(null, [[Pointer(T.wchar_t), '_FullPath'], [Pointer(T.wchar_t), '_Drive'], [Pointer(T.wchar_t), '_Dir'], [Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_Ext']]),
    _beep: Fn(null, [[T.u32, '_Frequency'], [T.u32, '_Duration']]),
    _seterrormode: Fn(null, [[T.i32, '_Mode']]),
    _sleep: Fn(null, [[T.u32, '_Duration']]),
    ecvt: Fn(Pointer(T.char), [[T.f64, '_Val'], [T.i32, '_NumOfDigits'], [Pointer(T.i32), '_PtDec'], [Pointer(T.i32), '_PtSign']]),
    fcvt: Fn(Pointer(T.char), [[T.f64, '_Val'], [T.i32, '_NumOfDec'], [Pointer(T.i32), '_PtDec'], [Pointer(T.i32), '_PtSign']]),
    gcvt: Fn(Pointer(T.char), [[T.f64, '_Val'], [T.i32, '_NumOfDigits'], [Pointer(T.char), '_DstBuf']]),
    itoa: Fn(Pointer(T.char), [[T.i32, '_Val'], [Pointer(T.char), '_DstBuf'], [T.i32, '_Radix']]),
    ltoa: Fn(Pointer(T.char), [[T.i32, '_Val'], [Pointer(T.char), '_DstBuf'], [T.i32, '_Radix']]),
    putenv: Fn(T.i32, [[Pointer(T.char), '_EnvString']]),
    swab: Fn(null, [[Pointer(T.char), '_Buf1'], [Pointer(T.char), '_Buf2'], [T.i32, '_SizeInBytes']]),
    ultoa: Fn(Pointer(T.char), [[T.u32, '_Val'], [Pointer(T.char), '_Dstbuf'], [T.i32, '_Radix']]),
    onexit: Fn(T._onexit_t, [[T._onexit_t, '_Func']]),
    lldiv: Fn(T.lldiv_t, [[T.i64], [T.i64]]),
    llabs: Fn(T.i64, [[T.i64]]),
    strtoll: Fn(T.i64, [[Pointer(T.char)], [Pointer(Pointer(T.char)), '__restrict'], [T.i32]]),
    strtoull: Fn(T.u64, [[Pointer(T.char)], [Pointer(Pointer(T.char))], [T.i32]]),
    atoll: Fn(T.i64, [[Pointer(T.char)]]),
    wtoll: Fn(T.i64, [[Pointer(T.wchar_t)]]),
    lltoa: Fn(Pointer(T.char), [[T.i64], [Pointer(T.char)], [T.i32]]),
    ulltoa: Fn(Pointer(T.char), [[T.u64], [Pointer(T.char)], [T.i32]]),
    lltow: Fn(Pointer(T.wchar_t), [[T.i64], [Pointer(T.wchar_t)], [T.i32]]),
    ulltow: Fn(Pointer(T.wchar_t), [[T.u64], [Pointer(T.wchar_t)], [T.i32]]),
    _amblksiz: T.u32,
    __mingw_aligned_malloc: Fn(Pointer(null), [[T.size_t, '_Size'], [T.size_t, '_Alignment']]),
    __mingw_aligned_free: Fn(null, [[Pointer(null), '_Memory']]),
    __mingw_aligned_offset_realloc: Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_Size'], [T.size_t, '_Alignment'], [T.size_t, '_Offset']]),
    __mingw_aligned_realloc: Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_Size'], [T.size_t, '_Offset']]),
    _resetstkoflw: Fn(T.i32, [[null]]),
    _set_malloc_crt_max_wait: Fn(T.u32, [[T.u32, '_NewValue']]),
    _expand: Fn(Pointer(null), [[Pointer(null), '_Memory'], [T.size_t, '_NewSize']]),
    _msize: Fn(T.size_t, [[Pointer(null), '_Memory']]),
    _get_sbh_threshold: Fn(T.size_t, [[null]]),
    _set_sbh_threshold: Fn(T.i32, [[T.size_t, '_NewValue']]),
    _set_amblksiz: Fn(T.errno_t, [[T.size_t, '_Value']]),
    _get_amblksiz: Fn(T.errno_t, [[Pointer(T.size_t), '_Value']]),
    _heapadd: Fn(T.i32, [[Pointer(null), '_Memory'], [T.size_t, '_Size']]),
    _heapchk: Fn(T.i32, [[null]]),
    _heapmin: Fn(T.i32, [[null]]),
    _heapset: Fn(T.i32, [[T.u32, '_Fill']]),
    _heapwalk: Fn(T.i32, [[Pointer(T._HEAPINFO), '_EntryInfo']]),
    _heapused: Fn(T.size_t, [[Pointer(T.size_t), '_Used'], [Pointer(T.size_t), '_Commit']]),
    _get_heap_handle: Fn(T.intptr_t, [[null]]),
    __WSAFDIsSet: Fn(T.i32, [[T.SOCKET], [Pointer(T.fd_set)]]),
    WSAAsyncGetHostByAddr: Fn(T.HANDLE, [[T.HWND], [T.u_int], [Pointer(T.char)], [T.i32], [T.i32], [Pointer(T.char)], [T.i32]]),
    WSAAsyncGetHostByName: Fn(T.HANDLE, [[T.HWND], [T.u_int], [Pointer(T.char)], [Pointer(T.char)], [T.i32]]),
    WSAAsyncGetProtoByName: Fn(T.HANDLE, [[T.HWND], [T.u_int], [Pointer(T.char)], [Pointer(T.char)], [T.i32]]),
    WSAAsyncGetProtoByNumber: Fn(T.HANDLE, [[T.HWND], [T.u_int], [T.i32], [Pointer(T.char)], [T.i32]]),
    WSAAsyncGetServByName: Fn(T.HANDLE, [[T.HWND], [T.u_int], [Pointer(T.char)], [Pointer(T.char)], [Pointer(T.char)], [T.i32]]),
    WSAAsyncGetServByPort: Fn(T.HANDLE, [[T.HWND], [T.u_int], [T.i32], [Pointer(T.char)], [Pointer(T.char)], [T.i32]]),
    WSAAsyncSelect: Fn(T.i32, [[T.SOCKET], [T.HWND], [T.u_int], [T.LONG]]),
    WSACancelAsyncRequest: Fn(T.i32, [[T.HANDLE]]),
    WSACancelBlockingCall: Fn(T.i32, [[null]]),
    WSACleanup: Fn(T.i32, [[null]]),
    WSAGetLastError: Fn(T.i32, [[null]]),
    WSAIsBlocking: Fn(T.BOOL, [[null]]),
    WSASetBlockingHook: Fn(T.FARPROC, [[T.FARPROC]]),
    WSASetLastError: Fn(null, [[T.i32]]),
    WSAStartup: Fn(T.i32, [[T.WORD], [T.LPWSADATA]]),
    WSAUnhookBlockingHook: Fn(T.i32, [[null]]),
    accept: Fn(T.SOCKET, [[T.SOCKET], [Pointer(Struct('sockaddr', null))], [Pointer(T.i32)]]),
    bind: Fn(T.i32, [[T.SOCKET], [Pointer(Struct('sockaddr', null))], [T.i32]]),
    closesocket: Fn(T.i32, [[T.SOCKET]]),
    connect: Fn(T.i32, [[T.SOCKET], [Pointer(Struct('sockaddr', null))], [T.i32]]),
    gethostbyaddr: Fn(Pointer(Struct('hostent', null)), [[Pointer(T.char)], [T.i32], [T.i32]]),
    gethostbyname: Fn(Pointer(Struct('hostent', null)), [[Pointer(T.char)]]),
    getpeername: Fn(T.i32, [[T.SOCKET], [Pointer(Struct('sockaddr', null))], [Pointer(T.i32)]]),
    getprotobyname: Fn(Pointer(Struct('protoent', null)), [[Pointer(T.char)]]),
    getprotobynumber: Fn(Pointer(Struct('protoent', null)), [[T.i32]]),
    select: Fn(T.i32, [[T.i32], [Pointer(T.fd_set)], [Pointer(T.fd_set)], [Pointer(T.fd_set)], [Pointer(Struct('timeval', null))]]),
    getservbyname: Fn(Pointer(Struct('servent', null)), [[Pointer(T.char)], [Pointer(T.char)]]),
    getservbyport: Fn(Pointer(Struct('servent', null)), [[T.i32], [Pointer(T.char)]]),
    getsockname: Fn(T.i32, [[T.SOCKET], [Pointer(Struct('sockaddr', null))], [Pointer(T.i32)]]),
    getsockopt: Fn(T.i32, [[T.SOCKET], [T.i32], [T.i32], [Pointer(T.char)], [Pointer(T.i32)]]),
    inet_addr: Fn(T.ULONG, [[Pointer(T.char)]]),
    inet_ntoa: Fn(Pointer(T.char), [[Struct('in_addr', null)]]),
    ioctlsocket: Fn(T.i32, [[T.SOCKET], [T.LONG], [Pointer(T.ULONG)]]),
    listen: Fn(T.i32, [[T.SOCKET], [T.i32]]),
    recv: Fn(T.i32, [[T.SOCKET], [Pointer(T.char)], [T.i32], [T.i32]]),
    recvfrom: Fn(T.i32, [[T.SOCKET], [Pointer(T.char)], [T.i32], [T.i32], [Pointer(Struct('sockaddr', null))], [Pointer(T.i32)]]),
    send: Fn(T.i32, [[T.SOCKET], [Pointer(T.char)], [T.i32], [T.i32]]),
    sendto: Fn(T.i32, [[T.SOCKET], [Pointer(T.char)], [T.i32], [T.i32], [Pointer(Struct('sockaddr', null))], [T.i32]]),
    setsockopt: Fn(T.i32, [[T.SOCKET], [T.i32], [T.i32], [Pointer(T.char)], [T.i32]]),
    shutdown: Fn(T.i32, [[T.SOCKET], [T.i32]]),
    socket: Fn(T.SOCKET, [[T.i32], [T.i32], [T.i32]]),
    WSAAccept: Fn(T.SOCKET, [[T.SOCKET], [Pointer(Struct('sockaddr', null))], [T.LPINT], [T.LPCONDITIONPROC], [T.DWORD]]),
    WSAAddressToStringA: Fn(T.INT, [[T.LPSOCKADDR], [T.DWORD], [T.LPWSAPROTOCOL_INFOA], [T.LPSTR], [T.LPDWORD]]),
    WSAAddressToStringW: Fn(T.INT, [[T.LPSOCKADDR], [T.DWORD], [T.LPWSAPROTOCOL_INFOW], [T.LPWSTR], [T.LPDWORD]]),
    WSACloseEvent: Fn(T.BOOL, [[T.HANDLE]]),
    WSAConnect: Fn(T.i32, [[T.SOCKET], [Pointer(Struct('sockaddr', null))], [T.i32], [T.LPWSABUF], [T.LPWSABUF], [T.LPQOS], [T.LPQOS]]),
    WSACreateEvent: Fn(T.HANDLE, [[null]]),
    WSADuplicateSocketA: Fn(T.INT, [[T.SOCKET], [T.DWORD], [T.LPWSAPROTOCOL_INFOA]]),
    WSADuplicateSocketW: Fn(T.INT, [[T.SOCKET], [T.DWORD], [T.LPWSAPROTOCOL_INFOW]]),
    WSAEnumNameSpaceProvidersA: Fn(T.INT, [[T.LPDWORD], [T.LPWSANAMESPACE_INFOA]]),
    WSAEnumNameSpaceProvidersW: Fn(T.INT, [[T.LPDWORD], [T.LPWSANAMESPACE_INFOW]]),
    WSAEnumNetworkEvents: Fn(T.i32, [[T.SOCKET], [T.HANDLE], [T.LPWSANETWORKEVENTS]]),
    WSAEnumProtocolsA: Fn(T.i32, [[T.LPINT], [T.LPWSAPROTOCOL_INFOA], [T.LPDWORD]]),
    WSAEnumProtocolsW: Fn(T.i32, [[T.LPINT], [T.LPWSAPROTOCOL_INFOW], [T.LPDWORD]]),
    WSAEventSelect: Fn(T.i32, [[T.SOCKET], [T.HANDLE], [T.LONG]]),
    WSAGetOverlappedResult: Fn(T.BOOL, [[T.SOCKET], [T.LPWSAOVERLAPPED], [T.LPDWORD], [T.BOOL], [T.LPDWORD]]),
    WSAGetQOSByName: Fn(T.BOOL, [[T.SOCKET], [T.LPWSABUF], [T.LPQOS]]),
    WSAGetServiceClassInfoA: Fn(T.INT, [[T.LPGUID], [T.LPGUID], [T.LPDWORD], [T.LPWSASERVICECLASSINFOA]]),
    WSAGetServiceClassInfoW: Fn(T.INT, [[T.LPGUID], [T.LPGUID], [T.LPDWORD], [T.LPWSASERVICECLASSINFOW]]),
    WSAGetServiceClassNameByClassIdA: Fn(T.INT, [[T.LPGUID], [T.LPSTR], [T.LPDWORD]]),
    WSAGetServiceClassNameByClassIdW: Fn(T.INT, [[T.LPGUID], [T.LPWSTR], [T.LPDWORD]]),
    WSAHtonl: Fn(T.i32, [[T.SOCKET], [T.ULONG], [Pointer(T.ULONG)]]),
    WSAHtons: Fn(T.i32, [[T.SOCKET], [T.u_short], [Pointer(T.u_short)]]),
    WSAInstallServiceClassA: Fn(T.i32, [[T.LPWSASERVICECLASSINFOA]]),
    WSAInstallServiceClassW: Fn(T.i32, [[T.LPWSASERVICECLASSINFOW]]),
    WSAIoctl: Fn(T.i32, [[T.SOCKET], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.LPWSAOVERLAPPED], [T.LPWSAOVERLAPPED_COMPLETION_ROUTINE]]),
    WSAJoinLeaf: Fn(T.SOCKET, [[T.SOCKET], [Pointer(Struct('sockaddr', null))], [T.i32], [T.LPWSABUF], [T.LPWSABUF], [T.LPQOS], [T.LPQOS], [T.DWORD]]),
    WSALookupServiceBeginA: Fn(T.INT, [[T.LPWSAQUERYSETA], [T.DWORD], [T.LPHANDLE]]),
    WSALookupServiceBeginW: Fn(T.INT, [[T.LPWSAQUERYSETW], [T.DWORD], [T.LPHANDLE]]),
    WSALookupServiceEnd: Fn(T.INT, [[T.HANDLE]]),
    WSALookupServiceNextA: Fn(T.INT, [[T.HANDLE], [T.DWORD], [T.LPDWORD], [T.LPWSAQUERYSETA]]),
    WSALookupServiceNextW: Fn(T.INT, [[T.HANDLE], [T.DWORD], [T.LPDWORD], [T.LPWSAQUERYSETW]]),
    WSANSPIoctl: Fn(T.i32, [[T.HANDLE], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPVOID], [T.DWORD], [T.LPDWORD], [T.LPWSACOMPLETION]]),
    WSANtohl: Fn(T.i32, [[T.SOCKET], [T.ULONG], [Pointer(T.ULONG)]]),
    WSANtohs: Fn(T.i32, [[T.SOCKET], [T.u_short], [Pointer(T.u_short)]]),
    WSAProviderConfigChange: Fn(T.INT, [[T.LPHANDLE], [T.LPWSAOVERLAPPED], [T.LPWSAOVERLAPPED_COMPLETION_ROUTINE]]),
    WSARecv: Fn(T.i32, [[T.SOCKET], [T.LPWSABUF], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [T.LPWSAOVERLAPPED], [T.LPWSAOVERLAPPED_COMPLETION_ROUTINE]]),
    WSARecvDisconnect: Fn(T.i32, [[T.SOCKET], [T.LPWSABUF]]),
    WSARecvFrom: Fn(T.i32, [[T.SOCKET], [T.LPWSABUF], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [Pointer(Struct('sockaddr', null))], [T.LPINT], [T.LPWSAOVERLAPPED], [T.LPWSAOVERLAPPED_COMPLETION_ROUTINE]]),
    WSARemoveServiceClass: Fn(T.INT, [[T.LPGUID]]),
    WSAResetEvent: Fn(T.BOOL, [[T.HANDLE]]),
    WSASend: Fn(T.i32, [[T.SOCKET], [T.LPWSABUF], [T.DWORD], [T.LPDWORD], [T.DWORD], [T.LPWSAOVERLAPPED], [T.LPWSAOVERLAPPED_COMPLETION_ROUTINE]]),
    WSASendDisconnect: Fn(T.i32, [[T.SOCKET], [T.LPWSABUF]]),
    WSASendTo: Fn(T.i32, [[T.SOCKET], [T.LPWSABUF], [T.DWORD], [T.LPDWORD], [T.DWORD], [Pointer(Struct('sockaddr', null))], [T.i32], [T.LPWSAOVERLAPPED], [T.LPWSAOVERLAPPED_COMPLETION_ROUTINE]]),
    WSASetEvent: Fn(T.BOOL, [[T.HANDLE]]),
    WSASetServiceA: Fn(T.INT, [[T.LPWSAQUERYSETA], [T.WSAESETSERVICEOP], [T.DWORD]]),
    WSASetServiceW: Fn(T.INT, [[T.LPWSAQUERYSETW], [T.WSAESETSERVICEOP], [T.DWORD]]),
    WSASocketA: Fn(T.SOCKET, [[T.i32], [T.i32], [T.i32], [T.LPWSAPROTOCOL_INFOA], [T.GROUP], [T.DWORD]]),
    WSASocketW: Fn(T.SOCKET, [[T.i32], [T.i32], [T.i32], [T.LPWSAPROTOCOL_INFOW], [T.GROUP], [T.DWORD]]),
    WSAStringToAddressA: Fn(T.INT, [[T.LPSTR], [T.INT], [T.LPWSAPROTOCOL_INFOA], [T.LPSOCKADDR], [T.LPINT]]),
    WSAStringToAddressW: Fn(T.INT, [[T.LPWSTR], [T.INT], [T.LPWSAPROTOCOL_INFOW], [T.LPSOCKADDR], [T.LPINT]]),
    WSAWaitForMultipleEvents: Fn(T.DWORD, [[T.DWORD], [Pointer(T.HANDLE)], [T.BOOL], [T.DWORD], [T.BOOL]]),
    CryptAcquireContextA: Fn(T.BOOL, [[Pointer(T.HCRYPTPROV)], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.DWORD]]),
    CryptAcquireContextW: Fn(T.BOOL, [[Pointer(T.HCRYPTPROV)], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.DWORD]]),
    CryptGenRandom: Fn(T.BOOL, [[T.HCRYPTPROV], [T.DWORD], [Pointer(T.BYTE)]]),
    CryptContextAddRef: Fn(T.BOOL, [[T.HCRYPTPROV], [Pointer(T.DWORD)], [T.DWORD]]),
    CryptCreateHash: Fn(T.BOOL, [[T.HCRYPTPROV], [T.ALG_ID], [T.HCRYPTKEY], [T.DWORD], [Pointer(T.HCRYPTHASH)]]),
    CryptDecrypt: Fn(T.BOOL, [[T.HCRYPTKEY], [T.HCRYPTHASH], [T.BOOL], [T.DWORD], [Pointer(T.BYTE)], [Pointer(T.DWORD)]]),
    CryptDeriveKey: Fn(T.BOOL, [[T.HCRYPTPROV], [T.ALG_ID], [T.HCRYPTHASH], [T.DWORD], [Pointer(T.HCRYPTKEY)]]),
    CryptDestroyHash: Fn(T.BOOL, [[T.HCRYPTHASH]]),
    CryptDestroyKey: Fn(T.BOOL, [[T.HCRYPTKEY]]),
    CryptDuplicateKey: Fn(T.BOOL, [[T.HCRYPTKEY], [Pointer(T.DWORD)], [T.DWORD], [Pointer(T.HCRYPTKEY)]]),
    CryptDuplicateHash: Fn(T.BOOL, [[T.HCRYPTHASH], [Pointer(T.DWORD)], [T.DWORD], [Pointer(T.HCRYPTHASH)]]),
    CryptEncrypt: Fn(T.BOOL, [[T.HCRYPTKEY], [T.HCRYPTHASH], [T.BOOL], [T.DWORD], [Pointer(T.BYTE)], [Pointer(T.DWORD)], [T.DWORD]]),
    CryptEnumProvidersA: Fn(T.BOOL, [[T.DWORD], [Pointer(T.DWORD)], [T.DWORD], [Pointer(T.DWORD)], [T.LPSTR], [Pointer(T.DWORD)]]),
    CryptEnumProvidersW: Fn(T.BOOL, [[T.DWORD], [Pointer(T.DWORD)], [T.DWORD], [Pointer(T.DWORD)], [T.LPWSTR], [Pointer(T.DWORD)]]),
    CryptEnumProviderTypesA: Fn(T.BOOL, [[T.DWORD], [Pointer(T.DWORD)], [T.DWORD], [Pointer(T.DWORD)], [T.LPSTR], [Pointer(T.DWORD)]]),
    CryptEnumProviderTypesW: Fn(T.BOOL, [[T.DWORD], [Pointer(T.DWORD)], [T.DWORD], [Pointer(T.DWORD)], [T.LPWSTR], [Pointer(T.DWORD)]]),
    CryptExportKey: Fn(T.BOOL, [[T.HCRYPTKEY], [T.HCRYPTKEY], [T.DWORD], [T.DWORD], [Pointer(T.BYTE)], [Pointer(T.DWORD)]]),
    CryptGenKey: Fn(T.BOOL, [[T.HCRYPTPROV], [T.ALG_ID], [T.DWORD], [Pointer(T.HCRYPTKEY)]]),
    CryptGetKeyParam: Fn(T.BOOL, [[T.HCRYPTKEY], [T.DWORD], [Pointer(T.BYTE)], [Pointer(T.DWORD)], [T.DWORD]]),
    CryptGetHashParam: Fn(T.BOOL, [[T.HCRYPTHASH], [T.DWORD], [Pointer(T.BYTE)], [Pointer(T.DWORD)], [T.DWORD]]),
    CryptGetProvParam: Fn(T.BOOL, [[T.HCRYPTPROV], [T.DWORD], [Pointer(T.BYTE)], [Pointer(T.DWORD)], [T.DWORD]]),
    CryptGetDefaultProviderA: Fn(T.BOOL, [[T.DWORD], [Pointer(T.DWORD)], [T.DWORD], [T.LPSTR], [Pointer(T.DWORD)]]),
    CryptGetDefaultProviderW: Fn(T.BOOL, [[T.DWORD], [Pointer(T.DWORD)], [T.DWORD], [T.LPWSTR], [Pointer(T.DWORD)]]),
    CryptGetUserKey: Fn(T.BOOL, [[T.HCRYPTPROV], [T.DWORD], [Pointer(T.HCRYPTKEY)]]),
    CryptHashData: Fn(T.BOOL, [[T.HCRYPTHASH], [Pointer(T.BYTE)], [T.DWORD], [T.DWORD]]),
    CryptHashSessionKey: Fn(T.BOOL, [[T.HCRYPTHASH], [T.HCRYPTKEY], [T.DWORD]]),
    CryptImportKey: Fn(T.BOOL, [[T.HCRYPTPROV], [Pointer(T.BYTE)], [T.DWORD], [T.HCRYPTKEY], [T.DWORD], [Pointer(T.HCRYPTKEY)]]),
    CryptReleaseContext: Fn(T.BOOL, [[T.HCRYPTPROV], [T.ULONG_PTR]]),
    CryptSetHashParam: Fn(T.BOOL, [[T.HCRYPTHASH], [T.DWORD], [Pointer(T.BYTE)], [T.DWORD]]),
    CryptSetKeyParam: Fn(T.BOOL, [[T.HCRYPTKEY], [T.DWORD], [Pointer(T.BYTE)], [T.DWORD]]),
    CryptSetProviderA: Fn(T.BOOL, [[T.LPCSTR], [T.DWORD]]),
    CryptSetProviderW: Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD]]),
    CryptSetProviderExA: Fn(T.BOOL, [[T.LPCSTR], [T.DWORD], [Pointer(T.DWORD)], [T.DWORD]]),
    CryptSetProviderExW: Fn(T.BOOL, [[T.LPCWSTR], [T.DWORD], [Pointer(T.DWORD)], [T.DWORD]]),
    CryptSetProvParam: Fn(T.BOOL, [[T.HCRYPTPROV], [T.DWORD], [Pointer(T.BYTE)], [T.DWORD]]),
    CryptSignHashA: Fn(T.BOOL, [[T.HCRYPTHASH], [T.DWORD], [T.LPCSTR], [T.DWORD], [Pointer(T.BYTE)], [Pointer(T.DWORD)]]),
    CryptSignHashW: Fn(T.BOOL, [[T.HCRYPTHASH], [T.DWORD], [T.LPCWSTR], [T.DWORD], [Pointer(T.BYTE)], [Pointer(T.DWORD)]]),
    CryptVerifySignatureA: Fn(T.BOOL, [[T.HCRYPTHASH], [Pointer(T.BYTE)], [T.DWORD], [T.HCRYPTKEY], [T.LPCSTR], [T.DWORD]]),
    CryptVerifySignatureW: Fn(T.BOOL, [[T.HCRYPTHASH], [Pointer(T.BYTE)], [T.DWORD], [T.HCRYPTKEY], [T.LPCWSTR], [T.DWORD]]),
    CryptMemAlloc: Fn(T.LPVOID, [[T.ULONG, 'cbSize']]),
    CryptMemRealloc: Fn(T.LPVOID, [[T.LPVOID, 'pv'], [T.ULONG, 'cbSize']]),
    CryptMemFree: Fn(null, [[T.LPVOID, 'pv']]),
    CryptBinaryToStringA: Fn(T.BOOL, [[Pointer(T.BYTE), 'pbBinary'], [T.DWORD, 'cbBinary'], [T.DWORD, 'dwFlags'], [T.LPSTR, 'pszString'], [Pointer(T.DWORD), 'pcchString']]),
    CryptBinaryToStringW: Fn(T.BOOL, [[Pointer(T.BYTE), 'pbBinary'], [T.DWORD, 'cbBinary'], [T.DWORD, 'dwFlags'], [T.LPWSTR, 'pszString'], [Pointer(T.DWORD), 'pcchString']]),
    CryptStringToBinaryA: Fn(T.BOOL, [[T.LPCSTR, 'pszString'], [T.DWORD, 'cchString'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbBinary'], [Pointer(T.DWORD), 'pcbBinary'], [Pointer(T.DWORD), 'pdwSkip'], [Pointer(T.DWORD), 'pdwFlags']]),
    CryptStringToBinaryW: Fn(T.BOOL, [[T.LPCWSTR, 'pszString'], [T.DWORD, 'cchString'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbBinary'], [Pointer(T.DWORD), 'pcbBinary'], [Pointer(T.DWORD), 'pdwSkip'], [Pointer(T.DWORD), 'pdwFlags']]),
    CryptCreateAsyncHandle: Fn(T.BOOL, [[T.DWORD, 'dwFlags'], [T.PHCRYPTASYNC, 'phAsync']]),
    CryptSetAsyncParam: Fn(T.BOOL, [[T.HCRYPTASYNC, 'hAsync'], [T.LPSTR, 'pszParamOid'], [T.LPVOID, 'pvParam'], [T.PFN_CRYPT_ASYNC_PARAM_FREE_FUNC, 'pfnFree']]),
    CryptGetAsyncParam: Fn(T.BOOL, [[T.HCRYPTASYNC, 'hAsync'], [T.LPSTR, 'pszParamOid'], [Pointer(T.LPVOID), 'ppvParam'], [Pointer(T.PFN_CRYPT_ASYNC_PARAM_FREE_FUNC), 'ppfnFree']]),
    CryptCloseAsyncHandle: Fn(T.BOOL, [[T.HCRYPTASYNC, 'hAsync']]),
    CryptRegisterDefaultOIDFunction: Fn(T.BOOL, [[T.DWORD], [T.LPCSTR], [T.DWORD], [T.LPCWSTR]]),
    CryptRegisterOIDFunction: Fn(T.BOOL, [[T.DWORD], [T.LPCSTR], [T.LPCSTR], [T.LPCWSTR], [T.LPCSTR]]),
    CryptGetOIDFunctionValue: Fn(T.BOOL, [[T.DWORD, 'dwEncodingType'], [T.LPCSTR, 'pszFuncName'], [T.LPCSTR, 'pszOID'], [T.LPCWSTR, 'szValueName'], [Pointer(T.DWORD), 'pdwValueType'], [Pointer(T.BYTE), 'pbValueData'], [Pointer(T.DWORD), 'pcbValueData']]),
    CryptSetOIDFunctionValue: Fn(T.BOOL, [[T.DWORD, 'dwEncodingType'], [T.LPCSTR, 'pszFuncName'], [T.LPCSTR, 'pszOID'], [T.LPCWSTR, 'pwszValueName'], [T.DWORD, 'dwValueType'], [Pointer(T.BYTE), 'pbValueData'], [T.DWORD, 'cbValueData']]),
    CryptUnregisterDefaultOIDFunction: Fn(T.BOOL, [[T.DWORD], [T.LPCSTR], [T.LPCWSTR]]),
    CryptUnregisterOIDFunction: Fn(T.BOOL, [[T.DWORD], [T.LPCSTR], [T.LPCSTR]]),
    CryptEnumOIDFunction: Fn(T.BOOL, [[T.DWORD, 'dwEncodingType'], [T.LPCSTR, 'pszFuncName'], [T.LPCSTR, 'pszOID'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvArg'], [T.PFN_CRYPT_ENUM_OID_FUNC, 'pfnEnumOIDFunc']]),
    CryptInitOIDFunctionSet: Fn(T.HCRYPTOIDFUNCSET, [[T.LPCSTR], [T.DWORD]]),
    CryptGetDefaultOIDDllList: Fn(T.BOOL, [[T.HCRYPTOIDFUNCSET, 'hFuncSet'], [T.DWORD, 'dwEncodingType'], [T.LPWSTR, 'pwszDllList'], [Pointer(T.DWORD), 'pcchDllList']]),
    CryptGetDefaultOIDFunctionAddress: Fn(T.BOOL, [[T.HCRYPTOIDFUNCSET, 'hFuncSet'], [T.DWORD, 'dwEncodingType'], [T.LPCWSTR, 'pwszDll'], [T.DWORD, 'dwFlags'], [Pointer(Pointer(null)), 'ppvFuncAddr'], [Pointer(T.HCRYPTOIDFUNCADDR), 'phFuncAddr']]),
    CryptGetOIDFunctionAddress: Fn(T.BOOL, [[T.HCRYPTOIDFUNCSET, 'hFuncSet'], [T.DWORD, 'dwEncodingType'], [T.LPCSTR, 'pszOID'], [T.DWORD, 'dwFlags'], [Pointer(Pointer(null)), 'ppvFuncAddr'], [Pointer(T.HCRYPTOIDFUNCADDR), 'phFuncAddr']]),
    CryptFreeOIDFunctionAddress: Fn(T.BOOL, [[T.HCRYPTOIDFUNCADDR, 'hFuncAddr'], [T.DWORD, 'dwFlags']]),
    CryptInstallOIDFunctionAddress: Fn(T.BOOL, [[T.HMODULE, 'hModule'], [T.DWORD, 'dwEncodingType'], [T.LPCSTR, 'pszFuncName'], [T.DWORD, 'cFuncEntry'], [Pointer(T.CRYPT_OID_FUNC_ENTRY), 'rgFuncEntry'], [T.DWORD, 'dwFlags']]),
    CryptInstallDefaultContext: Fn(T.BOOL, [[T.HCRYPTPROV, 'hCryptProv'], [T.DWORD, 'dwDefaultType'], [Pointer(null), 'pvDefaultPara'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved'], [Pointer(T.HCRYPTDEFAULTCONTEXT), 'phDefaultContext']]),
    CryptUninstallDefaultContext: Fn(T.BOOL, [[T.HCRYPTDEFAULTCONTEXT, 'hDefaultContext'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']]),
    CryptEnumOIDInfo: Fn(T.BOOL, [[T.DWORD, 'dwGroupId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvArg'], [T.PFN_CRYPT_ENUM_OID_INFO, 'pfnEnumOIDInfo']]),
    CryptFindOIDInfo: Fn(T.PCCRYPT_OID_INFO, [[T.DWORD, 'dwKeyType'], [Pointer(null), 'pvKey'], [T.DWORD, 'dwGroupId']]),
    CryptRegisterOIDInfo: Fn(T.BOOL, [[T.PCCRYPT_OID_INFO, 'pInfo'], [T.DWORD, 'dwFlags']]),
    CryptUnregisterOIDInfo: Fn(T.BOOL, [[T.PCCRYPT_OID_INFO, 'pInfo']]),
    CryptFindLocalizedName: Fn(T.LPCWSTR, [[T.LPCWSTR, 'pwszCryptName']]),
    CertAlgIdToOID: Fn(T.LPCSTR, [[T.DWORD, 'dwAlgId']]),
    CertOIDToAlgId: Fn(T.DWORD, [[T.LPCSTR, 'pszObjId']]),
    CertOpenStore: Fn(T.HCERTSTORE, [[T.LPCSTR, 'lpszStoreProvider'], [T.DWORD, 'dwEncodingType'], [T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvPara']]),
    CertOpenSystemStoreA: Fn(T.HCERTSTORE, [[T.HCRYPTPROV_LEGACY, 'hProv'], [T.LPCSTR, 'szSubSystemProtocol']]),
    CertOpenSystemStoreW: Fn(T.HCERTSTORE, [[T.HCRYPTPROV_LEGACY, 'hProv'], [T.LPCWSTR, 'szSubSystemProtocol']]),
    CertEnumCertificatesInStore: Fn(T.PCCERT_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.PCCERT_CONTEXT, 'pPrev']]),
    CertEnumCRLsInStore: Fn(T.PCCRL_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.PCCRL_CONTEXT, 'pPrev']]),
    CertEnumCTLsInStore: Fn(T.PCCTL_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.PCCTL_CONTEXT, 'pPrev']]),
    CertEnumSystemStoreLocation: Fn(T.BOOL, [[T.DWORD, 'dwFlags'], [Pointer(null), 'pvArg'], [T.PFN_CERT_ENUM_SYSTEM_STORE_LOCATION, 'pfnEnum']]),
    CertEnumSystemStore: Fn(T.BOOL, [[T.DWORD, 'dwFlags'], [Pointer(null), 'pvSystemStoreLocationPara'], [Pointer(null), 'pvArg'], [T.PFN_CERT_ENUM_SYSTEM_STORE, 'pfnEnum']]),
    CertEnumPhysicalStore: Fn(T.BOOL, [[Pointer(null), 'pvSystemStore'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvArg'], [T.PFN_CERT_ENUM_PHYSICAL_STORE, 'pfnEnum']]),
    CertRegisterPhysicalStore: Fn(T.BOOL, [[Pointer(null), 'pvSystemStore'], [T.DWORD, 'dwFlags'], [T.LPCWSTR, 'pwszStoreName'], [T.PCERT_PHYSICAL_STORE_INFO, 'pStoreInfo'], [Pointer(null), 'pvReserved']]),
    CertSaveStore: Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwMsgAndCertEncodingType'], [T.DWORD, 'dwSaveAs'], [T.DWORD, 'dwSaveTo'], [Pointer(null), 'pvSaveToPara'], [T.DWORD, 'dwFlags']]),
    CertAddStoreToCollection: Fn(T.BOOL, [[T.HCERTSTORE, 'hCollectionStore'], [T.HCERTSTORE, 'hSiblingStore'], [T.DWORD, 'dwUpdateFlags'], [T.DWORD, 'dwPriority']]),
    CertRemoveStoreFromCollection: Fn(null, [[T.HCERTSTORE, 'hCollectionStore'], [T.HCERTSTORE, 'hSiblingStore']]),
    CertCreateCertificateChainEngine: Fn(T.BOOL, [[T.PCERT_CHAIN_ENGINE_CONFIG, 'pConfig'], [Pointer(T.HCERTCHAINENGINE), 'phChainEngine']]),
    CertResyncCertificateChainEngine: Fn(T.BOOL, [[T.HCERTCHAINENGINE, 'hChainEngine']]),
    CertFreeCertificateChainEngine: Fn(null, [[T.HCERTCHAINENGINE, 'hChainEngine']]),
    CertGetCertificateChain: Fn(T.BOOL, [[T.HCERTCHAINENGINE, 'hChainEngine'], [T.PCCERT_CONTEXT, 'pCertContext'], [T.LPFILETIME, 'pTime'], [T.HCERTSTORE, 'hAdditionalStore'], [T.PCERT_CHAIN_PARA, 'pChainPara'], [T.DWORD, 'dwFlags'], [T.LPVOID, 'pvReserved'], [Pointer(T.PCCERT_CHAIN_CONTEXT), 'ppChainContext']]),
    CertDuplicateCertificateChain: Fn(T.PCCERT_CHAIN_CONTEXT, [[T.PCCERT_CHAIN_CONTEXT, 'pChainContext']]),
    CertFreeCertificateChain: Fn(null, [[T.PCCERT_CHAIN_CONTEXT, 'pChainContext']]),
    CertFindChainInStore: Fn(T.PCCERT_CHAIN_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwCertEncodingType'], [T.DWORD, 'dwFindFlags'], [T.DWORD, 'dwFindType'], [Pointer(null), 'pvFindPara'], [T.PCCERT_CHAIN_CONTEXT, 'pPrevChainContext']]),
    CertVerifyCertificateChainPolicy: Fn(T.BOOL, [[T.LPCSTR, 'szPolicyOID'], [T.PCCERT_CHAIN_CONTEXT, 'pChainContext'], [T.PCERT_CHAIN_POLICY_PARA, 'pPolicyPara'], [T.PCERT_CHAIN_POLICY_STATUS, 'pPolicyStatus']]),
    CertEnumCertificateContextProperties: Fn(T.DWORD, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwPropId']]),
    CertGetCertificateContextProperty: Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwPropId'], [Pointer(null), 'pvData'], [Pointer(T.DWORD), 'pcbData']]),
    CertSetCertificateContextProperty: Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData']]),
    CertEnumCRLContextProperties: Fn(T.DWORD, [[T.PCCRL_CONTEXT, 'pCRLContext'], [T.DWORD, 'dwPropId']]),
    CertGetCRLContextProperty: Fn(T.BOOL, [[T.PCCRL_CONTEXT, 'pCRLContext'], [T.DWORD, 'dwPropId'], [Pointer(null), 'pvData'], [Pointer(T.DWORD), 'pcbData']]),
    CertSetCRLContextProperty: Fn(T.BOOL, [[T.PCCRL_CONTEXT, 'pCRLContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData']]),
    CertEnumCTLContextProperties: Fn(T.DWORD, [[T.PCCTL_CONTEXT, 'pCTLContext'], [T.DWORD, 'dwPropId']]),
    CertEnumSubjectInSortedCTL: Fn(T.BOOL, [[T.PCCTL_CONTEXT, 'pCTLContext'], [Pointer(Pointer(null)), 'ppvNextSubject'], [T.PCRYPT_DER_BLOB, 'pSubjectIdentifier'], [T.PCRYPT_DER_BLOB, 'pEncodedAttributes']]),
    CertGetCTLContextProperty: Fn(T.BOOL, [[T.PCCTL_CONTEXT, 'pCTLContext'], [T.DWORD, 'dwPropId'], [Pointer(null), 'pvData'], [Pointer(T.DWORD), 'pcbData']]),
    CertSetCTLContextProperty: Fn(T.BOOL, [[T.PCCTL_CONTEXT, 'pCTLContext'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData']]),
    CertGetStoreProperty: Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwPropId'], [Pointer(null), 'pvData'], [Pointer(T.DWORD), 'pcbData']]),
    CertSetStoreProperty: Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwPropId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvData']]),
    CertControlStore: Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwCtrlType'], [Pointer(null), 'pvCtrlPara']]),
    CertDuplicateStore: Fn(T.HCERTSTORE, [[T.HCERTSTORE, 'hCertStore']]),
    CertCloseStore: Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwFlags']]),
    CertFreeCertificateContext: Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext']]),
    CertFreeCRLContext: Fn(T.BOOL, [[T.PCCRL_CONTEXT, 'pCrlContext']]),
    CertFreeCTLContext: Fn(T.BOOL, [[T.PCCTL_CONTEXT, 'pCtlContext']]),
    CertAddCertificateContextToStore: Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCERT_CONTEXT), 'ppStoreContext']]),
    CertAddCRLContextToStore: Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.PCCRL_CONTEXT, 'pCrlContext'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCRL_CONTEXT), 'ppStoreContext']]),
    CertAddCTLContextToStore: Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.PCCTL_CONTEXT, 'pCtlContext'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCTL_CONTEXT), 'ppStoreContext']]),
    CertAddCertificateLinkToStore: Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCERT_CONTEXT), 'ppStoreContext']]),
    CertAddCRLLinkToStore: Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.PCCRL_CONTEXT, 'pCrlContext'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCRL_CONTEXT), 'ppStoreContext']]),
    CertAddCTLLinkToStore: Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.PCCTL_CONTEXT, 'pCtlContext'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCTL_CONTEXT), 'ppStoreContext']]),
    CertAddEncodedCertificateToStore: Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwCertEncodingType'], [Pointer(T.BYTE), 'pbCertEncoded'], [T.DWORD, 'cbCertEncoded'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCERT_CONTEXT), 'ppCertContext']]),
    CertAddEncodedCertificateToSystemStoreA: Fn(T.BOOL, [[T.LPCSTR, 'pszCertStoreName'], [Pointer(T.BYTE), 'pbCertEncoded'], [T.DWORD, 'cbCertEncoded']]),
    CertAddEncodedCertificateToSystemStoreW: Fn(T.BOOL, [[T.LPCWSTR, 'pszCertStoreName'], [Pointer(T.BYTE), 'pbCertEncoded'], [T.DWORD, 'cbCertEncoded']]),
    CertAddEncodedCRLToStore: Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwCertEncodingType'], [Pointer(T.BYTE), 'pbCrlEncoded'], [T.DWORD, 'cbCrlEncoded'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCRL_CONTEXT), 'ppCrlContext']]),
    CertAddEncodedCTLToStore: Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwMsgAndCertEncodingType'], [Pointer(T.BYTE), 'pbCtlEncoded'], [T.DWORD, 'cbCtlEncoded'], [T.DWORD, 'dwAddDisposition'], [Pointer(T.PCCTL_CONTEXT), 'ppCtlContext']]),
    CertAddSerializedElementToStore: Fn(T.BOOL, [[T.HCERTSTORE, 'hCertStore'], [Pointer(T.BYTE), 'pbElement'], [T.DWORD, 'cbElement'], [T.DWORD, 'dwAddDisposition'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwContextTypeFlags'], [Pointer(T.DWORD), 'pdwContentType'], [Pointer(Pointer(null)), 'ppvContext']]),
    CertCompareCertificate: Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.PCERT_INFO, 'pCertId1'], [T.PCERT_INFO, 'pCertId2']]),
    CertCompareCertificateName: Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.PCERT_NAME_BLOB, 'pCertName1'], [T.PCERT_NAME_BLOB, 'pCertName2']]),
    CertCompareIntegerBlob: Fn(T.BOOL, [[T.PCRYPT_INTEGER_BLOB, 'pInt1'], [T.PCRYPT_INTEGER_BLOB, 'pInt2']]),
    CertComparePublicKeyInfo: Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.PCERT_PUBLIC_KEY_INFO, 'pPublicKey1'], [T.PCERT_PUBLIC_KEY_INFO, 'pPublicKey2']]),
    CertGetPublicKeyLength: Fn(T.DWORD, [[T.DWORD, 'dwCertEncodingType'], [T.PCERT_PUBLIC_KEY_INFO, 'pPublicKey']]),
    CertCreateContext: Fn(Pointer(null), [[T.DWORD, 'dwContextType'], [T.DWORD, 'dwEncodingType'], [Pointer(T.BYTE), 'pbEncoded'], [T.DWORD, 'cbEncoded'], [T.DWORD, 'dwFlags'], [T.PCERT_CREATE_CONTEXT_PARA, 'pCreatePara']]),
    CertCreateCertificateContext: Fn(T.PCCERT_CONTEXT, [[T.DWORD, 'dwCertEncodingType'], [Pointer(T.BYTE), 'pbCertEncoded'], [T.DWORD, 'cbCertEncoded']]),
    CertCreateCRLContext: Fn(T.PCCRL_CONTEXT, [[T.DWORD, 'dwCertEncodingType'], [Pointer(T.BYTE), 'pbCrlEncoded'], [T.DWORD, 'cbCrlEncoded']]),
    CertCreateCTLContext: Fn(T.PCCTL_CONTEXT, [[T.DWORD, 'dwMsgAndCertEncodingType'], [Pointer(T.BYTE), 'pbCtlEncoded'], [T.DWORD, 'cbCtlEncoded']]),
    CertCreateSelfSignCertificate: Fn(T.PCCERT_CONTEXT, [[T.HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, 'hProv'], [T.PCERT_NAME_BLOB, 'pSubjectIssuerBlob'], [T.DWORD, 'dwFlags'], [T.PCRYPT_KEY_PROV_INFO, 'pKeyProvInfo'], [T.PCRYPT_ALGORITHM_IDENTIFIER, 'pSignatureAlgorithm'], [T.PSYSTEMTIME, 'pStartTime'], [T.PSYSTEMTIME, 'pEndTime'], [T.PCERT_EXTENSIONS, 'pExtensions']]),
    CertDeleteCertificateFromStore: Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext']]),
    CertDeleteCRLFromStore: Fn(T.BOOL, [[T.PCCRL_CONTEXT, 'pCrlContext']]),
    CertDeleteCTLFromStore: Fn(T.BOOL, [[T.PCCTL_CONTEXT, 'pCtlContext']]),
    CertDuplicateCertificateContext: Fn(T.PCCERT_CONTEXT, [[T.PCCERT_CONTEXT, 'pCertContext']]),
    CertDuplicateCRLContext: Fn(T.PCCRL_CONTEXT, [[T.PCCRL_CONTEXT, 'pCrlContext']]),
    CertDuplicateCTLContext: Fn(T.PCCTL_CONTEXT, [[T.PCCTL_CONTEXT, 'pCtlContext']]),
    CertFindCertificateInStore: Fn(T.PCCERT_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwCertEncodingType'], [T.DWORD, 'dwFindFlags'], [T.DWORD, 'dwFindType'], [Pointer(null), 'pvFindPara'], [T.PCCERT_CONTEXT, 'pPrevCertContext']]),
    CertFindCRLInStore: Fn(T.PCCRL_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwCertEncodingType'], [T.DWORD, 'dwFindFlags'], [T.DWORD, 'dwFindType'], [Pointer(null), 'pvFindPara'], [T.PCCRL_CONTEXT, 'pPrevCrlContext']]),
    CertFindCTLInStore: Fn(T.PCCTL_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwCertEncodingType'], [T.DWORD, 'dwFindFlags'], [T.DWORD, 'dwFindType'], [Pointer(null), 'pvFindPara'], [T.PCCTL_CONTEXT, 'pPrevCtlContext']]),
    CertGetIssuerCertificateFromStore: Fn(T.PCCERT_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.PCCERT_CONTEXT, 'pSubjectContext'], [T.PCCERT_CONTEXT, 'pPrevIssuerContext'], [Pointer(T.DWORD), 'pdwFlags']]),
    CertGetSubjectCertificateFromStore: Fn(T.PCCERT_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.DWORD, 'dwCertEncodingType'], [T.PCERT_INFO, 'pCertId']]),
    CertGetCRLFromStore: Fn(T.PCCRL_CONTEXT, [[T.HCERTSTORE, 'hCertStore'], [T.PCCERT_CONTEXT, 'pIssuerContext'], [T.PCCRL_CONTEXT, 'pPrevCrlContext'], [Pointer(T.DWORD), 'pdwFlags']]),
    CertSerializeCertificateStoreElement: Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbElement'], [Pointer(T.DWORD), 'pcbElement']]),
    CertSerializeCRLStoreElement: Fn(T.BOOL, [[T.PCCRL_CONTEXT, 'pCrlContext'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbElement'], [Pointer(T.DWORD), 'pcbElement']]),
    CertSerializeCTLStoreElement: Fn(T.BOOL, [[T.PCCTL_CONTEXT, 'pCtlContext'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbElement'], [Pointer(T.DWORD), 'pcbElement']]),
    CertGetIntendedKeyUsage: Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.PCERT_INFO, 'pCertInfo'], [Pointer(T.BYTE), 'pbKeyUsage'], [T.DWORD, 'cbKeyUsage']]),
    CertGetEnhancedKeyUsage: Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwFlags'], [T.PCERT_ENHKEY_USAGE, 'pUsage'], [Pointer(T.DWORD), 'pcbUsage']]),
    CertSetEnhancedKeyUsage: Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.PCERT_ENHKEY_USAGE, 'pUsage']]),
    CertAddEnhancedKeyUsageIdentifier: Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.LPCSTR, 'pszUsageIdentifer']]),
    CertRemoveEnhancedKeyUsageIdentifier: Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.LPCSTR, 'pszUsageIdentifer']]),
    CertGetValidUsages: Fn(T.BOOL, [[T.DWORD, 'cCerts'], [Pointer(T.PCCERT_CONTEXT), 'rghCerts'], [Pointer(T.i32), 'cNumOIDs'], [Pointer(T.LPSTR), 'rghOIDs'], [Pointer(T.DWORD), 'pcbOIDs']]),
    CryptEncodeObject: Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.LPCSTR, 'lpszStructType'], [Pointer(null), 'pvStructInfo'], [Pointer(T.BYTE), 'pbEncoded'], [Pointer(T.DWORD), 'pcbEncoded']]),
    CryptEncodeObjectEx: Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.LPCSTR, 'lpszStructType'], [Pointer(null), 'pvStructInfo'], [T.DWORD, 'dwFlags'], [T.PCRYPT_ENCODE_PARA, 'pEncodePara'], [Pointer(null), 'pvEncoded'], [Pointer(T.DWORD), 'pcbEncoded']]),
    CryptDecodeObject: Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.LPCSTR, 'lpszStructType'], [Pointer(T.BYTE), 'pbEncoded'], [T.DWORD, 'cbEncoded'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvStructInfo'], [Pointer(T.DWORD), 'pcbStructInfo']]),
    CryptDecodeObjectEx: Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.LPCSTR, 'lpszStructType'], [Pointer(T.BYTE), 'pbEncoded'], [T.DWORD, 'cbEncoded'], [T.DWORD, 'dwFlags'], [T.PCRYPT_DECODE_PARA, 'pDecodePara'], [Pointer(null), 'pvStructInfo'], [Pointer(T.DWORD), 'pcbStructInfo']]),
    CryptFormatObject: Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.DWORD, 'dwFormatType'], [T.DWORD, 'dwFormatStrType'], [Pointer(null), 'pFormatStruct'], [T.LPCSTR, 'lpszStructType'], [Pointer(T.BYTE), 'pbEncoded'], [T.DWORD, 'cbEncoded'], [Pointer(null), 'pbFormat'], [Pointer(T.DWORD), 'pcbFormat']]),
    CryptHashCertificate: Fn(T.BOOL, [[T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.ALG_ID, 'Algid'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbEncoded'], [T.DWORD, 'cbEncoded'], [Pointer(T.BYTE), 'pbComputedHash'], [Pointer(T.DWORD), 'pcbComputedHash']]),
    CryptHashPublicKeyInfo: Fn(T.BOOL, [[T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.ALG_ID, 'Algid'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwCertEncodingType'], [T.PCERT_PUBLIC_KEY_INFO, 'pInfo'], [Pointer(T.BYTE), 'pbComputedHash'], [Pointer(T.DWORD), 'pcbComputedHash']]),
    CryptHashToBeSigned: Fn(T.BOOL, [[T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.DWORD, 'dwCertEncodingType'], [Pointer(T.BYTE), 'pbEncoded'], [T.DWORD, 'cbEncoded'], [Pointer(T.BYTE), 'pbComputedHash'], [Pointer(T.DWORD), 'pcbComputedHash']]),
    CryptQueryObject: Fn(T.BOOL, [[T.DWORD, 'dwObjectType'], [Pointer(null), 'pvObject'], [T.DWORD, 'dwExpectedContentTypeFlags'], [T.DWORD, 'dwExpectedFormatTypeFlags'], [T.DWORD, 'dwFlags'], [Pointer(T.DWORD), 'pdwMsgAndCertEncodingType'], [Pointer(T.DWORD), 'pdwContentType'], [Pointer(T.DWORD), 'pdwFormatType'], [Pointer(T.HCERTSTORE), 'phCertStore'], [Pointer(T.HCRYPTMSG), 'phMsg'], [Pointer(Pointer(null)), 'ppvContext']]),
    CryptSignCertificate: Fn(T.BOOL, [[T.HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, 'hCryptProv'], [T.DWORD, 'dwKeySpec'], [T.DWORD, 'dwCertEncodingType'], [Pointer(T.BYTE), 'pbEncodedToBeSigned'], [T.DWORD, 'cbEncodedToBeSigned'], [T.PCRYPT_ALGORITHM_IDENTIFIER, 'pSignatureAlgorithm'], [Pointer(null), 'pvHashAuxInfo'], [Pointer(T.BYTE), 'pbSignature'], [Pointer(T.DWORD), 'pcbSignature']]),
    CryptSignAndEncodeCertificate: Fn(T.BOOL, [[T.HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, 'hCryptProv'], [T.DWORD, 'dwKeySpec'], [T.DWORD, 'dwCertEncodingType'], [T.LPCSTR, 'lpszStructType'], [Pointer(null), 'pvStructInfo'], [T.PCRYPT_ALGORITHM_IDENTIFIER, 'pSignatureAlgorithm'], [Pointer(null), 'pvHashAuxInfo'], [Pointer(T.BYTE), 'pbEncoded'], [Pointer(T.DWORD), 'pcbEncoded']]),
    CryptVerifyCertificateSignature: Fn(T.BOOL, [[T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.DWORD, 'dwCertEncodingType'], [Pointer(T.BYTE), 'pbEncoded'], [T.DWORD, 'cbEncoded'], [T.PCERT_PUBLIC_KEY_INFO, 'pPublicKey']]),
    CryptVerifyCertificateSignatureEx: Fn(T.BOOL, [[T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.DWORD, 'dwCertEncodingType'], [T.DWORD, 'dwSubjectType'], [Pointer(null), 'pvSubject'], [T.DWORD, 'dwIssuerType'], [Pointer(null), 'pvIssuer'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']]),
    CertFindAttribute: Fn(T.PCRYPT_ATTRIBUTE, [[T.LPCSTR, 'pszObjId'], [T.DWORD, 'cAttr'], [Pointer(T.CRYPT_ATTRIBUTE), 'rgAttr']]),
    CertFindExtension: Fn(T.PCERT_EXTENSION, [[T.LPCSTR, 'pszObjId'], [T.DWORD, 'cExtensions'], [Pointer(T.CERT_EXTENSION), 'rgExtensions']]),
    CertFindRDNAttr: Fn(T.PCERT_RDN_ATTR, [[T.LPCSTR, 'pszObjId'], [T.PCERT_NAME_INFO, 'pName']]),
    CertFindSubjectInSortedCTL: Fn(T.BOOL, [[T.PCRYPT_DATA_BLOB, 'pSubjectIdentifier'], [T.PCCTL_CONTEXT, 'pCtlContext'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved'], [T.PCRYPT_DER_BLOB, 'pEncodedAttributes']]),
    CertIsRDNAttrsInCertificateName: Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.DWORD, 'dwFlags'], [T.PCERT_NAME_BLOB, 'pCertName'], [T.PCERT_RDN, 'pRDN']]),
    CertIsValidCRLForCertificate: Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCert'], [T.PCCRL_CONTEXT, 'pCrl'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']]),
    CertFindCertificateInCRL: Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCert'], [T.PCCRL_CONTEXT, 'pCrlContext'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved'], [Pointer(T.PCRL_ENTRY), 'ppCrlEntry']]),
    CertVerifyCRLRevocation: Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.PCERT_INFO, 'pCertId'], [T.DWORD, 'cCrlInfo'], [Pointer(T.PCRL_INFO), 'rgpCrlInfo']]),
    CertVerifySubjectCertificateContext: Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pSubject'], [T.PCCERT_CONTEXT, 'pIssuer'], [Pointer(T.DWORD), 'pdwFlags']]),
    CertVerifyCRLTimeValidity: Fn(T.LONG, [[T.LPFILETIME, 'pTimeToVerify'], [T.PCRL_INFO, 'pCrlInfo']]),
    CertVerifyTimeValidity: Fn(T.LONG, [[T.LPFILETIME, 'pTimeToVerify'], [T.PCERT_INFO, 'pCertInfo']]),
    CertVerifyValidityNesting: Fn(T.BOOL, [[T.PCERT_INFO, 'pSubjectInfo'], [T.PCERT_INFO, 'pIssuerInfo']]),
    CertVerifyCTLUsage: Fn(T.BOOL, [[T.DWORD, 'dwEncodingType'], [T.DWORD, 'dwSubjectType'], [Pointer(null), 'pvSubject'], [T.PCTL_USAGE, 'pSubjectUsage'], [T.DWORD, 'dwFlags'], [T.PCTL_VERIFY_USAGE_PARA, 'pVerifyUsagePara'], [T.PCTL_VERIFY_USAGE_STATUS, 'pVerifyUsageStatus']]),
    CertVerifyRevocation: Fn(T.BOOL, [[T.DWORD, 'dwEncodingType'], [T.DWORD, 'dwRevType'], [T.DWORD, 'cContext'], [Pointer(T.PVOID), 'rgpvContext'], [T.DWORD, 'dwFlags'], [T.PCERT_REVOCATION_PARA, 'pRevPara'], [T.PCERT_REVOCATION_STATUS, 'pRevStatus']]),
    CryptExportPublicKeyInfo: Fn(T.BOOL, [[T.HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, 'hCryptProv'], [T.DWORD, 'dwKeySpec'], [T.DWORD, 'dwCertEncodingType'], [T.PCERT_PUBLIC_KEY_INFO, 'pInfo'], [Pointer(T.DWORD), 'pcbInfo']]),
    CryptExportPublicKeyInfoEx: Fn(T.BOOL, [[T.HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, 'hCryptProv'], [T.DWORD, 'dwKeySpec'], [T.DWORD, 'dwCertEncodingType'], [T.LPSTR, 'pszPublicKeyObjId'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvAuxInfo'], [T.PCERT_PUBLIC_KEY_INFO, 'pInfo'], [Pointer(T.DWORD), 'pcbInfo']]),
    CryptImportPublicKeyInfo: Fn(T.BOOL, [[T.HCRYPTPROV, 'hCryptProv'], [T.DWORD, 'dwCertEncodingType'], [T.PCERT_PUBLIC_KEY_INFO, 'pInfo'], [Pointer(T.HCRYPTKEY), 'phKey']]),
    CryptImportPublicKeyInfoEx: Fn(T.BOOL, [[T.HCRYPTPROV, 'hCryptProv'], [T.DWORD, 'dwCertEncodingType'], [T.PCERT_PUBLIC_KEY_INFO, 'pInfo'], [T.ALG_ID, 'aiKeyAlg'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvAuxInfo'], [Pointer(T.HCRYPTKEY), 'phKey']]),
    CryptAcquireCertificatePrivateKey: Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCert'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved'], [Pointer(T.HCRYPTPROV_OR_NCRYPT_KEY_HANDLE), 'phCryptProv'], [Pointer(T.DWORD), 'pdwKeySpec'], [Pointer(T.BOOL), 'pfCallerFreeProv']]),
    CryptFindCertificateKeyProvInfo: Fn(T.BOOL, [[T.PCCERT_CONTEXT, 'pCert'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']]),
    CryptProtectData: Fn(T.BOOL, [[Pointer(T.DATA_BLOB), 'pDataIn'], [T.LPCWSTR, 'szDataDescr'], [Pointer(T.DATA_BLOB), 'pOptionalEntropy'], [T.PVOID, 'pvReserved'], [Pointer(T.CRYPTPROTECT_PROMPTSTRUCT), 'pPromptStruct'], [T.DWORD, 'dwFlags'], [Pointer(T.DATA_BLOB), 'pDataOut']]),
    CryptUnprotectData: Fn(T.BOOL, [[Pointer(T.DATA_BLOB), 'pDataIn'], [Pointer(T.LPWSTR), 'ppszDataDescr'], [Pointer(T.DATA_BLOB), 'pOptionalEntropy'], [T.PVOID, 'pvReserved'], [Pointer(T.CRYPTPROTECT_PROMPTSTRUCT), 'pPromptStruct'], [T.DWORD, 'dwFlags'], [Pointer(T.DATA_BLOB), 'pDataOut']]),
    CertGetNameStringA: Fn(T.DWORD, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwType'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvTypePara'], [T.LPSTR, 'pszNameString'], [T.DWORD, 'cchNameString']]),
    CertGetNameStringW: Fn(T.DWORD, [[T.PCCERT_CONTEXT, 'pCertContext'], [T.DWORD, 'dwType'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvTypePara'], [T.LPWSTR, 'pszNameString'], [T.DWORD, 'cchNameString']]),
    CertRDNValueToStrA: Fn(T.DWORD, [[T.DWORD, 'dwValueType'], [T.PCERT_RDN_VALUE_BLOB, 'pValue'], [T.LPSTR, 'psz'], [T.DWORD, 'csz']]),
    CertRDNValueToStrW: Fn(T.DWORD, [[T.DWORD, 'dwValueType'], [T.PCERT_RDN_VALUE_BLOB, 'pValue'], [T.LPWSTR, 'psz'], [T.DWORD, 'csz']]),
    CertNameToStrA: Fn(T.DWORD, [[T.DWORD, 'dwCertEncodingType'], [T.PCERT_NAME_BLOB, 'pName'], [T.DWORD, 'dwStrType'], [T.LPSTR, 'psz'], [T.DWORD, 'csz']]),
    CertNameToStrW: Fn(T.DWORD, [[T.DWORD, 'dwCertEncodingType'], [T.PCERT_NAME_BLOB, 'pName'], [T.DWORD, 'dwStrType'], [T.LPWSTR, 'psz'], [T.DWORD, 'csz']]),
    CertStrToNameA: Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.LPCSTR, 'pszX500'], [T.DWORD, 'dwStrType'], [Pointer(null), 'pvReserved'], [Pointer(T.BYTE), 'pbEncoded'], [Pointer(T.DWORD), 'pcbEncoded'], [Pointer(T.LPCSTR), 'ppszError']]),
    CertStrToNameW: Fn(T.BOOL, [[T.DWORD, 'dwCertEncodingType'], [T.LPCWSTR, 'pszX500'], [T.DWORD, 'dwStrType'], [Pointer(null), 'pvReserved'], [Pointer(T.BYTE), 'pbEncoded'], [Pointer(T.DWORD), 'pcbEncoded'], [Pointer(T.LPCWSTR), 'ppszError']]),
    CryptMsgCalculateEncodedLength: Fn(T.DWORD, [[T.DWORD, 'dwMsgEncodingType'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwMsgType'], [Pointer(null), 'pvMsgEncodeInfo'], [T.LPSTR, 'pszInnerContentObjID'], [T.DWORD, 'cbData']]),
    CryptMsgClose: Fn(T.BOOL, [[T.HCRYPTMSG, 'hCryptMsg']]),
    CryptMsgControl: Fn(T.BOOL, [[T.HCRYPTMSG, 'hCryptMsg'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwCtrlType'], [Pointer(null), 'pvCtrlPara']]),
    CryptMsgCountersign: Fn(T.BOOL, [[T.HCRYPTMSG, 'hCryptMsg'], [T.DWORD, 'dwIndex'], [T.DWORD, 'dwCountersigners'], [T.PCMSG_SIGNER_ENCODE_INFO, 'rgCountersigners']]),
    CryptMsgCountersignEncoded: Fn(T.BOOL, [[T.DWORD, 'dwEncodingType'], [T.PBYTE, 'pbSignerInfo'], [T.DWORD, 'cbSignerInfo'], [T.DWORD, 'cCountersigners'], [T.PCMSG_SIGNER_ENCODE_INFO, 'rgCountersigners'], [T.PBYTE, 'pbCountersignature'], [T.PDWORD, 'pcbCountersignature']]),
    CryptMsgDuplicate: Fn(T.HCRYPTMSG, [[T.HCRYPTMSG, 'hCryptMsg']]),
    CryptMsgEncodeAndSignCTL: Fn(T.BOOL, [[T.DWORD, 'dwMsgEncodingType'], [T.PCTL_INFO, 'pCtlInfo'], [T.PCMSG_SIGNED_ENCODE_INFO, 'pSignInfo'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbEncoded'], [Pointer(T.DWORD), 'pcbEncoded']]),
    CryptMsgGetAndVerifySigner: Fn(T.BOOL, [[T.HCRYPTMSG, 'hCryptMsg'], [T.DWORD, 'cSignerStore'], [Pointer(T.HCERTSTORE), 'rghSignerStore'], [T.DWORD, 'dwFlags'], [Pointer(T.PCCERT_CONTEXT), 'ppSigner'], [Pointer(T.DWORD), 'pdwSignerIndex']]),
    CryptMsgGetParam: Fn(T.BOOL, [[T.HCRYPTMSG, 'hCryptMsg'], [T.DWORD, 'dwParamType'], [T.DWORD, 'dwIndex'], [Pointer(null), 'pvData'], [Pointer(T.DWORD), 'pcbData']]),
    CryptMsgOpenToDecode: Fn(T.HCRYPTMSG, [[T.DWORD, 'dwMsgEncodingType'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwMsgType'], [T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.PCERT_INFO, 'pRecipientInfo'], [T.PCMSG_STREAM_INFO, 'pStreamInfo']]),
    CryptMsgOpenToEncode: Fn(T.HCRYPTMSG, [[T.DWORD, 'dwMsgEncodingType'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwMsgType'], [Pointer(null), 'pvMsgEncodeInfo'], [T.LPSTR, 'pszInnerContentObjID'], [T.PCMSG_STREAM_INFO, 'pStreamInfo']]),
    CryptMsgSignCTL: Fn(T.BOOL, [[T.DWORD, 'dwMsgEncodingType'], [Pointer(T.BYTE), 'pbCtlContent'], [T.DWORD, 'cbCtlContent'], [T.PCMSG_SIGNED_ENCODE_INFO, 'pSignInfo'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbEncoded'], [Pointer(T.DWORD), 'pcbEncoded']]),
    CryptMsgUpdate: Fn(T.BOOL, [[T.HCRYPTMSG, 'hCryptMsg'], [Pointer(T.BYTE), 'pbData'], [T.DWORD, 'cbData'], [T.BOOL, 'fFinal']]),
    CryptMsgVerifyCountersignatureEncoded: Fn(T.BOOL, [[T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.DWORD, 'dwEncodingType'], [T.PBYTE, 'pbSignerInfo'], [T.DWORD, 'cbSignerInfo'], [T.PBYTE, 'pbSignerInfoCountersignature'], [T.DWORD, 'cbSignerInfoCountersignature'], [T.PCERT_INFO, 'pciCountersigner']]),
    CryptMsgVerifyCountersignatureEncodedEx: Fn(T.BOOL, [[T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.DWORD, 'dwEncodingType'], [T.PBYTE, 'pbSignerInfo'], [T.DWORD, 'cbSignerInfo'], [T.PBYTE, 'pbSignerInfoCountersignature'], [T.DWORD, 'cbSignerInfoCountersignature'], [T.DWORD, 'dwSignerType'], [Pointer(null), 'pvSigner'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']]),
    CryptSignMessage: Fn(T.BOOL, [[T.PCRYPT_SIGN_MESSAGE_PARA, 'pSignPara'], [T.BOOL, 'fDetachedSignature'], [T.DWORD, 'cToBeSigned'], [Pointer(Pointer(T.BYTE)), 'rgpbToBeSigned'], [Pointer(T.DWORD), 'rgcbToBeSigned'], [Pointer(T.BYTE), 'pbSignedBlob'], [Pointer(T.DWORD), 'pcbSignedBlob']]),
    CryptSignMessageWithKey: Fn(T.BOOL, [[T.PCRYPT_KEY_SIGN_MESSAGE_PARA, 'pSignPara'], [Pointer(T.BYTE), 'pbToBeSigned'], [T.DWORD, 'cbToBeSigned'], [Pointer(T.BYTE), 'pbSignedBlob'], [Pointer(T.DWORD), 'pcbSignedBlob']]),
    CryptVerifyMessageSignature: Fn(T.BOOL, [[T.PCRYPT_VERIFY_MESSAGE_PARA, 'pVerifyPara'], [T.DWORD, 'dwSignerIndex'], [Pointer(T.BYTE), 'pbSignedBlob'], [T.DWORD, 'cbSignedBlob'], [Pointer(T.BYTE), 'pbDecoded'], [Pointer(T.DWORD), 'pcbDecoded'], [Pointer(T.PCCERT_CONTEXT), 'ppSignerCert']]),
    CryptVerifyMessageSignatureWithKey: Fn(T.BOOL, [[T.PCRYPT_KEY_VERIFY_MESSAGE_PARA, 'pVerifyPara'], [T.PCERT_PUBLIC_KEY_INFO, 'pPublicKeyInfo'], [Pointer(T.BYTE), 'pbSignedBlob'], [T.DWORD, 'cbSignedBlob'], [Pointer(T.BYTE), 'pbDecoded'], [Pointer(T.DWORD), 'pcbDecoded']]),
    CryptVerifyDetachedMessageSignature: Fn(T.BOOL, [[T.PCRYPT_VERIFY_MESSAGE_PARA, 'pVerifyPara'], [T.DWORD, 'dwSignerIndex'], [Pointer(T.BYTE), 'pbDetachedSignBlob'], [T.DWORD, 'cbDetachedSignBlob'], [T.DWORD, 'cToBeSigned'], [Pointer(Pointer(T.BYTE)), 'rgpbToBeSigned'], [Pointer(T.DWORD), 'rgcbToBeSigned'], [Pointer(T.PCCERT_CONTEXT), 'ppSignerCert']]),
    CryptGetMessageSignerCount: Fn(T.LONG, [[T.DWORD, 'dwMsgEncodingType'], [Pointer(T.BYTE), 'pbSignedBlob'], [T.DWORD, 'cbSignedBlob']]),
    CryptEncryptMessage: Fn(T.BOOL, [[T.PCRYPT_ENCRYPT_MESSAGE_PARA, 'pEncryptPara'], [T.DWORD, 'cRecipientCert'], [Pointer(T.PCCERT_CONTEXT), 'rgpRecipientCert'], [Pointer(T.BYTE), 'pbToBeEncrypted'], [T.DWORD, 'cbToBeEncrypted'], [Pointer(T.BYTE), 'pbEncryptedBlob'], [Pointer(T.DWORD), 'pcbEncryptedBlob']]),
    CryptDecryptMessage: Fn(T.BOOL, [[T.PCRYPT_DECRYPT_MESSAGE_PARA, 'pDecryptPara'], [Pointer(T.BYTE), 'pbEncryptedBlob'], [T.DWORD, 'cbEncryptedBlob'], [Pointer(T.BYTE), 'pbDecrypted'], [Pointer(T.DWORD), 'pcbDecrypted'], [Pointer(T.PCCERT_CONTEXT), 'ppXchgCert']]),
    CryptSignAndEncryptMessage: Fn(T.BOOL, [[T.PCRYPT_SIGN_MESSAGE_PARA, 'pSignPara'], [T.PCRYPT_ENCRYPT_MESSAGE_PARA, 'pEncryptPara'], [T.DWORD, 'cRecipientCert'], [Pointer(T.PCCERT_CONTEXT), 'rgpRecipientCert'], [Pointer(T.BYTE), 'pbToBeSignedAndEncrypted'], [T.DWORD, 'cbToBeSignedAndEncrypted'], [Pointer(T.BYTE), 'pbSignedAndEncryptedBlob'], [Pointer(T.DWORD), 'pcbSignedAndEncryptedBlob']]),
    CryptDecryptAndVerifyMessageSignature: Fn(T.BOOL, [[T.PCRYPT_DECRYPT_MESSAGE_PARA, 'pDecryptPara'], [T.PCRYPT_VERIFY_MESSAGE_PARA, 'pVerifyPara'], [T.DWORD, 'dwSignerIndex'], [Pointer(T.BYTE), 'pbEncryptedBlob'], [T.DWORD, 'cbEncryptedBlob'], [Pointer(T.BYTE), 'pbDecrypted'], [Pointer(T.DWORD), 'pcbDecrypted'], [Pointer(T.PCCERT_CONTEXT), 'ppXchgCert'], [Pointer(T.PCCERT_CONTEXT), 'ppSignerCert']]),
    CryptGetMessageCertificates: Fn(T.HCERTSTORE, [[T.DWORD, 'dwMsgAndCertEncodingType'], [T.HCRYPTPROV_LEGACY, 'hCryptProv'], [T.DWORD, 'dwFlags'], [Pointer(T.BYTE), 'pbSignedBlob'], [T.DWORD, 'cbSignedBlob']]),
    CryptDecodeMessage: Fn(T.BOOL, [[T.DWORD, 'dwMsgTypeFlags'], [T.PCRYPT_DECRYPT_MESSAGE_PARA, 'pDecryptPara'], [T.PCRYPT_VERIFY_MESSAGE_PARA, 'pVerifyPara'], [T.DWORD, 'dwSignerIndex'], [Pointer(T.BYTE), 'pbEncodedBlob'], [T.DWORD, 'cbEncodedBlob'], [T.DWORD, 'dwPrevInnerContentType'], [Pointer(T.DWORD), 'pdwMsgType'], [Pointer(T.DWORD), 'pdwInnerContentType'], [Pointer(T.BYTE), 'pbDecoded'], [Pointer(T.DWORD), 'pcbDecoded'], [Pointer(T.PCCERT_CONTEXT), 'ppXchgCert'], [Pointer(T.PCCERT_CONTEXT), 'ppSignerCert']]),
    CryptHashMessage: Fn(T.BOOL, [[T.PCRYPT_HASH_MESSAGE_PARA, 'pHashPara'], [T.BOOL, 'fDetachedHash'], [T.DWORD, 'cToBeHashed'], [Pointer(Pointer(T.BYTE)), 'rgpbToBeHashed'], [Pointer(T.DWORD), 'rgcbToBeHashed'], [Pointer(T.BYTE), 'pbHashedBlob'], [Pointer(T.DWORD), 'pcbHashedBlob'], [Pointer(T.BYTE), 'pbComputedHash'], [Pointer(T.DWORD), 'pcbComputedHash']]),
    CryptVerifyMessageHash: Fn(T.BOOL, [[T.PCRYPT_HASH_MESSAGE_PARA, 'pHashPara'], [Pointer(T.BYTE), 'pbHashedBlob'], [T.DWORD, 'cbHashedBlob'], [Pointer(T.BYTE), 'pbToBeHashed'], [Pointer(T.DWORD), 'pcbToBeHashed'], [Pointer(T.BYTE), 'pbComputedHash'], [Pointer(T.DWORD), 'pcbComputedHash']]),
    CryptVerifyDetachedMessageHash: Fn(T.BOOL, [[T.PCRYPT_HASH_MESSAGE_PARA, 'pHashPara'], [Pointer(T.BYTE), 'pbDetachedHashBlob'], [T.DWORD, 'cbDetachedHashBlob'], [T.DWORD, 'cToBeHashed'], [Pointer(Pointer(T.BYTE)), 'rgpbToBeHashed'], [Pointer(T.DWORD), 'rgcbToBeHashed'], [Pointer(T.BYTE), 'pbComputedHash'], [Pointer(T.DWORD), 'pcbComputedHash']]),
    PFXImportCertStore: Fn(T.HCERTSTORE, [[Pointer(T.CRYPT_DATA_BLOB), 'pPFX'], [T.LPCWSTR, 'szPassword'], [T.DWORD, 'dwFlags']]),
    PFXIsPFXBlob: Fn(T.BOOL, [[Pointer(T.CRYPT_DATA_BLOB), 'pPFX']]),
    PFXVerifyPassword: Fn(T.BOOL, [[Pointer(T.CRYPT_DATA_BLOB), 'pPFX'], [T.LPCWSTR, 'szPassword'], [T.DWORD, 'dwFlags']]),
    PFXExportCertStoreEx: Fn(T.BOOL, [[T.HCERTSTORE, 'hStore'], [Pointer(T.CRYPT_DATA_BLOB), 'pPFX'], [T.LPCWSTR, 'szPassword'], [Pointer(null), 'pvReserved'], [T.DWORD, 'dwFlags']]),
    PFXExportCertStore: Fn(T.BOOL, [[T.HCERTSTORE, 'hStore'], [Pointer(T.CRYPT_DATA_BLOB), 'pPFX'], [T.LPCWSTR, 'szPassword'], [T.DWORD, 'dwFlags']]),
    CryptCancelAsyncRetrieval: Fn(T.BOOL, [[T.HCRYPTASYNC, 'hAsyncRetrieval']]),
    CryptGetObjectUrl: Fn(T.BOOL, [[T.LPCSTR, 'pszUrlOid'], [T.LPVOID, 'pvPara'], [T.DWORD, 'dwFlags'], [T.PCRYPT_URL_ARRAY, 'pUrlArray'], [Pointer(T.DWORD), 'pcbUrlArray'], [T.PCRYPT_URL_INFO, 'pUrlInfo'], [Pointer(T.DWORD), 'pcbUrlInfo'], [T.LPVOID, 'pvReserved']]),
    CryptGetTimeValidObject: Fn(T.BOOL, [[T.LPCSTR, 'pszTimeValidOid'], [Pointer(null), 'pvPara'], [T.PCCERT_CONTEXT, 'pIssuer'], [T.LPFILETIME, 'pftValidFor'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwTimeout'], [Pointer(Pointer(null)), 'ppvObject'], [T.PCRYPT_CREDENTIALS, 'pCredentials'], [Pointer(null), 'pvReserved']]),
    CryptFlushTimeValidObject: Fn(T.BOOL, [[T.LPCSTR, 'pszFlushTimeValidOid'], [Pointer(null), 'pvPara'], [T.PCCERT_CONTEXT, 'pIssuer'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']]),
    CryptInstallCancelRetrieval: Fn(T.BOOL, [[T.PFN_CRYPT_CANCEL_RETRIEVAL, 'pfnCancel'], [Pointer(null), 'pvArg'], [T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']]),
    CryptUninstallCancelRetrieval: Fn(T.BOOL, [[T.DWORD, 'dwFlags'], [Pointer(null), 'pvReserved']]),
    CryptRetrieveObjectByUrlA: Fn(T.BOOL, [[T.LPCSTR, 'pszURL'], [T.LPCSTR, 'pszObjectOid'], [T.DWORD, 'dwRetrievalFlags'], [T.DWORD, 'dwTimeout'], [Pointer(T.LPVOID), 'ppvObject'], [T.HCRYPTASYNC, 'hAsyncRetrieve'], [T.PCRYPT_CREDENTIALS, 'pCredentials'], [T.LPVOID, 'pvVerify'], [T.PCRYPT_RETRIEVE_AUX_INFO, 'pAuxInfo']]),
    CryptRetrieveObjectByUrlW: Fn(T.BOOL, [[T.LPCWSTR, 'pszURL'], [T.LPCSTR, 'pszObjectOid'], [T.DWORD, 'dwRetrievalFlags'], [T.DWORD, 'dwTimeout'], [Pointer(T.LPVOID), 'ppvObject'], [T.HCRYPTASYNC, 'hAsyncRetrieve'], [T.PCRYPT_CREDENTIALS, 'pCredentials'], [T.LPVOID, 'pvVerify'], [T.PCRYPT_RETRIEVE_AUX_INFO, 'pAuxInfo']]),
    DeviceCapabilitiesA: Fn(T.INT, [[T.LPCSTR, 'pDevice'], [T.LPCSTR, 'pPort'], [T.WORD, 'fwCapability'], [T.LPSTR, 'pOutput'], [T.LPDEVMODEA, 'pDevMode']]),
    DeviceCapabilitiesW: Fn(T.INT, [[T.LPCWSTR, 'pDevice'], [T.LPCWSTR, 'pPort'], [T.WORD, 'fwCapability'], [T.LPWSTR, 'pOutput'], [Pointer(T.DEVMODEW), 'pDevMode']]),
    DocumentPropertiesA: Fn(T.LONG, [[T.HWND, 'hWnd'], [T.HANDLE, 'hPrinter'], [T.LPSTR, 'pDeviceName'], [T.LPDEVMODEA, 'pDevModeOutput'], [T.LPDEVMODEA, 'pDevModeInput'], [T.DWORD, 'fMode']]),
    DocumentPropertiesW: Fn(T.LONG, [[T.HWND, 'hWnd'], [T.HANDLE, 'hPrinter'], [T.LPWSTR, 'pDeviceName'], [T.LPDEVMODEW, 'pDevModeOutput'], [T.LPDEVMODEW, 'pDevModeInput'], [T.DWORD, 'fMode']]),
    OpenPrinterA: Fn(T.BOOL, [[T.LPSTR, 'lpPrinterName'], [Pointer(T.HANDLE), 'phPrinter'], [T.LPPRINTER_DEFAULTSA, 'pDefault']]),
    OpenPrinterW: Fn(T.BOOL, [[T.LPWSTR, 'lpPrinterName'], [Pointer(T.HANDLE), 'phPrinter'], [T.LPPRINTER_DEFAULTSW, 'pDefault']]),
    ResetPrinterA: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPPRINTER_DEFAULTSA, 'pDefault']]),
    ResetPrinterW: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPPRINTER_DEFAULTSW, 'pDefault']]),
    ClosePrinter: Fn(T.BOOL, [[T.HANDLE, 'phPrinter']]),
    EnumJobsA: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'FirstJob'], [T.DWORD, 'NoJobs'], [T.DWORD, 'Level'], [T.LPBYTE, 'pJob'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcReturned']]),
    EnumJobsW: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'FirstJob'], [T.DWORD, 'NoJobs'], [T.DWORD, 'Level'], [T.LPBYTE, 'pJob'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcReturned']]),
    EnumPrintersA: Fn(T.BOOL, [[T.DWORD, 'dwType'], [T.LPSTR, 'lpszName'], [T.DWORD, 'dwLevel'], [T.LPBYTE, 'lpbPrinters'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'lpdwNeeded'], [T.LPDWORD, 'lpdwReturned']]),
    EnumPrintersW: Fn(T.BOOL, [[T.DWORD, 'dwType'], [T.LPWSTR, 'lpszName'], [T.DWORD, 'dwLevel'], [T.LPBYTE, 'lpbPrinters'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'lpdwNeeded'], [T.LPDWORD, 'lpdwReturned']]),
    PrinterProperties: Fn(T.BOOL, [[T.HWND, 'hWnd'], [T.HANDLE, 'hPrinter']]),
    GetPrinterDriverDirectoryA: Fn(T.BOOL, [[T.LPSTR], [T.LPSTR], [T.DWORD], [T.LPBYTE], [T.DWORD], [T.LPDWORD]]),
    GetPrinterDriverDirectoryW: Fn(T.BOOL, [[T.LPWSTR], [T.LPWSTR], [T.DWORD], [T.LPBYTE], [T.DWORD], [T.LPDWORD]]),
    GetPrinterDriverA: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPSTR, 'pEnvironment'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDriverInfo'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']]),
    GetPrinterDriverW: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPWSTR, 'pEnvironment'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDriverInfo'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']]),
    SetJobA: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'JobID'], [T.DWORD, 'Level'], [T.LPBYTE, 'pJob'], [T.DWORD, 'Command']]),
    SetJobW: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'JobID'], [T.DWORD, 'Level'], [T.LPBYTE, 'pJob'], [T.DWORD, 'Command']]),
    GetJobA: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'JobID'], [T.DWORD, 'Level'], [T.LPBYTE, 'pJob'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']]),
    GetJobW: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'JobID'], [T.DWORD, 'Level'], [T.LPBYTE, 'pJob'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']]),
    AddPrinterA: Fn(T.HANDLE, [[T.LPSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrinter']]),
    AddPrinterW: Fn(T.HANDLE, [[T.LPWSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrinter']]),
    DeletePrinter: Fn(T.BOOL, [[T.HANDLE, 'hPrinter']]),
    SetPrinterA: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrinter'], [T.DWORD, 'Command']]),
    SetPrinterW: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrinter'], [T.DWORD, 'Command']]),
    GetPrinterA: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrinter'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']]),
    GetPrinterW: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrinter'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']]),
    AddPrinterDriverA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDriverInfo']]),
    AddPrinterDriverW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDriverInfo']]),
    AddPrinterDriverExA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDriverInfo'], [T.DWORD, 'dwFileCopyFlags']]),
    AddPrinterDriverExW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDriverInfo'], [T.DWORD, 'dwFileCopyFlags']]),
    EnumPrinterDriversA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDriverInfo'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcbReturned']]),
    EnumPrinterDriversW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDriverInfo'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcbReturned']]),
    GetDefaultPrinterA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPDWORD, 'pcbNameSize']]),
    GetDefaultPrinterW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPDWORD, 'pcbNameSize']]),
    SetDefaultPrinterA: Fn(T.BOOL, [[T.LPCSTR]]),
    SetDefaultPrinterW: Fn(T.BOOL, [[T.LPCWSTR]]),
    DeletePrinterDriverA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.LPSTR, 'pDriverName']]),
    DeletePrinterDriverW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.LPWSTR, 'pDriverName']]),
    DeletePrinterDriverExA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.LPSTR, 'pDriverName'], [T.DWORD, 'dwDeleteFlag'], [T.DWORD, 'dwVersionFlag']]),
    DeletePrinterDriverExW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.LPWSTR, 'pDriverName'], [T.DWORD, 'dwDeleteFlag'], [T.DWORD, 'dwVersionFlag']]),
    AddPrintProcessorA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.LPSTR, 'pPathName'], [T.LPSTR, 'pPrintProcessorName']]),
    AddPrintProcessorW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.LPWSTR, 'pPathName'], [T.LPWSTR, 'pPrintProcessorName']]),
    EnumPrintProcessorsA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrintProcessorInfo'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcbReturned']]),
    EnumPrintProcessorsW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrintProcessorInfo'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcbReturned']]),
    GetPrintProcessorDirectoryA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrintProcessorInfo'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']]),
    GetPrintProcessorDirectoryW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPrintProcessorInfo'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']]),
    EnumPrintProcessorDatatypesA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pPrintProcessorName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDatatypes'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcbReturned']]),
    EnumPrintProcessorDatatypesW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pPrintProcessorName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDatatypes'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcbReturned']]),
    DeletePrintProcessorA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.LPSTR, 'pPrintProcessorName']]),
    DeletePrintProcessorW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.LPWSTR, 'pPrintProcessorName']]),
    StartDocPrinterA: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDocInfo']]),
    StartDocPrinterW: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pDocInfo']]),
    StartPagePrinter: Fn(T.BOOL, [[T.HANDLE, 'hPrinter']]),
    WritePrinter: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPVOID, 'pBuf'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcWritten']]),
    EndPagePrinter: Fn(T.BOOL, [[T.HANDLE, 'hPrinter']]),
    AbortPrinter: Fn(T.BOOL, [[T.HANDLE, 'hPrinter']]),
    ReadPrinter: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPVOID, 'pBuf'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pNoBytesRead']]),
    EndDocPrinter: Fn(T.BOOL, [[T.HANDLE, 'hPrinter']]),
    AddJobA: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pData'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']]),
    AddJobW: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pData'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']]),
    ScheduleJob: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'JobID']]),
    AdvancedDocumentPropertiesA: Fn(T.LONG, [[T.HWND, 'hWnd'], [T.HANDLE, 'hPrinter'], [T.LPSTR, 'pDeviceName'], [T.PDEVMODEA, 'pDevModeOutput'], [T.PDEVMODEA, 'pDevModeInput']]),
    AdvancedDocumentPropertiesW: Fn(T.LONG, [[T.HWND, 'hWnd'], [T.HANDLE, 'hPrinter'], [T.LPWSTR, 'pDeviceName'], [T.PDEVMODEW, 'pDevModeOutput'], [T.PDEVMODEW, 'pDevModeInput']]),
    GetPrinterDataA: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPSTR, 'pValueName'], [T.LPDWORD, 'pType'], [T.LPBYTE, 'pData'], [T.DWORD, 'nSize'], [T.LPDWORD, 'pcbNeeded']]),
    GetPrinterDataW: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPWSTR, 'pValueName'], [T.LPDWORD, 'pType'], [T.LPBYTE, 'pData'], [T.DWORD, 'nSize'], [T.LPDWORD, 'pcbNeeded']]),
    GetPrinterDataExA: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPCSTR, 'pKeyName'], [T.LPCSTR, 'pValueName'], [T.LPDWORD, 'pType'], [T.LPBYTE, 'pData'], [T.DWORD, 'nSize'], [T.LPDWORD, 'pcbNeeded']]),
    GetPrinterDataExW: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPCWSTR, 'pKeyName'], [T.LPCWSTR, 'pValueName'], [T.LPDWORD, 'pType'], [T.LPBYTE, 'pData'], [T.DWORD, 'nSize'], [T.LPDWORD, 'pcbNeeded']]),
    DeletePrinterDataExA: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPCSTR, 'pKeyName'], [T.LPCSTR, 'pValueName']]),
    DeletePrinterDataExW: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPCWSTR, 'pKeyName'], [T.LPCWSTR, 'pValueName']]),
    SetPrinterDataA: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPSTR, 'pValueName'], [T.DWORD, 'Type'], [T.LPBYTE, 'pData'], [T.DWORD, 'cbData']]),
    SetPrinterDataW: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPWSTR, 'pValueName'], [T.DWORD, 'Type'], [T.LPBYTE, 'pData'], [T.DWORD, 'cbData']]),
    SetPrinterDataExA: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPCSTR, 'pKeyName'], [T.LPCSTR, 'pValueName'], [T.DWORD, 'Type'], [T.LPBYTE, 'pData'], [T.DWORD, 'cbData']]),
    SetPrinterDataExW: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPCWSTR, 'pKeyName'], [T.LPCWSTR, 'pValueName'], [T.DWORD, 'Type'], [T.LPBYTE, 'pData'], [T.DWORD, 'cbData']]),
    WaitForPrinterChange: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Flags']]),
    FindFirstPrinterChangeNotification: Fn(T.HANDLE, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'fdwFlags'], [T.DWORD, 'fdwOptions'], [T.LPVOID, 'pPrinterNotifyOptions']]),
    FindNextPrinterChangeNotification: Fn(T.BOOL, [[T.HANDLE, 'hChange'], [T.PDWORD, 'pdwChange'], [T.LPVOID, 'pvReserved'], [Pointer(T.LPVOID), 'ppPrinterNotifyInfo']]),
    FreePrinterNotifyInfo: Fn(T.BOOL, [[T.PPRINTER_NOTIFY_INFO, 'pPrinterNotifyInfo']]),
    FindClosePrinterChangeNotification: Fn(T.BOOL, [[T.HANDLE, 'hChange']]),
    PrinterMessageBoxA: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Error'], [T.HWND, 'hWnd'], [T.LPSTR, 'pText'], [T.LPSTR, 'pCaption'], [T.DWORD, 'dwType']]),
    PrinterMessageBoxW: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Error'], [T.HWND, 'hWnd'], [T.LPWSTR, 'pText'], [T.LPWSTR, 'pCaption'], [T.DWORD, 'dwType']]),
    AddFormA: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pForm']]),
    AddFormW: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pForm']]),
    DeleteFormA: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPSTR, 'pFormName']]),
    DeleteFormW: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPWSTR, 'pFormName']]),
    GetFormA: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPSTR, 'pFormName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pForm'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']]),
    GetFormW: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPWSTR, 'pFormName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pForm'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded']]),
    SetFormA: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPSTR, 'pFormName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pForm']]),
    SetFormW: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.LPWSTR, 'pFormName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pForm']]),
    EnumFormsA: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pForm'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcReturned']]),
    EnumFormsW: Fn(T.BOOL, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'Level'], [T.LPBYTE, 'pForm'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcReturned']]),
    EnumMonitorsA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pMonitors'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcReturned']]),
    EnumMonitorsW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pMonitors'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcReturned']]),
    EnumPrinterDataA: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'dwIndex'], [T.LPSTR, 'pValueName'], [T.DWORD, 'cbValueName'], [T.LPDWORD, 'pcbValueName'], [T.LPDWORD, 'pType'], [T.LPBYTE, 'pData'], [T.DWORD, 'cbData'], [T.LPDWORD, 'pcbData']]),
    EnumPrinterDataW: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.DWORD, 'dwIndex'], [T.LPWSTR, 'pValueName'], [T.DWORD, 'cbValueName'], [T.LPDWORD, 'pcbValueName'], [T.LPDWORD, 'pType'], [T.LPBYTE, 'pData'], [T.DWORD, 'cbData'], [T.LPDWORD, 'pcbData']]),
    AddMonitorA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pMonitors']]),
    AddMonitorW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pMonitors']]),
    DeleteMonitorA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.LPSTR, 'pMonitorName']]),
    DeleteMonitorW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.LPWSTR, 'pMonitorName']]),
    EnumPortsA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPorts'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcReturned']]),
    EnumPortsW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pPorts'], [T.DWORD, 'cbBuf'], [T.LPDWORD, 'pcbNeeded'], [T.LPDWORD, 'pcReturned']]),
    AddPortA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.HWND, 'hWnd'], [T.LPSTR, 'pMonitorName']]),
    AddPortW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.HWND, 'hWnd'], [T.LPWSTR, 'pMonitorName']]),
    AddPortExA: Fn(T.BOOL, [[T.LPSTR], [T.DWORD], [T.LPBYTE], [T.LPSTR]]),
    AddPortExW: Fn(T.BOOL, [[T.LPWSTR], [T.DWORD], [T.LPBYTE], [T.LPWSTR]]),
    ConfigurePortA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.HWND, 'hWnd'], [T.LPSTR, 'pPortName']]),
    ConfigurePortW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.HWND, 'hWnd'], [T.LPWSTR, 'pPortName']]),
    DeletePortA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.HWND, 'hWnd'], [T.LPSTR, 'pPortName']]),
    DeletePortW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.HWND, 'hWnd'], [T.LPWSTR, 'pPortName']]),
    SetPortA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pPortName'], [T.DWORD, 'dwLevel'], [T.LPBYTE, 'pPortInfo']]),
    SetPortW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pPortName'], [T.DWORD, 'dwLevel'], [T.LPBYTE, 'pPortInfo']]),
    AddPrinterConnectionA: Fn(T.BOOL, [[T.LPSTR, 'pName']]),
    AddPrinterConnectionW: Fn(T.BOOL, [[T.LPWSTR, 'pName']]),
    DeletePrinterConnectionA: Fn(T.BOOL, [[T.LPSTR, 'pName']]),
    DeletePrinterConnectionW: Fn(T.BOOL, [[T.LPWSTR, 'pName']]),
    ConnectToPrinterDlg: Fn(T.HANDLE, [[T.HWND, 'hwnd'], [T.DWORD, 'Flags']]),
    AddPrintProvidorA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pProvidorInfo']]),
    AddPrintProvidorW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.DWORD, 'Level'], [T.LPBYTE, 'pProvidorInfo']]),
    DeletePrintProvidorA: Fn(T.BOOL, [[T.LPSTR, 'pName'], [T.LPSTR, 'pEnvironment'], [T.LPSTR, 'pPrintProvidorName']]),
    DeletePrintProvidorW: Fn(T.BOOL, [[T.LPWSTR, 'pName'], [T.LPWSTR, 'pEnvironment'], [T.LPWSTR, 'pPrintProvidorName']]),
    EnumPrinterDataExA: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPCSTR, 'pKeyName'], [T.LPBYTE, 'pEnumValues'], [T.DWORD, 'cbEnumValues'], [T.LPDWORD, 'pcbEnumValues'], [T.LPDWORD, 'pnEnumValues']]),
    EnumPrinterDataExW: Fn(T.DWORD, [[T.HANDLE, 'hPrinter'], [T.LPCWSTR, 'pKeyName'], [T.LPBYTE, 'pEnumValues'], [T.DWORD, 'cbEnumValues'], [T.LPDWORD, 'pcbEnumValues'], [T.LPDWORD, 'pnEnumValues']]),
    ExtDeviceMode: Fn(T.LONG, [[T.HWND, 'hWnd'], [T.HANDLE, 'hInst'], [T.LPDEVMODEA, 'pDevModeOutput'], [T.LPSTR, 'pDeviceName'], [T.LPSTR, 'pPort'], [T.LPDEVMODEA, 'pDevModeInput'], [T.LPSTR, 'pProfile'], [T.DWORD, 'fMode']]),
    StartDocDlgA: Fn(T.LPSTR, [[T.HANDLE, 'hPrinter'], [Pointer(T.DOCINFOA), 'doc']]),
    StartDocDlgW: Fn(T.LPWSTR, [[T.HANDLE, 'hPrinter'], [Pointer(T.DOCINFOW), 'doc']]),
    XcvDataW: Fn(T.BOOL, [[T.HANDLE, 'hXcv'], [T.LPCWSTR, 'pszDataName'], [T.PBYTE, 'pInputData'], [T.DWORD, 'cbInputData'], [T.PBYTE, 'pOutputData'], [T.DWORD, 'cbOutputData'], [T.PDWORD, 'pcbOutputNeeded'], [T.PDWORD, 'pdwStatus']]),
    MIDL_user_allocate: Fn(Pointer(null), [[T.SIZE_T]]),
    MIDL_user_free: Fn(null, [[Pointer(null)]]),
    NDRCContextBinding: Fn(T.RPC_BINDING_HANDLE, [[T.NDR_CCONTEXT, 'CContext']]),
    NDRCContextMarshall: Fn(null, [[T.NDR_CCONTEXT, 'CContext'], [Pointer(null), 'pBuff']]),
    NDRCContextUnmarshall: Fn(null, [[Pointer(T.NDR_CCONTEXT), 'pCContext'], [T.RPC_BINDING_HANDLE, 'hBinding'], [Pointer(null), 'pBuff'], [T.ULONG, 'DataRepresentation']]),
    NDRSContextMarshall: Fn(null, [[T.NDR_SCONTEXT, 'CContext'], [Pointer(null), 'pBuff'], [T.NDR_RUNDOWN, 'userRunDownIn']]),
    NDRSContextUnmarshall: Fn(T.NDR_SCONTEXT, [[Pointer(null), 'pBuff'], [T.ULONG, 'DataRepresentation']]),
    NDRSContextMarshallEx: Fn(null, [[T.RPC_BINDING_HANDLE, 'BindingHandle'], [T.NDR_SCONTEXT, 'CContext'], [Pointer(null), 'pBuff'], [T.NDR_RUNDOWN, 'userRunDownIn']]),
    NDRSContextMarshall2: Fn(null, [[T.RPC_BINDING_HANDLE, 'BindingHandle'], [T.NDR_SCONTEXT, 'CContext'], [Pointer(null), 'pBuff'], [T.NDR_RUNDOWN, 'userRunDownIn'], [Pointer(null), 'CtxGuard'], [T.ULONG, 'Flags']]),
    NDRSContextUnmarshallEx: Fn(T.NDR_SCONTEXT, [[T.RPC_BINDING_HANDLE, 'BindingHandle'], [Pointer(null), 'pBuff'], [T.ULONG, 'DataRepresentation']]),
    NDRSContextUnmarshall2: Fn(T.NDR_SCONTEXT, [[T.RPC_BINDING_HANDLE, 'BindingHandle'], [Pointer(null), 'pBuff'], [T.ULONG, 'DataRepresentation'], [Pointer(null), 'CtxGuard'], [T.ULONG, 'Flags']]),
    NdrClientContextMarshall: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.NDR_CCONTEXT, 'ContextHandle'], [T.i32, 'fCheck']]),
    NdrClientContextUnmarshall: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.NDR_CCONTEXT), 'pContextHandle'], [T.RPC_BINDING_HANDLE, 'BindHandle']]),
    NdrServerContextMarshall: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.NDR_SCONTEXT, 'ContextHandle'], [T.NDR_RUNDOWN, 'RundownRoutine']]),
    NdrServerContextUnmarshall: Fn(T.NDR_SCONTEXT, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg']]),
    NdrContextHandleSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrContextHandleInitialize: Fn(T.NDR_SCONTEXT, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrServerContextNewMarshall: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.NDR_SCONTEXT, 'ContextHandle'], [T.NDR_RUNDOWN, 'RundownRoutine'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrServerContextNewUnmarshall: Fn(T.NDR_SCONTEXT, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    RpcSmDestroyClientContext: Fn(T.RPC_STATUS, [[Pointer(Pointer(null)), 'ContextHandle']]),
    RpcSsDestroyClientContext: Fn(null, [[Pointer(Pointer(null)), 'ContextHandle']]),
    NdrSimpleTypeMarshall: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.u8, 'FormatChar']]),
    NdrSimpleTypeUnmarshall: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.u8, 'FormatChar']]),
    NdrByteCountPointerMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrByteCountPointerUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrByteCountPointerBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrByteCountPointerFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrRangeUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrPointerMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrPointerUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrPointerBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrPointerMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrPointerFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrSimpleStructMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrSimpleStructUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrSimpleStructBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrSimpleStructMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrSimpleStructFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantStructMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantStructUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrConformantStructBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantStructMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantStructFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantVaryingStructMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantVaryingStructUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrConformantVaryingStructBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantVaryingStructMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantVaryingStructFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrComplexStructMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrComplexStructUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrComplexStructBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrComplexStructMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrComplexStructFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrFixedArrayMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrFixedArrayUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrFixedArrayBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrFixedArrayMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrFixedArrayFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantArrayMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantArrayUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrConformantArrayBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantArrayMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantArrayFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantVaryingArrayMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantVaryingArrayUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrConformantVaryingArrayBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantVaryingArrayMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantVaryingArrayFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrVaryingArrayMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrVaryingArrayUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrVaryingArrayBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrVaryingArrayMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrVaryingArrayFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrComplexArrayMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrComplexArrayUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrComplexArrayBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrComplexArrayMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrComplexArrayFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrEncapsulatedUnionMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrEncapsulatedUnionUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrEncapsulatedUnionBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrEncapsulatedUnionMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrEncapsulatedUnionFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrNonEncapsulatedUnionMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrNonEncapsulatedUnionUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrNonEncapsulatedUnionBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrNonEncapsulatedUnionMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrNonEncapsulatedUnionFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrXmitOrRepAsMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrXmitOrRepAsUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrXmitOrRepAsBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrXmitOrRepAsMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrXmitOrRepAsFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrUserMarshalMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrUserMarshalUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrUserMarshalBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrUserMarshalMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrUserMarshalFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrInterfacePointerMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrInterfacePointerUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrInterfacePointerBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrInterfacePointerMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrInterfacePointerFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantStringMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantStringUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrConformantStringBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrConformantStringMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrNonConformantStringMarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrNonConformantStringUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(Pointer(T.u8)), 'ppMemory'], [T.PFORMAT_STRING, 'pFormat'], [T.u8, 'fMustAlloc']]),
    NdrNonConformantStringBufferSize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pMemory'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrNonConformantStringMemorySize: Fn(T.ULONG, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrCorrelationInitialize: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(null), 'pMemory'], [T.ULONG, 'CacheSize'], [T.ULONG, 'flags']]),
    NdrCorrelationPass: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg']]),
    NdrCorrelationFree: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg']]),
    NdrConvert2: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat'], [T.LONG, 'NumberParams']]),
    NdrConvert: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrUserMarshalSimpleTypeConvert: Fn(Pointer(T.u8), [[Pointer(T.ULONG), 'pFlags'], [Pointer(T.u8), 'pBuffer'], [T.u8, 'FormatChar']]),
    NdrClientCall2: Fn(T.LONG_PTR, [[T.PMIDL_STUB_DESC, 'pStubDescriptor'], [T.PFORMAT_STRING, 'pFormat'], '...']),
    NdrClientCall: Fn(T.LONG_PTR, [[T.PMIDL_STUB_DESC, 'pStubDescriptor'], [T.PFORMAT_STRING, 'pFormat'], '...']),
    NdrAsyncClientCall: Fn(T.LONG_PTR, [[T.PMIDL_STUB_DESC, 'pStubDescriptor'], [T.PFORMAT_STRING, 'pFormat'], '...']),
    NdrDcomAsyncClientCall: Fn(T.LONG_PTR, [[T.PMIDL_STUB_DESC, 'pStubDescriptor'], [T.PFORMAT_STRING, 'pFormat'], '...']),
    NdrServerCall2: Fn(null, [[T.PRPC_MESSAGE, 'pRpcMsg']]),
    NdrServerCall: Fn(null, [[T.PRPC_MESSAGE, 'pRpcMsg']]),
    NdrAsyncServerCall: Fn(null, [[T.PRPC_MESSAGE, 'pRpcMsg']]),
    NdrStubCall2: Fn(T.LONG, [[Pointer(Struct('IRpcStubBuffer', null)), 'pThis'], [Pointer(Struct('IRpcChannelBuffer', null)), 'pChannel'], [T.PRPC_MESSAGE, 'pRpcMsg'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    NdrStubCall: Fn(T.LONG, [[Pointer(Struct('IRpcStubBuffer', null)), 'pThis'], [Pointer(Struct('IRpcChannelBuffer', null)), 'pChannel'], [T.PRPC_MESSAGE, 'pRpcMsg'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    NdrAsyncStubCall: Fn(T.LONG, [[Pointer(Struct('IRpcStubBuffer', null)), 'pThis'], [Pointer(Struct('IRpcChannelBuffer', null)), 'pChannel'], [T.PRPC_MESSAGE, 'pRpcMsg'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    NdrDcomAsyncStubCall: Fn(T.LONG, [[Pointer(Struct('IRpcStubBuffer', null)), 'pThis'], [Pointer(Struct('IRpcChannelBuffer', null)), 'pChannel'], [T.PRPC_MESSAGE, 'pRpcMsg'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    NdrAllocate: Fn(Pointer(null), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.SIZE_T, 'Len']]),
    NdrClearOutParameters: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat'], [Pointer(null), 'ArgAddr']]),
    NdrMapCommAndFaultStatus: Fn(T.RPC_STATUS, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.ULONG), 'pCommStatus'], [Pointer(T.ULONG), 'pFaultStatus'], [T.RPC_STATUS, 'Status_']]),
    NdrOleAllocate: Fn(Pointer(null), [[T.SIZE_T, 'Size']]),
    NdrOleFree: Fn(null, [[Pointer(null), 'NodeToFree']]),
    NdrClientInitialize: Fn(null, [[T.PRPC_MESSAGE, 'pRpcMessage'], [T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PMIDL_STUB_DESC, 'pStubDesc'], [T.u32, 'ProcNum']]),
    NdrClientInitializeNew: Fn(null, [[T.PRPC_MESSAGE, 'pRpcMessage'], [T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PMIDL_STUB_DESC, 'pStubDesc'], [T.u32, 'ProcNum']]),
    NdrServerInitialize: Fn(Pointer(T.u8), [[T.PRPC_MESSAGE, 'pRpcMsg'], [T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PMIDL_STUB_DESC, 'pStubDesc']]),
    NdrServerInitializeNew: Fn(Pointer(T.u8), [[T.PRPC_MESSAGE, 'pRpcMsg'], [T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PMIDL_STUB_DESC, 'pStubDesc']]),
    NdrServerInitializeUnmarshall: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PMIDL_STUB_DESC, 'pStubDesc'], [T.PRPC_MESSAGE, 'pRpcMsg']]),
    NdrServerInitializeMarshall: Fn(null, [[T.PRPC_MESSAGE, 'pRpcMsg'], [T.PMIDL_STUB_MESSAGE, 'pStubMsg']]),
    NdrServerMarshall: Fn(null, [[Pointer(Struct('IRpcStubBuffer', null)), 'pThis'], [Pointer(Struct('IRpcChannelBuffer', null)), 'pChannel'], [T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PFORMAT_STRING, 'pFormat']]),
    NdrServerUnmarshall: Fn(null, [[Pointer(Struct('IRpcChannelBuffer', null)), 'pChannel'], [T.PRPC_MESSAGE, 'pRpcMsg'], [T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.PMIDL_STUB_DESC, 'pStubDesc'], [T.PFORMAT_STRING, 'pFormat'], [Pointer(null), 'pParamList']]),
    NdrGetBuffer: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'stubmsg'], [T.ULONG, 'buflen'], [T.RPC_BINDING_HANDLE, 'handle']]),
    NdrFreeBuffer: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg']]),
    NdrSendReceive: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'stubmsg'], [Pointer(T.u8), 'buffer']]),
    NdrNsGetBuffer: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [T.ULONG, 'BufferLength'], [T.RPC_BINDING_HANDLE, 'Handle']]),
    NdrNsSendReceive: Fn(Pointer(T.u8), [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.u8), 'pBufferEnd'], [Pointer(T.RPC_BINDING_HANDLE), 'pAutoHandle']]),
    NdrGetDcomProtocolVersion: Fn(T.RPC_STATUS, [[T.PMIDL_STUB_MESSAGE, 'pStubMsg'], [Pointer(T.RPC_VERSION), 'pVersion']]),
    NdrFullPointerXlatInit: Fn(T.PFULL_PTR_XLAT_TABLES, [[T.ULONG, 'NumberOfPointers'], [T.XLAT_SIDE, 'XlatSide']]),
    NdrFullPointerXlatFree: Fn(null, [[T.PFULL_PTR_XLAT_TABLES, 'pXlatTables']]),
    NdrFullPointerQueryPointer: Fn(T.i32, [[T.PFULL_PTR_XLAT_TABLES, 'pXlatTables'], [Pointer(null), 'pPointer'], [T.u8, 'QueryType'], [Pointer(T.ULONG), 'pRefId']]),
    NdrFullPointerQueryRefId: Fn(T.i32, [[T.PFULL_PTR_XLAT_TABLES, 'pXlatTables'], [T.ULONG, 'RefId'], [T.u8, 'QueryType'], [Pointer(Pointer(null)), 'ppPointer']]),
    NdrFullPointerInsertRefId: Fn(null, [[T.PFULL_PTR_XLAT_TABLES, 'pXlatTables'], [T.ULONG, 'RefId'], [Pointer(null), 'pPointer']]),
    NdrFullPointerFree: Fn(T.i32, [[T.PFULL_PTR_XLAT_TABLES, 'pXlatTables'], [Pointer(null), 'Pointer']]),
    NdrRpcSsEnableAllocate: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pMessage']]),
    NdrRpcSsDisableAllocate: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pMessage']]),
    NdrRpcSmSetClientToOsf: Fn(null, [[T.PMIDL_STUB_MESSAGE, 'pMessage']]),
    NdrRpcSmClientAllocate: Fn(Pointer(null), [[T.SIZE_T, 'Size']]),
    NdrRpcSmClientFree: Fn(null, [[Pointer(null), 'NodeToFree']]),
    NdrRpcSsDefaultAllocate: Fn(Pointer(null), [[T.SIZE_T, 'Size']]),
    NdrRpcSsDefaultFree: Fn(null, [[Pointer(null), 'NodeToFree']]),
    NdrGetUserMarshalInfo: Fn(T.RPC_STATUS, [[Pointer(T.ULONG), 'pFlags'], [T.ULONG, 'InformationLevel'], [Pointer(T.NDR_USER_MARSHAL_INFO), 'pMarshalInfo']]),
    IWinTypes_v0_1_c_ifspec: T.RPC_IF_HANDLE,
    IWinTypes_v0_1_s_ifspec: T.RPC_IF_HANDLE,
    IID_IUnknown: T.GUID,
    IUnknown_QueryInterface_Proxy: Fn(T.HRESULT, [[Pointer(T.IUnknown), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']]),
    IUnknown_QueryInterface_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUnknown_AddRef_Proxy: Fn(T.ULONG, [[Pointer(T.IUnknown), 'This']]),
    IUnknown_AddRef_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUnknown_Release_Proxy: Fn(T.ULONG, [[Pointer(T.IUnknown), 'This']]),
    IUnknown_Release_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IClassFactory: T.GUID,
    IClassFactory_RemoteCreateInstance_Proxy: Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObject']]),
    IClassFactory_RemoteCreateInstance_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IClassFactory_RemoteLockServer_Proxy: Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [T.BOOL, 'fLock']]),
    IClassFactory_RemoteLockServer_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IClassFactory_CreateInstance_Proxy: Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']]),
    IClassFactory_CreateInstance_Stub: Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObject']]),
    IClassFactory_LockServer_Proxy: Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [T.BOOL, 'fLock']]),
    IClassFactory_LockServer_Stub: Fn(T.HRESULT, [[Pointer(T.IClassFactory), 'This'], [T.BOOL, 'fLock']]),
    IID_IMarshal: T.GUID,
    IMarshal_GetUnmarshalClass_Proxy: Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags'], [Pointer(T.CLSID), 'pCid']]),
    IMarshal_GetUnmarshalClass_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMarshal_GetMarshalSizeMax_Proxy: Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags'], [Pointer(T.DWORD), 'pSize']]),
    IMarshal_GetMarshalSizeMax_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMarshal_MarshalInterface_Proxy: Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IStream), 'pStm'], [Pointer(T.IID), 'riid'], [Pointer(null), 'pv'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [T.DWORD, 'mshlflags']]),
    IMarshal_MarshalInterface_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMarshal_UnmarshalInterface_Proxy: Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IStream), 'pStm'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']]),
    IMarshal_UnmarshalInterface_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMarshal_ReleaseMarshalData_Proxy: Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [Pointer(T.IStream), 'pStm']]),
    IMarshal_ReleaseMarshalData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMarshal_DisconnectObject_Proxy: Fn(T.HRESULT, [[Pointer(T.IMarshal), 'This'], [T.DWORD, 'dwReserved']]),
    IMarshal_DisconnectObject_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IMarshal2: T.GUID,
    IID_IStdMarshalInfo: T.GUID,
    IStdMarshalInfo_GetClassForHandler_Proxy: Fn(T.HRESULT, [[Pointer(T.IStdMarshalInfo), 'This'], [T.DWORD, 'dwDestContext'], [Pointer(null), 'pvDestContext'], [Pointer(T.CLSID), 'pClsid']]),
    IStdMarshalInfo_GetClassForHandler_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IExternalConnection: T.GUID,
    IExternalConnection_AddConnection_Proxy: Fn(T.DWORD, [[Pointer(T.IExternalConnection), 'This'], [T.DWORD, 'extconn'], [T.DWORD, 'reserved']]),
    IExternalConnection_AddConnection_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IExternalConnection_ReleaseConnection_Proxy: Fn(T.DWORD, [[Pointer(T.IExternalConnection), 'This'], [T.DWORD, 'extconn'], [T.DWORD, 'reserved'], [T.BOOL, 'fLastReleaseCloses']]),
    IExternalConnection_ReleaseConnection_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IMultiQI: T.GUID,
    IMultiQI_QueryMultipleInterfaces_Proxy: Fn(T.HRESULT, [[Pointer(T.IMultiQI), 'This'], [T.ULONG, 'cMQIs'], [Pointer(T.MULTI_QI), 'pMQIs']]),
    IMultiQI_QueryMultipleInterfaces_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IMalloc: T.GUID,
    IMalloc_Alloc_Proxy: Fn(T.LPVOID, [[Pointer(T.IMalloc), 'This'], [T.ULONG, 'cb']]),
    IMalloc_Alloc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMalloc_Realloc_Proxy: Fn(T.LPVOID, [[Pointer(T.IMalloc), 'This'], [T.LPVOID, 'pv'], [T.ULONG, 'cb']]),
    IMalloc_Realloc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMalloc_Free_Proxy: Fn(null, [[Pointer(T.IMalloc), 'This'], [T.LPVOID, 'pv']]),
    IMalloc_Free_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMalloc_GetSize_Proxy: Fn(T.ULONG, [[Pointer(T.IMalloc), 'This'], [T.LPVOID, 'pv']]),
    IMalloc_GetSize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMalloc_DidAlloc_Proxy: Fn(T.i32, [[Pointer(T.IMalloc), 'This'], [T.LPVOID, 'pv']]),
    IMalloc_DidAlloc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMalloc_HeapMinimize_Proxy: Fn(null, [[Pointer(T.IMalloc), 'This']]),
    IMalloc_HeapMinimize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IMallocSpy: T.GUID,
    IMallocSpy_PreAlloc_Proxy: Fn(T.ULONG, [[Pointer(T.IMallocSpy), 'This'], [T.ULONG, 'cbRequest']]),
    IMallocSpy_PreAlloc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMallocSpy_PostAlloc_Proxy: Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pActual']]),
    IMallocSpy_PostAlloc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMallocSpy_PreFree_Proxy: Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.BOOL, 'fSpyed']]),
    IMallocSpy_PreFree_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMallocSpy_PostFree_Proxy: Fn(null, [[Pointer(T.IMallocSpy), 'This'], [T.BOOL, 'fSpyed']]),
    IMallocSpy_PostFree_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMallocSpy_PreRealloc_Proxy: Fn(T.ULONG, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.ULONG, 'cbRequest'], [Pointer(T.LPVOID), 'ppNewRequest'], [T.BOOL, 'fSpyed']]),
    IMallocSpy_PreRealloc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMallocSpy_PostRealloc_Proxy: Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pActual'], [T.BOOL, 'fSpyed']]),
    IMallocSpy_PostRealloc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMallocSpy_PreGetSize_Proxy: Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.BOOL, 'fSpyed']]),
    IMallocSpy_PreGetSize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMallocSpy_PostGetSize_Proxy: Fn(T.ULONG, [[Pointer(T.IMallocSpy), 'This'], [T.ULONG, 'cbActual'], [T.BOOL, 'fSpyed']]),
    IMallocSpy_PostGetSize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMallocSpy_PreDidAlloc_Proxy: Fn(T.LPVOID, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.BOOL, 'fSpyed']]),
    IMallocSpy_PreDidAlloc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMallocSpy_PostDidAlloc_Proxy: Fn(T.i32, [[Pointer(T.IMallocSpy), 'This'], [T.LPVOID, 'pRequest'], [T.BOOL, 'fSpyed'], [T.i32, 'fActual']]),
    IMallocSpy_PostDidAlloc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMallocSpy_PreHeapMinimize_Proxy: Fn(null, [[Pointer(T.IMallocSpy), 'This']]),
    IMallocSpy_PreHeapMinimize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMallocSpy_PostHeapMinimize_Proxy: Fn(null, [[Pointer(T.IMallocSpy), 'This']]),
    IMallocSpy_PostHeapMinimize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IInternalUnknown: T.GUID,
    IInternalUnknown_QueryInternalInterface_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternalUnknown), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']]),
    IInternalUnknown_QueryInternalInterface_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IEnumUnknown: T.GUID,
    IEnumUnknown_RemoteNext_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [T.ULONG, 'celt'], [Pointer(Pointer(T.IUnknown)), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumUnknown_RemoteNext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumUnknown_Skip_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [T.ULONG, 'celt']]),
    IEnumUnknown_Skip_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumUnknown_Reset_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This']]),
    IEnumUnknown_Reset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumUnknown_Clone_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [Pointer(Pointer(T.IEnumUnknown)), 'ppenum']]),
    IEnumUnknown_Clone_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumUnknown_Next_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [T.ULONG, 'celt'], [Pointer(Pointer(T.IUnknown)), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumUnknown_Next_Stub: Fn(T.HRESULT, [[Pointer(T.IEnumUnknown), 'This'], [T.ULONG, 'celt'], [Pointer(Pointer(T.IUnknown)), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IID_ISurrogate: T.GUID,
    ISurrogate_LoadDllServer_Proxy: Fn(T.HRESULT, [[Pointer(T.ISurrogate), 'This'], [Pointer(T.CLSID), 'Clsid']]),
    ISurrogate_LoadDllServer_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ISurrogate_FreeSurrogate_Proxy: Fn(T.HRESULT, [[Pointer(T.ISurrogate), 'This']]),
    ISurrogate_FreeSurrogate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IGlobalInterfaceTable: T.GUID,
    IGlobalInterfaceTable_RegisterInterfaceInGlobal_Proxy: Fn(T.HRESULT, [[Pointer(T.IGlobalInterfaceTable), 'This'], [Pointer(T.IUnknown), 'pUnk'], [Pointer(T.IID), 'riid'], [Pointer(T.DWORD), 'pdwCookie']]),
    IGlobalInterfaceTable_RegisterInterfaceInGlobal_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Proxy: Fn(T.HRESULT, [[Pointer(T.IGlobalInterfaceTable), 'This'], [T.DWORD, 'dwCookie']]),
    IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IGlobalInterfaceTable_GetInterfaceFromGlobal_Proxy: Fn(T.HRESULT, [[Pointer(T.IGlobalInterfaceTable), 'This'], [T.DWORD, 'dwCookie'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']]),
    IGlobalInterfaceTable_GetInterfaceFromGlobal_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IBindCtx: T.GUID,
    IBindCtx_RegisterObjectBound_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.IUnknown), 'punk']]),
    IBindCtx_RegisterObjectBound_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindCtx_RevokeObjectBound_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.IUnknown), 'punk']]),
    IBindCtx_RevokeObjectBound_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindCtx_ReleaseBoundObjects_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This']]),
    IBindCtx_ReleaseBoundObjects_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindCtx_RemoteSetBindOptions_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.BIND_OPTS2), 'pbindopts']]),
    IBindCtx_RemoteSetBindOptions_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindCtx_RemoteGetBindOptions_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.BIND_OPTS2), 'pbindopts']]),
    IBindCtx_RemoteGetBindOptions_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindCtx_GetRunningObjectTable_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(Pointer(T.IRunningObjectTable)), 'pprot']]),
    IBindCtx_GetRunningObjectTable_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindCtx_RegisterObjectParam_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [T.LPOLESTR, 'pszKey'], [Pointer(T.IUnknown), 'punk']]),
    IBindCtx_RegisterObjectParam_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindCtx_GetObjectParam_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [T.LPOLESTR, 'pszKey'], [Pointer(Pointer(T.IUnknown)), 'ppunk']]),
    IBindCtx_GetObjectParam_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindCtx_EnumObjectParam_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(Pointer(T.IEnumString)), 'ppenum']]),
    IBindCtx_EnumObjectParam_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindCtx_RevokeObjectParam_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [T.LPOLESTR, 'pszKey']]),
    IBindCtx_RevokeObjectParam_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindCtx_SetBindOptions_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.BIND_OPTS), 'pbindopts']]),
    IBindCtx_SetBindOptions_Stub: Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.BIND_OPTS2), 'pbindopts']]),
    IBindCtx_GetBindOptions_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.BIND_OPTS), 'pbindopts']]),
    IBindCtx_GetBindOptions_Stub: Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'This'], [Pointer(T.BIND_OPTS2), 'pbindopts']]),
    IID_IEnumMoniker: T.GUID,
    IEnumMoniker_RemoteNext_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [T.ULONG, 'celt'], [Pointer(Pointer(T.IMoniker)), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumMoniker_RemoteNext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumMoniker_Skip_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [T.ULONG, 'celt']]),
    IEnumMoniker_Skip_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumMoniker_Reset_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This']]),
    IEnumMoniker_Reset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumMoniker_Clone_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [Pointer(Pointer(T.IEnumMoniker)), 'ppenum']]),
    IEnumMoniker_Clone_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumMoniker_Next_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [T.ULONG, 'celt'], [Pointer(Pointer(T.IMoniker)), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumMoniker_Next_Stub: Fn(T.HRESULT, [[Pointer(T.IEnumMoniker), 'This'], [T.ULONG, 'celt'], [Pointer(Pointer(T.IMoniker)), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IID_IRunnableObject: T.GUID,
    IRunnableObject_GetRunningClass_Proxy: Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [T.LPCLSID, 'lpClsid']]),
    IRunnableObject_GetRunningClass_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRunnableObject_Run_Proxy: Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [T.LPBINDCTX, 'pbc']]),
    IRunnableObject_Run_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRunnableObject_RemoteIsRunning_Proxy: Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This']]),
    IRunnableObject_RemoteIsRunning_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRunnableObject_LockRunning_Proxy: Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [T.BOOL, 'fLock'], [T.BOOL, 'fLastUnlockCloses']]),
    IRunnableObject_LockRunning_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRunnableObject_SetContainedObject_Proxy: Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This'], [T.BOOL, 'fContained']]),
    IRunnableObject_SetContainedObject_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRunnableObject_IsRunning_Proxy: Fn(T.BOOL, [[Pointer(T.IRunnableObject), 'This']]),
    IRunnableObject_IsRunning_Stub: Fn(T.HRESULT, [[Pointer(T.IRunnableObject), 'This']]),
    IID_IRunningObjectTable: T.GUID,
    IRunningObjectTable_Register_Proxy: Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [T.DWORD, 'grfFlags'], [Pointer(T.IUnknown), 'punkObject'], [Pointer(T.IMoniker), 'pmkObjectName'], [Pointer(T.DWORD), 'pdwRegister']]),
    IRunningObjectTable_Register_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRunningObjectTable_Revoke_Proxy: Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [T.DWORD, 'dwRegister']]),
    IRunningObjectTable_Revoke_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRunningObjectTable_IsRunning_Proxy: Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(T.IMoniker), 'pmkObjectName']]),
    IRunningObjectTable_IsRunning_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRunningObjectTable_GetObject_Proxy: Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(T.IMoniker), 'pmkObjectName'], [Pointer(Pointer(T.IUnknown)), 'ppunkObject']]),
    IRunningObjectTable_GetObject_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRunningObjectTable_NoteChangeTime_Proxy: Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [T.DWORD, 'dwRegister'], [Pointer(T.FILETIME), 'pfiletime']]),
    IRunningObjectTable_NoteChangeTime_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRunningObjectTable_GetTimeOfLastChange_Proxy: Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(T.IMoniker), 'pmkObjectName'], [Pointer(T.FILETIME), 'pfiletime']]),
    IRunningObjectTable_GetTimeOfLastChange_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRunningObjectTable_EnumRunning_Proxy: Fn(T.HRESULT, [[Pointer(T.IRunningObjectTable), 'This'], [Pointer(Pointer(T.IEnumMoniker)), 'ppenumMoniker']]),
    IRunningObjectTable_EnumRunning_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IPersist: T.GUID,
    IPersist_GetClassID_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersist), 'This'], [Pointer(T.CLSID), 'pClassID']]),
    IPersist_GetClassID_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IPersistStream: T.GUID,
    IPersistStream_IsDirty_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This']]),
    IPersistStream_IsDirty_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistStream_Load_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This'], [Pointer(T.IStream), 'pStm']]),
    IPersistStream_Load_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistStream_Save_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This'], [Pointer(T.IStream), 'pStm'], [T.BOOL, 'fClearDirty']]),
    IPersistStream_Save_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistStream_GetSizeMax_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'This'], [Pointer(T.ULARGE_INTEGER), 'pcbSize']]),
    IPersistStream_GetSizeMax_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IMoniker: T.GUID,
    IMoniker_RemoteBindToObject_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IID), 'riidResult'], [Pointer(Pointer(T.IUnknown)), 'ppvResult']]),
    IMoniker_RemoteBindToObject_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMoniker_RemoteBindToStorage_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObj']]),
    IMoniker_RemoteBindToStorage_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMoniker_Reduce_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [T.DWORD, 'dwReduceHowFar'], [Pointer(Pointer(T.IMoniker)), 'ppmkToLeft'], [Pointer(Pointer(T.IMoniker)), 'ppmkReduced']]),
    IMoniker_Reduce_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMoniker_ComposeWith_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IMoniker), 'pmkRight'], [T.BOOL, 'fOnlyIfNotGeneric'], [Pointer(Pointer(T.IMoniker)), 'ppmkComposite']]),
    IMoniker_ComposeWith_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMoniker_Enum_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [T.BOOL, 'fForward'], [Pointer(Pointer(T.IEnumMoniker)), 'ppenumMoniker']]),
    IMoniker_Enum_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMoniker_IsEqual_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IMoniker), 'pmkOtherMoniker']]),
    IMoniker_IsEqual_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMoniker_Hash_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.DWORD), 'pdwHash']]),
    IMoniker_Hash_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMoniker_IsRunning_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IMoniker), 'pmkNewlyRunning']]),
    IMoniker_IsRunning_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMoniker_GetTimeOfLastChange_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.FILETIME), 'pFileTime']]),
    IMoniker_GetTimeOfLastChange_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMoniker_Inverse_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(Pointer(T.IMoniker)), 'ppmk']]),
    IMoniker_Inverse_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMoniker_CommonPrefixWith_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IMoniker), 'pmkOther'], [Pointer(Pointer(T.IMoniker)), 'ppmkPrefix']]),
    IMoniker_CommonPrefixWith_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMoniker_RelativePathTo_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IMoniker), 'pmkOther'], [Pointer(Pointer(T.IMoniker)), 'ppmkRelPath']]),
    IMoniker_RelativePathTo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMoniker_GetDisplayName_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.LPOLESTR), 'ppszDisplayName']]),
    IMoniker_GetDisplayName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMoniker_ParseDisplayName_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [T.LPOLESTR, 'pszDisplayName'], [Pointer(T.ULONG), 'pchEaten'], [Pointer(Pointer(T.IMoniker)), 'ppmkOut']]),
    IMoniker_ParseDisplayName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMoniker_IsSystemMoniker_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.DWORD), 'pdwMksys']]),
    IMoniker_IsSystemMoniker_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMoniker_BindToObject_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IID), 'riidResult'], [Pointer(Pointer(null)), 'ppvResult']]),
    IMoniker_BindToObject_Stub: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IID), 'riidResult'], [Pointer(Pointer(T.IUnknown)), 'ppvResult']]),
    IMoniker_BindToStorage_Proxy: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObj']]),
    IMoniker_BindToStorage_Stub: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'This'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IMoniker), 'pmkToLeft'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObj']]),
    IID_IROTData: T.GUID,
    IROTData_GetComparisonData_Proxy: Fn(T.HRESULT, [[Pointer(T.IROTData), 'This'], [Pointer(T.byte), 'pbData'], [T.ULONG, 'cbMax'], [Pointer(T.ULONG), 'pcbData']]),
    IROTData_GetComparisonData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IEnumString: T.GUID,
    IEnumString_RemoteNext_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [T.ULONG, 'celt'], [Pointer(T.LPOLESTR), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumString_RemoteNext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumString_Skip_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [T.ULONG, 'celt']]),
    IEnumString_Skip_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumString_Reset_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This']]),
    IEnumString_Reset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumString_Clone_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [Pointer(Pointer(T.IEnumString)), 'ppenum']]),
    IEnumString_Clone_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumString_Next_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [T.ULONG, 'celt'], [Pointer(T.LPOLESTR), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumString_Next_Stub: Fn(T.HRESULT, [[Pointer(T.IEnumString), 'This'], [T.ULONG, 'celt'], [Pointer(T.LPOLESTR), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IID_IClassActivator: T.GUID,
    IClassActivator_GetClassObject_Proxy: Fn(T.HRESULT, [[Pointer(T.IClassActivator), 'This'], [Pointer(T.CLSID), 'rclsid'], [T.DWORD, 'dwClassContext'], [T.LCID, 'locale'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']]),
    IClassActivator_GetClassObject_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ISequentialStream: T.GUID,
    ISequentialStream_RemoteRead_Proxy: Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']]),
    ISequentialStream_RemoteRead_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ISequentialStream_RemoteWrite_Proxy: Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']]),
    ISequentialStream_RemoteWrite_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ISequentialStream_Read_Proxy: Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']]),
    ISequentialStream_Read_Stub: Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']]),
    ISequentialStream_Write_Proxy: Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']]),
    ISequentialStream_Write_Stub: Fn(T.HRESULT, [[Pointer(T.ISequentialStream), 'This'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']]),
    IID_IStream: T.GUID,
    IStream_RemoteSeek_Proxy: Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.LARGE_INTEGER, 'dlibMove'], [T.DWORD, 'dwOrigin'], [Pointer(T.ULARGE_INTEGER), 'plibNewPosition']]),
    IStream_RemoteSeek_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStream_SetSize_Proxy: Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.ULARGE_INTEGER, 'libNewSize']]),
    IStream_SetSize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStream_RemoteCopyTo_Proxy: Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(T.IStream), 'pstm'], [T.ULARGE_INTEGER, 'cb'], [Pointer(T.ULARGE_INTEGER), 'pcbRead'], [Pointer(T.ULARGE_INTEGER), 'pcbWritten']]),
    IStream_RemoteCopyTo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStream_Commit_Proxy: Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.DWORD, 'grfCommitFlags']]),
    IStream_Commit_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStream_Revert_Proxy: Fn(T.HRESULT, [[Pointer(T.IStream), 'This']]),
    IStream_Revert_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStream_LockRegion_Proxy: Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.ULARGE_INTEGER, 'libOffset'], [T.ULARGE_INTEGER, 'cb'], [T.DWORD, 'dwLockType']]),
    IStream_LockRegion_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStream_UnlockRegion_Proxy: Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.ULARGE_INTEGER, 'libOffset'], [T.ULARGE_INTEGER, 'cb'], [T.DWORD, 'dwLockType']]),
    IStream_UnlockRegion_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStream_Stat_Proxy: Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(T.STATSTG), 'pstatstg'], [T.DWORD, 'grfStatFlag']]),
    IStream_Stat_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStream_Clone_Proxy: Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(Pointer(T.IStream)), 'ppstm']]),
    IStream_Clone_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStream_Seek_Proxy: Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.LARGE_INTEGER, 'dlibMove'], [T.DWORD, 'dwOrigin'], [Pointer(T.ULARGE_INTEGER), 'plibNewPosition']]),
    IStream_Seek_Stub: Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [T.LARGE_INTEGER, 'dlibMove'], [T.DWORD, 'dwOrigin'], [Pointer(T.ULARGE_INTEGER), 'plibNewPosition']]),
    IStream_CopyTo_Proxy: Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(T.IStream), 'pstm'], [T.ULARGE_INTEGER, 'cb'], [Pointer(T.ULARGE_INTEGER), 'pcbRead'], [Pointer(T.ULARGE_INTEGER), 'pcbWritten']]),
    IStream_CopyTo_Stub: Fn(T.HRESULT, [[Pointer(T.IStream), 'This'], [Pointer(T.IStream), 'pstm'], [T.ULARGE_INTEGER, 'cb'], [Pointer(T.ULARGE_INTEGER), 'pcbRead'], [Pointer(T.ULARGE_INTEGER), 'pcbWritten']]),
    IID_IEnumSTATSTG: T.GUID,
    IEnumSTATSTG_RemoteNext_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumSTATSTG_RemoteNext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumSTATSTG_Skip_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [T.ULONG, 'celt']]),
    IEnumSTATSTG_Skip_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumSTATSTG_Reset_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This']]),
    IEnumSTATSTG_Reset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumSTATSTG_Clone_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [Pointer(Pointer(T.IEnumSTATSTG)), 'ppenum']]),
    IEnumSTATSTG_Clone_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumSTATSTG_Next_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumSTATSTG_Next_Stub: Fn(T.HRESULT, [[Pointer(T.IEnumSTATSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IID_IStorage: T.GUID,
    IStorage_CreateStream_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'reserved1'], [T.DWORD, 'reserved2'], [Pointer(Pointer(T.IStream)), 'ppstm']]),
    IStorage_CreateStream_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStorage_RemoteOpenStream_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [T.ULONG, 'cbReserved1'], [Pointer(T.byte), 'reserved1'], [T.DWORD, 'grfMode'], [T.DWORD, 'reserved2'], [Pointer(Pointer(T.IStream)), 'ppstm']]),
    IStorage_RemoteOpenStream_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStorage_CreateStorage_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'dwStgFmt'], [T.DWORD, 'reserved2'], [Pointer(Pointer(T.IStorage)), 'ppstg']]),
    IStorage_CreateStorage_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStorage_OpenStorage_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [Pointer(T.IStorage), 'pstgPriority'], [T.DWORD, 'grfMode'], [T.SNB, 'snbExclude'], [T.DWORD, 'reserved'], [Pointer(Pointer(T.IStorage)), 'ppstg']]),
    IStorage_OpenStorage_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStorage_CopyTo_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'ciidExclude'], [Pointer(T.IID), 'rgiidExclude'], [T.SNB, 'snbExclude'], [Pointer(T.IStorage), 'pstgDest']]),
    IStorage_CopyTo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStorage_MoveElementTo_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [Pointer(T.IStorage), 'pstgDest'], [T.LPCOLESTR, 'pwcsNewName'], [T.DWORD, 'grfFlags']]),
    IStorage_MoveElementTo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStorage_Commit_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'grfCommitFlags']]),
    IStorage_Commit_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStorage_Revert_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This']]),
    IStorage_Revert_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStorage_RemoteEnumElements_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'reserved1'], [T.ULONG, 'cbReserved2'], [Pointer(T.byte), 'reserved2'], [T.DWORD, 'reserved3'], [Pointer(Pointer(T.IEnumSTATSTG)), 'ppenum']]),
    IStorage_RemoteEnumElements_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStorage_DestroyElement_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName']]),
    IStorage_DestroyElement_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStorage_RenameElement_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsOldName'], [T.LPCOLESTR, 'pwcsNewName']]),
    IStorage_RenameElement_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStorage_SetElementTimes_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [Pointer(T.FILETIME), 'pctime'], [Pointer(T.FILETIME), 'patime'], [Pointer(T.FILETIME), 'pmtime']]),
    IStorage_SetElementTimes_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStorage_SetClass_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [Pointer(T.CLSID), 'clsid']]),
    IStorage_SetClass_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStorage_SetStateBits_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'grfStateBits'], [T.DWORD, 'grfMask']]),
    IStorage_SetStateBits_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStorage_Stat_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [Pointer(T.STATSTG), 'pstatstg'], [T.DWORD, 'grfStatFlag']]),
    IStorage_Stat_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IStorage_OpenStream_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [Pointer(null), 'reserved1'], [T.DWORD, 'grfMode'], [T.DWORD, 'reserved2'], [Pointer(Pointer(T.IStream)), 'ppstm']]),
    IStorage_OpenStream_Stub: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.LPCOLESTR, 'pwcsName'], [T.ULONG, 'cbReserved1'], [Pointer(T.byte), 'reserved1'], [T.DWORD, 'grfMode'], [T.DWORD, 'reserved2'], [Pointer(Pointer(T.IStream)), 'ppstm']]),
    IStorage_EnumElements_Proxy: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'reserved1'], [Pointer(null), 'reserved2'], [T.DWORD, 'reserved3'], [Pointer(Pointer(T.IEnumSTATSTG)), 'ppenum']]),
    IStorage_EnumElements_Stub: Fn(T.HRESULT, [[Pointer(T.IStorage), 'This'], [T.DWORD, 'reserved1'], [T.ULONG, 'cbReserved2'], [Pointer(T.byte), 'reserved2'], [T.DWORD, 'reserved3'], [Pointer(Pointer(T.IEnumSTATSTG)), 'ppenum']]),
    IID_IPersistFile: T.GUID,
    IPersistFile_IsDirty_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This']]),
    IPersistFile_IsDirty_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistFile_Load_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [T.LPCOLESTR, 'pszFileName'], [T.DWORD, 'dwMode']]),
    IPersistFile_Load_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistFile_Save_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [T.LPCOLESTR, 'pszFileName'], [T.BOOL, 'fRemember']]),
    IPersistFile_Save_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistFile_SaveCompleted_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [T.LPCOLESTR, 'pszFileName']]),
    IPersistFile_SaveCompleted_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistFile_GetCurFile_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistFile), 'This'], [Pointer(T.LPOLESTR), 'ppszFileName']]),
    IPersistFile_GetCurFile_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IPersistStorage: T.GUID,
    IPersistStorage_IsDirty_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This']]),
    IPersistStorage_IsDirty_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistStorage_InitNew_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IStorage), 'pStg']]),
    IPersistStorage_InitNew_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistStorage_Load_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IStorage), 'pStg']]),
    IPersistStorage_Load_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistStorage_Save_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IStorage), 'pStgSave'], [T.BOOL, 'fSameAsLoad']]),
    IPersistStorage_Save_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistStorage_SaveCompleted_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This'], [Pointer(T.IStorage), 'pStgNew']]),
    IPersistStorage_SaveCompleted_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistStorage_HandsOffStorage_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistStorage), 'This']]),
    IPersistStorage_HandsOffStorage_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IRootStorage: T.GUID,
    IRootStorage_SwitchToFile_Proxy: Fn(T.HRESULT, [[Pointer(T.IRootStorage), 'This'], [T.LPOLESTR, 'pszFile']]),
    IRootStorage_SwitchToFile_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ILockBytes: T.GUID,
    ILockBytes_RemoteReadAt_Proxy: Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']]),
    ILockBytes_RemoteReadAt_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ILockBytes_RemoteWriteAt_Proxy: Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']]),
    ILockBytes_RemoteWriteAt_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ILockBytes_Flush_Proxy: Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This']]),
    ILockBytes_Flush_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ILockBytes_SetSize_Proxy: Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'cb']]),
    ILockBytes_SetSize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ILockBytes_LockRegion_Proxy: Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'libOffset'], [T.ULARGE_INTEGER, 'cb'], [T.DWORD, 'dwLockType']]),
    ILockBytes_LockRegion_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ILockBytes_UnlockRegion_Proxy: Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'libOffset'], [T.ULARGE_INTEGER, 'cb'], [T.DWORD, 'dwLockType']]),
    ILockBytes_UnlockRegion_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ILockBytes_Stat_Proxy: Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [Pointer(T.STATSTG), 'pstatstg'], [T.DWORD, 'grfStatFlag']]),
    ILockBytes_Stat_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ILockBytes_ReadAt_Proxy: Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']]),
    ILockBytes_ReadAt_Stub: Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']]),
    ILockBytes_WriteAt_Proxy: Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']]),
    ILockBytes_WriteAt_Stub: Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']]),
    IID_IFillLockBytes: T.GUID,
    IFillLockBytes_RemoteFillAppend_Proxy: Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']]),
    IFillLockBytes_RemoteFillAppend_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IFillLockBytes_RemoteFillAt_Proxy: Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']]),
    IFillLockBytes_RemoteFillAt_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IFillLockBytes_SetFillSize_Proxy: Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [T.ULARGE_INTEGER, 'ulSize']]),
    IFillLockBytes_SetFillSize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IFillLockBytes_Terminate_Proxy: Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [T.BOOL, 'bCanceled']]),
    IFillLockBytes_Terminate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IFillLockBytes_FillAppend_Proxy: Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']]),
    IFillLockBytes_FillAppend_Stub: Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']]),
    IFillLockBytes_FillAt_Proxy: Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']]),
    IFillLockBytes_FillAt_Stub: Fn(T.HRESULT, [[Pointer(T.IFillLockBytes), 'This'], [T.ULARGE_INTEGER, 'ulOffset'], [Pointer(T.byte), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbWritten']]),
    IID_IProgressNotify: T.GUID,
    IProgressNotify_OnProgress_Proxy: Fn(T.HRESULT, [[Pointer(T.IProgressNotify), 'This'], [T.DWORD, 'dwProgressCurrent'], [T.DWORD, 'dwProgressMaximum'], [T.BOOL, 'fAccurate'], [T.BOOL, 'fOwner']]),
    IProgressNotify_OnProgress_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ILayoutStorage: T.GUID,
    ILayoutStorage_LayoutScript_Proxy: Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This'], [Pointer(T.StorageLayout), 'pStorageLayout'], [T.DWORD, 'nEntries'], [T.DWORD, 'glfInterleavedFlag']]),
    ILayoutStorage_LayoutScript_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ILayoutStorage_BeginMonitor_Proxy: Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This']]),
    ILayoutStorage_BeginMonitor_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ILayoutStorage_EndMonitor_Proxy: Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This']]),
    ILayoutStorage_EndMonitor_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ILayoutStorage_ReLayoutDocfile_Proxy: Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This'], [Pointer(T.OLECHAR), 'pwcsNewDfName']]),
    ILayoutStorage_ReLayoutDocfile_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy: Fn(T.HRESULT, [[Pointer(T.ILayoutStorage), 'This'], [Pointer(T.ILockBytes), 'pILockBytes']]),
    ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IBlockingLock: T.GUID,
    IBlockingLock_Lock_Proxy: Fn(T.HRESULT, [[Pointer(T.IBlockingLock), 'This'], [T.DWORD, 'dwTimeout']]),
    IBlockingLock_Lock_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBlockingLock_Unlock_Proxy: Fn(T.HRESULT, [[Pointer(T.IBlockingLock), 'This']]),
    IBlockingLock_Unlock_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ITimeAndNoticeControl: T.GUID,
    ITimeAndNoticeControl_SuppressChanges_Proxy: Fn(T.HRESULT, [[Pointer(T.ITimeAndNoticeControl), 'This'], [T.DWORD, 'res1'], [T.DWORD, 'res2']]),
    ITimeAndNoticeControl_SuppressChanges_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IOplockStorage: T.GUID,
    IOplockStorage_CreateStorageEx_Proxy: Fn(T.HRESULT, [[Pointer(T.IOplockStorage), 'This'], [T.LPCWSTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'stgfmt'], [T.DWORD, 'grfAttrs'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppstgOpen']]),
    IOplockStorage_CreateStorageEx_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOplockStorage_OpenStorageEx_Proxy: Fn(T.HRESULT, [[Pointer(T.IOplockStorage), 'This'], [T.LPCWSTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'stgfmt'], [T.DWORD, 'grfAttrs'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppstgOpen']]),
    IOplockStorage_OpenStorageEx_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IEnumFORMATETC: T.GUID,
    IEnumFORMATETC_RemoteNext_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [T.ULONG, 'celt'], [Pointer(T.FORMATETC), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumFORMATETC_RemoteNext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumFORMATETC_Skip_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [T.ULONG, 'celt']]),
    IEnumFORMATETC_Skip_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumFORMATETC_Reset_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This']]),
    IEnumFORMATETC_Reset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumFORMATETC_Clone_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [Pointer(Pointer(T.IEnumFORMATETC)), 'ppenum']]),
    IEnumFORMATETC_Clone_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumFORMATETC_Next_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [T.ULONG, 'celt'], [Pointer(T.FORMATETC), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumFORMATETC_Next_Stub: Fn(T.HRESULT, [[Pointer(T.IEnumFORMATETC), 'This'], [T.ULONG, 'celt'], [Pointer(T.FORMATETC), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IID_IEnumSTATDATA: T.GUID,
    IEnumSTATDATA_RemoteNext_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATDATA), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumSTATDATA_RemoteNext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumSTATDATA_Skip_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [T.ULONG, 'celt']]),
    IEnumSTATDATA_Skip_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumSTATDATA_Reset_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This']]),
    IEnumSTATDATA_Reset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumSTATDATA_Clone_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenum']]),
    IEnumSTATDATA_Clone_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumSTATDATA_Next_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATDATA), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumSTATDATA_Next_Stub: Fn(T.HRESULT, [[Pointer(T.IEnumSTATDATA), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATDATA), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IID_IAdviseSink: T.GUID,
    IAdviseSink_RemoteOnDataChange_Proxy: Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.FORMATETC), 'pFormatetc'], [Pointer(T.ASYNC_STGMEDIUM), 'pStgmed']]),
    IAdviseSink_RemoteOnDataChange_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IAdviseSink_RemoteOnViewChange_Proxy: Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This'], [T.DWORD, 'dwAspect'], [T.LONG, 'lindex']]),
    IAdviseSink_RemoteOnViewChange_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IAdviseSink_RemoteOnRename_Proxy: Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.IMoniker), 'pmk']]),
    IAdviseSink_RemoteOnRename_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IAdviseSink_RemoteOnSave_Proxy: Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This']]),
    IAdviseSink_RemoteOnSave_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IAdviseSink_RemoteOnClose_Proxy: Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This']]),
    IAdviseSink_RemoteOnClose_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IAdviseSink_OnDataChange_Proxy: Fn(null, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.FORMATETC), 'pFormatetc'], [Pointer(T.STGMEDIUM), 'pStgmed']]),
    IAdviseSink_OnDataChange_Stub: Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.FORMATETC), 'pFormatetc'], [Pointer(T.ASYNC_STGMEDIUM), 'pStgmed']]),
    IAdviseSink_OnViewChange_Proxy: Fn(null, [[Pointer(T.IAdviseSink), 'This'], [T.DWORD, 'dwAspect'], [T.LONG, 'lindex']]),
    IAdviseSink_OnViewChange_Stub: Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This'], [T.DWORD, 'dwAspect'], [T.LONG, 'lindex']]),
    IAdviseSink_OnRename_Proxy: Fn(null, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.IMoniker), 'pmk']]),
    IAdviseSink_OnRename_Stub: Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This'], [Pointer(T.IMoniker), 'pmk']]),
    IAdviseSink_OnSave_Proxy: Fn(null, [[Pointer(T.IAdviseSink), 'This']]),
    IAdviseSink_OnSave_Stub: Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This']]),
    IAdviseSink_OnClose_Proxy: Fn(null, [[Pointer(T.IAdviseSink), 'This']]),
    IAdviseSink_OnClose_Stub: Fn(T.HRESULT, [[Pointer(T.IAdviseSink), 'This']]),
    IID_IAdviseSink2: T.GUID,
    IAdviseSink2_RemoteOnLinkSrcChange_Proxy: Fn(T.HRESULT, [[Pointer(T.IAdviseSink2), 'This'], [Pointer(T.IMoniker), 'pmk']]),
    IAdviseSink2_RemoteOnLinkSrcChange_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IAdviseSink2_OnLinkSrcChange_Proxy: Fn(null, [[Pointer(T.IAdviseSink2), 'This'], [Pointer(T.IMoniker), 'pmk']]),
    IAdviseSink2_OnLinkSrcChange_Stub: Fn(T.HRESULT, [[Pointer(T.IAdviseSink2), 'This'], [Pointer(T.IMoniker), 'pmk']]),
    IID_IDataObject: T.GUID,
    IDataObject_RemoteGetData_Proxy: Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetcIn'], [Pointer(T.STGMEDIUM), 'pRemoteMedium']]),
    IDataObject_RemoteGetData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDataObject_RemoteGetDataHere_Proxy: Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pRemoteMedium']]),
    IDataObject_RemoteGetDataHere_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDataObject_QueryGetData_Proxy: Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc']]),
    IDataObject_QueryGetData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDataObject_GetCanonicalFormatEtc_Proxy: Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatectIn'], [Pointer(T.FORMATETC), 'pformatetcOut']]),
    IDataObject_GetCanonicalFormatEtc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDataObject_RemoteSetData_Proxy: Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.FLAG_STGMEDIUM), 'pmedium'], [T.BOOL, 'fRelease']]),
    IDataObject_RemoteSetData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDataObject_EnumFormatEtc_Proxy: Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [T.DWORD, 'dwDirection'], [Pointer(Pointer(T.IEnumFORMATETC)), 'ppenumFormatEtc']]),
    IDataObject_EnumFormatEtc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDataObject_DAdvise_Proxy: Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [T.DWORD, 'advf'], [Pointer(T.IAdviseSink), 'pAdvSink'], [Pointer(T.DWORD), 'pdwConnection']]),
    IDataObject_DAdvise_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDataObject_DUnadvise_Proxy: Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [T.DWORD, 'dwConnection']]),
    IDataObject_DUnadvise_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDataObject_EnumDAdvise_Proxy: Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumAdvise']]),
    IDataObject_EnumDAdvise_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDataObject_GetData_Proxy: Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetcIn'], [Pointer(T.STGMEDIUM), 'pmedium']]),
    IDataObject_GetData_Stub: Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetcIn'], [Pointer(T.STGMEDIUM), 'pRemoteMedium']]),
    IDataObject_GetDataHere_Proxy: Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pmedium']]),
    IDataObject_GetDataHere_Stub: Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pRemoteMedium']]),
    IDataObject_SetData_Proxy: Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pmedium'], [T.BOOL, 'fRelease']]),
    IDataObject_SetData_Stub: Fn(T.HRESULT, [[Pointer(T.IDataObject), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.FLAG_STGMEDIUM), 'pmedium'], [T.BOOL, 'fRelease']]),
    IID_IDataAdviseHolder: T.GUID,
    IDataAdviseHolder_Advise_Proxy: Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [Pointer(T.IDataObject), 'pDataObject'], [Pointer(T.FORMATETC), 'pFetc'], [T.DWORD, 'advf'], [Pointer(T.IAdviseSink), 'pAdvise'], [Pointer(T.DWORD), 'pdwConnection']]),
    IDataAdviseHolder_Advise_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDataAdviseHolder_Unadvise_Proxy: Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [T.DWORD, 'dwConnection']]),
    IDataAdviseHolder_Unadvise_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDataAdviseHolder_EnumAdvise_Proxy: Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumAdvise']]),
    IDataAdviseHolder_EnumAdvise_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDataAdviseHolder_SendOnDataChange_Proxy: Fn(T.HRESULT, [[Pointer(T.IDataAdviseHolder), 'This'], [Pointer(T.IDataObject), 'pDataObject'], [T.DWORD, 'dwReserved'], [T.DWORD, 'advf']]),
    IDataAdviseHolder_SendOnDataChange_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IMessageFilter: T.GUID,
    IMessageFilter_HandleInComingCall_Proxy: Fn(T.DWORD, [[Pointer(T.IMessageFilter), 'This'], [T.DWORD, 'dwCallType'], [T.HTASK, 'htaskCaller'], [T.DWORD, 'dwTickCount'], [T.LPINTERFACEINFO, 'lpInterfaceInfo']]),
    IMessageFilter_HandleInComingCall_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMessageFilter_RetryRejectedCall_Proxy: Fn(T.DWORD, [[Pointer(T.IMessageFilter), 'This'], [T.HTASK, 'htaskCallee'], [T.DWORD, 'dwTickCount'], [T.DWORD, 'dwRejectType']]),
    IMessageFilter_RetryRejectedCall_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IMessageFilter_MessagePending_Proxy: Fn(T.DWORD, [[Pointer(T.IMessageFilter), 'This'], [T.HTASK, 'htaskCallee'], [T.DWORD, 'dwTickCount'], [T.DWORD, 'dwPendingType']]),
    IMessageFilter_MessagePending_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IRpcChannelBuffer: T.GUID,
    IRpcChannelBuffer_GetBuffer_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.IID), 'riid']]),
    IRpcChannelBuffer_GetBuffer_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcChannelBuffer_SendReceive_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage'], [Pointer(T.ULONG), 'pStatus']]),
    IRpcChannelBuffer_SendReceive_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcChannelBuffer_FreeBuffer_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMessage']]),
    IRpcChannelBuffer_FreeBuffer_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcChannelBuffer_GetDestCtx_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']]),
    IRpcChannelBuffer_GetDestCtx_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcChannelBuffer_IsConnected_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer), 'This']]),
    IRpcChannelBuffer_IsConnected_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IRpcChannelBuffer2: T.GUID,
    IRpcChannelBuffer2_GetProtocolVersion_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer2), 'This'], [Pointer(T.DWORD), 'pdwVersion']]),
    IRpcChannelBuffer2_GetProtocolVersion_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IRpcChannelBuffer3: T.GUID,
    IRpcChannelBuffer3_Send_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.ULONG), 'pulStatus']]),
    IRpcChannelBuffer3_Send_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcChannelBuffer3_Receive_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [T.ULONG, 'ulSize'], [Pointer(T.ULONG), 'pulStatus']]),
    IRpcChannelBuffer3_Receive_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcChannelBuffer3_Cancel_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg']]),
    IRpcChannelBuffer3_Cancel_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcChannelBuffer3_GetCallContext_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'pInterface']]),
    IRpcChannelBuffer3_GetCallContext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcChannelBuffer3_GetDestCtxEx_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']]),
    IRpcChannelBuffer3_GetDestCtxEx_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcChannelBuffer3_GetState_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.DWORD), 'pState']]),
    IRpcChannelBuffer3_GetState_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcChannelBuffer3_RegisterAsync_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcChannelBuffer3), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.IAsyncManager), 'pAsyncMgr']]),
    IRpcChannelBuffer3_RegisterAsync_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IAsyncRpcChannelBuffer: T.GUID,
    IAsyncRpcChannelBuffer_Send_Proxy: Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.ISynchronize), 'pSync'], [Pointer(T.ULONG), 'pulStatus']]),
    IAsyncRpcChannelBuffer_Send_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IAsyncRpcChannelBuffer_Receive_Proxy: Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.ULONG), 'pulStatus']]),
    IAsyncRpcChannelBuffer_Receive_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IAsyncRpcChannelBuffer_GetDestCtxEx_Proxy: Fn(T.HRESULT, [[Pointer(T.IAsyncRpcChannelBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [Pointer(T.DWORD), 'pdwDestContext'], [Pointer(Pointer(null)), 'ppvDestContext']]),
    IAsyncRpcChannelBuffer_GetDestCtxEx_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IRpcSyntaxNegotiate: T.GUID,
    IRpcSyntaxNegotiate_NegotiateSyntax_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcSyntaxNegotiate), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg']]),
    IRpcSyntaxNegotiate_NegotiateSyntax_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IRpcProxyBuffer: T.GUID,
    IRpcProxyBuffer_Connect_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcProxyBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer']]),
    IRpcProxyBuffer_Connect_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcProxyBuffer_Disconnect_Proxy: Fn(null, [[Pointer(T.IRpcProxyBuffer), 'This']]),
    IRpcProxyBuffer_Disconnect_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IRpcStubBuffer: T.GUID,
    IRpcStubBuffer_Connect_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IUnknown), 'pUnkServer']]),
    IRpcStubBuffer_Connect_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcStubBuffer_Disconnect_Proxy: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This']]),
    IRpcStubBuffer_Disconnect_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcStubBuffer_Invoke_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.RPCOLEMESSAGE), '_prpcmsg'], [Pointer(T.IRpcChannelBuffer), '_pRpcChannelBuffer']]),
    IRpcStubBuffer_Invoke_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcStubBuffer_IsIIDSupported_Proxy: Fn(Pointer(T.IRpcStubBuffer), [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IID), 'riid']]),
    IRpcStubBuffer_IsIIDSupported_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcStubBuffer_CountRefs_Proxy: Fn(T.ULONG, [[Pointer(T.IRpcStubBuffer), 'This']]),
    IRpcStubBuffer_CountRefs_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcStubBuffer_DebugServerQueryInterface_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(Pointer(null)), 'ppv']]),
    IRpcStubBuffer_DebugServerQueryInterface_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcStubBuffer_DebugServerRelease_Proxy: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(null), 'pv']]),
    IRpcStubBuffer_DebugServerRelease_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IPSFactoryBuffer: T.GUID,
    IPSFactoryBuffer_CreateProxy_Proxy: Fn(T.HRESULT, [[Pointer(T.IPSFactoryBuffer), 'This'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IRpcProxyBuffer)), 'ppProxy'], [Pointer(Pointer(null)), 'ppv']]),
    IPSFactoryBuffer_CreateProxy_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPSFactoryBuffer_CreateStub_Proxy: Fn(T.HRESULT, [[Pointer(T.IPSFactoryBuffer), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'pUnkServer'], [Pointer(Pointer(T.IRpcStubBuffer)), 'ppStub']]),
    IPSFactoryBuffer_CreateStub_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IChannelHook: T.GUID,
    IChannelHook_ClientGetSize_Proxy: Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [Pointer(T.ULONG), 'pDataSize']]),
    IChannelHook_ClientGetSize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IChannelHook_ClientFillBuffer_Proxy: Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [Pointer(T.ULONG), 'pDataSize'], [Pointer(null), 'pDataBuffer']]),
    IChannelHook_ClientFillBuffer_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IChannelHook_ClientNotify_Proxy: Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [T.ULONG, 'cbDataSize'], [Pointer(null), 'pDataBuffer'], [T.DWORD, 'lDataRep'], [T.HRESULT, 'hrFault']]),
    IChannelHook_ClientNotify_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IChannelHook_ServerNotify_Proxy: Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [T.ULONG, 'cbDataSize'], [Pointer(null), 'pDataBuffer'], [T.DWORD, 'lDataRep']]),
    IChannelHook_ServerNotify_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IChannelHook_ServerGetSize_Proxy: Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [T.HRESULT, 'hrFault'], [Pointer(T.ULONG), 'pDataSize']]),
    IChannelHook_ServerGetSize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IChannelHook_ServerFillBuffer_Proxy: Fn(null, [[Pointer(T.IChannelHook), 'This'], [Pointer(T.GUID), 'uExtent'], [Pointer(T.IID), 'riid'], [Pointer(T.ULONG), 'pDataSize'], [Pointer(null), 'pDataBuffer'], [T.HRESULT, 'hrFault']]),
    IChannelHook_ServerFillBuffer_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    FMTID_SummaryInformation: T.FMTID,
    FMTID_DocSummaryInformation: T.FMTID,
    FMTID_UserDefinedProperties: T.FMTID,
    IID_IClientSecurity: T.GUID,
    IClientSecurity_QueryBlanket_Proxy: Fn(T.HRESULT, [[Pointer(T.IClientSecurity), 'This'], [Pointer(T.IUnknown), 'pProxy'], [Pointer(T.DWORD), 'pAuthnSvc'], [Pointer(T.DWORD), 'pAuthzSvc'], [Pointer(Pointer(T.OLECHAR)), 'pServerPrincName'], [Pointer(T.DWORD), 'pAuthnLevel'], [Pointer(T.DWORD), 'pImpLevel'], [Pointer(Pointer(null)), 'pAuthInfo'], [Pointer(T.DWORD), 'pCapabilities']]),
    IClientSecurity_QueryBlanket_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IClientSecurity_SetBlanket_Proxy: Fn(T.HRESULT, [[Pointer(T.IClientSecurity), 'This'], [Pointer(T.IUnknown), 'pProxy'], [T.DWORD, 'AuthnSvc'], [T.DWORD, 'AuthzSvc'], [Pointer(T.OLECHAR), 'pServerPrincName'], [T.DWORD, 'AuthnLevel'], [T.DWORD, 'ImpLevel'], [Pointer(null), 'pAuthInfo'], [T.DWORD, 'Capabilities']]),
    IClientSecurity_SetBlanket_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IClientSecurity_CopyProxy_Proxy: Fn(T.HRESULT, [[Pointer(T.IClientSecurity), 'This'], [Pointer(T.IUnknown), 'pProxy'], [Pointer(Pointer(T.IUnknown)), 'ppCopy']]),
    IClientSecurity_CopyProxy_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IServerSecurity: T.GUID,
    IServerSecurity_QueryBlanket_Proxy: Fn(T.HRESULT, [[Pointer(T.IServerSecurity), 'This'], [Pointer(T.DWORD), 'pAuthnSvc'], [Pointer(T.DWORD), 'pAuthzSvc'], [Pointer(Pointer(T.OLECHAR)), 'pServerPrincName'], [Pointer(T.DWORD), 'pAuthnLevel'], [Pointer(T.DWORD), 'pImpLevel'], [Pointer(Pointer(null)), 'pPrivs'], [Pointer(T.DWORD), 'pCapabilities']]),
    IServerSecurity_QueryBlanket_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IServerSecurity_ImpersonateClient_Proxy: Fn(T.HRESULT, [[Pointer(T.IServerSecurity), 'This']]),
    IServerSecurity_ImpersonateClient_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IServerSecurity_RevertToSelf_Proxy: Fn(T.HRESULT, [[Pointer(T.IServerSecurity), 'This']]),
    IServerSecurity_RevertToSelf_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IServerSecurity_IsImpersonating_Proxy: Fn(T.BOOL, [[Pointer(T.IServerSecurity), 'This']]),
    IServerSecurity_IsImpersonating_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IAsyncSetup: T.GUID,
    IAsyncSetup_GetAsyncManager_Proxy: Fn(T.HRESULT, [[Pointer(T.IAsyncSetup), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'pOuter'], [T.DWORD, 'dwFlags'], [Pointer(Pointer(T.IUnknown)), 'ppInner'], [Pointer(Pointer(T.IAsyncManager)), 'ppAsyncMgr']]),
    IAsyncSetup_GetAsyncManager_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IDirectWriterLock: T.GUID,
    IDirectWriterLock_WaitForWriteAccess_Proxy: Fn(T.HRESULT, [[Pointer(T.IDirectWriterLock), 'This'], [T.DWORD, 'dwTimeout']]),
    IDirectWriterLock_WaitForWriteAccess_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDirectWriterLock_ReleaseWriteAccess_Proxy: Fn(T.HRESULT, [[Pointer(T.IDirectWriterLock), 'This']]),
    IDirectWriterLock_ReleaseWriteAccess_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDirectWriterLock_HaveWriteAccess_Proxy: Fn(T.HRESULT, [[Pointer(T.IDirectWriterLock), 'This']]),
    IDirectWriterLock_HaveWriteAccess_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ISynchronize: T.GUID,
    ISynchronize_Wait_Proxy: Fn(T.HRESULT, [[Pointer(T.ISynchronize), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwMilliseconds']]),
    ISynchronize_Wait_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ISynchronize_Signal_Proxy: Fn(T.HRESULT, [[Pointer(T.ISynchronize), 'This']]),
    ISynchronize_Signal_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ISynchronize_Reset_Proxy: Fn(T.HRESULT, [[Pointer(T.ISynchronize), 'This']]),
    ISynchronize_Reset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ISynchronizeHandle: T.GUID,
    ISynchronizeHandle_GetHandle_Proxy: Fn(T.HRESULT, [[Pointer(T.ISynchronizeHandle), 'This'], [Pointer(T.HANDLE), 'ph']]),
    ISynchronizeHandle_GetHandle_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ISynchronizeEvent: T.GUID,
    ISynchronizeEvent_SetEventHandle_Proxy: Fn(T.HRESULT, [[Pointer(T.ISynchronizeEvent), 'This'], [Pointer(T.HANDLE), 'ph']]),
    ISynchronizeEvent_SetEventHandle_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ISynchronizeContainer: T.GUID,
    ISynchronizeContainer_AddSynchronize_Proxy: Fn(T.HRESULT, [[Pointer(T.ISynchronizeContainer), 'This'], [Pointer(T.ISynchronize), 'pSync']]),
    ISynchronizeContainer_AddSynchronize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ISynchronizeContainer_WaitMultiple_Proxy: Fn(T.HRESULT, [[Pointer(T.ISynchronizeContainer), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwTimeOut'], [Pointer(Pointer(T.ISynchronize)), 'ppSync']]),
    ISynchronizeContainer_WaitMultiple_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ISynchronizeMutex: T.GUID,
    ISynchronizeMutex_ReleaseMutex_Proxy: Fn(T.HRESULT, [[Pointer(T.ISynchronizeMutex), 'This']]),
    ISynchronizeMutex_ReleaseMutex_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ICancelMethodCalls: T.GUID,
    ICancelMethodCalls_Cancel_Proxy: Fn(T.HRESULT, [[Pointer(T.ICancelMethodCalls), 'This'], [T.ULONG, 'ulSeconds']]),
    ICancelMethodCalls_Cancel_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICancelMethodCalls_TestCancel_Proxy: Fn(T.HRESULT, [[Pointer(T.ICancelMethodCalls), 'This']]),
    ICancelMethodCalls_TestCancel_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IAsyncManager: T.GUID,
    IAsyncManager_CompleteCall_Proxy: Fn(T.HRESULT, [[Pointer(T.IAsyncManager), 'This'], [T.HRESULT, 'Result']]),
    IAsyncManager_CompleteCall_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IAsyncManager_GetCallContext_Proxy: Fn(T.HRESULT, [[Pointer(T.IAsyncManager), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'pInterface']]),
    IAsyncManager_GetCallContext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IAsyncManager_GetState_Proxy: Fn(T.HRESULT, [[Pointer(T.IAsyncManager), 'This'], [Pointer(T.ULONG), 'pulStateFlags']]),
    IAsyncManager_GetState_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ICallFactory: T.GUID,
    ICallFactory_CreateCall_Proxy: Fn(T.HRESULT, [[Pointer(T.ICallFactory), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'pCtrlUnk'], [Pointer(T.IID), 'riid2'], [Pointer(Pointer(T.IUnknown)), 'ppv']]),
    ICallFactory_CreateCall_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IRpcOptions: T.GUID,
    IRpcOptions_Set_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcOptions), 'This'], [Pointer(T.IUnknown), 'pPrx'], [T.DWORD, 'dwProperty'], [T.ULONG_PTR, 'dwValue']]),
    IRpcOptions_Set_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcOptions_Query_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcOptions), 'This'], [Pointer(T.IUnknown), 'pPrx'], [T.DWORD, 'dwProperty'], [Pointer(T.ULONG_PTR), 'pdwValue']]),
    IRpcOptions_Query_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IRpcHelper: T.GUID,
    IRpcHelper_GetDCOMProtocolVersion_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcHelper), 'This'], [Pointer(T.DWORD), 'pComVersion']]),
    IRpcHelper_GetDCOMProtocolVersion_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRpcHelper_GetIIDFromOBJREF_Proxy: Fn(T.HRESULT, [[Pointer(T.IRpcHelper), 'This'], [Pointer(null), 'pObjRef'], [Pointer(Pointer(T.IID)), 'piid']]),
    IRpcHelper_GetIIDFromOBJREF_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IReleaseMarshalBuffers: T.GUID,
    IReleaseMarshalBuffers_ReleaseMarshalBuffer_Proxy: Fn(T.HRESULT, [[Pointer(T.IReleaseMarshalBuffers), 'This'], [Pointer(T.RPCOLEMESSAGE), 'pMsg'], [T.DWORD, 'dwFlags'], [Pointer(T.IUnknown), 'pChnl']]),
    IReleaseMarshalBuffers_ReleaseMarshalBuffer_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IWaitMultiple: T.GUID,
    IWaitMultiple_WaitMultiple_Proxy: Fn(T.HRESULT, [[Pointer(T.IWaitMultiple), 'This'], [T.DWORD, 'timeout'], [Pointer(Pointer(T.ISynchronize)), 'pSync']]),
    IWaitMultiple_WaitMultiple_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IWaitMultiple_AddSynchronize_Proxy: Fn(T.HRESULT, [[Pointer(T.IWaitMultiple), 'This'], [Pointer(T.ISynchronize), 'pSync']]),
    IWaitMultiple_AddSynchronize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IUrlMon: T.GUID,
    IUrlMon_AsyncGetClassBits_Proxy: Fn(T.HRESULT, [[Pointer(T.IUrlMon), 'This'], [Pointer(T.CLSID), 'rclsid'], [T.LPCWSTR, 'pszTYPE'], [T.LPCWSTR, 'pszExt'], [T.DWORD, 'dwFileVersionMS'], [T.DWORD, 'dwFileVersionLS'], [T.LPCWSTR, 'pszCodeBase'], [Pointer(T.IBindCtx), 'pbc'], [T.DWORD, 'dwClassContext'], [Pointer(T.IID), 'riid'], [T.DWORD, 'flags']]),
    IUrlMon_AsyncGetClassBits_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IForegroundTransfer: T.GUID,
    IForegroundTransfer_AllowForegroundTransfer_Proxy: Fn(T.HRESULT, [[Pointer(T.IForegroundTransfer), 'This'], [Pointer(null), 'lpvReserved']]),
    IForegroundTransfer_AllowForegroundTransfer_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IAddrTrackingControl: T.GUID,
    IAddrTrackingControl_EnableCOMDynamicAddrTracking_Proxy: Fn(T.HRESULT, [[Pointer(T.IAddrTrackingControl), 'This']]),
    IAddrTrackingControl_EnableCOMDynamicAddrTracking_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IAddrTrackingControl_DisableCOMDynamicAddrTracking_Proxy: Fn(T.HRESULT, [[Pointer(T.IAddrTrackingControl), 'This']]),
    IAddrTrackingControl_DisableCOMDynamicAddrTracking_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IAddrExclusionControl: T.GUID,
    IAddrExclusionControl_GetCurrentAddrExclusionList_Proxy: Fn(T.HRESULT, [[Pointer(T.IAddrExclusionControl), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppEnumerator']]),
    IAddrExclusionControl_GetCurrentAddrExclusionList_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IAddrExclusionControl_UpdateAddrExclusionList_Proxy: Fn(T.HRESULT, [[Pointer(T.IAddrExclusionControl), 'This'], [Pointer(T.IUnknown), 'pEnumerator']]),
    IAddrExclusionControl_UpdateAddrExclusionList_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IComThreadingInfo: T.GUID,
    IComThreadingInfo_GetCurrentApartmentType_Proxy: Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.APTTYPE), 'pAptType']]),
    IComThreadingInfo_GetCurrentApartmentType_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IComThreadingInfo_GetCurrentThreadType_Proxy: Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.THDTYPE), 'pThreadType']]),
    IComThreadingInfo_GetCurrentThreadType_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IComThreadingInfo_GetCurrentLogicalThreadId_Proxy: Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.GUID), 'pguidLogicalThreadId']]),
    IComThreadingInfo_GetCurrentLogicalThreadId_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IComThreadingInfo_SetCurrentLogicalThreadId_Proxy: Fn(T.HRESULT, [[Pointer(T.IComThreadingInfo), 'This'], [Pointer(T.GUID), 'rguid']]),
    IComThreadingInfo_SetCurrentLogicalThreadId_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IProcessInitControl: T.GUID,
    IProcessInitControl_ResetInitializerTimeout_Proxy: Fn(T.HRESULT, [[Pointer(T.IProcessInitControl), 'This'], [T.DWORD, 'dwSecondsRemaining']]),
    IProcessInitControl_ResetInitializerTimeout_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IInitializeSpy: T.GUID,
    IInitializeSpy_PreInitialize_Proxy: Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [T.DWORD, 'dwCoInit'], [T.DWORD, 'dwCurThreadAptRefs']]),
    IInitializeSpy_PreInitialize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInitializeSpy_PostInitialize_Proxy: Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [T.HRESULT, 'hrCoInit'], [T.DWORD, 'dwCoInit'], [T.DWORD, 'dwNewThreadAptRefs']]),
    IInitializeSpy_PostInitialize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInitializeSpy_PreUninitialize_Proxy: Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [T.DWORD, 'dwCurThreadAptRefs']]),
    IInitializeSpy_PreUninitialize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInitializeSpy_PostUninitialize_Proxy: Fn(T.HRESULT, [[Pointer(T.IInitializeSpy), 'This'], [T.DWORD, 'dwNewThreadAptRefs']]),
    IInitializeSpy_PostUninitialize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IThumbnailExtractor: T.GUID,
    IThumbnailExtractor_ExtractThumbnail_Proxy: Fn(T.HRESULT, [[Pointer(T.IThumbnailExtractor), 'This'], [Pointer(T.IStorage), 'pStg'], [T.ULONG, 'ulLength'], [T.ULONG, 'ulHeight'], [Pointer(T.ULONG), 'pulOutputLength'], [Pointer(T.ULONG), 'pulOutputHeight'], [Pointer(T.HBITMAP), 'phOutputBitmap']]),
    IThumbnailExtractor_ExtractThumbnail_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IThumbnailExtractor_OnFileUpdated_Proxy: Fn(T.HRESULT, [[Pointer(T.IThumbnailExtractor), 'This'], [Pointer(T.IStorage), 'pStg']]),
    IThumbnailExtractor_OnFileUpdated_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    SNB_UserSize: Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.SNB)]]),
    SNB_UserMarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.SNB)]]),
    SNB_UserUnmarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.SNB)]]),
    SNB_UserFree: Fn(null, [[Pointer(T.ULONG)], [Pointer(T.SNB)]]),
    CLIPFORMAT_UserSize: Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.CLIPFORMAT)]]),
    CLIPFORMAT_UserMarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.CLIPFORMAT)]]),
    CLIPFORMAT_UserUnmarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.CLIPFORMAT)]]),
    CLIPFORMAT_UserFree: Fn(null, [[Pointer(T.ULONG)], [Pointer(T.CLIPFORMAT)]]),
    STGMEDIUM_UserSize: Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.STGMEDIUM)]]),
    STGMEDIUM_UserMarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.STGMEDIUM)]]),
    STGMEDIUM_UserUnmarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.STGMEDIUM)]]),
    STGMEDIUM_UserFree: Fn(null, [[Pointer(T.ULONG)], [Pointer(T.STGMEDIUM)]]),
    ASYNC_STGMEDIUM_UserSize: Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.ASYNC_STGMEDIUM)]]),
    ASYNC_STGMEDIUM_UserMarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.ASYNC_STGMEDIUM)]]),
    ASYNC_STGMEDIUM_UserUnmarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.ASYNC_STGMEDIUM)]]),
    ASYNC_STGMEDIUM_UserFree: Fn(null, [[Pointer(T.ULONG)], [Pointer(T.ASYNC_STGMEDIUM)]]),
    FLAG_STGMEDIUM_UserSize: Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.FLAG_STGMEDIUM)]]),
    FLAG_STGMEDIUM_UserMarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.FLAG_STGMEDIUM)]]),
    FLAG_STGMEDIUM_UserUnmarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.FLAG_STGMEDIUM)]]),
    FLAG_STGMEDIUM_UserFree: Fn(null, [[Pointer(T.ULONG)], [Pointer(T.FLAG_STGMEDIUM)]]),
    HBITMAP_UserSize: Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.HBITMAP)]]),
    HBITMAP_UserMarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HBITMAP)]]),
    HBITMAP_UserUnmarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HBITMAP)]]),
    HBITMAP_UserFree: Fn(null, [[Pointer(T.ULONG)], [Pointer(T.HBITMAP)]]),
    IID_IRpcChannel: T.IID,
    IID_IRpcStub: T.IID,
    IID_IStubManager: T.IID,
    IID_IRpcProxy: T.IID,
    IID_IProxyManager: T.IID,
    IID_IPSFactory: T.IID,
    IID_IInternalMoniker: T.IID,
    IID_IDfReserved1: T.IID,
    IID_IDfReserved2: T.IID,
    IID_IDfReserved3: T.IID,
    CLSID_StdMarshal: T.CLSID,
    CLSID_AggStdMarshal: T.CLSID,
    CLSID_StdAsyncActManager: T.CLSID,
    IID_IStub: T.IID,
    IID_IProxy: T.IID,
    IID_IEnumGeneric: T.IID,
    IID_IEnumHolder: T.IID,
    IID_IEnumCallback: T.IID,
    IID_IOleManager: T.IID,
    IID_IOlePresObj: T.IID,
    IID_IDebug: T.IID,
    IID_IDebugStream: T.IID,
    CLSID_PSGenObject: T.CLSID,
    CLSID_PSClientSite: T.CLSID,
    CLSID_PSClassObject: T.CLSID,
    CLSID_PSInPlaceActive: T.CLSID,
    CLSID_PSInPlaceFrame: T.CLSID,
    CLSID_PSDragDrop: T.CLSID,
    CLSID_PSBindCtx: T.CLSID,
    CLSID_PSEnumerators: T.CLSID,
    CLSID_StaticMetafile: T.CLSID,
    CLSID_StaticDib: T.CLSID,
    CID_CDfsVolume: T.CLSID,
    CLSID_DCOMAccessControl: T.CLSID,
    CLSID_StdGlobalInterfaceTable: T.CLSID,
    CLSID_ComBinding: T.CLSID,
    CLSID_StdEvent: T.CLSID,
    CLSID_ManualResetEvent: T.CLSID,
    CLSID_SynchronizeContainer: T.CLSID,
    CLSID_CCDFormKrnl: T.CLSID,
    CLSID_CCDPropertyPage: T.CLSID,
    CLSID_CCDFormDialog: T.CLSID,
    CLSID_CCDCommandButton: T.CLSID,
    CLSID_CCDComboBox: T.CLSID,
    CLSID_CCDTextBox: T.CLSID,
    CLSID_CCDCheckBox: T.CLSID,
    CLSID_CCDLabel: T.CLSID,
    CLSID_CCDOptionButton: T.CLSID,
    CLSID_CCDListBox: T.CLSID,
    CLSID_CCDScrollBar: T.CLSID,
    CLSID_CCDGroupBox: T.CLSID,
    CLSID_CCDGeneralPropertyPage: T.CLSID,
    CLSID_CCDGenericPropertyPage: T.CLSID,
    CLSID_CCDFontPropertyPage: T.CLSID,
    CLSID_CCDColorPropertyPage: T.CLSID,
    CLSID_CCDLabelPropertyPage: T.CLSID,
    CLSID_CCDCheckBoxPropertyPage: T.CLSID,
    CLSID_CCDTextBoxPropertyPage: T.CLSID,
    CLSID_CCDOptionButtonPropertyPage: T.CLSID,
    CLSID_CCDListBoxPropertyPage: T.CLSID,
    CLSID_CCDCommandButtonPropertyPage: T.CLSID,
    CLSID_CCDComboBoxPropertyPage: T.CLSID,
    CLSID_CCDScrollBarPropertyPage: T.CLSID,
    CLSID_CCDGroupBoxPropertyPage: T.CLSID,
    CLSID_CCDXObjectPropertyPage: T.CLSID,
    CLSID_CStdPropertyFrame: T.CLSID,
    CLSID_CFormPropertyPage: T.CLSID,
    CLSID_CGridPropertyPage: T.CLSID,
    CLSID_CWSJArticlePage: T.CLSID,
    CLSID_CSystemPage: T.CLSID,
    CLSID_IdentityUnmarshal: T.CLSID,
    CLSID_InProcFreeMarshaler: T.CLSID,
    CLSID_Picture_Metafile: T.CLSID,
    CLSID_Picture_EnhMetafile: T.CLSID,
    CLSID_Picture_Dib: T.CLSID,
    GUID_TRISTATE: T.GUID,
    CoBuildVersion: Fn(T.DWORD, [[null]]),
    CoInitialize: Fn(T.HRESULT, [[T.LPVOID, 'lpReserved']]),
    CoInitializeEx: Fn(T.HRESULT, [[T.LPVOID, 'lpReserved'], [T.DWORD, 'dwCoInit']]),
    CoUninitialize: Fn(null, [[null]]),
    CoGetCurrentProcess: Fn(T.DWORD, [[null]]),
    CoLoadLibrary: Fn(T.HINSTANCE, [[T.LPOLESTR, 'lpszLibName'], [T.BOOL, 'bAutoFree']]),
    CoFreeAllLibraries: Fn(null, [[null]]),
    CoFreeLibrary: Fn(null, [[T.HINSTANCE, 'hLibrary']]),
    CoFreeUnusedLibraries: Fn(null, [[null]]),
    CoFreeUnusedLibrariesEx: Fn(null, [[T.DWORD, 'dwUnloadDelay'], [T.DWORD, 'dwReserved']]),
    CoCreateInstance: Fn(T.HRESULT, [[Pointer(T.CLSID), 'rclsid'], [T.LPUNKNOWN, 'pUnkOuter'], [T.DWORD, 'dwClsContext'], [Pointer(T.IID), 'iid'], [Pointer(T.LPVOID), 'ppv']]),
    CoCreateInstanceEx: Fn(T.HRESULT, [[Pointer(T.CLSID), 'rclsid'], [T.LPUNKNOWN, 'pUnkOuter'], [T.DWORD, 'dwClsContext'], [Pointer(T.COSERVERINFO), 'pServerInfo'], [T.ULONG, 'cmq'], [Pointer(T.MULTI_QI), 'pResults']]),
    CoGetInstanceFromFile: Fn(T.HRESULT, [[Pointer(T.COSERVERINFO), 'pServerInfo'], [Pointer(T.CLSID), 'pClsid'], [Pointer(T.IUnknown), 'punkOuter'], [T.DWORD, 'dwClsCtx'], [T.DWORD, 'grfMode'], [Pointer(T.OLECHAR), 'pwszName'], [T.DWORD, 'dwCount'], [Pointer(T.MULTI_QI), 'pResults']]),
    CoGetInstanceFromIStorage: Fn(T.HRESULT, [[Pointer(T.COSERVERINFO), 'pServerInfo'], [Pointer(T.CLSID), 'pClsid'], [Pointer(T.IUnknown), 'punkOuter'], [T.DWORD, 'dwClsCtx'], [Pointer(T.IStorage), 'pstg'], [T.DWORD, 'dwCount'], [Pointer(T.MULTI_QI), 'pResults']]),
    CoGetMalloc: Fn(T.HRESULT, [[T.DWORD, 'dwMemContext'], [Pointer(T.LPMALLOC), 'lpMalloc']]),
    CoTaskMemAlloc: Fn(T.LPVOID, [[T.ULONG, 'size']]),
    CoTaskMemFree: Fn(null, [[T.LPVOID, 'ptr']]),
    CoTaskMemRealloc: Fn(T.LPVOID, [[T.LPVOID, 'ptr'], [T.ULONG, 'size']]),
    CoRegisterMallocSpy: Fn(T.HRESULT, [[T.LPMALLOCSPY, 'pMallocSpy']]),
    CoRevokeMallocSpy: Fn(T.HRESULT, [[null]]),
    CoGetContextToken: Fn(T.HRESULT, [[Pointer(T.ULONG_PTR), 'token']]),
    CoGetClassObject: Fn(T.HRESULT, [[Pointer(T.CLSID), 'rclsid'], [T.DWORD, 'dwClsContext'], [Pointer(T.COSERVERINFO), 'pServerInfo'], [Pointer(T.IID), 'iid'], [Pointer(T.LPVOID), 'ppv']]),
    CoRegisterClassObject: Fn(T.HRESULT, [[Pointer(T.CLSID), 'rclsid'], [T.LPUNKNOWN, 'pUnk'], [T.DWORD, 'dwClsContext'], [T.DWORD, 'flags'], [T.LPDWORD, 'lpdwRegister']]),
    CoRevokeClassObject: Fn(T.HRESULT, [[T.DWORD, 'dwRegister']]),
    CoGetPSClsid: Fn(T.HRESULT, [[Pointer(T.IID), 'riid'], [Pointer(T.CLSID), 'pclsid']]),
    CoRegisterPSClsid: Fn(T.HRESULT, [[Pointer(T.IID), 'riid'], [Pointer(T.CLSID), 'rclsid']]),
    CoRegisterSurrogate: Fn(T.HRESULT, [[T.LPSURROGATE, 'pSurrogate']]),
    CoSuspendClassObjects: Fn(T.HRESULT, [[null]]),
    CoResumeClassObjects: Fn(T.HRESULT, [[null]]),
    CoAddRefServerProcess: Fn(T.ULONG, [[null]]),
    CoReleaseServerProcess: Fn(T.ULONG, [[null]]),
    CoCreateFreeThreadedMarshaler: Fn(T.HRESULT, [[T.LPUNKNOWN, 'punkOuter'], [Pointer(T.LPUNKNOWN), 'ppunkMarshal']]),
    CoGetInterfaceAndReleaseStream: Fn(T.HRESULT, [[T.LPSTREAM, 'pStm'], [Pointer(T.IID), 'iid'], [Pointer(T.LPVOID), 'ppv']]),
    CoGetMarshalSizeMax: Fn(T.HRESULT, [[Pointer(T.ULONG), 'pulSize'], [Pointer(T.IID), 'riid'], [T.LPUNKNOWN, 'pUnk'], [T.DWORD, 'dwDestContext'], [T.LPVOID, 'pvDestContext'], [T.DWORD, 'mshlflags']]),
    CoGetStandardMarshal: Fn(T.HRESULT, [[Pointer(T.IID), 'riid'], [T.LPUNKNOWN, 'pUnk'], [T.DWORD, 'dwDestContext'], [T.LPVOID, 'pvDestContext'], [T.DWORD, 'mshlflags'], [Pointer(T.LPMARSHAL), 'ppMarshal']]),
    CoMarshalHresult: Fn(T.HRESULT, [[T.LPSTREAM, 'pstm'], [T.HRESULT, 'hresult']]),
    CoMarshalInterface: Fn(T.HRESULT, [[T.LPSTREAM, 'pStm'], [Pointer(T.IID), 'riid'], [T.LPUNKNOWN, 'pUnk'], [T.DWORD, 'dwDestContext'], [T.LPVOID, 'pvDestContext'], [T.DWORD, 'mshlflags']]),
    CoMarshalInterThreadInterfaceInStream: Fn(T.HRESULT, [[Pointer(T.IID), 'riid'], [T.LPUNKNOWN, 'pUnk'], [Pointer(T.LPSTREAM), 'ppStm']]),
    CoReleaseMarshalData: Fn(T.HRESULT, [[T.LPSTREAM, 'pStm']]),
    CoDisconnectObject: Fn(T.HRESULT, [[T.LPUNKNOWN, 'lpUnk'], [T.DWORD, 'reserved']]),
    CoUnmarshalHresult: Fn(T.HRESULT, [[T.LPSTREAM, 'pstm'], [Pointer(T.HRESULT), 'phresult']]),
    CoUnmarshalInterface: Fn(T.HRESULT, [[T.LPSTREAM, 'pStm'], [Pointer(T.IID), 'riid'], [Pointer(T.LPVOID), 'ppv']]),
    CoLockObjectExternal: Fn(T.HRESULT, [[T.LPUNKNOWN, 'pUnk'], [T.BOOL, 'fLock'], [T.BOOL, 'fLastUnlockReleases']]),
    CoIsHandlerConnected: Fn(T.BOOL, [[T.LPUNKNOWN, 'pUnk']]),
    CoInitializeSecurity: Fn(T.HRESULT, [[T.PSECURITY_DESCRIPTOR, 'pSecDesc'], [T.LONG, 'cAuthSvc'], [Pointer(T.SOLE_AUTHENTICATION_SERVICE), 'asAuthSvc'], [Pointer(null), 'pReserved1'], [T.DWORD, 'dwAuthnLevel'], [T.DWORD, 'dwImpLevel'], [Pointer(null), 'pReserved2'], [T.DWORD, 'dwCapabilities'], [Pointer(null), 'pReserved3']]),
    CoGetCallContext: Fn(T.HRESULT, [[Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppInterface']]),
    CoSwitchCallContext: Fn(T.HRESULT, [[Pointer(T.IUnknown), 'pContext'], [Pointer(Pointer(T.IUnknown)), 'ppOldContext']]),
    CoQueryAuthenticationServices: Fn(T.HRESULT, [[Pointer(T.DWORD), 'pcAuthSvc'], [Pointer(Pointer(T.SOLE_AUTHENTICATION_SERVICE)), 'asAuthSvc']]),
    CoQueryProxyBlanket: Fn(T.HRESULT, [[Pointer(T.IUnknown), 'pProxy'], [Pointer(T.DWORD), 'pwAuthnSvc'], [Pointer(T.DWORD), 'pAuthzSvc'], [Pointer(Pointer(T.OLECHAR)), 'pServerPrincName'], [Pointer(T.DWORD), 'pAuthnLevel'], [Pointer(T.DWORD), 'pImpLevel'], [Pointer(T.RPC_AUTH_IDENTITY_HANDLE), 'pAuthInfo'], [Pointer(T.DWORD), 'pCapabilities']]),
    CoSetProxyBlanket: Fn(T.HRESULT, [[Pointer(T.IUnknown), 'pProxy'], [T.DWORD, 'dwAuthnSvc'], [T.DWORD, 'dwAuthzSvc'], [Pointer(T.OLECHAR), 'pServerPrincName'], [T.DWORD, 'dwAuthnLevel'], [T.DWORD, 'dwImpLevel'], [T.RPC_AUTH_IDENTITY_HANDLE, 'pAuthInfo'], [T.DWORD, 'dwCapabilities']]),
    CoCopyProxy: Fn(T.HRESULT, [[Pointer(T.IUnknown), 'pProxy'], [Pointer(Pointer(T.IUnknown)), 'ppCopy']]),
    CoImpersonateClient: Fn(T.HRESULT, [[null]]),
    CoQueryClientBlanket: Fn(T.HRESULT, [[Pointer(T.DWORD), 'pAuthnSvc'], [Pointer(T.DWORD), 'pAuthzSvc'], [Pointer(Pointer(T.OLECHAR)), 'pServerPrincName'], [Pointer(T.DWORD), 'pAuthnLevel'], [Pointer(T.DWORD), 'pImpLevel'], [Pointer(T.RPC_AUTHZ_HANDLE), 'pPrivs'], [Pointer(T.DWORD), 'pCapabilities']]),
    CoRevertToSelf: Fn(T.HRESULT, [[null]]),
    CoGetTreatAsClass: Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsidOld'], [T.LPCLSID, 'pClsidNew']]),
    CoTreatAsClass: Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsidOld'], [Pointer(T.CLSID), 'clsidNew']]),
    CoAllowSetForegroundWindow: Fn(T.HRESULT, [[Pointer(T.IUnknown), 'pUnk'], [T.LPVOID, 'lpvReserved']]),
    CoGetObjectContext: Fn(T.HRESULT, [[Pointer(T.IID), 'riid'], [Pointer(T.LPVOID), 'ppv']]),
    CoCreateGuid: Fn(T.HRESULT, [[Pointer(T.GUID), 'pguid']]),
    CoIsOle1Class: Fn(T.BOOL, [[Pointer(T.CLSID), 'rclsid']]),
    CoDosDateTimeToFileTime: Fn(T.BOOL, [[T.WORD, 'nDosDate'], [T.WORD, 'nDosTime'], [Pointer(T.FILETIME), 'lpFileTime']]),
    CoFileTimeToDosDateTime: Fn(T.BOOL, [[Pointer(T.FILETIME), 'lpFileTime'], [Pointer(T.WORD), 'lpDosDate'], [Pointer(T.WORD), 'lpDosTime']]),
    CoFileTimeNow: Fn(T.HRESULT, [[Pointer(T.FILETIME), 'lpFileTime']]),
    CoRegisterMessageFilter: Fn(T.HRESULT, [[T.LPMESSAGEFILTER, 'lpMessageFilter'], [Pointer(T.LPMESSAGEFILTER), 'lplpMessageFilter']]),
    CoRegisterChannelHook: Fn(T.HRESULT, [[Pointer(T.GUID), 'ExtensionGuid'], [Pointer(T.IChannelHook), 'pChannelHook']]),
    CoWaitForMultipleHandles: Fn(T.HRESULT, [[T.DWORD, 'dwFlags'], [T.DWORD, 'dwTimeout'], [T.ULONG, 'cHandles'], [T.LPHANDLE, 'pHandles'], [T.LPDWORD, 'lpdwindex']]),
    StringFromCLSID: Fn(T.HRESULT, [[Pointer(T.CLSID), 'id'], [Pointer(T.LPOLESTR)]]),
    CLSIDFromString: Fn(T.HRESULT, [[T.LPCOLESTR], [T.LPCLSID]]),
    CLSIDFromProgID: Fn(T.HRESULT, [[T.LPCOLESTR, 'progid'], [T.LPCLSID, 'riid']]),
    ProgIDFromCLSID: Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsid'], [Pointer(T.LPOLESTR), 'lplpszProgID']]),
    StringFromGUID2: Fn(T.INT, [[Pointer(T.GUID), 'id'], [T.LPOLESTR, 'str'], [T.INT, 'cmax']]),
    DllGetClassObject: Fn(T.HRESULT, [[Pointer(T.CLSID), 'rclsid'], [Pointer(T.IID), 'riid'], [Pointer(T.LPVOID), 'ppv']]),
    DllCanUnloadNow: Fn(T.HRESULT, [[null]]),
    CreateDataAdviseHolder: Fn(T.HRESULT, [[Pointer(T.LPDATAADVISEHOLDER), 'ppDAHolder']]),
    CreateDataCache: Fn(T.HRESULT, [[T.LPUNKNOWN, 'pUnkOuter'], [Pointer(T.CLSID), 'rclsid'], [Pointer(T.IID), 'iid'], [Pointer(T.LPVOID), 'ppv']]),
    BindMoniker: Fn(T.HRESULT, [[T.LPMONIKER, 'pmk'], [T.DWORD, 'grfOpt'], [Pointer(T.IID), 'iidResult'], [Pointer(T.LPVOID), 'ppvResult']]),
    CoGetObject: Fn(T.HRESULT, [[T.LPCWSTR, 'pszName'], [Pointer(T.BIND_OPTS), 'pBindOptions'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppv']]),
    CreateAntiMoniker: Fn(T.HRESULT, [[Pointer(T.LPMONIKER), 'ppmk']]),
    CreateBindCtx: Fn(T.HRESULT, [[T.DWORD, 'reserved'], [Pointer(T.LPBC), 'ppbc']]),
    CreateClassMoniker: Fn(T.HRESULT, [[Pointer(T.CLSID), 'rclsid'], [Pointer(T.LPMONIKER), 'ppmk']]),
    CreateFileMoniker: Fn(T.HRESULT, [[T.LPCOLESTR, 'lpszPathName'], [Pointer(T.LPMONIKER), 'ppmk']]),
    CreateGenericComposite: Fn(T.HRESULT, [[T.LPMONIKER, 'pmkFirst'], [T.LPMONIKER, 'pmkRest'], [Pointer(T.LPMONIKER), 'ppmkComposite']]),
    CreateItemMoniker: Fn(T.HRESULT, [[T.LPCOLESTR, 'lpszDelim'], [T.LPCOLESTR, 'lpszItem'], [Pointer(T.LPMONIKER), 'ppmk']]),
    CreateObjrefMoniker: Fn(T.HRESULT, [[T.LPUNKNOWN, 'punk'], [Pointer(T.LPMONIKER), 'ppmk']]),
    CreatePointerMoniker: Fn(T.HRESULT, [[T.LPUNKNOWN, 'punk'], [Pointer(T.LPMONIKER), 'ppmk']]),
    GetClassFile: Fn(T.HRESULT, [[T.LPCOLESTR, 'filePathName'], [Pointer(T.CLSID), 'pclsid']]),
    GetRunningObjectTable: Fn(T.HRESULT, [[T.DWORD, 'reserved'], [Pointer(T.LPRUNNINGOBJECTTABLE), 'pprot']]),
    MkParseDisplayName: Fn(T.HRESULT, [[T.LPBC, 'pbc'], [T.LPCOLESTR, 'szUserName'], [Pointer(T.ULONG), 'pchEaten'], [Pointer(T.LPMONIKER), 'ppmk']]),
    MonikerCommonPrefixWith: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'pmkThis'], [Pointer(T.IMoniker), 'pmkOther'], [Pointer(Pointer(T.IMoniker)), 'ppmkCommon']]),
    MonikerRelativePathTo: Fn(T.HRESULT, [[T.LPMONIKER, 'pmkSrc'], [T.LPMONIKER, 'pmkDest'], [Pointer(T.LPMONIKER), 'ppmkRelPath'], [T.BOOL, 'dwReserved']]),
    StgCreateDocfile: Fn(T.HRESULT, [[T.LPCOLESTR, 'pwcsName'], [T.DWORD, 'grfMode'], [T.DWORD, 'reserved'], [Pointer(Pointer(T.IStorage)), 'ppstgOpen']]),
    StgCreateStorageEx: Fn(T.HRESULT, [[Pointer(T.WCHAR)], [T.DWORD], [T.DWORD], [T.DWORD], [Pointer(T.STGOPTIONS)], [Pointer(null)], [Pointer(T.IID)], [Pointer(Pointer(null))]]),
    StgIsStorageFile: Fn(T.HRESULT, [[T.LPCOLESTR, 'fn']]),
    StgIsStorageILockBytes: Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'plkbyt']]),
    StgOpenStorage: Fn(T.HRESULT, [[Pointer(T.OLECHAR), 'pwcsName'], [Pointer(T.IStorage), 'pstgPriority'], [T.DWORD, 'grfMode'], [T.SNB, 'snbExclude'], [T.DWORD, 'reserved'], [Pointer(Pointer(T.IStorage)), 'ppstgOpen']]),
    StgOpenStorageEx: Fn(T.HRESULT, [[Pointer(T.WCHAR), 'pwcwName'], [T.DWORD, 'grfMode'], [T.DWORD, 'stgfmt'], [T.DWORD, 'grfAttrs'], [Pointer(T.STGOPTIONS), 'pStgOptions'], [Pointer(null), 'reserved'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppObjectOpen']]),
    StgCreateDocfileOnILockBytes: Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'plkbyt'], [T.DWORD, 'grfMode'], [T.DWORD, 'reserved'], [Pointer(Pointer(T.IStorage)), 'ppstgOpen']]),
    StgOpenStorageOnILockBytes: Fn(T.HRESULT, [[Pointer(T.ILockBytes), 'plkbyt'], [Pointer(T.IStorage), 'pstgPriority'], [T.DWORD, 'grfMode'], [T.SNB, 'snbExclude'], [T.DWORD, 'reserved'], [Pointer(Pointer(T.IStorage)), 'ppstgOpen']]),
    StgSetTimes: Fn(T.HRESULT, [[Pointer(T.OLECHAR), 'lpszName'], [Pointer(T.FILETIME), 'pctime'], [Pointer(T.FILETIME), 'patime'], [Pointer(T.FILETIME), 'pmtime']]),
    IOLETypes_v0_0_c_ifspec: T.RPC_IF_HANDLE,
    IOLETypes_v0_0_s_ifspec: T.RPC_IF_HANDLE,
    IID_IOleWindow: T.GUID,
    IOleWindow_GetWindow_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleWindow), 'This'], [Pointer(T.HWND), 'phwnd']]),
    IOleWindow_GetWindow_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleWindow_ContextSensitiveHelp_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleWindow), 'This'], [T.BOOL, 'fEnterMode']]),
    IOleWindow_ContextSensitiveHelp_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IOleInPlaceObject: T.GUID,
    IOleInPlaceObject_InPlaceDeactivate_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This']]),
    IOleInPlaceObject_InPlaceDeactivate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceObject_UIDeactivate_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This']]),
    IOleInPlaceObject_UIDeactivate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceObject_SetObjectRects_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This'], [T.LPCRECT, 'lprcPosRect'], [T.LPCRECT, 'lprcClipRect']]),
    IOleInPlaceObject_SetObjectRects_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceObject_ReactivateAndUndo_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceObject), 'This']]),
    IOleInPlaceObject_ReactivateAndUndo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IOleInPlaceUIWindow: T.GUID,
    IOleInPlaceUIWindow_GetBorder_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [T.LPRECT, 'lprectBorder']]),
    IOleInPlaceUIWindow_GetBorder_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceUIWindow_RequestBorderSpace_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [T.LPCBORDERWIDTHS, 'pborderwidths']]),
    IOleInPlaceUIWindow_RequestBorderSpace_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceUIWindow_SetBorderSpace_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [T.LPCBORDERWIDTHS, 'pborderwidths']]),
    IOleInPlaceUIWindow_SetBorderSpace_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceUIWindow_SetActiveObject_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceUIWindow), 'This'], [Pointer(T.IOleInPlaceActiveObject), 'pActiveObject'], [T.LPCOLESTR, 'pszObjName']]),
    IOleInPlaceUIWindow_SetActiveObject_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IOleInPlaceFrame: T.GUID,
    IOleInPlaceFrame_InsertMenus_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.HMENU, 'hmenuShared'], [T.LPOLEMENUGROUPWIDTHS, 'lpMenuWidths']]),
    IOleInPlaceFrame_InsertMenus_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceFrame_SetMenu_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.HMENU, 'hmenuShared'], [T.HOLEMENU, 'holemenu'], [T.HWND, 'hwndActiveObject']]),
    IOleInPlaceFrame_SetMenu_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceFrame_RemoveMenus_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.HMENU, 'hmenuShared']]),
    IOleInPlaceFrame_RemoveMenus_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceFrame_SetStatusText_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.LPCOLESTR, 'pszStatusText']]),
    IOleInPlaceFrame_SetStatusText_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceFrame_EnableModeless_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.BOOL, 'fEnable']]),
    IOleInPlaceFrame_EnableModeless_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceFrame_TranslateAccelerator_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceFrame), 'This'], [T.LPMSG, 'lpmsg'], [T.WORD, 'wID']]),
    IOleInPlaceFrame_TranslateAccelerator_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IOleInPlaceActiveObject: T.GUID,
    IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This']]),
    IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.BOOL, 'fActivate']]),
    IOleInPlaceActiveObject_OnFrameWindowActivate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceActiveObject_OnDocWindowActivate_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.BOOL, 'fActivate']]),
    IOleInPlaceActiveObject_OnDocWindowActivate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceActiveObject_RemoteResizeBorder_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.LPCRECT, 'prcBorder'], [Pointer(T.IID), 'riid'], [Pointer(T.IOleInPlaceUIWindow), 'pUIWindow'], [T.BOOL, 'fFrameWindow']]),
    IOleInPlaceActiveObject_RemoteResizeBorder_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceActiveObject_EnableModeless_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.BOOL, 'fEnable']]),
    IOleInPlaceActiveObject_EnableModeless_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceActiveObject_TranslateAccelerator_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.LPMSG, 'lpmsg']]),
    IOleInPlaceActiveObject_TranslateAccelerator_Stub: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This']]),
    IOleInPlaceActiveObject_ResizeBorder_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.LPCRECT, 'prcBorder'], [Pointer(T.IOleInPlaceUIWindow), 'pUIWindow'], [T.BOOL, 'fFrameWindow']]),
    IOleInPlaceActiveObject_ResizeBorder_Stub: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceActiveObject), 'This'], [T.LPCRECT, 'prcBorder'], [Pointer(T.IID), 'riid'], [Pointer(T.IOleInPlaceUIWindow), 'pUIWindow'], [T.BOOL, 'fFrameWindow']]),
    IID_IOleInPlaceSite: T.GUID,
    IOleInPlaceSite_CanInPlaceActivate_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']]),
    IOleInPlaceSite_CanInPlaceActivate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceSite_OnInPlaceActivate_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']]),
    IOleInPlaceSite_OnInPlaceActivate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceSite_OnUIActivate_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']]),
    IOleInPlaceSite_OnUIActivate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceSite_GetWindowContext_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [Pointer(Pointer(T.IOleInPlaceFrame)), 'ppFrame'], [Pointer(Pointer(T.IOleInPlaceUIWindow)), 'ppDoc'], [T.LPRECT, 'lprcPosRect'], [T.LPRECT, 'lprcClipRect'], [T.LPOLEINPLACEFRAMEINFO, 'lpFrameInfo']]),
    IOleInPlaceSite_GetWindowContext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceSite_Scroll_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [T.SIZE, 'scrollExtent']]),
    IOleInPlaceSite_Scroll_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceSite_OnUIDeactivate_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [T.BOOL, 'fUndoable']]),
    IOleInPlaceSite_OnUIDeactivate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceSite_OnInPlaceDeactivate_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']]),
    IOleInPlaceSite_OnInPlaceDeactivate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceSite_DiscardUndoState_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']]),
    IOleInPlaceSite_DiscardUndoState_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceSite_DeactivateAndUndo_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This']]),
    IOleInPlaceSite_DeactivateAndUndo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleInPlaceSite_OnPosRectChange_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleInPlaceSite), 'This'], [T.LPCRECT, 'lprcPosRect']]),
    IOleInPlaceSite_OnPosRectChange_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IParseDisplayName: T.GUID,
    IParseDisplayName_ParseDisplayName_Proxy: Fn(T.HRESULT, [[Pointer(T.IParseDisplayName), 'This'], [Pointer(T.IBindCtx), 'pbc'], [T.LPOLESTR, 'pszDisplayName'], [Pointer(T.ULONG), 'pchEaten'], [Pointer(Pointer(T.IMoniker)), 'ppmkOut']]),
    IParseDisplayName_ParseDisplayName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IOleContainer: T.GUID,
    IOleContainer_EnumObjects_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleContainer), 'This'], [T.DWORD, 'grfFlags'], [Pointer(Pointer(T.IEnumUnknown)), 'ppenum']]),
    IOleContainer_EnumObjects_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleContainer_LockContainer_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleContainer), 'This'], [T.BOOL, 'fLock']]),
    IOleContainer_LockContainer_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IOleItemContainer: T.GUID,
    IOleItemContainer_GetObject_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [T.LPOLESTR, 'pszItem'], [T.DWORD, 'dwSpeedNeeded'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']]),
    IOleItemContainer_GetObject_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleItemContainer_GetObjectStorage_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [T.LPOLESTR, 'pszItem'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvStorage']]),
    IOleItemContainer_GetObjectStorage_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleItemContainer_IsRunning_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleItemContainer), 'This'], [T.LPOLESTR, 'pszItem']]),
    IOleItemContainer_IsRunning_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IOleLink: T.GUID,
    IOleLink_SetUpdateOptions_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [T.DWORD, 'dwUpdateOpt']]),
    IOleLink_SetUpdateOptions_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleLink_GetUpdateOptions_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.DWORD), 'pdwUpdateOpt']]),
    IOleLink_GetUpdateOptions_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleLink_SetSourceMoniker_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.IMoniker), 'pmk'], [Pointer(T.CLSID), 'rclsid']]),
    IOleLink_SetSourceMoniker_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleLink_GetSourceMoniker_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(Pointer(T.IMoniker)), 'ppmk']]),
    IOleLink_GetSourceMoniker_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleLink_SetSourceDisplayName_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [T.LPCOLESTR, 'pszStatusText']]),
    IOleLink_SetSourceDisplayName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleLink_GetSourceDisplayName_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.LPOLESTR), 'ppszDisplayName']]),
    IOleLink_GetSourceDisplayName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleLink_BindToSource_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [T.DWORD, 'bindflags'], [Pointer(T.IBindCtx), 'pbc']]),
    IOleLink_BindToSource_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleLink_BindIfRunning_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This']]),
    IOleLink_BindIfRunning_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleLink_GetBoundSource_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(Pointer(T.IUnknown)), 'ppunk']]),
    IOleLink_GetBoundSource_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleLink_UnbindSource_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This']]),
    IOleLink_UnbindSource_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleLink_Update_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleLink), 'This'], [Pointer(T.IBindCtx), 'pbc']]),
    IOleLink_Update_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IOleClientSite: T.GUID,
    IOleClientSite_SaveObject_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This']]),
    IOleClientSite_SaveObject_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleClientSite_GetMoniker_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This'], [T.DWORD, 'dwAssign'], [T.DWORD, 'dwWhichMoniker'], [Pointer(Pointer(T.IMoniker)), 'ppmk']]),
    IOleClientSite_GetMoniker_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleClientSite_GetContainer_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This'], [Pointer(Pointer(T.IOleContainer)), 'ppContainer']]),
    IOleClientSite_GetContainer_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleClientSite_ShowObject_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This']]),
    IOleClientSite_ShowObject_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleClientSite_OnShowWindow_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This'], [T.BOOL, 'fShow']]),
    IOleClientSite_OnShowWindow_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleClientSite_RequestNewObjectLayout_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleClientSite), 'This']]),
    IOleClientSite_RequestNewObjectLayout_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IOleCache: T.GUID,
    IOleCache_Cache_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [T.DWORD, 'advf'], [Pointer(T.DWORD), 'pdwConnection']]),
    IOleCache_Cache_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleCache_Uncache_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [T.DWORD, 'dwConnection']]),
    IOleCache_Uncache_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleCache_EnumCache_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumSTATDATA']]),
    IOleCache_EnumCache_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleCache_InitCache_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(T.IDataObject), 'pDataObject']]),
    IOleCache_InitCache_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleCache_SetData_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleCache), 'This'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pmedium'], [T.BOOL, 'fRelease']]),
    IOleCache_SetData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IOleCache2: T.GUID,
    IOleCache2_RemoteUpdateCache_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [T.LPDATAOBJECT, 'pDataObject'], [T.DWORD, 'grfUpdf'], [T.LONG_PTR, 'pReserved']]),
    IOleCache2_RemoteUpdateCache_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleCache2_DiscardCache_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [T.DWORD, 'dwDiscardOptions']]),
    IOleCache2_DiscardCache_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleCache2_UpdateCache_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [T.LPDATAOBJECT, 'pDataObject'], [T.DWORD, 'grfUpdf'], [T.LPVOID, 'pReserved']]),
    IOleCache2_UpdateCache_Stub: Fn(T.HRESULT, [[Pointer(T.IOleCache2), 'This'], [T.LPDATAOBJECT, 'pDataObject'], [T.DWORD, 'grfUpdf'], [T.LONG_PTR, 'pReserved']]),
    IID_IOleCacheControl: T.GUID,
    IOleCacheControl_OnRun_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleCacheControl), 'This'], [T.LPDATAOBJECT, 'pDataObject']]),
    IOleCacheControl_OnRun_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleCacheControl_OnStop_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleCacheControl), 'This']]),
    IOleCacheControl_OnStop_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IEnumOLEVERB: T.GUID,
    IEnumOLEVERB_RemoteNext_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [T.ULONG, 'celt'], [T.LPOLEVERB, 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumOLEVERB_RemoteNext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumOLEVERB_Skip_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [T.ULONG, 'celt']]),
    IEnumOLEVERB_Skip_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumOLEVERB_Reset_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This']]),
    IEnumOLEVERB_Reset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumOLEVERB_Clone_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [Pointer(Pointer(T.IEnumOLEVERB)), 'ppenum']]),
    IEnumOLEVERB_Clone_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumOLEVERB_Next_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [T.ULONG, 'celt'], [T.LPOLEVERB, 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumOLEVERB_Next_Stub: Fn(T.HRESULT, [[Pointer(T.IEnumOLEVERB), 'This'], [T.ULONG, 'celt'], [T.LPOLEVERB, 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IID_IOleObject: T.GUID,
    IOleObject_SetClientSite_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.IOleClientSite), 'pClientSite']]),
    IOleObject_SetClientSite_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_GetClientSite_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(Pointer(T.IOleClientSite)), 'ppClientSite']]),
    IOleObject_GetClientSite_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_SetHostNames_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.LPCOLESTR, 'szContainerApp'], [T.LPCOLESTR, 'szContainerObj']]),
    IOleObject_SetHostNames_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_Close_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwSaveOption']]),
    IOleObject_Close_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_SetMoniker_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwWhichMoniker'], [Pointer(T.IMoniker), 'pmk']]),
    IOleObject_SetMoniker_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_GetMoniker_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwAssign'], [T.DWORD, 'dwWhichMoniker'], [Pointer(Pointer(T.IMoniker)), 'ppmk']]),
    IOleObject_GetMoniker_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_InitFromData_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.IDataObject), 'pDataObject'], [T.BOOL, 'fCreation'], [T.DWORD, 'dwReserved']]),
    IOleObject_InitFromData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_GetClipboardData_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwReserved'], [Pointer(Pointer(T.IDataObject)), 'ppDataObject']]),
    IOleObject_GetClipboardData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_DoVerb_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.LONG, 'iVerb'], [T.LPMSG, 'lpmsg'], [Pointer(T.IOleClientSite), 'pActiveSite'], [T.LONG, 'lindex'], [T.HWND, 'hwndParent'], [T.LPCRECT, 'lprcPosRect']]),
    IOleObject_DoVerb_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_EnumVerbs_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(Pointer(T.IEnumOLEVERB)), 'ppEnumOleVerb']]),
    IOleObject_EnumVerbs_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_Update_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This']]),
    IOleObject_Update_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_IsUpToDate_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This']]),
    IOleObject_IsUpToDate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_GetUserClassID_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.CLSID), 'pClsid']]),
    IOleObject_GetUserClassID_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_GetUserType_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwFormOfType'], [Pointer(T.LPOLESTR), 'pszUserType']]),
    IOleObject_GetUserType_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_SetExtent_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwDrawAspect'], [Pointer(T.SIZEL), 'psizel']]),
    IOleObject_SetExtent_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_GetExtent_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwDrawAspect'], [Pointer(T.SIZEL), 'psizel']]),
    IOleObject_GetExtent_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_Advise_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.IAdviseSink), 'pAdvSink'], [Pointer(T.DWORD), 'pdwConnection']]),
    IOleObject_Advise_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_Unadvise_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwConnection']]),
    IOleObject_Unadvise_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_EnumAdvise_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumAdvise']]),
    IOleObject_EnumAdvise_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_GetMiscStatus_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [T.DWORD, 'dwAspect'], [Pointer(T.DWORD), 'pdwStatus']]),
    IOleObject_GetMiscStatus_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleObject_SetColorScheme_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleObject), 'This'], [Pointer(T.LOGPALETTE), 'pLogpal']]),
    IOleObject_SetColorScheme_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IOleAdviseHolder: T.GUID,
    IOleAdviseHolder_Advise_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [Pointer(T.IAdviseSink), 'pAdvise'], [Pointer(T.DWORD), 'pdwConnection']]),
    IOleAdviseHolder_Advise_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleAdviseHolder_Unadvise_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [T.DWORD, 'dwConnection']]),
    IOleAdviseHolder_Unadvise_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleAdviseHolder_EnumAdvise_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [Pointer(Pointer(T.IEnumSTATDATA)), 'ppenumAdvise']]),
    IOleAdviseHolder_EnumAdvise_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleAdviseHolder_SendOnRename_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This'], [Pointer(T.IMoniker), 'pmk']]),
    IOleAdviseHolder_SendOnRename_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleAdviseHolder_SendOnSave_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This']]),
    IOleAdviseHolder_SendOnSave_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IOleAdviseHolder_SendOnClose_Proxy: Fn(T.HRESULT, [[Pointer(T.IOleAdviseHolder), 'This']]),
    IOleAdviseHolder_SendOnClose_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IContinue: T.GUID,
    IContinue_FContinue_Proxy: Fn(T.HRESULT, [[Pointer(T.IContinue), 'This']]),
    IContinue_FContinue_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IViewObject: T.GUID,
    IViewObject_RemoteDraw_Proxy: Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [T.ULONG_PTR, 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.ULONG_PTR, 'hdcTargetDev'], [T.ULONG_PTR, 'hdcDraw'], [T.LPCRECTL, 'lprcBounds'], [T.LPCRECTL, 'lprcWBounds'], [Pointer(T.IContinue), 'pContinue']]),
    IViewObject_RemoteDraw_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IViewObject_RemoteGetColorSet_Proxy: Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [T.ULONG_PTR, 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.ULONG_PTR, 'hicTargetDev'], [Pointer(Pointer(T.LOGPALETTE)), 'ppColorSet']]),
    IViewObject_RemoteGetColorSet_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IViewObject_RemoteFreeze_Proxy: Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [T.ULONG_PTR, 'pvAspect'], [Pointer(T.DWORD), 'pdwFreeze']]),
    IViewObject_RemoteFreeze_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IViewObject_Unfreeze_Proxy: Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwFreeze']]),
    IViewObject_Unfreeze_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IViewObject_SetAdvise_Proxy: Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'aspects'], [T.DWORD, 'advf'], [Pointer(T.IAdviseSink), 'pAdvSink']]),
    IViewObject_SetAdvise_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IViewObject_RemoteGetAdvise_Proxy: Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [Pointer(T.DWORD), 'pAspects'], [Pointer(T.DWORD), 'pAdvf'], [Pointer(Pointer(T.IAdviseSink)), 'ppAdvSink']]),
    IViewObject_RemoteGetAdvise_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IViewObject_Draw_Proxy: Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.HDC, 'hdcTargetDev'], [T.HDC, 'hdcDraw'], [T.LPCRECTL, 'lprcBounds'], [T.LPCRECTL, 'lprcWBounds'], [Pointer(Fn(T.BOOL, [[T.ULONG_PTR, 'dwContinue']])), 'pfnContinue'], [T.ULONG_PTR, 'dwContinue']]),
    IViewObject_Draw_Stub: Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [T.ULONG_PTR, 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.ULONG_PTR, 'hdcTargetDev'], [T.ULONG_PTR, 'hdcDraw'], [T.LPCRECTL, 'lprcBounds'], [T.LPCRECTL, 'lprcWBounds'], [Pointer(T.IContinue), 'pContinue']]),
    IViewObject_GetColorSet_Proxy: Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.HDC, 'hicTargetDev'], [Pointer(Pointer(T.LOGPALETTE)), 'ppColorSet']]),
    IViewObject_GetColorSet_Stub: Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [T.ULONG_PTR, 'pvAspect'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.ULONG_PTR, 'hicTargetDev'], [Pointer(Pointer(T.LOGPALETTE)), 'ppColorSet']]),
    IViewObject_Freeze_Proxy: Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(null), 'pvAspect'], [Pointer(T.DWORD), 'pdwFreeze']]),
    IViewObject_Freeze_Stub: Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [T.ULONG_PTR, 'pvAspect'], [Pointer(T.DWORD), 'pdwFreeze']]),
    IViewObject_GetAdvise_Proxy: Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [Pointer(T.DWORD), 'pAspects'], [Pointer(T.DWORD), 'pAdvf'], [Pointer(Pointer(T.IAdviseSink)), 'ppAdvSink']]),
    IViewObject_GetAdvise_Stub: Fn(T.HRESULT, [[Pointer(T.IViewObject), 'This'], [Pointer(T.DWORD), 'pAspects'], [Pointer(T.DWORD), 'pAdvf'], [Pointer(Pointer(T.IAdviseSink)), 'ppAdvSink']]),
    IID_IViewObject2: T.GUID,
    IViewObject2_GetExtent_Proxy: Fn(T.HRESULT, [[Pointer(T.IViewObject2), 'This'], [T.DWORD, 'dwDrawAspect'], [T.LONG, 'lindex'], [Pointer(T.DVTARGETDEVICE), 'ptd'], [T.LPSIZEL, 'lpsizel']]),
    IViewObject2_GetExtent_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IDropSource: T.GUID,
    IDropSource_QueryContinueDrag_Proxy: Fn(T.HRESULT, [[Pointer(T.IDropSource), 'This'], [T.BOOL, 'fEscapePressed'], [T.DWORD, 'grfKeyState']]),
    IDropSource_QueryContinueDrag_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDropSource_GiveFeedback_Proxy: Fn(T.HRESULT, [[Pointer(T.IDropSource), 'This'], [T.DWORD, 'dwEffect']]),
    IDropSource_GiveFeedback_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IDropTarget: T.GUID,
    IDropTarget_DragEnter_Proxy: Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This'], [Pointer(T.IDataObject), 'pDataObj'], [T.DWORD, 'grfKeyState'], [T.POINTL, 'pt'], [Pointer(T.DWORD), 'pdwEffect']]),
    IDropTarget_DragEnter_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDropTarget_DragOver_Proxy: Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This'], [T.DWORD, 'grfKeyState'], [T.POINTL, 'pt'], [Pointer(T.DWORD), 'pdwEffect']]),
    IDropTarget_DragOver_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDropTarget_DragLeave_Proxy: Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This']]),
    IDropTarget_DragLeave_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDropTarget_Drop_Proxy: Fn(T.HRESULT, [[Pointer(T.IDropTarget), 'This'], [Pointer(T.IDataObject), 'pDataObj'], [T.DWORD, 'grfKeyState'], [T.POINTL, 'pt'], [Pointer(T.DWORD), 'pdwEffect']]),
    IDropTarget_Drop_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    HWND_UserSize: Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.HWND)]]),
    HWND_UserMarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HWND)]]),
    HWND_UserUnmarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HWND)]]),
    HWND_UserFree: Fn(null, [[Pointer(T.ULONG)], [Pointer(T.HWND)]]),
    HMENU_UserSize: Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.HMENU)]]),
    HMENU_UserMarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HMENU)]]),
    HMENU_UserUnmarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HMENU)]]),
    HMENU_UserFree: Fn(null, [[Pointer(T.ULONG)], [Pointer(T.HMENU)]]),
    HGLOBAL_UserSize: Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.HGLOBAL)]]),
    HGLOBAL_UserMarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HGLOBAL)]]),
    HGLOBAL_UserUnmarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HGLOBAL)]]),
    HGLOBAL_UserFree: Fn(null, [[Pointer(T.ULONG)], [Pointer(T.HGLOBAL)]]),
    HACCEL_UserSize: Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.HACCEL)]]),
    HACCEL_UserMarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HACCEL)]]),
    HACCEL_UserUnmarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HACCEL)]]),
    HACCEL_UserFree: Fn(null, [[Pointer(T.ULONG)], [Pointer(T.HACCEL)]]),
    HDC_UserSize: Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.HDC)]]),
    HDC_UserMarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HDC)]]),
    HDC_UserUnmarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.HDC)]]),
    HDC_UserFree: Fn(null, [[Pointer(T.ULONG)], [Pointer(T.HDC)]]),
    IID_IServiceProvider: T.GUID,
    IServiceProvider_RemoteQueryService_Proxy: Fn(T.HRESULT, [[Pointer(T.IServiceProvider), 'This'], [Pointer(T.GUID), 'guidService'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObject']]),
    IServiceProvider_RemoteQueryService_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IServiceProvider_QueryService_Proxy: Fn(T.HRESULT, [[Pointer(T.IServiceProvider), 'This'], [Pointer(T.GUID), 'guidService'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObject']]),
    IServiceProvider_QueryService_Stub: Fn(T.HRESULT, [[Pointer(T.IServiceProvider), 'This'], [Pointer(T.GUID), 'guidService'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObject']]),
    IOleAutomationTypes_v1_0_c_ifspec: T.RPC_IF_HANDLE,
    IOleAutomationTypes_v1_0_s_ifspec: T.RPC_IF_HANDLE,
    IID_IDispatch: T.GUID,
    IDispatch_GetTypeInfoCount_Proxy: Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [Pointer(T.UINT), 'pctinfo']]),
    IDispatch_GetTypeInfoCount_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDispatch_GetTypeInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [T.UINT, 'iTInfo'], [T.LCID, 'lcid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']]),
    IDispatch_GetTypeInfo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDispatch_GetIDsOfNames_Proxy: Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [T.LCID, 'lcid'], [Pointer(T.DISPID), 'rgDispId']]),
    IDispatch_GetIDsOfNames_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDispatch_RemoteInvoke_Proxy: Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.DWORD, 'dwFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'pArgErr'], [T.UINT, 'cVarRef'], [Pointer(T.UINT), 'rgVarRefIdx'], [Pointer(T.VARIANTARG), 'rgVarRef']]),
    IDispatch_RemoteInvoke_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IDispatch_Invoke_Proxy: Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']]),
    IDispatch_Invoke_Stub: Fn(T.HRESULT, [[Pointer(T.IDispatch), 'This'], [T.DISPID, 'dispIdMember'], [Pointer(T.IID), 'riid'], [T.LCID, 'lcid'], [T.DWORD, 'dwFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'pArgErr'], [T.UINT, 'cVarRef'], [Pointer(T.UINT), 'rgVarRefIdx'], [Pointer(T.VARIANTARG), 'rgVarRef']]),
    IID_IEnumVARIANT: T.GUID,
    IEnumVARIANT_RemoteNext_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [T.ULONG, 'celt'], [Pointer(T.VARIANT), 'rgVar'], [Pointer(T.ULONG), 'pCeltFetched']]),
    IEnumVARIANT_RemoteNext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumVARIANT_Skip_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [T.ULONG, 'celt']]),
    IEnumVARIANT_Skip_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumVARIANT_Reset_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This']]),
    IEnumVARIANT_Reset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumVARIANT_Clone_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [Pointer(Pointer(T.IEnumVARIANT)), 'ppEnum']]),
    IEnumVARIANT_Clone_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumVARIANT_Next_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [T.ULONG, 'celt'], [Pointer(T.VARIANT), 'rgVar'], [Pointer(T.ULONG), 'pCeltFetched']]),
    IEnumVARIANT_Next_Stub: Fn(T.HRESULT, [[Pointer(T.IEnumVARIANT), 'This'], [T.ULONG, 'celt'], [Pointer(T.VARIANT), 'rgVar'], [Pointer(T.ULONG), 'pCeltFetched']]),
    IID_ITypeComp: T.GUID,
    ITypeComp_RemoteBind_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [T.LPOLESTR, 'szName'], [T.ULONG, 'lHashVal'], [T.WORD, 'wFlags'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.DESCKIND), 'pDescKind'], [Pointer(T.LPFUNCDESC), 'ppFuncDesc'], [Pointer(T.LPVARDESC), 'ppVarDesc'], [Pointer(Pointer(T.ITypeComp)), 'ppTypeComp'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']]),
    ITypeComp_RemoteBind_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeComp_RemoteBindType_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [T.LPOLESTR, 'szName'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']]),
    ITypeComp_RemoteBindType_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeComp_Bind_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [T.LPOLESTR, 'szName'], [T.ULONG, 'lHashVal'], [T.WORD, 'wFlags'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.DESCKIND), 'pDescKind'], [Pointer(T.BINDPTR), 'pBindPtr']]),
    ITypeComp_Bind_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [T.LPOLESTR, 'szName'], [T.ULONG, 'lHashVal'], [T.WORD, 'wFlags'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.DESCKIND), 'pDescKind'], [Pointer(T.LPFUNCDESC), 'ppFuncDesc'], [Pointer(T.LPVARDESC), 'ppVarDesc'], [Pointer(Pointer(T.ITypeComp)), 'ppTypeComp'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']]),
    ITypeComp_BindType_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [T.LPOLESTR, 'szName'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(Pointer(T.ITypeComp)), 'ppTComp']]),
    ITypeComp_BindType_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeComp), 'This'], [T.LPOLESTR, 'szName'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']]),
    IID_ITypeInfo: T.GUID,
    ITypeInfo_RemoteGetTypeAttr_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.LPTYPEATTR), 'ppTypeAttr'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']]),
    ITypeInfo_RemoteGetTypeAttr_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_GetTypeComp_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(Pointer(T.ITypeComp)), 'ppTComp']]),
    ITypeInfo_GetTypeComp_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_RemoteGetFuncDesc_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.LPFUNCDESC), 'ppFuncDesc'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']]),
    ITypeInfo_RemoteGetFuncDesc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_RemoteGetVarDesc_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.LPVARDESC), 'ppVarDesc'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']]),
    ITypeInfo_RemoteGetVarDesc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_RemoteGetNames_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'rgBstrNames'], [T.UINT, 'cMaxNames'], [Pointer(T.UINT), 'pcNames']]),
    ITypeInfo_RemoteGetNames_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_GetRefTypeOfImplType_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.HREFTYPE), 'pRefType']]),
    ITypeInfo_GetRefTypeOfImplType_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_GetImplTypeFlags_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.INT), 'pImplTypeFlags']]),
    ITypeInfo_GetImplTypeFlags_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_LocalGetIDsOfNames_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']]),
    ITypeInfo_LocalGetIDsOfNames_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_LocalInvoke_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']]),
    ITypeInfo_LocalInvoke_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_RemoteGetDocumentation_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']]),
    ITypeInfo_RemoteGetDocumentation_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_RemoteGetDllEntry_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pBstrDllName'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.WORD), 'pwOrdinal']]),
    ITypeInfo_RemoteGetDllEntry_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_GetRefTypeInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.HREFTYPE, 'hRefType'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']]),
    ITypeInfo_GetRefTypeInfo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_LocalAddressOfMember_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']]),
    ITypeInfo_LocalAddressOfMember_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_RemoteCreateInstance_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObj']]),
    ITypeInfo_RemoteCreateInstance_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_GetMops_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'pBstrMops']]),
    ITypeInfo_GetMops_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_RemoteGetContainingTypeLib_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(Pointer(T.ITypeLib)), 'ppTLib'], [Pointer(T.UINT), 'pIndex']]),
    ITypeInfo_RemoteGetContainingTypeLib_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_LocalReleaseTypeAttr_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']]),
    ITypeInfo_LocalReleaseTypeAttr_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_LocalReleaseFuncDesc_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']]),
    ITypeInfo_LocalReleaseFuncDesc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_LocalReleaseVarDesc_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']]),
    ITypeInfo_LocalReleaseVarDesc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo_GetTypeAttr_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(Pointer(T.TYPEATTR)), 'ppTypeAttr']]),
    ITypeInfo_GetTypeAttr_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.LPTYPEATTR), 'ppTypeAttr'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']]),
    ITypeInfo_GetFuncDesc_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.FUNCDESC)), 'ppFuncDesc']]),
    ITypeInfo_GetFuncDesc_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.LPFUNCDESC), 'ppFuncDesc'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']]),
    ITypeInfo_GetVarDesc_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.VARDESC)), 'ppVarDesc']]),
    ITypeInfo_GetVarDesc_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.LPVARDESC), 'ppVarDesc'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']]),
    ITypeInfo_GetNames_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'rgBstrNames'], [T.UINT, 'cMaxNames'], [Pointer(T.UINT), 'pcNames']]),
    ITypeInfo_GetNames_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'rgBstrNames'], [T.UINT, 'cMaxNames'], [Pointer(T.UINT), 'pcNames']]),
    ITypeInfo_GetIDsOfNames_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames'], [Pointer(T.MEMBERID), 'pMemId']]),
    ITypeInfo_GetIDsOfNames_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']]),
    ITypeInfo_Invoke_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.PVOID, 'pvInstance'], [T.MEMBERID, 'memid'], [T.WORD, 'wFlags'], [Pointer(T.DISPPARAMS), 'pDispParams'], [Pointer(T.VARIANT), 'pVarResult'], [Pointer(T.EXCEPINFO), 'pExcepInfo'], [Pointer(T.UINT), 'puArgErr']]),
    ITypeInfo_Invoke_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']]),
    ITypeInfo_GetDocumentation_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']]),
    ITypeInfo_GetDocumentation_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']]),
    ITypeInfo_GetDllEntry_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [Pointer(T.BSTR), 'pBstrDllName'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.WORD), 'pwOrdinal']]),
    ITypeInfo_GetDllEntry_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pBstrDllName'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.WORD), 'pwOrdinal']]),
    ITypeInfo_AddressOfMember_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [Pointer(T.PVOID), 'ppv']]),
    ITypeInfo_AddressOfMember_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']]),
    ITypeInfo_CreateInstance_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(T.IID), 'riid'], [Pointer(T.PVOID), 'ppvObj']]),
    ITypeInfo_CreateInstance_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObj']]),
    ITypeInfo_GetContainingTypeLib_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(Pointer(T.ITypeLib)), 'ppTLib'], [Pointer(T.UINT), 'pIndex']]),
    ITypeInfo_GetContainingTypeLib_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This'], [Pointer(Pointer(T.ITypeLib)), 'ppTLib'], [Pointer(T.UINT), 'pIndex']]),
    ITypeInfo_ReleaseTypeAttr_Proxy: Fn(null, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.TYPEATTR), 'pTypeAttr']]),
    ITypeInfo_ReleaseTypeAttr_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']]),
    ITypeInfo_ReleaseFuncDesc_Proxy: Fn(null, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.FUNCDESC), 'pFuncDesc']]),
    ITypeInfo_ReleaseFuncDesc_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']]),
    ITypeInfo_ReleaseVarDesc_Proxy: Fn(null, [[Pointer(T.ITypeInfo), 'This'], [Pointer(T.VARDESC), 'pVarDesc']]),
    ITypeInfo_ReleaseVarDesc_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeInfo), 'This']]),
    IID_ITypeInfo2: T.GUID,
    ITypeInfo2_GetTypeKind_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.TYPEKIND), 'pTypeKind']]),
    ITypeInfo2_GetTypeKind_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo2_GetTypeFlags_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.ULONG), 'pTypeFlags']]),
    ITypeInfo2_GetTypeFlags_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo2_GetFuncIndexOfMemId_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind'], [Pointer(T.UINT), 'pFuncIndex']]),
    ITypeInfo2_GetFuncIndexOfMemId_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo2_GetVarIndexOfMemId_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [Pointer(T.UINT), 'pVarIndex']]),
    ITypeInfo2_GetVarIndexOfMemId_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo2_GetCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']]),
    ITypeInfo2_GetCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo2_GetFuncCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']]),
    ITypeInfo2_GetFuncCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo2_GetParamCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'indexFunc'], [T.UINT, 'indexParam'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']]),
    ITypeInfo2_GetParamCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo2_GetVarCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']]),
    ITypeInfo2_GetVarCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo2_GetImplTypeCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']]),
    ITypeInfo2_GetImplTypeCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo2_RemoteGetDocumentation2_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.LCID, 'lcid'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pbstrHelpString'], [Pointer(T.DWORD), 'pdwHelpStringContext'], [Pointer(T.BSTR), 'pbstrHelpStringDll']]),
    ITypeInfo2_RemoteGetDocumentation2_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo2_GetAllCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [Pointer(T.CUSTDATA), 'pCustData']]),
    ITypeInfo2_GetAllCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo2_GetAllFuncCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.CUSTDATA), 'pCustData']]),
    ITypeInfo2_GetAllFuncCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo2_GetAllParamCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'indexFunc'], [T.UINT, 'indexParam'], [Pointer(T.CUSTDATA), 'pCustData']]),
    ITypeInfo2_GetAllParamCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo2_GetAllVarCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.CUSTDATA), 'pCustData']]),
    ITypeInfo2_GetAllVarCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo2_GetAllImplTypeCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.CUSTDATA), 'pCustData']]),
    ITypeInfo2_GetAllImplTypeCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeInfo2_GetDocumentation2_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.LCID, 'lcid'], [Pointer(T.BSTR), 'pbstrHelpString'], [Pointer(T.DWORD), 'pdwHelpStringContext'], [Pointer(T.BSTR), 'pbstrHelpStringDll']]),
    ITypeInfo2_GetDocumentation2_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.LCID, 'lcid'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pbstrHelpString'], [Pointer(T.DWORD), 'pdwHelpStringContext'], [Pointer(T.BSTR), 'pbstrHelpStringDll']]),
    IID_ITypeLib: T.GUID,
    ITypeLib_RemoteGetTypeInfoCount_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.UINT), 'pcTInfo']]),
    ITypeLib_RemoteGetTypeInfoCount_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeLib_GetTypeInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.UINT, 'index'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo']]),
    ITypeLib_GetTypeInfo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeLib_GetTypeInfoType_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.UINT, 'index'], [Pointer(T.TYPEKIND), 'pTKind']]),
    ITypeLib_GetTypeInfoType_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeLib_GetTypeInfoOfGuid_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(Pointer(T.ITypeInfo)), 'ppTinfo']]),
    ITypeLib_GetTypeInfoOfGuid_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeLib_RemoteGetLibAttr_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.LPTLIBATTR), 'ppTLibAttr'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']]),
    ITypeLib_RemoteGetLibAttr_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeLib_GetTypeComp_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(Pointer(T.ITypeComp)), 'ppTComp']]),
    ITypeLib_GetTypeComp_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeLib_RemoteGetDocumentation_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.INT, 'index'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']]),
    ITypeLib_RemoteGetDocumentation_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeLib_RemoteIsName_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(T.BOOL), 'pfName'], [Pointer(T.BSTR), 'pBstrLibName']]),
    ITypeLib_RemoteIsName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeLib_RemoteFindName_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.MEMBERID), 'rgMemId'], [Pointer(T.USHORT), 'pcFound'], [Pointer(T.BSTR), 'pBstrLibName']]),
    ITypeLib_RemoteFindName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeLib_LocalReleaseTLibAttr_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This']]),
    ITypeLib_LocalReleaseTLibAttr_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeLib_GetTypeInfoCount_Proxy: Fn(T.UINT, [[Pointer(T.ITypeLib), 'This']]),
    ITypeLib_GetTypeInfoCount_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.UINT), 'pcTInfo']]),
    ITypeLib_GetLibAttr_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(Pointer(T.TLIBATTR)), 'ppTLibAttr']]),
    ITypeLib_GetLibAttr_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.LPTLIBATTR), 'ppTLibAttr'], [Pointer(T.CLEANLOCALSTORAGE), 'pDummy']]),
    ITypeLib_GetDocumentation_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.INT, 'index'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']]),
    ITypeLib_GetDocumentation_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.INT, 'index'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pBstrName'], [Pointer(T.BSTR), 'pBstrDocString'], [Pointer(T.DWORD), 'pdwHelpContext'], [Pointer(T.BSTR), 'pBstrHelpFile']]),
    ITypeLib_IsName_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(T.BOOL), 'pfName']]),
    ITypeLib_IsName_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(T.BOOL), 'pfName'], [Pointer(T.BSTR), 'pBstrLibName']]),
    ITypeLib_FindName_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.MEMBERID), 'rgMemId'], [Pointer(T.USHORT), 'pcFound']]),
    ITypeLib_FindName_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This'], [T.LPOLESTR, 'szNameBuf'], [T.ULONG, 'lHashVal'], [Pointer(Pointer(T.ITypeInfo)), 'ppTInfo'], [Pointer(T.MEMBERID), 'rgMemId'], [Pointer(T.USHORT), 'pcFound'], [Pointer(T.BSTR), 'pBstrLibName']]),
    ITypeLib_ReleaseTLibAttr_Proxy: Fn(null, [[Pointer(T.ITypeLib), 'This'], [Pointer(T.TLIBATTR), 'pTLibAttr']]),
    ITypeLib_ReleaseTLibAttr_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeLib), 'This']]),
    IID_ITypeLib2: T.GUID,
    ITypeLib2_GetCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']]),
    ITypeLib2_GetCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeLib2_RemoteGetLibStatistics_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.ULONG), 'pcUniqueNames'], [Pointer(T.ULONG), 'pcchUniqueNames']]),
    ITypeLib2_RemoteGetLibStatistics_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeLib2_RemoteGetDocumentation2_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.INT, 'index'], [T.LCID, 'lcid'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pbstrHelpString'], [Pointer(T.DWORD), 'pdwHelpStringContext'], [Pointer(T.BSTR), 'pbstrHelpStringDll']]),
    ITypeLib2_RemoteGetDocumentation2_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeLib2_GetAllCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.CUSTDATA), 'pCustData']]),
    ITypeLib2_GetAllCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeLib2_GetLibStatistics_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.ULONG), 'pcUniqueNames'], [Pointer(T.ULONG), 'pcchUniqueNames']]),
    ITypeLib2_GetLibStatistics_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [Pointer(T.ULONG), 'pcUniqueNames'], [Pointer(T.ULONG), 'pcchUniqueNames']]),
    ITypeLib2_GetDocumentation2_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.INT, 'index'], [T.LCID, 'lcid'], [Pointer(T.BSTR), 'pbstrHelpString'], [Pointer(T.DWORD), 'pdwHelpStringContext'], [Pointer(T.BSTR), 'pbstrHelpStringDll']]),
    ITypeLib2_GetDocumentation2_Stub: Fn(T.HRESULT, [[Pointer(T.ITypeLib2), 'This'], [T.INT, 'index'], [T.LCID, 'lcid'], [T.DWORD, 'refPtrFlags'], [Pointer(T.BSTR), 'pbstrHelpString'], [Pointer(T.DWORD), 'pdwHelpStringContext'], [Pointer(T.BSTR), 'pbstrHelpStringDll']]),
    IID_ITypeChangeEvents: T.GUID,
    ITypeChangeEvents_RequestTypeChange_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeChangeEvents), 'This'], [T.CHANGEKIND, 'changeKind'], [Pointer(T.ITypeInfo), 'pTInfoBefore'], [T.LPOLESTR, 'pStrName'], [Pointer(T.INT), 'pfCancel']]),
    ITypeChangeEvents_RequestTypeChange_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeChangeEvents_AfterTypeChange_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeChangeEvents), 'This'], [T.CHANGEKIND, 'changeKind'], [Pointer(T.ITypeInfo), 'pTInfoAfter'], [T.LPOLESTR, 'pStrName']]),
    ITypeChangeEvents_AfterTypeChange_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IErrorInfo: T.GUID,
    IErrorInfo_GetGUID_Proxy: Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.GUID), 'pGUID']]),
    IErrorInfo_GetGUID_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IErrorInfo_GetSource_Proxy: Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.BSTR), 'pBstrSource']]),
    IErrorInfo_GetSource_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IErrorInfo_GetDescription_Proxy: Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.BSTR), 'pBstrDescription']]),
    IErrorInfo_GetDescription_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IErrorInfo_GetHelpFile_Proxy: Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.BSTR), 'pBstrHelpFile']]),
    IErrorInfo_GetHelpFile_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IErrorInfo_GetHelpContext_Proxy: Fn(T.HRESULT, [[Pointer(T.IErrorInfo), 'This'], [Pointer(T.DWORD), 'pdwHelpContext']]),
    IErrorInfo_GetHelpContext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ICreateErrorInfo: T.GUID,
    ICreateErrorInfo_SetGUID_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [Pointer(T.GUID), 'rguid']]),
    ICreateErrorInfo_SetGUID_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateErrorInfo_SetSource_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [T.LPOLESTR, 'szSource']]),
    ICreateErrorInfo_SetSource_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateErrorInfo_SetDescription_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [T.LPOLESTR, 'szDescription']]),
    ICreateErrorInfo_SetDescription_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateErrorInfo_SetHelpFile_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [T.LPOLESTR, 'szHelpFile']]),
    ICreateErrorInfo_SetHelpFile_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateErrorInfo_SetHelpContext_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateErrorInfo), 'This'], [T.DWORD, 'dwHelpContext']]),
    ICreateErrorInfo_SetHelpContext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ISupportErrorInfo: T.GUID,
    ISupportErrorInfo_InterfaceSupportsErrorInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.ISupportErrorInfo), 'This'], [Pointer(T.IID), 'riid']]),
    ISupportErrorInfo_InterfaceSupportsErrorInfo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ITypeFactory: T.GUID,
    ITypeFactory_CreateFromTypeInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeFactory), 'This'], [Pointer(T.ITypeInfo), 'pTypeInfo'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppv']]),
    ITypeFactory_CreateFromTypeInfo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ITypeMarshal: T.GUID,
    ITypeMarshal_Size_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [T.PVOID, 'pvType'], [T.DWORD, 'dwDestContext'], [T.PVOID, 'pvDestContext'], [Pointer(T.ULONG), 'pSize']]),
    ITypeMarshal_Size_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeMarshal_Marshal_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [T.PVOID, 'pvType'], [T.DWORD, 'dwDestContext'], [T.PVOID, 'pvDestContext'], [T.ULONG, 'cbBufferLength'], [Pointer(T.BYTE), 'pBuffer'], [Pointer(T.ULONG), 'pcbWritten']]),
    ITypeMarshal_Marshal_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeMarshal_Unmarshal_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [T.PVOID, 'pvType'], [T.DWORD, 'dwFlags'], [T.ULONG, 'cbBufferLength'], [Pointer(T.BYTE), 'pBuffer'], [Pointer(T.ULONG), 'pcbRead']]),
    ITypeMarshal_Unmarshal_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ITypeMarshal_Free_Proxy: Fn(T.HRESULT, [[Pointer(T.ITypeMarshal), 'This'], [T.PVOID, 'pvType']]),
    ITypeMarshal_Free_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IRecordInfo: T.GUID,
    IRecordInfo_RecordInit_Proxy: Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvNew']]),
    IRecordInfo_RecordInit_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRecordInfo_RecordClear_Proxy: Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvExisting']]),
    IRecordInfo_RecordClear_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRecordInfo_RecordCopy_Proxy: Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvExisting'], [T.PVOID, 'pvNew']]),
    IRecordInfo_RecordCopy_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRecordInfo_GetGuid_Proxy: Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.GUID), 'pguid']]),
    IRecordInfo_GetGuid_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRecordInfo_GetName_Proxy: Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.BSTR), 'pbstrName']]),
    IRecordInfo_GetName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRecordInfo_GetSize_Proxy: Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.ULONG), 'pcbSize']]),
    IRecordInfo_GetSize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRecordInfo_GetTypeInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(Pointer(T.ITypeInfo)), 'ppTypeInfo']]),
    IRecordInfo_GetTypeInfo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRecordInfo_GetField_Proxy: Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvData'], [T.LPCOLESTR, 'szFieldName'], [Pointer(T.VARIANT), 'pvarField']]),
    IRecordInfo_GetField_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRecordInfo_GetFieldNoCopy_Proxy: Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvData'], [T.LPCOLESTR, 'szFieldName'], [Pointer(T.VARIANT), 'pvarField'], [Pointer(T.PVOID), 'ppvDataCArray']]),
    IRecordInfo_GetFieldNoCopy_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRecordInfo_PutField_Proxy: Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.ULONG, 'wFlags'], [T.PVOID, 'pvData'], [T.LPCOLESTR, 'szFieldName'], [Pointer(T.VARIANT), 'pvarField']]),
    IRecordInfo_PutField_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRecordInfo_PutFieldNoCopy_Proxy: Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.ULONG, 'wFlags'], [T.PVOID, 'pvData'], [T.LPCOLESTR, 'szFieldName'], [Pointer(T.VARIANT), 'pvarField']]),
    IRecordInfo_PutFieldNoCopy_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRecordInfo_GetFieldNames_Proxy: Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.ULONG), 'pcNames'], [Pointer(T.BSTR), 'rgBstrNames']]),
    IRecordInfo_GetFieldNames_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRecordInfo_IsMatchingType_Proxy: Fn(T.BOOL, [[Pointer(T.IRecordInfo), 'This'], [Pointer(T.IRecordInfo), 'pRecordInfo']]),
    IRecordInfo_IsMatchingType_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRecordInfo_RecordCreate_Proxy: Fn(T.PVOID, [[Pointer(T.IRecordInfo), 'This']]),
    IRecordInfo_RecordCreate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRecordInfo_RecordCreateCopy_Proxy: Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvSource'], [Pointer(T.PVOID), 'ppvDest']]),
    IRecordInfo_RecordCreateCopy_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IRecordInfo_RecordDestroy_Proxy: Fn(T.HRESULT, [[Pointer(T.IRecordInfo), 'This'], [T.PVOID, 'pvRecord']]),
    IRecordInfo_RecordDestroy_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ICreateTypeInfo: T.GUID,
    ICreateTypeInfo_SetGuid_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.GUID), 'guid']]),
    ICreateTypeInfo_SetGuid_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_SetTypeFlags_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'uTypeFlags']]),
    ICreateTypeInfo_SetTypeFlags_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_SetDocString_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.LPOLESTR, 'pStrDoc']]),
    ICreateTypeInfo_SetDocString_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_SetHelpContext_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.DWORD, 'dwHelpContext']]),
    ICreateTypeInfo_SetHelpContext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_SetVersion_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.WORD, 'wMajorVerNum'], [T.WORD, 'wMinorVerNum']]),
    ICreateTypeInfo_SetVersion_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_AddRefTypeInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.ITypeInfo), 'pTInfo'], [Pointer(T.HREFTYPE), 'phRefType']]),
    ICreateTypeInfo_AddRefTypeInfo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_AddFuncDesc_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.FUNCDESC), 'pFuncDesc']]),
    ICreateTypeInfo_AddFuncDesc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_AddImplType_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.HREFTYPE, 'hRefType']]),
    ICreateTypeInfo_AddImplType_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_SetImplTypeFlags_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.INT, 'implTypeFlags']]),
    ICreateTypeInfo_SetImplTypeFlags_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_SetAlignment_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.WORD, 'cbAlignment']]),
    ICreateTypeInfo_SetAlignment_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_SetSchema_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.LPOLESTR, 'pStrSchema']]),
    ICreateTypeInfo_SetSchema_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_AddVarDesc_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.VARDESC), 'pVarDesc']]),
    ICreateTypeInfo_AddVarDesc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_SetFuncAndParamNames_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [Pointer(T.LPOLESTR), 'rgszNames'], [T.UINT, 'cNames']]),
    ICreateTypeInfo_SetFuncAndParamNames_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_SetVarName_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szName']]),
    ICreateTypeInfo_SetVarName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_SetTypeDescAlias_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.TYPEDESC), 'pTDescAlias']]),
    ICreateTypeInfo_SetTypeDescAlias_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_DefineFuncAsDllEntry_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDllName'], [T.LPOLESTR, 'szProcName']]),
    ICreateTypeInfo_DefineFuncAsDllEntry_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_SetFuncDocString_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDocString']]),
    ICreateTypeInfo_SetFuncDocString_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_SetVarDocString_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.LPOLESTR, 'szDocString']]),
    ICreateTypeInfo_SetVarDocString_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_SetFuncHelpContext_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.DWORD, 'dwHelpContext']]),
    ICreateTypeInfo_SetFuncHelpContext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_SetVarHelpContext_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.DWORD, 'dwHelpContext']]),
    ICreateTypeInfo_SetVarHelpContext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_SetMops_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [T.UINT, 'index'], [T.BSTR, 'bstrMops']]),
    ICreateTypeInfo_SetMops_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_SetTypeIdldesc_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This'], [Pointer(T.IDLDESC), 'pIdlDesc']]),
    ICreateTypeInfo_SetTypeIdldesc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo_LayOut_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo), 'This']]),
    ICreateTypeInfo_LayOut_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ICreateTypeInfo2: T.GUID,
    ICreateTypeInfo2_DeleteFuncDesc_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index']]),
    ICreateTypeInfo2_DeleteFuncDesc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo2_DeleteFuncDescByMemId_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.MEMBERID, 'memid'], [T.INVOKEKIND, 'invKind']]),
    ICreateTypeInfo2_DeleteFuncDescByMemId_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo2_DeleteVarDesc_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index']]),
    ICreateTypeInfo2_DeleteVarDesc_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo2_DeleteVarDescByMemId_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.MEMBERID, 'memid']]),
    ICreateTypeInfo2_DeleteVarDescByMemId_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo2_DeleteImplType_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index']]),
    ICreateTypeInfo2_DeleteImplType_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo2_SetCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']]),
    ICreateTypeInfo2_SetCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo2_SetFuncCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']]),
    ICreateTypeInfo2_SetFuncCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo2_SetParamCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'indexFunc'], [T.UINT, 'indexParam'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']]),
    ICreateTypeInfo2_SetParamCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo2_SetVarCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']]),
    ICreateTypeInfo2_SetVarCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo2_SetImplTypeCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']]),
    ICreateTypeInfo2_SetImplTypeCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo2_SetHelpStringContext_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.ULONG, 'dwHelpStringContext']]),
    ICreateTypeInfo2_SetHelpStringContext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo2_SetFuncHelpStringContext_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.ULONG, 'dwHelpStringContext']]),
    ICreateTypeInfo2_SetFuncHelpStringContext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo2_SetVarHelpStringContext_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.UINT, 'index'], [T.ULONG, 'dwHelpStringContext']]),
    ICreateTypeInfo2_SetVarHelpStringContext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo2_Invalidate_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This']]),
    ICreateTypeInfo2_Invalidate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeInfo2_SetName_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeInfo2), 'This'], [T.LPOLESTR, 'szName']]),
    ICreateTypeInfo2_SetName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ICreateTypeLib: T.GUID,
    ICreateTypeLib_CreateTypeInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LPOLESTR, 'szName'], [T.TYPEKIND, 'tkind'], [Pointer(Pointer(T.ICreateTypeInfo)), 'ppCTInfo']]),
    ICreateTypeLib_CreateTypeInfo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeLib_SetName_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LPOLESTR, 'szName']]),
    ICreateTypeLib_SetName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeLib_SetVersion_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.WORD, 'wMajorVerNum'], [T.WORD, 'wMinorVerNum']]),
    ICreateTypeLib_SetVersion_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeLib_SetGuid_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [Pointer(T.GUID), 'guid']]),
    ICreateTypeLib_SetGuid_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeLib_SetDocString_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LPOLESTR, 'szDoc']]),
    ICreateTypeLib_SetDocString_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeLib_SetHelpFileName_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LPOLESTR, 'szHelpFileName']]),
    ICreateTypeLib_SetHelpFileName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeLib_SetHelpContext_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.DWORD, 'dwHelpContext']]),
    ICreateTypeLib_SetHelpContext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeLib_SetLcid_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.LCID, 'lcid']]),
    ICreateTypeLib_SetLcid_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeLib_SetLibFlags_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This'], [T.UINT, 'uLibFlags']]),
    ICreateTypeLib_SetLibFlags_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeLib_SaveAllChanges_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib), 'This']]),
    ICreateTypeLib_SaveAllChanges_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ICreateTypeLib2: T.GUID,
    ICreateTypeLib2_DeleteTypeInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LPOLESTR, 'szName']]),
    ICreateTypeLib2_DeleteTypeInfo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeLib2_SetCustData_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [Pointer(T.GUID), 'guid'], [Pointer(T.VARIANT), 'pVarVal']]),
    ICreateTypeLib2_SetCustData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeLib2_SetHelpStringContext_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.ULONG, 'dwHelpStringContext']]),
    ICreateTypeLib2_SetHelpStringContext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ICreateTypeLib2_SetHelpStringDll_Proxy: Fn(T.HRESULT, [[Pointer(T.ICreateTypeLib2), 'This'], [T.LPOLESTR, 'szFileName']]),
    ICreateTypeLib2_SetHelpStringDll_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IErrorLog: T.GUID,
    IErrorLog_AddError_Proxy: Fn(T.HRESULT, [[Pointer(T.IErrorLog), 'This'], [T.LPCOLESTR, 'pszPropName'], [Pointer(T.EXCEPINFO), 'pExcepInfo']]),
    IErrorLog_AddError_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IPropertyBag: T.GUID,
    IPropertyBag_RemoteRead_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertyBag), 'This'], [T.LPCOLESTR, 'pszPropName'], [Pointer(T.VARIANT), 'pVar'], [Pointer(T.IErrorLog), 'pErrorLog'], [T.DWORD, 'varType'], [Pointer(T.IUnknown), 'pUnkObj']]),
    IPropertyBag_RemoteRead_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPropertyBag_Write_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertyBag), 'This'], [T.LPCOLESTR, 'pszPropName'], [Pointer(T.VARIANT), 'pVar']]),
    IPropertyBag_Write_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPropertyBag_Read_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertyBag), 'This'], [T.LPCOLESTR, 'pszPropName'], [Pointer(T.VARIANT), 'pVar'], [Pointer(T.IErrorLog), 'pErrorLog']]),
    IPropertyBag_Read_Stub: Fn(T.HRESULT, [[Pointer(T.IPropertyBag), 'This'], [T.LPCOLESTR, 'pszPropName'], [Pointer(T.VARIANT), 'pVar'], [Pointer(T.IErrorLog), 'pErrorLog'], [T.DWORD, 'varType'], [Pointer(T.IUnknown), 'pUnkObj']]),
    VARIANT_UserSize: Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.VARIANT)]]),
    VARIANT_UserMarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.VARIANT)]]),
    VARIANT_UserUnmarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.VARIANT)]]),
    VARIANT_UserFree: Fn(null, [[Pointer(T.ULONG)], [Pointer(T.VARIANT)]]),
    BSTR_UserSize: Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.BSTR)]]),
    BSTR_UserMarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.BSTR)]]),
    BSTR_UserUnmarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.BSTR)]]),
    BSTR_UserFree: Fn(null, [[Pointer(T.ULONG)], [Pointer(T.BSTR)]]),
    CLEANLOCALSTORAGE_UserSize: Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.CLEANLOCALSTORAGE)]]),
    CLEANLOCALSTORAGE_UserMarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.CLEANLOCALSTORAGE)]]),
    CLEANLOCALSTORAGE_UserUnmarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.CLEANLOCALSTORAGE)]]),
    CLEANLOCALSTORAGE_UserFree: Fn(null, [[Pointer(T.ULONG)], [Pointer(T.CLEANLOCALSTORAGE)]]),
    LIBID_MSXML: T.GUID,
    IID_IXMLDOMNode: T.GUID,
    IXMLDOMNode_get_nodeName_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'name']]),
    IXMLDOMNode_get_nodeName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_nodeValue_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT), 'value']]),
    IXMLDOMNode_get_nodeValue_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_put_nodeValue_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.VARIANT, 'value']]),
    IXMLDOMNode_put_nodeValue_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_nodeType_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.DOMNodeType), 'type']]),
    IXMLDOMNode_get_nodeType_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_parentNode_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'parent']]),
    IXMLDOMNode_get_parentNode_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_childNodes_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'childList']]),
    IXMLDOMNode_get_childNodes_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_firstChild_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'firstChild']]),
    IXMLDOMNode_get_firstChild_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_lastChild_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'lastChild']]),
    IXMLDOMNode_get_lastChild_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_previousSibling_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'previousSibling']]),
    IXMLDOMNode_get_previousSibling_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_nextSibling_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextSibling']]),
    IXMLDOMNode_get_nextSibling_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_attributes_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'attributeMap']]),
    IXMLDOMNode_get_attributes_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_insertBefore_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [T.VARIANT, 'refChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']]),
    IXMLDOMNode_insertBefore_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_replaceChild_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(T.IXMLDOMNode), 'oldChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outOldChild']]),
    IXMLDOMNode_replaceChild_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_removeChild_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'childNode'], [Pointer(Pointer(T.IXMLDOMNode)), 'oldChild']]),
    IXMLDOMNode_removeChild_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_appendChild_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'newChild'], [Pointer(Pointer(T.IXMLDOMNode)), 'outNewChild']]),
    IXMLDOMNode_appendChild_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_hasChildNodes_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT_BOOL), 'hasChild']]),
    IXMLDOMNode_hasChildNodes_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_ownerDocument_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'DOMDocument']]),
    IXMLDOMNode_get_ownerDocument_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_cloneNode_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.VARIANT_BOOL, 'deep'], [Pointer(Pointer(T.IXMLDOMNode)), 'cloneRoot']]),
    IXMLDOMNode_cloneNode_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_nodeTypeString_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'nodeType']]),
    IXMLDOMNode_get_nodeTypeString_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_text_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'text']]),
    IXMLDOMNode_get_text_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_put_text_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.BSTR, 'text']]),
    IXMLDOMNode_put_text_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_specified_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT_BOOL), 'isSpecified']]),
    IXMLDOMNode_get_specified_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_definition_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'definitionNode']]),
    IXMLDOMNode_get_definition_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_nodeTypedValue_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT), 'typedValue']]),
    IXMLDOMNode_get_nodeTypedValue_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_put_nodeTypedValue_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.VARIANT, 'typedValue']]),
    IXMLDOMNode_put_nodeTypedValue_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_dataType_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT), 'dataTypeName']]),
    IXMLDOMNode_get_dataType_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_put_dataType_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.BSTR, 'dataTypeName']]),
    IXMLDOMNode_put_dataType_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_xml_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'xmlString']]),
    IXMLDOMNode_get_xml_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_transformNode_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'styleSheet'], [Pointer(T.BSTR), 'xmlString']]),
    IXMLDOMNode_transformNode_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_selectNodes_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']]),
    IXMLDOMNode_selectNodes_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_selectSingleNode_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [T.BSTR, 'queryString'], [Pointer(Pointer(T.IXMLDOMNode)), 'resultNode']]),
    IXMLDOMNode_selectSingleNode_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_parsed_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.VARIANT_BOOL), 'isParsed']]),
    IXMLDOMNode_get_parsed_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_namespaceURI_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'namespaceURI']]),
    IXMLDOMNode_get_namespaceURI_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_prefix_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'prefixString']]),
    IXMLDOMNode_get_prefix_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_get_baseName_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.BSTR), 'nameString']]),
    IXMLDOMNode_get_baseName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNode_transformNodeToObject_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNode), 'This'], [Pointer(T.IXMLDOMNode), 'stylesheet'], [T.VARIANT, 'outputObject']]),
    IXMLDOMNode_transformNodeToObject_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLDOMDocument: T.GUID,
    IXMLDOMDocument_get_doctype_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMDocumentType)), 'documentType']]),
    IXMLDOMDocument_get_doctype_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_get_implementation_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMImplementation)), 'impl']]),
    IXMLDOMDocument_get_implementation_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_get_documentElement_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMElement)), 'DOMElement']]),
    IXMLDOMDocument_get_documentElement_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_putref_documentElement_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.IXMLDOMElement), 'DOMElement']]),
    IXMLDOMDocument_putref_documentElement_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_createElement_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'tagname'], [Pointer(Pointer(T.IXMLDOMElement)), 'element']]),
    IXMLDOMDocument_createElement_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_createDocumentFragment_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMDocumentFragment)), 'docFrag']]),
    IXMLDOMDocument_createDocumentFragment_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_createTextNode_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'data'], [Pointer(Pointer(T.IXMLDOMText)), 'text']]),
    IXMLDOMDocument_createTextNode_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_createComment_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'data'], [Pointer(Pointer(T.IXMLDOMComment)), 'comment']]),
    IXMLDOMDocument_createComment_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_createCDATASection_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'data'], [Pointer(Pointer(T.IXMLDOMCDATASection)), 'cdata']]),
    IXMLDOMDocument_createCDATASection_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_createProcessingInstruction_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'target'], [T.BSTR, 'data'], [Pointer(Pointer(T.IXMLDOMProcessingInstruction)), 'pi']]),
    IXMLDOMDocument_createProcessingInstruction_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_createAttribute_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMAttribute)), 'attribute']]),
    IXMLDOMDocument_createAttribute_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_createEntityReference_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMEntityReference)), 'entityRef']]),
    IXMLDOMDocument_createEntityReference_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_getElementsByTagName_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'tagName'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']]),
    IXMLDOMDocument_getElementsByTagName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_createNode_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'Type'], [T.BSTR, 'name'], [T.BSTR, 'namespaceURI'], [Pointer(Pointer(T.IXMLDOMNode)), 'node']]),
    IXMLDOMDocument_createNode_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_nodeFromID_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'idString'], [Pointer(Pointer(T.IXMLDOMNode)), 'node']]),
    IXMLDOMDocument_nodeFromID_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_load_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'xmlSource'], [Pointer(T.VARIANT_BOOL), 'isSuccessful']]),
    IXMLDOMDocument_load_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_get_readyState_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.LONG), 'value']]),
    IXMLDOMDocument_get_readyState_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_get_parseError_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(Pointer(T.IXMLDOMParseError)), 'errorObj']]),
    IXMLDOMDocument_get_parseError_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_get_url_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.BSTR), 'urlString']]),
    IXMLDOMDocument_get_url_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_get_async_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isAsync']]),
    IXMLDOMDocument_get_async_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_put_async_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'isAsync']]),
    IXMLDOMDocument_put_async_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_abort_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This']]),
    IXMLDOMDocument_abort_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_loadXML_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.BSTR, 'bstrXML'], [Pointer(T.VARIANT_BOOL), 'isSuccessful']]),
    IXMLDOMDocument_loadXML_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_save_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'destination']]),
    IXMLDOMDocument_save_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_get_validateOnParse_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isValidating']]),
    IXMLDOMDocument_get_validateOnParse_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_put_validateOnParse_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'isValidating']]),
    IXMLDOMDocument_put_validateOnParse_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_get_resolveExternals_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isResolving']]),
    IXMLDOMDocument_get_resolveExternals_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_put_resolveExternals_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'isValidating']]),
    IXMLDOMDocument_put_resolveExternals_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_get_preserveWhiteSpace_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [Pointer(T.VARIANT_BOOL), 'isPreserving']]),
    IXMLDOMDocument_get_preserveWhiteSpace_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_put_preserveWhiteSpace_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT_BOOL, 'isPreserving']]),
    IXMLDOMDocument_put_preserveWhiteSpace_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_put_onreadystatechange_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'readystatechangeSink']]),
    IXMLDOMDocument_put_onreadystatechange_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_put_ondataavailable_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'ondataavailableSink']]),
    IXMLDOMDocument_put_ondataavailable_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocument_put_ontransformnode_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocument), 'This'], [T.VARIANT, 'ontransformnodeSink']]),
    IXMLDOMDocument_put_ontransformnode_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLDOMNodeList: T.GUID,
    IXMLDOMNodeList_get_item_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [T.LONG, 'index'], [Pointer(Pointer(T.IXMLDOMNode)), 'listItem']]),
    IXMLDOMNodeList_get_item_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNodeList_get_length_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(T.LONG), 'listLength']]),
    IXMLDOMNodeList_get_length_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNodeList_nextNode_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextItem']]),
    IXMLDOMNodeList_nextNode_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNodeList_reset_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This']]),
    IXMLDOMNodeList_reset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNodeList__newEnum_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNodeList), 'This'], [Pointer(Pointer(T.IUnknown)), 'ppUnk']]),
    IXMLDOMNodeList__newEnum_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLDOMNamedNodeMap: T.GUID,
    IXMLDOMNamedNodeMap_getNamedItem_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMNode)), 'namedItem']]),
    IXMLDOMNamedNodeMap_getNamedItem_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNamedNodeMap_setNamedItem_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(T.IXMLDOMNode), 'newItem'], [Pointer(Pointer(T.IXMLDOMNode)), 'namedItem']]),
    IXMLDOMNamedNodeMap_setNamedItem_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNamedNodeMap_removeNamedItem_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMNode)), 'namedItem']]),
    IXMLDOMNamedNodeMap_removeNamedItem_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNamedNodeMap_get_item_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.LONG, 'index'], [Pointer(Pointer(T.IXMLDOMNode)), 'listItem']]),
    IXMLDOMNamedNodeMap_get_item_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNamedNodeMap_get_length_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(T.LONG), 'listLength']]),
    IXMLDOMNamedNodeMap_get_length_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNamedNodeMap_getQualifiedItem_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.BSTR, 'baseName'], [T.BSTR, 'namespaceURI'], [Pointer(Pointer(T.IXMLDOMNode)), 'qualifiedItem']]),
    IXMLDOMNamedNodeMap_getQualifiedItem_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNamedNodeMap_removeQualifiedItem_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [T.BSTR, 'baseName'], [T.BSTR, 'namespaceURI'], [Pointer(Pointer(T.IXMLDOMNode)), 'qualifiedItem']]),
    IXMLDOMNamedNodeMap_removeQualifiedItem_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNamedNodeMap_nextNode_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(Pointer(T.IXMLDOMNode)), 'nextItem']]),
    IXMLDOMNamedNodeMap_nextNode_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNamedNodeMap_reset_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This']]),
    IXMLDOMNamedNodeMap_reset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNamedNodeMap__newEnum_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNamedNodeMap), 'This'], [Pointer(Pointer(T.IUnknown)), 'ppUnk']]),
    IXMLDOMNamedNodeMap__newEnum_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLDOMDocumentFragment: T.GUID,
    IID_IXMLDOMCharacterData: T.GUID,
    IXMLDOMCharacterData_get_data_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.BSTR), 'data']]),
    IXMLDOMCharacterData_get_data_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMCharacterData_put_data_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.BSTR, 'data']]),
    IXMLDOMCharacterData_put_data_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMCharacterData_get_length_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [Pointer(T.LONG), 'dataLength']]),
    IXMLDOMCharacterData_get_length_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMCharacterData_substringData_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [Pointer(T.BSTR), 'data']]),
    IXMLDOMCharacterData_substringData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMCharacterData_appendData_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.BSTR, 'data']]),
    IXMLDOMCharacterData_appendData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMCharacterData_insertData_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.LONG, 'offset'], [T.BSTR, 'data']]),
    IXMLDOMCharacterData_insertData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMCharacterData_deleteData_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.LONG, 'offset'], [T.LONG, 'count']]),
    IXMLDOMCharacterData_deleteData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMCharacterData_replaceData_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMCharacterData), 'This'], [T.LONG, 'offset'], [T.LONG, 'count'], [T.BSTR, 'data']]),
    IXMLDOMCharacterData_replaceData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLDOMAttribute: T.GUID,
    IXMLDOMAttribute_get_name_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.BSTR), 'attributeName']]),
    IXMLDOMAttribute_get_name_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMAttribute_get_value_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [Pointer(T.VARIANT), 'attributeValue']]),
    IXMLDOMAttribute_get_value_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMAttribute_put_value_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMAttribute), 'This'], [T.VARIANT, 'attributeValue']]),
    IXMLDOMAttribute_put_value_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLDOMElement: T.GUID,
    IXMLDOMElement_get_tagName_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.BSTR), 'tagName']]),
    IXMLDOMElement_get_tagName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMElement_getAttribute_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'name'], [Pointer(T.VARIANT), 'value']]),
    IXMLDOMElement_getAttribute_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMElement_setAttribute_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'name'], [T.VARIANT, 'value']]),
    IXMLDOMElement_setAttribute_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMElement_removeAttribute_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'name']]),
    IXMLDOMElement_removeAttribute_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMElement_getAttributeNode_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'name'], [Pointer(Pointer(T.IXMLDOMAttribute)), 'attributeNode']]),
    IXMLDOMElement_getAttributeNode_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMElement_setAttributeNode_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMAttribute), 'DOMAttribute'], [Pointer(Pointer(T.IXMLDOMAttribute)), 'attributeNode']]),
    IXMLDOMElement_setAttributeNode_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMElement_removeAttributeNode_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [Pointer(T.IXMLDOMAttribute), 'DOMAttribute'], [Pointer(Pointer(T.IXMLDOMAttribute)), 'attributeNode']]),
    IXMLDOMElement_removeAttributeNode_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMElement_getElementsByTagName_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This'], [T.BSTR, 'tagName'], [Pointer(Pointer(T.IXMLDOMNodeList)), 'resultList']]),
    IXMLDOMElement_getElementsByTagName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMElement_normalize_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMElement), 'This']]),
    IXMLDOMElement_normalize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLDOMText: T.GUID,
    IXMLDOMText_splitText_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMText), 'This'], [T.LONG, 'offset'], [Pointer(Pointer(T.IXMLDOMText)), 'rightHandTextNode']]),
    IXMLDOMText_splitText_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLDOMComment: T.GUID,
    IID_IXMLDOMProcessingInstruction: T.GUID,
    IXMLDOMProcessingInstruction_get_target_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'name']]),
    IXMLDOMProcessingInstruction_get_target_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMProcessingInstruction_get_data_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [Pointer(T.BSTR), 'value']]),
    IXMLDOMProcessingInstruction_get_data_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMProcessingInstruction_put_data_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMProcessingInstruction), 'This'], [T.BSTR, 'value']]),
    IXMLDOMProcessingInstruction_put_data_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLDOMCDATASection: T.GUID,
    IID_IXMLDOMDocumentType: T.GUID,
    IXMLDOMDocumentType_get_name_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(T.BSTR), 'rootName']]),
    IXMLDOMDocumentType_get_name_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocumentType_get_entities_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'entityMap']]),
    IXMLDOMDocumentType_get_entities_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMDocumentType_get_notations_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMDocumentType), 'This'], [Pointer(Pointer(T.IXMLDOMNamedNodeMap)), 'notationMap']]),
    IXMLDOMDocumentType_get_notations_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLDOMNotation: T.GUID,
    IXMLDOMNotation_get_publicId_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT), 'publicId']]),
    IXMLDOMNotation_get_publicId_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMNotation_get_systemId_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMNotation), 'This'], [Pointer(T.VARIANT), 'systemId']]),
    IXMLDOMNotation_get_systemId_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLDOMEntity: T.GUID,
    IXMLDOMEntity_get_publicId_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT), 'publicId']]),
    IXMLDOMEntity_get_publicId_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMEntity_get_systemId_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.VARIANT), 'systemId']]),
    IXMLDOMEntity_get_systemId_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMEntity_get_notationName_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMEntity), 'This'], [Pointer(T.BSTR), 'name']]),
    IXMLDOMEntity_get_notationName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLDOMEntityReference: T.GUID,
    IID_IXMLDOMImplementation: T.GUID,
    IXMLDOMImplementation_hasFeature_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMImplementation), 'This'], [T.BSTR, 'feature'], [T.BSTR, 'version'], [Pointer(T.VARIANT_BOOL), 'pbool']]),
    IXMLDOMImplementation_hasFeature_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLDOMParseError: T.GUID,
    IXMLDOMParseError_get_errorCode_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.LONG), 'errCode']]),
    IXMLDOMParseError_get_errorCode_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMParseError_get_url_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDOMParseError_get_url_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMParseError_get_reason_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDOMParseError_get_reason_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMParseError_get_srcText_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDOMParseError_get_srcText_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMParseError_get_line_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.LONG), 'lineNo']]),
    IXMLDOMParseError_get_line_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMParseError_get_linepos_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.LONG), 'linePos']]),
    IXMLDOMParseError_get_linepos_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDOMParseError_get_filepos_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDOMParseError), 'This'], [Pointer(T.LONG), 'filePos']]),
    IXMLDOMParseError_get_filepos_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    DIID_XMLDOMDocumentEvents: T.GUID,
    CLSID_DOMDocument: T.GUID,
    CLSID_DOMFreeThreadedDocument: T.GUID,
    IID_IXMLHttpRequest: T.GUID,
    IXMLHttpRequest_open_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.BSTR, 'bstrMethod'], [T.BSTR, 'bstrUrl'], [T.VARIANT, 'varAsync'], [T.VARIANT, 'varUser'], [T.VARIANT, 'varPassword']]),
    IXMLHttpRequest_open_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLHttpRequest_setRequestHeader_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.BSTR, 'bstrHeader'], [T.BSTR, 'bstrValue']]),
    IXMLHttpRequest_setRequestHeader_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLHttpRequest_getResponseHeader_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.BSTR, 'bstrHeader'], [Pointer(T.BSTR), 'pbstrValue']]),
    IXMLHttpRequest_getResponseHeader_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLHttpRequest_getAllResponseHeaders_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.BSTR), 'pbstrHeaders']]),
    IXMLHttpRequest_getAllResponseHeaders_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLHttpRequest_send_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [T.VARIANT, 'varBody']]),
    IXMLHttpRequest_send_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLHttpRequest_abort_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This']]),
    IXMLHttpRequest_abort_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLHttpRequest_get_status_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.LONG), 'plStatus']]),
    IXMLHttpRequest_get_status_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLHttpRequest_get_statusText_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.BSTR), 'bstrStatus']]),
    IXMLHttpRequest_get_statusText_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLHttpRequest_get_responseXML_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(Pointer(T.IDispatch)), 'ppBody']]),
    IXMLHttpRequest_get_responseXML_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLHttpRequest_get_responseText_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.BSTR), 'pbstrBody']]),
    IXMLHttpRequest_get_responseText_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLHttpRequest_get_responseBody_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.VARIANT), 'pvarBody']]),
    IXMLHttpRequest_get_responseBody_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLHttpRequest_get_responseStream_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.VARIANT), 'pvarBody']]),
    IXMLHttpRequest_get_responseStream_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLHttpRequest_get_readyState_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.LONG), 'plState']]),
    IXMLHttpRequest_get_readyState_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLHttpRequest_put_onreadystatechange_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLHttpRequest), 'This'], [Pointer(T.IDispatch), 'pReadyStateSink']]),
    IXMLHttpRequest_put_onreadystatechange_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    CLSID_XMLHTTPRequest: T.GUID,
    IID_IXMLDSOControl: T.GUID,
    IXMLDSOControl_get_XMLDocument_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(Pointer(T.IXMLDOMDocument)), 'ppDoc']]),
    IXMLDSOControl_get_XMLDocument_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDSOControl_put_XMLDocument_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.IXMLDOMDocument), 'ppDoc']]),
    IXMLDSOControl_put_XMLDocument_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDSOControl_get_JavaDSOCompatible_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.BOOL), 'fJavaDSOCompatible']]),
    IXMLDSOControl_get_JavaDSOCompatible_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDSOControl_put_JavaDSOCompatible_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [T.BOOL, 'fJavaDSOCompatible']]),
    IXMLDSOControl_put_JavaDSOCompatible_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDSOControl_get_readyState_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDSOControl), 'This'], [Pointer(T.LONG), 'state']]),
    IXMLDSOControl_get_readyState_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    CLSID_XMLDSOControl: T.GUID,
    IID_IXMLElementCollection: T.GUID,
    IXMLElementCollection_put_length_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [T.LONG, 'v']]),
    IXMLElementCollection_put_length_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElementCollection_get_length_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [Pointer(T.LONG), 'p']]),
    IXMLElementCollection_get_length_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElementCollection_get__newEnum_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [Pointer(Pointer(T.IUnknown)), 'ppUnk']]),
    IXMLElementCollection_get__newEnum_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElementCollection_item_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElementCollection), 'This'], [T.VARIANT, 'var1'], [T.VARIANT, 'var2'], [Pointer(Pointer(T.IDispatch)), 'ppDisp']]),
    IXMLElementCollection_item_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLElement: T.GUID,
    IXMLElement_get_tagName_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLElement_get_tagName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement_put_tagName_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'p']]),
    IXMLElement_put_tagName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement_get_parent_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(Pointer(T.IXMLElement)), 'parent']]),
    IXMLElement_get_parent_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement_setAttribute_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'strPropertyName'], [T.VARIANT, 'PropertyValue']]),
    IXMLElement_setAttribute_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement_getAttribute_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'strPropertyName'], [Pointer(T.VARIANT), 'PropertyValue']]),
    IXMLElement_getAttribute_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement_removeAttribute_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'strPropertyName']]),
    IXMLElement_removeAttribute_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement_get_children_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(Pointer(T.IXMLElementCollection)), 'p']]),
    IXMLElement_get_children_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement_get_type_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.LONG), 'p']]),
    IXMLElement_get_type_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement_get_text_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLElement_get_text_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement_put_text_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [T.BSTR, 'p']]),
    IXMLElement_put_text_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement_addChild_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.IXMLElement), 'pChildElem'], [T.LONG, 'lIndex'], [T.LONG, 'lreserved']]),
    IXMLElement_addChild_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement_removeChild_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement), 'This'], [Pointer(T.IXMLElement), 'pChildElem']]),
    IXMLElement_removeChild_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLDocument: T.GUID,
    IXMLDocument_get_root_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(Pointer(T.IXMLElement)), 'p']]),
    IXMLDocument_get_root_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument_get_fileSize_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument_get_fileSize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument_get_fileModifiedDate_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument_get_fileModifiedDate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument_get_fileUpdatedDate_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument_get_fileUpdatedDate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument_get_URL_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument_get_URL_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument_put_URL_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [T.BSTR, 'p']]),
    IXMLDocument_put_URL_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument_get_mimeType_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument_get_mimeType_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument_get_readyState_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.LONG), 'p']]),
    IXMLDocument_get_readyState_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument_get_charset_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument_get_charset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument_put_charset_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [T.BSTR, 'p']]),
    IXMLDocument_put_charset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument_get_version_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument_get_version_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument_get_doctype_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument_get_doctype_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument_get_dtdURl_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument_get_dtdURl_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument_createElement_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument), 'This'], [T.VARIANT, 'vType'], [T.VARIANT, 'var1'], [Pointer(Pointer(T.IXMLElement)), 'ppElem']]),
    IXMLDocument_createElement_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLElement2: T.GUID,
    IXMLElement2_get_tagName_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLElement2_get_tagName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement2_put_tagName_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'p']]),
    IXMLElement2_put_tagName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement2_get_parent_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(Pointer(T.IXMLElement2)), 'ppParent']]),
    IXMLElement2_get_parent_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement2_setAttribute_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'strPropertyName'], [T.VARIANT, 'PropertyValue']]),
    IXMLElement2_setAttribute_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement2_getAttribute_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'strPropertyName'], [Pointer(T.VARIANT), 'PropertyValue']]),
    IXMLElement2_getAttribute_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement2_removeAttribute_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'strPropertyName']]),
    IXMLElement2_removeAttribute_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement2_get_children_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(Pointer(T.IXMLElementCollection)), 'pp']]),
    IXMLElement2_get_children_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement2_get_type_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.LONG), 'plType']]),
    IXMLElement2_get_type_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement2_get_text_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLElement2_get_text_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement2_put_text_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [T.BSTR, 'p']]),
    IXMLElement2_put_text_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement2_addChild_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.IXMLElement2), 'pChildElem'], [T.LONG, 'lIndex'], [T.LONG, 'lReserved']]),
    IXMLElement2_addChild_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement2_removeChild_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(T.IXMLElement2), 'pChildElem']]),
    IXMLElement2_removeChild_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLElement2_get_attributes_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElement2), 'This'], [Pointer(Pointer(T.IXMLElementCollection)), 'pp']]),
    IXMLElement2_get_attributes_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLDocument2: T.GUID,
    IXMLDocument2_get_root_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(Pointer(T.IXMLElement2)), 'p']]),
    IXMLDocument2_get_root_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument2_get_fileSize_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument2_get_fileSize_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument2_get_fileModifiedDate_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument2_get_fileModifiedDate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument2_get_fileUpdatedDate_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument2_get_fileUpdatedDate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument2_get_URL_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument2_get_URL_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument2_put_URL_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.BSTR, 'p']]),
    IXMLDocument2_put_URL_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument2_get_mimeType_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument2_get_mimeType_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument2_get_readyState_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.LONG), 'pl']]),
    IXMLDocument2_get_readyState_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument2_get_charset_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument2_get_charset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument2_put_charset_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.BSTR, 'p']]),
    IXMLDocument2_put_charset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument2_get_version_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument2_get_version_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument2_get_doctype_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument2_get_doctype_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument2_get_dtdURL_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLDocument2_get_dtdURL_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument2_createElement_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.VARIANT, 'vType'], [T.VARIANT, 'var'], [Pointer(Pointer(T.IXMLElement2)), 'ppElem']]),
    IXMLDocument2_createElement_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument2_get_async_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [Pointer(T.VARIANT_BOOL), 'pf']]),
    IXMLDocument2_get_async_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLDocument2_put_async_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLDocument2), 'This'], [T.VARIANT_BOOL, 'f']]),
    IXMLDocument2_put_async_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLAttribute: T.GUID,
    IXMLAttribute_get_name_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLAttribute_get_name_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IXMLAttribute_get_value_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLAttribute), 'This'], [Pointer(T.BSTR), 'p']]),
    IXMLAttribute_get_value_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLError: T.GUID,
    IXMLError_GetErrorInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLError), 'This'], [Pointer(T.XML_ERROR), 'pErrorReturn']]),
    IXMLError_GetErrorInfo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IXMLElementNotificationSink: T.GUID,
    IXMLElementNotificationSink_ChildAdded_Proxy: Fn(T.HRESULT, [[Pointer(T.IXMLElementNotificationSink), 'This'], [Pointer(T.IDispatch), 'pChildElem']]),
    IXMLElementNotificationSink_ChildAdded_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    CLSID_XMLDocument: T.GUID,
    IID_IInternet: T.GUID,
    IID_IBinding: T.GUID,
    IBinding_Abort_Proxy: Fn(T.HRESULT, [[Pointer(T.IBinding), 'This']]),
    IBinding_Abort_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBinding_Suspend_Proxy: Fn(T.HRESULT, [[Pointer(T.IBinding), 'This']]),
    IBinding_Suspend_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBinding_Resume_Proxy: Fn(T.HRESULT, [[Pointer(T.IBinding), 'This']]),
    IBinding_Resume_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBinding_SetPriority_Proxy: Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [T.LONG, 'nPriority']]),
    IBinding_SetPriority_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBinding_GetPriority_Proxy: Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [Pointer(T.LONG), 'pnPriority']]),
    IBinding_GetPriority_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBinding_RemoteGetBindResult_Proxy: Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [Pointer(T.CLSID), 'pclsidProtocol'], [Pointer(T.DWORD), 'pdwResult'], [Pointer(T.LPOLESTR), 'pszResult'], [T.DWORD, 'dwReserved']]),
    IBinding_RemoteGetBindResult_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBinding_GetBindResult_Proxy: Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [Pointer(T.CLSID), 'pclsidProtocol'], [Pointer(T.DWORD), 'pdwResult'], [Pointer(T.LPOLESTR), 'pszResult'], [Pointer(T.DWORD), 'pdwReserved']]),
    IBinding_GetBindResult_Stub: Fn(T.HRESULT, [[Pointer(T.IBinding), 'This'], [Pointer(T.CLSID), 'pclsidProtocol'], [Pointer(T.DWORD), 'pdwResult'], [Pointer(T.LPOLESTR), 'pszResult'], [T.DWORD, 'dwReserved']]),
    IID_IBindStatusCallback: T.GUID,
    IBindStatusCallback_OnStartBinding_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.DWORD, 'dwReserved'], [Pointer(T.IBinding), 'pib']]),
    IBindStatusCallback_OnStartBinding_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindStatusCallback_GetPriority_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.LONG), 'pnPriority']]),
    IBindStatusCallback_GetPriority_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindStatusCallback_OnLowResource_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.DWORD, 'reserved']]),
    IBindStatusCallback_OnLowResource_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindStatusCallback_OnProgress_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.ULONG, 'ulProgress'], [T.ULONG, 'ulProgressMax'], [T.ULONG, 'ulStatusCode'], [T.LPCWSTR, 'szStatusText']]),
    IBindStatusCallback_OnProgress_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindStatusCallback_OnStopBinding_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.HRESULT, 'hresult'], [T.LPCWSTR, 'szError']]),
    IBindStatusCallback_OnStopBinding_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindStatusCallback_RemoteGetBindInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.RemBINDINFO), 'pbindinfo'], [Pointer(T.RemSTGMEDIUM), 'pstgmed']]),
    IBindStatusCallback_RemoteGetBindInfo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindStatusCallback_RemoteOnDataAvailable_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.DWORD, 'grfBSCF'], [T.DWORD, 'dwSize'], [Pointer(T.RemFORMATETC), 'pformatetc'], [Pointer(T.RemSTGMEDIUM), 'pstgmed']]),
    IBindStatusCallback_RemoteOnDataAvailable_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindStatusCallback_OnObjectAvailable_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.IID), 'riid'], [Pointer(T.IUnknown), 'punk']]),
    IBindStatusCallback_OnObjectAvailable_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindStatusCallback_GetBindInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.BINDINFO), 'pbindinfo']]),
    IBindStatusCallback_GetBindInfo_Stub: Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.RemBINDINFO), 'pbindinfo'], [Pointer(T.RemSTGMEDIUM), 'pstgmed']]),
    IBindStatusCallback_OnDataAvailable_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.DWORD, 'grfBSCF'], [T.DWORD, 'dwSize'], [Pointer(T.FORMATETC), 'pformatetc'], [Pointer(T.STGMEDIUM), 'pstgmed']]),
    IBindStatusCallback_OnDataAvailable_Stub: Fn(T.HRESULT, [[Pointer(T.IBindStatusCallback), 'This'], [T.DWORD, 'grfBSCF'], [T.DWORD, 'dwSize'], [Pointer(T.RemFORMATETC), 'pformatetc'], [Pointer(T.RemSTGMEDIUM), 'pstgmed']]),
    IID_IBindStatusCallbackEx: T.GUID,
    IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.RemBINDINFO), 'pbindinfo'], [Pointer(T.RemSTGMEDIUM), 'pstgmed'], [Pointer(T.DWORD), 'grfBINDF2'], [Pointer(T.DWORD), 'pdwReserved']]),
    IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindStatusCallbackEx_GetBindInfoEx_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.BINDINFO), 'pbindinfo'], [Pointer(T.DWORD), 'grfBINDF2'], [Pointer(T.DWORD), 'pdwReserved']]),
    IBindStatusCallbackEx_GetBindInfoEx_Stub: Fn(T.HRESULT, [[Pointer(T.IBindStatusCallbackEx), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.RemBINDINFO), 'pbindinfo'], [Pointer(T.RemSTGMEDIUM), 'pstgmed'], [Pointer(T.DWORD), 'grfBINDF2'], [Pointer(T.DWORD), 'pdwReserved']]),
    IID_IAuthenticate: T.GUID,
    IAuthenticate_Authenticate_Proxy: Fn(T.HRESULT, [[Pointer(T.IAuthenticate), 'This'], [Pointer(T.HWND), 'phwnd'], [Pointer(T.LPWSTR), 'pszUsername'], [Pointer(T.LPWSTR), 'pszPassword']]),
    IAuthenticate_Authenticate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IHttpNegotiate: T.GUID,
    IHttpNegotiate_BeginningTransaction_Proxy: Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate), 'This'], [T.LPCWSTR, 'szURL'], [T.LPCWSTR, 'szHeaders'], [T.DWORD, 'dwReserved'], [Pointer(T.LPWSTR), 'pszAdditionalHeaders']]),
    IHttpNegotiate_BeginningTransaction_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IHttpNegotiate_OnResponse_Proxy: Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate), 'This'], [T.DWORD, 'dwResponseCode'], [T.LPCWSTR, 'szResponseHeaders'], [T.LPCWSTR, 'szRequestHeaders'], [Pointer(T.LPWSTR), 'pszAdditionalRequestHeaders']]),
    IHttpNegotiate_OnResponse_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IHttpNegotiate2: T.GUID,
    IHttpNegotiate2_GetRootSecurityId_Proxy: Fn(T.HRESULT, [[Pointer(T.IHttpNegotiate2), 'This'], [Pointer(T.BYTE), 'pbSecurityId'], [Pointer(T.DWORD), 'pcbSecurityId'], [T.DWORD_PTR, 'dwReserved']]),
    IHttpNegotiate2_GetRootSecurityId_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IBindHost: T.GUID,
    IBindHost_CreateMoniker_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [T.LPOLESTR, 'szName'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(Pointer(T.IMoniker)), 'ppmk'], [T.DWORD, 'dwReserved']]),
    IBindHost_CreateMoniker_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindHost_RemoteMonikerBindToStorage_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IMoniker), 'pMk'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(T.IBindStatusCallback), 'pBSC'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObj']]),
    IBindHost_RemoteMonikerBindToStorage_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindHost_RemoteMonikerBindToObject_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IMoniker), 'pMk'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(T.IBindStatusCallback), 'pBSC'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObj']]),
    IBindHost_RemoteMonikerBindToObject_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IBindHost_MonikerBindToStorage_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IMoniker), 'pMk'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(T.IBindStatusCallback), 'pBSC'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObj']]),
    IBindHost_MonikerBindToStorage_Stub: Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IMoniker), 'pMk'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(T.IBindStatusCallback), 'pBSC'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObj']]),
    IBindHost_MonikerBindToObject_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IMoniker), 'pMk'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(T.IBindStatusCallback), 'pBSC'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(null)), 'ppvObj']]),
    IBindHost_MonikerBindToObject_Stub: Fn(T.HRESULT, [[Pointer(T.IBindHost), 'This'], [Pointer(T.IMoniker), 'pMk'], [Pointer(T.IBindCtx), 'pBC'], [Pointer(T.IBindStatusCallback), 'pBSC'], [Pointer(T.IID), 'riid'], [Pointer(Pointer(T.IUnknown)), 'ppvObj']]),
    IID_IWinInetInfo: T.GUID,
    IWinInetInfo_RemoteQueryOption_Proxy: Fn(T.HRESULT, [[Pointer(T.IWinInetInfo), 'This'], [T.DWORD, 'dwOption'], [Pointer(T.BYTE), 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf']]),
    IWinInetInfo_RemoteQueryOption_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IWinInetInfo_QueryOption_Proxy: Fn(T.HRESULT, [[Pointer(T.IWinInetInfo), 'This'], [T.DWORD, 'dwOption'], [T.LPVOID, 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf']]),
    IWinInetInfo_QueryOption_Stub: Fn(T.HRESULT, [[Pointer(T.IWinInetInfo), 'This'], [T.DWORD, 'dwOption'], [Pointer(T.BYTE), 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf']]),
    IID_IWinInetHttpInfo: T.GUID,
    IWinInetHttpInfo_RemoteQueryInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.IWinInetHttpInfo), 'This'], [T.DWORD, 'dwOption'], [Pointer(T.BYTE), 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf'], [Pointer(T.DWORD), 'pdwFlags'], [Pointer(T.DWORD), 'pdwReserved']]),
    IWinInetHttpInfo_RemoteQueryInfo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IWinInetHttpInfo_QueryInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.IWinInetHttpInfo), 'This'], [T.DWORD, 'dwOption'], [T.LPVOID, 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf'], [Pointer(T.DWORD), 'pdwFlags'], [Pointer(T.DWORD), 'pdwReserved']]),
    IWinInetHttpInfo_QueryInfo_Stub: Fn(T.HRESULT, [[Pointer(T.IWinInetHttpInfo), 'This'], [T.DWORD, 'dwOption'], [Pointer(T.BYTE), 'pBuffer'], [Pointer(T.DWORD), 'pcbBuf'], [Pointer(T.DWORD), 'pdwFlags'], [Pointer(T.DWORD), 'pdwReserved']]),
    IID_IWindowForBindingUI: T.GUID,
    IWindowForBindingUI_GetWindow_Proxy: Fn(T.HRESULT, [[Pointer(T.IWindowForBindingUI), 'This'], [Pointer(T.GUID), 'rguidReason'], [Pointer(T.HWND), 'phwnd']]),
    IWindowForBindingUI_GetWindow_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IHttpSecurity: T.GUID,
    IHttpSecurity_OnSecurityProblem_Proxy: Fn(T.HRESULT, [[Pointer(T.IHttpSecurity), 'This'], [T.DWORD, 'dwProblem']]),
    IHttpSecurity_OnSecurityProblem_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IPersistMoniker: T.GUID,
    IPersistMoniker_GetClassID_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(T.CLSID), 'pClassID']]),
    IPersistMoniker_GetClassID_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistMoniker_IsDirty_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This']]),
    IPersistMoniker_IsDirty_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistMoniker_Load_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [T.BOOL, 'fFullyAvailable'], [Pointer(T.IMoniker), 'pimkName'], [T.LPBC, 'pibc'], [T.DWORD, 'grfMode']]),
    IPersistMoniker_Load_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistMoniker_Save_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(T.IMoniker), 'pimkName'], [T.LPBC, 'pbc'], [T.BOOL, 'fRemember']]),
    IPersistMoniker_Save_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistMoniker_SaveCompleted_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(T.IMoniker), 'pimkName'], [T.LPBC, 'pibc']]),
    IPersistMoniker_SaveCompleted_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPersistMoniker_GetCurMoniker_Proxy: Fn(T.HRESULT, [[Pointer(T.IPersistMoniker), 'This'], [Pointer(Pointer(T.IMoniker)), 'ppimkName']]),
    IPersistMoniker_GetCurMoniker_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IMonikerProp: T.GUID,
    IMonikerProp_PutProperty_Proxy: Fn(T.HRESULT, [[Pointer(T.IMonikerProp), 'This'], [T.MONIKERPROPERTY, 'mkp'], [T.LPCWSTR, 'val']]),
    IMonikerProp_PutProperty_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IBindProtocol: T.GUID,
    IBindProtocol_CreateBinding_Proxy: Fn(T.HRESULT, [[Pointer(T.IBindProtocol), 'This'], [T.LPCWSTR, 'szUrl'], [Pointer(T.IBindCtx), 'pbc'], [Pointer(Pointer(T.IBinding)), 'ppb']]),
    IBindProtocol_CreateBinding_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IInternetBindInfo: T.GUID,
    IInternetBindInfo_GetBindInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetBindInfo), 'This'], [Pointer(T.DWORD), 'grfBINDF'], [Pointer(T.BINDINFO), 'pbindinfo']]),
    IInternetBindInfo_GetBindInfo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetBindInfo_GetBindString_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetBindInfo), 'This'], [T.ULONG, 'ulStringType'], [Pointer(T.LPOLESTR), 'ppwzStr'], [T.ULONG, 'cEl'], [Pointer(T.ULONG), 'pcElFetched']]),
    IInternetBindInfo_GetBindString_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IInternetPriority: T.GUID,
    IInternetPriority_SetPriority_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetPriority), 'This'], [T.LONG, 'nPriority']]),
    IInternetPriority_SetPriority_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetPriority_GetPriority_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetPriority), 'This'], [Pointer(T.LONG), 'pnPriority']]),
    IInternetPriority_GetPriority_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IInternetProtocolRoot: T.GUID,
    IInternetProtocolRoot_Start_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [T.LPCWSTR, 'szUrl'], [Pointer(T.IInternetProtocolSink), 'pOIProtSink'], [Pointer(T.IInternetBindInfo), 'pOIBindInfo'], [T.DWORD, 'grfPI'], [T.HANDLE_PTR, 'dwReserved']]),
    IInternetProtocolRoot_Start_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetProtocolRoot_Continue_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [Pointer(T.PROTOCOLDATA), 'pProtocolData']]),
    IInternetProtocolRoot_Continue_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetProtocolRoot_Abort_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [T.HRESULT, 'hrReason'], [T.DWORD, 'dwOptions']]),
    IInternetProtocolRoot_Abort_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetProtocolRoot_Terminate_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This'], [T.DWORD, 'dwOptions']]),
    IInternetProtocolRoot_Terminate_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetProtocolRoot_Suspend_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This']]),
    IInternetProtocolRoot_Suspend_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetProtocolRoot_Resume_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocolRoot), 'This']]),
    IInternetProtocolRoot_Resume_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IInternetProtocolSink: T.GUID,
    IInternetProtocolSink_Switch_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [Pointer(T.PROTOCOLDATA), 'pProtocolData']]),
    IInternetProtocolSink_Switch_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetProtocolSink_ReportProgress_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [T.ULONG, 'ulStatusCode'], [T.LPCWSTR, 'szStatusText']]),
    IInternetProtocolSink_ReportProgress_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetProtocolSink_ReportData_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [T.DWORD, 'grfBSCF'], [T.ULONG, 'ulProgress'], [T.ULONG, 'ulProgressMax']]),
    IInternetProtocolSink_ReportData_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetProtocolSink_ReportResult_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocolSink), 'This'], [T.HRESULT, 'hrResult'], [T.DWORD, 'dwError'], [T.LPCWSTR, 'szResult']]),
    IInternetProtocolSink_ReportResult_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IInternetProtocol: T.GUID,
    IInternetProtocol_Read_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [Pointer(null), 'pv'], [T.ULONG, 'cb'], [Pointer(T.ULONG), 'pcbRead']]),
    IInternetProtocol_Read_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetProtocol_Seek_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [T.LARGE_INTEGER, 'dlibMove'], [T.DWORD, 'dwOrigin'], [Pointer(T.ULARGE_INTEGER), 'plibNewPosition']]),
    IInternetProtocol_Seek_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetProtocol_LockRequest_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This'], [T.DWORD, 'dwOptions']]),
    IInternetProtocol_LockRequest_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetProtocol_UnlockRequest_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocol), 'This']]),
    IInternetProtocol_UnlockRequest_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IInternetProtocolInfo: T.GUID,
    IInternetProtocolInfo_ParseUrl_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [T.LPCWSTR, 'pwzUrl'], [T.PARSEACTION, 'ParseAction'], [T.DWORD, 'dwParseFlags'], [T.LPWSTR, 'pwzResult'], [T.DWORD, 'cchResult'], [Pointer(T.DWORD), 'pcchResult'], [T.DWORD, 'dwReserved']]),
    IInternetProtocolInfo_ParseUrl_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetProtocolInfo_CombineUrl_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [T.LPCWSTR, 'pwzBaseUrl'], [T.LPCWSTR, 'pwzRelativeUrl'], [T.DWORD, 'dwCombineFlags'], [T.LPWSTR, 'pwzResult'], [T.DWORD, 'cchResult'], [Pointer(T.DWORD), 'pcchResult'], [T.DWORD, 'dwReserved']]),
    IInternetProtocolInfo_CombineUrl_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetProtocolInfo_CompareUrl_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [T.LPCWSTR, 'pwzUrl1'], [T.LPCWSTR, 'pwzUrl2'], [T.DWORD, 'dwCompareFlags']]),
    IInternetProtocolInfo_CompareUrl_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetProtocolInfo_QueryInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocolInfo), 'This'], [T.LPCWSTR, 'pwzUrl'], [T.QUERYOPTION, 'OueryOption'], [T.DWORD, 'dwQueryFlags'], [T.LPVOID, 'pBuffer'], [T.DWORD, 'cbBuffer'], [Pointer(T.DWORD), 'pcbBuf'], [T.DWORD, 'dwReserved']]),
    IInternetProtocolInfo_QueryInfo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IInternetSession: T.GUID,
    IInternetSession_RegisterNameSpace_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IClassFactory), 'pCF'], [Pointer(T.CLSID), 'rclsid'], [T.LPCWSTR, 'pwzProtocol'], [T.ULONG, 'cPatterns'], [Pointer(T.LPCWSTR), 'ppwzPatterns'], [T.DWORD, 'dwReserved']]),
    IInternetSession_RegisterNameSpace_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetSession_UnregisterNameSpace_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IClassFactory), 'pCF'], [T.LPCWSTR, 'pszProtocol']]),
    IInternetSession_UnregisterNameSpace_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetSession_RegisterMimeFilter_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IClassFactory), 'pCF'], [Pointer(T.CLSID), 'rclsid'], [T.LPCWSTR, 'pwzType']]),
    IInternetSession_RegisterMimeFilter_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetSession_UnregisterMimeFilter_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [Pointer(T.IClassFactory), 'pCF'], [T.LPCWSTR, 'pwzType']]),
    IInternetSession_UnregisterMimeFilter_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetSession_CreateBinding_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [T.LPBC, 'pBC'], [T.LPCWSTR, 'szUrl'], [Pointer(T.IUnknown), 'pUnkOuter'], [Pointer(Pointer(T.IUnknown)), 'ppUnk'], [Pointer(Pointer(T.IInternetProtocol)), 'ppOInetProt'], [T.DWORD, 'dwOption']]),
    IInternetSession_CreateBinding_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetSession_SetSessionOption_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetSession), 'This'], [T.DWORD, 'dwOption'], [T.LPVOID, 'pBuffer'], [T.DWORD, 'dwBufferLength'], [T.DWORD, 'dwReserved']]),
    IInternetSession_SetSessionOption_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IInternetSecurityMgrSite: T.GUID,
    IInternetSecurityMgrSite_GetWindow_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetSecurityMgrSite), 'This'], [Pointer(T.HWND), 'phwnd']]),
    IInternetSecurityMgrSite_GetWindow_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetSecurityMgrSite_EnableModeless_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetSecurityMgrSite), 'This'], [T.BOOL, 'fEnable']]),
    IInternetSecurityMgrSite_EnableModeless_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IInternetSecurityManager: T.GUID,
    IInternetSecurityManager_SetSecuritySite_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [Pointer(T.IInternetSecurityMgrSite), 'pSite']]),
    IInternetSecurityManager_SetSecuritySite_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetSecurityManager_GetSecuritySite_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [Pointer(Pointer(T.IInternetSecurityMgrSite)), 'ppSite']]),
    IInternetSecurityManager_GetSecuritySite_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetSecurityManager_MapUrlToZone_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.LPCWSTR, 'pwszUrl'], [Pointer(T.DWORD), 'pdwZone'], [T.DWORD, 'dwFlags']]),
    IInternetSecurityManager_MapUrlToZone_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetSecurityManager_GetSecurityId_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.LPCWSTR, 'pwszUrl'], [Pointer(T.BYTE), 'pbSecurityId'], [Pointer(T.DWORD), 'pcbSecurityId'], [T.DWORD_PTR, 'dwReserved']]),
    IInternetSecurityManager_GetSecurityId_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetSecurityManager_ProcessUrlAction_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.LPCWSTR, 'pwszUrl'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [Pointer(T.BYTE), 'pContext'], [T.DWORD, 'cbContext'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwReserved']]),
    IInternetSecurityManager_ProcessUrlAction_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetSecurityManager_QueryCustomPolicy_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.LPCWSTR, 'pwszUrl'], [Pointer(T.GUID), 'guidKey'], [Pointer(Pointer(T.BYTE)), 'ppPolicy'], [Pointer(T.DWORD), 'pcbPolicy'], [Pointer(T.BYTE), 'pContext'], [T.DWORD, 'cbContext'], [T.DWORD, 'dwReserved']]),
    IInternetSecurityManager_QueryCustomPolicy_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetSecurityManager_SetZoneMapping_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.DWORD, 'dwZone'], [T.LPCWSTR, 'lpszPattern'], [T.DWORD, 'dwFlags']]),
    IInternetSecurityManager_SetZoneMapping_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetSecurityManager_GetZoneMappings_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetSecurityManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(Pointer(T.IEnumString)), 'ppenumString'], [T.DWORD, 'dwFlags']]),
    IInternetSecurityManager_GetZoneMappings_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IInternetHostSecurityManager: T.GUID,
    IInternetHostSecurityManager_GetSecurityId_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetHostSecurityManager), 'This'], [Pointer(T.BYTE), 'pbSecurityId'], [Pointer(T.DWORD), 'pcbSecurityId'], [T.DWORD_PTR, 'dwReserved']]),
    IInternetHostSecurityManager_GetSecurityId_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetHostSecurityManager_ProcessUrlAction_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetHostSecurityManager), 'This'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [Pointer(T.BYTE), 'pContext'], [T.DWORD, 'cbContext'], [T.DWORD, 'dwFlags'], [T.DWORD, 'dwReserved']]),
    IInternetHostSecurityManager_ProcessUrlAction_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetHostSecurityManager_QueryCustomPolicy_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetHostSecurityManager), 'This'], [Pointer(T.GUID), 'guidKey'], [Pointer(Pointer(T.BYTE)), 'ppPolicy'], [Pointer(T.DWORD), 'pcbPolicy'], [Pointer(T.BYTE), 'pContext'], [T.DWORD, 'cbContext'], [T.DWORD, 'dwReserved']]),
    IInternetHostSecurityManager_QueryCustomPolicy_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IInternetZoneManager: T.GUID,
    IInternetZoneManager_GetZoneAttributes_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes']]),
    IInternetZoneManager_GetZoneAttributes_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetZoneManager_SetZoneAttributes_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes']]),
    IInternetZoneManager_SetZoneAttributes_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetZoneManager_GetZoneCustomPolicy_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.GUID), 'guidKey'], [Pointer(Pointer(T.BYTE)), 'ppPolicy'], [Pointer(T.DWORD), 'pcbPolicy'], [T.URLZONEREG, 'ulrZoneReg']]),
    IInternetZoneManager_GetZoneCustomPolicy_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetZoneManager_SetZoneCustomPolicy_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.GUID), 'guidKey'], [Pointer(T.BYTE), 'ppPolicy'], [T.DWORD, 'pcbPolicy'], [T.URLZONEREG, 'ulrZoneReg']]),
    IInternetZoneManager_SetZoneCustomPolicy_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetZoneManager_GetZoneActionPolicy_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg']]),
    IInternetZoneManager_GetZoneActionPolicy_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetZoneManager_SetZoneActionPolicy_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg']]),
    IInternetZoneManager_SetZoneActionPolicy_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetZoneManager_PromptAction_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwAction'], [T.HWND, 'hwndParent'], [T.LPCWSTR, 'pwszUrl'], [T.LPCWSTR, 'pwszText'], [T.DWORD, 'dwPromptFlags']]),
    IInternetZoneManager_PromptAction_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetZoneManager_LogAction_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwAction'], [T.LPCWSTR, 'pwszUrl'], [T.LPCWSTR, 'pwszText'], [T.DWORD, 'dwLogFlags']]),
    IInternetZoneManager_LogAction_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetZoneManager_CreateZoneEnumerator_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [Pointer(T.DWORD), 'pdwEnum'], [Pointer(T.DWORD), 'pdwCount'], [T.DWORD, 'dwFlags']]),
    IInternetZoneManager_CreateZoneEnumerator_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetZoneManager_GetZoneAt_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwEnum'], [T.DWORD, 'dwIndex'], [Pointer(T.DWORD), 'pdwZone']]),
    IInternetZoneManager_GetZoneAt_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetZoneManager_DestroyZoneEnumerator_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwEnum']]),
    IInternetZoneManager_DestroyZoneEnumerator_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetZoneManager_CopyTemplatePoliciesToZone_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManager), 'This'], [T.DWORD, 'dwTemplate'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwReserved']]),
    IInternetZoneManager_CopyTemplatePoliciesToZone_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IInternetZoneManagerEx: T.GUID,
    IInternetZoneManagerEx_GetZoneActionPolicyEx_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg'], [T.DWORD, 'dwFlags']]),
    IInternetZoneManagerEx_GetZoneActionPolicyEx_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetZoneManagerEx_SetZoneActionPolicyEx_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx), 'This'], [T.DWORD, 'dwZone'], [T.DWORD, 'dwAction'], [Pointer(T.BYTE), 'pPolicy'], [T.DWORD, 'cbPolicy'], [T.URLZONEREG, 'urlZoneReg'], [T.DWORD, 'dwFlags']]),
    IInternetZoneManagerEx_SetZoneActionPolicyEx_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IInternetZoneManagerEx2: T.GUID,
    IInternetZoneManagerEx2_GetZoneAttributesEx_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZone'], [Pointer(T.ZONEATTRIBUTES), 'pZoneAttributes'], [T.DWORD, 'dwFlags']]),
    IInternetZoneManagerEx2_GetZoneAttributesEx_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetZoneManagerEx2_GetZoneSecurityState_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.DWORD, 'dwZoneIndex'], [T.BOOL, 'fRespectPolicy'], [T.LPDWORD, 'pdwState'], [Pointer(T.BOOL), 'pfPolicyEncountered']]),
    IInternetZoneManagerEx2_GetZoneSecurityState_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetZoneManagerEx2_GetIESecurityState_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This'], [T.BOOL, 'fRespectPolicy'], [T.LPDWORD, 'pdwState'], [Pointer(T.BOOL), 'pfPolicyEncountered'], [T.BOOL, 'fNoCache']]),
    IInternetZoneManagerEx2_GetIESecurityState_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IInternetZoneManagerEx2_FixInsecureSettings_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetZoneManagerEx2), 'This']]),
    IInternetZoneManagerEx2_FixInsecureSettings_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_ISoftDistExt: T.GUID,
    ISoftDistExt_ProcessSoftDist_Proxy: Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [T.LPCWSTR, 'szCDFURL'], [Pointer(T.IXMLElement), 'pSoftDistElement'], [T.LPSOFTDISTINFO, 'lpsdi']]),
    ISoftDistExt_ProcessSoftDist_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ISoftDistExt_GetFirstCodeBase_Proxy: Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [Pointer(T.LPWSTR), 'szCodeBase'], [T.LPDWORD, 'dwMaxSize']]),
    ISoftDistExt_GetFirstCodeBase_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ISoftDistExt_GetNextCodeBase_Proxy: Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [Pointer(T.LPWSTR), 'szCodeBase'], [T.LPDWORD, 'dwMaxSize']]),
    ISoftDistExt_GetNextCodeBase_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    ISoftDistExt_AsyncInstallDistributionUnit_Proxy: Fn(T.HRESULT, [[Pointer(T.ISoftDistExt), 'This'], [Pointer(T.IBindCtx), 'pbc'], [T.LPVOID, 'lpReserved'], [T.DWORD, 'flags'], [T.LPCODEBASEHOLD, 'lpcbh']]),
    ISoftDistExt_AsyncInstallDistributionUnit_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IUri: T.GUID,
    IUri_GetPropertyBSTR_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.Uri_PROPERTY, 'uriProp'], [Pointer(T.BSTR), 'pbstrProperty'], [T.DWORD, 'dwFlags']]),
    IUri_GetPropertyBSTR_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetPropertyLength_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.Uri_PROPERTY, 'uriProp'], [Pointer(T.DWORD), 'pcchProperty'], [T.DWORD, 'dwFlags']]),
    IUri_GetPropertyLength_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetPropertyDWORD_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.Uri_PROPERTY, 'uriProp'], [Pointer(T.DWORD), 'pdwProperty'], [T.DWORD, 'dwFlags']]),
    IUri_GetPropertyDWORD_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_HasProperty_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.Uri_PROPERTY, 'uriProp'], [Pointer(T.BOOL), 'pfHasProperty']]),
    IUri_HasProperty_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetAbsoluteUri_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrAbsoluteUri']]),
    IUri_GetAbsoluteUri_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetAuthority_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrAuthority']]),
    IUri_GetAuthority_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetDisplayUri_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrDisplayString']]),
    IUri_GetDisplayUri_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetDomain_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrDomain']]),
    IUri_GetDomain_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetExtension_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrExtension']]),
    IUri_GetExtension_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetFragment_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrFragment']]),
    IUri_GetFragment_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetHost_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrHost']]),
    IUri_GetHost_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetPassword_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrPassword']]),
    IUri_GetPassword_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetPath_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrPath']]),
    IUri_GetPath_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetPathAndQuery_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrPathAndQuery']]),
    IUri_GetPathAndQuery_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetQuery_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrQuery']]),
    IUri_GetQuery_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetRawUri_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrRawUri']]),
    IUri_GetRawUri_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetSchemeName_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrSchemeName']]),
    IUri_GetSchemeName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetUserInfo_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrUserInfo']]),
    IUri_GetUserInfo_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetUserName_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.BSTR), 'pbstrUserName']]),
    IUri_GetUserName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetHostType_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.DWORD), 'pdwHostType']]),
    IUri_GetHostType_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetPort_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.DWORD), 'pdwPort']]),
    IUri_GetPort_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetScheme_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.DWORD), 'pdwScheme']]),
    IUri_GetScheme_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetZone_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.DWORD), 'pdwZone']]),
    IUri_GetZone_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_GetProperties_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [T.LPDWORD, 'pdwFlags']]),
    IUri_GetProperties_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUri_IsEqual_Proxy: Fn(T.HRESULT, [[Pointer(T.IUri), 'This'], [Pointer(T.IUri), 'pUri'], [Pointer(T.BOOL), 'pfEqual']]),
    IUri_IsEqual_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    CreateUri: Fn(T.HRESULT, [[T.LPCWSTR], [T.DWORD], [T.DWORD_PTR], [Pointer(Pointer(T.IUri))]]),
    CreateUriWithFragment: Fn(T.HRESULT, [[T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.DWORD_PTR], [Pointer(Pointer(T.IUri))]]),
    CreateUriFromMultiByteString: Fn(T.HRESULT, [[T.LPCSTR], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD_PTR], [Pointer(Pointer(T.IUri))]]),
    IID_IUriContainer: T.GUID,
    IUriContainer_GetIUri_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriContainer), 'This'], [Pointer(Pointer(T.IUri)), 'ppIUri']]),
    IUriContainer_GetIUri_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IUriBuilder: T.GUID,
    IUriBuilder_CreateUriSimple_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.DWORD, 'dwAllowEncodingPropertyMask'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUri)), 'ppIUri']]),
    IUriBuilder_CreateUriSimple_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_CreateUri_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.DWORD, 'dwCreateFlags'], [T.DWORD, 'dwAllowEncodingPropertyMask'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUri)), 'ppIUri']]),
    IUriBuilder_CreateUri_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_CreateUriWithFlags_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.DWORD, 'dwCreateFlags'], [T.DWORD, 'dwUriBuilderFlags'], [T.DWORD, 'dwAllowEncodingPropertyMask'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUri)), 'ppIUri']]),
    IUriBuilder_CreateUriWithFlags_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_GetIUri_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(Pointer(T.IUri)), 'ppIUri']]),
    IUriBuilder_GetIUri_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_SetIUri_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.IUri), 'pIUri']]),
    IUriBuilder_SetIUri_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_GetFragment_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchFragment'], [Pointer(T.LPCWSTR), 'ppwzFragment']]),
    IUriBuilder_GetFragment_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_GetHost_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchHost'], [Pointer(T.LPCWSTR), 'ppwzHost']]),
    IUriBuilder_GetHost_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_GetPassword_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchPassword'], [Pointer(T.LPCWSTR), 'ppwzPassword']]),
    IUriBuilder_GetPassword_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_GetPath_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchPath'], [Pointer(T.LPCWSTR), 'ppwzPath']]),
    IUriBuilder_GetPath_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_GetPort_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.BOOL), 'pfHasPort'], [Pointer(T.DWORD), 'pdwPort']]),
    IUriBuilder_GetPort_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_GetQuery_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchQuery'], [Pointer(T.LPCWSTR), 'ppwzQuery']]),
    IUriBuilder_GetQuery_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_GetSchemeName_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchSchemeName'], [Pointer(T.LPCWSTR), 'ppwzSchemeName']]),
    IUriBuilder_GetSchemeName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_GetUserName_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.DWORD), 'pcchUserName'], [Pointer(T.LPCWSTR), 'ppwzUserName']]),
    IUriBuilder_GetUserName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_SetFragment_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']]),
    IUriBuilder_SetFragment_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_SetHost_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']]),
    IUriBuilder_SetHost_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_SetPassword_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']]),
    IUriBuilder_SetPassword_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_SetPath_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']]),
    IUriBuilder_SetPath_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_SetPort_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.BOOL, 'fHasPort'], [T.DWORD, 'dwNewValue']]),
    IUriBuilder_SetPort_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_SetQuery_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']]),
    IUriBuilder_SetQuery_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_SetSchemeName_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']]),
    IUriBuilder_SetSchemeName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_SetUserName_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.LPCWSTR, 'pwzNewValue']]),
    IUriBuilder_SetUserName_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_RemoveProperties_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [T.DWORD, 'dwPropertyMask']]),
    IUriBuilder_RemoveProperties_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilder_HasBeenModified_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilder), 'This'], [Pointer(T.BOOL), 'pfModified']]),
    IUriBuilder_HasBeenModified_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    CreateIUriBuilder: Fn(T.HRESULT, [[Pointer(T.IUri)], [T.DWORD], [T.DWORD_PTR], [Pointer(Pointer(T.IUriBuilder))]]),
    IID_IUriBuilderFactory: T.GUID,
    IUriBuilderFactory_CreateIUriBuilder_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilderFactory), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUriBuilder)), 'ppIUriBuilder']]),
    IUriBuilderFactory_CreateIUriBuilder_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IUriBuilderFactory_CreateInitializedIUriBuilder_Proxy: Fn(T.HRESULT, [[Pointer(T.IUriBuilderFactory), 'This'], [T.DWORD, 'dwFlags'], [T.DWORD_PTR, 'dwReserved'], [Pointer(Pointer(T.IUriBuilder)), 'ppIUriBuilder']]),
    IUriBuilderFactory_CreateInitializedIUriBuilder_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IInternetProtocolEx: T.GUID,
    IInternetProtocolEx_StartEx_Proxy: Fn(T.HRESULT, [[Pointer(T.IInternetProtocolEx), 'This'], [Pointer(T.IUri), 'pUri'], [Pointer(T.IInternetProtocolSink), 'pOIProtSink'], [Pointer(T.IInternetBindInfo), 'pOIBindInfo'], [T.DWORD, 'grfPI'], [Pointer(T.HANDLE), 'dwReserved']]),
    IInternetProtocolEx_StartEx_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    GUID_CUSTOM_CONFIRMOBJECTSAFETY: T.GUID,
    CLSID_InternetSecurityManager: T.GUID,
    CLSID_InternetZoneManager: T.GUID,
    IID_IAsyncMoniker: T.GUID,
    IID_IAsyncBindCtx: T.GUID,
    CLSID_StdURLMoniker: T.GUID,
    CLSID_DeCompMimeFilter: T.GUID,
    CLSID_CdlProtocol: T.GUID,
    CLSID_FileProtocol: T.GUID,
    CLSID_FtpProtocol: T.GUID,
    CLSID_GopherProtocol: T.GUID,
    CLSID_HttpProtocol: T.GUID,
    CLSID_HttpSProtocol: T.GUID,
    CLSID_MkProtocol: T.GUID,
    CoGetClassObjectFromURL: Fn(T.HRESULT, [[Pointer(T.CLSID)], [T.LPCWSTR], [T.DWORD], [T.DWORD], [T.LPCWSTR], [T.LPBINDCTX], [T.DWORD], [T.LPVOID], [Pointer(T.IID)], [Pointer(T.LPVOID)]]),
    CreateURLMoniker: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'pmkContext'], [T.LPCWSTR, 'szURL'], [Pointer(Pointer(T.IMoniker)), 'ppmk']]),
    CreateURLMonikerEx: Fn(T.HRESULT, [[Pointer(T.IMoniker)], [T.LPCWSTR], [Pointer(Pointer(T.IMoniker))], [T.DWORD]]),
    CreateURLMonikerEx2: Fn(T.HRESULT, [[Pointer(T.IMoniker)], [Pointer(T.IUri)], [Pointer(Pointer(T.IMoniker))], [T.DWORD]]),
    RegisterBindStatusCallback: Fn(T.HRESULT, [[Pointer(T.IBindCtx), 'pbc'], [Pointer(T.IBindStatusCallback), 'pbsc'], [Pointer(Pointer(T.IBindStatusCallback)), 'ppbsc'], [T.DWORD, 'dwReserved']]),
    CompareSecurityIds: Fn(T.HRESULT, [[Pointer(T.BYTE)], [T.DWORD], [Pointer(T.BYTE)], [T.DWORD], [T.DWORD]]),
    URLDownloadToFileA: Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.LPBINDSTATUSCALLBACK]]),
    URLDownloadToFileW: Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.LPBINDSTATUSCALLBACK]]),
    URLDownloadToCacheFileA: Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCSTR], [T.LPSTR], [T.DWORD], [T.DWORD], [T.LPBINDSTATUSCALLBACK]]),
    URLDownloadToCacheFileW: Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCWSTR], [T.LPWSTR], [T.DWORD], [T.DWORD], [T.LPBINDSTATUSCALLBACK]]),
    CoInternetGetSession: Fn(T.HRESULT, [[T.DWORD], [Pointer(Pointer(T.IInternetSession))], [T.DWORD]]),
    MkParseDisplayNameEx: Fn(T.HRESULT, [[Pointer(T.IBindCtx)], [T.LPCWSTR], [Pointer(T.ULONG)], [Pointer(Pointer(T.IMoniker))]]),
    IsAsyncMoniker: Fn(T.HRESULT, [[Pointer(T.IMoniker), 'pmk']]),
    CreateAsyncBindCtx: Fn(T.HRESULT, [[T.DWORD], [Pointer(T.IBindStatusCallback)], [Pointer(T.IEnumFORMATETC)], [Pointer(Pointer(T.IBindCtx))]]),
    CreateAsyncBindCtxEx: Fn(T.HRESULT, [[Pointer(T.IBindCtx)], [T.DWORD], [Pointer(T.IBindStatusCallback)], [Pointer(T.IEnumFORMATETC)], [Pointer(Pointer(T.IBindCtx))], [T.DWORD]]),
    CoInternetCreateSecurityManager: Fn(T.HRESULT, [[Pointer(T.IServiceProvider)], [Pointer(Pointer(T.IInternetSecurityManager))], [T.DWORD]]),
    CoInternetCombineUrl: Fn(T.HRESULT, [[T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.LPWSTR], [T.DWORD], [Pointer(T.DWORD)], [T.DWORD]]),
    CoInternetCombineUrlEx: Fn(T.HRESULT, [[Pointer(T.IUri)], [T.LPCWSTR], [T.DWORD], [Pointer(Pointer(T.IUri))], [T.DWORD_PTR]]),
    CoInternetCompareUrl: Fn(T.HRESULT, [[T.LPCWSTR], [T.LPCWSTR], [T.DWORD]]),
    CoInternetCombineIUri: Fn(T.HRESULT, [[Pointer(T.IUri)], [Pointer(T.IUri)], [T.DWORD], [Pointer(Pointer(T.IUri))], [T.DWORD_PTR]]),
    CoInternetCreateZoneManager: Fn(T.HRESULT, [[Pointer(T.IServiceProvider)], [Pointer(Pointer(T.IInternetZoneManager))], [T.DWORD]]),
    CoInternetParseUrl: Fn(T.HRESULT, [[T.LPCWSTR], [T.PARSEACTION], [T.DWORD], [T.LPWSTR], [T.DWORD], [Pointer(T.DWORD)], [T.DWORD]]),
    CoInternetParseIUri: Fn(T.HRESULT, [[Pointer(T.IUri)], [T.PARSEACTION], [T.DWORD], [T.LPWSTR], [T.DWORD], [Pointer(T.DWORD)], [T.DWORD_PTR]]),
    CoInternetQueryInfo: Fn(T.HRESULT, [[T.LPCWSTR], [T.QUERYOPTION], [T.DWORD], [T.LPVOID], [T.DWORD], [Pointer(T.DWORD)], [T.DWORD]]),
    CoInternetSetFeatureEnabled: Fn(T.HRESULT, [[T.INTERNETFEATURELIST], [T.DWORD], [T.BOOL]]),
    CoInternetGetSecurityUrl: Fn(T.HRESULT, [[T.LPCWSTR], [Pointer(T.LPWSTR)], [T.PSUACTION], [T.DWORD]]),
    CoInternetGetSecurityUrlEx: Fn(T.HRESULT, [[Pointer(T.IUri)], [Pointer(Pointer(T.IUri))], [T.PSUACTION], [T.DWORD_PTR]]),
    CreateFormatEnumerator: Fn(T.HRESULT, [[T.UINT], [Pointer(T.FORMATETC)], [Pointer(Pointer(T.IEnumFORMATETC))]]),
    GetSoftwareUpdateInfo: Fn(T.HRESULT, [[T.LPCWSTR, 'szDistUnit'], [T.LPSOFTDISTINFO, 'psdi']]),
    FaultInIEFeature: Fn(T.HRESULT, [[T.HWND], [Pointer(T.uCLSSPEC)], [Pointer(T.QUERYCONTEXT)], [T.DWORD]]),
    FindMimeFromData: Fn(T.HRESULT, [[T.LPBC], [T.LPCWSTR], [T.LPVOID], [T.DWORD], [T.LPCWSTR], [T.DWORD], [Pointer(T.LPWSTR)], [T.DWORD]]),
    GetClassFileOrMime: Fn(T.HRESULT, [[T.LPBC], [T.LPCWSTR], [T.LPVOID], [T.DWORD], [T.LPCWSTR], [T.DWORD], [Pointer(T.CLSID)]]),
    HlinkGoBack: Fn(T.HRESULT, [[Pointer(T.IUnknown)]]),
    HlinkGoForward: Fn(T.HRESULT, [[Pointer(T.IUnknown)]]),
    HlinkNavigateMoniker: Fn(T.HRESULT, [[Pointer(T.IUnknown)], [Pointer(T.IMoniker)]]),
    HlinkNavigateString: Fn(T.HRESULT, [[Pointer(T.IUnknown)], [T.LPCWSTR]]),
    HlinkSimpleNavigateToMoniker: Fn(T.HRESULT, [[Pointer(T.IMoniker)], [T.LPCWSTR], [T.LPCWSTR], [Pointer(T.IUnknown)], [Pointer(T.IBindCtx)], [Pointer(T.IBindStatusCallback)], [T.DWORD], [T.DWORD]]),
    HlinkSimpleNavigateToString: Fn(T.HRESULT, [[T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [Pointer(T.IUnknown)], [Pointer(T.IBindCtx)], [Pointer(T.IBindStatusCallback)], [T.DWORD], [T.DWORD]]),
    IsValidURL: Fn(T.HRESULT, [[T.LPBC], [T.LPCWSTR], [T.DWORD]]),
    ObtainUserAgentString: Fn(T.HRESULT, [[T.DWORD], [T.LPSTR], [Pointer(T.DWORD)]]),
    RegisterFormatEnumerator: Fn(T.HRESULT, [[T.LPBC], [Pointer(T.IEnumFORMATETC)], [T.DWORD]]),
    RevokeFormatEnumerator: Fn(T.HRESULT, [[T.LPBC], [Pointer(T.IEnumFORMATETC)]]),
    RevokeBindStatusCallback: Fn(T.HRESULT, [[T.LPBC], [Pointer(T.IBindStatusCallback)]]),
    CopyStgMedium: Fn(T.HRESULT, [[Pointer(T.STGMEDIUM)], [Pointer(T.STGMEDIUM)]]),
    ReleaseBindInfo: Fn(null, [[Pointer(T.BINDINFO)]]),
    UrlMkGetSessionOption: Fn(T.HRESULT, [[T.DWORD], [T.LPVOID], [T.DWORD], [Pointer(T.DWORD)], [T.DWORD]]),
    UrlMkSetSessionOption: Fn(T.HRESULT, [[T.DWORD], [T.LPVOID], [T.DWORD], [T.DWORD]]),
    URLOpenStreamA: Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCSTR], [T.DWORD], [T.LPBINDSTATUSCALLBACK]]),
    URLOpenStreamW: Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCWSTR], [T.DWORD], [T.LPBINDSTATUSCALLBACK]]),
    URLOpenPullStreamA: Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCSTR], [T.DWORD], [T.LPBINDSTATUSCALLBACK]]),
    URLOpenPullStreamW: Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCWSTR], [T.DWORD], [T.LPBINDSTATUSCALLBACK]]),
    URLOpenBlockingStreamA: Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCSTR], [Pointer(T.LPSTREAM)], [T.DWORD], [T.LPBINDSTATUSCALLBACK]]),
    URLOpenBlockingStreamW: Fn(T.HRESULT, [[T.LPUNKNOWN], [T.LPCWSTR], [Pointer(T.LPSTREAM)], [T.DWORD], [T.LPBINDSTATUSCALLBACK]]),
    IsLoggingEnabledA: Fn(T.BOOL, [[T.LPCSTR]]),
    IsLoggingEnabledW: Fn(T.BOOL, [[T.LPCWSTR]]),
    IID_IPropertyStorage: T.GUID,
    IPropertyStorage_ReadMultiple_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpspec'], [Pointer(T.PROPSPEC), 'rgpspec'], [Pointer(T.PROPVARIANT), 'rgpropvar']]),
    IPropertyStorage_ReadMultiple_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPropertyStorage_WriteMultiple_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpspec'], [Pointer(T.PROPSPEC), 'rgpspec'], [Pointer(T.PROPVARIANT), 'rgpropvar'], [T.PROPID, 'propidNameFirst']]),
    IPropertyStorage_WriteMultiple_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPropertyStorage_DeleteMultiple_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpspec'], [Pointer(T.PROPSPEC), 'rgpspec']]),
    IPropertyStorage_DeleteMultiple_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPropertyStorage_ReadPropertyNames_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpropid'], [Pointer(T.PROPID), 'rgpropid'], [Pointer(T.LPOLESTR), 'rglpwstrName']]),
    IPropertyStorage_ReadPropertyNames_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPropertyStorage_WritePropertyNames_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpropid'], [Pointer(T.PROPID), 'rgpropid'], [Pointer(T.LPOLESTR), 'rglpwstrName']]),
    IPropertyStorage_WritePropertyNames_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPropertyStorage_DeletePropertyNames_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.ULONG, 'cpropid'], [Pointer(T.PROPID), 'rgpropid']]),
    IPropertyStorage_DeletePropertyNames_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPropertyStorage_Commit_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [T.DWORD, 'grfCommitFlags']]),
    IPropertyStorage_Commit_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPropertyStorage_Revert_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This']]),
    IPropertyStorage_Revert_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPropertyStorage_Enum_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(Pointer(T.IEnumSTATPROPSTG)), 'ppenum']]),
    IPropertyStorage_Enum_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPropertyStorage_SetTimes_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(T.FILETIME), 'pctime'], [Pointer(T.FILETIME), 'patime'], [Pointer(T.FILETIME), 'pmtime']]),
    IPropertyStorage_SetTimes_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPropertyStorage_SetClass_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(T.CLSID), 'clsid']]),
    IPropertyStorage_SetClass_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPropertyStorage_Stat_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertyStorage), 'This'], [Pointer(T.STATPROPSETSTG), 'statpsstg']]),
    IPropertyStorage_Stat_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IPropertySetStorage: T.GUID,
    IPropertySetStorage_Create_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(T.FMTID), 'rfmtid'], [Pointer(T.CLSID), 'pclsid'], [T.DWORD, 'grfFlags'], [T.DWORD, 'grfMode'], [Pointer(Pointer(T.IPropertyStorage)), 'ppprstg']]),
    IPropertySetStorage_Create_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPropertySetStorage_Open_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(T.FMTID), 'rfmtid'], [T.DWORD, 'grfMode'], [Pointer(Pointer(T.IPropertyStorage)), 'ppprstg']]),
    IPropertySetStorage_Open_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPropertySetStorage_Delete_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(T.FMTID), 'rfmtid']]),
    IPropertySetStorage_Delete_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IPropertySetStorage_Enum_Proxy: Fn(T.HRESULT, [[Pointer(T.IPropertySetStorage), 'This'], [Pointer(Pointer(T.IEnumSTATPROPSETSTG)), 'ppenum']]),
    IPropertySetStorage_Enum_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IID_IEnumSTATPROPSTG: T.GUID,
    IEnumSTATPROPSTG_RemoteNext_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATPROPSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumSTATPROPSTG_RemoteNext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumSTATPROPSTG_Skip_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [T.ULONG, 'celt']]),
    IEnumSTATPROPSTG_Skip_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumSTATPROPSTG_Reset_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This']]),
    IEnumSTATPROPSTG_Reset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumSTATPROPSTG_Clone_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [Pointer(Pointer(T.IEnumSTATPROPSTG)), 'ppenum']]),
    IEnumSTATPROPSTG_Clone_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumSTATPROPSTG_Next_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATPROPSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumSTATPROPSTG_Next_Stub: Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATPROPSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IID_IEnumSTATPROPSETSTG: T.GUID,
    IEnumSTATPROPSETSTG_RemoteNext_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATPROPSETSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumSTATPROPSETSTG_RemoteNext_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumSTATPROPSETSTG_Skip_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [T.ULONG, 'celt']]),
    IEnumSTATPROPSETSTG_Skip_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumSTATPROPSETSTG_Reset_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This']]),
    IEnumSTATPROPSETSTG_Reset_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumSTATPROPSETSTG_Clone_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [Pointer(Pointer(T.IEnumSTATPROPSETSTG)), 'ppenum']]),
    IEnumSTATPROPSETSTG_Clone_Stub: Fn(null, [[Pointer(T.IRpcStubBuffer), 'This'], [Pointer(T.IRpcChannelBuffer), 'pRpcChannelBuffer'], [T.PRPC_MESSAGE, 'pRpcMessage'], [Pointer(T.DWORD), 'pdwStubPhase']]),
    IEnumSTATPROPSETSTG_Next_Proxy: Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATPROPSETSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    IEnumSTATPROPSETSTG_Next_Stub: Fn(T.HRESULT, [[Pointer(T.IEnumSTATPROPSETSTG), 'This'], [T.ULONG, 'celt'], [Pointer(T.STATPROPSETSTG), 'rgelt'], [Pointer(T.ULONG), 'pceltFetched']]),
    FreePropVariantArray: Fn(T.HRESULT, [[T.ULONG], [Pointer(T.PROPVARIANT)]]),
    PropVariantClear: Fn(T.HRESULT, [[Pointer(T.PROPVARIANT)]]),
    PropVariantCopy: Fn(T.HRESULT, [[Pointer(T.PROPVARIANT)], [Pointer(T.PROPVARIANT)]]),
    StgCreatePropStg: Fn(T.HRESULT, [[Pointer(T.IUnknown)], [Pointer(T.FMTID)], [Pointer(T.CLSID)], [T.DWORD], [T.DWORD], [Pointer(Pointer(T.IPropertyStorage))]]),
    StgOpenPropStg: Fn(T.HRESULT, [[Pointer(T.IUnknown)], [Pointer(T.FMTID)], [T.DWORD], [T.DWORD], [Pointer(Pointer(T.IPropertyStorage))]]),
    StgCreatePropSetStg: Fn(T.HRESULT, [[Pointer(T.IStorage)], [T.DWORD], [Pointer(Pointer(T.IPropertySetStorage))]]),
    FmtIdToPropStgName: Fn(T.HRESULT, [[Pointer(T.FMTID)], [T.LPOLESTR]]),
    PropStgNameToFmtId: Fn(T.HRESULT, [[T.LPOLESTR], [Pointer(T.FMTID)]]),
    LPSAFEARRAY_UserSize: Fn(T.ULONG, [[Pointer(T.ULONG)], [T.ULONG], [Pointer(T.LPSAFEARRAY)]]),
    LPSAFEARRAY_UserMarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.LPSAFEARRAY)]]),
    LPSAFEARRAY_UserUnmarshal: Fn(Pointer(T.u8), [[Pointer(T.ULONG)], [Pointer(T.u8)], [Pointer(T.LPSAFEARRAY)]]),
    LPSAFEARRAY_UserFree: Fn(null, [[Pointer(T.ULONG)], [Pointer(T.LPSAFEARRAY)]]),
    IID_StdOle: T.GUID,
    OaBuildVersion: Fn(T.ULONG, [[null]]),
    SysAllocString: Fn(T.BSTR, [[Pointer(T.OLECHAR)]]),
    SysAllocStringByteLen: Fn(T.BSTR, [[T.LPCSTR], [T.UINT]]),
    SysAllocStringLen: Fn(T.BSTR, [[Pointer(T.OLECHAR)], [T.UINT]]),
    SysFreeString: Fn(null, [[T.BSTR]]),
    SysReAllocString: Fn(T.INT, [[T.LPBSTR], [Pointer(T.OLECHAR)]]),
    SysReAllocStringLen: Fn(T.i32, [[Pointer(T.BSTR)], [Pointer(T.OLECHAR)], [T.UINT]]),
    SysStringByteLen: Fn(T.UINT, [[T.BSTR]]),
    SysStringLen: Fn(T.UINT, [[T.BSTR]]),
    SetErrorInfo: Fn(T.HRESULT, [[T.ULONG], [Pointer(T.IErrorInfo)]]),
    GetErrorInfo: Fn(T.HRESULT, [[T.ULONG], [Pointer(Pointer(T.IErrorInfo))]]),
    CreateErrorInfo: Fn(T.HRESULT, [[Pointer(Pointer(T.ICreateErrorInfo))]]),
    SafeArrayCreate: Fn(Pointer(T.SAFEARRAY), [[T.VARTYPE], [T.UINT], [Pointer(T.SAFEARRAYBOUND)]]),
    SafeArrayCreateEx: Fn(Pointer(T.SAFEARRAY), [[T.VARTYPE], [T.UINT], [Pointer(T.SAFEARRAYBOUND)], [T.LPVOID]]),
    SafeArrayCreateVector: Fn(Pointer(T.SAFEARRAY), [[T.VARTYPE], [T.LONG], [T.ULONG]]),
    SafeArrayCreateVectorEx: Fn(Pointer(T.SAFEARRAY), [[T.VARTYPE], [T.LONG], [T.ULONG], [T.LPVOID]]),
    SafeArrayAllocDescriptor: Fn(T.HRESULT, [[T.UINT], [Pointer(Pointer(T.SAFEARRAY))]]),
    SafeArrayAllocDescriptorEx: Fn(T.HRESULT, [[T.VARTYPE], [T.UINT], [Pointer(Pointer(T.SAFEARRAY))]]),
    SafeArrayAllocData: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)]]),
    SafeArrayDestroyDescriptor: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)]]),
    SafeArrayPutElement: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.LONG)], [Pointer(null)]]),
    SafeArrayGetElement: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.LONG)], [Pointer(null)]]),
    SafeArrayLock: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)]]),
    SafeArrayUnlock: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)]]),
    SafeArrayGetUBound: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [T.UINT], [Pointer(T.LONG)]]),
    SafeArrayGetLBound: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [T.UINT], [Pointer(T.LONG)]]),
    SafeArrayGetDim: Fn(T.UINT, [[Pointer(T.SAFEARRAY)]]),
    SafeArrayGetElemsize: Fn(T.UINT, [[Pointer(T.SAFEARRAY)]]),
    SafeArrayGetVartype: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.VARTYPE)]]),
    SafeArrayAccessData: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(Pointer(null))]]),
    SafeArrayUnaccessData: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)]]),
    SafeArrayPtrOfIndex: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.LONG)], [Pointer(Pointer(null))]]),
    SafeArrayCopyData: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.SAFEARRAY)]]),
    SafeArrayDestroyData: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)]]),
    SafeArrayDestroy: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)]]),
    SafeArrayCopy: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(Pointer(T.SAFEARRAY))]]),
    SafeArrayRedim: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.SAFEARRAYBOUND)]]),
    SafeArraySetRecordInfo: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.IRecordInfo)]]),
    SafeArrayGetRecordInfo: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(Pointer(T.IRecordInfo))]]),
    SafeArraySetIID: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.GUID)]]),
    SafeArrayGetIID: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.GUID)]]),
    VectorFromBstr: Fn(T.HRESULT, [[T.BSTR], [Pointer(Pointer(T.SAFEARRAY))]]),
    BstrFromVector: Fn(T.HRESULT, [[Pointer(T.SAFEARRAY)], [Pointer(T.BSTR)]]),
    RegisterActiveObject: Fn(T.HRESULT, [[T.LPUNKNOWN], [Pointer(T.CLSID)], [T.DWORD], [T.LPDWORD]]),
    RevokeActiveObject: Fn(T.HRESULT, [[T.DWORD], [T.LPVOID]]),
    GetActiveObject: Fn(T.HRESULT, [[Pointer(T.CLSID)], [T.LPVOID], [Pointer(T.LPUNKNOWN)]]),
    GetRecordInfoFromTypeInfo: Fn(T.HRESULT, [[Pointer(T.ITypeInfo)], [Pointer(Pointer(T.IRecordInfo))]]),
    GetRecordInfoFromGuids: Fn(T.HRESULT, [[Pointer(T.GUID)], [T.ULONG], [T.ULONG], [T.LCID], [Pointer(T.GUID)], [Pointer(Pointer(T.IRecordInfo))]]),
    VariantInit: Fn(null, [[Pointer(T.VARIANT)]]),
    VariantClear: Fn(T.HRESULT, [[Pointer(T.VARIANT)]]),
    VariantCopy: Fn(T.HRESULT, [[Pointer(T.VARIANT)], [Pointer(T.VARIANT)]]),
    VariantCopyInd: Fn(T.HRESULT, [[Pointer(T.VARIANT)], [Pointer(T.VARIANT)]]),
    VariantChangeType: Fn(T.HRESULT, [[Pointer(T.VARIANT)], [Pointer(T.VARIANT)], [T.USHORT], [T.VARTYPE]]),
    VariantChangeTypeEx: Fn(T.HRESULT, [[Pointer(T.VARIANT)], [Pointer(T.VARIANT)], [T.LCID], [T.USHORT], [T.VARTYPE]]),
    VarUI1FromI2: Fn(T.HRESULT, [[T.SHORT], [Pointer(T.BYTE)]]),
    VarUI1FromI4: Fn(T.HRESULT, [[T.LONG], [Pointer(T.BYTE)]]),
    VarUI1FromI8: Fn(T.HRESULT, [[T.LONG64], [Pointer(T.BYTE)]]),
    VarUI1FromR4: Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.BYTE)]]),
    VarUI1FromR8: Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.BYTE)]]),
    VarUI1FromDate: Fn(T.HRESULT, [[T.DATE], [Pointer(T.BYTE)]]),
    VarUI1FromBool: Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.BYTE)]]),
    VarUI1FromI1: Fn(T.HRESULT, [[T.i8], [Pointer(T.BYTE)]]),
    VarUI1FromUI2: Fn(T.HRESULT, [[T.USHORT], [Pointer(T.BYTE)]]),
    VarUI1FromUI4: Fn(T.HRESULT, [[T.ULONG], [Pointer(T.BYTE)]]),
    VarUI1FromUI8: Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.BYTE)]]),
    VarUI1FromStr: Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.BYTE)]]),
    VarUI1FromCy: Fn(T.HRESULT, [[T.CY], [Pointer(T.BYTE)]]),
    VarUI1FromDec: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.BYTE)]]),
    VarUI1FromDisp: Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.BYTE)]]),
    VarI2FromUI1: Fn(T.HRESULT, [[T.BYTE], [Pointer(T.SHORT)]]),
    VarI2FromI4: Fn(T.HRESULT, [[T.LONG], [Pointer(T.SHORT)]]),
    VarI2FromI8: Fn(T.HRESULT, [[T.LONG64], [Pointer(T.SHORT)]]),
    VarI2FromR4: Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.SHORT)]]),
    VarI2FromR8: Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.SHORT)]]),
    VarI2FromDate: Fn(T.HRESULT, [[T.DATE], [Pointer(T.SHORT)]]),
    VarI2FromBool: Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.SHORT)]]),
    VarI2FromI1: Fn(T.HRESULT, [[T.i8], [Pointer(T.SHORT)]]),
    VarI2FromUI2: Fn(T.HRESULT, [[T.USHORT], [Pointer(T.SHORT)]]),
    VarI2FromUI4: Fn(T.HRESULT, [[T.ULONG], [Pointer(T.SHORT)]]),
    VarI2FromUI8: Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.SHORT)]]),
    VarI2FromStr: Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.SHORT)]]),
    VarI2FromCy: Fn(T.HRESULT, [[T.CY], [Pointer(T.SHORT)]]),
    VarI2FromDec: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.SHORT)]]),
    VarI2FromDisp: Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.SHORT)]]),
    VarI4FromUI1: Fn(T.HRESULT, [[T.BYTE], [Pointer(T.LONG)]]),
    VarI4FromI2: Fn(T.HRESULT, [[T.SHORT], [Pointer(T.LONG)]]),
    VarI4FromI8: Fn(T.HRESULT, [[T.LONG64], [Pointer(T.LONG)]]),
    VarI4FromR4: Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.LONG)]]),
    VarI4FromR8: Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.LONG)]]),
    VarI4FromDate: Fn(T.HRESULT, [[T.DATE], [Pointer(T.LONG)]]),
    VarI4FromBool: Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.LONG)]]),
    VarI4FromI1: Fn(T.HRESULT, [[T.i8], [Pointer(T.LONG)]]),
    VarI4FromUI2: Fn(T.HRESULT, [[T.USHORT], [Pointer(T.LONG)]]),
    VarI4FromUI4: Fn(T.HRESULT, [[T.ULONG], [Pointer(T.LONG)]]),
    VarI4FromUI8: Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.LONG)]]),
    VarI4FromStr: Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.LONG)]]),
    VarI4FromCy: Fn(T.HRESULT, [[T.CY], [Pointer(T.LONG)]]),
    VarI4FromDec: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.LONG)]]),
    VarI4FromDisp: Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.LONG)]]),
    VarI8FromUI1: Fn(T.HRESULT, [[T.BYTE], [Pointer(T.LONG64)]]),
    VarI8FromI2: Fn(T.HRESULT, [[T.SHORT], [Pointer(T.LONG64)]]),
    VarI8FromI4: Fn(T.HRESULT, [[T.LONG], [Pointer(T.LONG64)]]),
    VarI8FromR4: Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.LONG64)]]),
    VarI8FromR8: Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.LONG64)]]),
    VarI8FromDate: Fn(T.HRESULT, [[T.DATE], [Pointer(T.LONG64)]]),
    VarI8FromStr: Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.LONG64)]]),
    VarI8FromBool: Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.LONG64)]]),
    VarI8FromI1: Fn(T.HRESULT, [[T.i8], [Pointer(T.LONG64)]]),
    VarI8FromUI2: Fn(T.HRESULT, [[T.USHORT], [Pointer(T.LONG64)]]),
    VarI8FromUI4: Fn(T.HRESULT, [[T.ULONG], [Pointer(T.LONG64)]]),
    VarI8FromUI8: Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.LONG64)]]),
    VarI8FromDec: Fn(T.HRESULT, [[Pointer(T.DECIMAL), 'pdecIn'], [Pointer(T.LONG64)]]),
    VarI8FromInt: Fn(T.HRESULT, [[T.INT, 'intIn'], [Pointer(T.LONG64)]]),
    VarI8FromCy: Fn(T.HRESULT, [[T.CY], [Pointer(T.LONG64)]]),
    VarI8FromDisp: Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.LONG64)]]),
    VarR4FromUI1: Fn(T.HRESULT, [[T.BYTE], [Pointer(T.FLOAT)]]),
    VarR4FromI2: Fn(T.HRESULT, [[T.SHORT], [Pointer(T.FLOAT)]]),
    VarR4FromI4: Fn(T.HRESULT, [[T.LONG], [Pointer(T.FLOAT)]]),
    VarR4FromI8: Fn(T.HRESULT, [[T.LONG64], [Pointer(T.FLOAT)]]),
    VarR4FromR8: Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.FLOAT)]]),
    VarR4FromDate: Fn(T.HRESULT, [[T.DATE], [Pointer(T.FLOAT)]]),
    VarR4FromBool: Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.FLOAT)]]),
    VarR4FromI1: Fn(T.HRESULT, [[T.i8], [Pointer(T.FLOAT)]]),
    VarR4FromUI2: Fn(T.HRESULT, [[T.USHORT], [Pointer(T.FLOAT)]]),
    VarR4FromUI4: Fn(T.HRESULT, [[T.ULONG], [Pointer(T.FLOAT)]]),
    VarR4FromUI8: Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.FLOAT)]]),
    VarR4FromStr: Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.FLOAT)]]),
    VarR4FromCy: Fn(T.HRESULT, [[T.CY], [Pointer(T.FLOAT)]]),
    VarR4FromDec: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.FLOAT)]]),
    VarR4FromDisp: Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.FLOAT)]]),
    VarR8FromUI1: Fn(T.HRESULT, [[T.BYTE], [Pointer(T.f64)]]),
    VarR8FromI2: Fn(T.HRESULT, [[T.SHORT], [Pointer(T.f64)]]),
    VarR8FromI4: Fn(T.HRESULT, [[T.LONG], [Pointer(T.f64)]]),
    VarR8FromI8: Fn(T.HRESULT, [[T.LONG64], [Pointer(T.f64)]]),
    VarR8FromR4: Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.f64)]]),
    VarR8FromDate: Fn(T.HRESULT, [[T.DATE], [Pointer(T.f64)]]),
    VarR8FromBool: Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.f64)]]),
    VarR8FromI1: Fn(T.HRESULT, [[T.i8], [Pointer(T.f64)]]),
    VarR8FromUI2: Fn(T.HRESULT, [[T.USHORT], [Pointer(T.f64)]]),
    VarR8FromUI4: Fn(T.HRESULT, [[T.ULONG], [Pointer(T.f64)]]),
    VarR8FromUI8: Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.f64)]]),
    VarR8FromStr: Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.f64)]]),
    VarR8FromCy: Fn(T.HRESULT, [[T.CY], [Pointer(T.f64)]]),
    VarR8FromDec: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.f64)]]),
    VarR8FromDisp: Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.f64)]]),
    VarDateFromUI1: Fn(T.HRESULT, [[T.BYTE], [Pointer(T.DATE)]]),
    VarDateFromI2: Fn(T.HRESULT, [[T.SHORT], [Pointer(T.DATE)]]),
    VarDateFromI4: Fn(T.HRESULT, [[T.LONG], [Pointer(T.DATE)]]),
    VarDateFromI8: Fn(T.HRESULT, [[T.LONG64], [Pointer(T.DATE)]]),
    VarDateFromR4: Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.DATE)]]),
    VarDateFromR8: Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.DATE)]]),
    VarDateFromStr: Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.DATE)]]),
    VarDateFromI1: Fn(T.HRESULT, [[T.i8], [Pointer(T.DATE)]]),
    VarDateFromUI2: Fn(T.HRESULT, [[T.USHORT], [Pointer(T.DATE)]]),
    VarDateFromUI4: Fn(T.HRESULT, [[T.ULONG], [Pointer(T.DATE)]]),
    VarDateFromUI8: Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.DATE)]]),
    VarDateFromBool: Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.DATE)]]),
    VarDateFromCy: Fn(T.HRESULT, [[T.CY], [Pointer(T.DATE)]]),
    VarDateFromDec: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DATE)]]),
    VarDateFromDisp: Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.DATE)]]),
    VarCyFromUI1: Fn(T.HRESULT, [[T.BYTE], [Pointer(T.CY)]]),
    VarCyFromI2: Fn(T.HRESULT, [[T.SHORT, 'sIn'], [Pointer(T.CY)]]),
    VarCyFromI4: Fn(T.HRESULT, [[T.LONG], [Pointer(T.CY)]]),
    VarCyFromI8: Fn(T.HRESULT, [[T.LONG64], [Pointer(T.CY)]]),
    VarCyFromR4: Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.CY)]]),
    VarCyFromR8: Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.CY)]]),
    VarCyFromDate: Fn(T.HRESULT, [[T.DATE], [Pointer(T.CY)]]),
    VarCyFromStr: Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.CY)]]),
    VarCyFromBool: Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.CY)]]),
    VarCyFromI1: Fn(T.HRESULT, [[T.i8], [Pointer(T.CY)]]),
    VarCyFromUI2: Fn(T.HRESULT, [[T.USHORT], [Pointer(T.CY)]]),
    VarCyFromUI4: Fn(T.HRESULT, [[T.ULONG], [Pointer(T.CY)]]),
    VarCyFromUI8: Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.CY)]]),
    VarCyFromDec: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.CY)]]),
    VarCyFromDisp: Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.CY)]]),
    VarBstrFromUI1: Fn(T.HRESULT, [[T.BYTE], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]]),
    VarBstrFromI2: Fn(T.HRESULT, [[T.SHORT], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]]),
    VarBstrFromI4: Fn(T.HRESULT, [[T.LONG], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]]),
    VarBstrFromI8: Fn(T.HRESULT, [[T.LONG64], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]]),
    VarBstrFromR4: Fn(T.HRESULT, [[T.FLOAT], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]]),
    VarBstrFromR8: Fn(T.HRESULT, [[T.DOUBLE], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]]),
    VarBstrFromDate: Fn(T.HRESULT, [[T.DATE], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]]),
    VarBstrFromBool: Fn(T.HRESULT, [[T.VARIANT_BOOL], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]]),
    VarBstrFromI1: Fn(T.HRESULT, [[T.i8], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]]),
    VarBstrFromUI2: Fn(T.HRESULT, [[T.USHORT], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]]),
    VarBstrFromUI8: Fn(T.HRESULT, [[T.ULONG64], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]]),
    VarBstrFromUI4: Fn(T.HRESULT, [[T.ULONG], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]]),
    VarBstrFromCy: Fn(T.HRESULT, [[T.CY], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]]),
    VarBstrFromDec: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]]),
    VarBstrFromDisp: Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [T.ULONG], [Pointer(T.BSTR)]]),
    VarBoolFromUI1: Fn(T.HRESULT, [[T.BYTE], [Pointer(T.VARIANT_BOOL)]]),
    VarBoolFromI2: Fn(T.HRESULT, [[T.SHORT], [Pointer(T.VARIANT_BOOL)]]),
    VarBoolFromI4: Fn(T.HRESULT, [[T.LONG], [Pointer(T.VARIANT_BOOL)]]),
    VarBoolFromI8: Fn(T.HRESULT, [[T.LONG64], [Pointer(T.VARIANT_BOOL)]]),
    VarBoolFromR4: Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.VARIANT_BOOL)]]),
    VarBoolFromR8: Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.VARIANT_BOOL)]]),
    VarBoolFromDate: Fn(T.HRESULT, [[T.DATE], [Pointer(T.VARIANT_BOOL)]]),
    VarBoolFromStr: Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.VARIANT_BOOL)]]),
    VarBoolFromI1: Fn(T.HRESULT, [[T.i8], [Pointer(T.VARIANT_BOOL)]]),
    VarBoolFromUI2: Fn(T.HRESULT, [[T.USHORT], [Pointer(T.VARIANT_BOOL)]]),
    VarBoolFromUI4: Fn(T.HRESULT, [[T.ULONG], [Pointer(T.VARIANT_BOOL)]]),
    VarBoolFromUI8: Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.VARIANT_BOOL)]]),
    VarBoolFromCy: Fn(T.HRESULT, [[T.CY], [Pointer(T.VARIANT_BOOL)]]),
    VarBoolFromDec: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.VARIANT_BOOL)]]),
    VarBoolFromDisp: Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.VARIANT_BOOL)]]),
    VarI1FromUI1: Fn(T.HRESULT, [[T.BYTE], [Pointer(T.i8)]]),
    VarI1FromI2: Fn(T.HRESULT, [[T.SHORT], [Pointer(T.i8)]]),
    VarI1FromI4: Fn(T.HRESULT, [[T.LONG], [Pointer(T.i8)]]),
    VarI1FromI8: Fn(T.HRESULT, [[T.LONG64], [Pointer(T.i8)]]),
    VarI1FromR4: Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.i8)]]),
    VarI1FromR8: Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.i8)]]),
    VarI1FromDate: Fn(T.HRESULT, [[T.DATE], [Pointer(T.i8)]]),
    VarI1FromStr: Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.i8)]]),
    VarI1FromBool: Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.i8)]]),
    VarI1FromUI2: Fn(T.HRESULT, [[T.USHORT], [Pointer(T.i8)]]),
    VarI1FromUI4: Fn(T.HRESULT, [[T.ULONG], [Pointer(T.i8)]]),
    VarI1FromUI8: Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.i8)]]),
    VarI1FromCy: Fn(T.HRESULT, [[T.CY], [Pointer(T.i8)]]),
    VarI1FromDec: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.i8)]]),
    VarI1FromDisp: Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.i8)]]),
    VarUI2FromUI1: Fn(T.HRESULT, [[T.BYTE], [Pointer(T.USHORT)]]),
    VarUI2FromI2: Fn(T.HRESULT, [[T.SHORT], [Pointer(T.USHORT)]]),
    VarUI2FromI4: Fn(T.HRESULT, [[T.LONG], [Pointer(T.USHORT)]]),
    VarUI2FromI8: Fn(T.HRESULT, [[T.LONG64], [Pointer(T.USHORT)]]),
    VarUI2FromR4: Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.USHORT)]]),
    VarUI2FromR8: Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.USHORT)]]),
    VarUI2FromDate: Fn(T.HRESULT, [[T.DATE], [Pointer(T.USHORT)]]),
    VarUI2FromStr: Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.USHORT)]]),
    VarUI2FromBool: Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.USHORT)]]),
    VarUI2FromI1: Fn(T.HRESULT, [[T.i8], [Pointer(T.USHORT)]]),
    VarUI2FromUI4: Fn(T.HRESULT, [[T.ULONG], [Pointer(T.USHORT)]]),
    VarUI2FromUI8: Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.USHORT)]]),
    VarUI2FromCy: Fn(T.HRESULT, [[T.CY], [Pointer(T.USHORT)]]),
    VarUI2FromDec: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.USHORT)]]),
    VarUI2FromDisp: Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.USHORT)]]),
    VarUI4FromStr: Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.ULONG)]]),
    VarUI4FromUI1: Fn(T.HRESULT, [[T.BYTE], [Pointer(T.ULONG)]]),
    VarUI4FromI2: Fn(T.HRESULT, [[T.SHORT], [Pointer(T.ULONG)]]),
    VarUI4FromI4: Fn(T.HRESULT, [[T.LONG], [Pointer(T.ULONG)]]),
    VarUI4FromI8: Fn(T.HRESULT, [[T.LONG64], [Pointer(T.ULONG)]]),
    VarUI4FromR4: Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.ULONG)]]),
    VarUI4FromR8: Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.ULONG)]]),
    VarUI4FromDate: Fn(T.HRESULT, [[T.DATE], [Pointer(T.ULONG)]]),
    VarUI4FromBool: Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.ULONG)]]),
    VarUI4FromI1: Fn(T.HRESULT, [[T.i8], [Pointer(T.ULONG)]]),
    VarUI4FromUI2: Fn(T.HRESULT, [[T.USHORT], [Pointer(T.ULONG)]]),
    VarUI4FromUI8: Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.ULONG)]]),
    VarUI4FromCy: Fn(T.HRESULT, [[T.CY], [Pointer(T.ULONG)]]),
    VarUI4FromDec: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.ULONG)]]),
    VarUI4FromDisp: Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.ULONG)]]),
    VarUI8FromUI1: Fn(T.HRESULT, [[T.BYTE], [Pointer(T.ULONG64)]]),
    VarUI8FromI2: Fn(T.HRESULT, [[T.SHORT], [Pointer(T.ULONG64)]]),
    VarUI8FromI4: Fn(T.HRESULT, [[T.LONG], [Pointer(T.ULONG64)]]),
    VarUI8FromI8: Fn(T.HRESULT, [[T.LONG64], [Pointer(T.ULONG64)]]),
    VarUI8FromR4: Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.ULONG64)]]),
    VarUI8FromR8: Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.ULONG64)]]),
    VarUI8FromDate: Fn(T.HRESULT, [[T.DATE], [Pointer(T.ULONG64)]]),
    VarUI8FromStr: Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.ULONG64)]]),
    VarUI8FromBool: Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.ULONG64)]]),
    VarUI8FromI1: Fn(T.HRESULT, [[T.i8], [Pointer(T.ULONG64)]]),
    VarUI8FromUI2: Fn(T.HRESULT, [[T.USHORT], [Pointer(T.ULONG64)]]),
    VarUI8FromUI4: Fn(T.HRESULT, [[T.ULONG], [Pointer(T.ULONG64)]]),
    VarUI8FromDec: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.ULONG64)]]),
    VarUI8FromInt: Fn(T.HRESULT, [[T.INT], [Pointer(T.ULONG64)]]),
    VarUI8FromCy: Fn(T.HRESULT, [[T.CY], [Pointer(T.ULONG64)]]),
    VarUI8FromDisp: Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.ULONG64)]]),
    VarDecFromUI1: Fn(T.HRESULT, [[T.BYTE], [Pointer(T.DECIMAL)]]),
    VarDecFromI2: Fn(T.HRESULT, [[T.SHORT], [Pointer(T.DECIMAL)]]),
    VarDecFromI4: Fn(T.HRESULT, [[T.LONG], [Pointer(T.DECIMAL)]]),
    VarDecFromI8: Fn(T.HRESULT, [[T.LONG64], [Pointer(T.DECIMAL)]]),
    VarDecFromR4: Fn(T.HRESULT, [[T.FLOAT], [Pointer(T.DECIMAL)]]),
    VarDecFromR8: Fn(T.HRESULT, [[T.DOUBLE], [Pointer(T.DECIMAL)]]),
    VarDecFromDate: Fn(T.HRESULT, [[T.DATE], [Pointer(T.DECIMAL)]]),
    VarDecFromStr: Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.DECIMAL)]]),
    VarDecFromBool: Fn(T.HRESULT, [[T.VARIANT_BOOL], [Pointer(T.DECIMAL)]]),
    VarDecFromI1: Fn(T.HRESULT, [[T.i8], [Pointer(T.DECIMAL)]]),
    VarDecFromUI2: Fn(T.HRESULT, [[T.USHORT], [Pointer(T.DECIMAL)]]),
    VarDecFromUI4: Fn(T.HRESULT, [[T.ULONG], [Pointer(T.DECIMAL)]]),
    VarDecFromUI8: Fn(T.HRESULT, [[T.ULONG64], [Pointer(T.DECIMAL)]]),
    VarDecFromCy: Fn(T.HRESULT, [[T.CY], [Pointer(T.DECIMAL)]]),
    VarDecFromDisp: Fn(T.HRESULT, [[Pointer(T.IDispatch)], [T.LCID], [Pointer(T.DECIMAL)]]),
    VarR4CmpR8: Fn(T.HRESULT, [[T.f32], [T.f64]]),
    VarR8Pow: Fn(T.HRESULT, [[T.f64], [T.f64], [Pointer(T.f64)]]),
    VarR8Round: Fn(T.HRESULT, [[T.f64], [T.i32], [Pointer(T.f64)]]),
    VarDecAbs: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]]),
    VarDecAdd: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]]),
    VarDecCmp: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]]),
    VarDecCmpR8: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [T.DOUBLE]]),
    VarDecDiv: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]]),
    VarDecFix: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]]),
    VarDecInt: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]]),
    VarDecMul: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]]),
    VarDecNeg: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]]),
    VarDecRound: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [T.i32], [Pointer(T.DECIMAL)]]),
    VarDecSub: Fn(T.HRESULT, [[Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)], [Pointer(T.DECIMAL)]]),
    VarCyAbs: Fn(T.HRESULT, [[T.CY], [Pointer(T.CY)]]),
    VarCyAdd: Fn(T.HRESULT, [[T.CY], [T.CY], [Pointer(T.CY)]]),
    VarCyCmp: Fn(T.HRESULT, [[T.CY], [T.CY]]),
    VarCyCmpR8: Fn(T.HRESULT, [[T.CY], [T.DOUBLE]]),
    VarCyFix: Fn(T.HRESULT, [[T.CY], [Pointer(T.CY)]]),
    VarCyInt: Fn(T.HRESULT, [[T.CY], [Pointer(T.CY)]]),
    VarCyMul: Fn(T.HRESULT, [[T.CY], [T.CY], [Pointer(T.CY)]]),
    VarCyMulI4: Fn(T.HRESULT, [[T.CY], [T.LONG], [Pointer(T.CY)]]),
    VarCyMulI8: Fn(T.HRESULT, [[T.CY], [T.LONG64], [Pointer(T.CY)]]),
    VarCyNeg: Fn(T.HRESULT, [[T.CY], [Pointer(T.CY)]]),
    VarCyRound: Fn(T.HRESULT, [[T.CY], [T.INT], [Pointer(T.CY)]]),
    VarCySub: Fn(T.HRESULT, [[T.CY], [T.CY], [Pointer(T.CY)]]),
    VarAdd: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]]),
    VarAnd: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]]),
    VarCat: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]]),
    VarDiv: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]]),
    VarEqv: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]]),
    VarIdiv: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]]),
    VarImp: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]]),
    VarMod: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]]),
    VarMul: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]]),
    VarOr: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]]),
    VarPow: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]]),
    VarSub: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]]),
    VarXor: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LPVARIANT]]),
    VarAbs: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT]]),
    VarFix: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT]]),
    VarInt: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT]]),
    VarNeg: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT]]),
    VarNot: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT]]),
    VarRound: Fn(T.HRESULT, [[T.LPVARIANT], [T.i32], [T.LPVARIANT]]),
    VarCmp: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPVARIANT], [T.LCID], [T.ULONG]]),
    VarBstrCmp: Fn(T.HRESULT, [[T.BSTR], [T.BSTR], [T.LCID], [T.ULONG]]),
    VarBstrCat: Fn(T.HRESULT, [[T.BSTR], [T.BSTR], [Pointer(T.BSTR)]]),
    VarParseNumFromStr: Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [T.LCID], [T.ULONG], [Pointer(T.NUMPARSE)], [Pointer(T.BYTE)]]),
    VarNumFromParseNum: Fn(T.HRESULT, [[Pointer(T.NUMPARSE)], [Pointer(T.BYTE)], [T.ULONG], [Pointer(T.VARIANT)]]),
    DosDateTimeToVariantTime: Fn(T.INT, [[T.USHORT], [T.USHORT], [Pointer(T.f64)]]),
    VariantTimeToDosDateTime: Fn(T.INT, [[T.f64], [Pointer(T.USHORT)], [Pointer(T.USHORT)]]),
    VariantTimeToSystemTime: Fn(T.INT, [[T.DOUBLE], [T.LPSYSTEMTIME]]),
    SystemTimeToVariantTime: Fn(T.INT, [[T.LPSYSTEMTIME], [Pointer(T.f64)]]),
    VarDateFromUdate: Fn(T.HRESULT, [[Pointer(T.UDATE)], [T.ULONG], [Pointer(T.DATE)]]),
    VarDateFromUdateEx: Fn(T.HRESULT, [[Pointer(T.UDATE)], [T.LCID], [T.ULONG], [Pointer(T.DATE)]]),
    VarUdateFromDate: Fn(T.HRESULT, [[T.DATE], [T.ULONG], [Pointer(T.UDATE)]]),
    VarWeekdayName: Fn(T.HRESULT, [[T.i32], [T.i32], [T.i32], [T.ULONG], [Pointer(T.BSTR)]]),
    VarMonthName: Fn(T.HRESULT, [[T.i32], [T.i32], [T.ULONG], [Pointer(T.BSTR)]]),
    GetAltMonthNames: Fn(T.HRESULT, [[T.LCID], [Pointer(Pointer(T.LPOLESTR))]]),
    VarFormat: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPOLESTR], [T.i32], [T.i32], [T.ULONG], [Pointer(T.BSTR)]]),
    VarFormatCurrency: Fn(T.HRESULT, [[T.LPVARIANT], [T.i32], [T.i32], [T.i32], [T.i32], [T.ULONG], [Pointer(T.BSTR)]]),
    VarFormatDateTime: Fn(T.HRESULT, [[T.LPVARIANT], [T.i32], [T.ULONG], [Pointer(T.BSTR)]]),
    VarFormatNumber: Fn(T.HRESULT, [[T.LPVARIANT], [T.i32], [T.i32], [T.i32], [T.i32], [T.ULONG], [Pointer(T.BSTR)]]),
    VarFormatPercent: Fn(T.HRESULT, [[T.LPVARIANT], [T.i32], [T.i32], [T.i32], [T.i32], [T.ULONG], [Pointer(T.BSTR)]]),
    VarFormatFromTokens: Fn(T.HRESULT, [[T.LPVARIANT], [T.LPOLESTR], [T.LPBYTE], [T.ULONG], [Pointer(T.BSTR)], [T.LCID]]),
    VarTokenizeFormatString: Fn(T.HRESULT, [[T.LPOLESTR], [T.LPBYTE], [T.i32], [T.i32], [T.i32], [T.LCID], [Pointer(T.i32)]]),
    DispGetParam: Fn(T.HRESULT, [[Pointer(T.DISPPARAMS)], [T.UINT], [T.VARTYPE], [Pointer(T.VARIANT)], [Pointer(T.UINT)]]),
    DispGetIDsOfNames: Fn(T.HRESULT, [[Pointer(T.ITypeInfo)], [Pointer(Pointer(T.OLECHAR))], [T.UINT], [Pointer(T.DISPID)]]),
    DispInvoke: Fn(T.HRESULT, [[Pointer(null)], [Pointer(T.ITypeInfo)], [T.DISPID], [T.WORD], [Pointer(T.DISPPARAMS)], [Pointer(T.VARIANT)], [Pointer(T.EXCEPINFO)], [Pointer(T.UINT)]]),
    CreateDispTypeInfo: Fn(T.HRESULT, [[Pointer(T.INTERFACEDATA)], [T.LCID], [Pointer(Pointer(T.ITypeInfo))]]),
    CreateStdDispatch: Fn(T.HRESULT, [[Pointer(T.IUnknown)], [Pointer(null)], [Pointer(T.ITypeInfo)], [Pointer(Pointer(T.IUnknown))]]),
    DispCallFunc: Fn(T.HRESULT, [[Pointer(null)], [T.ULONG_PTR], [T.CALLCONV], [T.VARTYPE], [T.UINT], [Pointer(T.VARTYPE)], [Pointer(Pointer(T.VARIANTARG))], [Pointer(T.VARIANT)]]),
    LHashValOfNameSysA: Fn(T.ULONG, [[T.SYSKIND], [T.LCID], [T.LPCSTR]]),
    LHashValOfNameSys: Fn(T.ULONG, [[T.SYSKIND], [T.LCID], [T.LPCOLESTR]]),
    CreateTypeLib: Fn(T.HRESULT, [[T.SYSKIND], [Pointer(T.OLECHAR)], [Pointer(Pointer(T.ICreateTypeLib))]]),
    CreateTypeLib2: Fn(T.HRESULT, [[T.SYSKIND], [T.LPCOLESTR], [Pointer(Pointer(T.ICreateTypeLib2))]]),
    LoadRegTypeLib: Fn(T.HRESULT, [[Pointer(T.GUID)], [T.WORD], [T.WORD], [T.LCID], [Pointer(Pointer(T.ITypeLib))]]),
    LoadTypeLib: Fn(T.HRESULT, [[Pointer(T.OLECHAR)], [Pointer(Pointer(T.ITypeLib))]]),
    LoadTypeLibEx: Fn(T.HRESULT, [[T.LPCOLESTR], [T.REGKIND], [Pointer(Pointer(T.ITypeLib))]]),
    QueryPathOfRegTypeLib: Fn(T.HRESULT, [[Pointer(T.GUID)], [T.WORD], [T.WORD], [T.LCID], [T.LPBSTR]]),
    RegisterTypeLib: Fn(T.HRESULT, [[Pointer(T.ITypeLib)], [Pointer(T.OLECHAR)], [Pointer(T.OLECHAR)]]),
    UnRegisterTypeLib: Fn(T.HRESULT, [[Pointer(T.GUID)], [T.WORD], [T.WORD], [T.LCID], [T.SYSKIND]]),
    RegisterTypeLibForUser: Fn(T.HRESULT, [[Pointer(T.ITypeLib)], [Pointer(T.OLECHAR)], [Pointer(T.OLECHAR)]]),
    UnRegisterTypeLibForUser: Fn(T.HRESULT, [[Pointer(T.GUID)], [T.WORD], [T.WORD], [T.LCID], [T.SYSKIND]]),
    ClearCustData: Fn(null, [[T.LPCUSTDATA]]),
    RegisterDragDrop: Fn(T.HRESULT, [[T.HWND], [T.LPDROPTARGET]]),
    RevokeDragDrop: Fn(T.HRESULT, [[T.HWND]]),
    DoDragDrop: Fn(T.HRESULT, [[T.LPDATAOBJECT], [T.LPDROPSOURCE], [T.DWORD], [Pointer(T.DWORD)]]),
    OleLoadFromStream: Fn(T.HRESULT, [[Pointer(T.IStream), 'pStm'], [Pointer(T.IID), 'iidInterface'], [Pointer(Pointer(null)), 'ppvObj']]),
    OleSaveToStream: Fn(T.HRESULT, [[Pointer(T.IPersistStream), 'pPStm'], [Pointer(T.IStream), 'pStm']]),
    OleCreateMenuDescriptor: Fn(T.HOLEMENU, [[T.HMENU, 'hmenuCombined'], [T.LPOLEMENUGROUPWIDTHS, 'lpMenuWidths']]),
    OleDestroyMenuDescriptor: Fn(T.HRESULT, [[T.HOLEMENU, 'hmenuDescriptor']]),
    OleSetMenuDescriptor: Fn(T.HRESULT, [[T.HOLEMENU, 'hmenuDescriptor'], [T.HWND, 'hwndFrame'], [T.HWND, 'hwndActiveObject'], [T.LPOLEINPLACEFRAME, 'lpFrame'], [T.LPOLEINPLACEACTIVEOBJECT, 'lpActiveObject']]),
    WriteClassStg: Fn(T.HRESULT, [[Pointer(T.IStorage), 'pstg'], [Pointer(T.CLSID), 'rclsid']]),
    ReadClassStg: Fn(T.HRESULT, [[Pointer(T.IStorage), 'pstg'], [Pointer(T.CLSID), 'pclsid']]),
    WriteClassStm: Fn(T.HRESULT, [[Pointer(T.IStream), 'pStm'], [Pointer(T.CLSID), 'rclsid']]),
    ReadClassStm: Fn(T.HRESULT, [[Pointer(T.IStream), 'pStm'], [Pointer(T.CLSID), 'pclsid']]),
    OleSave: Fn(T.HRESULT, [[T.LPPERSISTSTORAGE, 'pPS'], [T.LPSTORAGE, 'pStg'], [T.BOOL, 'fSameAsLoad']]),
    OleRegGetUserType: Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsid'], [T.DWORD, 'dwFormOfType'], [Pointer(T.LPOLESTR), 'pszUserType']]),
    OleRegGetMiscStatus: Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsid'], [T.DWORD, 'dwAspect'], [Pointer(T.DWORD), 'pdwStatus']]),
    OleRegEnumFormatEtc: Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsid'], [T.DWORD, 'dwDirection'], [Pointer(T.LPENUMFORMATETC), 'ppenumFormatetc']]),
    CreateStreamOnHGlobal: Fn(T.HRESULT, [[T.HGLOBAL, 'hGlobal'], [T.BOOL, 'fDeleteOnRelease'], [Pointer(T.LPSTREAM), 'ppstm']]),
    GetHGlobalFromStream: Fn(T.HRESULT, [[T.LPSTREAM, 'pstm'], [Pointer(T.HGLOBAL), 'phglobal']]),
    OleRegEnumVerbs: Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsid'], [Pointer(T.LPENUMOLEVERB), 'ppenum']]),
    OleIsRunning: Fn(T.BOOL, [[T.LPOLEOBJECT, 'pObject']]),
    OleCreateLinkFromData: Fn(T.HRESULT, [[T.LPDATAOBJECT, 'pSrcDataObj'], [Pointer(T.IID), 'riid'], [T.DWORD, 'renderopt'], [T.LPFORMATETC, 'pFormatEtc'], [T.LPOLECLIENTSITE, 'pClientSite'], [T.LPSTORAGE, 'pStg'], [Pointer(T.LPVOID), 'ppvObj']]),
    OleSetContainedObject: Fn(T.HRESULT, [[T.LPUNKNOWN, 'pUnknown'], [T.BOOL, 'fContained']]),
    OleNoteObjectVisible: Fn(T.HRESULT, [[T.LPUNKNOWN, 'pUnknown'], [T.BOOL, 'fVisible']]),
    OleQueryLinkFromData: Fn(T.HRESULT, [[Pointer(T.IDataObject), 'pSrcDataObject']]),
    OleQueryCreateFromData: Fn(T.HRESULT, [[T.LPDATAOBJECT, 'pSrcDataObject']]),
    OleRun: Fn(T.HRESULT, [[T.LPUNKNOWN, 'pUnknown']]),
    OleDraw: Fn(T.HRESULT, [[T.LPUNKNOWN, 'pUnknown'], [T.DWORD, 'dwAspect'], [T.HDC, 'hdcDraw'], [T.LPCRECT, 'lprcBounds']]),
    ReleaseStgMedium: Fn(null, [[T.LPSTGMEDIUM]]),
    OleGetClipboard: Fn(T.HRESULT, [[Pointer(Pointer(T.IDataObject)), 'ppDataObj']]),
    OleIsCurrentClipboard: Fn(T.HRESULT, [[T.LPDATAOBJECT]]),
    OleSetClipboard: Fn(T.HRESULT, [[T.LPDATAOBJECT]]),
    OleCreateStaticFromData: Fn(T.HRESULT, [[T.LPDATAOBJECT, 'pSrcDataObj'], [Pointer(T.IID), 'iid'], [T.DWORD, 'renderopt'], [T.LPFORMATETC, 'pFormatEtc'], [T.LPOLECLIENTSITE, 'pClientSite'], [T.LPSTORAGE, 'pStg'], [Pointer(T.LPVOID), 'ppvObj']]),
    ReadFmtUserTypeStg: Fn(T.HRESULT, [[T.LPSTORAGE, 'pstg'], [Pointer(T.CLIPFORMAT), 'pcf'], [Pointer(T.LPOLESTR), 'lplpszUserType']]),
    OleLoad: Fn(T.HRESULT, [[T.LPSTORAGE, 'pStg'], [Pointer(T.IID), 'riid'], [T.LPOLECLIENTSITE, 'pClientSite'], [Pointer(T.LPVOID), 'ppvObj']]),
    GetHGlobalFromILockBytes: Fn(T.HRESULT, [[T.LPLOCKBYTES, 'plkbyt'], [Pointer(T.HGLOBAL), 'phglobal']]),
    CreateILockBytesOnHGlobal: Fn(T.HRESULT, [[T.HGLOBAL, 'hGlobal'], [T.BOOL, 'fDeleteOnRelease'], [Pointer(T.LPLOCKBYTES), 'pplkbyt']]),
    OleGetIconOfClass: Fn(T.HGLOBAL, [[Pointer(T.CLSID), 'rclsid'], [T.LPOLESTR, 'lpszLabel'], [T.BOOL, 'fUseTypeAsLabel']]),
    OleGetIconOfFile: Fn(T.HGLOBAL, [[T.LPOLESTR, 'lpszPath'], [T.BOOL, 'fUseFileAsLabel']]),
    OleMetafilePictFromIconAndLabel: Fn(T.HGLOBAL, [[T.HICON, 'hIcon'], [T.LPOLESTR, 'lpszLabel'], [T.LPOLESTR, 'lpszSourceFile'], [T.UINT, 'iIconIndex']]),
    OleLockRunning: Fn(T.HRESULT, [[T.LPUNKNOWN, 'pUnknown'], [T.BOOL, 'fLock'], [T.BOOL, 'fLastUnlockCloses']]),
    OleCreateFromFile: Fn(T.HRESULT, [[Pointer(T.CLSID), 'rclsid'], [T.LPCOLESTR, 'lpszFileName'], [Pointer(T.IID), 'riid'], [T.DWORD, 'renderopt'], [T.LPFORMATETC, 'lpFormatEtc'], [T.LPOLECLIENTSITE, 'pClientSite'], [T.LPSTORAGE, 'pStg'], [Pointer(T.LPVOID), 'ppvObj']]),
    OleCreateLink: Fn(T.HRESULT, [[T.LPMONIKER, 'pmkLinkSrc'], [Pointer(T.IID), 'riid'], [T.DWORD, 'renderopt'], [T.LPFORMATETC, 'lpFormatEtc'], [T.LPOLECLIENTSITE, 'pClientSite'], [T.LPSTORAGE, 'pStg'], [Pointer(T.LPVOID), 'ppvObj']]),
    OleCreate: Fn(T.HRESULT, [[Pointer(T.CLSID), 'rclsid'], [Pointer(T.IID), 'riid'], [T.DWORD, 'renderopt'], [T.LPFORMATETC, 'pFormatEtc'], [T.LPOLECLIENTSITE, 'pClientSite'], [T.LPSTORAGE, 'pStg'], [Pointer(T.LPVOID), 'ppvObj']]),
    OleFlushClipboard: Fn(T.HRESULT, [[null]]),
    GetConvertStg: Fn(T.HRESULT, [[T.LPSTORAGE, 'pStg']]),
    SetConvertStg: Fn(T.HRESULT, [[T.LPSTORAGE, 'pStg'], [T.BOOL, 'fConvert']]),
    IsAccelerator: Fn(T.BOOL, [[T.HACCEL, 'hAccel'], [T.i32, 'cAccelEntries'], [Pointer(Struct('tagMSG', null)), 'lpMsg'], [Pointer(T.WORD), 'lpwCmd']]),
    OleCreateLinkToFile: Fn(T.HRESULT, [[T.LPCOLESTR, 'lpszFileName'], [Pointer(T.IID), 'riid'], [T.DWORD, 'renderopt'], [T.LPFORMATETC, 'lpFormatEtc'], [T.LPOLECLIENTSITE, 'pClientSite'], [T.LPSTORAGE, 'pStg'], [Pointer(T.LPVOID), 'ppvObj']]),
    OleDuplicateData: Fn(T.HANDLE, [[T.HANDLE, 'hSrc'], [T.CLIPFORMAT, 'cfFormat'], [T.UINT, 'uiFlags']]),
    WriteFmtUserTypeStg: Fn(T.HRESULT, [[T.LPSTORAGE, 'pstg'], [T.CLIPFORMAT, 'cf'], [T.LPOLESTR, 'lpszUserType']]),
    OleTranslateAccelerator: Fn(T.HRESULT, [[T.LPOLEINPLACEFRAME, 'lpFrame'], [T.LPOLEINPLACEFRAMEINFO, 'lpFrameInfo'], [Pointer(Struct('tagMSG', null)), 'lpmsg']]),
    OleCreateFromData: Fn(T.HRESULT, [[T.LPDATAOBJECT, 'pSrcDataObj'], [Pointer(T.IID), 'riid'], [T.DWORD, 'renderopt'], [T.LPFORMATETC, 'pFormatEtc'], [T.LPOLECLIENTSITE, 'pClientSite'], [T.LPSTORAGE, 'pStg'], [Pointer(T.LPVOID), 'ppvObj']]),
    OleCreateFromDataEx: Fn(T.HRESULT, [[T.LPDATAOBJECT, 'pSrcDataObj'], [Pointer(T.IID), 'riid'], [T.DWORD, 'dwFlags'], [T.DWORD, 'renderopt'], [T.ULONG, 'num_formats'], [Pointer(T.DWORD), 'adv_flags'], [T.LPFORMATETC, 'fmts'], [Pointer(T.IAdviseSink), 'sink'], [Pointer(T.DWORD), 'conns'], [T.LPOLECLIENTSITE, 'pClientSite'], [T.LPSTORAGE, 'pStg'], [Pointer(T.LPVOID), 'ppvObj']]),
    OleCreateDefaultHandler: Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsid'], [T.LPUNKNOWN, 'pUnkOuter'], [Pointer(T.IID), 'riid'], [Pointer(T.LPVOID), 'ppvObj']]),
    OleCreateEmbeddingHelper: Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsid'], [T.LPUNKNOWN, 'pUnkOuter'], [T.DWORD, 'flags'], [Pointer(T.IClassFactory), 'pCF'], [Pointer(T.IID), 'riid'], [Pointer(T.LPVOID), 'ppvObj']]),
    CreateOleAdviseHolder: Fn(T.HRESULT, [[Pointer(T.LPOLEADVISEHOLDER), 'ppOAHolder']]),
    OleInitialize: Fn(T.HRESULT, [[T.LPVOID, 'pvReserved']]),
    OleUninitialize: Fn(null, [[null]]),
    IsValidInterface: Fn(T.BOOL, [[T.LPUNKNOWN, 'punk']]),
    OleBuildVersion: Fn(T.DWORD, [[null]]),
    OleConvertOLESTREAMToIStorage: Fn(T.HRESULT, [[T.LPOLESTREAM, 'lpolestream'], [T.LPSTORAGE, 'pstg'], [Pointer(T.DVTARGETDEVICE), 'ptd']]),
    OleConvertIStorageToOLESTREAM: Fn(T.HRESULT, [[T.LPSTORAGE, 'pstg'], [T.LPOLESTREAM, 'lpolestream']]),
    OleDoAutoConvert: Fn(T.HRESULT, [[T.LPSTORAGE, 'pStg'], [T.LPCLSID, 'pClsidNew']]),
    OleGetAutoConvert: Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsidOld'], [T.LPCLSID, 'pClsidNew']]),
    OleSetAutoConvert: Fn(T.HRESULT, [[Pointer(T.CLSID), 'clsidOld'], [Pointer(T.CLSID), 'clsidNew']]),
    PropertySheetA: Fn(T.INT_PTR, [[T.LPCPROPSHEETHEADERA]]),
    PropertySheetW: Fn(T.INT_PTR, [[T.LPCPROPSHEETHEADERW]]),
    CreatePropertySheetPageA: Fn(T.HPROPSHEETPAGE, [[T.LPCPROPSHEETPAGEA]]),
    CreatePropertySheetPageW: Fn(T.HPROPSHEETPAGE, [[T.LPCPROPSHEETPAGEW]]),
    DestroyPropertySheetPage: Fn(T.BOOL, [[T.HPROPSHEETPAGE, 'hPropPage']]),
    ChooseColorA: Fn(T.BOOL, [[T.LPCHOOSECOLORA, 'lpChCol']]),
    ChooseColorW: Fn(T.BOOL, [[T.LPCHOOSECOLORW, 'lpChCol']]),
    CommDlgExtendedError: Fn(T.DWORD, [[null]]),
    FindTextA: Fn(T.HWND, [[T.LPFINDREPLACEA, 'lpFind']]),
    FindTextW: Fn(T.HWND, [[T.LPFINDREPLACEW, 'lpFind']]),
    GetFileTitleA: Fn(T.i16, [[T.LPCSTR, 'lpFile'], [T.LPSTR, 'lpTitle'], [T.WORD, 'cbBuf']]),
    GetFileTitleW: Fn(T.i16, [[T.LPCWSTR, 'lpFile'], [T.LPWSTR, 'lpTitle'], [T.WORD, 'cbBuf']]),
    GetOpenFileNameA: Fn(T.BOOL, [[T.LPOPENFILENAMEA, 'ofn']]),
    GetOpenFileNameW: Fn(T.BOOL, [[T.LPOPENFILENAMEW, 'ofn']]),
    GetSaveFileNameA: Fn(T.BOOL, [[T.LPOPENFILENAMEA, 'ofn']]),
    GetSaveFileNameW: Fn(T.BOOL, [[T.LPOPENFILENAMEW, 'ofn']]),
    PageSetupDlgA: Fn(T.BOOL, [[T.LPPAGESETUPDLGA]]),
    PageSetupDlgW: Fn(T.BOOL, [[T.LPPAGESETUPDLGW]]),
    PrintDlgA: Fn(T.BOOL, [[T.LPPRINTDLGA, 'printdlg']]),
    PrintDlgW: Fn(T.BOOL, [[T.LPPRINTDLGW, 'printdlg']]),
    PrintDlgExA: Fn(T.HRESULT, [[T.LPPRINTDLGEXA]]),
    PrintDlgExW: Fn(T.HRESULT, [[T.LPPRINTDLGEXW]]),
    ReplaceTextA: Fn(T.HWND, [[T.LPFINDREPLACEA, 'lpFind']]),
    ReplaceTextW: Fn(T.HWND, [[T.LPFINDREPLACEW, 'lpFind']]),
    ChooseFontA: Fn(T.BOOL, [[T.LPCHOOSEFONTA]]),
    ChooseFontW: Fn(T.BOOL, [[T.LPCHOOSEFONTW]]),
    COMDLG32_SetCommDlgExtendedError: Fn(null, [[T.DWORD, 'err']]),
    ChangeServiceConfigA: Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPCSTR], [T.LPCSTR], [T.LPDWORD], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR]]),
    ChangeServiceConfigW: Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPCWSTR], [T.LPCWSTR], [T.LPDWORD], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR]]),
    ChangeServiceConfig2A: Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.LPVOID]]),
    ChangeServiceConfig2W: Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.LPVOID]]),
    CloseServiceHandle: Fn(T.BOOL, [[T.SC_HANDLE]]),
    ControlService: Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.LPSERVICE_STATUS]]),
    CreateServiceA: Fn(T.SC_HANDLE, [[T.SC_HANDLE], [T.LPCSTR], [T.LPCSTR], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPCSTR], [T.LPCSTR], [T.LPDWORD], [T.LPCSTR], [T.LPCSTR], [T.LPCSTR]]),
    CreateServiceW: Fn(T.SC_HANDLE, [[T.SC_HANDLE], [T.LPCWSTR], [T.LPCWSTR], [T.DWORD], [T.DWORD], [T.DWORD], [T.DWORD], [T.LPCWSTR], [T.LPCWSTR], [T.LPDWORD], [T.LPCWSTR], [T.LPCWSTR], [T.LPCWSTR]]),
    DeleteService: Fn(T.BOOL, [[T.SC_HANDLE]]),
    EnumDependentServicesA: Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.LPENUM_SERVICE_STATUSA], [T.DWORD], [T.LPDWORD], [T.LPDWORD]]),
    EnumDependentServicesW: Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.LPENUM_SERVICE_STATUSW], [T.DWORD], [T.LPDWORD], [T.LPDWORD]]),
    EnumServicesStatusA: Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.DWORD], [T.LPENUM_SERVICE_STATUSA], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD]]),
    EnumServicesStatusW: Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.DWORD], [T.LPENUM_SERVICE_STATUSW], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD]]),
    EnumServicesStatusExA: Fn(T.BOOL, [[T.SC_HANDLE], [T.SC_ENUM_TYPE], [T.DWORD], [T.DWORD], [T.LPBYTE], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPCSTR]]),
    EnumServicesStatusExW: Fn(T.BOOL, [[T.SC_HANDLE], [T.SC_ENUM_TYPE], [T.DWORD], [T.DWORD], [T.LPBYTE], [T.DWORD], [T.LPDWORD], [T.LPDWORD], [T.LPDWORD], [T.LPCWSTR]]),
    GetServiceDisplayNameA: Fn(T.BOOL, [[T.SC_HANDLE], [T.LPCSTR], [T.LPSTR], [T.LPDWORD]]),
    GetServiceDisplayNameW: Fn(T.BOOL, [[T.SC_HANDLE], [T.LPCWSTR], [T.LPWSTR], [T.LPDWORD]]),
    GetServiceKeyNameA: Fn(T.BOOL, [[T.SC_HANDLE], [T.LPCSTR], [T.LPSTR], [T.LPDWORD]]),
    GetServiceKeyNameW: Fn(T.BOOL, [[T.SC_HANDLE], [T.LPCWSTR], [T.LPWSTR], [T.LPDWORD]]),
    LockServiceDatabase: Fn(T.SC_LOCK, [[T.SC_HANDLE]]),
    NotifyBootConfigStatus: Fn(T.BOOL, [[T.BOOL]]),
    OpenSCManagerA: Fn(T.SC_HANDLE, [[T.LPCSTR], [T.LPCSTR], [T.DWORD]]),
    OpenSCManagerW: Fn(T.SC_HANDLE, [[T.LPCWSTR], [T.LPCWSTR], [T.DWORD]]),
    OpenServiceA: Fn(T.SC_HANDLE, [[T.SC_HANDLE], [T.LPCSTR], [T.DWORD]]),
    OpenServiceW: Fn(T.SC_HANDLE, [[T.SC_HANDLE], [T.LPCWSTR], [T.DWORD]]),
    QueryServiceStatus: Fn(T.BOOL, [[T.SC_HANDLE], [T.LPSERVICE_STATUS]]),
    QueryServiceStatusEx: Fn(T.BOOL, [[T.SC_HANDLE], [T.SC_STATUS_TYPE], [T.LPBYTE], [T.DWORD], [T.LPDWORD]]),
    QueryServiceConfigA: Fn(T.BOOL, [[T.SC_HANDLE], [T.LPQUERY_SERVICE_CONFIGA], [T.DWORD], [T.LPDWORD]]),
    QueryServiceConfigW: Fn(T.BOOL, [[T.SC_HANDLE], [T.LPQUERY_SERVICE_CONFIGW], [T.DWORD], [T.LPDWORD]]),
    QueryServiceConfig2A: Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.LPBYTE], [T.DWORD], [T.LPDWORD]]),
    QueryServiceConfig2W: Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [T.LPBYTE], [T.DWORD], [T.LPDWORD]]),
    QueryServiceLockStatusA: Fn(T.BOOL, [[T.SC_HANDLE], [T.LPQUERY_SERVICE_LOCK_STATUSA], [T.DWORD], [T.LPDWORD]]),
    QueryServiceLockStatusW: Fn(T.BOOL, [[T.SC_HANDLE], [T.LPQUERY_SERVICE_LOCK_STATUSW], [T.DWORD], [T.LPDWORD]]),
    QueryServiceObjectSecurity: Fn(T.BOOL, [[T.SC_HANDLE], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR], [T.DWORD], [T.LPDWORD]]),
    RegisterServiceCtrlHandlerA: Fn(T.SERVICE_STATUS_HANDLE, [[T.LPCSTR], [T.LPHANDLER_FUNCTION]]),
    RegisterServiceCtrlHandlerW: Fn(T.SERVICE_STATUS_HANDLE, [[T.LPCWSTR], [T.LPHANDLER_FUNCTION]]),
    RegisterServiceCtrlHandlerExA: Fn(T.SERVICE_STATUS_HANDLE, [[T.LPCSTR], [T.LPHANDLER_FUNCTION_EX], [T.LPVOID]]),
    RegisterServiceCtrlHandlerExW: Fn(T.SERVICE_STATUS_HANDLE, [[T.LPCWSTR], [T.LPHANDLER_FUNCTION_EX], [T.LPVOID]]),
    SetServiceObjectSecurity: Fn(T.BOOL, [[T.SC_HANDLE], [T.SECURITY_INFORMATION], [T.PSECURITY_DESCRIPTOR]]),
    SetServiceStatus: Fn(T.BOOL, [[T.SERVICE_STATUS_HANDLE], [T.LPSERVICE_STATUS]]),
    StartServiceA: Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [Pointer(T.LPCSTR)]]),
    StartServiceW: Fn(T.BOOL, [[T.SC_HANDLE], [T.DWORD], [Pointer(T.LPCWSTR)]]),
    StartServiceCtrlDispatcherA: Fn(T.BOOL, [[Pointer(T.SERVICE_TABLE_ENTRYA)]]),
    StartServiceCtrlDispatcherW: Fn(T.BOOL, [[Pointer(T.SERVICE_TABLE_ENTRYW)]]),
    UnlockServiceDatabase: Fn(T.BOOL, [[T.SC_LOCK]]),
    ImmAssociateContext: Fn(T.HIMC, [[T.HWND], [T.HIMC]]),
    ImmAssociateContextEx: Fn(T.BOOL, [[T.HWND], [T.HIMC], [T.DWORD]]),
    ImmConfigureIMEA: Fn(T.BOOL, [[T.HKL], [T.HWND], [T.DWORD], [T.LPVOID]]),
    ImmConfigureIMEW: Fn(T.BOOL, [[T.HKL], [T.HWND], [T.DWORD], [T.LPVOID]]),
    ImmCreateContext: Fn(T.HIMC, [[null]]),
    ImmDestroyContext: Fn(T.BOOL, [[T.HIMC, 'hIMC']]),
    ImmDisableIME: Fn(T.BOOL, [[T.DWORD, 'idThread']]),
    ImmEnumRegisterWordA: Fn(T.UINT, [[T.HKL], [T.REGISTERWORDENUMPROCA], [T.LPCSTR], [T.DWORD], [T.LPCSTR], [T.LPVOID]]),
    ImmEnumRegisterWordW: Fn(T.UINT, [[T.HKL], [T.REGISTERWORDENUMPROCW], [T.LPCWSTR], [T.DWORD], [T.LPCWSTR], [T.LPVOID]]),
    ImmEscapeA: Fn(T.LRESULT, [[T.HKL], [T.HIMC], [T.UINT], [T.LPVOID]]),
    ImmEscapeW: Fn(T.LRESULT, [[T.HKL], [T.HIMC], [T.UINT], [T.LPVOID]]),
    ImmGetCandidateListA: Fn(T.DWORD, [[T.HIMC], [T.DWORD], [T.LPCANDIDATELIST], [T.DWORD]]),
    ImmGetCandidateListW: Fn(T.DWORD, [[T.HIMC], [T.DWORD], [T.LPCANDIDATELIST], [T.DWORD]]),
    ImmGetCandidateListCountA: Fn(T.DWORD, [[T.HIMC], [T.LPDWORD]]),
    ImmGetCandidateListCountW: Fn(T.DWORD, [[T.HIMC], [T.LPDWORD]]),
    ImmGetCandidateWindow: Fn(T.BOOL, [[T.HIMC], [T.DWORD], [T.LPCANDIDATEFORM]]),
    ImmGetCompositionFontA: Fn(T.BOOL, [[T.HIMC], [T.LPLOGFONTA]]),
    ImmGetCompositionFontW: Fn(T.BOOL, [[T.HIMC], [T.LPLOGFONTW]]),
    ImmSetCompositionFontA: Fn(T.BOOL, [[T.HIMC], [T.LPLOGFONTA]]),
    ImmSetCompositionFontW: Fn(T.BOOL, [[T.HIMC], [T.LPLOGFONTW]]),
    ImmGetCompositionStringA: Fn(T.LONG, [[T.HIMC], [T.DWORD], [T.LPVOID], [T.DWORD]]),
    ImmGetCompositionStringW: Fn(T.LONG, [[T.HIMC], [T.DWORD], [T.LPVOID], [T.DWORD]]),
    ImmGetCompositionWindow: Fn(T.BOOL, [[T.HIMC], [T.LPCOMPOSITIONFORM]]),
    ImmGetContext: Fn(T.HIMC, [[T.HWND]]),
    ImmGetConversionListA: Fn(T.DWORD, [[T.HKL], [T.HIMC], [T.LPCSTR], [T.LPCANDIDATELIST], [T.DWORD], [T.UINT]]),
    ImmGetConversionListW: Fn(T.DWORD, [[T.HKL], [T.HIMC], [T.LPCWSTR], [T.LPCANDIDATELIST], [T.DWORD], [T.UINT]]),
    ImmGetConversionStatus: Fn(T.BOOL, [[T.HIMC], [T.LPDWORD], [T.LPDWORD]]),
    ImmGetDefaultIMEWnd: Fn(T.HWND, [[T.HWND]]),
    ImmGetDescriptionA: Fn(T.UINT, [[T.HKL], [T.LPSTR], [T.UINT]]),
    ImmGetDescriptionW: Fn(T.UINT, [[T.HKL], [T.LPWSTR], [T.UINT]]),
    ImmGetGuideLineA: Fn(T.DWORD, [[T.HIMC], [T.DWORD], [T.LPSTR], [T.DWORD]]),
    ImmGetGuideLineW: Fn(T.DWORD, [[T.HIMC], [T.DWORD], [T.LPWSTR], [T.DWORD]]),
    ImmGetIMEFileNameA: Fn(T.UINT, [[T.HKL], [T.LPSTR], [T.UINT]]),
    ImmGetIMEFileNameW: Fn(T.UINT, [[T.HKL], [T.LPWSTR], [T.UINT]]),
    ImmGetImeMenuItemsA: Fn(T.DWORD, [[T.HIMC], [T.DWORD], [T.DWORD], [T.LPIMEMENUITEMINFOA], [T.LPIMEMENUITEMINFOA], [T.DWORD]]),
    ImmGetImeMenuItemsW: Fn(T.DWORD, [[T.HIMC], [T.DWORD], [T.DWORD], [T.LPIMEMENUITEMINFOW], [T.LPIMEMENUITEMINFOW], [T.DWORD]]),
    ImmGetOpenStatus: Fn(T.BOOL, [[T.HIMC]]),
    ImmGetProperty: Fn(T.DWORD, [[T.HKL], [T.DWORD]]),
    ImmGetRegisterWordStyleA: Fn(T.UINT, [[T.HKL], [T.UINT], [T.LPSTYLEBUFA]]),
    ImmGetRegisterWordStyleW: Fn(T.UINT, [[T.HKL], [T.UINT], [T.LPSTYLEBUFW]]),
    ImmGetStatusWindowPos: Fn(T.BOOL, [[T.HIMC], [T.LPPOINT]]),
    ImmGetVirtualKey: Fn(T.UINT, [[T.HWND]]),
    ImmInstallIMEA: Fn(T.HKL, [[T.LPCSTR], [T.LPCSTR]]),
    ImmInstallIMEW: Fn(T.HKL, [[T.LPCWSTR], [T.LPCWSTR]]),
    ImmIsIME: Fn(T.BOOL, [[T.HKL]]),
    ImmIsUIMessageA: Fn(T.BOOL, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    ImmIsUIMessageW: Fn(T.BOOL, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    ImmNotifyIME: Fn(T.BOOL, [[T.HIMC], [T.DWORD], [T.DWORD], [T.DWORD]]),
    ImmProcessKey: Fn(T.BOOL, [[T.HWND], [T.HKL], [T.UINT], [T.LPARAM], [T.DWORD]]),
    ImmRegisterWordA: Fn(T.BOOL, [[T.HKL], [T.LPCSTR], [T.DWORD], [T.LPCSTR]]),
    ImmRegisterWordW: Fn(T.BOOL, [[T.HKL], [T.LPCWSTR], [T.DWORD], [T.LPCWSTR]]),
    ImmReleaseContext: Fn(T.BOOL, [[T.HWND], [T.HIMC]]),
    ImmSetCandidateWindow: Fn(T.BOOL, [[T.HIMC], [T.LPCANDIDATEFORM]]),
    ImmSetCompositionStringA: Fn(T.BOOL, [[T.HIMC], [T.DWORD], [T.LPCVOID], [T.DWORD], [T.LPCVOID], [T.DWORD]]),
    ImmSetCompositionStringW: Fn(T.BOOL, [[T.HIMC], [T.DWORD], [T.LPCVOID], [T.DWORD], [T.LPCVOID], [T.DWORD]]),
    ImmSetCompositionWindow: Fn(T.BOOL, [[T.HIMC], [T.LPCOMPOSITIONFORM]]),
    ImmSetConversionStatus: Fn(T.BOOL, [[T.HIMC], [T.DWORD], [T.DWORD]]),
    ImmSetOpenStatus: Fn(T.BOOL, [[T.HIMC], [T.BOOL]]),
    ImmSetStatusWindowPos: Fn(T.BOOL, [[T.HIMC], [T.LPPOINT]]),
    ImmSimulateHotKey: Fn(T.BOOL, [[T.HWND], [T.DWORD]]),
    ImmUnregisterWordA: Fn(T.BOOL, [[T.HKL], [T.LPCSTR], [T.DWORD], [T.LPCSTR]]),
    ImmUnregisterWordW: Fn(T.BOOL, [[T.HKL], [T.LPCWSTR], [T.DWORD], [T.LPCWSTR]]),
    _commode: T.i32,
    _imp____badioinfo: Pointer(Pointer(Pointer(T.ioinfo))),
    _imp____pioinfo: Pointer(Pointer(Pointer(T.ioinfo))),
    _dowildcard: T.i32,
    _newmode: T.i32,
    _imp____winitenv: Pointer(Pointer(Pointer(T.wchar_t))),
    _imp____initenv: Pointer(Pointer(Pointer(T.char))),
    _imp___acmdln: Pointer(Pointer(T.char)),
    _imp___wcmdln: Pointer(Pointer(T.char)),
    _amsg_exit: Fn(null, [[T.i32]]),
    _setargv: Fn(T.i32, [[null]]),
    __setargv: Fn(T.i32, [[null]]),
    _wsetargv: Fn(T.i32, [[null]]),
    __wsetargv: Fn(T.i32, [[null]]),
    main: Fn(T.i32, [[T.i32, '_Argc'], [Pointer(Pointer(T.char)), '_Argv'], [Pointer(Pointer(T.char)), '_Env']]),
    wmain: Fn(T.i32, [[T.i32, '_Argc'], [Pointer(Pointer(T.wchar_t)), '_Argv'], [Pointer(Pointer(T.wchar_t)), '_Env']]),
    __getmainargs: Fn(T.i32, [[Pointer(T.i32), '_Argc'], [Pointer(Pointer(Pointer(T.char))), '_Argv'], [Pointer(Pointer(Pointer(T.char))), '_Env'], [T.i32, '_DoWildCard'], [Pointer(T._startupinfo), '_StartInfo']]),
    __wgetmainargs: Fn(T.i32, [[Pointer(T.i32), '_Argc'], [Pointer(Pointer(Pointer(T.wchar_t))), '_Argv'], [Pointer(Pointer(Pointer(T.wchar_t))), '_Env'], [T.i32, '_DoWildCard'], [Pointer(T._startupinfo), '_StartInfo']]),
    __native_startup_state: T.__enative_startup_state,
    __native_startup_lock: Pointer(null),
    __native_dllmain_reason: T.u32,
    __native_vcclrit_reason: T.u32,
    __set_app_type: Fn(null, [[T.i32]]),
    _encode_pointer: Fn(Pointer(null), [[Pointer(null)]]),
    _encoded_null: Fn(Pointer(null), []),
    _decode_pointer: Fn(Pointer(null), [[Pointer(null)]]),
    _ValidateImageBase: Fn(T.BOOL, [[T.PBYTE, 'pImageBase']]),
    _FindPESection: Fn(T.PIMAGE_SECTION_HEADER, [[T.PBYTE, 'pImageBase'], [T.DWORD_PTR, 'rva']]),
    _IsNonwritableInCurrentImage: Fn(T.BOOL, [[T.PBYTE, 'pTarget']]),
    _cgets: Fn(Pointer(T.char), [[Pointer(T.char), '_Buffer']]),
    _cprintf: Fn(T.i32, [[Pointer(T.char), '_Format'], '...']),
    _cputs: Fn(T.i32, [[Pointer(T.char), '_Str']]),
    _cscanf: Fn(T.i32, [[Pointer(T.char), '_Format'], '...']),
    _cscanf_l: Fn(T.i32, [[Pointer(T.char), '_Format'], [T._locale_t, '_Locale'], '...']),
    _getch: Fn(T.i32, [[null]]),
    _getche: Fn(T.i32, [[null]]),
    _vcprintf: Fn(T.i32, [[Pointer(T.char), '_Format'], [T.va_list, '_ArgList']]),
    _cprintf_p: Fn(T.i32, [[Pointer(T.char), '_Format'], '...']),
    _vcprintf_p: Fn(T.i32, [[Pointer(T.char), '_Format'], [T.va_list, '_ArgList']]),
    _cprintf_l: Fn(T.i32, [[Pointer(T.char), '_Format'], [T._locale_t, '_Locale'], '...']),
    _vcprintf_l: Fn(T.i32, [[Pointer(T.char), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']]),
    _cprintf_p_l: Fn(T.i32, [[Pointer(T.char), '_Format'], [T._locale_t, '_Locale'], '...']),
    _vcprintf_p_l: Fn(T.i32, [[Pointer(T.char), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']]),
    _kbhit: Fn(T.i32, [[null]]),
    _inp: Fn(T.i32, [[T.u16]]),
    _inpw: Fn(T.u16, [[T.u16]]),
    _inpd: Fn(T.u32, [[T.u16]]),
    _outp: Fn(T.i32, [[T.u16], [T.i32]]),
    _outpw: Fn(T.u16, [[T.u16], [T.u16]]),
    _outpd: Fn(T.u32, [[T.u16], [T.u32]]),
    _putch: Fn(T.i32, [[T.i32, '_Ch']]),
    _ungetch: Fn(T.i32, [[T.i32, '_Ch']]),
    _getch_nolock: Fn(T.i32, [[null]]),
    _getche_nolock: Fn(T.i32, [[null]]),
    _putch_nolock: Fn(T.i32, [[T.i32, '_Ch']]),
    _ungetch_nolock: Fn(T.i32, [[T.i32, '_Ch']]),
    _cgetws: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Buffer']]),
    _getwch: Fn(T.wint_t, [[null]]),
    _getwche: Fn(T.wint_t, [[null]]),
    _putwch: Fn(T.wint_t, [[T.wchar_t, '_WCh']]),
    _ungetwch: Fn(T.wint_t, [[T.wint_t, '_WCh']]),
    _cputws: Fn(T.i32, [[Pointer(T.wchar_t), '_String']]),
    _cwprintf: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...']),
    _cwscanf: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...']),
    _cwscanf_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...']),
    _vcwprintf: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']]),
    _cwprintf_p: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...']),
    _vcwprintf_p: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']]),
    _cwprintf_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...']),
    _vcwprintf_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']]),
    _cwprintf_p_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...']),
    _vcwprintf_p_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']]),
    _putwch_nolock: Fn(T.wint_t, [[T.wchar_t, '_WCh']]),
    _getwch_nolock: Fn(T.wint_t, [[null]]),
    _getwche_nolock: Fn(T.wint_t, [[null]]),
    _ungetwch_nolock: Fn(T.wint_t, [[T.wint_t, '_WCh']]),
    cgets: Fn(Pointer(T.char), [[Pointer(T.char), '_Buffer']]),
    cprintf: Fn(T.i32, [[Pointer(T.char), '_Format'], '...']),
    cputs: Fn(T.i32, [[Pointer(T.char), '_Str']]),
    cscanf: Fn(T.i32, [[Pointer(T.char), '_Format'], '...']),
    getch: Fn(T.i32, [[null]]),
    getche: Fn(T.i32, [[null]]),
    kbhit: Fn(T.i32, [[null]]),
    putch: Fn(T.i32, [[T.i32, '_Ch']]),
    ungetch: Fn(T.i32, [[T.i32, '_Ch']]),
    inp: Fn(T.i32, [[T.u16]]),
    inpw: Fn(T.u16, [[T.u16]]),
    outp: Fn(T.i32, [[T.u16], [T.i32]]),
    outpw: Fn(T.u16, [[T.u16], [T.u16]]),
    _controlfp: Fn(T.u32, [[T.u32, 'unNew'], [T.u32, 'unMask']]),
    _controlfp_s: Fn(T.errno_t, [[Pointer(T.u32), '_CurrentState'], [T.u32, '_NewValue'], [T.u32, '_Mask']]),
    _control87: Fn(T.u32, [[T.u32, 'unNew'], [T.u32, 'unMask']]),
    _clearfp: Fn(T.u32, [[null]]),
    _statusfp: Fn(T.u32, [[null]]),
    _fpreset: Fn(null, [[null]]),
    fpreset: Fn(null, [[null]]),
    __fpecode: Fn(Pointer(T.i32), [[null]]),
    _chgsign: Fn(T.f64, [[T.f64, '_X']]),
    _copysign: Fn(T.f64, [[T.f64, '_Number'], [T.f64, '_Sign']]),
    _logb: Fn(T.f64, [[T.f64]]),
    _nextafter: Fn(T.f64, [[T.f64], [T.f64]]),
    _scalb: Fn(T.f64, [[T.f64], [T.i32]]),
    _finite: Fn(T.i32, [[T.f64]]),
    _fpclass: Fn(T.i32, [[T.f64]]),
    _isnan: Fn(T.i32, [[T.f64]]),
    _chgsignl: Fn(T.f128, [[T.f128]]),
    _imp___HUGE: Pointer(T.f64),
    __mingw_raise_matherr: Fn(null, [[T.i32, 'typ'], [Pointer(T.char), 'name'], [T.f64, 'a1'], [T.f64, 'a2'], [T.f64, 'rslt']]),
    __mingw_setusermatherr: Fn(null, [[Pointer(Fn(T.i32, [[Pointer(Struct('_exception', null))]]))]]),
    __setusermatherr: Fn(null, [[Pointer(Fn(T.i32, [[Pointer(Struct('_exception', null))]]))]]),
    sin: Fn(T.f64, [[T.f64, '_X']]),
    cos: Fn(T.f64, [[T.f64, '_X']]),
    tan: Fn(T.f64, [[T.f64, '_X']]),
    sinh: Fn(T.f64, [[T.f64, '_X']]),
    cosh: Fn(T.f64, [[T.f64, '_X']]),
    tanh: Fn(T.f64, [[T.f64, '_X']]),
    asin: Fn(T.f64, [[T.f64, '_X']]),
    acos: Fn(T.f64, [[T.f64, '_X']]),
    atan: Fn(T.f64, [[T.f64, '_X']]),
    atan2: Fn(T.f64, [[T.f64, '_Y'], [T.f64, '_X']]),
    exp: Fn(T.f64, [[T.f64, '_X']]),
    log: Fn(T.f64, [[T.f64, '_X']]),
    log10: Fn(T.f64, [[T.f64, '_X']]),
    pow: Fn(T.f64, [[T.f64, '_X'], [T.f64, '_Y']]),
    sqrt: Fn(T.f64, [[T.f64, '_X']]),
    ceil: Fn(T.f64, [[T.f64, '_X']]),
    floor: Fn(T.f64, [[T.f64, '_X']]),
    fabs: Fn(T.f64, [[T.f64, '_X']]),
    ldexp: Fn(T.f64, [[T.f64, '_X'], [T.i32, '_Y']]),
    frexp: Fn(T.f64, [[T.f64, '_X'], [Pointer(T.i32), '_Y']]),
    modf: Fn(T.f64, [[T.f64, '_X'], [Pointer(T.f64), '_Y']]),
    fmod: Fn(T.f64, [[T.f64, '_X'], [T.f64, '_Y']]),
    sincos: Fn(null, [[T.f64, '__x'], [Pointer(T.f64), 'p_sin'], [Pointer(T.f64), 'p_cos']]),
    sincosl: Fn(null, [[T.f128, '__x'], [Pointer(T.f128), 'p_sin'], [Pointer(T.f128), 'p_cos']]),
    sincosf: Fn(null, [[T.f32, '__x'], [Pointer(T.f32), 'p_sin'], [Pointer(T.f32), 'p_cos']]),
    _cabs: Fn(T.f64, [[Struct('_complex', null), '_ComplexA']]),
    _hypot: Fn(T.f64, [[T.f64, '_X'], [T.f64, '_Y']]),
    _j0: Fn(T.f64, [[T.f64, '_X']]),
    _j1: Fn(T.f64, [[T.f64, '_X']]),
    _jn: Fn(T.f64, [[T.i32, '_X'], [T.f64, '_Y']]),
    _y0: Fn(T.f64, [[T.f64, '_X']]),
    _y1: Fn(T.f64, [[T.f64, '_X']]),
    _yn: Fn(T.f64, [[T.i32, '_X'], [T.f64, '_Y']]),
    _matherr: Fn(T.i32, [[Pointer(Struct('_exception', null))]]),
    j0: Fn(T.f64, [[T.f64]]),
    j1: Fn(T.f64, [[T.f64]]),
    jn: Fn(T.f64, [[T.i32], [T.f64]]),
    y0: Fn(T.f64, [[T.f64]]),
    y1: Fn(T.f64, [[T.f64]]),
    yn: Fn(T.f64, [[T.i32], [T.f64]]),
    chgsign: Fn(T.f64, [[T.f64]]),
    finite: Fn(T.i32, [[T.f64]]),
    fpclass: Fn(T.i32, [[T.f64]]),
    _set_SSE2_enable: Fn(T.i32, [[T.i32, '_Flag']]),
    __fpclassifyl: Fn(T.i32, [[T.f128]]),
    __fpclassifyf: Fn(T.i32, [[T.f32]]),
    __fpclassify: Fn(T.i32, [[T.f64]]),
    __isnan: Fn(T.i32, [[T.f64]]),
    __isnanf: Fn(T.i32, [[T.f32]]),
    __isnanl: Fn(T.i32, [[T.f128]]),
    __signbit: Fn(T.i32, [[T.f64]]),
    __signbitf: Fn(T.i32, [[T.f32]]),
    __signbitl: Fn(T.i32, [[T.f128]]),
    sinf: Fn(T.f32, [[T.f32, '_X']]),
    sinl: Fn(T.f128, [[T.f128]]),
    cosf: Fn(T.f32, [[T.f32, '_X']]),
    cosl: Fn(T.f128, [[T.f128]]),
    tanf: Fn(T.f32, [[T.f32, '_X']]),
    tanl: Fn(T.f128, [[T.f128]]),
    asinf: Fn(T.f32, [[T.f32, '_X']]),
    asinl: Fn(T.f128, [[T.f128]]),
    acosf: Fn(T.f32, [[T.f32]]),
    acosl: Fn(T.f128, [[T.f128]]),
    atanf: Fn(T.f32, [[T.f32]]),
    atanl: Fn(T.f128, [[T.f128]]),
    atan2f: Fn(T.f32, [[T.f32], [T.f32]]),
    atan2l: Fn(T.f128, [[T.f128], [T.f128]]),
    sinhf: Fn(T.f32, [[T.f32, '_X']]),
    sinhl: Fn(T.f128, [[T.f128]]),
    coshf: Fn(T.f32, [[T.f32, '_X']]),
    coshl: Fn(T.f128, [[T.f128]]),
    tanhf: Fn(T.f32, [[T.f32, '_X']]),
    tanhl: Fn(T.f128, [[T.f128]]),
    acosh: Fn(T.f64, [[T.f64]]),
    acoshf: Fn(T.f32, [[T.f32]]),
    acoshl: Fn(T.f128, [[T.f128]]),
    asinh: Fn(T.f64, [[T.f64]]),
    asinhf: Fn(T.f32, [[T.f32]]),
    asinhl: Fn(T.f128, [[T.f128]]),
    atanh: Fn(T.f64, [[T.f64]]),
    atanhf: Fn(T.f32, [[T.f32]]),
    atanhl: Fn(T.f128, [[T.f128]]),
    expf: Fn(T.f32, [[T.f32, '_X']]),
    expl: Fn(T.f128, [[T.f128]]),
    exp2: Fn(T.f64, [[T.f64]]),
    exp2f: Fn(T.f32, [[T.f32]]),
    exp2l: Fn(T.f128, [[T.f128]]),
    expm1: Fn(T.f64, [[T.f64]]),
    expm1f: Fn(T.f32, [[T.f32]]),
    expm1l: Fn(T.f128, [[T.f128]]),
    frexpf: Fn(T.f32, [[T.f32, '_X'], [Pointer(T.i32), '_Y']]),
    frexpl: Fn(T.f128, [[T.f128], [Pointer(T.i32)]]),
    ilogb: Fn(T.i32, [[T.f64]]),
    ilogbf: Fn(T.i32, [[T.f32]]),
    ilogbl: Fn(T.i32, [[T.f128]]),
    ldexpf: Fn(T.f32, [[T.f32, '_X'], [T.i32, '_Y']]),
    ldexpl: Fn(T.f128, [[T.f128], [T.i32]]),
    logf: Fn(T.f32, [[T.f32]]),
    logl: Fn(T.f128, [[T.f128]]),
    log10f: Fn(T.f32, [[T.f32]]),
    log10l: Fn(T.f128, [[T.f128]]),
    log1p: Fn(T.f64, [[T.f64]]),
    log1pf: Fn(T.f32, [[T.f32]]),
    log1pl: Fn(T.f128, [[T.f128]]),
    log2: Fn(T.f64, [[T.f64]]),
    log2f: Fn(T.f32, [[T.f32]]),
    log2l: Fn(T.f128, [[T.f128]]),
    logb: Fn(T.f64, [[T.f64]]),
    logbf: Fn(T.f32, [[T.f32]]),
    logbl: Fn(T.f128, [[T.f128]]),
    modff: Fn(T.f32, [[T.f32], [Pointer(T.f32)]]),
    modfl: Fn(T.f128, [[T.f128], [Pointer(T.f128)]]),
    scalbn: Fn(T.f64, [[T.f64], [T.i32]]),
    scalbnf: Fn(T.f32, [[T.f32], [T.i32]]),
    scalbnl: Fn(T.f128, [[T.f128], [T.i32]]),
    scalbln: Fn(T.f64, [[T.f64], [T.i32]]),
    scalblnf: Fn(T.f32, [[T.f32], [T.i32]]),
    scalblnl: Fn(T.f128, [[T.f128], [T.i32]]),
    cbrt: Fn(T.f64, [[T.f64]]),
    cbrtf: Fn(T.f32, [[T.f32]]),
    cbrtl: Fn(T.f128, [[T.f128]]),
    fabsf: Fn(T.f32, [[T.f32, 'x']]),
    fabsl: Fn(T.f128, [[T.f128]]),
    hypot: Fn(T.f64, [[T.f64], [T.f64]]),
    hypotf: Fn(T.f32, [[T.f32, 'x'], [T.f32, 'y']]),
    hypotl: Fn(T.f128, [[T.f128], [T.f128]]),
    powf: Fn(T.f32, [[T.f32, '_X'], [T.f32, '_Y']]),
    powl: Fn(T.f128, [[T.f128], [T.f128]]),
    sqrtf: Fn(T.f32, [[T.f32]]),
    sqrtl: Fn(T.f128, [[T.f128]]),
    erf: Fn(T.f64, [[T.f64]]),
    erff: Fn(T.f32, [[T.f32]]),
    erfl: Fn(T.f128, [[T.f128]]),
    erfc: Fn(T.f64, [[T.f64]]),
    erfcf: Fn(T.f32, [[T.f32]]),
    erfcl: Fn(T.f128, [[T.f128]]),
    lgamma: Fn(T.f64, [[T.f64]]),
    lgammaf: Fn(T.f32, [[T.f32]]),
    lgammal: Fn(T.f128, [[T.f128]]),
    tgamma: Fn(T.f64, [[T.f64]]),
    tgammaf: Fn(T.f32, [[T.f32]]),
    tgammal: Fn(T.f128, [[T.f128]]),
    ceilf: Fn(T.f32, [[T.f32]]),
    ceill: Fn(T.f128, [[T.f128]]),
    floorf: Fn(T.f32, [[T.f32]]),
    floorl: Fn(T.f128, [[T.f128]]),
    nearbyint: Fn(T.f64, [[T.f64]]),
    nearbyintf: Fn(T.f32, [[T.f32]]),
    nearbyintl: Fn(T.f128, [[T.f128]]),
    rint: Fn(T.f64, [[T.f64]]),
    rintf: Fn(T.f32, [[T.f32]]),
    rintl: Fn(T.f128, [[T.f128]]),
    lrint: Fn(T.i32, [[T.f64]]),
    lrintf: Fn(T.i32, [[T.f32]]),
    lrintl: Fn(T.i32, [[T.f128]]),
    llrint: Fn(T.i64, [[T.f64]]),
    llrintf: Fn(T.i64, [[T.f32]]),
    llrintl: Fn(T.i64, [[T.f128]]),
    round: Fn(T.f64, [[T.f64]]),
    roundf: Fn(T.f32, [[T.f32]]),
    roundl: Fn(T.f128, [[T.f128]]),
    lround: Fn(T.i32, [[T.f64]]),
    lroundf: Fn(T.i32, [[T.f32]]),
    lroundl: Fn(T.i32, [[T.f128]]),
    llround: Fn(T.i64, [[T.f64]]),
    llroundf: Fn(T.i64, [[T.f32]]),
    llroundl: Fn(T.i64, [[T.f128]]),
    trunc: Fn(T.f64, [[T.f64]]),
    truncf: Fn(T.f32, [[T.f32]]),
    truncl: Fn(T.f128, [[T.f128]]),
    fmodf: Fn(T.f32, [[T.f32], [T.f32]]),
    fmodl: Fn(T.f128, [[T.f128], [T.f128]]),
    remainder: Fn(T.f64, [[T.f64], [T.f64]]),
    remainderf: Fn(T.f32, [[T.f32], [T.f32]]),
    remainderl: Fn(T.f128, [[T.f128], [T.f128]]),
    remquo: Fn(T.f64, [[T.f64], [T.f64], [Pointer(T.i32)]]),
    remquof: Fn(T.f32, [[T.f32], [T.f32], [Pointer(T.i32)]]),
    remquol: Fn(T.f128, [[T.f128], [T.f128], [Pointer(T.i32)]]),
    copysign: Fn(T.f64, [[T.f64], [T.f64]]),
    copysignf: Fn(T.f32, [[T.f32], [T.f32]]),
    copysignl: Fn(T.f128, [[T.f128], [T.f128]]),
    nan: Fn(T.f64, [[Pointer(T.char), 'tagp']]),
    nanf: Fn(T.f32, [[Pointer(T.char), 'tagp']]),
    nanl: Fn(T.f128, [[Pointer(T.char), 'tagp']]),
    nextafter: Fn(T.f64, [[T.f64], [T.f64]]),
    nextafterf: Fn(T.f32, [[T.f32], [T.f32]]),
    nextafterl: Fn(T.f128, [[T.f128], [T.f128]]),
    nexttoward: Fn(T.f64, [[T.f64], [T.f128]]),
    nexttowardf: Fn(T.f32, [[T.f32], [T.f128]]),
    nexttowardl: Fn(T.f128, [[T.f128], [T.f128]]),
    fdim: Fn(T.f64, [[T.f64, 'x'], [T.f64, 'y']]),
    fdimf: Fn(T.f32, [[T.f32, 'x'], [T.f32, 'y']]),
    fdiml: Fn(T.f128, [[T.f128, 'x'], [T.f128, 'y']]),
    fmax: Fn(T.f64, [[T.f64], [T.f64]]),
    fmaxf: Fn(T.f32, [[T.f32], [T.f32]]),
    fmaxl: Fn(T.f128, [[T.f128], [T.f128]]),
    fmin: Fn(T.f64, [[T.f64], [T.f64]]),
    fminf: Fn(T.f32, [[T.f32], [T.f32]]),
    fminl: Fn(T.f128, [[T.f128], [T.f128]]),
    fma: Fn(T.f64, [[T.f64], [T.f64], [T.f64]]),
    fmaf: Fn(T.f32, [[T.f32], [T.f32], [T.f32]]),
    fmal: Fn(T.f128, [[T.f128], [T.f128], [T.f128]]),
    _hypotf: Fn(T.f32, [[T.f32, '_X'], [T.f32, '_Y']]),
    _copysignf: Fn(T.f32, [[T.f32, '_Number'], [T.f32, '_Sign']]),
    _chgsignf: Fn(T.f32, [[T.f32, '_X']]),
    _logbf: Fn(T.f32, [[T.f32, '_X']]),
    _nextafterf: Fn(T.f32, [[T.f32, '_X'], [T.f32, '_Y']]),
    _finitef: Fn(T.i32, [[T.f32, '_X']]),
    _isnanf: Fn(T.i32, [[T.f32, '_X']]),
    _fpclassf: Fn(T.i32, [[T.f32, '_X']]),
    _imp___iob: Pointer(Pointer(T.FILE)),
    __mingw_sscanf: Fn(T.i32, [[Pointer(T.char), '_Src'], [Pointer(T.char), '_Format'], '...']),
    __mingw_vsscanf: Fn(T.i32, [[Pointer(T.char), '_Str'], [Pointer(T.char), 'Format'], [T.va_list, 'argp']]),
    __mingw_scanf: Fn(T.i32, [[Pointer(T.char), '_Format'], '...']),
    __mingw_vscanf: Fn(T.i32, [[Pointer(T.char), 'Format'], [T.va_list, 'argp']]),
    __mingw_fscanf: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.char), '_Format'], '...']),
    __mingw_vfscanf: Fn(T.i32, [[Pointer(T.FILE), 'fp'], [Pointer(T.char), 'Format'], [T.va_list, 'argp']]),
    __mingw_vsnprintf: Fn(T.i32, [[Pointer(T.char), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.char), '_Format'], [T.va_list, '_ArgList']]),
    __mingw_snprintf: Fn(T.i32, [[Pointer(T.char), 's'], [T.size_t, 'n'], [Pointer(T.char), 'format'], '...']),
    __mingw_printf: Fn(T.i32, [[Pointer(T.char)], '...']),
    __mingw_vprintf: Fn(T.i32, [[Pointer(T.char)], [T.va_list]]),
    __mingw_fprintf: Fn(T.i32, [[Pointer(T.FILE)], [Pointer(T.char)], '...']),
    __mingw_vfprintf: Fn(T.i32, [[Pointer(T.FILE)], [Pointer(T.char)], [T.va_list]]),
    __mingw_sprintf: Fn(T.i32, [[Pointer(T.char)], [Pointer(T.char)], '...']),
    __mingw_vsprintf: Fn(T.i32, [[Pointer(T.char)], [Pointer(T.char)], [T.va_list]]),
    __mingw_asprintf: Fn(T.i32, [[Pointer(Pointer(T.char))], [Pointer(T.char)], '...']),
    __mingw_vasprintf: Fn(T.i32, [[Pointer(Pointer(T.char))], [Pointer(T.char)], [T.va_list]]),
    fprintf: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.char), '_Format'], '...']),
    printf: Fn(T.i32, [[Pointer(T.char), '_Format'], '...']),
    sprintf: Fn(T.i32, [[Pointer(T.char), '_Dest'], [Pointer(T.char), '_Format'], '...']),
    vfprintf: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.char), '_Format'], [T.va_list, '_ArgList']]),
    vprintf: Fn(T.i32, [[Pointer(T.char), '_Format'], [T.va_list, '_ArgList']]),
    vsprintf: Fn(T.i32, [[Pointer(T.char), '_Dest'], [Pointer(T.char), '_Format'], [T.va_list, '_Args']]),
    fscanf: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.char), '_Format'], '...']),
    scanf: Fn(T.i32, [[Pointer(T.char), '_Format'], '...']),
    sscanf: Fn(T.i32, [[Pointer(T.char), '_Src'], [Pointer(T.char), '_Format'], '...']),
    vscanf: Fn(T.i32, [[Pointer(T.char), 'Format'], [T.va_list, 'argp']]),
    vfscanf: Fn(T.i32, [[Pointer(T.FILE), 'fp'], [Pointer(T.char), 'Format'], [T.va_list, 'argp']]),
    vsscanf: Fn(T.i32, [[Pointer(T.char), '_Str'], [Pointer(T.char), 'Format'], [T.va_list, 'argp']]),
    _filbuf: Fn(T.i32, [[Pointer(T.FILE), '_File']]),
    _flsbuf: Fn(T.i32, [[T.i32, '_Ch'], [Pointer(T.FILE), '_File']]),
    _fsopen: Fn(Pointer(T.FILE), [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_Mode'], [T.i32, '_ShFlag']]),
    clearerr: Fn(null, [[Pointer(T.FILE), '_File']]),
    fclose: Fn(T.i32, [[Pointer(T.FILE), '_File']]),
    _fcloseall: Fn(T.i32, [[null]]),
    _fdopen: Fn(Pointer(T.FILE), [[T.i32, '_FileHandle'], [Pointer(T.char), '_Mode']]),
    feof: Fn(T.i32, [[Pointer(T.FILE), '_File']]),
    ferror: Fn(T.i32, [[Pointer(T.FILE), '_File']]),
    fflush: Fn(T.i32, [[Pointer(T.FILE), '_File']]),
    fgetc: Fn(T.i32, [[Pointer(T.FILE), '_File']]),
    _fgetchar: Fn(T.i32, [[null]]),
    fgetpos: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.fpos_t), '_Pos']]),
    fgetpos64: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.fpos_t), '_Pos']]),
    fgets: Fn(Pointer(T.char), [[Pointer(T.char), '_Buf'], [T.i32, '_MaxCount'], [Pointer(T.FILE), '_File']]),
    _fileno: Fn(T.i32, [[Pointer(T.FILE), '_File']]),
    _tempnam: Fn(Pointer(T.char), [[Pointer(T.char), '_DirName'], [Pointer(T.char), '_FilePrefix']]),
    _flushall: Fn(T.i32, [[null]]),
    fopen: Fn(Pointer(T.FILE), [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_Mode']]),
    fopen64: Fn(Pointer(T.FILE), [[Pointer(T.char), 'filename'], [Pointer(T.char), 'mode']]),
    fputc: Fn(T.i32, [[T.i32, '_Ch'], [Pointer(T.FILE), '_File']]),
    _fputchar: Fn(T.i32, [[T.i32, '_Ch']]),
    fputs: Fn(T.i32, [[Pointer(T.char), '_Str'], [Pointer(T.FILE), '_File']]),
    fread: Fn(T.size_t, [[Pointer(null), '_DstBuf'], [T.size_t, '_ElementSize'], [T.size_t, '_Count'], [Pointer(T.FILE), '_File']]),
    freopen: Fn(Pointer(T.FILE), [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_Mode'], [Pointer(T.FILE), '_File']]),
    _fscanf_l: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.char), '_Format'], [T._locale_t, 'locale'], '...']),
    fsetpos: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.fpos_t), '_Pos']]),
    fsetpos64: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.fpos_t), '_Pos']]),
    fseek: Fn(T.i32, [[Pointer(T.FILE), '_File'], [T.i32, '_Offset'], [T.i32, '_Origin']]),
    fseeko64: Fn(T.i32, [[Pointer(T.FILE), 'stream'], [T._off64_t, 'offset'], [T.i32, 'whence']]),
    fseeko: Fn(T.i32, [[Pointer(T.FILE), 'stream'], [T._off_t, 'offset'], [T.i32, 'whence']]),
    ftell: Fn(T.i32, [[Pointer(T.FILE), '_File']]),
    ftello: Fn(T._off_t, [[Pointer(T.FILE), 'stream']]),
    ftello64: Fn(T._off64_t, [[Pointer(T.FILE), 'stream']]),
    _fseeki64: Fn(T.i32, [[Pointer(T.FILE), '_File'], [T.i64, '_Offset'], [T.i32, '_Origin']]),
    _ftelli64: Fn(T.i64, [[Pointer(T.FILE), '_File']]),
    fwrite: Fn(T.size_t, [[Pointer(null), '_Str'], [T.size_t, '_Size'], [T.size_t, '_Count'], [Pointer(T.FILE), '_File']]),
    getc: Fn(T.i32, [[Pointer(T.FILE), '_File']]),
    getchar: Fn(T.i32, [[null]]),
    _getmaxstdio: Fn(T.i32, [[null]]),
    gets: Fn(Pointer(T.char), [[Pointer(T.char), '_Buffer']]),
    _getw: Fn(T.i32, [[Pointer(T.FILE), '_File']]),
    _pclose: Fn(T.i32, [[Pointer(T.FILE), '_File']]),
    _popen: Fn(Pointer(T.FILE), [[Pointer(T.char), '_Command'], [Pointer(T.char), '_Mode']]),
    putc: Fn(T.i32, [[T.i32, '_Ch'], [Pointer(T.FILE), '_File']]),
    putchar: Fn(T.i32, [[T.i32, '_Ch']]),
    puts: Fn(T.i32, [[Pointer(T.char), '_Str']]),
    _putw: Fn(T.i32, [[T.i32, '_Word'], [Pointer(T.FILE), '_File']]),
    remove: Fn(T.i32, [[Pointer(T.char), '_Filename']]),
    rename: Fn(T.i32, [[Pointer(T.char), '_OldFilename'], [Pointer(T.char), '_NewFilename']]),
    _unlink: Fn(T.i32, [[Pointer(T.char), '_Filename']]),
    unlink: Fn(T.i32, [[Pointer(T.char), '_Filename']]),
    rewind: Fn(null, [[Pointer(T.FILE), '_File']]),
    _rmtmp: Fn(T.i32, [[null]]),
    _scanf_l: Fn(T.i32, [[Pointer(T.char), 'format'], [T._locale_t, 'locale'], '...']),
    setbuf: Fn(null, [[Pointer(T.FILE), '_File'], [Pointer(T.char), '_Buffer']]),
    _setmaxstdio: Fn(T.i32, [[T.i32, '_Max']]),
    _set_output_format: Fn(T.u32, [[T.u32, '_Format']]),
    _get_output_format: Fn(T.u32, [[null]]),
    __mingw_set_output_format: Fn(T.u32, [[T.u32, '_Format']]),
    __mingw_get_output_format: Fn(T.u32, [[null]]),
    setvbuf: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.char), '_Buf'], [T.i32, '_Mode'], [T.size_t, '_Size']]),
    _scprintf: Fn(T.i32, [[Pointer(T.char), '_Format'], '...']),
    _sscanf_l: Fn(T.i32, [[Pointer(T.char), 'buffer'], [Pointer(T.char), 'format'], [T._locale_t, 'locale'], '...']),
    _snscanf: Fn(T.i32, [[Pointer(T.char), '_Src'], [T.size_t, '_MaxCount'], [Pointer(T.char), '_Format'], '...']),
    _snscanf_l: Fn(T.i32, [[Pointer(T.char), 'input'], [T.size_t, 'length'], [Pointer(T.char), 'format'], [T._locale_t, 'locale'], '...']),
    tmpfile: Fn(Pointer(T.FILE), [[null]]),
    tmpnam: Fn(Pointer(T.char), [[Pointer(T.char), '_Buffer']]),
    ungetc: Fn(T.i32, [[T.i32, '_Ch'], [Pointer(T.FILE), '_File']]),
    _snprintf: Fn(T.i32, [[Pointer(T.char), '_Dest'], [T.size_t, '_Count'], [Pointer(T.char), '_Format'], '...']),
    _snprintf_l: Fn(T.i32, [[Pointer(T.char), 'buffer'], [T.size_t, 'count'], [Pointer(T.char), 'format'], [T._locale_t, 'locale'], '...']),
    _vsnprintf: Fn(T.i32, [[Pointer(T.char), '_Dest'], [T.size_t, '_Count'], [Pointer(T.char), '_Format'], [T.va_list, '_Args']]),
    _vsnprintf_l: Fn(T.i32, [[Pointer(T.char), 'buffer'], [T.size_t, 'count'], [Pointer(T.char), 'format'], [T._locale_t, 'locale'], [T.va_list, 'argptr']]),
    _sprintf_l: Fn(T.i32, [[Pointer(T.char), 'buffer'], [Pointer(T.char), 'format'], [T._locale_t, 'locale'], '...']),
    vsnprintf: Fn(T.i32, [[Pointer(T.char), 'd'], [T.size_t, 'n'], [Pointer(T.char), 'format'], [T.va_list, 'arg']]),
    snprintf: Fn(T.i32, [[Pointer(T.char), 's'], [T.size_t, 'n'], [Pointer(T.char), 'format'], '...']),
    _vscprintf: Fn(T.i32, [[Pointer(T.char), '_Format'], [T.va_list, '_ArgList']]),
    _set_printf_count_output: Fn(T.i32, [[T.i32, '_Value']]),
    _get_printf_count_output: Fn(T.i32, [[null]]),
    __mingw_swscanf: Fn(T.i32, [[Pointer(T.wchar_t), '_Src'], [Pointer(T.wchar_t), '_Format'], '...']),
    __mingw_vswscanf: Fn(T.i32, [[Pointer(T.wchar_t), '_Str'], [Pointer(T.wchar_t), 'Format'], [T.va_list, 'argp']]),
    __mingw_wscanf: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...']),
    __mingw_vwscanf: Fn(T.i32, [[Pointer(T.wchar_t), 'Format'], [T.va_list, 'argp']]),
    __mingw_fwscanf: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], '...']),
    __mingw_vfwscanf: Fn(T.i32, [[Pointer(T.FILE), 'fp'], [Pointer(T.wchar_t), 'Format'], [T.va_list, 'argp']]),
    __mingw_fwprintf: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], '...']),
    __mingw_wprintf: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...']),
    __mingw_vfwprintf: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']]),
    __mingw_vwprintf: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']]),
    __mingw_swprintf: Fn(T.i32, [[Pointer(T.wchar_t)], [Pointer(T.wchar_t)], '...']),
    __mingw_vswprintf: Fn(T.i32, [[Pointer(T.wchar_t)], [Pointer(T.wchar_t)], [T.va_list]]),
    __mingw_snwprintf: Fn(T.i32, [[Pointer(T.wchar_t), 's'], [T.size_t, 'n'], [Pointer(T.wchar_t), 'format'], '...']),
    __mingw_vsnwprintf: Fn(T.i32, [[Pointer(T.wchar_t)], [T.size_t], [Pointer(T.wchar_t)], [T.va_list]]),
    fwscanf: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], '...']),
    swscanf: Fn(T.i32, [[Pointer(T.wchar_t), '_Src'], [Pointer(T.wchar_t), '_Format'], '...']),
    wscanf: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...']),
    vwscanf: Fn(T.i32, [[Pointer(T.wchar_t)], [T.va_list]]),
    vfwscanf: Fn(T.i32, [[Pointer(T.FILE)], [Pointer(T.wchar_t)], [T.va_list]]),
    vswscanf: Fn(T.i32, [[Pointer(T.wchar_t)], [Pointer(T.wchar_t)], [T.va_list]]),
    fwprintf: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], '...']),
    wprintf: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...']),
    vfwprintf: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']]),
    vwprintf: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']]),
    swprintf: Fn(T.i32, [[Pointer(T.wchar_t)], [Pointer(T.wchar_t)], '...']),
    vswprintf: Fn(T.i32, [[Pointer(T.wchar_t)], [Pointer(T.wchar_t)], [T.va_list]]),
    _wfsopen: Fn(Pointer(T.FILE), [[Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_Mode'], [T.i32, '_ShFlag']]),
    fgetwc: Fn(T.wint_t, [[Pointer(T.FILE), '_File']]),
    _fgetwchar: Fn(T.wint_t, [[null]]),
    fputwc: Fn(T.wint_t, [[T.wchar_t, '_Ch'], [Pointer(T.FILE), '_File']]),
    _fputwchar: Fn(T.wint_t, [[T.wchar_t, '_Ch']]),
    getwc: Fn(T.wint_t, [[Pointer(T.FILE), '_File']]),
    getwchar: Fn(T.wint_t, [[null]]),
    putwc: Fn(T.wint_t, [[T.wchar_t, '_Ch'], [Pointer(T.FILE), '_File']]),
    putwchar: Fn(T.wint_t, [[T.wchar_t, '_Ch']]),
    ungetwc: Fn(T.wint_t, [[T.wint_t, '_Ch'], [Pointer(T.FILE), '_File']]),
    fgetws: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Dst'], [T.i32, '_SizeInWords'], [Pointer(T.FILE), '_File']]),
    fputws: Fn(T.i32, [[Pointer(T.wchar_t), '_Str'], [Pointer(T.FILE), '_File']]),
    _getws: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_String']]),
    _putws: Fn(T.i32, [[Pointer(T.wchar_t), '_Str']]),
    _scwprintf: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...']),
    _swprintf_l: Fn(T.i32, [[Pointer(T.wchar_t), 'buffer'], [T.size_t, 'count'], [Pointer(T.wchar_t), 'format'], [T._locale_t, 'locale'], '...']),
    _swprintf_c: Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_SizeInWords'], [Pointer(T.wchar_t), '_Format'], '...']),
    _vswprintf_c: Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_SizeInWords'], [Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']]),
    _snwprintf: Fn(T.i32, [[Pointer(T.wchar_t), '_Dest'], [T.size_t, '_Count'], [Pointer(T.wchar_t), '_Format'], '...']),
    _vsnwprintf: Fn(T.i32, [[Pointer(T.wchar_t), '_Dest'], [T.size_t, '_Count'], [Pointer(T.wchar_t), '_Format'], [T.va_list, '_Args']]),
    snwprintf: Fn(T.i32, [[Pointer(T.wchar_t), 's'], [T.size_t, 'n'], [Pointer(T.wchar_t), 'format'], '...']),
    vsnwprintf: Fn(T.i32, [[Pointer(T.wchar_t)], [T.size_t], [Pointer(T.wchar_t)], [T.va_list]]),
    _fwprintf_p: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], '...']),
    _wprintf_p: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...']),
    _vfwprintf_p: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']]),
    _vwprintf_p: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']]),
    _swprintf_p: Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], '...']),
    _vswprintf_p: Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']]),
    _scwprintf_p: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], '...']),
    _vscwprintf_p: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']]),
    _wprintf_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...']),
    _wprintf_p_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...']),
    _vwprintf_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']]),
    _vwprintf_p_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']]),
    _fwprintf_l: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...']),
    _fwprintf_p_l: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...']),
    _vfwprintf_l: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']]),
    _vfwprintf_p_l: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']]),
    _swprintf_c_l: Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...']),
    _swprintf_p_l: Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...']),
    _vswprintf_c_l: Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']]),
    _vswprintf_p_l: Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']]),
    _scwprintf_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...']),
    _scwprintf_p_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...']),
    _vscwprintf_p_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']]),
    _snwprintf_l: Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...']),
    _vsnwprintf_l: Fn(T.i32, [[Pointer(T.wchar_t), '_DstBuf'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']]),
    _swprintf: Fn(T.i32, [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Format'], '...']),
    _vswprintf: Fn(T.i32, [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Format'], [T.va_list, '_Args']]),
    __swprintf_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Plocinfo'], '...']),
    _vswprintf_l: Fn(T.i32, [[Pointer(T.wchar_t), 'buffer'], [T.size_t, 'count'], [Pointer(T.wchar_t), 'format'], [T._locale_t, 'locale'], [T.va_list, 'argptr']]),
    __vswprintf_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Dest'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Plocinfo'], [T.va_list, '_Args']]),
    _wtempnam: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Directory'], [Pointer(T.wchar_t), '_FilePrefix']]),
    _vscwprintf: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T.va_list, '_ArgList']]),
    _vscwprintf_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], [T.va_list, '_ArgList']]),
    _fwscanf_l: Fn(T.i32, [[Pointer(T.FILE), '_File'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...']),
    _swscanf_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Src'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...']),
    _snwscanf: Fn(T.i32, [[Pointer(T.wchar_t), '_Src'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], '...']),
    _snwscanf_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Src'], [T.size_t, '_MaxCount'], [Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...']),
    _wscanf_l: Fn(T.i32, [[Pointer(T.wchar_t), '_Format'], [T._locale_t, '_Locale'], '...']),
    _wfdopen: Fn(Pointer(T.FILE), [[T.i32, '_FileHandle'], [Pointer(T.wchar_t), '_Mode']]),
    _wfopen: Fn(Pointer(T.FILE), [[Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_Mode']]),
    _wfreopen: Fn(Pointer(T.FILE), [[Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_Mode'], [Pointer(T.FILE), '_OldFile']]),
    _wpopen: Fn(Pointer(T.FILE), [[Pointer(T.wchar_t), '_Command'], [Pointer(T.wchar_t), '_Mode']]),
    _wremove: Fn(T.i32, [[Pointer(T.wchar_t), '_Filename']]),
    _wtmpnam: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_Buffer']]),
    _fgetwc_nolock: Fn(T.wint_t, [[Pointer(T.FILE), '_File']]),
    _fputwc_nolock: Fn(T.wint_t, [[T.wchar_t, '_Ch'], [Pointer(T.FILE), '_File']]),
    _ungetwc_nolock: Fn(T.wint_t, [[T.wint_t, '_Ch'], [Pointer(T.FILE), '_File']]),
    _lock_file: Fn(null, [[Pointer(T.FILE), '_File']]),
    _unlock_file: Fn(null, [[Pointer(T.FILE), '_File']]),
    _fclose_nolock: Fn(T.i32, [[Pointer(T.FILE), '_File']]),
    _fflush_nolock: Fn(T.i32, [[Pointer(T.FILE), '_File']]),
    _fread_nolock: Fn(T.size_t, [[Pointer(null), '_DstBuf'], [T.size_t, '_ElementSize'], [T.size_t, '_Count'], [Pointer(T.FILE), '_File']]),
    _fseek_nolock: Fn(T.i32, [[Pointer(T.FILE), '_File'], [T.i32, '_Offset'], [T.i32, '_Origin']]),
    _ftell_nolock: Fn(T.i32, [[Pointer(T.FILE), '_File']]),
    _fseeki64_nolock: Fn(T.i32, [[Pointer(T.FILE), '_File'], [T.i64, '_Offset'], [T.i32, '_Origin']]),
    _ftelli64_nolock: Fn(T.i64, [[Pointer(T.FILE), '_File']]),
    _fwrite_nolock: Fn(T.size_t, [[Pointer(null), '_DstBuf'], [T.size_t, '_Size'], [T.size_t, '_Count'], [Pointer(T.FILE), '_File']]),
    _ungetc_nolock: Fn(T.i32, [[T.i32, '_Ch'], [Pointer(T.FILE), '_File']]),
    tempnam: Fn(Pointer(T.char), [[Pointer(T.char), '_Directory'], [Pointer(T.char), '_FilePrefix']]),
    fcloseall: Fn(T.i32, [[null]]),
    fdopen: Fn(Pointer(T.FILE), [[T.i32, '_FileHandle'], [Pointer(T.char), '_Format']]),
    fgetchar: Fn(T.i32, [[null]]),
    fileno: Fn(T.i32, [[Pointer(T.FILE), '_File']]),
    flushall: Fn(T.i32, [[null]]),
    fputchar: Fn(T.i32, [[T.i32, '_Ch']]),
    getw: Fn(T.i32, [[Pointer(T.FILE), '_File']]),
    putw: Fn(T.i32, [[T.i32, '_Ch'], [Pointer(T.FILE), '_File']]),
    rmtmp: Fn(T.i32, [[null]]),
    __mingw_str_wide_utf8: Fn(T.i32, [[Pointer(T.wchar_t), 'wptr'], [Pointer(Pointer(T.char)), 'mbptr'], [Pointer(T.size_t), 'buflen']]),
    __mingw_str_utf8_wide: Fn(T.i32, [[Pointer(T.char), 'mbptr'], [Pointer(Pointer(T.wchar_t)), 'wptr'], [Pointer(T.size_t), 'buflen']]),
    __mingw_str_free: Fn(null, [[Pointer(null), 'ptr']]),
    _getcwd: Fn(Pointer(T.char), [[Pointer(T.char)], [T.i32]]),
    _access: Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_AccessMode']]),
    _chmod: Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_Mode']]),
    _chsize: Fn(T.i32, [[T.i32, '_FileHandle'], [T.i32, '_Size']]),
    _close: Fn(T.i32, [[T.i32, '_FileHandle']]),
    _commit: Fn(T.i32, [[T.i32, '_FileHandle']]),
    _creat: Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_PermissionMode']]),
    _dup: Fn(T.i32, [[T.i32, '_FileHandle']]),
    _dup2: Fn(T.i32, [[T.i32, '_FileHandleSrc'], [T.i32, '_FileHandleDst']]),
    _eof: Fn(T.i32, [[T.i32, '_FileHandle']]),
    _filelength: Fn(T.i32, [[T.i32, '_FileHandle']]),
    _findfirst: Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(Struct('_finddata32_t', null)), '_FindData']]),
    _findnext: Fn(T.i32, [[T.intptr_t, '_FindHandle'], [Pointer(Struct('_finddata32_t', null)), '_FindData']]),
    _findclose: Fn(T.i32, [[T.intptr_t, '_FindHandle']]),
    _isatty: Fn(T.i32, [[T.i32, '_FileHandle']]),
    _locking: Fn(T.i32, [[T.i32, '_FileHandle'], [T.i32, '_LockMode'], [T.i32, '_NumOfBytes']]),
    _lseek: Fn(T.i32, [[T.i32, '_FileHandle'], [T.i32, '_Offset'], [T.i32, '_Origin']]),
    lseek64: Fn(T._off64_t, [[T.i32, 'fd'], [T._off64_t, 'offset'], [T.i32, 'whence']]),
    _mktemp: Fn(Pointer(T.char), [[Pointer(T.char), '_TemplateName']]),
    _pipe: Fn(T.i32, [[Pointer(T.i32), '_PtHandles'], [T.u32, '_PipeSize'], [T.i32, '_TextMode']]),
    _read: Fn(T.i32, [[T.i32, '_FileHandle'], [Pointer(null), '_DstBuf'], [T.u32, '_MaxCharCount']]),
    _setmode: Fn(T.i32, [[T.i32, '_FileHandle'], [T.i32, '_Mode']]),
    _tell: Fn(T.i32, [[T.i32, '_FileHandle']]),
    _umask: Fn(T.i32, [[T.i32, '_Mode']]),
    _write: Fn(T.i32, [[T.i32, '_FileHandle'], [Pointer(null), '_Buf'], [T.u32, '_MaxCharCount']]),
    _filelengthi64: Fn(T.i64, [[T.i32, '_FileHandle']]),
    _findfirst32i64: Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(Struct('_finddata32i64_t', null)), '_FindData']]),
    _findfirst64: Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(Struct('__finddata64_t', null)), '_FindData']]),
    _findfirst64i32: Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(Struct('_finddata64i32_t', null)), '_FindData']]),
    _findnext32i64: Fn(T.i32, [[T.intptr_t, '_FindHandle'], [Pointer(Struct('_finddata32i64_t', null)), '_FindData']]),
    _findnext64: Fn(T.i32, [[T.intptr_t, '_FindHandle'], [Pointer(Struct('__finddata64_t', null)), '_FindData']]),
    _findnext64i32: Fn(T.i32, [[T.intptr_t, '_FindHandle'], [Pointer(Struct('_finddata64i32_t', null)), '_FindData']]),
    _lseeki64: Fn(T.i64, [[T.i32, '_FileHandle'], [T.i64, '_Offset'], [T.i32, '_Origin']]),
    _telli64: Fn(T.i64, [[T.i32, '_FileHandle']]),
    chdir: Fn(T.i32, [[Pointer(T.char)]]),
    getcwd: Fn(Pointer(T.char), [[Pointer(T.char)], [T.i32]]),
    mkdir: Fn(T.i32, [[Pointer(T.char)]]),
    mktemp: Fn(Pointer(T.char), [[Pointer(T.char), '_TemplateName']]),
    rmdir: Fn(T.i32, [[Pointer(T.char)]]),
    chmod: Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_AccessMode']]),
    _sopen_s: Fn(T.errno_t, [[Pointer(T.i32), '_FileHandle'], [Pointer(T.char), '_Filename'], [T.i32, '_OpenFlag'], [T.i32, '_ShareFlag'], [T.i32, '_PermissionMode']]),
    _open: Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_OpenFlag'], '...']),
    _sopen: Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_OpenFlag'], [T.i32, '_ShareFlag'], '...']),
    _waccess: Fn(T.i32, [[Pointer(T.wchar_t), '_Filename'], [T.i32, '_AccessMode']]),
    _wchmod: Fn(T.i32, [[Pointer(T.wchar_t), '_Filename'], [T.i32, '_Mode']]),
    _wcreat: Fn(T.i32, [[Pointer(T.wchar_t), '_Filename'], [T.i32, '_PermissionMode']]),
    _wfindfirst: Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(Struct('_wfinddata32_t', null)), '_FindData']]),
    _wfindnext: Fn(T.i32, [[T.intptr_t, '_FindHandle'], [Pointer(Struct('_wfinddata32_t', null)), '_FindData']]),
    _wunlink: Fn(T.i32, [[Pointer(T.wchar_t), '_Filename']]),
    _wrename: Fn(T.i32, [[Pointer(T.wchar_t), '_OldFilename'], [Pointer(T.wchar_t), '_NewFilename']]),
    _wmktemp: Fn(Pointer(T.wchar_t), [[Pointer(T.wchar_t), '_TemplateName']]),
    _wfindfirsti64: Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(Struct('_wfinddata32i64_t', null)), '_FindData']]),
    _wfindfirst64i32: Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(Struct('_wfinddata64i32_t', null)), '_FindData']]),
    _wfindfirst64: Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(Struct('_wfinddata64_t', null)), '_FindData']]),
    _wfindnexti64: Fn(T.i32, [[T.intptr_t, '_FindHandle'], [Pointer(Struct('_wfinddata32i64_t', null)), '_FindData']]),
    _wfindnext64i32: Fn(T.i32, [[T.intptr_t, '_FindHandle'], [Pointer(Struct('_wfinddata64i32_t', null)), '_FindData']]),
    _wfindnext64: Fn(T.i32, [[T.intptr_t, '_FindHandle'], [Pointer(Struct('_wfinddata64_t', null)), '_FindData']]),
    _wsopen_s: Fn(T.errno_t, [[Pointer(T.i32), '_FileHandle'], [Pointer(T.wchar_t), '_Filename'], [T.i32, '_OpenFlag'], [T.i32, '_ShareFlag'], [T.i32, '_PermissionFlag']]),
    _wopen: Fn(T.i32, [[Pointer(T.wchar_t), '_Filename'], [T.i32, '_OpenFlag'], '...']),
    _wsopen: Fn(T.i32, [[Pointer(T.wchar_t), '_Filename'], [T.i32, '_OpenFlag'], [T.i32, '_ShareFlag'], '...']),
    __lock_fhandle: Fn(T.i32, [[T.i32, '_Filehandle']]),
    _unlock_fhandle: Fn(null, [[T.i32, '_Filehandle']]),
    _get_osfhandle: Fn(T.intptr_t, [[T.i32, '_FileHandle']]),
    _open_osfhandle: Fn(T.i32, [[T.intptr_t, '_OSFileHandle'], [T.i32, '_Flags']]),
    access: Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_AccessMode']]),
    chsize: Fn(T.i32, [[T.i32, '_FileHandle'], [T.i32, '_Size']]),
    close: Fn(T.i32, [[T.i32, '_FileHandle']]),
    creat: Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_PermissionMode']]),
    dup: Fn(T.i32, [[T.i32, '_FileHandle']]),
    dup2: Fn(T.i32, [[T.i32, '_FileHandleSrc'], [T.i32, '_FileHandleDst']]),
    eof: Fn(T.i32, [[T.i32, '_FileHandle']]),
    filelength: Fn(T.i32, [[T.i32, '_FileHandle']]),
    isatty: Fn(T.i32, [[T.i32, '_FileHandle']]),
    locking: Fn(T.i32, [[T.i32, '_FileHandle'], [T.i32, '_LockMode'], [T.i32, '_NumOfBytes']]),
    lseek: Fn(T.i32, [[T.i32, '_FileHandle'], [T.i32, '_Offset'], [T.i32, '_Origin']]),
    open: Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_OpenFlag'], '...']),
    read: Fn(T.i32, [[T.i32, '_FileHandle'], [Pointer(null), '_DstBuf'], [T.u32, '_MaxCharCount']]),
    setmode: Fn(T.i32, [[T.i32, '_FileHandle'], [T.i32, '_Mode']]),
    sopen: Fn(T.i32, [[Pointer(T.char), '_Filename'], [T.i32, '_OpenFlag'], [T.i32, '_ShareFlag'], '...']),
    tell: Fn(T.i32, [[T.i32, '_FileHandle']]),
    umask: Fn(T.i32, [[T.i32, '_Mode']]),
    write: Fn(T.i32, [[T.i32, '_Filehandle'], [Pointer(null), '_Buf'], [T.u32, '_MaxCharCount']]),
    _beginthread: Fn(T.uintptr_t, [[Pointer(Fn(null, [[Pointer(null)]])), '_StartAddress'], [T.u32, '_StackSize'], [Pointer(null), '_ArgList']]),
    _endthread: Fn(null, [[null]]),
    _beginthreadex: Fn(T.uintptr_t, [[Pointer(null), '_Security'], [T.u32, '_StackSize'], [Pointer(Fn(T.u32, [[Pointer(null)]])), '_StartAddress'], [Pointer(null), '_ArgList'], [T.u32, '_InitFlag'], [Pointer(T.u32), '_ThrdAddr']]),
    _endthreadex: Fn(null, [[T.u32, '_Retval']]),
    _cexit: Fn(null, [[null]]),
    _c_exit: Fn(null, [[null]]),
    _getpid: Fn(T.i32, [[null]]),
    _cwait: Fn(T.intptr_t, [[Pointer(T.i32), '_TermStat'], [T.intptr_t, '_ProcHandle'], [T.i32, '_Action']]),
    _execl: Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...']),
    _execle: Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...']),
    _execlp: Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...']),
    _execlpe: Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...']),
    _execv: Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList']]),
    _execve: Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList'], [Pointer(Pointer(T.char)), '_Env']]),
    _execvp: Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList']]),
    _execvpe: Fn(T.intptr_t, [[Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList'], [Pointer(Pointer(T.char)), '_Env']]),
    _spawnl: Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...']),
    _spawnle: Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...']),
    _spawnlp: Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...']),
    _spawnlpe: Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...']),
    _spawnv: Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList']]),
    _spawnve: Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList'], [Pointer(Pointer(T.char)), '_Env']]),
    _spawnvp: Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList']]),
    _spawnvpe: Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList'], [Pointer(Pointer(T.char)), '_Env']]),
    _wexecl: Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_ArgList'], '...']),
    _wexecle: Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_ArgList'], '...']),
    _wexeclp: Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_ArgList'], '...']),
    _wexeclpe: Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_ArgList'], '...']),
    _wexecv: Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(Pointer(T.wchar_t)), '_ArgList']]),
    _wexecve: Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(Pointer(T.wchar_t)), '_ArgList'], [Pointer(Pointer(T.wchar_t)), '_Env']]),
    _wexecvp: Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(Pointer(T.wchar_t)), '_ArgList']]),
    _wexecvpe: Fn(T.intptr_t, [[Pointer(T.wchar_t), '_Filename'], [Pointer(Pointer(T.wchar_t)), '_ArgList'], [Pointer(Pointer(T.wchar_t)), '_Env']]),
    _wspawnl: Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_ArgList'], '...']),
    _wspawnle: Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_ArgList'], '...']),
    _wspawnlp: Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_ArgList'], '...']),
    _wspawnlpe: Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.wchar_t), '_Filename'], [Pointer(T.wchar_t), '_ArgList'], '...']),
    _wspawnv: Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.wchar_t), '_Filename'], [Pointer(Pointer(T.wchar_t)), '_ArgList']]),
    _wspawnve: Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.wchar_t), '_Filename'], [Pointer(Pointer(T.wchar_t)), '_ArgList'], [Pointer(Pointer(T.wchar_t)), '_Env']]),
    _wspawnvp: Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.wchar_t), '_Filename'], [Pointer(Pointer(T.wchar_t)), '_ArgList']]),
    _wspawnvpe: Fn(T.intptr_t, [[T.i32, '_Mode'], [Pointer(T.wchar_t), '_Filename'], [Pointer(Pointer(T.wchar_t)), '_ArgList'], [Pointer(Pointer(T.wchar_t)), '_Env']]),
    __security_init_cookie: Fn(null, [[null]]),
    __security_check_cookie: Fn(null, [[T.uintptr_t, '_StackCookie']]),
    __report_gsfailure: Fn(null, [[null]]),
    __security_cookie: T.uintptr_t,
    _loaddll: Fn(T.intptr_t, [[Pointer(T.char), '_Filename']]),
    _unloaddll: Fn(T.i32, [[T.intptr_t, '_Handle']]),
    _getdllprocaddr: Fn(Pointer(Fn(T.i32, [[null]])), [[T.intptr_t, '_Handle'], [Pointer(T.char), '_ProcedureName'], [T.intptr_t, '_Ordinal']]),
    cwait: Fn(T.intptr_t, [[Pointer(T.i32), '_TermStat'], [T.intptr_t, '_ProcHandle'], [T.i32, '_Action']]),
    execl: Fn(T.i32, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...']),
    execle: Fn(T.i32, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...']),
    execlp: Fn(T.i32, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...']),
    execlpe: Fn(T.i32, [[Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...']),
    spawnl: Fn(T.intptr_t, [[T.i32], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...']),
    spawnle: Fn(T.intptr_t, [[T.i32], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...']),
    spawnlp: Fn(T.intptr_t, [[T.i32], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...']),
    spawnlpe: Fn(T.intptr_t, [[T.i32], [Pointer(T.char), '_Filename'], [Pointer(T.char), '_ArgList'], '...']),
    getpid: Fn(T.i32, [[null]]),
    execv: Fn(T.i32, [[Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList']]),
    execve: Fn(T.i32, [[Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList'], [Pointer(Pointer(T.char)), '_Env']]),
    execvp: Fn(T.i32, [[Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList']]),
    execvpe: Fn(T.i32, [[Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList'], [Pointer(Pointer(T.char)), '_Env']]),
    spawnv: Fn(T.intptr_t, [[T.i32], [Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList']]),
    spawnve: Fn(T.intptr_t, [[T.i32], [Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList'], [Pointer(Pointer(T.char)), '_Env']]),
    spawnvp: Fn(T.intptr_t, [[T.i32], [Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList']]),
    spawnvpe: Fn(T.intptr_t, [[T.i32], [Pointer(T.char), '_Filename'], [Pointer(Pointer(T.char)), '_ArgList'], [Pointer(Pointer(T.char)), '_Env']]),
    optind: T.i32,
    optopt: T.i32,
    opterr: T.i32,
    optarg: Pointer(T.char),
    getopt: Fn(T.i32, [[T.i32, 'nargc'], [Pointer(Pointer(T.char)), 'nargv'], [Pointer(T.char), 'options']]),
    usleep: Fn(T.i32, [[T.useconds_t, 'useconds']]),
    ftruncate: Fn(T.i32, [[T.i32], [T.off32_t]]),
    ftruncate64: Fn(T.i32, [[T.i32], [T.off64_t]]),
    truncate: Fn(T.i32, [[Pointer(T.char)], [T.off32_t]]),
    truncate64: Fn(T.i32, [[Pointer(T.char)], [T.off64_t]]),
    ShowHideMenuCtl: Fn(T.BOOL, [[T.HWND], [T.UINT_PTR], [T.LPINT]]),
    GetEffectiveClientRect: Fn(null, [[T.HWND], [T.LPRECT], [Pointer(T.INT)]]),
    InitCommonControls: Fn(null, [[null]]),
    InitCommonControlsEx: Fn(T.BOOL, [[Pointer(T.INITCOMMONCONTROLSEX)]]),
    GetMUILanguage: Fn(T.LANGID, [[null]]),
    InitMUILanguage: Fn(null, [[T.LANGID, 'uiLang']]),
    CreateStatusWindowA: Fn(T.HWND, [[T.LONG], [T.LPCSTR], [T.HWND], [T.UINT]]),
    CreateStatusWindowW: Fn(T.HWND, [[T.LONG], [T.LPCWSTR], [T.HWND], [T.UINT]]),
    DrawStatusTextA: Fn(null, [[T.HDC], [T.LPCRECT], [T.LPCSTR], [T.UINT]]),
    DrawStatusTextW: Fn(null, [[T.HDC], [T.LPCRECT], [T.LPCWSTR], [T.UINT]]),
    MenuHelp: Fn(null, [[T.UINT], [T.WPARAM], [T.LPARAM], [T.HMENU], [T.HINSTANCE], [T.HWND], [Pointer(T.UINT)]]),
    MakeDragList: Fn(T.BOOL, [[T.HWND]]),
    DrawInsert: Fn(null, [[T.HWND], [T.HWND], [T.INT]]),
    LBItemFromPt: Fn(T.INT, [[T.HWND], [T.POINT], [T.BOOL]]),
    CreateUpDownControl: Fn(T.HWND, [[T.DWORD], [T.INT], [T.INT], [T.INT], [T.INT], [T.HWND], [T.INT], [T.HINSTANCE], [T.HWND], [T.INT], [T.INT], [T.INT]]),
    HIMAGELIST_QueryInterface: Fn(T.HRESULT, [[T.HIMAGELIST], [Pointer(T.IID)], [Pointer(Pointer(null))]]),
    ImageList_Add: Fn(T.INT, [[T.HIMAGELIST], [T.HBITMAP], [T.HBITMAP]]),
    ImageList_AddMasked: Fn(T.INT, [[T.HIMAGELIST], [T.HBITMAP], [T.COLORREF]]),
    ImageList_BeginDrag: Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.INT], [T.INT]]),
    ImageList_Copy: Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.HIMAGELIST], [T.INT], [T.UINT]]),
    ImageList_Create: Fn(T.HIMAGELIST, [[T.INT], [T.INT], [T.UINT], [T.INT], [T.INT]]),
    ImageList_Destroy: Fn(T.BOOL, [[T.HIMAGELIST]]),
    ImageList_DragEnter: Fn(T.BOOL, [[T.HWND], [T.INT], [T.INT]]),
    ImageList_DragLeave: Fn(T.BOOL, [[T.HWND]]),
    ImageList_DragMove: Fn(T.BOOL, [[T.INT], [T.INT]]),
    ImageList_DragShowNolock: Fn(T.BOOL, [[T.BOOL]]),
    ImageList_Draw: Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.HDC], [T.INT], [T.INT], [T.UINT]]),
    ImageList_DrawEx: Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.HDC], [T.INT], [T.INT], [T.INT], [T.INT], [T.COLORREF], [T.COLORREF], [T.UINT]]),
    ImageList_DrawIndirect: Fn(T.BOOL, [[Pointer(T.IMAGELISTDRAWPARAMS)]]),
    ImageList_Duplicate: Fn(T.HIMAGELIST, [[T.HIMAGELIST]]),
    ImageList_EndDrag: Fn(null, [[null]]),
    ImageList_GetBkColor: Fn(T.COLORREF, [[T.HIMAGELIST]]),
    ImageList_GetDragImage: Fn(T.HIMAGELIST, [[Pointer(T.POINT)], [Pointer(T.POINT)]]),
    ImageList_GetIcon: Fn(T.HICON, [[T.HIMAGELIST], [T.INT], [T.UINT]]),
    ImageList_GetIconSize: Fn(T.BOOL, [[T.HIMAGELIST], [Pointer(T.INT)], [Pointer(T.INT)]]),
    ImageList_GetImageCount: Fn(T.INT, [[T.HIMAGELIST]]),
    ImageList_GetImageInfo: Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [Pointer(T.IMAGEINFO)]]),
    ImageList_GetImageRect: Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.LPRECT]]),
    ImageList_LoadImageA: Fn(T.HIMAGELIST, [[T.HINSTANCE], [T.LPCSTR], [T.INT], [T.INT], [T.COLORREF], [T.UINT], [T.UINT]]),
    ImageList_LoadImageW: Fn(T.HIMAGELIST, [[T.HINSTANCE], [T.LPCWSTR], [T.INT], [T.INT], [T.COLORREF], [T.UINT], [T.UINT]]),
    ImageList_Merge: Fn(T.HIMAGELIST, [[T.HIMAGELIST], [T.INT], [T.HIMAGELIST], [T.INT], [T.INT], [T.INT]]),
    ImageList_Remove: Fn(T.BOOL, [[T.HIMAGELIST], [T.INT]]),
    ImageList_Replace: Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.HBITMAP], [T.HBITMAP]]),
    ImageList_ReplaceIcon: Fn(T.INT, [[T.HIMAGELIST], [T.INT], [T.HICON]]),
    ImageList_SetBkColor: Fn(T.COLORREF, [[T.HIMAGELIST], [T.COLORREF]]),
    ImageList_SetDragCursorImage: Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.INT], [T.INT]]),
    ImageList_SetIconSize: Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.INT]]),
    ImageList_SetImageCount: Fn(T.BOOL, [[T.HIMAGELIST], [T.UINT]]),
    ImageList_SetOverlayImage: Fn(T.BOOL, [[T.HIMAGELIST], [T.INT], [T.INT]]),
    ImageList_Read: Fn(T.HIMAGELIST, [[T.LPSTREAM]]),
    ImageList_Write: Fn(T.BOOL, [[T.HIMAGELIST], [T.LPSTREAM]]),
    _TrackMouseEvent: Fn(T.BOOL, [[T.LPTRACKMOUSEEVENT, 'lpEventTrack']]),
    FlatSB_EnableScrollBar: Fn(T.BOOL, [[T.HWND], [T.INT], [T.UINT]]),
    FlatSB_ShowScrollBar: Fn(T.BOOL, [[T.HWND], [T.INT], [T.BOOL]]),
    FlatSB_GetScrollRange: Fn(T.BOOL, [[T.HWND], [T.INT], [T.LPINT], [T.LPINT]]),
    FlatSB_GetScrollInfo: Fn(T.BOOL, [[T.HWND], [T.INT], [T.LPSCROLLINFO]]),
    FlatSB_GetScrollPos: Fn(T.INT, [[T.HWND], [T.INT]]),
    FlatSB_GetScrollProp: Fn(T.BOOL, [[T.HWND], [T.INT], [T.LPINT]]),
    FlatSB_SetScrollPos: Fn(T.INT, [[T.HWND], [T.INT], [T.INT], [T.BOOL]]),
    FlatSB_SetScrollInfo: Fn(T.INT, [[T.HWND], [T.INT], [T.LPSCROLLINFO], [T.BOOL]]),
    FlatSB_SetScrollRange: Fn(T.INT, [[T.HWND], [T.INT], [T.INT], [T.INT], [T.BOOL]]),
    FlatSB_SetScrollProp: Fn(T.BOOL, [[T.HWND], [T.UINT], [T.INT], [T.BOOL]]),
    InitializeFlatSB: Fn(T.BOOL, [[T.HWND]]),
    UninitializeFlatSB: Fn(T.HRESULT, [[T.HWND]]),
    SetWindowSubclass: Fn(T.BOOL, [[T.HWND], [T.SUBCLASSPROC], [T.UINT_PTR], [T.DWORD_PTR]]),
    GetWindowSubclass: Fn(T.BOOL, [[T.HWND], [T.SUBCLASSPROC], [T.UINT_PTR], [Pointer(T.DWORD_PTR)]]),
    RemoveWindowSubclass: Fn(T.BOOL, [[T.HWND], [T.SUBCLASSPROC], [T.UINT_PTR]]),
    DefSubclassProc: Fn(T.LRESULT, [[T.HWND], [T.UINT], [T.WPARAM], [T.LPARAM]]),
    DrawShadowText: Fn(T.i32, [[T.HDC], [T.LPCWSTR], [T.UINT], [Pointer(T.RECT)], [T.DWORD], [T.COLORREF], [T.COLORREF], [T.i32], [T.i32]]),
    CreateToolbar: Fn(T.HWND, [[T.HWND], [T.DWORD], [T.UINT], [T.INT], [T.HINSTANCE], [T.UINT], [T.LPCTBBUTTON], [T.INT]]),
    CreateToolbarEx: Fn(T.HWND, [[T.HWND], [T.DWORD], [T.UINT], [T.INT], [T.HINSTANCE], [T.UINT_PTR], [T.LPCTBBUTTON], [T.INT], [T.INT], [T.INT], [T.INT], [T.INT], [T.UINT]]),
    CreateMappedBitmap: Fn(T.HBITMAP, [[T.HINSTANCE], [T.INT_PTR], [T.UINT], [T.LPCOLORMAP], [T.INT]]),
    DSA_Create: Fn(T.HDSA, [[T.INT], [T.INT]]),
    DSA_Destroy: Fn(T.BOOL, [[T.HDSA]]),
    DSA_DestroyCallback: Fn(null, [[T.HDSA], [T.PFNDSAENUMCALLBACK], [T.LPVOID]]),
    DSA_GetItemPtr: Fn(T.LPVOID, [[T.HDSA], [T.INT]]),
    DSA_InsertItem: Fn(T.INT, [[T.HDSA], [T.INT], [T.LPVOID]]),
    DPA_Create: Fn(T.HDPA, [[T.INT]]),
    DPA_Destroy: Fn(T.BOOL, [[T.HDPA]]),
    DPA_DeletePtr: Fn(T.LPVOID, [[T.HDPA], [T.INT]]),
    DPA_DeleteAllPtrs: Fn(T.BOOL, [[T.HDPA]]),
    DPA_SetPtr: Fn(T.BOOL, [[T.HDPA], [T.INT], [T.LPVOID]]),
    DPA_GetPtr: Fn(T.LPVOID, [[T.HDPA], [T.INT]]),
    DPA_GetPtrIndex: Fn(T.INT, [[T.HDPA], [T.LPCVOID]]),
    DPA_GetSize: Fn(T.ULONGLONG, [[T.HDPA]]),
    DPA_Grow: Fn(T.BOOL, [[T.HDPA], [T.INT]]),
    DPA_InsertPtr: Fn(T.INT, [[T.HDPA], [T.INT], [T.LPVOID]]),
    DPA_Sort: Fn(T.BOOL, [[T.HDPA], [T.PFNDPACOMPARE], [T.LPARAM]]),
    DPA_EnumCallback: Fn(null, [[T.HDPA], [T.PFNDPAENUMCALLBACK], [T.LPVOID]]),
    DPA_DestroyCallback: Fn(null, [[T.HDPA], [T.PFNDPAENUMCALLBACK], [T.LPVOID]]),
    DPA_Search: Fn(T.INT, [[T.HDPA], [T.LPVOID], [T.INT], [T.PFNDPACOMPARE], [T.LPARAM], [T.UINT]]),
    DPA_Merge: Fn(T.BOOL, [[T.HDPA], [T.HDPA], [T.DWORD], [T.PFNDPACOMPARE], [T.PFNDPAMERGE], [T.LPARAM]]),
    DPA_LoadStream: Fn(T.HRESULT, [[Pointer(T.HDPA)], [T.PFNDPASTREAM], [Pointer(Struct('IStream', null))], [T.LPVOID]]),
    DPA_SaveStream: Fn(T.HRESULT, [[T.HDPA], [T.PFNDPASTREAM], [Pointer(Struct('IStream', null))], [T.LPVOID]]),
    Str_SetPtrW: Fn(T.BOOL, [[Pointer(T.LPWSTR)], [T.LPCWSTR]]),
    TaskDialogIndirect: Fn(T.HRESULT, [[Pointer(T.TASKDIALOGCONFIG)], [Pointer(T.i32)], [Pointer(T.i32)], [Pointer(T.BOOL)]]),
    __p__commode: Fn(Pointer(T.u32), [[null]]),
    __p__fmode: Fn(Pointer(T.u32), [[null]]),
    __p__osver: Fn(Pointer(T.u32), [[null]]),
    __p__winmajor: Fn(Pointer(T.u32), [[null]]),
    __p__winminor: Fn(Pointer(T.u32), [[null]]),
    __p__winver: Fn(Pointer(T.u32), [[null]]),
    __p__acmdln: Fn(Pointer(Pointer(T.char)), [[null]]),
    __p__wcmdln: Fn(Pointer(Pointer(T.wchar_t)), [[null]]),
    __p___initenv: Fn(Pointer(Pointer(Pointer(T.char))), [[null]]),
    __p___winitenv: Fn(Pointer(Pointer(Pointer(T.wchar_t))), [[null]]),
    __p__timezone: Fn(Pointer(T.i32), [[null]]),
    _initterm: Fn(T.i32, [[Pointer(T._PVFV)], [Pointer(T._PVFV)]]),
    _initterm_e: Fn(T.i32, [[Pointer(T._PVFV)], [Pointer(T._PVFV)]])
};
